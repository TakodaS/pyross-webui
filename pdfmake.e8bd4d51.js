// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  var error;
  for (var i = 0; i < entry.length; i++) {
    try {
      newRequire(entry[i]);
    } catch (e) {
      // Save first error but execute all entries
      if (!error) {
        error = e;
      }
    }
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  parcelRequire = newRequire;

  if (error) {
    // throw error from earlier, _after updating parcelRequire_
    throw error;
  }

  return newRequire;
})({"../node_modules/pdfmake/build/pdfmake.js":[function(require,module,exports) {
var define;
var global = arguments[3];
var Buffer = require("buffer").Buffer;
var process = require("process");
var __dirname = "D:\\Austen\\azure-covid-modelling\\pyross-webui\\node_modules\\pdfmake\\build";
function _typeof4(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof4 = function _typeof4(obj) { return typeof obj; }; } else { _typeof4 = function _typeof4(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof4(obj); }

/*! pdfmake v0.1.68, @license MIT, @link http://pdfmake.org */
(function webpackUniversalModuleDefinition(root, factory) {
  if ((typeof exports === "undefined" ? "undefined" : _typeof4(exports)) === 'object' && (typeof module === "undefined" ? "undefined" : _typeof4(module)) === 'object') module.exports = factory();else if (typeof define === 'function' && define.amd) define([], factory);else {
    var a = factory();

    for (var i in a) {
      ((typeof exports === "undefined" ? "undefined" : _typeof4(exports)) === 'object' ? exports : root)[i] = a[i];
    }
  }
})(typeof self !== 'undefined' ? self : this, function () {
  return (
    /******/
    function (modules) {
      // webpackBootstrap

      /******/
      // The module cache

      /******/
      var installedModules = {};
      /******/

      /******/
      // The require function

      /******/

      function __webpack_require__(moduleId) {
        /******/

        /******/
        // Check if module is in cache

        /******/
        if (installedModules[moduleId]) {
          /******/
          return installedModules[moduleId].exports;
          /******/
        }
        /******/
        // Create a new module (and put it into the cache)

        /******/


        var module = installedModules[moduleId] = {
          /******/
          i: moduleId,

          /******/
          l: false,

          /******/
          exports: {}
          /******/

        };
        /******/

        /******/
        // Execute the module function

        /******/

        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
        /******/

        /******/
        // Flag the module as loaded

        /******/

        module.l = true;
        /******/

        /******/
        // Return the exports of the module

        /******/

        return module.exports;
        /******/
      }
      /******/

      /******/

      /******/
      // expose the modules object (__webpack_modules__)

      /******/


      __webpack_require__.m = modules;
      /******/

      /******/
      // expose the module cache

      /******/

      __webpack_require__.c = installedModules;
      /******/

      /******/
      // define getter function for harmony exports

      /******/

      __webpack_require__.d = function (exports, name, getter) {
        /******/
        if (!__webpack_require__.o(exports, name)) {
          /******/
          Object.defineProperty(exports, name, {
            enumerable: true,
            get: getter
          });
          /******/
        }
        /******/

      };
      /******/

      /******/
      // define __esModule on exports

      /******/


      __webpack_require__.r = function (exports) {
        /******/
        if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {
          /******/
          Object.defineProperty(exports, Symbol.toStringTag, {
            value: 'Module'
          });
          /******/
        }
        /******/


        Object.defineProperty(exports, '__esModule', {
          value: true
        });
        /******/
      };
      /******/

      /******/
      // create a fake namespace object

      /******/
      // mode & 1: value is a module id, require it

      /******/
      // mode & 2: merge all properties of value into the ns

      /******/
      // mode & 4: return value when already ns object

      /******/
      // mode & 8|1: behave like require

      /******/


      __webpack_require__.t = function (value, mode) {
        /******/
        if (mode & 1) value = __webpack_require__(value);
        /******/

        if (mode & 8) return value;
        /******/

        if (mode & 4 && _typeof4(value) === 'object' && value && value.__esModule) return value;
        /******/

        var ns = Object.create(null);
        /******/

        __webpack_require__.r(ns);
        /******/


        Object.defineProperty(ns, 'default', {
          enumerable: true,
          value: value
        });
        /******/

        if (mode & 2 && typeof value != 'string') for (var key in value) {
          __webpack_require__.d(ns, key, function (key) {
            return value[key];
          }.bind(null, key));
        }
        /******/

        return ns;
        /******/
      };
      /******/

      /******/
      // getDefaultExport function for compatibility with non-harmony modules

      /******/


      __webpack_require__.n = function (module) {
        /******/
        var getter = module && module.__esModule ?
        /******/
        function getDefault() {
          return module['default'];
        } :
        /******/
        function getModuleExports() {
          return module;
        };
        /******/

        __webpack_require__.d(getter, 'a', getter);
        /******/


        return getter;
        /******/
      };
      /******/

      /******/
      // Object.prototype.hasOwnProperty.call

      /******/


      __webpack_require__.o = function (object, property) {
        return Object.prototype.hasOwnProperty.call(object, property);
      };
      /******/

      /******/
      // __webpack_public_path__

      /******/


      __webpack_require__.p = "";
      /******/

      /******/

      /******/
      // Load entry module and return exports

      /******/

      return __webpack_require__(__webpack_require__.s = 300);
      /******/
    }(
    /************************************************************************/

    /******/
    [
    /* 0 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      function isString(variable) {
        return typeof variable === 'string' || variable instanceof String;
      }

      function isNumber(variable) {
        return typeof variable === 'number' || variable instanceof Number;
      }

      function isBoolean(variable) {
        return typeof variable === 'boolean';
      }

      function isArray(variable) {
        return Array.isArray(variable);
      }

      function isFunction(variable) {
        return typeof variable === 'function';
      }

      function isObject(variable) {
        return variable !== null && _typeof4(variable) === 'object';
      }

      function isNull(variable) {
        return variable === null;
      }

      function isUndefined(variable) {
        return variable === undefined;
      }

      function pack() {
        var result = {};

        for (var i = 0, l = arguments.length; i < l; i++) {
          var obj = arguments[i];

          if (obj) {
            for (var key in obj) {
              if (obj.hasOwnProperty(key)) {
                result[key] = obj[key];
              }
            }
          }
        }

        return result;
      }

      function offsetVector(vector, x, y) {
        switch (vector.type) {
          case 'ellipse':
          case 'rect':
            vector.x += x;
            vector.y += y;
            break;

          case 'line':
            vector.x1 += x;
            vector.x2 += x;
            vector.y1 += y;
            vector.y2 += y;
            break;

          case 'polyline':
            for (var i = 0, l = vector.points.length; i < l; i++) {
              vector.points[i].x += x;
              vector.points[i].y += y;
            }

            break;
        }
      }

      function fontStringify(key, val) {
        if (key === 'font') {
          return 'font';
        }

        return val;
      }

      function getNodeId(node) {
        if (node.id) {
          return node.id;
        }

        if (isArray(node.text)) {
          for (var i = 0, l = node.text.length; i < l; i++) {
            var n = node.text[i];
            var nodeId = getNodeId(n);

            if (nodeId) {
              return nodeId;
            }
          }
        }

        return null;
      }

      module.exports = {
        isString: isString,
        isNumber: isNumber,
        isBoolean: isBoolean,
        isArray: isArray,
        isFunction: isFunction,
        isObject: isObject,
        isNull: isNull,
        isUndefined: isUndefined,
        pack: pack,
        fontStringify: fontStringify,
        offsetVector: offsetVector,
        getNodeId: getNodeId
      };
      /***/
    },
    /* 1 */

    /***/
    function (module, exports, __webpack_require__) {
      var global = __webpack_require__(3);

      var getOwnPropertyDescriptor = __webpack_require__(54).f;

      var createNonEnumerableProperty = __webpack_require__(18);

      var redefine = __webpack_require__(25);

      var setGlobal = __webpack_require__(139);

      var copyConstructorProperties = __webpack_require__(200);

      var isForced = __webpack_require__(144);
      /*
        options.target      - name of the target object
        options.global      - target is the global object
        options.stat        - export as static methods of target
        options.proto       - export as prototype methods of target
        options.real        - real prototype method for the `pure` version
        options.forced      - export even if the native feature is available
        options.bind        - bind methods to the target, required for the `pure` version
        options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version
        options.unsafe      - use the simple assignment of property instead of delete + defineProperty
        options.sham        - add a flag to not completely full polyfills
        options.enumerable  - export as enumerable property
        options.noTargetGet - prevent calling a getter on target
      */


      module.exports = function (options, source) {
        var TARGET = options.target;
        var GLOBAL = options.global;
        var STATIC = options.stat;
        var FORCED, target, key, targetProperty, sourceProperty, descriptor;

        if (GLOBAL) {
          target = global;
        } else if (STATIC) {
          target = global[TARGET] || setGlobal(TARGET, {});
        } else {
          target = (global[TARGET] || {}).prototype;
        }

        if (target) for (key in source) {
          sourceProperty = source[key];

          if (options.noTargetGet) {
            descriptor = getOwnPropertyDescriptor(target, key);
            targetProperty = descriptor && descriptor.value;
          } else targetProperty = target[key];

          FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced); // contained in target

          if (!FORCED && targetProperty !== undefined) {
            if (_typeof4(sourceProperty) === _typeof4(targetProperty)) continue;
            copyConstructorProperties(sourceProperty, targetProperty);
          } // add a flag to not completely full polyfills


          if (options.sham || targetProperty && targetProperty.sham) {
            createNonEnumerableProperty(sourceProperty, 'sham', true);
          } // extend global


          redefine(target, key, sourceProperty, options);
        }
      };
      /***/

    },
    /* 2 */

    /***/
    function (module, exports, __webpack_require__) {
      ;

      (function (root, factory) {
        if (true) {
          // CommonJS
          module.exports = exports = factory();
        } else {}
      })(this, function () {
        /**
         * CryptoJS core components.
         */
        var CryptoJS = CryptoJS || function (Math, undefined) {
          /*
           * Local polyfil of Object.create
           */
          var create = Object.create || function () {
            function F() {}

            ;
            return function (obj) {
              var subtype;
              F.prototype = obj;
              subtype = new F();
              F.prototype = null;
              return subtype;
            };
          }();
          /**
           * CryptoJS namespace.
           */


          var C = {};
          /**
           * Library namespace.
           */

          var C_lib = C.lib = {};
          /**
           * Base object for prototypal inheritance.
           */

          var Base = C_lib.Base = function () {
            return {
              /**
               * Creates a new object that inherits from this object.
               *
               * @param {Object} overrides Properties to copy into the new object.
               *
               * @return {Object} The new object.
               *
               * @static
               *
               * @example
               *
               *     var MyType = CryptoJS.lib.Base.extend({
               *         field: 'value',
               *
               *         method: function () {
               *         }
               *     });
               */
              extend: function extend(overrides) {
                // Spawn
                var subtype = create(this); // Augment

                if (overrides) {
                  subtype.mixIn(overrides);
                } // Create default initializer


                if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {
                  subtype.init = function () {
                    subtype.$super.init.apply(this, arguments);
                  };
                } // Initializer's prototype is the subtype object


                subtype.init.prototype = subtype; // Reference supertype

                subtype.$super = this;
                return subtype;
              },

              /**
               * Extends this object and runs the init method.
               * Arguments to create() will be passed to init().
               *
               * @return {Object} The new object.
               *
               * @static
               *
               * @example
               *
               *     var instance = MyType.create();
               */
              create: function create() {
                var instance = this.extend();
                instance.init.apply(instance, arguments);
                return instance;
              },

              /**
               * Initializes a newly created object.
               * Override this method to add some logic when your objects are created.
               *
               * @example
               *
               *     var MyType = CryptoJS.lib.Base.extend({
               *         init: function () {
               *             // ...
               *         }
               *     });
               */
              init: function init() {},

              /**
               * Copies properties into this object.
               *
               * @param {Object} properties The properties to mix in.
               *
               * @example
               *
               *     MyType.mixIn({
               *         field: 'value'
               *     });
               */
              mixIn: function mixIn(properties) {
                for (var propertyName in properties) {
                  if (properties.hasOwnProperty(propertyName)) {
                    this[propertyName] = properties[propertyName];
                  }
                } // IE won't copy toString using the loop above


                if (properties.hasOwnProperty('toString')) {
                  this.toString = properties.toString;
                }
              },

              /**
               * Creates a copy of this object.
               *
               * @return {Object} The clone.
               *
               * @example
               *
               *     var clone = instance.clone();
               */
              clone: function clone() {
                return this.init.prototype.extend(this);
              }
            };
          }();
          /**
           * An array of 32-bit words.
           *
           * @property {Array} words The array of 32-bit words.
           * @property {number} sigBytes The number of significant bytes in this word array.
           */


          var WordArray = C_lib.WordArray = Base.extend({
            /**
             * Initializes a newly created word array.
             *
             * @param {Array} words (Optional) An array of 32-bit words.
             * @param {number} sigBytes (Optional) The number of significant bytes in the words.
             *
             * @example
             *
             *     var wordArray = CryptoJS.lib.WordArray.create();
             *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
             *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
             */
            init: function init(words, sigBytes) {
              words = this.words = words || [];

              if (sigBytes != undefined) {
                this.sigBytes = sigBytes;
              } else {
                this.sigBytes = words.length * 4;
              }
            },

            /**
             * Converts this word array to a string.
             *
             * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
             *
             * @return {string} The stringified word array.
             *
             * @example
             *
             *     var string = wordArray + '';
             *     var string = wordArray.toString();
             *     var string = wordArray.toString(CryptoJS.enc.Utf8);
             */
            toString: function toString(encoder) {
              return (encoder || Hex).stringify(this);
            },

            /**
             * Concatenates a word array to this word array.
             *
             * @param {WordArray} wordArray The word array to append.
             *
             * @return {WordArray} This word array.
             *
             * @example
             *
             *     wordArray1.concat(wordArray2);
             */
            concat: function concat(wordArray) {
              // Shortcuts
              var thisWords = this.words;
              var thatWords = wordArray.words;
              var thisSigBytes = this.sigBytes;
              var thatSigBytes = wordArray.sigBytes; // Clamp excess bits

              this.clamp(); // Concat

              if (thisSigBytes % 4) {
                // Copy one byte at a time
                for (var i = 0; i < thatSigBytes; i++) {
                  var thatByte = thatWords[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
                  thisWords[thisSigBytes + i >>> 2] |= thatByte << 24 - (thisSigBytes + i) % 4 * 8;
                }
              } else {
                // Copy one word at a time
                for (var i = 0; i < thatSigBytes; i += 4) {
                  thisWords[thisSigBytes + i >>> 2] = thatWords[i >>> 2];
                }
              }

              this.sigBytes += thatSigBytes; // Chainable

              return this;
            },

            /**
             * Removes insignificant bits.
             *
             * @example
             *
             *     wordArray.clamp();
             */
            clamp: function clamp() {
              // Shortcuts
              var words = this.words;
              var sigBytes = this.sigBytes; // Clamp

              words[sigBytes >>> 2] &= 0xffffffff << 32 - sigBytes % 4 * 8;
              words.length = Math.ceil(sigBytes / 4);
            },

            /**
             * Creates a copy of this word array.
             *
             * @return {WordArray} The clone.
             *
             * @example
             *
             *     var clone = wordArray.clone();
             */
            clone: function clone() {
              var clone = Base.clone.call(this);
              clone.words = this.words.slice(0);
              return clone;
            },

            /**
             * Creates a word array filled with random bytes.
             *
             * @param {number} nBytes The number of random bytes to generate.
             *
             * @return {WordArray} The random word array.
             *
             * @static
             *
             * @example
             *
             *     var wordArray = CryptoJS.lib.WordArray.random(16);
             */
            random: function random(nBytes) {
              var words = [];

              var r = function r(m_w) {
                var m_w = m_w;
                var m_z = 0x3ade68b1;
                var mask = 0xffffffff;
                return function () {
                  m_z = 0x9069 * (m_z & 0xFFFF) + (m_z >> 0x10) & mask;
                  m_w = 0x4650 * (m_w & 0xFFFF) + (m_w >> 0x10) & mask;
                  var result = (m_z << 0x10) + m_w & mask;
                  result /= 0x100000000;
                  result += 0.5;
                  return result * (Math.random() > .5 ? 1 : -1);
                };
              };

              for (var i = 0, rcache; i < nBytes; i += 4) {
                var _r = r((rcache || Math.random()) * 0x100000000);

                rcache = _r() * 0x3ade67b7;
                words.push(_r() * 0x100000000 | 0);
              }

              return new WordArray.init(words, nBytes);
            }
          });
          /**
           * Encoder namespace.
           */

          var C_enc = C.enc = {};
          /**
           * Hex encoding strategy.
           */

          var Hex = C_enc.Hex = {
            /**
             * Converts a word array to a hex string.
             *
             * @param {WordArray} wordArray The word array.
             *
             * @return {string} The hex string.
             *
             * @static
             *
             * @example
             *
             *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
             */
            stringify: function stringify(wordArray) {
              // Shortcuts
              var words = wordArray.words;
              var sigBytes = wordArray.sigBytes; // Convert

              var hexChars = [];

              for (var i = 0; i < sigBytes; i++) {
                var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
                hexChars.push((bite >>> 4).toString(16));
                hexChars.push((bite & 0x0f).toString(16));
              }

              return hexChars.join('');
            },

            /**
             * Converts a hex string to a word array.
             *
             * @param {string} hexStr The hex string.
             *
             * @return {WordArray} The word array.
             *
             * @static
             *
             * @example
             *
             *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
             */
            parse: function parse(hexStr) {
              // Shortcut
              var hexStrLength = hexStr.length; // Convert

              var words = [];

              for (var i = 0; i < hexStrLength; i += 2) {
                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << 24 - i % 8 * 4;
              }

              return new WordArray.init(words, hexStrLength / 2);
            }
          };
          /**
           * Latin1 encoding strategy.
           */

          var Latin1 = C_enc.Latin1 = {
            /**
             * Converts a word array to a Latin1 string.
             *
             * @param {WordArray} wordArray The word array.
             *
             * @return {string} The Latin1 string.
             *
             * @static
             *
             * @example
             *
             *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
             */
            stringify: function stringify(wordArray) {
              // Shortcuts
              var words = wordArray.words;
              var sigBytes = wordArray.sigBytes; // Convert

              var latin1Chars = [];

              for (var i = 0; i < sigBytes; i++) {
                var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
                latin1Chars.push(String.fromCharCode(bite));
              }

              return latin1Chars.join('');
            },

            /**
             * Converts a Latin1 string to a word array.
             *
             * @param {string} latin1Str The Latin1 string.
             *
             * @return {WordArray} The word array.
             *
             * @static
             *
             * @example
             *
             *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
             */
            parse: function parse(latin1Str) {
              // Shortcut
              var latin1StrLength = latin1Str.length; // Convert

              var words = [];

              for (var i = 0; i < latin1StrLength; i++) {
                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << 24 - i % 4 * 8;
              }

              return new WordArray.init(words, latin1StrLength);
            }
          };
          /**
           * UTF-8 encoding strategy.
           */

          var Utf8 = C_enc.Utf8 = {
            /**
             * Converts a word array to a UTF-8 string.
             *
             * @param {WordArray} wordArray The word array.
             *
             * @return {string} The UTF-8 string.
             *
             * @static
             *
             * @example
             *
             *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
             */
            stringify: function stringify(wordArray) {
              try {
                return decodeURIComponent(escape(Latin1.stringify(wordArray)));
              } catch (e) {
                throw new Error('Malformed UTF-8 data');
              }
            },

            /**
             * Converts a UTF-8 string to a word array.
             *
             * @param {string} utf8Str The UTF-8 string.
             *
             * @return {WordArray} The word array.
             *
             * @static
             *
             * @example
             *
             *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
             */
            parse: function parse(utf8Str) {
              return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
            }
          };
          /**
           * Abstract buffered block algorithm template.
           *
           * The property blockSize must be implemented in a concrete subtype.
           *
           * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0
           */

          var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
            /**
             * Resets this block algorithm's data buffer to its initial state.
             *
             * @example
             *
             *     bufferedBlockAlgorithm.reset();
             */
            reset: function reset() {
              // Initial values
              this._data = new WordArray.init();
              this._nDataBytes = 0;
            },

            /**
             * Adds new data to this block algorithm's buffer.
             *
             * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
             *
             * @example
             *
             *     bufferedBlockAlgorithm._append('data');
             *     bufferedBlockAlgorithm._append(wordArray);
             */
            _append: function _append(data) {
              // Convert string to WordArray, else assume WordArray already
              if (typeof data == 'string') {
                data = Utf8.parse(data);
              } // Append


              this._data.concat(data);

              this._nDataBytes += data.sigBytes;
            },

            /**
             * Processes available data blocks.
             *
             * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
             *
             * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
             *
             * @return {WordArray} The processed data.
             *
             * @example
             *
             *     var processedData = bufferedBlockAlgorithm._process();
             *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
             */
            _process: function _process(doFlush) {
              // Shortcuts
              var data = this._data;
              var dataWords = data.words;
              var dataSigBytes = data.sigBytes;
              var blockSize = this.blockSize;
              var blockSizeBytes = blockSize * 4; // Count blocks ready

              var nBlocksReady = dataSigBytes / blockSizeBytes;

              if (doFlush) {
                // Round up to include partial blocks
                nBlocksReady = Math.ceil(nBlocksReady);
              } else {
                // Round down to include only full blocks,
                // less the number of blocks that must remain in the buffer
                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);
              } // Count words ready


              var nWordsReady = nBlocksReady * blockSize; // Count bytes ready

              var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes); // Process blocks

              if (nWordsReady) {
                for (var offset = 0; offset < nWordsReady; offset += blockSize) {
                  // Perform concrete-algorithm logic
                  this._doProcessBlock(dataWords, offset);
                } // Remove processed words


                var processedWords = dataWords.splice(0, nWordsReady);
                data.sigBytes -= nBytesReady;
              } // Return processed words


              return new WordArray.init(processedWords, nBytesReady);
            },

            /**
             * Creates a copy of this object.
             *
             * @return {Object} The clone.
             *
             * @example
             *
             *     var clone = bufferedBlockAlgorithm.clone();
             */
            clone: function clone() {
              var clone = Base.clone.call(this);
              clone._data = this._data.clone();
              return clone;
            },
            _minBufferSize: 0
          });
          /**
           * Abstract hasher template.
           *
           * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)
           */

          var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({
            /**
             * Configuration options.
             */
            cfg: Base.extend(),

            /**
             * Initializes a newly created hasher.
             *
             * @param {Object} cfg (Optional) The configuration options to use for this hash computation.
             *
             * @example
             *
             *     var hasher = CryptoJS.algo.SHA256.create();
             */
            init: function init(cfg) {
              // Apply config defaults
              this.cfg = this.cfg.extend(cfg); // Set initial values

              this.reset();
            },

            /**
             * Resets this hasher to its initial state.
             *
             * @example
             *
             *     hasher.reset();
             */
            reset: function reset() {
              // Reset data buffer
              BufferedBlockAlgorithm.reset.call(this); // Perform concrete-hasher logic

              this._doReset();
            },

            /**
             * Updates this hasher with a message.
             *
             * @param {WordArray|string} messageUpdate The message to append.
             *
             * @return {Hasher} This hasher.
             *
             * @example
             *
             *     hasher.update('message');
             *     hasher.update(wordArray);
             */
            update: function update(messageUpdate) {
              // Append
              this._append(messageUpdate); // Update the hash


              this._process(); // Chainable


              return this;
            },

            /**
             * Finalizes the hash computation.
             * Note that the finalize operation is effectively a destructive, read-once operation.
             *
             * @param {WordArray|string} messageUpdate (Optional) A final message update.
             *
             * @return {WordArray} The hash.
             *
             * @example
             *
             *     var hash = hasher.finalize();
             *     var hash = hasher.finalize('message');
             *     var hash = hasher.finalize(wordArray);
             */
            finalize: function finalize(messageUpdate) {
              // Final message update
              if (messageUpdate) {
                this._append(messageUpdate);
              } // Perform concrete-hasher logic


              var hash = this._doFinalize();

              return hash;
            },
            blockSize: 512 / 32,

            /**
             * Creates a shortcut function to a hasher's object interface.
             *
             * @param {Hasher} hasher The hasher to create a helper for.
             *
             * @return {Function} The shortcut function.
             *
             * @static
             *
             * @example
             *
             *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
             */
            _createHelper: function _createHelper(hasher) {
              return function (message, cfg) {
                return new hasher.init(cfg).finalize(message);
              };
            },

            /**
             * Creates a shortcut function to the HMAC's object interface.
             *
             * @param {Hasher} hasher The hasher to use in this HMAC helper.
             *
             * @return {Function} The shortcut function.
             *
             * @static
             *
             * @example
             *
             *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
             */
            _createHmacHelper: function _createHmacHelper(hasher) {
              return function (message, key) {
                return new C_algo.HMAC.init(hasher, key).finalize(message);
              };
            }
          });
          /**
           * Algorithm namespace.
           */

          var C_algo = C.algo = {};
          return C;
        }(Math);

        return CryptoJS;
      });
      /***/

    },
    /* 3 */

    /***/
    function (module, exports, __webpack_require__) {
      /* WEBPACK VAR INJECTION */
      (function (global) {
        var check = function check(it) {
          return it && it.Math == Math && it;
        }; // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028


        module.exports = // eslint-disable-next-line no-undef
        check((typeof globalThis === "undefined" ? "undefined" : _typeof4(globalThis)) == 'object' && globalThis) || check((typeof window === "undefined" ? "undefined" : _typeof4(window)) == 'object' && window) || check((typeof self === "undefined" ? "undefined" : _typeof4(self)) == 'object' && self) || check(_typeof4(global) == 'object' && global) || // eslint-disable-next-line no-new-func
        Function('return this')();
        /* WEBPACK VAR INJECTION */
      }).call(this, __webpack_require__(24));
      /***/
    },
    /* 4 */

    /***/
    function (module, exports) {
      module.exports = function (exec) {
        try {
          return !!exec();
        } catch (error) {
          return true;
        }
      };
      /***/

    },
    /* 5 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var NATIVE_ARRAY_BUFFER = __webpack_require__(220);

      var DESCRIPTORS = __webpack_require__(11);

      var global = __webpack_require__(3);

      var isObject = __webpack_require__(13);

      var has = __webpack_require__(14);

      var classof = __webpack_require__(117);

      var createNonEnumerableProperty = __webpack_require__(18);

      var redefine = __webpack_require__(25);

      var defineProperty = __webpack_require__(15).f;

      var getPrototypeOf = __webpack_require__(60);

      var setPrototypeOf = __webpack_require__(45);

      var wellKnownSymbol = __webpack_require__(6);

      var uid = __webpack_require__(112);

      var Int8Array = global.Int8Array;
      var Int8ArrayPrototype = Int8Array && Int8Array.prototype;
      var Uint8ClampedArray = global.Uint8ClampedArray;
      var Uint8ClampedArrayPrototype = Uint8ClampedArray && Uint8ClampedArray.prototype;
      var TypedArray = Int8Array && getPrototypeOf(Int8Array);
      var TypedArrayPrototype = Int8ArrayPrototype && getPrototypeOf(Int8ArrayPrototype);
      var ObjectPrototype = Object.prototype;
      var isPrototypeOf = ObjectPrototype.isPrototypeOf;
      var TO_STRING_TAG = wellKnownSymbol('toStringTag');
      var TYPED_ARRAY_TAG = uid('TYPED_ARRAY_TAG'); // Fixing native typed arrays in Opera Presto crashes the browser, see #595

      var NATIVE_ARRAY_BUFFER_VIEWS = NATIVE_ARRAY_BUFFER && !!setPrototypeOf && classof(global.opera) !== 'Opera';
      var TYPED_ARRAY_TAG_REQIRED = false;
      var NAME;
      var TypedArrayConstructorsList = {
        Int8Array: 1,
        Uint8Array: 1,
        Uint8ClampedArray: 1,
        Int16Array: 2,
        Uint16Array: 2,
        Int32Array: 4,
        Uint32Array: 4,
        Float32Array: 4,
        Float64Array: 8
      };

      var isView = function isView(it) {
        var klass = classof(it);
        return klass === 'DataView' || has(TypedArrayConstructorsList, klass);
      };

      var isTypedArray = function isTypedArray(it) {
        return isObject(it) && has(TypedArrayConstructorsList, classof(it));
      };

      var aTypedArray = function aTypedArray(it) {
        if (isTypedArray(it)) return it;
        throw TypeError('Target is not a typed array');
      };

      var aTypedArrayConstructor = function aTypedArrayConstructor(C) {
        if (setPrototypeOf) {
          if (isPrototypeOf.call(TypedArray, C)) return C;
        } else for (var ARRAY in TypedArrayConstructorsList) {
          if (has(TypedArrayConstructorsList, NAME)) {
            var TypedArrayConstructor = global[ARRAY];

            if (TypedArrayConstructor && (C === TypedArrayConstructor || isPrototypeOf.call(TypedArrayConstructor, C))) {
              return C;
            }
          }
        }

        throw TypeError('Target is not a typed array constructor');
      };

      var exportTypedArrayMethod = function exportTypedArrayMethod(KEY, property, forced) {
        if (!DESCRIPTORS) return;
        if (forced) for (var ARRAY in TypedArrayConstructorsList) {
          var TypedArrayConstructor = global[ARRAY];

          if (TypedArrayConstructor && has(TypedArrayConstructor.prototype, KEY)) {
            delete TypedArrayConstructor.prototype[KEY];
          }
        }

        if (!TypedArrayPrototype[KEY] || forced) {
          redefine(TypedArrayPrototype, KEY, forced ? property : NATIVE_ARRAY_BUFFER_VIEWS && Int8ArrayPrototype[KEY] || property);
        }
      };

      var exportTypedArrayStaticMethod = function exportTypedArrayStaticMethod(KEY, property, forced) {
        var ARRAY, TypedArrayConstructor;
        if (!DESCRIPTORS) return;

        if (setPrototypeOf) {
          if (forced) for (ARRAY in TypedArrayConstructorsList) {
            TypedArrayConstructor = global[ARRAY];

            if (TypedArrayConstructor && has(TypedArrayConstructor, KEY)) {
              delete TypedArrayConstructor[KEY];
            }
          }

          if (!TypedArray[KEY] || forced) {
            // V8 ~ Chrome 49-50 `%TypedArray%` methods are non-writable non-configurable
            try {
              return redefine(TypedArray, KEY, forced ? property : NATIVE_ARRAY_BUFFER_VIEWS && Int8Array[KEY] || property);
            } catch (error) {
              /* empty */
            }
          } else return;
        }

        for (ARRAY in TypedArrayConstructorsList) {
          TypedArrayConstructor = global[ARRAY];

          if (TypedArrayConstructor && (!TypedArrayConstructor[KEY] || forced)) {
            redefine(TypedArrayConstructor, KEY, property);
          }
        }
      };

      for (NAME in TypedArrayConstructorsList) {
        if (!global[NAME]) NATIVE_ARRAY_BUFFER_VIEWS = false;
      } // WebKit bug - typed arrays constructors prototype is Object.prototype


      if (!NATIVE_ARRAY_BUFFER_VIEWS || typeof TypedArray != 'function' || TypedArray === Function.prototype) {
        // eslint-disable-next-line no-shadow
        TypedArray = function TypedArray() {
          throw TypeError('Incorrect invocation');
        };

        if (NATIVE_ARRAY_BUFFER_VIEWS) for (NAME in TypedArrayConstructorsList) {
          if (global[NAME]) setPrototypeOf(global[NAME], TypedArray);
        }
      }

      if (!NATIVE_ARRAY_BUFFER_VIEWS || !TypedArrayPrototype || TypedArrayPrototype === ObjectPrototype) {
        TypedArrayPrototype = TypedArray.prototype;
        if (NATIVE_ARRAY_BUFFER_VIEWS) for (NAME in TypedArrayConstructorsList) {
          if (global[NAME]) setPrototypeOf(global[NAME].prototype, TypedArrayPrototype);
        }
      } // WebKit bug - one more object in Uint8ClampedArray prototype chain


      if (NATIVE_ARRAY_BUFFER_VIEWS && getPrototypeOf(Uint8ClampedArrayPrototype) !== TypedArrayPrototype) {
        setPrototypeOf(Uint8ClampedArrayPrototype, TypedArrayPrototype);
      }

      if (DESCRIPTORS && !has(TypedArrayPrototype, TO_STRING_TAG)) {
        TYPED_ARRAY_TAG_REQIRED = true;
        defineProperty(TypedArrayPrototype, TO_STRING_TAG, {
          get: function get() {
            return isObject(this) ? this[TYPED_ARRAY_TAG] : undefined;
          }
        });

        for (NAME in TypedArrayConstructorsList) {
          if (global[NAME]) {
            createNonEnumerableProperty(global[NAME], TYPED_ARRAY_TAG, NAME);
          }
        }
      }

      module.exports = {
        NATIVE_ARRAY_BUFFER_VIEWS: NATIVE_ARRAY_BUFFER_VIEWS,
        TYPED_ARRAY_TAG: TYPED_ARRAY_TAG_REQIRED && TYPED_ARRAY_TAG,
        aTypedArray: aTypedArray,
        aTypedArrayConstructor: aTypedArrayConstructor,
        exportTypedArrayMethod: exportTypedArrayMethod,
        exportTypedArrayStaticMethod: exportTypedArrayStaticMethod,
        isView: isView,
        isTypedArray: isTypedArray,
        TypedArray: TypedArray,
        TypedArrayPrototype: TypedArrayPrototype
      };
      /***/
    },
    /* 6 */

    /***/
    function (module, exports, __webpack_require__) {
      var global = __webpack_require__(3);

      var shared = __webpack_require__(141);

      var has = __webpack_require__(14);

      var uid = __webpack_require__(112);

      var NATIVE_SYMBOL = __webpack_require__(145);

      var USE_SYMBOL_AS_UID = __webpack_require__(202);

      var WellKnownSymbolsStore = shared('wks');
      var _Symbol = global.Symbol;
      var createWellKnownSymbol = USE_SYMBOL_AS_UID ? _Symbol : _Symbol && _Symbol.withoutSetter || uid;

      module.exports = function (name) {
        if (!has(WellKnownSymbolsStore, name)) {
          if (NATIVE_SYMBOL && has(_Symbol, name)) WellKnownSymbolsStore[name] = _Symbol[name];else WellKnownSymbolsStore[name] = createWellKnownSymbol('Symbol.' + name);
        }

        return WellKnownSymbolsStore[name];
      };
      /***/

    },
    /* 7 */

    /***/
    function (module, exports) {
      var core = module.exports = {
        version: '2.6.11'
      };
      if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef

      /***/
    },
    /* 8 */

    /***/
    function (module, exports, __webpack_require__) {
      var toInteger = __webpack_require__(37);

      var min = Math.min; // `ToLength` abstract operation
      // https://tc39.github.io/ecma262/#sec-tolength

      module.exports = function (argument) {
        return argument > 0 ? min(toInteger(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
      };
      /***/

    },
    /* 9 */

    /***/
    function (module, exports, __webpack_require__) {
      var global = __webpack_require__(17);

      var core = __webpack_require__(7);

      var ctx = __webpack_require__(33);

      var hide = __webpack_require__(41);

      var has = __webpack_require__(51);

      var PROTOTYPE = 'prototype';

      var $export = function $export(type, name, source) {
        var IS_FORCED = type & $export.F;
        var IS_GLOBAL = type & $export.G;
        var IS_STATIC = type & $export.S;
        var IS_PROTO = type & $export.P;
        var IS_BIND = type & $export.B;
        var IS_WRAP = type & $export.W;
        var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
        var expProto = exports[PROTOTYPE];
        var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];
        var key, own, out;
        if (IS_GLOBAL) source = name;

        for (key in source) {
          // contains in native
          own = !IS_FORCED && target && target[key] !== undefined;
          if (own && has(exports, key)) continue; // export native or passed

          out = own ? target[key] : source[key]; // prevent global pollution for namespaces

          exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key] // bind timers to global for call from export context
          : IS_BIND && own ? ctx(out, global) // wrap global constructors for prevent change them in library
          : IS_WRAP && target[key] == out ? function (C) {
            var F = function F(a, b, c) {
              if (this instanceof C) {
                switch (arguments.length) {
                  case 0:
                    return new C();

                  case 1:
                    return new C(a);

                  case 2:
                    return new C(a, b);
                }

                return new C(a, b, c);
              }

              return C.apply(this, arguments);
            };

            F[PROTOTYPE] = C[PROTOTYPE];
            return F; // make static versions for prototype methods
          }(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out; // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%

          if (IS_PROTO) {
            (exports.virtual || (exports.virtual = {}))[key] = out; // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%

            if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);
          }
        }
      }; // type bitmap


      $export.F = 1; // forced

      $export.G = 2; // global

      $export.S = 4; // static

      $export.P = 8; // proto

      $export.B = 16; // bind

      $export.W = 32; // wrap

      $export.U = 64; // safe

      $export.R = 128; // real proto method for `library`

      module.exports = $export;
      /***/
    },
    /* 10 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";
      /* WEBPACK VAR INJECTION */

      (function (global) {
        /*!
        * The buffer module from node.js, for the browser.
        *
        * @author   Feross Aboukhadijeh <http://feross.org>
        * @license  MIT
        */

        /* eslint-disable no-proto */
        var base64 = __webpack_require__(302);

        var ieee754 = __webpack_require__(303);

        var isArray = __webpack_require__(196);

        exports.Buffer = Buffer;
        exports.SlowBuffer = SlowBuffer;
        exports.INSPECT_MAX_BYTES = 50;
        /**
         * If `Buffer.TYPED_ARRAY_SUPPORT`:
         *   === true    Use Uint8Array implementation (fastest)
         *   === false   Use Object implementation (most compatible, even IE6)
         *
         * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
         * Opera 11.6+, iOS 4.2+.
         *
         * Due to various browser bugs, sometimes the Object implementation will be used even
         * when the browser supports typed arrays.
         *
         * Note:
         *
         *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
         *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
         *
         *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
         *
         *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
         *     incorrect length in some situations.
        
         * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
         * get the Object implementation, which is slower but behaves correctly.
         */

        Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined ? global.TYPED_ARRAY_SUPPORT : typedArraySupport();
        /*
         * Export kMaxLength after typed array support is determined.
         */

        exports.kMaxLength = kMaxLength();

        function typedArraySupport() {
          try {
            var arr = new Uint8Array(1);
            arr.__proto__ = {
              __proto__: Uint8Array.prototype,
              foo: function foo() {
                return 42;
              }
            };
            return arr.foo() === 42 && // typed array instances can be augmented
            typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
            arr.subarray(1, 1).byteLength === 0; // ie10 has broken `subarray`
          } catch (e) {
            return false;
          }
        }

        function kMaxLength() {
          return Buffer.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;
        }

        function createBuffer(that, length) {
          if (kMaxLength() < length) {
            throw new RangeError('Invalid typed array length');
          }

          if (Buffer.TYPED_ARRAY_SUPPORT) {
            // Return an augmented `Uint8Array` instance, for best performance
            that = new Uint8Array(length);
            that.__proto__ = Buffer.prototype;
          } else {
            // Fallback: Return an object instance of the Buffer class
            if (that === null) {
              that = new Buffer(length);
            }

            that.length = length;
          }

          return that;
        }
        /**
         * The Buffer constructor returns instances of `Uint8Array` that have their
         * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
         * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
         * and the `Uint8Array` methods. Square bracket notation works as expected -- it
         * returns a single octet.
         *
         * The `Uint8Array` prototype remains unmodified.
         */


        function Buffer(arg, encodingOrOffset, length) {
          if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
            return new Buffer(arg, encodingOrOffset, length);
          } // Common case.


          if (typeof arg === 'number') {
            if (typeof encodingOrOffset === 'string') {
              throw new Error('If encoding is specified then the first argument must be a string');
            }

            return allocUnsafe(this, arg);
          }

          return from(this, arg, encodingOrOffset, length);
        }

        Buffer.poolSize = 8192; // not used by this implementation
        // TODO: Legacy, not needed anymore. Remove in next major version.

        Buffer._augment = function (arr) {
          arr.__proto__ = Buffer.prototype;
          return arr;
        };

        function from(that, value, encodingOrOffset, length) {
          if (typeof value === 'number') {
            throw new TypeError('"value" argument must not be a number');
          }

          if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
            return fromArrayBuffer(that, value, encodingOrOffset, length);
          }

          if (typeof value === 'string') {
            return fromString(that, value, encodingOrOffset);
          }

          return fromObject(that, value);
        }
        /**
         * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
         * if value is a number.
         * Buffer.from(str[, encoding])
         * Buffer.from(array)
         * Buffer.from(buffer)
         * Buffer.from(arrayBuffer[, byteOffset[, length]])
         **/


        Buffer.from = function (value, encodingOrOffset, length) {
          return from(null, value, encodingOrOffset, length);
        };

        if (Buffer.TYPED_ARRAY_SUPPORT) {
          Buffer.prototype.__proto__ = Uint8Array.prototype;
          Buffer.__proto__ = Uint8Array;

          if (typeof Symbol !== 'undefined' && Symbol.species && Buffer[Symbol.species] === Buffer) {
            // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
            Object.defineProperty(Buffer, Symbol.species, {
              value: null,
              configurable: true
            });
          }
        }

        function assertSize(size) {
          if (typeof size !== 'number') {
            throw new TypeError('"size" argument must be a number');
          } else if (size < 0) {
            throw new RangeError('"size" argument must not be negative');
          }
        }

        function alloc(that, size, fill, encoding) {
          assertSize(size);

          if (size <= 0) {
            return createBuffer(that, size);
          }

          if (fill !== undefined) {
            // Only pay attention to encoding if it's a string. This
            // prevents accidentally sending in a number that would
            // be interpretted as a start offset.
            return typeof encoding === 'string' ? createBuffer(that, size).fill(fill, encoding) : createBuffer(that, size).fill(fill);
          }

          return createBuffer(that, size);
        }
        /**
         * Creates a new filled Buffer instance.
         * alloc(size[, fill[, encoding]])
         **/


        Buffer.alloc = function (size, fill, encoding) {
          return alloc(null, size, fill, encoding);
        };

        function allocUnsafe(that, size) {
          assertSize(size);
          that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);

          if (!Buffer.TYPED_ARRAY_SUPPORT) {
            for (var i = 0; i < size; ++i) {
              that[i] = 0;
            }
          }

          return that;
        }
        /**
         * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
         * */


        Buffer.allocUnsafe = function (size) {
          return allocUnsafe(null, size);
        };
        /**
         * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
         */


        Buffer.allocUnsafeSlow = function (size) {
          return allocUnsafe(null, size);
        };

        function fromString(that, string, encoding) {
          if (typeof encoding !== 'string' || encoding === '') {
            encoding = 'utf8';
          }

          if (!Buffer.isEncoding(encoding)) {
            throw new TypeError('"encoding" must be a valid string encoding');
          }

          var length = byteLength(string, encoding) | 0;
          that = createBuffer(that, length);
          var actual = that.write(string, encoding);

          if (actual !== length) {
            // Writing a hex string, for example, that contains invalid characters will
            // cause everything after the first invalid character to be ignored. (e.g.
            // 'abxxcd' will be treated as 'ab')
            that = that.slice(0, actual);
          }

          return that;
        }

        function fromArrayLike(that, array) {
          var length = array.length < 0 ? 0 : checked(array.length) | 0;
          that = createBuffer(that, length);

          for (var i = 0; i < length; i += 1) {
            that[i] = array[i] & 255;
          }

          return that;
        }

        function fromArrayBuffer(that, array, byteOffset, length) {
          array.byteLength; // this throws if `array` is not a valid ArrayBuffer

          if (byteOffset < 0 || array.byteLength < byteOffset) {
            throw new RangeError('\'offset\' is out of bounds');
          }

          if (array.byteLength < byteOffset + (length || 0)) {
            throw new RangeError('\'length\' is out of bounds');
          }

          if (byteOffset === undefined && length === undefined) {
            array = new Uint8Array(array);
          } else if (length === undefined) {
            array = new Uint8Array(array, byteOffset);
          } else {
            array = new Uint8Array(array, byteOffset, length);
          }

          if (Buffer.TYPED_ARRAY_SUPPORT) {
            // Return an augmented `Uint8Array` instance, for best performance
            that = array;
            that.__proto__ = Buffer.prototype;
          } else {
            // Fallback: Return an object instance of the Buffer class
            that = fromArrayLike(that, array);
          }

          return that;
        }

        function fromObject(that, obj) {
          if (Buffer.isBuffer(obj)) {
            var len = checked(obj.length) | 0;
            that = createBuffer(that, len);

            if (that.length === 0) {
              return that;
            }

            obj.copy(that, 0, 0, len);
            return that;
          }

          if (obj) {
            if (typeof ArrayBuffer !== 'undefined' && obj.buffer instanceof ArrayBuffer || 'length' in obj) {
              if (typeof obj.length !== 'number' || isnan(obj.length)) {
                return createBuffer(that, 0);
              }

              return fromArrayLike(that, obj);
            }

            if (obj.type === 'Buffer' && isArray(obj.data)) {
              return fromArrayLike(that, obj.data);
            }
          }

          throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');
        }

        function checked(length) {
          // Note: cannot use `length < kMaxLength()` here because that fails when
          // length is NaN (which is otherwise coerced to zero.)
          if (length >= kMaxLength()) {
            throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + kMaxLength().toString(16) + ' bytes');
          }

          return length | 0;
        }

        function SlowBuffer(length) {
          if (+length != length) {
            // eslint-disable-line eqeqeq
            length = 0;
          }

          return Buffer.alloc(+length);
        }

        Buffer.isBuffer = function isBuffer(b) {
          return !!(b != null && b._isBuffer);
        };

        Buffer.compare = function compare(a, b) {
          if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
            throw new TypeError('Arguments must be Buffers');
          }

          if (a === b) return 0;
          var x = a.length;
          var y = b.length;

          for (var i = 0, len = Math.min(x, y); i < len; ++i) {
            if (a[i] !== b[i]) {
              x = a[i];
              y = b[i];
              break;
            }
          }

          if (x < y) return -1;
          if (y < x) return 1;
          return 0;
        };

        Buffer.isEncoding = function isEncoding(encoding) {
          switch (String(encoding).toLowerCase()) {
            case 'hex':
            case 'utf8':
            case 'utf-8':
            case 'ascii':
            case 'latin1':
            case 'binary':
            case 'base64':
            case 'ucs2':
            case 'ucs-2':
            case 'utf16le':
            case 'utf-16le':
              return true;

            default:
              return false;
          }
        };

        Buffer.concat = function concat(list, length) {
          if (!isArray(list)) {
            throw new TypeError('"list" argument must be an Array of Buffers');
          }

          if (list.length === 0) {
            return Buffer.alloc(0);
          }

          var i;

          if (length === undefined) {
            length = 0;

            for (i = 0; i < list.length; ++i) {
              length += list[i].length;
            }
          }

          var buffer = Buffer.allocUnsafe(length);
          var pos = 0;

          for (i = 0; i < list.length; ++i) {
            var buf = list[i];

            if (!Buffer.isBuffer(buf)) {
              throw new TypeError('"list" argument must be an Array of Buffers');
            }

            buf.copy(buffer, pos);
            pos += buf.length;
          }

          return buffer;
        };

        function byteLength(string, encoding) {
          if (Buffer.isBuffer(string)) {
            return string.length;
          }

          if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
            return string.byteLength;
          }

          if (typeof string !== 'string') {
            string = '' + string;
          }

          var len = string.length;
          if (len === 0) return 0; // Use a for loop to avoid recursion

          var loweredCase = false;

          for (;;) {
            switch (encoding) {
              case 'ascii':
              case 'latin1':
              case 'binary':
                return len;

              case 'utf8':
              case 'utf-8':
              case undefined:
                return utf8ToBytes(string).length;

              case 'ucs2':
              case 'ucs-2':
              case 'utf16le':
              case 'utf-16le':
                return len * 2;

              case 'hex':
                return len >>> 1;

              case 'base64':
                return base64ToBytes(string).length;

              default:
                if (loweredCase) return utf8ToBytes(string).length; // assume utf8

                encoding = ('' + encoding).toLowerCase();
                loweredCase = true;
            }
          }
        }

        Buffer.byteLength = byteLength;

        function slowToString(encoding, start, end) {
          var loweredCase = false; // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
          // property of a typed array.
          // This behaves neither like String nor Uint8Array in that we set start/end
          // to their upper/lower bounds if the value passed is out of range.
          // undefined is handled specially as per ECMA-262 6th Edition,
          // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.

          if (start === undefined || start < 0) {
            start = 0;
          } // Return early if start > this.length. Done here to prevent potential uint32
          // coercion fail below.


          if (start > this.length) {
            return '';
          }

          if (end === undefined || end > this.length) {
            end = this.length;
          }

          if (end <= 0) {
            return '';
          } // Force coersion to uint32. This will also coerce falsey/NaN values to 0.


          end >>>= 0;
          start >>>= 0;

          if (end <= start) {
            return '';
          }

          if (!encoding) encoding = 'utf8';

          while (true) {
            switch (encoding) {
              case 'hex':
                return hexSlice(this, start, end);

              case 'utf8':
              case 'utf-8':
                return utf8Slice(this, start, end);

              case 'ascii':
                return asciiSlice(this, start, end);

              case 'latin1':
              case 'binary':
                return latin1Slice(this, start, end);

              case 'base64':
                return base64Slice(this, start, end);

              case 'ucs2':
              case 'ucs-2':
              case 'utf16le':
              case 'utf-16le':
                return utf16leSlice(this, start, end);

              default:
                if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
                encoding = (encoding + '').toLowerCase();
                loweredCase = true;
            }
          }
        } // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
        // Buffer instances.


        Buffer.prototype._isBuffer = true;

        function swap(b, n, m) {
          var i = b[n];
          b[n] = b[m];
          b[m] = i;
        }

        Buffer.prototype.swap16 = function swap16() {
          var len = this.length;

          if (len % 2 !== 0) {
            throw new RangeError('Buffer size must be a multiple of 16-bits');
          }

          for (var i = 0; i < len; i += 2) {
            swap(this, i, i + 1);
          }

          return this;
        };

        Buffer.prototype.swap32 = function swap32() {
          var len = this.length;

          if (len % 4 !== 0) {
            throw new RangeError('Buffer size must be a multiple of 32-bits');
          }

          for (var i = 0; i < len; i += 4) {
            swap(this, i, i + 3);
            swap(this, i + 1, i + 2);
          }

          return this;
        };

        Buffer.prototype.swap64 = function swap64() {
          var len = this.length;

          if (len % 8 !== 0) {
            throw new RangeError('Buffer size must be a multiple of 64-bits');
          }

          for (var i = 0; i < len; i += 8) {
            swap(this, i, i + 7);
            swap(this, i + 1, i + 6);
            swap(this, i + 2, i + 5);
            swap(this, i + 3, i + 4);
          }

          return this;
        };

        Buffer.prototype.toString = function toString() {
          var length = this.length | 0;
          if (length === 0) return '';
          if (arguments.length === 0) return utf8Slice(this, 0, length);
          return slowToString.apply(this, arguments);
        };

        Buffer.prototype.equals = function equals(b) {
          if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');
          if (this === b) return true;
          return Buffer.compare(this, b) === 0;
        };

        Buffer.prototype.inspect = function inspect() {
          var str = '';
          var max = exports.INSPECT_MAX_BYTES;

          if (this.length > 0) {
            str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
            if (this.length > max) str += ' ... ';
          }

          return '<Buffer ' + str + '>';
        };

        Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
          if (!Buffer.isBuffer(target)) {
            throw new TypeError('Argument must be a Buffer');
          }

          if (start === undefined) {
            start = 0;
          }

          if (end === undefined) {
            end = target ? target.length : 0;
          }

          if (thisStart === undefined) {
            thisStart = 0;
          }

          if (thisEnd === undefined) {
            thisEnd = this.length;
          }

          if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
            throw new RangeError('out of range index');
          }

          if (thisStart >= thisEnd && start >= end) {
            return 0;
          }

          if (thisStart >= thisEnd) {
            return -1;
          }

          if (start >= end) {
            return 1;
          }

          start >>>= 0;
          end >>>= 0;
          thisStart >>>= 0;
          thisEnd >>>= 0;
          if (this === target) return 0;
          var x = thisEnd - thisStart;
          var y = end - start;
          var len = Math.min(x, y);
          var thisCopy = this.slice(thisStart, thisEnd);
          var targetCopy = target.slice(start, end);

          for (var i = 0; i < len; ++i) {
            if (thisCopy[i] !== targetCopy[i]) {
              x = thisCopy[i];
              y = targetCopy[i];
              break;
            }
          }

          if (x < y) return -1;
          if (y < x) return 1;
          return 0;
        }; // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
        // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
        //
        // Arguments:
        // - buffer - a Buffer to search
        // - val - a string, Buffer, or number
        // - byteOffset - an index into `buffer`; will be clamped to an int32
        // - encoding - an optional encoding, relevant is val is a string
        // - dir - true for indexOf, false for lastIndexOf


        function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
          // Empty buffer means no match
          if (buffer.length === 0) return -1; // Normalize byteOffset

          if (typeof byteOffset === 'string') {
            encoding = byteOffset;
            byteOffset = 0;
          } else if (byteOffset > 0x7fffffff) {
            byteOffset = 0x7fffffff;
          } else if (byteOffset < -0x80000000) {
            byteOffset = -0x80000000;
          }

          byteOffset = +byteOffset; // Coerce to Number.

          if (isNaN(byteOffset)) {
            // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
            byteOffset = dir ? 0 : buffer.length - 1;
          } // Normalize byteOffset: negative offsets start from the end of the buffer


          if (byteOffset < 0) byteOffset = buffer.length + byteOffset;

          if (byteOffset >= buffer.length) {
            if (dir) return -1;else byteOffset = buffer.length - 1;
          } else if (byteOffset < 0) {
            if (dir) byteOffset = 0;else return -1;
          } // Normalize val


          if (typeof val === 'string') {
            val = Buffer.from(val, encoding);
          } // Finally, search either indexOf (if dir is true) or lastIndexOf


          if (Buffer.isBuffer(val)) {
            // Special case: looking for empty string/buffer always fails
            if (val.length === 0) {
              return -1;
            }

            return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
          } else if (typeof val === 'number') {
            val = val & 0xFF; // Search for a byte value [0-255]

            if (Buffer.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === 'function') {
              if (dir) {
                return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
              } else {
                return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
              }
            }

            return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
          }

          throw new TypeError('val must be string, number or Buffer');
        }

        function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
          var indexSize = 1;
          var arrLength = arr.length;
          var valLength = val.length;

          if (encoding !== undefined) {
            encoding = String(encoding).toLowerCase();

            if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
              if (arr.length < 2 || val.length < 2) {
                return -1;
              }

              indexSize = 2;
              arrLength /= 2;
              valLength /= 2;
              byteOffset /= 2;
            }
          }

          function read(buf, i) {
            if (indexSize === 1) {
              return buf[i];
            } else {
              return buf.readUInt16BE(i * indexSize);
            }
          }

          var i;

          if (dir) {
            var foundIndex = -1;

            for (i = byteOffset; i < arrLength; i++) {
              if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
                if (foundIndex === -1) foundIndex = i;
                if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
              } else {
                if (foundIndex !== -1) i -= i - foundIndex;
                foundIndex = -1;
              }
            }
          } else {
            if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;

            for (i = byteOffset; i >= 0; i--) {
              var found = true;

              for (var j = 0; j < valLength; j++) {
                if (read(arr, i + j) !== read(val, j)) {
                  found = false;
                  break;
                }
              }

              if (found) return i;
            }
          }

          return -1;
        }

        Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
          return this.indexOf(val, byteOffset, encoding) !== -1;
        };

        Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
          return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
        };

        Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
          return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
        };

        function hexWrite(buf, string, offset, length) {
          offset = Number(offset) || 0;
          var remaining = buf.length - offset;

          if (!length) {
            length = remaining;
          } else {
            length = Number(length);

            if (length > remaining) {
              length = remaining;
            }
          } // must be an even number of digits


          var strLen = string.length;
          if (strLen % 2 !== 0) throw new TypeError('Invalid hex string');

          if (length > strLen / 2) {
            length = strLen / 2;
          }

          for (var i = 0; i < length; ++i) {
            var parsed = parseInt(string.substr(i * 2, 2), 16);
            if (isNaN(parsed)) return i;
            buf[offset + i] = parsed;
          }

          return i;
        }

        function utf8Write(buf, string, offset, length) {
          return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
        }

        function asciiWrite(buf, string, offset, length) {
          return blitBuffer(asciiToBytes(string), buf, offset, length);
        }

        function latin1Write(buf, string, offset, length) {
          return asciiWrite(buf, string, offset, length);
        }

        function base64Write(buf, string, offset, length) {
          return blitBuffer(base64ToBytes(string), buf, offset, length);
        }

        function ucs2Write(buf, string, offset, length) {
          return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
        }

        Buffer.prototype.write = function write(string, offset, length, encoding) {
          // Buffer#write(string)
          if (offset === undefined) {
            encoding = 'utf8';
            length = this.length;
            offset = 0; // Buffer#write(string, encoding)
          } else if (length === undefined && typeof offset === 'string') {
            encoding = offset;
            length = this.length;
            offset = 0; // Buffer#write(string, offset[, length][, encoding])
          } else if (isFinite(offset)) {
            offset = offset | 0;

            if (isFinite(length)) {
              length = length | 0;
              if (encoding === undefined) encoding = 'utf8';
            } else {
              encoding = length;
              length = undefined;
            } // legacy write(string, encoding, offset, length) - remove in v0.13

          } else {
            throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
          }

          var remaining = this.length - offset;
          if (length === undefined || length > remaining) length = remaining;

          if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
            throw new RangeError('Attempt to write outside buffer bounds');
          }

          if (!encoding) encoding = 'utf8';
          var loweredCase = false;

          for (;;) {
            switch (encoding) {
              case 'hex':
                return hexWrite(this, string, offset, length);

              case 'utf8':
              case 'utf-8':
                return utf8Write(this, string, offset, length);

              case 'ascii':
                return asciiWrite(this, string, offset, length);

              case 'latin1':
              case 'binary':
                return latin1Write(this, string, offset, length);

              case 'base64':
                // Warning: maxLength not taken into account in base64Write
                return base64Write(this, string, offset, length);

              case 'ucs2':
              case 'ucs-2':
              case 'utf16le':
              case 'utf-16le':
                return ucs2Write(this, string, offset, length);

              default:
                if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
                encoding = ('' + encoding).toLowerCase();
                loweredCase = true;
            }
          }
        };

        Buffer.prototype.toJSON = function toJSON() {
          return {
            type: 'Buffer',
            data: Array.prototype.slice.call(this._arr || this, 0)
          };
        };

        function base64Slice(buf, start, end) {
          if (start === 0 && end === buf.length) {
            return base64.fromByteArray(buf);
          } else {
            return base64.fromByteArray(buf.slice(start, end));
          }
        }

        function utf8Slice(buf, start, end) {
          end = Math.min(buf.length, end);
          var res = [];
          var i = start;

          while (i < end) {
            var firstByte = buf[i];
            var codePoint = null;
            var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;

            if (i + bytesPerSequence <= end) {
              var secondByte, thirdByte, fourthByte, tempCodePoint;

              switch (bytesPerSequence) {
                case 1:
                  if (firstByte < 0x80) {
                    codePoint = firstByte;
                  }

                  break;

                case 2:
                  secondByte = buf[i + 1];

                  if ((secondByte & 0xC0) === 0x80) {
                    tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;

                    if (tempCodePoint > 0x7F) {
                      codePoint = tempCodePoint;
                    }
                  }

                  break;

                case 3:
                  secondByte = buf[i + 1];
                  thirdByte = buf[i + 2];

                  if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                    tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;

                    if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                      codePoint = tempCodePoint;
                    }
                  }

                  break;

                case 4:
                  secondByte = buf[i + 1];
                  thirdByte = buf[i + 2];
                  fourthByte = buf[i + 3];

                  if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                    tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;

                    if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                      codePoint = tempCodePoint;
                    }
                  }

              }
            }

            if (codePoint === null) {
              // we did not generate a valid codePoint so insert a
              // replacement char (U+FFFD) and advance only 1 byte
              codePoint = 0xFFFD;
              bytesPerSequence = 1;
            } else if (codePoint > 0xFFFF) {
              // encode to utf16 (surrogate pair dance)
              codePoint -= 0x10000;
              res.push(codePoint >>> 10 & 0x3FF | 0xD800);
              codePoint = 0xDC00 | codePoint & 0x3FF;
            }

            res.push(codePoint);
            i += bytesPerSequence;
          }

          return decodeCodePointsArray(res);
        } // Based on http://stackoverflow.com/a/22747272/680742, the browser with
        // the lowest limit is Chrome, with 0x10000 args.
        // We go 1 magnitude less, for safety


        var MAX_ARGUMENTS_LENGTH = 0x1000;

        function decodeCodePointsArray(codePoints) {
          var len = codePoints.length;

          if (len <= MAX_ARGUMENTS_LENGTH) {
            return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
          } // Decode in chunks to avoid "call stack size exceeded".


          var res = '';
          var i = 0;

          while (i < len) {
            res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
          }

          return res;
        }

        function asciiSlice(buf, start, end) {
          var ret = '';
          end = Math.min(buf.length, end);

          for (var i = start; i < end; ++i) {
            ret += String.fromCharCode(buf[i] & 0x7F);
          }

          return ret;
        }

        function latin1Slice(buf, start, end) {
          var ret = '';
          end = Math.min(buf.length, end);

          for (var i = start; i < end; ++i) {
            ret += String.fromCharCode(buf[i]);
          }

          return ret;
        }

        function hexSlice(buf, start, end) {
          var len = buf.length;
          if (!start || start < 0) start = 0;
          if (!end || end < 0 || end > len) end = len;
          var out = '';

          for (var i = start; i < end; ++i) {
            out += toHex(buf[i]);
          }

          return out;
        }

        function utf16leSlice(buf, start, end) {
          var bytes = buf.slice(start, end);
          var res = '';

          for (var i = 0; i < bytes.length; i += 2) {
            res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
          }

          return res;
        }

        Buffer.prototype.slice = function slice(start, end) {
          var len = this.length;
          start = ~~start;
          end = end === undefined ? len : ~~end;

          if (start < 0) {
            start += len;
            if (start < 0) start = 0;
          } else if (start > len) {
            start = len;
          }

          if (end < 0) {
            end += len;
            if (end < 0) end = 0;
          } else if (end > len) {
            end = len;
          }

          if (end < start) end = start;
          var newBuf;

          if (Buffer.TYPED_ARRAY_SUPPORT) {
            newBuf = this.subarray(start, end);
            newBuf.__proto__ = Buffer.prototype;
          } else {
            var sliceLen = end - start;
            newBuf = new Buffer(sliceLen, undefined);

            for (var i = 0; i < sliceLen; ++i) {
              newBuf[i] = this[i + start];
            }
          }

          return newBuf;
        };
        /*
         * Need to make sure that buffer isn't trying to write out of bounds.
         */


        function checkOffset(offset, ext, length) {
          if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
          if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
        }

        Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
          offset = offset | 0;
          byteLength = byteLength | 0;
          if (!noAssert) checkOffset(offset, byteLength, this.length);
          var val = this[offset];
          var mul = 1;
          var i = 0;

          while (++i < byteLength && (mul *= 0x100)) {
            val += this[offset + i] * mul;
          }

          return val;
        };

        Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
          offset = offset | 0;
          byteLength = byteLength | 0;

          if (!noAssert) {
            checkOffset(offset, byteLength, this.length);
          }

          var val = this[offset + --byteLength];
          var mul = 1;

          while (byteLength > 0 && (mul *= 0x100)) {
            val += this[offset + --byteLength] * mul;
          }

          return val;
        };

        Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
          if (!noAssert) checkOffset(offset, 1, this.length);
          return this[offset];
        };

        Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
          if (!noAssert) checkOffset(offset, 2, this.length);
          return this[offset] | this[offset + 1] << 8;
        };

        Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
          if (!noAssert) checkOffset(offset, 2, this.length);
          return this[offset] << 8 | this[offset + 1];
        };

        Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
          if (!noAssert) checkOffset(offset, 4, this.length);
          return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
        };

        Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
          if (!noAssert) checkOffset(offset, 4, this.length);
          return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
        };

        Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
          offset = offset | 0;
          byteLength = byteLength | 0;
          if (!noAssert) checkOffset(offset, byteLength, this.length);
          var val = this[offset];
          var mul = 1;
          var i = 0;

          while (++i < byteLength && (mul *= 0x100)) {
            val += this[offset + i] * mul;
          }

          mul *= 0x80;
          if (val >= mul) val -= Math.pow(2, 8 * byteLength);
          return val;
        };

        Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
          offset = offset | 0;
          byteLength = byteLength | 0;
          if (!noAssert) checkOffset(offset, byteLength, this.length);
          var i = byteLength;
          var mul = 1;
          var val = this[offset + --i];

          while (i > 0 && (mul *= 0x100)) {
            val += this[offset + --i] * mul;
          }

          mul *= 0x80;
          if (val >= mul) val -= Math.pow(2, 8 * byteLength);
          return val;
        };

        Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
          if (!noAssert) checkOffset(offset, 1, this.length);
          if (!(this[offset] & 0x80)) return this[offset];
          return (0xff - this[offset] + 1) * -1;
        };

        Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
          if (!noAssert) checkOffset(offset, 2, this.length);
          var val = this[offset] | this[offset + 1] << 8;
          return val & 0x8000 ? val | 0xFFFF0000 : val;
        };

        Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
          if (!noAssert) checkOffset(offset, 2, this.length);
          var val = this[offset + 1] | this[offset] << 8;
          return val & 0x8000 ? val | 0xFFFF0000 : val;
        };

        Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
          if (!noAssert) checkOffset(offset, 4, this.length);
          return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
        };

        Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
          if (!noAssert) checkOffset(offset, 4, this.length);
          return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
        };

        Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
          if (!noAssert) checkOffset(offset, 4, this.length);
          return ieee754.read(this, offset, true, 23, 4);
        };

        Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
          if (!noAssert) checkOffset(offset, 4, this.length);
          return ieee754.read(this, offset, false, 23, 4);
        };

        Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
          if (!noAssert) checkOffset(offset, 8, this.length);
          return ieee754.read(this, offset, true, 52, 8);
        };

        Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
          if (!noAssert) checkOffset(offset, 8, this.length);
          return ieee754.read(this, offset, false, 52, 8);
        };

        function checkInt(buf, value, offset, ext, max, min) {
          if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
          if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
          if (offset + ext > buf.length) throw new RangeError('Index out of range');
        }

        Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
          value = +value;
          offset = offset | 0;
          byteLength = byteLength | 0;

          if (!noAssert) {
            var maxBytes = Math.pow(2, 8 * byteLength) - 1;
            checkInt(this, value, offset, byteLength, maxBytes, 0);
          }

          var mul = 1;
          var i = 0;
          this[offset] = value & 0xFF;

          while (++i < byteLength && (mul *= 0x100)) {
            this[offset + i] = value / mul & 0xFF;
          }

          return offset + byteLength;
        };

        Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
          value = +value;
          offset = offset | 0;
          byteLength = byteLength | 0;

          if (!noAssert) {
            var maxBytes = Math.pow(2, 8 * byteLength) - 1;
            checkInt(this, value, offset, byteLength, maxBytes, 0);
          }

          var i = byteLength - 1;
          var mul = 1;
          this[offset + i] = value & 0xFF;

          while (--i >= 0 && (mul *= 0x100)) {
            this[offset + i] = value / mul & 0xFF;
          }

          return offset + byteLength;
        };

        Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
          value = +value;
          offset = offset | 0;
          if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
          if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
          this[offset] = value & 0xff;
          return offset + 1;
        };

        function objectWriteUInt16(buf, value, offset, littleEndian) {
          if (value < 0) value = 0xffff + value + 1;

          for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
            buf[offset + i] = (value & 0xff << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;
          }
        }

        Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
          value = +value;
          offset = offset | 0;
          if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);

          if (Buffer.TYPED_ARRAY_SUPPORT) {
            this[offset] = value & 0xff;
            this[offset + 1] = value >>> 8;
          } else {
            objectWriteUInt16(this, value, offset, true);
          }

          return offset + 2;
        };

        Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
          value = +value;
          offset = offset | 0;
          if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);

          if (Buffer.TYPED_ARRAY_SUPPORT) {
            this[offset] = value >>> 8;
            this[offset + 1] = value & 0xff;
          } else {
            objectWriteUInt16(this, value, offset, false);
          }

          return offset + 2;
        };

        function objectWriteUInt32(buf, value, offset, littleEndian) {
          if (value < 0) value = 0xffffffff + value + 1;

          for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
            buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 0xff;
          }
        }

        Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
          value = +value;
          offset = offset | 0;
          if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);

          if (Buffer.TYPED_ARRAY_SUPPORT) {
            this[offset + 3] = value >>> 24;
            this[offset + 2] = value >>> 16;
            this[offset + 1] = value >>> 8;
            this[offset] = value & 0xff;
          } else {
            objectWriteUInt32(this, value, offset, true);
          }

          return offset + 4;
        };

        Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
          value = +value;
          offset = offset | 0;
          if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);

          if (Buffer.TYPED_ARRAY_SUPPORT) {
            this[offset] = value >>> 24;
            this[offset + 1] = value >>> 16;
            this[offset + 2] = value >>> 8;
            this[offset + 3] = value & 0xff;
          } else {
            objectWriteUInt32(this, value, offset, false);
          }

          return offset + 4;
        };

        Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
          value = +value;
          offset = offset | 0;

          if (!noAssert) {
            var limit = Math.pow(2, 8 * byteLength - 1);
            checkInt(this, value, offset, byteLength, limit - 1, -limit);
          }

          var i = 0;
          var mul = 1;
          var sub = 0;
          this[offset] = value & 0xFF;

          while (++i < byteLength && (mul *= 0x100)) {
            if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
              sub = 1;
            }

            this[offset + i] = (value / mul >> 0) - sub & 0xFF;
          }

          return offset + byteLength;
        };

        Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
          value = +value;
          offset = offset | 0;

          if (!noAssert) {
            var limit = Math.pow(2, 8 * byteLength - 1);
            checkInt(this, value, offset, byteLength, limit - 1, -limit);
          }

          var i = byteLength - 1;
          var mul = 1;
          var sub = 0;
          this[offset + i] = value & 0xFF;

          while (--i >= 0 && (mul *= 0x100)) {
            if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
              sub = 1;
            }

            this[offset + i] = (value / mul >> 0) - sub & 0xFF;
          }

          return offset + byteLength;
        };

        Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
          value = +value;
          offset = offset | 0;
          if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
          if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
          if (value < 0) value = 0xff + value + 1;
          this[offset] = value & 0xff;
          return offset + 1;
        };

        Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
          value = +value;
          offset = offset | 0;
          if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);

          if (Buffer.TYPED_ARRAY_SUPPORT) {
            this[offset] = value & 0xff;
            this[offset + 1] = value >>> 8;
          } else {
            objectWriteUInt16(this, value, offset, true);
          }

          return offset + 2;
        };

        Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
          value = +value;
          offset = offset | 0;
          if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);

          if (Buffer.TYPED_ARRAY_SUPPORT) {
            this[offset] = value >>> 8;
            this[offset + 1] = value & 0xff;
          } else {
            objectWriteUInt16(this, value, offset, false);
          }

          return offset + 2;
        };

        Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
          value = +value;
          offset = offset | 0;
          if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);

          if (Buffer.TYPED_ARRAY_SUPPORT) {
            this[offset] = value & 0xff;
            this[offset + 1] = value >>> 8;
            this[offset + 2] = value >>> 16;
            this[offset + 3] = value >>> 24;
          } else {
            objectWriteUInt32(this, value, offset, true);
          }

          return offset + 4;
        };

        Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
          value = +value;
          offset = offset | 0;
          if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
          if (value < 0) value = 0xffffffff + value + 1;

          if (Buffer.TYPED_ARRAY_SUPPORT) {
            this[offset] = value >>> 24;
            this[offset + 1] = value >>> 16;
            this[offset + 2] = value >>> 8;
            this[offset + 3] = value & 0xff;
          } else {
            objectWriteUInt32(this, value, offset, false);
          }

          return offset + 4;
        };

        function checkIEEE754(buf, value, offset, ext, max, min) {
          if (offset + ext > buf.length) throw new RangeError('Index out of range');
          if (offset < 0) throw new RangeError('Index out of range');
        }

        function writeFloat(buf, value, offset, littleEndian, noAssert) {
          if (!noAssert) {
            checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
          }

          ieee754.write(buf, value, offset, littleEndian, 23, 4);
          return offset + 4;
        }

        Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
          return writeFloat(this, value, offset, true, noAssert);
        };

        Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
          return writeFloat(this, value, offset, false, noAssert);
        };

        function writeDouble(buf, value, offset, littleEndian, noAssert) {
          if (!noAssert) {
            checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);
          }

          ieee754.write(buf, value, offset, littleEndian, 52, 8);
          return offset + 8;
        }

        Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
          return writeDouble(this, value, offset, true, noAssert);
        };

        Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
          return writeDouble(this, value, offset, false, noAssert);
        }; // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)


        Buffer.prototype.copy = function copy(target, targetStart, start, end) {
          if (!start) start = 0;
          if (!end && end !== 0) end = this.length;
          if (targetStart >= target.length) targetStart = target.length;
          if (!targetStart) targetStart = 0;
          if (end > 0 && end < start) end = start; // Copy 0 bytes; we're done

          if (end === start) return 0;
          if (target.length === 0 || this.length === 0) return 0; // Fatal error conditions

          if (targetStart < 0) {
            throw new RangeError('targetStart out of bounds');
          }

          if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds');
          if (end < 0) throw new RangeError('sourceEnd out of bounds'); // Are we oob?

          if (end > this.length) end = this.length;

          if (target.length - targetStart < end - start) {
            end = target.length - targetStart + start;
          }

          var len = end - start;
          var i;

          if (this === target && start < targetStart && targetStart < end) {
            // descending copy from end
            for (i = len - 1; i >= 0; --i) {
              target[i + targetStart] = this[i + start];
            }
          } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
            // ascending copy from start
            for (i = 0; i < len; ++i) {
              target[i + targetStart] = this[i + start];
            }
          } else {
            Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);
          }

          return len;
        }; // Usage:
        //    buffer.fill(number[, offset[, end]])
        //    buffer.fill(buffer[, offset[, end]])
        //    buffer.fill(string[, offset[, end]][, encoding])


        Buffer.prototype.fill = function fill(val, start, end, encoding) {
          // Handle string cases:
          if (typeof val === 'string') {
            if (typeof start === 'string') {
              encoding = start;
              start = 0;
              end = this.length;
            } else if (typeof end === 'string') {
              encoding = end;
              end = this.length;
            }

            if (val.length === 1) {
              var code = val.charCodeAt(0);

              if (code < 256) {
                val = code;
              }
            }

            if (encoding !== undefined && typeof encoding !== 'string') {
              throw new TypeError('encoding must be a string');
            }

            if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
              throw new TypeError('Unknown encoding: ' + encoding);
            }
          } else if (typeof val === 'number') {
            val = val & 255;
          } // Invalid ranges are not set to a default, so can range check early.


          if (start < 0 || this.length < start || this.length < end) {
            throw new RangeError('Out of range index');
          }

          if (end <= start) {
            return this;
          }

          start = start >>> 0;
          end = end === undefined ? this.length : end >>> 0;
          if (!val) val = 0;
          var i;

          if (typeof val === 'number') {
            for (i = start; i < end; ++i) {
              this[i] = val;
            }
          } else {
            var bytes = Buffer.isBuffer(val) ? val : utf8ToBytes(new Buffer(val, encoding).toString());
            var len = bytes.length;

            for (i = 0; i < end - start; ++i) {
              this[i + start] = bytes[i % len];
            }
          }

          return this;
        }; // HELPER FUNCTIONS
        // ================


        var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

        function base64clean(str) {
          // Node strips out invalid characters like \n and \t from the string, base64-js does not
          str = stringtrim(str).replace(INVALID_BASE64_RE, ''); // Node converts strings with length < 2 to ''

          if (str.length < 2) return ''; // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not

          while (str.length % 4 !== 0) {
            str = str + '=';
          }

          return str;
        }

        function stringtrim(str) {
          if (str.trim) return str.trim();
          return str.replace(/^\s+|\s+$/g, '');
        }

        function toHex(n) {
          if (n < 16) return '0' + n.toString(16);
          return n.toString(16);
        }

        function utf8ToBytes(string, units) {
          units = units || Infinity;
          var codePoint;
          var length = string.length;
          var leadSurrogate = null;
          var bytes = [];

          for (var i = 0; i < length; ++i) {
            codePoint = string.charCodeAt(i); // is surrogate component

            if (codePoint > 0xD7FF && codePoint < 0xE000) {
              // last char was a lead
              if (!leadSurrogate) {
                // no lead yet
                if (codePoint > 0xDBFF) {
                  // unexpected trail
                  if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                  continue;
                } else if (i + 1 === length) {
                  // unpaired lead
                  if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                  continue;
                } // valid lead


                leadSurrogate = codePoint;
                continue;
              } // 2 leads in a row


              if (codePoint < 0xDC00) {
                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                leadSurrogate = codePoint;
                continue;
              } // valid surrogate pair


              codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
            } else if (leadSurrogate) {
              // valid bmp char, but last char was a lead
              if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            }

            leadSurrogate = null; // encode utf8

            if (codePoint < 0x80) {
              if ((units -= 1) < 0) break;
              bytes.push(codePoint);
            } else if (codePoint < 0x800) {
              if ((units -= 2) < 0) break;
              bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
            } else if (codePoint < 0x10000) {
              if ((units -= 3) < 0) break;
              bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
            } else if (codePoint < 0x110000) {
              if ((units -= 4) < 0) break;
              bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
            } else {
              throw new Error('Invalid code point');
            }
          }

          return bytes;
        }

        function asciiToBytes(str) {
          var byteArray = [];

          for (var i = 0; i < str.length; ++i) {
            // Node's code seems to be doing this and not & 0x7F..
            byteArray.push(str.charCodeAt(i) & 0xFF);
          }

          return byteArray;
        }

        function utf16leToBytes(str, units) {
          var c, hi, lo;
          var byteArray = [];

          for (var i = 0; i < str.length; ++i) {
            if ((units -= 2) < 0) break;
            c = str.charCodeAt(i);
            hi = c >> 8;
            lo = c % 256;
            byteArray.push(lo);
            byteArray.push(hi);
          }

          return byteArray;
        }

        function base64ToBytes(str) {
          return base64.toByteArray(base64clean(str));
        }

        function blitBuffer(src, dst, offset, length) {
          for (var i = 0; i < length; ++i) {
            if (i + offset >= dst.length || i >= src.length) break;
            dst[i + offset] = src[i];
          }

          return i;
        }

        function isnan(val) {
          return val !== val; // eslint-disable-line no-self-compare
        }
        /* WEBPACK VAR INJECTION */

      }).call(this, __webpack_require__(24));
      /***/
    },
    /* 11 */

    /***/
    function (module, exports, __webpack_require__) {
      var fails = __webpack_require__(4); // Thank's IE8 for his funny defineProperty


      module.exports = !fails(function () {
        return Object.defineProperty({}, 1, {
          get: function get() {
            return 7;
          }
        })[1] != 7;
      });
      /***/
    },
    /* 12 */

    /***/
    function (module, exports, __webpack_require__) {
      ;

      (function (root, factory, undef) {
        if (true) {
          // CommonJS
          module.exports = exports = factory(__webpack_require__(2), __webpack_require__(49));
        } else {}
      })(this, function (CryptoJS) {
        /**
         * Cipher core components.
         */
        CryptoJS.lib.Cipher || function (undefined) {
          // Shortcuts
          var C = CryptoJS;
          var C_lib = C.lib;
          var Base = C_lib.Base;
          var WordArray = C_lib.WordArray;
          var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;
          var C_enc = C.enc;
          var Utf8 = C_enc.Utf8;
          var Base64 = C_enc.Base64;
          var C_algo = C.algo;
          var EvpKDF = C_algo.EvpKDF;
          /**
           * Abstract base cipher template.
           *
           * @property {number} keySize This cipher's key size. Default: 4 (128 bits)
           * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)
           * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.
           * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.
           */

          var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({
            /**
             * Configuration options.
             *
             * @property {WordArray} iv The IV to use for this operation.
             */
            cfg: Base.extend(),

            /**
             * Creates this cipher in encryption mode.
             *
             * @param {WordArray} key The key.
             * @param {Object} cfg (Optional) The configuration options to use for this operation.
             *
             * @return {Cipher} A cipher instance.
             *
             * @static
             *
             * @example
             *
             *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });
             */
            createEncryptor: function createEncryptor(key, cfg) {
              return this.create(this._ENC_XFORM_MODE, key, cfg);
            },

            /**
             * Creates this cipher in decryption mode.
             *
             * @param {WordArray} key The key.
             * @param {Object} cfg (Optional) The configuration options to use for this operation.
             *
             * @return {Cipher} A cipher instance.
             *
             * @static
             *
             * @example
             *
             *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });
             */
            createDecryptor: function createDecryptor(key, cfg) {
              return this.create(this._DEC_XFORM_MODE, key, cfg);
            },

            /**
             * Initializes a newly created cipher.
             *
             * @param {number} xformMode Either the encryption or decryption transormation mode constant.
             * @param {WordArray} key The key.
             * @param {Object} cfg (Optional) The configuration options to use for this operation.
             *
             * @example
             *
             *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });
             */
            init: function init(xformMode, key, cfg) {
              // Apply config defaults
              this.cfg = this.cfg.extend(cfg); // Store transform mode and key

              this._xformMode = xformMode;
              this._key = key; // Set initial values

              this.reset();
            },

            /**
             * Resets this cipher to its initial state.
             *
             * @example
             *
             *     cipher.reset();
             */
            reset: function reset() {
              // Reset data buffer
              BufferedBlockAlgorithm.reset.call(this); // Perform concrete-cipher logic

              this._doReset();
            },

            /**
             * Adds data to be encrypted or decrypted.
             *
             * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.
             *
             * @return {WordArray} The data after processing.
             *
             * @example
             *
             *     var encrypted = cipher.process('data');
             *     var encrypted = cipher.process(wordArray);
             */
            process: function process(dataUpdate) {
              // Append
              this._append(dataUpdate); // Process available blocks


              return this._process();
            },

            /**
             * Finalizes the encryption or decryption process.
             * Note that the finalize operation is effectively a destructive, read-once operation.
             *
             * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.
             *
             * @return {WordArray} The data after final processing.
             *
             * @example
             *
             *     var encrypted = cipher.finalize();
             *     var encrypted = cipher.finalize('data');
             *     var encrypted = cipher.finalize(wordArray);
             */
            finalize: function finalize(dataUpdate) {
              // Final data update
              if (dataUpdate) {
                this._append(dataUpdate);
              } // Perform concrete-cipher logic


              var finalProcessedData = this._doFinalize();

              return finalProcessedData;
            },
            keySize: 128 / 32,
            ivSize: 128 / 32,
            _ENC_XFORM_MODE: 1,
            _DEC_XFORM_MODE: 2,

            /**
             * Creates shortcut functions to a cipher's object interface.
             *
             * @param {Cipher} cipher The cipher to create a helper for.
             *
             * @return {Object} An object with encrypt and decrypt shortcut functions.
             *
             * @static
             *
             * @example
             *
             *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);
             */
            _createHelper: function () {
              function selectCipherStrategy(key) {
                if (typeof key == 'string') {
                  return PasswordBasedCipher;
                } else {
                  return SerializableCipher;
                }
              }

              return function (cipher) {
                return {
                  encrypt: function encrypt(message, key, cfg) {
                    return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);
                  },
                  decrypt: function decrypt(ciphertext, key, cfg) {
                    return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);
                  }
                };
              };
            }()
          });
          /**
           * Abstract base stream cipher template.
           *
           * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)
           */

          var StreamCipher = C_lib.StreamCipher = Cipher.extend({
            _doFinalize: function _doFinalize() {
              // Process partial blocks
              var finalProcessedBlocks = this._process(!!'flush');

              return finalProcessedBlocks;
            },
            blockSize: 1
          });
          /**
           * Mode namespace.
           */

          var C_mode = C.mode = {};
          /**
           * Abstract base block cipher mode template.
           */

          var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({
            /**
             * Creates this mode for encryption.
             *
             * @param {Cipher} cipher A block cipher instance.
             * @param {Array} iv The IV words.
             *
             * @static
             *
             * @example
             *
             *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);
             */
            createEncryptor: function createEncryptor(cipher, iv) {
              return this.Encryptor.create(cipher, iv);
            },

            /**
             * Creates this mode for decryption.
             *
             * @param {Cipher} cipher A block cipher instance.
             * @param {Array} iv The IV words.
             *
             * @static
             *
             * @example
             *
             *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);
             */
            createDecryptor: function createDecryptor(cipher, iv) {
              return this.Decryptor.create(cipher, iv);
            },

            /**
             * Initializes a newly created mode.
             *
             * @param {Cipher} cipher A block cipher instance.
             * @param {Array} iv The IV words.
             *
             * @example
             *
             *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);
             */
            init: function init(cipher, iv) {
              this._cipher = cipher;
              this._iv = iv;
            }
          });
          /**
           * Cipher Block Chaining mode.
           */

          var CBC = C_mode.CBC = function () {
            /**
             * Abstract base CBC mode.
             */
            var CBC = BlockCipherMode.extend();
            /**
             * CBC encryptor.
             */

            CBC.Encryptor = CBC.extend({
              /**
               * Processes the data block at offset.
               *
               * @param {Array} words The data words to operate on.
               * @param {number} offset The offset where the block starts.
               *
               * @example
               *
               *     mode.processBlock(data.words, offset);
               */
              processBlock: function processBlock(words, offset) {
                // Shortcuts
                var cipher = this._cipher;
                var blockSize = cipher.blockSize; // XOR and encrypt

                xorBlock.call(this, words, offset, blockSize);
                cipher.encryptBlock(words, offset); // Remember this block to use with next block

                this._prevBlock = words.slice(offset, offset + blockSize);
              }
            });
            /**
             * CBC decryptor.
             */

            CBC.Decryptor = CBC.extend({
              /**
               * Processes the data block at offset.
               *
               * @param {Array} words The data words to operate on.
               * @param {number} offset The offset where the block starts.
               *
               * @example
               *
               *     mode.processBlock(data.words, offset);
               */
              processBlock: function processBlock(words, offset) {
                // Shortcuts
                var cipher = this._cipher;
                var blockSize = cipher.blockSize; // Remember this block to use with next block

                var thisBlock = words.slice(offset, offset + blockSize); // Decrypt and XOR

                cipher.decryptBlock(words, offset);
                xorBlock.call(this, words, offset, blockSize); // This block becomes the previous block

                this._prevBlock = thisBlock;
              }
            });

            function xorBlock(words, offset, blockSize) {
              // Shortcut
              var iv = this._iv; // Choose mixing block

              if (iv) {
                var block = iv; // Remove IV for subsequent blocks

                this._iv = undefined;
              } else {
                var block = this._prevBlock;
              } // XOR blocks


              for (var i = 0; i < blockSize; i++) {
                words[offset + i] ^= block[i];
              }
            }

            return CBC;
          }();
          /**
           * Padding namespace.
           */


          var C_pad = C.pad = {};
          /**
           * PKCS #5/7 padding strategy.
           */

          var Pkcs7 = C_pad.Pkcs7 = {
            /**
             * Pads data using the algorithm defined in PKCS #5/7.
             *
             * @param {WordArray} data The data to pad.
             * @param {number} blockSize The multiple that the data should be padded to.
             *
             * @static
             *
             * @example
             *
             *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);
             */
            pad: function pad(data, blockSize) {
              // Shortcut
              var blockSizeBytes = blockSize * 4; // Count padding bytes

              var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes; // Create padding word

              var paddingWord = nPaddingBytes << 24 | nPaddingBytes << 16 | nPaddingBytes << 8 | nPaddingBytes; // Create padding

              var paddingWords = [];

              for (var i = 0; i < nPaddingBytes; i += 4) {
                paddingWords.push(paddingWord);
              }

              var padding = WordArray.create(paddingWords, nPaddingBytes); // Add padding

              data.concat(padding);
            },

            /**
             * Unpads data that had been padded using the algorithm defined in PKCS #5/7.
             *
             * @param {WordArray} data The data to unpad.
             *
             * @static
             *
             * @example
             *
             *     CryptoJS.pad.Pkcs7.unpad(wordArray);
             */
            unpad: function unpad(data) {
              // Get number of padding bytes from last byte
              var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 0xff; // Remove padding

              data.sigBytes -= nPaddingBytes;
            }
          };
          /**
           * Abstract base block cipher template.
           *
           * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)
           */

          var BlockCipher = C_lib.BlockCipher = Cipher.extend({
            /**
             * Configuration options.
             *
             * @property {Mode} mode The block mode to use. Default: CBC
             * @property {Padding} padding The padding strategy to use. Default: Pkcs7
             */
            cfg: Cipher.cfg.extend({
              mode: CBC,
              padding: Pkcs7
            }),
            reset: function reset() {
              // Reset cipher
              Cipher.reset.call(this); // Shortcuts

              var cfg = this.cfg;
              var iv = cfg.iv;
              var mode = cfg.mode; // Reset block mode

              if (this._xformMode == this._ENC_XFORM_MODE) {
                var modeCreator = mode.createEncryptor;
              } else
                /* if (this._xformMode == this._DEC_XFORM_MODE) */
                {
                  var modeCreator = mode.createDecryptor; // Keep at least one block in the buffer for unpadding

                  this._minBufferSize = 1;
                }

              if (this._mode && this._mode.__creator == modeCreator) {
                this._mode.init(this, iv && iv.words);
              } else {
                this._mode = modeCreator.call(mode, this, iv && iv.words);
                this._mode.__creator = modeCreator;
              }
            },
            _doProcessBlock: function _doProcessBlock(words, offset) {
              this._mode.processBlock(words, offset);
            },
            _doFinalize: function _doFinalize() {
              // Shortcut
              var padding = this.cfg.padding; // Finalize

              if (this._xformMode == this._ENC_XFORM_MODE) {
                // Pad data
                padding.pad(this._data, this.blockSize); // Process final blocks

                var finalProcessedBlocks = this._process(!!'flush');
              } else
                /* if (this._xformMode == this._DEC_XFORM_MODE) */
                {
                  // Process final blocks
                  var finalProcessedBlocks = this._process(!!'flush'); // Unpad data


                  padding.unpad(finalProcessedBlocks);
                }

              return finalProcessedBlocks;
            },
            blockSize: 128 / 32
          });
          /**
           * A collection of cipher parameters.
           *
           * @property {WordArray} ciphertext The raw ciphertext.
           * @property {WordArray} key The key to this ciphertext.
           * @property {WordArray} iv The IV used in the ciphering operation.
           * @property {WordArray} salt The salt used with a key derivation function.
           * @property {Cipher} algorithm The cipher algorithm.
           * @property {Mode} mode The block mode used in the ciphering operation.
           * @property {Padding} padding The padding scheme used in the ciphering operation.
           * @property {number} blockSize The block size of the cipher.
           * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.
           */

          var CipherParams = C_lib.CipherParams = Base.extend({
            /**
             * Initializes a newly created cipher params object.
             *
             * @param {Object} cipherParams An object with any of the possible cipher parameters.
             *
             * @example
             *
             *     var cipherParams = CryptoJS.lib.CipherParams.create({
             *         ciphertext: ciphertextWordArray,
             *         key: keyWordArray,
             *         iv: ivWordArray,
             *         salt: saltWordArray,
             *         algorithm: CryptoJS.algo.AES,
             *         mode: CryptoJS.mode.CBC,
             *         padding: CryptoJS.pad.PKCS7,
             *         blockSize: 4,
             *         formatter: CryptoJS.format.OpenSSL
             *     });
             */
            init: function init(cipherParams) {
              this.mixIn(cipherParams);
            },

            /**
             * Converts this cipher params object to a string.
             *
             * @param {Format} formatter (Optional) The formatting strategy to use.
             *
             * @return {string} The stringified cipher params.
             *
             * @throws Error If neither the formatter nor the default formatter is set.
             *
             * @example
             *
             *     var string = cipherParams + '';
             *     var string = cipherParams.toString();
             *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);
             */
            toString: function toString(formatter) {
              return (formatter || this.formatter).stringify(this);
            }
          });
          /**
           * Format namespace.
           */

          var C_format = C.format = {};
          /**
           * OpenSSL formatting strategy.
           */

          var OpenSSLFormatter = C_format.OpenSSL = {
            /**
             * Converts a cipher params object to an OpenSSL-compatible string.
             *
             * @param {CipherParams} cipherParams The cipher params object.
             *
             * @return {string} The OpenSSL-compatible string.
             *
             * @static
             *
             * @example
             *
             *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);
             */
            stringify: function stringify(cipherParams) {
              // Shortcuts
              var ciphertext = cipherParams.ciphertext;
              var salt = cipherParams.salt; // Format

              if (salt) {
                var wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);
              } else {
                var wordArray = ciphertext;
              }

              return wordArray.toString(Base64);
            },

            /**
             * Converts an OpenSSL-compatible string to a cipher params object.
             *
             * @param {string} openSSLStr The OpenSSL-compatible string.
             *
             * @return {CipherParams} The cipher params object.
             *
             * @static
             *
             * @example
             *
             *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);
             */
            parse: function parse(openSSLStr) {
              // Parse base64
              var ciphertext = Base64.parse(openSSLStr); // Shortcut

              var ciphertextWords = ciphertext.words; // Test for salt

              if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {
                // Extract salt
                var salt = WordArray.create(ciphertextWords.slice(2, 4)); // Remove salt from ciphertext

                ciphertextWords.splice(0, 4);
                ciphertext.sigBytes -= 16;
              }

              return CipherParams.create({
                ciphertext: ciphertext,
                salt: salt
              });
            }
          };
          /**
           * A cipher wrapper that returns ciphertext as a serializable cipher params object.
           */

          var SerializableCipher = C_lib.SerializableCipher = Base.extend({
            /**
             * Configuration options.
             *
             * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL
             */
            cfg: Base.extend({
              format: OpenSSLFormatter
            }),

            /**
             * Encrypts a message.
             *
             * @param {Cipher} cipher The cipher algorithm to use.
             * @param {WordArray|string} message The message to encrypt.
             * @param {WordArray} key The key.
             * @param {Object} cfg (Optional) The configuration options to use for this operation.
             *
             * @return {CipherParams} A cipher params object.
             *
             * @static
             *
             * @example
             *
             *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);
             *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });
             *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });
             */
            encrypt: function encrypt(cipher, message, key, cfg) {
              // Apply config defaults
              cfg = this.cfg.extend(cfg); // Encrypt

              var encryptor = cipher.createEncryptor(key, cfg);
              var ciphertext = encryptor.finalize(message); // Shortcut

              var cipherCfg = encryptor.cfg; // Create and return serializable cipher params

              return CipherParams.create({
                ciphertext: ciphertext,
                key: key,
                iv: cipherCfg.iv,
                algorithm: cipher,
                mode: cipherCfg.mode,
                padding: cipherCfg.padding,
                blockSize: cipher.blockSize,
                formatter: cfg.format
              });
            },

            /**
             * Decrypts serialized ciphertext.
             *
             * @param {Cipher} cipher The cipher algorithm to use.
             * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
             * @param {WordArray} key The key.
             * @param {Object} cfg (Optional) The configuration options to use for this operation.
             *
             * @return {WordArray} The plaintext.
             *
             * @static
             *
             * @example
             *
             *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });
             *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });
             */
            decrypt: function decrypt(cipher, ciphertext, key, cfg) {
              // Apply config defaults
              cfg = this.cfg.extend(cfg); // Convert string to CipherParams

              ciphertext = this._parse(ciphertext, cfg.format); // Decrypt

              var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);
              return plaintext;
            },

            /**
             * Converts serialized ciphertext to CipherParams,
             * else assumed CipherParams already and returns ciphertext unchanged.
             *
             * @param {CipherParams|string} ciphertext The ciphertext.
             * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.
             *
             * @return {CipherParams} The unserialized ciphertext.
             *
             * @static
             *
             * @example
             *
             *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);
             */
            _parse: function _parse(ciphertext, format) {
              if (typeof ciphertext == 'string') {
                return format.parse(ciphertext, this);
              } else {
                return ciphertext;
              }
            }
          });
          /**
           * Key derivation function namespace.
           */

          var C_kdf = C.kdf = {};
          /**
           * OpenSSL key derivation function.
           */

          var OpenSSLKdf = C_kdf.OpenSSL = {
            /**
             * Derives a key and IV from a password.
             *
             * @param {string} password The password to derive from.
             * @param {number} keySize The size in words of the key to generate.
             * @param {number} ivSize The size in words of the IV to generate.
             * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.
             *
             * @return {CipherParams} A cipher params object with the key, IV, and salt.
             *
             * @static
             *
             * @example
             *
             *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);
             *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');
             */
            execute: function execute(password, keySize, ivSize, salt) {
              // Generate random salt
              if (!salt) {
                salt = WordArray.random(64 / 8);
              } // Derive key and IV


              var key = EvpKDF.create({
                keySize: keySize + ivSize
              }).compute(password, salt); // Separate key and IV

              var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);
              key.sigBytes = keySize * 4; // Return params

              return CipherParams.create({
                key: key,
                iv: iv,
                salt: salt
              });
            }
          };
          /**
           * A serializable cipher wrapper that derives the key from a password,
           * and returns ciphertext as a serializable cipher params object.
           */

          var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({
            /**
             * Configuration options.
             *
             * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL
             */
            cfg: SerializableCipher.cfg.extend({
              kdf: OpenSSLKdf
            }),

            /**
             * Encrypts a message using a password.
             *
             * @param {Cipher} cipher The cipher algorithm to use.
             * @param {WordArray|string} message The message to encrypt.
             * @param {string} password The password.
             * @param {Object} cfg (Optional) The configuration options to use for this operation.
             *
             * @return {CipherParams} A cipher params object.
             *
             * @static
             *
             * @example
             *
             *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');
             *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });
             */
            encrypt: function encrypt(cipher, message, password, cfg) {
              // Apply config defaults
              cfg = this.cfg.extend(cfg); // Derive key and other params

              var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize); // Add IV to config

              cfg.iv = derivedParams.iv; // Encrypt

              var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg); // Mix in derived params

              ciphertext.mixIn(derivedParams);
              return ciphertext;
            },

            /**
             * Decrypts serialized ciphertext using a password.
             *
             * @param {Cipher} cipher The cipher algorithm to use.
             * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
             * @param {string} password The password.
             * @param {Object} cfg (Optional) The configuration options to use for this operation.
             *
             * @return {WordArray} The plaintext.
             *
             * @static
             *
             * @example
             *
             *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });
             *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });
             */
            decrypt: function decrypt(cipher, ciphertext, password, cfg) {
              // Apply config defaults
              cfg = this.cfg.extend(cfg); // Convert string to CipherParams

              ciphertext = this._parse(ciphertext, cfg.format); // Derive key and other params

              var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt); // Add IV to config

              cfg.iv = derivedParams.iv; // Decrypt

              var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);
              return plaintext;
            }
          });
        }();
      });
      /***/

    },
    /* 13 */

    /***/
    function (module, exports) {
      module.exports = function (it) {
        return _typeof4(it) === 'object' ? it !== null : typeof it === 'function';
      };
      /***/

    },
    /* 14 */

    /***/
    function (module, exports) {
      var hasOwnProperty = {}.hasOwnProperty;

      module.exports = function (it, key) {
        return hasOwnProperty.call(it, key);
      };
      /***/

    },
    /* 15 */

    /***/
    function (module, exports, __webpack_require__) {
      var DESCRIPTORS = __webpack_require__(11);

      var IE8_DOM_DEFINE = __webpack_require__(198);

      var anObject = __webpack_require__(16);

      var toPrimitive = __webpack_require__(55);

      var nativeDefineProperty = Object.defineProperty; // `Object.defineProperty` method
      // https://tc39.github.io/ecma262/#sec-object.defineproperty

      exports.f = DESCRIPTORS ? nativeDefineProperty : function defineProperty(O, P, Attributes) {
        anObject(O);
        P = toPrimitive(P, true);
        anObject(Attributes);
        if (IE8_DOM_DEFINE) try {
          return nativeDefineProperty(O, P, Attributes);
        } catch (error) {
          /* empty */
        }
        if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');
        if ('value' in Attributes) O[P] = Attributes.value;
        return O;
      };
      /***/
    },
    /* 16 */

    /***/
    function (module, exports, __webpack_require__) {
      var isObject = __webpack_require__(13);

      module.exports = function (it) {
        if (!isObject(it)) {
          throw TypeError(String(it) + ' is not an object');
        }

        return it;
      };
      /***/

    },
    /* 17 */

    /***/
    function (module, exports) {
      // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
      var global = module.exports = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self // eslint-disable-next-line no-new-func
      : Function('return this')();
      if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef

      /***/
    },
    /* 18 */

    /***/
    function (module, exports, __webpack_require__) {
      var DESCRIPTORS = __webpack_require__(11);

      var definePropertyModule = __webpack_require__(15);

      var createPropertyDescriptor = __webpack_require__(42);

      module.exports = DESCRIPTORS ? function (object, key, value) {
        return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));
      } : function (object, key, value) {
        object[key] = value;
        return object;
      };
      /***/
    },
    /* 19 */

    /***/
    function (module, exports, __webpack_require__) {
      var requireObjectCoercible = __webpack_require__(34); // `ToObject` abstract operation
      // https://tc39.github.io/ecma262/#sec-toobject


      module.exports = function (argument) {
        return Object(requireObjectCoercible(argument));
      };
      /***/

    },
    /* 20 */

    /***/
    function (module, exports, __webpack_require__) {
      var bind = __webpack_require__(96);

      var IndexedObject = __webpack_require__(92);

      var toObject = __webpack_require__(19);

      var toLength = __webpack_require__(8);

      var arraySpeciesCreate = __webpack_require__(206);

      var push = [].push; // `Array.prototype.{ forEach, map, filter, some, every, find, findIndex }` methods implementation

      var createMethod = function createMethod(TYPE) {
        var IS_MAP = TYPE == 1;
        var IS_FILTER = TYPE == 2;
        var IS_SOME = TYPE == 3;
        var IS_EVERY = TYPE == 4;
        var IS_FIND_INDEX = TYPE == 6;
        var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
        return function ($this, callbackfn, that, specificCreate) {
          var O = toObject($this);
          var self = IndexedObject(O);
          var boundFunction = bind(callbackfn, that, 3);
          var length = toLength(self.length);
          var index = 0;
          var create = specificCreate || arraySpeciesCreate;
          var target = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
          var value, result;

          for (; length > index; index++) {
            if (NO_HOLES || index in self) {
              value = self[index];
              result = boundFunction(value, index, O);

              if (TYPE) {
                if (IS_MAP) target[index] = result; // map
                else if (result) switch (TYPE) {
                    case 3:
                      return true;
                    // some

                    case 5:
                      return value;
                    // find

                    case 6:
                      return index;
                    // findIndex

                    case 2:
                      push.call(target, value);
                    // filter
                  } else if (IS_EVERY) return false; // every
              }
            }
          }

          return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
        };
      };

      module.exports = {
        // `Array.prototype.forEach` method
        // https://tc39.github.io/ecma262/#sec-array.prototype.foreach
        forEach: createMethod(0),
        // `Array.prototype.map` method
        // https://tc39.github.io/ecma262/#sec-array.prototype.map
        map: createMethod(1),
        // `Array.prototype.filter` method
        // https://tc39.github.io/ecma262/#sec-array.prototype.filter
        filter: createMethod(2),
        // `Array.prototype.some` method
        // https://tc39.github.io/ecma262/#sec-array.prototype.some
        some: createMethod(3),
        // `Array.prototype.every` method
        // https://tc39.github.io/ecma262/#sec-array.prototype.every
        every: createMethod(4),
        // `Array.prototype.find` method
        // https://tc39.github.io/ecma262/#sec-array.prototype.find
        find: createMethod(5),
        // `Array.prototype.findIndex` method
        // https://tc39.github.io/ecma262/#sec-array.prototype.findIndex
        findIndex: createMethod(6)
      };
      /***/
    },
    /* 21 */

    /***/
    function (module, exports, __webpack_require__) {
      var store = __webpack_require__(181)('wks');

      var uid = __webpack_require__(131);

      var _Symbol2 = __webpack_require__(17).Symbol;

      var USE_SYMBOL = typeof _Symbol2 == 'function';

      var $exports = module.exports = function (name) {
        return store[name] || (store[name] = USE_SYMBOL && _Symbol2[name] || (USE_SYMBOL ? _Symbol2 : uid)('Symbol.' + name));
      };

      $exports.store = store;
      /***/
    },
    /* 22 */

    /***/
    function (module, exports) {
      module.exports = function (it) {
        return _typeof4(it) === 'object' ? it !== null : typeof it === 'function';
      };
      /***/

    },
    /* 23 */

    /***/
    function (module, exports, __webpack_require__) {
      // Thank's IE8 for his funny defineProperty
      module.exports = !__webpack_require__(52)(function () {
        return Object.defineProperty({}, 'a', {
          get: function get() {
            return 7;
          }
        }).a != 7;
      });
      /***/
    },
    /* 24 */

    /***/
    function (module, exports) {
      var g; // This works in non-strict mode

      g = function () {
        return this;
      }();

      try {
        // This works if eval is allowed (see CSP)
        g = g || new Function("return this")();
      } catch (e) {
        // This works if the window reference is available
        if ((typeof window === "undefined" ? "undefined" : _typeof4(window)) === "object") g = window;
      } // g can still be undefined, but nothing to do about it...
      // We return undefined, instead of nothing here, so it's
      // easier to handle this case. if(!global) { ...}


      module.exports = g;
      /***/
    },
    /* 25 */

    /***/
    function (module, exports, __webpack_require__) {
      var global = __webpack_require__(3);

      var createNonEnumerableProperty = __webpack_require__(18);

      var has = __webpack_require__(14);

      var setGlobal = __webpack_require__(139);

      var inspectSource = __webpack_require__(140);

      var InternalStateModule = __webpack_require__(35);

      var getInternalState = InternalStateModule.get;
      var enforceInternalState = InternalStateModule.enforce;
      var TEMPLATE = String(String).split('String');
      (module.exports = function (O, key, value, options) {
        var unsafe = options ? !!options.unsafe : false;
        var simple = options ? !!options.enumerable : false;
        var noTargetGet = options ? !!options.noTargetGet : false;

        if (typeof value == 'function') {
          if (typeof key == 'string' && !has(value, 'name')) createNonEnumerableProperty(value, 'name', key);
          enforceInternalState(value).source = TEMPLATE.join(typeof key == 'string' ? key : '');
        }

        if (O === global) {
          if (simple) O[key] = value;else setGlobal(key, value);
          return;
        } else if (!unsafe) {
          delete O[key];
        } else if (!noTargetGet && O[key]) {
          simple = true;
        }

        if (simple) O[key] = value;else createNonEnumerableProperty(O, key, value); // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
      })(Function.prototype, 'toString', function toString() {
        return typeof this == 'function' && getInternalState(this).source || inspectSource(this);
      });
      /***/
    },
    /* 26 */

    /***/
    function (module, exports, __webpack_require__) {
      var anObject = __webpack_require__(29);

      var IE8_DOM_DEFINE = __webpack_require__(254);

      var toPrimitive = __webpack_require__(175);

      var dP = Object.defineProperty;
      exports.f = __webpack_require__(23) ? Object.defineProperty : function defineProperty(O, P, Attributes) {
        anObject(O);
        P = toPrimitive(P, true);
        anObject(Attributes);
        if (IE8_DOM_DEFINE) try {
          return dP(O, P, Attributes);
        } catch (e) {
          /* empty */
        }
        if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
        if ('value' in Attributes) O[P] = Attributes.value;
        return O;
      };
      /***/
    },
    /* 27 */

    /***/
    function (module, exports, __webpack_require__) {
      // toObject with fallback for non-array-like ES3 strings
      var IndexedObject = __webpack_require__(92);

      var requireObjectCoercible = __webpack_require__(34);

      module.exports = function (it) {
        return IndexedObject(requireObjectCoercible(it));
      };
      /***/

    },
    /* 28 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var toIndexedObject = __webpack_require__(27);

      var addToUnscopables = __webpack_require__(149);

      var Iterators = __webpack_require__(97);

      var InternalStateModule = __webpack_require__(35);

      var defineIterator = __webpack_require__(216);

      var ARRAY_ITERATOR = 'Array Iterator';
      var setInternalState = InternalStateModule.set;
      var getInternalState = InternalStateModule.getterFor(ARRAY_ITERATOR); // `Array.prototype.entries` method
      // https://tc39.github.io/ecma262/#sec-array.prototype.entries
      // `Array.prototype.keys` method
      // https://tc39.github.io/ecma262/#sec-array.prototype.keys
      // `Array.prototype.values` method
      // https://tc39.github.io/ecma262/#sec-array.prototype.values
      // `Array.prototype[@@iterator]` method
      // https://tc39.github.io/ecma262/#sec-array.prototype-@@iterator
      // `CreateArrayIterator` internal method
      // https://tc39.github.io/ecma262/#sec-createarrayiterator

      module.exports = defineIterator(Array, 'Array', function (iterated, kind) {
        setInternalState(this, {
          type: ARRAY_ITERATOR,
          target: toIndexedObject(iterated),
          // target
          index: 0,
          // next index
          kind: kind // kind

        }); // `%ArrayIteratorPrototype%.next` method
        // https://tc39.github.io/ecma262/#sec-%arrayiteratorprototype%.next
      }, function () {
        var state = getInternalState(this);
        var target = state.target;
        var kind = state.kind;
        var index = state.index++;

        if (!target || index >= target.length) {
          state.target = undefined;
          return {
            value: undefined,
            done: true
          };
        }

        if (kind == 'keys') return {
          value: index,
          done: false
        };
        if (kind == 'values') return {
          value: target[index],
          done: false
        };
        return {
          value: [index, target[index]],
          done: false
        };
      }, 'values'); // argumentsList[@@iterator] is %ArrayProto_values%
      // https://tc39.github.io/ecma262/#sec-createunmappedargumentsobject
      // https://tc39.github.io/ecma262/#sec-createmappedargumentsobject

      Iterators.Arguments = Iterators.Array; // https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables

      addToUnscopables('keys');
      addToUnscopables('values');
      addToUnscopables('entries');
      /***/
    },
    /* 29 */

    /***/
    function (module, exports, __webpack_require__) {
      var isObject = __webpack_require__(22);

      module.exports = function (it) {
        if (!isObject(it)) throw TypeError(it + ' is not an object!');
        return it;
      };
      /***/

    },
    /* 30 */

    /***/
    function (module, exports) {
      var toString = {}.toString;

      module.exports = function (it) {
        return toString.call(it).slice(8, -1);
      };
      /***/

    },
    /* 31 */

    /***/
    function (module, exports, __webpack_require__) {
      var DESCRIPTORS = __webpack_require__(11);

      var fails = __webpack_require__(4);

      var has = __webpack_require__(14);

      var defineProperty = Object.defineProperty;
      var cache = {};

      var thrower = function thrower(it) {
        throw it;
      };

      module.exports = function (METHOD_NAME, options) {
        if (has(cache, METHOD_NAME)) return cache[METHOD_NAME];
        if (!options) options = {};
        var method = [][METHOD_NAME];
        var ACCESSORS = has(options, 'ACCESSORS') ? options.ACCESSORS : false;
        var argument0 = has(options, 0) ? options[0] : thrower;
        var argument1 = has(options, 1) ? options[1] : undefined;
        return cache[METHOD_NAME] = !!method && !fails(function () {
          if (ACCESSORS && !DESCRIPTORS) return true;
          var O = {
            length: -1
          };
          if (ACCESSORS) defineProperty(O, 1, {
            enumerable: true,
            get: thrower
          });else O[1] = 1;
          method.call(O, argument0, argument1);
        });
      };
      /***/

    },
    /* 32 */

    /***/
    function (module, exports, __webpack_require__) {
      var TO_STRING_TAG_SUPPORT = __webpack_require__(152);

      var redefine = __webpack_require__(25);

      var toString = __webpack_require__(328); // `Object.prototype.toString` method
      // https://tc39.github.io/ecma262/#sec-object.prototype.tostring


      if (!TO_STRING_TAG_SUPPORT) {
        redefine(Object.prototype, 'toString', toString, {
          unsafe: true
        });
      }
      /***/

    },
    /* 33 */

    /***/
    function (module, exports, __webpack_require__) {
      // optional / simple context binding
      var aFunction = __webpack_require__(101);

      module.exports = function (fn, that, length) {
        aFunction(fn);
        if (that === undefined) return fn;

        switch (length) {
          case 1:
            return function (a) {
              return fn.call(that, a);
            };

          case 2:
            return function (a, b) {
              return fn.call(that, a, b);
            };

          case 3:
            return function (a, b, c) {
              return fn.call(that, a, b, c);
            };
        }

        return function ()
        /* ...args */
        {
          return fn.apply(that, arguments);
        };
      };
      /***/

    },
    /* 34 */

    /***/
    function (module, exports) {
      // `RequireObjectCoercible` abstract operation
      // https://tc39.github.io/ecma262/#sec-requireobjectcoercible
      module.exports = function (it) {
        if (it == undefined) throw TypeError("Can't call method on " + it);
        return it;
      };
      /***/

    },
    /* 35 */

    /***/
    function (module, exports, __webpack_require__) {
      var NATIVE_WEAK_MAP = __webpack_require__(308);

      var global = __webpack_require__(3);

      var isObject = __webpack_require__(13);

      var createNonEnumerableProperty = __webpack_require__(18);

      var objectHas = __webpack_require__(14);

      var sharedKey = __webpack_require__(111);

      var hiddenKeys = __webpack_require__(113);

      var WeakMap = global.WeakMap;
      var set, get, has;

      var enforce = function enforce(it) {
        return has(it) ? get(it) : set(it, {});
      };

      var getterFor = function getterFor(TYPE) {
        return function (it) {
          var state;

          if (!isObject(it) || (state = get(it)).type !== TYPE) {
            throw TypeError('Incompatible receiver, ' + TYPE + ' required');
          }

          return state;
        };
      };

      if (NATIVE_WEAK_MAP) {
        var store = new WeakMap();
        var wmget = store.get;
        var wmhas = store.has;
        var wmset = store.set;

        set = function set(it, metadata) {
          wmset.call(store, it, metadata);
          return metadata;
        };

        get = function get(it) {
          return wmget.call(store, it) || {};
        };

        has = function has(it) {
          return wmhas.call(store, it);
        };
      } else {
        var STATE = sharedKey('state');
        hiddenKeys[STATE] = true;

        set = function set(it, metadata) {
          createNonEnumerableProperty(it, STATE, metadata);
          return metadata;
        };

        get = function get(it) {
          return objectHas(it, STATE) ? it[STATE] : {};
        };

        has = function has(it) {
          return objectHas(it, STATE);
        };
      }

      module.exports = {
        set: set,
        get: get,
        has: has,
        enforce: enforce,
        getterFor: getterFor
      };
      /***/
    },
    /* 36 */

    /***/
    function (module, exports, __webpack_require__) {
      var path = __webpack_require__(114);

      var global = __webpack_require__(3);

      var aFunction = function aFunction(variable) {
        return typeof variable == 'function' ? variable : undefined;
      };

      module.exports = function (namespace, method) {
        return arguments.length < 2 ? aFunction(path[namespace]) || aFunction(global[namespace]) : path[namespace] && path[namespace][method] || global[namespace] && global[namespace][method];
      };
      /***/

    },
    /* 37 */

    /***/
    function (module, exports) {
      var ceil = Math.ceil;
      var floor = Math.floor; // `ToInteger` abstract operation
      // https://tc39.github.io/ecma262/#sec-tointeger

      module.exports = function (argument) {
        return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor : ceil)(argument);
      };
      /***/

    },
    /* 38 */

    /***/
    function (module, exports, __webpack_require__) {
      var anObject = __webpack_require__(16);

      var aFunction = __webpack_require__(44);

      var wellKnownSymbol = __webpack_require__(6);

      var SPECIES = wellKnownSymbol('species'); // `SpeciesConstructor` abstract operation
      // https://tc39.github.io/ecma262/#sec-speciesconstructor

      module.exports = function (O, defaultConstructor) {
        var C = anObject(O).constructor;
        var S;
        return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? defaultConstructor : aFunction(S);
      };
      /***/

    },
    /* 39 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";
      /* WEBPACK VAR INJECTION */

      (function (process) {
        /* eslint-disable node/no-deprecated-api */
        var buffer = __webpack_require__(10);

        var Buffer = buffer.Buffer;
        var safer = {};
        var key;

        for (key in buffer) {
          if (!buffer.hasOwnProperty(key)) continue;
          if (key === 'SlowBuffer' || key === 'Buffer') continue;
          safer[key] = buffer[key];
        }

        var Safer = safer.Buffer = {};

        for (key in Buffer) {
          if (!Buffer.hasOwnProperty(key)) continue;
          if (key === 'allocUnsafe' || key === 'allocUnsafeSlow') continue;
          Safer[key] = Buffer[key];
        }

        safer.Buffer.prototype = Buffer.prototype;

        if (!Safer.from || Safer.from === Uint8Array.from) {
          Safer.from = function (value, encodingOrOffset, length) {
            if (typeof value === 'number') {
              throw new TypeError('The "value" argument must not be of type number. Received type ' + _typeof4(value));
            }

            if (value && typeof value.length === 'undefined') {
              throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type ' + _typeof4(value));
            }

            return Buffer(value, encodingOrOffset, length);
          };
        }

        if (!Safer.alloc) {
          Safer.alloc = function (size, fill, encoding) {
            if (typeof size !== 'number') {
              throw new TypeError('The "size" argument must be of type number. Received type ' + _typeof4(size));
            }

            if (size < 0 || size >= 2 * (1 << 30)) {
              throw new RangeError('The value "' + size + '" is invalid for option "size"');
            }

            var buf = Buffer(size);

            if (!fill || fill.length === 0) {
              buf.fill(0);
            } else if (typeof encoding === 'string') {
              buf.fill(fill, encoding);
            } else {
              buf.fill(fill);
            }

            return buf;
          };
        }

        if (!safer.kStringMaxLength) {
          try {
            safer.kStringMaxLength = process.binding('buffer').kStringMaxLength;
          } catch (e) {// we can't determine kStringMaxLength in environments where process.binding
            // is unsupported, so let's not set it
          }
        }

        if (!safer.constants) {
          safer.constants = {
            MAX_LENGTH: safer.kMaxLength
          };

          if (safer.kStringMaxLength) {
            safer.constants.MAX_STRING_LENGTH = safer.kStringMaxLength;
          }
        }

        module.exports = safer;
        /* WEBPACK VAR INJECTION */
      }).call(this, __webpack_require__(47));
      /***/
    },
    /* 40 */

    /***/
    function (module, exports, __webpack_require__) {
      // Generated by CoffeeScript 1.7.1
      (function () {
        var NumberT, PropertyDescriptor;
        NumberT = __webpack_require__(89).Number;

        exports.resolveLength = function (length, stream, parent) {
          var res;

          if (typeof length === 'number') {
            res = length;
          } else if (typeof length === 'function') {
            res = length.call(parent, parent);
          } else if (parent && typeof length === 'string') {
            res = parent[length];
          } else if (stream && length instanceof NumberT) {
            res = length.decode(stream);
          }

          if (isNaN(res)) {
            throw new Error('Not a fixed size');
          }

          return res;
        };

        PropertyDescriptor = function () {
          function PropertyDescriptor(opts) {
            var key, val;

            if (opts == null) {
              opts = {};
            }

            this.enumerable = true;
            this.configurable = true;

            for (key in opts) {
              val = opts[key];
              this[key] = val;
            }
          }

          return PropertyDescriptor;
        }();

        exports.PropertyDescriptor = PropertyDescriptor;
      }).call(this);
      /***/
    },
    /* 41 */

    /***/
    function (module, exports, __webpack_require__) {
      var dP = __webpack_require__(26);

      var createDesc = __webpack_require__(100);

      module.exports = __webpack_require__(23) ? function (object, key, value) {
        return dP.f(object, key, createDesc(1, value));
      } : function (object, key, value) {
        object[key] = value;
        return object;
      };
      /***/
    },
    /* 42 */

    /***/
    function (module, exports) {
      module.exports = function (bitmap, value) {
        return {
          enumerable: !(bitmap & 1),
          configurable: !(bitmap & 2),
          writable: !(bitmap & 4),
          value: value
        };
      };
      /***/

    },
    /* 43 */

    /***/
    function (module, exports, __webpack_require__) {
      var toInteger = __webpack_require__(37);

      var max = Math.max;
      var min = Math.min; // Helper for a popular repeating case of the spec:
      // Let integer be ? ToInteger(index).
      // If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).

      module.exports = function (index, length) {
        var integer = toInteger(index);
        return integer < 0 ? max(integer + length, 0) : min(integer, length);
      };
      /***/

    },
    /* 44 */

    /***/
    function (module, exports) {
      module.exports = function (it) {
        if (typeof it != 'function') {
          throw TypeError(String(it) + ' is not a function');
        }

        return it;
      };
      /***/

    },
    /* 45 */

    /***/
    function (module, exports, __webpack_require__) {
      var anObject = __webpack_require__(16);

      var aPossiblePrototype = __webpack_require__(317); // `Object.setPrototypeOf` method
      // https://tc39.github.io/ecma262/#sec-object.setprototypeof
      // Works with __proto__ only. Old v8 can't work with null proto objects.

      /* eslint-disable no-proto */


      module.exports = Object.setPrototypeOf || ('__proto__' in {} ? function () {
        var CORRECT_SETTER = false;
        var test = {};
        var setter;

        try {
          setter = Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set;
          setter.call(test, []);
          CORRECT_SETTER = test instanceof Array;
        } catch (error) {
          /* empty */
        }

        return function setPrototypeOf(O, proto) {
          anObject(O);
          aPossiblePrototype(proto);
          if (CORRECT_SETTER) setter.call(O, proto);else O.__proto__ = proto;
          return O;
        };
      }() : undefined);
      /***/
    },
    /* 46 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var $ = __webpack_require__(1);

      var isObject = __webpack_require__(13);

      var isArray = __webpack_require__(115);

      var toAbsoluteIndex = __webpack_require__(43);

      var toLength = __webpack_require__(8);

      var toIndexedObject = __webpack_require__(27);

      var createProperty = __webpack_require__(146);

      var wellKnownSymbol = __webpack_require__(6);

      var arrayMethodHasSpeciesSupport = __webpack_require__(116);

      var arrayMethodUsesToLength = __webpack_require__(31);

      var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('slice');
      var USES_TO_LENGTH = arrayMethodUsesToLength('slice', {
        ACCESSORS: true,
        0: 0,
        1: 2
      });
      var SPECIES = wellKnownSymbol('species');
      var nativeSlice = [].slice;
      var max = Math.max; // `Array.prototype.slice` method
      // https://tc39.github.io/ecma262/#sec-array.prototype.slice
      // fallback for not array-like ES3 strings and DOM objects

      $({
        target: 'Array',
        proto: true,
        forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH
      }, {
        slice: function slice(start, end) {
          var O = toIndexedObject(this);
          var length = toLength(O.length);
          var k = toAbsoluteIndex(start, length);
          var fin = toAbsoluteIndex(end === undefined ? length : end, length); // inline `ArraySpeciesCreate` for usage native `Array#slice` where it's possible

          var Constructor, result, n;

          if (isArray(O)) {
            Constructor = O.constructor; // cross-realm fallback

            if (typeof Constructor == 'function' && (Constructor === Array || isArray(Constructor.prototype))) {
              Constructor = undefined;
            } else if (isObject(Constructor)) {
              Constructor = Constructor[SPECIES];
              if (Constructor === null) Constructor = undefined;
            }

            if (Constructor === Array || Constructor === undefined) {
              return nativeSlice.call(O, k, fin);
            }
          }

          result = new (Constructor === undefined ? Array : Constructor)(max(fin - k, 0));

          for (n = 0; k < fin; k++, n++) {
            if (k in O) createProperty(result, n, O[k]);
          }

          result.length = n;
          return result;
        }
      });
      /***/
    },
    /* 47 */

    /***/
    function (module, exports) {
      // shim for using process in browser
      var process = module.exports = {}; // cached from whatever global is present so that test runners that stub it
      // don't break things.  But we need to wrap it in a try catch in case it is
      // wrapped in strict mode code which doesn't define any globals.  It's inside a
      // function because try/catches deoptimize in certain engines.

      var cachedSetTimeout;
      var cachedClearTimeout;

      function defaultSetTimout() {
        throw new Error('setTimeout has not been defined');
      }

      function defaultClearTimeout() {
        throw new Error('clearTimeout has not been defined');
      }

      (function () {
        try {
          if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
          } else {
            cachedSetTimeout = defaultSetTimout;
          }
        } catch (e) {
          cachedSetTimeout = defaultSetTimout;
        }

        try {
          if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
          } else {
            cachedClearTimeout = defaultClearTimeout;
          }
        } catch (e) {
          cachedClearTimeout = defaultClearTimeout;
        }
      })();

      function runTimeout(fun) {
        if (cachedSetTimeout === setTimeout) {
          //normal enviroments in sane situations
          return setTimeout(fun, 0);
        } // if setTimeout wasn't available but was latter defined


        if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
          cachedSetTimeout = setTimeout;
          return setTimeout(fun, 0);
        }

        try {
          // when when somebody has screwed with setTimeout but no I.E. maddness
          return cachedSetTimeout(fun, 0);
        } catch (e) {
          try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
          } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
          }
        }
      }

      function runClearTimeout(marker) {
        if (cachedClearTimeout === clearTimeout) {
          //normal enviroments in sane situations
          return clearTimeout(marker);
        } // if clearTimeout wasn't available but was latter defined


        if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
          cachedClearTimeout = clearTimeout;
          return clearTimeout(marker);
        }

        try {
          // when when somebody has screwed with setTimeout but no I.E. maddness
          return cachedClearTimeout(marker);
        } catch (e) {
          try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
          } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
          }
        }
      }

      var queue = [];
      var draining = false;
      var currentQueue;
      var queueIndex = -1;

      function cleanUpNextTick() {
        if (!draining || !currentQueue) {
          return;
        }

        draining = false;

        if (currentQueue.length) {
          queue = currentQueue.concat(queue);
        } else {
          queueIndex = -1;
        }

        if (queue.length) {
          drainQueue();
        }
      }

      function drainQueue() {
        if (draining) {
          return;
        }

        var timeout = runTimeout(cleanUpNextTick);
        draining = true;
        var len = queue.length;

        while (len) {
          currentQueue = queue;
          queue = [];

          while (++queueIndex < len) {
            if (currentQueue) {
              currentQueue[queueIndex].run();
            }
          }

          queueIndex = -1;
          len = queue.length;
        }

        currentQueue = null;
        draining = false;
        runClearTimeout(timeout);
      }

      process.nextTick = function (fun) {
        var args = new Array(arguments.length - 1);

        if (arguments.length > 1) {
          for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
          }
        }

        queue.push(new Item(fun, args));

        if (queue.length === 1 && !draining) {
          runTimeout(drainQueue);
        }
      }; // v8 likes predictible objects


      function Item(fun, array) {
        this.fun = fun;
        this.array = array;
      }

      Item.prototype.run = function () {
        this.fun.apply(null, this.array);
      };

      process.title = 'browser';
      process.env = {};
      process.argv = [];
      process.version = ''; // empty string to avoid regexp issues

      process.versions = {};

      function noop() {}

      process.on = noop;
      process.addListener = noop;
      process.once = noop;
      process.off = noop;
      process.removeListener = noop;
      process.removeAllListeners = noop;
      process.emit = noop;
      process.prependListener = noop;
      process.prependOnceListener = noop;

      process.listeners = function (name) {
        return [];
      };

      process.binding = function (name) {
        throw new Error('process.binding is not supported');
      };

      process.cwd = function () {
        return '/';
      };

      process.chdir = function (dir) {
        throw new Error('process.chdir is not supported');
      };

      process.umask = function () {
        return 0;
      };
      /***/

    },
    /* 48 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict"; // Copyright Joyent, Inc. and other Node contributors.
      //
      // Permission is hereby granted, free of charge, to any person obtaining a
      // copy of this software and associated documentation files (the
      // "Software"), to deal in the Software without restriction, including
      // without limitation the rights to use, copy, modify, merge, publish,
      // distribute, sublicense, and/or sell copies of the Software, and to permit
      // persons to whom the Software is furnished to do so, subject to the
      // following conditions:
      //
      // The above copyright notice and this permission notice shall be included
      // in all copies or substantial portions of the Software.
      //
      // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
      // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
      // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
      // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
      // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
      // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
      // USE OR OTHER DEALINGS IN THE SOFTWARE.
      // a duplex stream is just a stream that is both readable and writable.
      // Since JS doesn't have multiple prototypal inheritance, this class
      // prototypally inherits from Readable, and then parasitically from
      // Writable.

      /*<replacement>*/

      var pna = __webpack_require__(123);
      /*</replacement>*/

      /*<replacement>*/


      var objectKeys = Object.keys || function (obj) {
        var keys = [];

        for (var key in obj) {
          keys.push(key);
        }

        return keys;
      };
      /*</replacement>*/


      module.exports = Duplex;
      /*<replacement>*/

      var util = Object.create(__webpack_require__(98));
      util.inherits = __webpack_require__(86);
      /*</replacement>*/

      var Readable = __webpack_require__(240);

      var Writable = __webpack_require__(165);

      util.inherits(Duplex, Readable);
      {
        // avoid scope creep, the keys array can then be collected
        var keys = objectKeys(Writable.prototype);

        for (var v = 0; v < keys.length; v++) {
          var method = keys[v];
          if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
        }
      }

      function Duplex(options) {
        if (!(this instanceof Duplex)) return new Duplex(options);
        Readable.call(this, options);
        Writable.call(this, options);
        if (options && options.readable === false) this.readable = false;
        if (options && options.writable === false) this.writable = false;
        this.allowHalfOpen = true;
        if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;
        this.once('end', onend);
      }

      Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get() {
          return this._writableState.highWaterMark;
        }
      }); // the no-half-open enforcer

      function onend() {
        // if we allow half-open state, or if the writable side ended,
        // then we're ok.
        if (this.allowHalfOpen || this._writableState.ended) return; // no more data can be written.
        // But allow more writes to happen in this tick.

        pna.nextTick(onEndNT, this);
      }

      function onEndNT(self) {
        self.end();
      }

      Object.defineProperty(Duplex.prototype, 'destroyed', {
        get: function get() {
          if (this._readableState === undefined || this._writableState === undefined) {
            return false;
          }

          return this._readableState.destroyed && this._writableState.destroyed;
        },
        set: function set(value) {
          // we ignore the value if the stream
          // has not been initialized yet
          if (this._readableState === undefined || this._writableState === undefined) {
            return;
          } // backward compatibility, the user is explicitly
          // managing destroyed


          this._readableState.destroyed = value;
          this._writableState.destroyed = value;
        }
      });

      Duplex.prototype._destroy = function (err, cb) {
        this.push(null);
        this.end();
        pna.nextTick(cb, err);
      };
      /***/

    },
    /* 49 */

    /***/
    function (module, exports, __webpack_require__) {
      ;

      (function (root, factory, undef) {
        if (true) {
          // CommonJS
          module.exports = exports = factory(__webpack_require__(2), __webpack_require__(167), __webpack_require__(168));
        } else {}
      })(this, function (CryptoJS) {
        (function () {
          // Shortcuts
          var C = CryptoJS;
          var C_lib = C.lib;
          var Base = C_lib.Base;
          var WordArray = C_lib.WordArray;
          var C_algo = C.algo;
          var MD5 = C_algo.MD5;
          /**
           * This key derivation function is meant to conform with EVP_BytesToKey.
           * www.openssl.org/docs/crypto/EVP_BytesToKey.html
           */

          var EvpKDF = C_algo.EvpKDF = Base.extend({
            /**
             * Configuration options.
             *
             * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
             * @property {Hasher} hasher The hash algorithm to use. Default: MD5
             * @property {number} iterations The number of iterations to perform. Default: 1
             */
            cfg: Base.extend({
              keySize: 128 / 32,
              hasher: MD5,
              iterations: 1
            }),

            /**
             * Initializes a newly created key derivation function.
             *
             * @param {Object} cfg (Optional) The configuration options to use for the derivation.
             *
             * @example
             *
             *     var kdf = CryptoJS.algo.EvpKDF.create();
             *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });
             *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });
             */
            init: function init(cfg) {
              this.cfg = this.cfg.extend(cfg);
            },

            /**
             * Derives a key from a password.
             *
             * @param {WordArray|string} password The password.
             * @param {WordArray|string} salt A salt.
             *
             * @return {WordArray} The derived key.
             *
             * @example
             *
             *     var key = kdf.compute(password, salt);
             */
            compute: function compute(password, salt) {
              // Shortcut
              var cfg = this.cfg; // Init hasher

              var hasher = cfg.hasher.create(); // Initial values

              var derivedKey = WordArray.create(); // Shortcuts

              var derivedKeyWords = derivedKey.words;
              var keySize = cfg.keySize;
              var iterations = cfg.iterations; // Generate key

              while (derivedKeyWords.length < keySize) {
                if (block) {
                  hasher.update(block);
                }

                var block = hasher.update(password).finalize(salt);
                hasher.reset(); // Iterations

                for (var i = 1; i < iterations; i++) {
                  block = hasher.finalize(block);
                  hasher.reset();
                }

                derivedKey.concat(block);
              }

              derivedKey.sigBytes = keySize * 4;
              return derivedKey;
            }
          });
          /**
           * Derives a key from a password.
           *
           * @param {WordArray|string} password The password.
           * @param {WordArray|string} salt A salt.
           * @param {Object} cfg (Optional) The configuration options to use for this computation.
           *
           * @return {WordArray} The derived key.
           *
           * @static
           *
           * @example
           *
           *     var key = CryptoJS.EvpKDF(password, salt);
           *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });
           *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });
           */

          C.EvpKDF = function (password, salt, cfg) {
            return EvpKDF.create(cfg).compute(password, salt);
          };
        })();

        return CryptoJS.EvpKDF;
      });
      /***/

    },
    /* 50 */

    /***/
    function (module, exports, __webpack_require__) {
      // to indexed object, toObject with fallback for non-array-like ES3 strings
      var IObject = __webpack_require__(172);

      var defined = __webpack_require__(173);

      module.exports = function (it) {
        return IObject(defined(it));
      };
      /***/

    },
    /* 51 */

    /***/
    function (module, exports) {
      var hasOwnProperty = {}.hasOwnProperty;

      module.exports = function (it, key) {
        return hasOwnProperty.call(it, key);
      };
      /***/

    },
    /* 52 */

    /***/
    function (module, exports) {
      module.exports = function (exec) {
        try {
          return !!exec();
        } catch (e) {
          return true;
        }
      };
      /***/

    },
    /* 53 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";
      /* WEBPACK VAR INJECTION */

      (function (Buffer, __dirname) {
        function VirtualFileSystem() {
          this.fileSystem = {};
          this.dataSystem = {};
        }

        VirtualFileSystem.prototype.existsSync = function (filename) {
          filename = fixFilename(filename);
          return typeof this.fileSystem[filename] !== 'undefined' || typeof this.dataSystem[filename] !== 'undefined';
        };

        VirtualFileSystem.prototype.readFileSync = function (filename, options) {
          filename = fixFilename(filename);
          var dataContent = this.dataSystem[filename];

          if (typeof dataContent === 'string' && options === 'utf8') {
            return dataContent;
          }

          if (dataContent) {
            return new Buffer(dataContent, typeof dataContent === 'string' ? 'base64' : undefined);
          }

          var content = this.fileSystem[filename];

          if (content) {
            return content;
          }

          throw 'File \'' + filename + '\' not found in virtual file system';
        };

        VirtualFileSystem.prototype.writeFileSync = function (filename, content) {
          this.fileSystem[fixFilename(filename)] = content;
        };

        VirtualFileSystem.prototype.bindFS = function (data) {
          this.dataSystem = data || {};
        };

        function fixFilename(filename) {
          if (filename.indexOf(__dirname) === 0) {
            filename = filename.substring(__dirname.length);
          }

          if (filename.indexOf('/') === 0) {
            filename = filename.substring(1);
          }

          return filename;
        }

        module.exports = new VirtualFileSystem();
        /* WEBPACK VAR INJECTION */
      }).call(this, __webpack_require__(10).Buffer, "/");
      /***/
    },
    /* 54 */

    /***/
    function (module, exports, __webpack_require__) {
      var DESCRIPTORS = __webpack_require__(11);

      var propertyIsEnumerableModule = __webpack_require__(110);

      var createPropertyDescriptor = __webpack_require__(42);

      var toIndexedObject = __webpack_require__(27);

      var toPrimitive = __webpack_require__(55);

      var has = __webpack_require__(14);

      var IE8_DOM_DEFINE = __webpack_require__(198);

      var nativeGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor; // `Object.getOwnPropertyDescriptor` method
      // https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptor

      exports.f = DESCRIPTORS ? nativeGetOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
        O = toIndexedObject(O);
        P = toPrimitive(P, true);
        if (IE8_DOM_DEFINE) try {
          return nativeGetOwnPropertyDescriptor(O, P);
        } catch (error) {
          /* empty */
        }
        if (has(O, P)) return createPropertyDescriptor(!propertyIsEnumerableModule.f.call(O, P), O[P]);
      };
      /***/
    },
    /* 55 */

    /***/
    function (module, exports, __webpack_require__) {
      var isObject = __webpack_require__(13); // `ToPrimitive` abstract operation
      // https://tc39.github.io/ecma262/#sec-toprimitive
      // instead of the ES6 spec version, we didn't implement @@toPrimitive case
      // and the second argument - flag - preferred type is a string


      module.exports = function (input, PREFERRED_STRING) {
        if (!isObject(input)) return input;
        var fn, val;
        if (PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
        if (typeof (fn = input.valueOf) == 'function' && !isObject(val = fn.call(input))) return val;
        if (!PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
        throw TypeError("Can't convert object to primitive value");
      };
      /***/

    },
    /* 56 */

    /***/
    function (module, exports) {
      module.exports = false;
      /***/
    },
    /* 57 */

    /***/
    function (module, exports, __webpack_require__) {
      var internalObjectKeys = __webpack_require__(201);

      var enumBugKeys = __webpack_require__(142);

      var hiddenKeys = enumBugKeys.concat('length', 'prototype'); // `Object.getOwnPropertyNames` method
      // https://tc39.github.io/ecma262/#sec-object.getownpropertynames

      exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
        return internalObjectKeys(O, hiddenKeys);
      };
      /***/

    },
    /* 58 */

    /***/
    function (module, exports, __webpack_require__) {
      var anObject = __webpack_require__(16);

      var defineProperties = __webpack_require__(310);

      var enumBugKeys = __webpack_require__(142);

      var hiddenKeys = __webpack_require__(113);

      var html = __webpack_require__(203);

      var documentCreateElement = __webpack_require__(138);

      var sharedKey = __webpack_require__(111);

      var GT = '>';
      var LT = '<';
      var PROTOTYPE = 'prototype';
      var SCRIPT = 'script';
      var IE_PROTO = sharedKey('IE_PROTO');

      var EmptyConstructor = function EmptyConstructor() {
        /* empty */
      };

      var scriptTag = function scriptTag(content) {
        return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;
      }; // Create object with fake `null` prototype: use ActiveX Object with cleared prototype


      var NullProtoObjectViaActiveX = function NullProtoObjectViaActiveX(activeXDocument) {
        activeXDocument.write(scriptTag(''));
        activeXDocument.close();
        var temp = activeXDocument.parentWindow.Object;
        activeXDocument = null; // avoid memory leak

        return temp;
      }; // Create object with fake `null` prototype: use iframe Object with cleared prototype


      var NullProtoObjectViaIFrame = function NullProtoObjectViaIFrame() {
        // Thrash, waste and sodomy: IE GC bug
        var iframe = documentCreateElement('iframe');
        var JS = 'java' + SCRIPT + ':';
        var iframeDocument;
        iframe.style.display = 'none';
        html.appendChild(iframe); // https://github.com/zloirock/core-js/issues/475

        iframe.src = String(JS);
        iframeDocument = iframe.contentWindow.document;
        iframeDocument.open();
        iframeDocument.write(scriptTag('document.F=Object'));
        iframeDocument.close();
        return iframeDocument.F;
      }; // Check for document.domain and active x support
      // No need to use active x approach when document.domain is not set
      // see https://github.com/es-shims/es5-shim/issues/150
      // variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
      // avoid IE GC bug


      var activeXDocument;

      var _NullProtoObject = function NullProtoObject() {
        try {
          /* global ActiveXObject */
          activeXDocument = document.domain && new ActiveXObject('htmlfile');
        } catch (error) {
          /* ignore */
        }

        _NullProtoObject = activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) : NullProtoObjectViaIFrame();
        var length = enumBugKeys.length;

        while (length--) {
          delete _NullProtoObject[PROTOTYPE][enumBugKeys[length]];
        }

        return _NullProtoObject();
      };

      hiddenKeys[IE_PROTO] = true; // `Object.create` method
      // https://tc39.github.io/ecma262/#sec-object.create

      module.exports = Object.create || function create(O, Properties) {
        var result;

        if (O !== null) {
          EmptyConstructor[PROTOTYPE] = anObject(O);
          result = new EmptyConstructor();
          EmptyConstructor[PROTOTYPE] = null; // add "__proto__" for Object.getPrototypeOf polyfill

          result[IE_PROTO] = O;
        } else result = _NullProtoObject();

        return Properties === undefined ? result : defineProperties(result, Properties);
      };
      /***/

    },
    /* 59 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var fails = __webpack_require__(4);

      module.exports = function (METHOD_NAME, argument) {
        var method = [][METHOD_NAME];
        return !!method && fails(function () {
          // eslint-disable-next-line no-useless-call,no-throw-literal
          method.call(null, argument || function () {
            throw 1;
          }, 1);
        });
      };
      /***/

    },
    /* 60 */

    /***/
    function (module, exports, __webpack_require__) {
      var has = __webpack_require__(14);

      var toObject = __webpack_require__(19);

      var sharedKey = __webpack_require__(111);

      var CORRECT_PROTOTYPE_GETTER = __webpack_require__(218);

      var IE_PROTO = sharedKey('IE_PROTO');
      var ObjectPrototype = Object.prototype; // `Object.getPrototypeOf` method
      // https://tc39.github.io/ecma262/#sec-object.getprototypeof

      module.exports = CORRECT_PROTOTYPE_GETTER ? Object.getPrototypeOf : function (O) {
        O = toObject(O);
        if (has(O, IE_PROTO)) return O[IE_PROTO];

        if (typeof O.constructor == 'function' && O instanceof O.constructor) {
          return O.constructor.prototype;
        }

        return O instanceof Object ? ObjectPrototype : null;
      };
      /***/
    },
    /* 61 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var $ = __webpack_require__(1);

      var fails = __webpack_require__(4);

      var ArrayBufferModule = __webpack_require__(154);

      var anObject = __webpack_require__(16);

      var toAbsoluteIndex = __webpack_require__(43);

      var toLength = __webpack_require__(8);

      var speciesConstructor = __webpack_require__(38);

      var ArrayBuffer = ArrayBufferModule.ArrayBuffer;
      var DataView = ArrayBufferModule.DataView;
      var nativeArrayBufferSlice = ArrayBuffer.prototype.slice;
      var INCORRECT_SLICE = fails(function () {
        return !new ArrayBuffer(2).slice(1, undefined).byteLength;
      }); // `ArrayBuffer.prototype.slice` method
      // https://tc39.github.io/ecma262/#sec-arraybuffer.prototype.slice

      $({
        target: 'ArrayBuffer',
        proto: true,
        unsafe: true,
        forced: INCORRECT_SLICE
      }, {
        slice: function slice(start, end) {
          if (nativeArrayBufferSlice !== undefined && end === undefined) {
            return nativeArrayBufferSlice.call(anObject(this), start); // FF fix
          }

          var length = anObject(this).byteLength;
          var first = toAbsoluteIndex(start, length);
          var fin = toAbsoluteIndex(end === undefined ? length : end, length);
          var result = new (speciesConstructor(this, ArrayBuffer))(toLength(fin - first));
          var viewSource = new DataView(this);
          var viewTarget = new DataView(result);
          var index = 0;

          while (first < fin) {
            viewTarget.setUint8(index++, viewSource.getUint8(first++));
          }

          return result;
        }
      });
      /***/
    },
    /* 62 */

    /***/
    function (module, exports, __webpack_require__) {
      var createTypedArrayConstructor = __webpack_require__(236); // `Uint8Array` constructor
      // https://tc39.github.io/ecma262/#sec-typedarray-objects


      createTypedArrayConstructor('Uint8', function (init) {
        return function Uint8Array(data, byteOffset, length) {
          return init(this, data, byteOffset, length);
        };
      });
      /***/
    },
    /* 63 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var ArrayBufferViewCore = __webpack_require__(5);

      var $copyWithin = __webpack_require__(338);

      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod; // `%TypedArray%.prototype.copyWithin` method
      // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.copywithin

      exportTypedArrayMethod('copyWithin', function copyWithin(target, start
      /* , end */
      ) {
        return $copyWithin.call(aTypedArray(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
      });
      /***/
    },
    /* 64 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var ArrayBufferViewCore = __webpack_require__(5);

      var $every = __webpack_require__(20).every;

      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod; // `%TypedArray%.prototype.every` method
      // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.every

      exportTypedArrayMethod('every', function every(callbackfn
      /* , thisArg */
      ) {
        return $every(aTypedArray(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
      });
      /***/
    },
    /* 65 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var ArrayBufferViewCore = __webpack_require__(5);

      var $fill = __webpack_require__(148);

      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod; // `%TypedArray%.prototype.fill` method
      // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.fill
      // eslint-disable-next-line no-unused-vars

      exportTypedArrayMethod('fill', function fill(value
      /* , start, end */
      ) {
        return $fill.apply(aTypedArray(this), arguments);
      });
      /***/
    },
    /* 66 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var ArrayBufferViewCore = __webpack_require__(5);

      var $filter = __webpack_require__(20).filter;

      var speciesConstructor = __webpack_require__(38);

      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod; // `%TypedArray%.prototype.filter` method
      // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.filter

      exportTypedArrayMethod('filter', function filter(callbackfn
      /* , thisArg */
      ) {
        var list = $filter(aTypedArray(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
        var C = speciesConstructor(this, this.constructor);
        var index = 0;
        var length = list.length;
        var result = new (aTypedArrayConstructor(C))(length);

        while (length > index) {
          result[index] = list[index++];
        }

        return result;
      });
      /***/
    },
    /* 67 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var ArrayBufferViewCore = __webpack_require__(5);

      var $find = __webpack_require__(20).find;

      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod; // `%TypedArray%.prototype.find` method
      // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.find

      exportTypedArrayMethod('find', function find(predicate
      /* , thisArg */
      ) {
        return $find(aTypedArray(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
      });
      /***/
    },
    /* 68 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var ArrayBufferViewCore = __webpack_require__(5);

      var $findIndex = __webpack_require__(20).findIndex;

      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod; // `%TypedArray%.prototype.findIndex` method
      // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.findindex

      exportTypedArrayMethod('findIndex', function findIndex(predicate
      /* , thisArg */
      ) {
        return $findIndex(aTypedArray(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
      });
      /***/
    },
    /* 69 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var ArrayBufferViewCore = __webpack_require__(5);

      var $forEach = __webpack_require__(20).forEach;

      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod; // `%TypedArray%.prototype.forEach` method
      // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.foreach

      exportTypedArrayMethod('forEach', function forEach(callbackfn
      /* , thisArg */
      ) {
        $forEach(aTypedArray(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
      });
      /***/
    },
    /* 70 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var ArrayBufferViewCore = __webpack_require__(5);

      var $includes = __webpack_require__(93).includes;

      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod; // `%TypedArray%.prototype.includes` method
      // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.includes

      exportTypedArrayMethod('includes', function includes(searchElement
      /* , fromIndex */
      ) {
        return $includes(aTypedArray(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
      });
      /***/
    },
    /* 71 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var ArrayBufferViewCore = __webpack_require__(5);

      var $indexOf = __webpack_require__(93).indexOf;

      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod; // `%TypedArray%.prototype.indexOf` method
      // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.indexof

      exportTypedArrayMethod('indexOf', function indexOf(searchElement
      /* , fromIndex */
      ) {
        return $indexOf(aTypedArray(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
      });
      /***/
    },
    /* 72 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var global = __webpack_require__(3);

      var ArrayBufferViewCore = __webpack_require__(5);

      var ArrayIterators = __webpack_require__(28);

      var wellKnownSymbol = __webpack_require__(6);

      var ITERATOR = wellKnownSymbol('iterator');
      var Uint8Array = global.Uint8Array;
      var arrayValues = ArrayIterators.values;
      var arrayKeys = ArrayIterators.keys;
      var arrayEntries = ArrayIterators.entries;
      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
      var nativeTypedArrayIterator = Uint8Array && Uint8Array.prototype[ITERATOR];
      var CORRECT_ITER_NAME = !!nativeTypedArrayIterator && (nativeTypedArrayIterator.name == 'values' || nativeTypedArrayIterator.name == undefined);

      var typedArrayValues = function values() {
        return arrayValues.call(aTypedArray(this));
      }; // `%TypedArray%.prototype.entries` method
      // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.entries


      exportTypedArrayMethod('entries', function entries() {
        return arrayEntries.call(aTypedArray(this));
      }); // `%TypedArray%.prototype.keys` method
      // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.keys

      exportTypedArrayMethod('keys', function keys() {
        return arrayKeys.call(aTypedArray(this));
      }); // `%TypedArray%.prototype.values` method
      // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.values

      exportTypedArrayMethod('values', typedArrayValues, !CORRECT_ITER_NAME); // `%TypedArray%.prototype[@@iterator]` method
      // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype-@@iterator

      exportTypedArrayMethod(ITERATOR, typedArrayValues, !CORRECT_ITER_NAME);
      /***/
    },
    /* 73 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var ArrayBufferViewCore = __webpack_require__(5);

      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
      var $join = [].join; // `%TypedArray%.prototype.join` method
      // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.join
      // eslint-disable-next-line no-unused-vars

      exportTypedArrayMethod('join', function join(separator) {
        return $join.apply(aTypedArray(this), arguments);
      });
      /***/
    },
    /* 74 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var ArrayBufferViewCore = __webpack_require__(5);

      var $lastIndexOf = __webpack_require__(339);

      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod; // `%TypedArray%.prototype.lastIndexOf` method
      // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.lastindexof
      // eslint-disable-next-line no-unused-vars

      exportTypedArrayMethod('lastIndexOf', function lastIndexOf(searchElement
      /* , fromIndex */
      ) {
        return $lastIndexOf.apply(aTypedArray(this), arguments);
      });
      /***/
    },
    /* 75 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var ArrayBufferViewCore = __webpack_require__(5);

      var $map = __webpack_require__(20).map;

      var speciesConstructor = __webpack_require__(38);

      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod; // `%TypedArray%.prototype.map` method
      // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.map

      exportTypedArrayMethod('map', function map(mapfn
      /* , thisArg */
      ) {
        return $map(aTypedArray(this), mapfn, arguments.length > 1 ? arguments[1] : undefined, function (O, length) {
          return new (aTypedArrayConstructor(speciesConstructor(O, O.constructor)))(length);
        });
      });
      /***/
    },
    /* 76 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var ArrayBufferViewCore = __webpack_require__(5);

      var $reduce = __webpack_require__(238).left;

      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod; // `%TypedArray%.prototype.reduce` method
      // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.reduce

      exportTypedArrayMethod('reduce', function reduce(callbackfn
      /* , initialValue */
      ) {
        return $reduce(aTypedArray(this), callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);
      });
      /***/
    },
    /* 77 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var ArrayBufferViewCore = __webpack_require__(5);

      var $reduceRight = __webpack_require__(238).right;

      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod; // `%TypedArray%.prototype.reduceRicht` method
      // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.reduceright

      exportTypedArrayMethod('reduceRight', function reduceRight(callbackfn
      /* , initialValue */
      ) {
        return $reduceRight(aTypedArray(this), callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);
      });
      /***/
    },
    /* 78 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var ArrayBufferViewCore = __webpack_require__(5);

      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
      var floor = Math.floor; // `%TypedArray%.prototype.reverse` method
      // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.reverse

      exportTypedArrayMethod('reverse', function reverse() {
        var that = this;
        var length = aTypedArray(that).length;
        var middle = floor(length / 2);
        var index = 0;
        var value;

        while (index < middle) {
          value = that[index];
          that[index++] = that[--length];
          that[length] = value;
        }

        return that;
      });
      /***/
    },
    /* 79 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var ArrayBufferViewCore = __webpack_require__(5);

      var toLength = __webpack_require__(8);

      var toOffset = __webpack_require__(237);

      var toObject = __webpack_require__(19);

      var fails = __webpack_require__(4);

      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
      var FORCED = fails(function () {
        // eslint-disable-next-line no-undef
        new Int8Array(1).set({});
      }); // `%TypedArray%.prototype.set` method
      // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.set

      exportTypedArrayMethod('set', function set(arrayLike
      /* , offset */
      ) {
        aTypedArray(this);
        var offset = toOffset(arguments.length > 1 ? arguments[1] : undefined, 1);
        var length = this.length;
        var src = toObject(arrayLike);
        var len = toLength(src.length);
        var index = 0;
        if (len + offset > length) throw RangeError('Wrong length');

        while (index < len) {
          this[offset + index] = src[index++];
        }
      }, FORCED);
      /***/
    },
    /* 80 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var ArrayBufferViewCore = __webpack_require__(5);

      var speciesConstructor = __webpack_require__(38);

      var fails = __webpack_require__(4);

      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
      var $slice = [].slice;
      var FORCED = fails(function () {
        // eslint-disable-next-line no-undef
        new Int8Array(1).slice();
      }); // `%TypedArray%.prototype.slice` method
      // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.slice

      exportTypedArrayMethod('slice', function slice(start, end) {
        var list = $slice.call(aTypedArray(this), start, end);
        var C = speciesConstructor(this, this.constructor);
        var index = 0;
        var length = list.length;
        var result = new (aTypedArrayConstructor(C))(length);

        while (length > index) {
          result[index] = list[index++];
        }

        return result;
      }, FORCED);
      /***/
    },
    /* 81 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var ArrayBufferViewCore = __webpack_require__(5);

      var $some = __webpack_require__(20).some;

      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod; // `%TypedArray%.prototype.some` method
      // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.some

      exportTypedArrayMethod('some', function some(callbackfn
      /* , thisArg */
      ) {
        return $some(aTypedArray(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
      });
      /***/
    },
    /* 82 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var ArrayBufferViewCore = __webpack_require__(5);

      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
      var $sort = [].sort; // `%TypedArray%.prototype.sort` method
      // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.sort

      exportTypedArrayMethod('sort', function sort(comparefn) {
        return $sort.call(aTypedArray(this), comparefn);
      });
      /***/
    },
    /* 83 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var ArrayBufferViewCore = __webpack_require__(5);

      var toLength = __webpack_require__(8);

      var toAbsoluteIndex = __webpack_require__(43);

      var speciesConstructor = __webpack_require__(38);

      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod; // `%TypedArray%.prototype.subarray` method
      // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.subarray

      exportTypedArrayMethod('subarray', function subarray(begin, end) {
        var O = aTypedArray(this);
        var length = O.length;
        var beginIndex = toAbsoluteIndex(begin, length);
        return new (speciesConstructor(O, O.constructor))(O.buffer, O.byteOffset + beginIndex * O.BYTES_PER_ELEMENT, toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - beginIndex));
      });
      /***/
    },
    /* 84 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var global = __webpack_require__(3);

      var ArrayBufferViewCore = __webpack_require__(5);

      var fails = __webpack_require__(4);

      var Int8Array = global.Int8Array;
      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
      var $toLocaleString = [].toLocaleString;
      var $slice = [].slice; // iOS Safari 6.x fails here

      var TO_LOCALE_STRING_BUG = !!Int8Array && fails(function () {
        $toLocaleString.call(new Int8Array(1));
      });
      var FORCED = fails(function () {
        return [1, 2].toLocaleString() != new Int8Array([1, 2]).toLocaleString();
      }) || !fails(function () {
        Int8Array.prototype.toLocaleString.call([1, 2]);
      }); // `%TypedArray%.prototype.toLocaleString` method
      // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.tolocalestring

      exportTypedArrayMethod('toLocaleString', function toLocaleString() {
        return $toLocaleString.apply(TO_LOCALE_STRING_BUG ? $slice.call(aTypedArray(this)) : aTypedArray(this), arguments);
      }, FORCED);
      /***/
    },
    /* 85 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var exportTypedArrayMethod = __webpack_require__(5).exportTypedArrayMethod;

      var fails = __webpack_require__(4);

      var global = __webpack_require__(3);

      var Uint8Array = global.Uint8Array;
      var Uint8ArrayPrototype = Uint8Array && Uint8Array.prototype || {};
      var arrayToString = [].toString;
      var arrayJoin = [].join;

      if (fails(function () {
        arrayToString.call({});
      })) {
        arrayToString = function toString() {
          return arrayJoin.call(this);
        };
      }

      var IS_NOT_ARRAY_METHOD = Uint8ArrayPrototype.toString != arrayToString; // `%TypedArray%.prototype.toString` method
      // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.tostring

      exportTypedArrayMethod('toString', arrayToString, IS_NOT_ARRAY_METHOD);
      /***/
    },
    /* 86 */

    /***/
    function (module, exports) {
      if (typeof Object.create === 'function') {
        // implementation from standard node.js 'util' module
        module.exports = function inherits(ctor, superCtor) {
          if (superCtor) {
            ctor.super_ = superCtor;
            ctor.prototype = Object.create(superCtor.prototype, {
              constructor: {
                value: ctor,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
          }
        };
      } else {
        // old school shim for old browsers
        module.exports = function inherits(ctor, superCtor) {
          if (superCtor) {
            ctor.super_ = superCtor;

            var TempCtor = function TempCtor() {};

            TempCtor.prototype = superCtor.prototype;
            ctor.prototype = new TempCtor();
            ctor.prototype.constructor = ctor;
          }
        };
      }
      /***/

    },
    /* 87 */

    /***/
    function (module, exports, __webpack_require__) {
      ;

      (function (root, factory) {
        if (true) {
          // CommonJS
          module.exports = exports = factory(__webpack_require__(2));
        } else {}
      })(this, function (CryptoJS) {
        (function () {
          // Shortcuts
          var C = CryptoJS;
          var C_lib = C.lib;
          var WordArray = C_lib.WordArray;
          var C_enc = C.enc;
          /**
           * Base64 encoding strategy.
           */

          var Base64 = C_enc.Base64 = {
            /**
             * Converts a word array to a Base64 string.
             *
             * @param {WordArray} wordArray The word array.
             *
             * @return {string} The Base64 string.
             *
             * @static
             *
             * @example
             *
             *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);
             */
            stringify: function stringify(wordArray) {
              // Shortcuts
              var words = wordArray.words;
              var sigBytes = wordArray.sigBytes;
              var map = this._map; // Clamp excess bits

              wordArray.clamp(); // Convert

              var base64Chars = [];

              for (var i = 0; i < sigBytes; i += 3) {
                var byte1 = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
                var byte2 = words[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 0xff;
                var byte3 = words[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 0xff;
                var triplet = byte1 << 16 | byte2 << 8 | byte3;

                for (var j = 0; j < 4 && i + j * 0.75 < sigBytes; j++) {
                  base64Chars.push(map.charAt(triplet >>> 6 * (3 - j) & 0x3f));
                }
              } // Add padding


              var paddingChar = map.charAt(64);

              if (paddingChar) {
                while (base64Chars.length % 4) {
                  base64Chars.push(paddingChar);
                }
              }

              return base64Chars.join('');
            },

            /**
             * Converts a Base64 string to a word array.
             *
             * @param {string} base64Str The Base64 string.
             *
             * @return {WordArray} The word array.
             *
             * @static
             *
             * @example
             *
             *     var wordArray = CryptoJS.enc.Base64.parse(base64String);
             */
            parse: function parse(base64Str) {
              // Shortcuts
              var base64StrLength = base64Str.length;
              var map = this._map;
              var reverseMap = this._reverseMap;

              if (!reverseMap) {
                reverseMap = this._reverseMap = [];

                for (var j = 0; j < map.length; j++) {
                  reverseMap[map.charCodeAt(j)] = j;
                }
              } // Ignore padding


              var paddingChar = map.charAt(64);

              if (paddingChar) {
                var paddingIndex = base64Str.indexOf(paddingChar);

                if (paddingIndex !== -1) {
                  base64StrLength = paddingIndex;
                }
              } // Convert


              return parseLoop(base64Str, base64StrLength, reverseMap);
            },
            _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='
          };

          function parseLoop(base64Str, base64StrLength, reverseMap) {
            var words = [];
            var nBytes = 0;

            for (var i = 0; i < base64StrLength; i++) {
              if (i % 4) {
                var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << i % 4 * 2;
                var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> 6 - i % 4 * 2;
                words[nBytes >>> 2] |= (bits1 | bits2) << 24 - nBytes % 4 * 8;
                nBytes++;
              }
            }

            return WordArray.create(words, nBytes);
          }
        })();

        return CryptoJS.enc.Base64;
      });
      /***/

    },
    /* 88 */

    /***/
    function (module, exports, __webpack_require__) {
      ;

      (function (root, factory) {
        if (true) {
          // CommonJS
          module.exports = exports = factory(__webpack_require__(2));
        } else {}
      })(this, function (CryptoJS) {
        (function (Math) {
          // Shortcuts
          var C = CryptoJS;
          var C_lib = C.lib;
          var WordArray = C_lib.WordArray;
          var Hasher = C_lib.Hasher;
          var C_algo = C.algo; // Constants table

          var T = []; // Compute constants

          (function () {
            for (var i = 0; i < 64; i++) {
              T[i] = Math.abs(Math.sin(i + 1)) * 0x100000000 | 0;
            }
          })();
          /**
           * MD5 hash algorithm.
           */


          var MD5 = C_algo.MD5 = Hasher.extend({
            _doReset: function _doReset() {
              this._hash = new WordArray.init([0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476]);
            },
            _doProcessBlock: function _doProcessBlock(M, offset) {
              // Swap endian
              for (var i = 0; i < 16; i++) {
                // Shortcuts
                var offset_i = offset + i;
                var M_offset_i = M[offset_i];
                M[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 0x00ff00ff | (M_offset_i << 24 | M_offset_i >>> 8) & 0xff00ff00;
              } // Shortcuts


              var H = this._hash.words;
              var M_offset_0 = M[offset + 0];
              var M_offset_1 = M[offset + 1];
              var M_offset_2 = M[offset + 2];
              var M_offset_3 = M[offset + 3];
              var M_offset_4 = M[offset + 4];
              var M_offset_5 = M[offset + 5];
              var M_offset_6 = M[offset + 6];
              var M_offset_7 = M[offset + 7];
              var M_offset_8 = M[offset + 8];
              var M_offset_9 = M[offset + 9];
              var M_offset_10 = M[offset + 10];
              var M_offset_11 = M[offset + 11];
              var M_offset_12 = M[offset + 12];
              var M_offset_13 = M[offset + 13];
              var M_offset_14 = M[offset + 14];
              var M_offset_15 = M[offset + 15]; // Working varialbes

              var a = H[0];
              var b = H[1];
              var c = H[2];
              var d = H[3]; // Computation

              a = FF(a, b, c, d, M_offset_0, 7, T[0]);
              d = FF(d, a, b, c, M_offset_1, 12, T[1]);
              c = FF(c, d, a, b, M_offset_2, 17, T[2]);
              b = FF(b, c, d, a, M_offset_3, 22, T[3]);
              a = FF(a, b, c, d, M_offset_4, 7, T[4]);
              d = FF(d, a, b, c, M_offset_5, 12, T[5]);
              c = FF(c, d, a, b, M_offset_6, 17, T[6]);
              b = FF(b, c, d, a, M_offset_7, 22, T[7]);
              a = FF(a, b, c, d, M_offset_8, 7, T[8]);
              d = FF(d, a, b, c, M_offset_9, 12, T[9]);
              c = FF(c, d, a, b, M_offset_10, 17, T[10]);
              b = FF(b, c, d, a, M_offset_11, 22, T[11]);
              a = FF(a, b, c, d, M_offset_12, 7, T[12]);
              d = FF(d, a, b, c, M_offset_13, 12, T[13]);
              c = FF(c, d, a, b, M_offset_14, 17, T[14]);
              b = FF(b, c, d, a, M_offset_15, 22, T[15]);
              a = GG(a, b, c, d, M_offset_1, 5, T[16]);
              d = GG(d, a, b, c, M_offset_6, 9, T[17]);
              c = GG(c, d, a, b, M_offset_11, 14, T[18]);
              b = GG(b, c, d, a, M_offset_0, 20, T[19]);
              a = GG(a, b, c, d, M_offset_5, 5, T[20]);
              d = GG(d, a, b, c, M_offset_10, 9, T[21]);
              c = GG(c, d, a, b, M_offset_15, 14, T[22]);
              b = GG(b, c, d, a, M_offset_4, 20, T[23]);
              a = GG(a, b, c, d, M_offset_9, 5, T[24]);
              d = GG(d, a, b, c, M_offset_14, 9, T[25]);
              c = GG(c, d, a, b, M_offset_3, 14, T[26]);
              b = GG(b, c, d, a, M_offset_8, 20, T[27]);
              a = GG(a, b, c, d, M_offset_13, 5, T[28]);
              d = GG(d, a, b, c, M_offset_2, 9, T[29]);
              c = GG(c, d, a, b, M_offset_7, 14, T[30]);
              b = GG(b, c, d, a, M_offset_12, 20, T[31]);
              a = HH(a, b, c, d, M_offset_5, 4, T[32]);
              d = HH(d, a, b, c, M_offset_8, 11, T[33]);
              c = HH(c, d, a, b, M_offset_11, 16, T[34]);
              b = HH(b, c, d, a, M_offset_14, 23, T[35]);
              a = HH(a, b, c, d, M_offset_1, 4, T[36]);
              d = HH(d, a, b, c, M_offset_4, 11, T[37]);
              c = HH(c, d, a, b, M_offset_7, 16, T[38]);
              b = HH(b, c, d, a, M_offset_10, 23, T[39]);
              a = HH(a, b, c, d, M_offset_13, 4, T[40]);
              d = HH(d, a, b, c, M_offset_0, 11, T[41]);
              c = HH(c, d, a, b, M_offset_3, 16, T[42]);
              b = HH(b, c, d, a, M_offset_6, 23, T[43]);
              a = HH(a, b, c, d, M_offset_9, 4, T[44]);
              d = HH(d, a, b, c, M_offset_12, 11, T[45]);
              c = HH(c, d, a, b, M_offset_15, 16, T[46]);
              b = HH(b, c, d, a, M_offset_2, 23, T[47]);
              a = II(a, b, c, d, M_offset_0, 6, T[48]);
              d = II(d, a, b, c, M_offset_7, 10, T[49]);
              c = II(c, d, a, b, M_offset_14, 15, T[50]);
              b = II(b, c, d, a, M_offset_5, 21, T[51]);
              a = II(a, b, c, d, M_offset_12, 6, T[52]);
              d = II(d, a, b, c, M_offset_3, 10, T[53]);
              c = II(c, d, a, b, M_offset_10, 15, T[54]);
              b = II(b, c, d, a, M_offset_1, 21, T[55]);
              a = II(a, b, c, d, M_offset_8, 6, T[56]);
              d = II(d, a, b, c, M_offset_15, 10, T[57]);
              c = II(c, d, a, b, M_offset_6, 15, T[58]);
              b = II(b, c, d, a, M_offset_13, 21, T[59]);
              a = II(a, b, c, d, M_offset_4, 6, T[60]);
              d = II(d, a, b, c, M_offset_11, 10, T[61]);
              c = II(c, d, a, b, M_offset_2, 15, T[62]);
              b = II(b, c, d, a, M_offset_9, 21, T[63]); // Intermediate hash value

              H[0] = H[0] + a | 0;
              H[1] = H[1] + b | 0;
              H[2] = H[2] + c | 0;
              H[3] = H[3] + d | 0;
            },
            _doFinalize: function _doFinalize() {
              // Shortcuts
              var data = this._data;
              var dataWords = data.words;
              var nBitsTotal = this._nDataBytes * 8;
              var nBitsLeft = data.sigBytes * 8; // Add padding

              dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;
              var nBitsTotalH = Math.floor(nBitsTotal / 0x100000000);
              var nBitsTotalL = nBitsTotal;
              dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = (nBitsTotalH << 8 | nBitsTotalH >>> 24) & 0x00ff00ff | (nBitsTotalH << 24 | nBitsTotalH >>> 8) & 0xff00ff00;
              dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotalL << 8 | nBitsTotalL >>> 24) & 0x00ff00ff | (nBitsTotalL << 24 | nBitsTotalL >>> 8) & 0xff00ff00;
              data.sigBytes = (dataWords.length + 1) * 4; // Hash final blocks

              this._process(); // Shortcuts


              var hash = this._hash;
              var H = hash.words; // Swap endian

              for (var i = 0; i < 4; i++) {
                // Shortcut
                var H_i = H[i];
                H[i] = (H_i << 8 | H_i >>> 24) & 0x00ff00ff | (H_i << 24 | H_i >>> 8) & 0xff00ff00;
              } // Return final computed hash


              return hash;
            },
            clone: function clone() {
              var clone = Hasher.clone.call(this);
              clone._hash = this._hash.clone();
              return clone;
            }
          });

          function FF(a, b, c, d, x, s, t) {
            var n = a + (b & c | ~b & d) + x + t;
            return (n << s | n >>> 32 - s) + b;
          }

          function GG(a, b, c, d, x, s, t) {
            var n = a + (b & d | c & ~d) + x + t;
            return (n << s | n >>> 32 - s) + b;
          }

          function HH(a, b, c, d, x, s, t) {
            var n = a + (b ^ c ^ d) + x + t;
            return (n << s | n >>> 32 - s) + b;
          }

          function II(a, b, c, d, x, s, t) {
            var n = a + (c ^ (b | ~d)) + x + t;
            return (n << s | n >>> 32 - s) + b;
          }
          /**
           * Shortcut function to the hasher's object interface.
           *
           * @param {WordArray|string} message The message to hash.
           *
           * @return {WordArray} The hash.
           *
           * @static
           *
           * @example
           *
           *     var hash = CryptoJS.MD5('message');
           *     var hash = CryptoJS.MD5(wordArray);
           */


          C.MD5 = Hasher._createHelper(MD5);
          /**
           * Shortcut function to the HMAC's object interface.
           *
           * @param {WordArray|string} message The message to hash.
           * @param {WordArray|string} key The secret key.
           *
           * @return {WordArray} The HMAC.
           *
           * @static
           *
           * @example
           *
           *     var hmac = CryptoJS.HmacMD5(message, key);
           */

          C.HmacMD5 = Hasher._createHmacHelper(MD5);
        })(Math);

        return CryptoJS.MD5;
      });
      /***/

    },
    /* 89 */

    /***/
    function (module, exports, __webpack_require__) {
      // Generated by CoffeeScript 1.7.1
      (function () {
        var DecodeStream,
            Fixed,
            NumberT,
            __hasProp = {}.hasOwnProperty,
            __extends = function __extends(child, parent) {
          for (var key in parent) {
            if (__hasProp.call(parent, key)) child[key] = parent[key];
          }

          function ctor() {
            this.constructor = child;
          }

          ctor.prototype = parent.prototype;
          child.prototype = new ctor();
          child.__super__ = parent.prototype;
          return child;
        };

        DecodeStream = __webpack_require__(169);

        NumberT = function () {
          function NumberT(type, endian) {
            this.type = type;
            this.endian = endian != null ? endian : 'BE';
            this.fn = this.type;

            if (this.type[this.type.length - 1] !== '8') {
              this.fn += this.endian;
            }
          }

          NumberT.prototype.size = function () {
            return DecodeStream.TYPES[this.type];
          };

          NumberT.prototype.decode = function (stream) {
            return stream['read' + this.fn]();
          };

          NumberT.prototype.encode = function (stream, val) {
            return stream['write' + this.fn](val);
          };

          return NumberT;
        }();

        exports.Number = NumberT;
        exports.uint8 = new NumberT('UInt8');
        exports.uint16be = exports.uint16 = new NumberT('UInt16', 'BE');
        exports.uint16le = new NumberT('UInt16', 'LE');
        exports.uint24be = exports.uint24 = new NumberT('UInt24', 'BE');
        exports.uint24le = new NumberT('UInt24', 'LE');
        exports.uint32be = exports.uint32 = new NumberT('UInt32', 'BE');
        exports.uint32le = new NumberT('UInt32', 'LE');
        exports.int8 = new NumberT('Int8');
        exports.int16be = exports.int16 = new NumberT('Int16', 'BE');
        exports.int16le = new NumberT('Int16', 'LE');
        exports.int24be = exports.int24 = new NumberT('Int24', 'BE');
        exports.int24le = new NumberT('Int24', 'LE');
        exports.int32be = exports.int32 = new NumberT('Int32', 'BE');
        exports.int32le = new NumberT('Int32', 'LE');
        exports.floatbe = exports.float = new NumberT('Float', 'BE');
        exports.floatle = new NumberT('Float', 'LE');
        exports.doublebe = exports.double = new NumberT('Double', 'BE');
        exports.doublele = new NumberT('Double', 'LE');

        Fixed = function (_super) {
          __extends(Fixed, _super);

          function Fixed(size, endian, fracBits) {
            if (fracBits == null) {
              fracBits = size >> 1;
            }

            Fixed.__super__.constructor.call(this, "Int" + size, endian);

            this._point = 1 << fracBits;
          }

          Fixed.prototype.decode = function (stream) {
            return Fixed.__super__.decode.call(this, stream) / this._point;
          };

          Fixed.prototype.encode = function (stream, val) {
            return Fixed.__super__.encode.call(this, stream, val * this._point | 0);
          };

          return Fixed;
        }(NumberT);

        exports.Fixed = Fixed;
        exports.fixed16be = exports.fixed16 = new Fixed(16, 'BE');
        exports.fixed16le = new Fixed(16, 'LE');
        exports.fixed32be = exports.fixed32 = new Fixed(32, 'BE');
        exports.fixed32le = new Fixed(32, 'LE');
      }).call(this);
      /***/
    },
    /* 90 */

    /***/
    function (module, exports, __webpack_require__) {
      // 7.1.13 ToObject(argument)
      var defined = __webpack_require__(173);

      module.exports = function (it) {
        return Object(defined(it));
      };
      /***/

    },
    /* 91 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var $at = __webpack_require__(427)(true); // 21.1.3.27 String.prototype[@@iterator]()


      __webpack_require__(178)(String, 'String', function (iterated) {
        this._t = String(iterated); // target

        this._i = 0; // next index
        // 21.1.5.2.1 %StringIteratorPrototype%.next()
      }, function () {
        var O = this._t;
        var index = this._i;
        var point;
        if (index >= O.length) return {
          value: undefined,
          done: true
        };
        point = $at(O, index);
        this._i += point.length;
        return {
          value: point,
          done: false
        };
      });
      /***/

    },
    /* 92 */

    /***/
    function (module, exports, __webpack_require__) {
      var fails = __webpack_require__(4);

      var classof = __webpack_require__(30);

      var split = ''.split; // fallback for non-array-like ES3 and non-enumerable old V8 strings

      module.exports = fails(function () {
        // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
        // eslint-disable-next-line no-prototype-builtins
        return !Object('z').propertyIsEnumerable(0);
      }) ? function (it) {
        return classof(it) == 'String' ? split.call(it, '') : Object(it);
      } : Object;
      /***/
    },
    /* 93 */

    /***/
    function (module, exports, __webpack_require__) {
      var toIndexedObject = __webpack_require__(27);

      var toLength = __webpack_require__(8);

      var toAbsoluteIndex = __webpack_require__(43); // `Array.prototype.{ indexOf, includes }` methods implementation


      var createMethod = function createMethod(IS_INCLUDES) {
        return function ($this, el, fromIndex) {
          var O = toIndexedObject($this);
          var length = toLength(O.length);
          var index = toAbsoluteIndex(fromIndex, length);
          var value; // Array#includes uses SameValueZero equality algorithm
          // eslint-disable-next-line no-self-compare

          if (IS_INCLUDES && el != el) while (length > index) {
            value = O[index++]; // eslint-disable-next-line no-self-compare

            if (value != value) return true; // Array#indexOf ignores holes, Array#includes - not
          } else for (; length > index; index++) {
            if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
          }
          return !IS_INCLUDES && -1;
        };
      };

      module.exports = {
        // `Array.prototype.includes` method
        // https://tc39.github.io/ecma262/#sec-array.prototype.includes
        includes: createMethod(true),
        // `Array.prototype.indexOf` method
        // https://tc39.github.io/ecma262/#sec-array.prototype.indexof
        indexOf: createMethod(false)
      };
      /***/
    },
    /* 94 */

    /***/
    function (module, exports, __webpack_require__) {
      var internalObjectKeys = __webpack_require__(201);

      var enumBugKeys = __webpack_require__(142); // `Object.keys` method
      // https://tc39.github.io/ecma262/#sec-object.keys


      module.exports = Object.keys || function keys(O) {
        return internalObjectKeys(O, enumBugKeys);
      };
      /***/

    },
    /* 95 */

    /***/
    function (module, exports, __webpack_require__) {
      var defineProperty = __webpack_require__(15).f;

      var has = __webpack_require__(14);

      var wellKnownSymbol = __webpack_require__(6);

      var TO_STRING_TAG = wellKnownSymbol('toStringTag');

      module.exports = function (it, TAG, STATIC) {
        if (it && !has(it = STATIC ? it : it.prototype, TO_STRING_TAG)) {
          defineProperty(it, TO_STRING_TAG, {
            configurable: true,
            value: TAG
          });
        }
      };
      /***/

    },
    /* 96 */

    /***/
    function (module, exports, __webpack_require__) {
      var aFunction = __webpack_require__(44); // optional / simple context binding


      module.exports = function (fn, that, length) {
        aFunction(fn);
        if (that === undefined) return fn;

        switch (length) {
          case 0:
            return function () {
              return fn.call(that);
            };

          case 1:
            return function (a) {
              return fn.call(that, a);
            };

          case 2:
            return function (a, b) {
              return fn.call(that, a, b);
            };

          case 3:
            return function (a, b, c) {
              return fn.call(that, a, b, c);
            };
        }

        return function ()
        /* ...args */
        {
          return fn.apply(that, arguments);
        };
      };
      /***/

    },
    /* 97 */

    /***/
    function (module, exports) {
      module.exports = {};
      /***/
    },
    /* 98 */

    /***/
    function (module, exports, __webpack_require__) {
      /* WEBPACK VAR INJECTION */
      (function (Buffer) {
        // Copyright Joyent, Inc. and other Node contributors.
        //
        // Permission is hereby granted, free of charge, to any person obtaining a
        // copy of this software and associated documentation files (the
        // "Software"), to deal in the Software without restriction, including
        // without limitation the rights to use, copy, modify, merge, publish,
        // distribute, sublicense, and/or sell copies of the Software, and to permit
        // persons to whom the Software is furnished to do so, subject to the
        // following conditions:
        //
        // The above copyright notice and this permission notice shall be included
        // in all copies or substantial portions of the Software.
        //
        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
        // USE OR OTHER DEALINGS IN THE SOFTWARE.
        // NOTE: These type checking functions intentionally don't use `instanceof`
        // because it is fragile and can be easily faked with `Object.create()`.
        function isArray(arg) {
          if (Array.isArray) {
            return Array.isArray(arg);
          }

          return objectToString(arg) === '[object Array]';
        }

        exports.isArray = isArray;

        function isBoolean(arg) {
          return typeof arg === 'boolean';
        }

        exports.isBoolean = isBoolean;

        function isNull(arg) {
          return arg === null;
        }

        exports.isNull = isNull;

        function isNullOrUndefined(arg) {
          return arg == null;
        }

        exports.isNullOrUndefined = isNullOrUndefined;

        function isNumber(arg) {
          return typeof arg === 'number';
        }

        exports.isNumber = isNumber;

        function isString(arg) {
          return typeof arg === 'string';
        }

        exports.isString = isString;

        function isSymbol(arg) {
          return _typeof4(arg) === 'symbol';
        }

        exports.isSymbol = isSymbol;

        function isUndefined(arg) {
          return arg === void 0;
        }

        exports.isUndefined = isUndefined;

        function isRegExp(re) {
          return objectToString(re) === '[object RegExp]';
        }

        exports.isRegExp = isRegExp;

        function isObject(arg) {
          return _typeof4(arg) === 'object' && arg !== null;
        }

        exports.isObject = isObject;

        function isDate(d) {
          return objectToString(d) === '[object Date]';
        }

        exports.isDate = isDate;

        function isError(e) {
          return objectToString(e) === '[object Error]' || e instanceof Error;
        }

        exports.isError = isError;

        function isFunction(arg) {
          return typeof arg === 'function';
        }

        exports.isFunction = isFunction;

        function isPrimitive(arg) {
          return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || _typeof4(arg) === 'symbol' || // ES6 symbol
          typeof arg === 'undefined';
        }

        exports.isPrimitive = isPrimitive;
        exports.isBuffer = Buffer.isBuffer;

        function objectToString(o) {
          return Object.prototype.toString.call(o);
        }
        /* WEBPACK VAR INJECTION */

      }).call(this, __webpack_require__(10).Buffer);
      /***/
    },
    /* 99 */

    /***/
    function (module, exports) {
      var toString = {}.toString;

      module.exports = function (it) {
        return toString.call(it).slice(8, -1);
      };
      /***/

    },
    /* 100 */

    /***/
    function (module, exports) {
      module.exports = function (bitmap, value) {
        return {
          enumerable: !(bitmap & 1),
          configurable: !(bitmap & 2),
          writable: !(bitmap & 4),
          value: value
        };
      };
      /***/

    },
    /* 101 */

    /***/
    function (module, exports) {
      module.exports = function (it) {
        if (typeof it != 'function') throw TypeError(it + ' is not a function!');
        return it;
      };
      /***/

    },
    /* 102 */

    /***/
    function (module, exports, __webpack_require__) {
      __webpack_require__(422);

      var global = __webpack_require__(17);

      var hide = __webpack_require__(41);

      var Iterators = __webpack_require__(103);

      var TO_STRING_TAG = __webpack_require__(21)('toStringTag');

      var DOMIterables = ('CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,' + 'DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,' + 'MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,' + 'SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,' + 'TextTrackList,TouchList').split(',');

      for (var i = 0; i < DOMIterables.length; i++) {
        var NAME = DOMIterables[i];
        var Collection = global[NAME];
        var proto = Collection && Collection.prototype;
        if (proto && !proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
        Iterators[NAME] = Iterators.Array;
      }
      /***/

    },
    /* 103 */

    /***/
    function (module, exports) {
      module.exports = {};
      /***/
    },
    /* 104 */

    /***/
    function (module, exports) {
      module.exports = true;
      /***/
    },
    /* 105 */

    /***/
    function (module, exports, __webpack_require__) {
      // 19.1.2.14 / 15.2.3.14 Object.keys(O)
      var $keys = __webpack_require__(258);

      var enumBugKeys = __webpack_require__(182);

      module.exports = Object.keys || function keys(O) {
        return $keys(O, enumBugKeys);
      };
      /***/

    },
    /* 106 */

    /***/
    function (module, exports, __webpack_require__) {
      var def = __webpack_require__(26).f;

      var has = __webpack_require__(51);

      var TAG = __webpack_require__(21)('toStringTag');

      module.exports = function (it, tag, stat) {
        if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, {
          configurable: true,
          value: tag
        });
      };
      /***/

    },
    /* 107 */

    /***/
    function (module, exports, __webpack_require__) {
      var ctx = __webpack_require__(33);

      var call = __webpack_require__(265);

      var isArrayIter = __webpack_require__(266);

      var anObject = __webpack_require__(29);

      var toLength = __webpack_require__(130);

      var getIterFn = __webpack_require__(183);

      var BREAK = {};
      var RETURN = {};

      var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
        var iterFn = ITERATOR ? function () {
          return iterable;
        } : getIterFn(iterable);
        var f = ctx(fn, that, entries ? 2 : 1);
        var index = 0;
        var length, step, iterator, result;
        if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!'); // fast case for arrays with default iterator

        if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
          result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
          if (result === BREAK || result === RETURN) return result;
        } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
          result = call(iterator, f, step.value, entries);
          if (result === BREAK || result === RETURN) return result;
        }
      };

      exports.BREAK = BREAK;
      exports.RETURN = RETURN;
      /***/
    },
    /* 108 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var keys = __webpack_require__(272);

      var hasSymbols = typeof Symbol === 'function' && _typeof4(Symbol('foo')) === 'symbol';
      var toStr = Object.prototype.toString;
      var concat = Array.prototype.concat;
      var origDefineProperty = Object.defineProperty;

      var isFunction = function isFunction(fn) {
        return typeof fn === 'function' && toStr.call(fn) === '[object Function]';
      };

      var arePropertyDescriptorsSupported = function arePropertyDescriptorsSupported() {
        var obj = {};

        try {
          origDefineProperty(obj, 'x', {
            enumerable: false,
            value: obj
          }); // eslint-disable-next-line no-unused-vars, no-restricted-syntax

          for (var _ in obj) {
            // jscs:ignore disallowUnusedVariables
            return false;
          }

          return obj.x === obj;
        } catch (e) {
          /* this is IE 8. */
          return false;
        }
      };

      var supportsDescriptors = origDefineProperty && arePropertyDescriptorsSupported();

      var defineProperty = function defineProperty(object, name, value, predicate) {
        if (name in object && (!isFunction(predicate) || !predicate())) {
          return;
        }

        if (supportsDescriptors) {
          origDefineProperty(object, name, {
            configurable: true,
            enumerable: false,
            value: value,
            writable: true
          });
        } else {
          object[name] = value;
        }
      };

      var defineProperties = function defineProperties(object, map) {
        var predicates = arguments.length > 2 ? arguments[2] : {};
        var props = keys(map);

        if (hasSymbols) {
          props = concat.call(props, Object.getOwnPropertySymbols(map));
        }

        for (var i = 0; i < props.length; i += 1) {
          defineProperty(object, props[i], map[props[i]], predicates[props[i]]);
        }
      };

      defineProperties.supportsDescriptors = !!supportsDescriptors;
      module.exports = defineProperties;
      /***/
    },
    /* 109 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var aFunction = __webpack_require__(44);

      var PromiseCapability = function PromiseCapability(C) {
        var resolve, reject;
        this.promise = new C(function ($$resolve, $$reject) {
          if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
          resolve = $$resolve;
          reject = $$reject;
        });
        this.resolve = aFunction(resolve);
        this.reject = aFunction(reject);
      }; // 25.4.1.5 NewPromiseCapability(C)


      module.exports.f = function (C) {
        return new PromiseCapability(C);
      };
      /***/

    },
    /* 110 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var nativePropertyIsEnumerable = {}.propertyIsEnumerable;
      var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor; // Nashorn ~ JDK8 bug

      var NASHORN_BUG = getOwnPropertyDescriptor && !nativePropertyIsEnumerable.call({
        1: 2
      }, 1); // `Object.prototype.propertyIsEnumerable` method implementation
      // https://tc39.github.io/ecma262/#sec-object.prototype.propertyisenumerable

      exports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
        var descriptor = getOwnPropertyDescriptor(this, V);
        return !!descriptor && descriptor.enumerable;
      } : nativePropertyIsEnumerable;
      /***/
    },
    /* 111 */

    /***/
    function (module, exports, __webpack_require__) {
      var shared = __webpack_require__(141);

      var uid = __webpack_require__(112);

      var keys = shared('keys');

      module.exports = function (key) {
        return keys[key] || (keys[key] = uid(key));
      };
      /***/

    },
    /* 112 */

    /***/
    function (module, exports) {
      var id = 0;
      var postfix = Math.random();

      module.exports = function (key) {
        return 'Symbol(' + String(key === undefined ? '' : key) + ')_' + (++id + postfix).toString(36);
      };
      /***/

    },
    /* 113 */

    /***/
    function (module, exports) {
      module.exports = {};
      /***/
    },
    /* 114 */

    /***/
    function (module, exports, __webpack_require__) {
      var global = __webpack_require__(3);

      module.exports = global;
      /***/
    },
    /* 115 */

    /***/
    function (module, exports, __webpack_require__) {
      var classof = __webpack_require__(30); // `IsArray` abstract operation
      // https://tc39.github.io/ecma262/#sec-isarray


      module.exports = Array.isArray || function isArray(arg) {
        return classof(arg) == 'Array';
      };
      /***/

    },
    /* 116 */

    /***/
    function (module, exports, __webpack_require__) {
      var fails = __webpack_require__(4);

      var wellKnownSymbol = __webpack_require__(6);

      var V8_VERSION = __webpack_require__(147);

      var SPECIES = wellKnownSymbol('species');

      module.exports = function (METHOD_NAME) {
        // We can't use this feature detection in V8 since it causes
        // deoptimization and serious performance degradation
        // https://github.com/zloirock/core-js/issues/677
        return V8_VERSION >= 51 || !fails(function () {
          var array = [];
          var constructor = array.constructor = {};

          constructor[SPECIES] = function () {
            return {
              foo: 1
            };
          };

          return array[METHOD_NAME](Boolean).foo !== 1;
        });
      };
      /***/

    },
    /* 117 */

    /***/
    function (module, exports, __webpack_require__) {
      var TO_STRING_TAG_SUPPORT = __webpack_require__(152);

      var classofRaw = __webpack_require__(30);

      var wellKnownSymbol = __webpack_require__(6);

      var TO_STRING_TAG = wellKnownSymbol('toStringTag'); // ES3 wrong here

      var CORRECT_ARGUMENTS = classofRaw(function () {
        return arguments;
      }()) == 'Arguments'; // fallback for IE11 Script Access Denied error

      var tryGet = function tryGet(it, key) {
        try {
          return it[key];
        } catch (error) {
          /* empty */
        }
      }; // getting tag from ES6+ `Object.prototype.toString`


      module.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function (it) {
        var O, tag, result;
        return it === undefined ? 'Undefined' : it === null ? 'Null' // @@toStringTag case
        : typeof (tag = tryGet(O = Object(it), TO_STRING_TAG)) == 'string' ? tag // builtinTag case
        : CORRECT_ARGUMENTS ? classofRaw(O) // ES3 arguments fallback
        : (result = classofRaw(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : result;
      };
      /***/
    },
    /* 118 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var $ = __webpack_require__(1);

      var exec = __webpack_require__(119);

      $({
        target: 'RegExp',
        proto: true,
        forced: /./.exec !== exec
      }, {
        exec: exec
      });
      /***/
    },
    /* 119 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var regexpFlags = __webpack_require__(228);

      var stickyHelpers = __webpack_require__(329);

      var nativeExec = RegExp.prototype.exec; // This always refers to the native implementation, because the
      // String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,
      // which loads this file before patching the method.

      var nativeReplace = String.prototype.replace;
      var patchedExec = nativeExec;

      var UPDATES_LAST_INDEX_WRONG = function () {
        var re1 = /a/;
        var re2 = /b*/g;
        nativeExec.call(re1, 'a');
        nativeExec.call(re2, 'a');
        return re1.lastIndex !== 0 || re2.lastIndex !== 0;
      }();

      var UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y || stickyHelpers.BROKEN_CARET; // nonparticipating capturing group, copied from es5-shim's String#split patch.

      var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;
      var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED || UNSUPPORTED_Y;

      if (PATCH) {
        patchedExec = function exec(str) {
          var re = this;
          var lastIndex, reCopy, match, i;
          var sticky = UNSUPPORTED_Y && re.sticky;
          var flags = regexpFlags.call(re);
          var source = re.source;
          var charsAdded = 0;
          var strCopy = str;

          if (sticky) {
            flags = flags.replace('y', '');

            if (flags.indexOf('g') === -1) {
              flags += 'g';
            }

            strCopy = String(str).slice(re.lastIndex); // Support anchored sticky behavior.

            if (re.lastIndex > 0 && (!re.multiline || re.multiline && str[re.lastIndex - 1] !== '\n')) {
              source = '(?: ' + source + ')';
              strCopy = ' ' + strCopy;
              charsAdded++;
            } // ^(? + rx + ) is needed, in combination with some str slicing, to
            // simulate the 'y' flag.


            reCopy = new RegExp('^(?:' + source + ')', flags);
          }

          if (NPCG_INCLUDED) {
            reCopy = new RegExp('^' + source + '$(?!\\s)', flags);
          }

          if (UPDATES_LAST_INDEX_WRONG) lastIndex = re.lastIndex;
          match = nativeExec.call(sticky ? reCopy : re, strCopy);

          if (sticky) {
            if (match) {
              match.input = match.input.slice(charsAdded);
              match[0] = match[0].slice(charsAdded);
              match.index = re.lastIndex;
              re.lastIndex += match[0].length;
            } else re.lastIndex = 0;
          } else if (UPDATES_LAST_INDEX_WRONG && match) {
            re.lastIndex = re.global ? match.index + match[0].length : lastIndex;
          }

          if (NPCG_INCLUDED && match && match.length > 1) {
            // Fix browsers whose `exec` methods don't consistently return `undefined`
            // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
            nativeReplace.call(match[0], reCopy, function () {
              for (i = 1; i < arguments.length - 2; i++) {
                if (arguments[i] === undefined) match[i] = undefined;
              }
            });
          }

          return match;
        };
      }

      module.exports = patchedExec;
      /***/
    },
    /* 120 */

    /***/
    function (module, exports, __webpack_require__) {
      var global = __webpack_require__(3);

      var DOMIterables = __webpack_require__(239);

      var ArrayIteratorMethods = __webpack_require__(28);

      var createNonEnumerableProperty = __webpack_require__(18);

      var wellKnownSymbol = __webpack_require__(6);

      var ITERATOR = wellKnownSymbol('iterator');
      var TO_STRING_TAG = wellKnownSymbol('toStringTag');
      var ArrayValues = ArrayIteratorMethods.values;

      for (var COLLECTION_NAME in DOMIterables) {
        var Collection = global[COLLECTION_NAME];
        var CollectionPrototype = Collection && Collection.prototype;

        if (CollectionPrototype) {
          // some Chrome versions have non-configurable methods on DOMTokenList
          if (CollectionPrototype[ITERATOR] !== ArrayValues) try {
            createNonEnumerableProperty(CollectionPrototype, ITERATOR, ArrayValues);
          } catch (error) {
            CollectionPrototype[ITERATOR] = ArrayValues;
          }

          if (!CollectionPrototype[TO_STRING_TAG]) {
            createNonEnumerableProperty(CollectionPrototype, TO_STRING_TAG, COLLECTION_NAME);
          }

          if (DOMIterables[COLLECTION_NAME]) for (var METHOD_NAME in ArrayIteratorMethods) {
            // some Chrome versions have non-configurable methods on DOMTokenList
            if (CollectionPrototype[METHOD_NAME] !== ArrayIteratorMethods[METHOD_NAME]) try {
              createNonEnumerableProperty(CollectionPrototype, METHOD_NAME, ArrayIteratorMethods[METHOD_NAME]);
            } catch (error) {
              CollectionPrototype[METHOD_NAME] = ArrayIteratorMethods[METHOD_NAME];
            }
          }
        }
      }
      /***/

    },
    /* 121 */

    /***/
    function (module, exports, __webpack_require__) {
      // Copyright Joyent, Inc. and other Node contributors.
      //
      // Permission is hereby granted, free of charge, to any person obtaining a
      // copy of this software and associated documentation files (the
      // "Software"), to deal in the Software without restriction, including
      // without limitation the rights to use, copy, modify, merge, publish,
      // distribute, sublicense, and/or sell copies of the Software, and to permit
      // persons to whom the Software is furnished to do so, subject to the
      // following conditions:
      //
      // The above copyright notice and this permission notice shall be included
      // in all copies or substantial portions of the Software.
      //
      // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
      // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
      // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
      // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
      // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
      // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
      // USE OR OTHER DEALINGS IN THE SOFTWARE.
      module.exports = Stream;

      var EE = __webpack_require__(122).EventEmitter;

      var inherits = __webpack_require__(86);

      inherits(Stream, EE);
      Stream.Readable = __webpack_require__(164);
      Stream.Writable = __webpack_require__(346);
      Stream.Duplex = __webpack_require__(347);
      Stream.Transform = __webpack_require__(348);
      Stream.PassThrough = __webpack_require__(349); // Backwards-compat with node 0.4.x

      Stream.Stream = Stream; // old-style streams.  Note that the pipe method (the only relevant
      // part of this class) is overridden in the Readable class.

      function Stream() {
        EE.call(this);
      }

      Stream.prototype.pipe = function (dest, options) {
        var source = this;

        function ondata(chunk) {
          if (dest.writable) {
            if (false === dest.write(chunk) && source.pause) {
              source.pause();
            }
          }
        }

        source.on('data', ondata);

        function ondrain() {
          if (source.readable && source.resume) {
            source.resume();
          }
        }

        dest.on('drain', ondrain); // If the 'end' option is not supplied, dest.end() will be called when
        // source gets the 'end' or 'close' events.  Only dest.end() once.

        if (!dest._isStdio && (!options || options.end !== false)) {
          source.on('end', onend);
          source.on('close', onclose);
        }

        var didOnEnd = false;

        function onend() {
          if (didOnEnd) return;
          didOnEnd = true;
          dest.end();
        }

        function onclose() {
          if (didOnEnd) return;
          didOnEnd = true;
          if (typeof dest.destroy === 'function') dest.destroy();
        } // don't leave dangling pipes when there are errors.


        function onerror(er) {
          cleanup();

          if (EE.listenerCount(this, 'error') === 0) {
            throw er; // Unhandled stream error in pipe.
          }
        }

        source.on('error', onerror);
        dest.on('error', onerror); // remove all the event listeners that were added.

        function cleanup() {
          source.removeListener('data', ondata);
          dest.removeListener('drain', ondrain);
          source.removeListener('end', onend);
          source.removeListener('close', onclose);
          source.removeListener('error', onerror);
          dest.removeListener('error', onerror);
          source.removeListener('end', cleanup);
          source.removeListener('close', cleanup);
          dest.removeListener('close', cleanup);
        }

        source.on('end', cleanup);
        source.on('close', cleanup);
        dest.on('close', cleanup);
        dest.emit('pipe', source); // Allow for unix-like usage: A.pipe(B).pipe(C)

        return dest;
      };
      /***/

    },
    /* 122 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict"; // Copyright Joyent, Inc. and other Node contributors.
      //
      // Permission is hereby granted, free of charge, to any person obtaining a
      // copy of this software and associated documentation files (the
      // "Software"), to deal in the Software without restriction, including
      // without limitation the rights to use, copy, modify, merge, publish,
      // distribute, sublicense, and/or sell copies of the Software, and to permit
      // persons to whom the Software is furnished to do so, subject to the
      // following conditions:
      //
      // The above copyright notice and this permission notice shall be included
      // in all copies or substantial portions of the Software.
      //
      // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
      // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
      // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
      // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
      // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
      // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
      // USE OR OTHER DEALINGS IN THE SOFTWARE.

      var R = (typeof Reflect === "undefined" ? "undefined" : _typeof4(Reflect)) === 'object' ? Reflect : null;
      var ReflectApply = R && typeof R.apply === 'function' ? R.apply : function ReflectApply(target, receiver, args) {
        return Function.prototype.apply.call(target, receiver, args);
      };
      var ReflectOwnKeys;

      if (R && typeof R.ownKeys === 'function') {
        ReflectOwnKeys = R.ownKeys;
      } else if (Object.getOwnPropertySymbols) {
        ReflectOwnKeys = function ReflectOwnKeys(target) {
          return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
        };
      } else {
        ReflectOwnKeys = function ReflectOwnKeys(target) {
          return Object.getOwnPropertyNames(target);
        };
      }

      function ProcessEmitWarning(warning) {
        if (console && console.warn) console.warn(warning);
      }

      var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
        return value !== value;
      };

      function EventEmitter() {
        EventEmitter.init.call(this);
      }

      module.exports = EventEmitter;
      module.exports.once = once; // Backwards-compat with node 0.10.x

      EventEmitter.EventEmitter = EventEmitter;
      EventEmitter.prototype._events = undefined;
      EventEmitter.prototype._eventsCount = 0;
      EventEmitter.prototype._maxListeners = undefined; // By default EventEmitters will print a warning if more than 10 listeners are
      // added to it. This is a useful default which helps finding memory leaks.

      var defaultMaxListeners = 10;

      function checkListener(listener) {
        if (typeof listener !== 'function') {
          throw new TypeError('The "listener" argument must be of type Function. Received type ' + _typeof4(listener));
        }
      }

      Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
        enumerable: true,
        get: function get() {
          return defaultMaxListeners;
        },
        set: function set(arg) {
          if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
            throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
          }

          defaultMaxListeners = arg;
        }
      });

      EventEmitter.init = function () {
        if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        }

        this._maxListeners = this._maxListeners || undefined;
      }; // Obviously not all Emitters should be limited to 10. This function allows
      // that to be increased. Set to zero for unlimited.


      EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
        if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
          throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
        }

        this._maxListeners = n;
        return this;
      };

      function _getMaxListeners(that) {
        if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;
        return that._maxListeners;
      }

      EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
        return _getMaxListeners(this);
      };

      EventEmitter.prototype.emit = function emit(type) {
        var args = [];

        for (var i = 1; i < arguments.length; i++) {
          args.push(arguments[i]);
        }

        var doError = type === 'error';
        var events = this._events;
        if (events !== undefined) doError = doError && events.error === undefined;else if (!doError) return false; // If there is no 'error' event listener then throw.

        if (doError) {
          var er;
          if (args.length > 0) er = args[0];

          if (er instanceof Error) {
            // Note: The comments on the `throw` lines are intentional, they show
            // up in Node's output if this results in an unhandled exception.
            throw er; // Unhandled 'error' event
          } // At least give some kind of context to the user


          var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
          err.context = er;
          throw err; // Unhandled 'error' event
        }

        var handler = events[type];
        if (handler === undefined) return false;

        if (typeof handler === 'function') {
          ReflectApply(handler, this, args);
        } else {
          var len = handler.length;
          var listeners = arrayClone(handler, len);

          for (var i = 0; i < len; ++i) {
            ReflectApply(listeners[i], this, args);
          }
        }

        return true;
      };

      function _addListener(target, type, listener, prepend) {
        var m;
        var events;
        var existing;
        checkListener(listener);
        events = target._events;

        if (events === undefined) {
          events = target._events = Object.create(null);
          target._eventsCount = 0;
        } else {
          // To avoid recursion in the case that type === "newListener"! Before
          // adding it to the listeners, first emit "newListener".
          if (events.newListener !== undefined) {
            target.emit('newListener', type, listener.listener ? listener.listener : listener); // Re-assign `events` because a newListener handler could have caused the
            // this._events to be assigned to a new object

            events = target._events;
          }

          existing = events[type];
        }

        if (existing === undefined) {
          // Optimize the case of one listener. Don't need the extra array object.
          existing = events[type] = listener;
          ++target._eventsCount;
        } else {
          if (typeof existing === 'function') {
            // Adding the second element, need to change to array.
            existing = events[type] = prepend ? [listener, existing] : [existing, listener]; // If we've already got an array, just append.
          } else if (prepend) {
            existing.unshift(listener);
          } else {
            existing.push(listener);
          } // Check for listener leak


          m = _getMaxListeners(target);

          if (m > 0 && existing.length > m && !existing.warned) {
            existing.warned = true; // No error code for this since it is a Warning
            // eslint-disable-next-line no-restricted-syntax

            var w = new Error('Possible EventEmitter memory leak detected. ' + existing.length + ' ' + String(type) + ' listeners ' + 'added. Use emitter.setMaxListeners() to ' + 'increase limit');
            w.name = 'MaxListenersExceededWarning';
            w.emitter = target;
            w.type = type;
            w.count = existing.length;
            ProcessEmitWarning(w);
          }
        }

        return target;
      }

      EventEmitter.prototype.addListener = function addListener(type, listener) {
        return _addListener(this, type, listener, false);
      };

      EventEmitter.prototype.on = EventEmitter.prototype.addListener;

      EventEmitter.prototype.prependListener = function prependListener(type, listener) {
        return _addListener(this, type, listener, true);
      };

      function onceWrapper() {
        if (!this.fired) {
          this.target.removeListener(this.type, this.wrapFn);
          this.fired = true;
          if (arguments.length === 0) return this.listener.call(this.target);
          return this.listener.apply(this.target, arguments);
        }
      }

      function _onceWrap(target, type, listener) {
        var state = {
          fired: false,
          wrapFn: undefined,
          target: target,
          type: type,
          listener: listener
        };
        var wrapped = onceWrapper.bind(state);
        wrapped.listener = listener;
        state.wrapFn = wrapped;
        return wrapped;
      }

      EventEmitter.prototype.once = function once(type, listener) {
        checkListener(listener);
        this.on(type, _onceWrap(this, type, listener));
        return this;
      };

      EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
        checkListener(listener);
        this.prependListener(type, _onceWrap(this, type, listener));
        return this;
      }; // Emits a 'removeListener' event if and only if the listener was removed.


      EventEmitter.prototype.removeListener = function removeListener(type, listener) {
        var list, events, position, i, originalListener;
        checkListener(listener);
        events = this._events;
        if (events === undefined) return this;
        list = events[type];
        if (list === undefined) return this;

        if (list === listener || list.listener === listener) {
          if (--this._eventsCount === 0) this._events = Object.create(null);else {
            delete events[type];
            if (events.removeListener) this.emit('removeListener', type, list.listener || listener);
          }
        } else if (typeof list !== 'function') {
          position = -1;

          for (i = list.length - 1; i >= 0; i--) {
            if (list[i] === listener || list[i].listener === listener) {
              originalListener = list[i].listener;
              position = i;
              break;
            }
          }

          if (position < 0) return this;
          if (position === 0) list.shift();else {
            spliceOne(list, position);
          }
          if (list.length === 1) events[type] = list[0];
          if (events.removeListener !== undefined) this.emit('removeListener', type, originalListener || listener);
        }

        return this;
      };

      EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

      EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
        var listeners, events, i;
        events = this._events;
        if (events === undefined) return this; // not listening for removeListener, no need to emit

        if (events.removeListener === undefined) {
          if (arguments.length === 0) {
            this._events = Object.create(null);
            this._eventsCount = 0;
          } else if (events[type] !== undefined) {
            if (--this._eventsCount === 0) this._events = Object.create(null);else delete events[type];
          }

          return this;
        } // emit removeListener for all listeners on all events


        if (arguments.length === 0) {
          var keys = Object.keys(events);
          var key;

          for (i = 0; i < keys.length; ++i) {
            key = keys[i];
            if (key === 'removeListener') continue;
            this.removeAllListeners(key);
          }

          this.removeAllListeners('removeListener');
          this._events = Object.create(null);
          this._eventsCount = 0;
          return this;
        }

        listeners = events[type];

        if (typeof listeners === 'function') {
          this.removeListener(type, listeners);
        } else if (listeners !== undefined) {
          // LIFO order
          for (i = listeners.length - 1; i >= 0; i--) {
            this.removeListener(type, listeners[i]);
          }
        }

        return this;
      };

      function _listeners(target, type, unwrap) {
        var events = target._events;
        if (events === undefined) return [];
        var evlistener = events[type];
        if (evlistener === undefined) return [];
        if (typeof evlistener === 'function') return unwrap ? [evlistener.listener || evlistener] : [evlistener];
        return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
      }

      EventEmitter.prototype.listeners = function listeners(type) {
        return _listeners(this, type, true);
      };

      EventEmitter.prototype.rawListeners = function rawListeners(type) {
        return _listeners(this, type, false);
      };

      EventEmitter.listenerCount = function (emitter, type) {
        if (typeof emitter.listenerCount === 'function') {
          return emitter.listenerCount(type);
        } else {
          return listenerCount.call(emitter, type);
        }
      };

      EventEmitter.prototype.listenerCount = listenerCount;

      function listenerCount(type) {
        var events = this._events;

        if (events !== undefined) {
          var evlistener = events[type];

          if (typeof evlistener === 'function') {
            return 1;
          } else if (evlistener !== undefined) {
            return evlistener.length;
          }
        }

        return 0;
      }

      EventEmitter.prototype.eventNames = function eventNames() {
        return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
      };

      function arrayClone(arr, n) {
        var copy = new Array(n);

        for (var i = 0; i < n; ++i) {
          copy[i] = arr[i];
        }

        return copy;
      }

      function spliceOne(list, index) {
        for (; index + 1 < list.length; index++) {
          list[index] = list[index + 1];
        }

        list.pop();
      }

      function unwrapListeners(arr) {
        var ret = new Array(arr.length);

        for (var i = 0; i < ret.length; ++i) {
          ret[i] = arr[i].listener || arr[i];
        }

        return ret;
      }

      function once(emitter, name) {
        return new Promise(function (resolve, reject) {
          function eventListener() {
            if (errorListener !== undefined) {
              emitter.removeListener('error', errorListener);
            }

            resolve([].slice.call(arguments));
          }

          ;
          var errorListener; // Adding an error listener is not optional because
          // if an error is thrown on an event emitter we cannot
          // guarantee that the actual event we are waiting will
          // be fired. The result could be a silent way to create
          // memory or file descriptor leaks, which is something
          // we should avoid.

          if (name !== 'error') {
            errorListener = function errorListener(err) {
              emitter.removeListener(name, eventListener);
              reject(err);
            };

            emitter.once('error', errorListener);
          }

          emitter.once(name, eventListener);
        });
      }
      /***/

    },
    /* 123 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";
      /* WEBPACK VAR INJECTION */

      (function (process) {
        if (typeof process === 'undefined' || !process.version || process.version.indexOf('v0.') === 0 || process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
          module.exports = {
            nextTick: nextTick
          };
        } else {
          module.exports = process;
        }

        function nextTick(fn, arg1, arg2, arg3) {
          if (typeof fn !== 'function') {
            throw new TypeError('"callback" argument must be a function');
          }

          var len = arguments.length;
          var args, i;

          switch (len) {
            case 0:
            case 1:
              return process.nextTick(fn);

            case 2:
              return process.nextTick(function afterTickOne() {
                fn.call(null, arg1);
              });

            case 3:
              return process.nextTick(function afterTickTwo() {
                fn.call(null, arg1, arg2);
              });

            case 4:
              return process.nextTick(function afterTickThree() {
                fn.call(null, arg1, arg2, arg3);
              });

            default:
              args = new Array(len - 1);
              i = 0;

              while (i < args.length) {
                args[i++] = arguments[i];
              }

              return process.nextTick(function afterTick() {
                fn.apply(null, args);
              });
          }
        }
        /* WEBPACK VAR INJECTION */

      }).call(this, __webpack_require__(47));
      /***/
    },
    /* 124 */

    /***/
    function (module, exports, __webpack_require__) {
      /* eslint-disable node/no-deprecated-api */
      var buffer = __webpack_require__(10);

      var Buffer = buffer.Buffer; // alternative to using Object.keys for old browsers

      function copyProps(src, dst) {
        for (var key in src) {
          dst[key] = src[key];
        }
      }

      if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
        module.exports = buffer;
      } else {
        // Copy properties from require('buffer')
        copyProps(buffer, exports);
        exports.Buffer = SafeBuffer;
      }

      function SafeBuffer(arg, encodingOrOffset, length) {
        return Buffer(arg, encodingOrOffset, length);
      } // Copy static methods from Buffer


      copyProps(Buffer, SafeBuffer);

      SafeBuffer.from = function (arg, encodingOrOffset, length) {
        if (typeof arg === 'number') {
          throw new TypeError('Argument must not be a number');
        }

        return Buffer(arg, encodingOrOffset, length);
      };

      SafeBuffer.alloc = function (size, fill, encoding) {
        if (typeof size !== 'number') {
          throw new TypeError('Argument must be a number');
        }

        var buf = Buffer(size);

        if (fill !== undefined) {
          if (typeof encoding === 'string') {
            buf.fill(fill, encoding);
          } else {
            buf.fill(fill);
          }
        } else {
          buf.fill(0);
        }

        return buf;
      };

      SafeBuffer.allocUnsafe = function (size) {
        if (typeof size !== 'number') {
          throw new TypeError('Argument must be a number');
        }

        return Buffer(size);
      };

      SafeBuffer.allocUnsafeSlow = function (size) {
        if (typeof size !== 'number') {
          throw new TypeError('Argument must be a number');
        }

        return buffer.SlowBuffer(size);
      };
      /***/

    },
    /* 125 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict"; // Copyright Joyent, Inc. and other Node contributors.
      //
      // Permission is hereby granted, free of charge, to any person obtaining a
      // copy of this software and associated documentation files (the
      // "Software"), to deal in the Software without restriction, including
      // without limitation the rights to use, copy, modify, merge, publish,
      // distribute, sublicense, and/or sell copies of the Software, and to permit
      // persons to whom the Software is furnished to do so, subject to the
      // following conditions:
      //
      // The above copyright notice and this permission notice shall be included
      // in all copies or substantial portions of the Software.
      //
      // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
      // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
      // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
      // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
      // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
      // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
      // USE OR OTHER DEALINGS IN THE SOFTWARE.

      /*<replacement>*/

      var Buffer = __webpack_require__(124).Buffer;
      /*</replacement>*/


      var isEncoding = Buffer.isEncoding || function (encoding) {
        encoding = '' + encoding;

        switch (encoding && encoding.toLowerCase()) {
          case 'hex':
          case 'utf8':
          case 'utf-8':
          case 'ascii':
          case 'binary':
          case 'base64':
          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
          case 'raw':
            return true;

          default:
            return false;
        }
      };

      function _normalizeEncoding(enc) {
        if (!enc) return 'utf8';
        var retried;

        while (true) {
          switch (enc) {
            case 'utf8':
            case 'utf-8':
              return 'utf8';

            case 'ucs2':
            case 'ucs-2':
            case 'utf16le':
            case 'utf-16le':
              return 'utf16le';

            case 'latin1':
            case 'binary':
              return 'latin1';

            case 'base64':
            case 'ascii':
            case 'hex':
              return enc;

            default:
              if (retried) return; // undefined

              enc = ('' + enc).toLowerCase();
              retried = true;
          }
        }
      }

      ; // Do not cache `Buffer.isEncoding` when checking encoding names as some
      // modules monkey-patch it to support additional encodings

      function normalizeEncoding(enc) {
        var nenc = _normalizeEncoding(enc);

        if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
        return nenc || enc;
      } // StringDecoder provides an interface for efficiently splitting a series of
      // buffers into a series of JS strings without breaking apart multi-byte
      // characters.


      exports.StringDecoder = StringDecoder;

      function StringDecoder(encoding) {
        this.encoding = normalizeEncoding(encoding);
        var nb;

        switch (this.encoding) {
          case 'utf16le':
            this.text = utf16Text;
            this.end = utf16End;
            nb = 4;
            break;

          case 'utf8':
            this.fillLast = utf8FillLast;
            nb = 4;
            break;

          case 'base64':
            this.text = base64Text;
            this.end = base64End;
            nb = 3;
            break;

          default:
            this.write = simpleWrite;
            this.end = simpleEnd;
            return;
        }

        this.lastNeed = 0;
        this.lastTotal = 0;
        this.lastChar = Buffer.allocUnsafe(nb);
      }

      StringDecoder.prototype.write = function (buf) {
        if (buf.length === 0) return '';
        var r;
        var i;

        if (this.lastNeed) {
          r = this.fillLast(buf);
          if (r === undefined) return '';
          i = this.lastNeed;
          this.lastNeed = 0;
        } else {
          i = 0;
        }

        if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
        return r || '';
      };

      StringDecoder.prototype.end = utf8End; // Returns only complete characters in a Buffer

      StringDecoder.prototype.text = utf8Text; // Attempts to complete a partial non-UTF-8 character using bytes from a Buffer

      StringDecoder.prototype.fillLast = function (buf) {
        if (this.lastNeed <= buf.length) {
          buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
          return this.lastChar.toString(this.encoding, 0, this.lastTotal);
        }

        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
        this.lastNeed -= buf.length;
      }; // Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
      // continuation byte. If an invalid byte is detected, -2 is returned.


      function utf8CheckByte(byte) {
        if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
        return byte >> 6 === 0x02 ? -1 : -2;
      } // Checks at most 3 bytes at the end of a Buffer in order to detect an
      // incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
      // needed to complete the UTF-8 character (if applicable) are returned.


      function utf8CheckIncomplete(self, buf, i) {
        var j = buf.length - 1;
        if (j < i) return 0;
        var nb = utf8CheckByte(buf[j]);

        if (nb >= 0) {
          if (nb > 0) self.lastNeed = nb - 1;
          return nb;
        }

        if (--j < i || nb === -2) return 0;
        nb = utf8CheckByte(buf[j]);

        if (nb >= 0) {
          if (nb > 0) self.lastNeed = nb - 2;
          return nb;
        }

        if (--j < i || nb === -2) return 0;
        nb = utf8CheckByte(buf[j]);

        if (nb >= 0) {
          if (nb > 0) {
            if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
          }

          return nb;
        }

        return 0;
      } // Validates as many continuation bytes for a multi-byte UTF-8 character as
      // needed or are available. If we see a non-continuation byte where we expect
      // one, we "replace" the validated continuation bytes we've seen so far with
      // a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
      // behavior. The continuation byte check is included three times in the case
      // where all of the continuation bytes for a character exist in the same buffer.
      // It is also done this way as a slight performance increase instead of using a
      // loop.


      function utf8CheckExtraBytes(self, buf, p) {
        if ((buf[0] & 0xC0) !== 0x80) {
          self.lastNeed = 0;
          return "\uFFFD";
        }

        if (self.lastNeed > 1 && buf.length > 1) {
          if ((buf[1] & 0xC0) !== 0x80) {
            self.lastNeed = 1;
            return "\uFFFD";
          }

          if (self.lastNeed > 2 && buf.length > 2) {
            if ((buf[2] & 0xC0) !== 0x80) {
              self.lastNeed = 2;
              return "\uFFFD";
            }
          }
        }
      } // Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.


      function utf8FillLast(buf) {
        var p = this.lastTotal - this.lastNeed;
        var r = utf8CheckExtraBytes(this, buf, p);
        if (r !== undefined) return r;

        if (this.lastNeed <= buf.length) {
          buf.copy(this.lastChar, p, 0, this.lastNeed);
          return this.lastChar.toString(this.encoding, 0, this.lastTotal);
        }

        buf.copy(this.lastChar, p, 0, buf.length);
        this.lastNeed -= buf.length;
      } // Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
      // partial character, the character's bytes are buffered until the required
      // number of bytes are available.


      function utf8Text(buf, i) {
        var total = utf8CheckIncomplete(this, buf, i);
        if (!this.lastNeed) return buf.toString('utf8', i);
        this.lastTotal = total;
        var end = buf.length - (total - this.lastNeed);
        buf.copy(this.lastChar, 0, end);
        return buf.toString('utf8', i, end);
      } // For UTF-8, a replacement character is added when ending on a partial
      // character.


      function utf8End(buf) {
        var r = buf && buf.length ? this.write(buf) : '';
        if (this.lastNeed) return r + "\uFFFD";
        return r;
      } // UTF-16LE typically needs two bytes per character, but even if we have an even
      // number of bytes available, we need to check if we end on a leading/high
      // surrogate. In that case, we need to wait for the next two bytes in order to
      // decode the last character properly.


      function utf16Text(buf, i) {
        if ((buf.length - i) % 2 === 0) {
          var r = buf.toString('utf16le', i);

          if (r) {
            var c = r.charCodeAt(r.length - 1);

            if (c >= 0xD800 && c <= 0xDBFF) {
              this.lastNeed = 2;
              this.lastTotal = 4;
              this.lastChar[0] = buf[buf.length - 2];
              this.lastChar[1] = buf[buf.length - 1];
              return r.slice(0, -1);
            }
          }

          return r;
        }

        this.lastNeed = 1;
        this.lastTotal = 2;
        this.lastChar[0] = buf[buf.length - 1];
        return buf.toString('utf16le', i, buf.length - 1);
      } // For UTF-16LE we do not explicitly append special replacement characters if we
      // end on a partial character, we simply let v8 handle that.


      function utf16End(buf) {
        var r = buf && buf.length ? this.write(buf) : '';

        if (this.lastNeed) {
          var end = this.lastTotal - this.lastNeed;
          return r + this.lastChar.toString('utf16le', 0, end);
        }

        return r;
      }

      function base64Text(buf, i) {
        var n = (buf.length - i) % 3;
        if (n === 0) return buf.toString('base64', i);
        this.lastNeed = 3 - n;
        this.lastTotal = 3;

        if (n === 1) {
          this.lastChar[0] = buf[buf.length - 1];
        } else {
          this.lastChar[0] = buf[buf.length - 2];
          this.lastChar[1] = buf[buf.length - 1];
        }

        return buf.toString('base64', i, buf.length - n);
      }

      function base64End(buf) {
        var r = buf && buf.length ? this.write(buf) : '';
        if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
        return r;
      } // Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)


      function simpleWrite(buf) {
        return buf.toString(this.encoding);
      }

      function simpleEnd(buf) {
        return buf && buf.length ? this.write(buf) : '';
      }
      /***/

    },
    /* 126 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var TYPED_OK = typeof Uint8Array !== 'undefined' && typeof Uint16Array !== 'undefined' && typeof Int32Array !== 'undefined';

      function _has(obj, key) {
        return Object.prototype.hasOwnProperty.call(obj, key);
      }

      exports.assign = function (obj
      /*from1, from2, from3, ...*/
      ) {
        var sources = Array.prototype.slice.call(arguments, 1);

        while (sources.length) {
          var source = sources.shift();

          if (!source) {
            continue;
          }

          if (_typeof4(source) !== 'object') {
            throw new TypeError(source + 'must be non-object');
          }

          for (var p in source) {
            if (_has(source, p)) {
              obj[p] = source[p];
            }
          }
        }

        return obj;
      }; // reduce buffer size, avoiding mem copy


      exports.shrinkBuf = function (buf, size) {
        if (buf.length === size) {
          return buf;
        }

        if (buf.subarray) {
          return buf.subarray(0, size);
        }

        buf.length = size;
        return buf;
      };

      var fnTyped = {
        arraySet: function arraySet(dest, src, src_offs, len, dest_offs) {
          if (src.subarray && dest.subarray) {
            dest.set(src.subarray(src_offs, src_offs + len), dest_offs);
            return;
          } // Fallback to ordinary array


          for (var i = 0; i < len; i++) {
            dest[dest_offs + i] = src[src_offs + i];
          }
        },
        // Join array of chunks to single array.
        flattenChunks: function flattenChunks(chunks) {
          var i, l, len, pos, chunk, result; // calculate data length

          len = 0;

          for (i = 0, l = chunks.length; i < l; i++) {
            len += chunks[i].length;
          } // join chunks


          result = new Uint8Array(len);
          pos = 0;

          for (i = 0, l = chunks.length; i < l; i++) {
            chunk = chunks[i];
            result.set(chunk, pos);
            pos += chunk.length;
          }

          return result;
        }
      };
      var fnUntyped = {
        arraySet: function arraySet(dest, src, src_offs, len, dest_offs) {
          for (var i = 0; i < len; i++) {
            dest[dest_offs + i] = src[src_offs + i];
          }
        },
        // Join array of chunks to single array.
        flattenChunks: function flattenChunks(chunks) {
          return [].concat.apply([], chunks);
        }
      }; // Enable/Disable typed arrays use, for testing
      //

      exports.setTyped = function (on) {
        if (on) {
          exports.Buf8 = Uint8Array;
          exports.Buf16 = Uint16Array;
          exports.Buf32 = Int32Array;
          exports.assign(exports, fnTyped);
        } else {
          exports.Buf8 = Array;
          exports.Buf16 = Array;
          exports.Buf32 = Array;
          exports.assign(exports, fnUntyped);
        }
      };

      exports.setTyped(TYPED_OK);
      /***/
    },
    /* 127 */

    /***/
    function (module, exports, __webpack_require__) {
      ;

      (function (root, factory) {
        if (true) {
          // CommonJS
          module.exports = exports = factory(__webpack_require__(2));
        } else {}
      })(this, function (CryptoJS) {
        (function (undefined) {
          // Shortcuts
          var C = CryptoJS;
          var C_lib = C.lib;
          var Base = C_lib.Base;
          var X32WordArray = C_lib.WordArray;
          /**
           * x64 namespace.
           */

          var C_x64 = C.x64 = {};
          /**
           * A 64-bit word.
           */

          var X64Word = C_x64.Word = Base.extend({
            /**
             * Initializes a newly created 64-bit word.
             *
             * @param {number} high The high 32 bits.
             * @param {number} low The low 32 bits.
             *
             * @example
             *
             *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);
             */
            init: function init(high, low) {
              this.high = high;
              this.low = low;
            }
            /**
             * Bitwise NOTs this word.
             *
             * @return {X64Word} A new x64-Word object after negating.
             *
             * @example
             *
             *     var negated = x64Word.not();
             */
            // not: function () {
            // var high = ~this.high;
            // var low = ~this.low;
            // return X64Word.create(high, low);
            // },

            /**
             * Bitwise ANDs this word with the passed word.
             *
             * @param {X64Word} word The x64-Word to AND with this word.
             *
             * @return {X64Word} A new x64-Word object after ANDing.
             *
             * @example
             *
             *     var anded = x64Word.and(anotherX64Word);
             */
            // and: function (word) {
            // var high = this.high & word.high;
            // var low = this.low & word.low;
            // return X64Word.create(high, low);
            // },

            /**
             * Bitwise ORs this word with the passed word.
             *
             * @param {X64Word} word The x64-Word to OR with this word.
             *
             * @return {X64Word} A new x64-Word object after ORing.
             *
             * @example
             *
             *     var ored = x64Word.or(anotherX64Word);
             */
            // or: function (word) {
            // var high = this.high | word.high;
            // var low = this.low | word.low;
            // return X64Word.create(high, low);
            // },

            /**
             * Bitwise XORs this word with the passed word.
             *
             * @param {X64Word} word The x64-Word to XOR with this word.
             *
             * @return {X64Word} A new x64-Word object after XORing.
             *
             * @example
             *
             *     var xored = x64Word.xor(anotherX64Word);
             */
            // xor: function (word) {
            // var high = this.high ^ word.high;
            // var low = this.low ^ word.low;
            // return X64Word.create(high, low);
            // },

            /**
             * Shifts this word n bits to the left.
             *
             * @param {number} n The number of bits to shift.
             *
             * @return {X64Word} A new x64-Word object after shifting.
             *
             * @example
             *
             *     var shifted = x64Word.shiftL(25);
             */
            // shiftL: function (n) {
            // if (n < 32) {
            // var high = (this.high << n) | (this.low >>> (32 - n));
            // var low = this.low << n;
            // } else {
            // var high = this.low << (n - 32);
            // var low = 0;
            // }
            // return X64Word.create(high, low);
            // },

            /**
             * Shifts this word n bits to the right.
             *
             * @param {number} n The number of bits to shift.
             *
             * @return {X64Word} A new x64-Word object after shifting.
             *
             * @example
             *
             *     var shifted = x64Word.shiftR(7);
             */
            // shiftR: function (n) {
            // if (n < 32) {
            // var low = (this.low >>> n) | (this.high << (32 - n));
            // var high = this.high >>> n;
            // } else {
            // var low = this.high >>> (n - 32);
            // var high = 0;
            // }
            // return X64Word.create(high, low);
            // },

            /**
             * Rotates this word n bits to the left.
             *
             * @param {number} n The number of bits to rotate.
             *
             * @return {X64Word} A new x64-Word object after rotating.
             *
             * @example
             *
             *     var rotated = x64Word.rotL(25);
             */
            // rotL: function (n) {
            // return this.shiftL(n).or(this.shiftR(64 - n));
            // },

            /**
             * Rotates this word n bits to the right.
             *
             * @param {number} n The number of bits to rotate.
             *
             * @return {X64Word} A new x64-Word object after rotating.
             *
             * @example
             *
             *     var rotated = x64Word.rotR(7);
             */
            // rotR: function (n) {
            // return this.shiftR(n).or(this.shiftL(64 - n));
            // },

            /**
             * Adds this word with the passed word.
             *
             * @param {X64Word} word The x64-Word to add with this word.
             *
             * @return {X64Word} A new x64-Word object after adding.
             *
             * @example
             *
             *     var added = x64Word.add(anotherX64Word);
             */
            // add: function (word) {
            // var low = (this.low + word.low) | 0;
            // var carry = (low >>> 0) < (this.low >>> 0) ? 1 : 0;
            // var high = (this.high + word.high + carry) | 0;
            // return X64Word.create(high, low);
            // }

          });
          /**
           * An array of 64-bit words.
           *
           * @property {Array} words The array of CryptoJS.x64.Word objects.
           * @property {number} sigBytes The number of significant bytes in this word array.
           */

          var X64WordArray = C_x64.WordArray = Base.extend({
            /**
             * Initializes a newly created word array.
             *
             * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.
             * @param {number} sigBytes (Optional) The number of significant bytes in the words.
             *
             * @example
             *
             *     var wordArray = CryptoJS.x64.WordArray.create();
             *
             *     var wordArray = CryptoJS.x64.WordArray.create([
             *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
             *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
             *     ]);
             *
             *     var wordArray = CryptoJS.x64.WordArray.create([
             *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
             *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
             *     ], 10);
             */
            init: function init(words, sigBytes) {
              words = this.words = words || [];

              if (sigBytes != undefined) {
                this.sigBytes = sigBytes;
              } else {
                this.sigBytes = words.length * 8;
              }
            },

            /**
             * Converts this 64-bit word array to a 32-bit word array.
             *
             * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.
             *
             * @example
             *
             *     var x32WordArray = x64WordArray.toX32();
             */
            toX32: function toX32() {
              // Shortcuts
              var x64Words = this.words;
              var x64WordsLength = x64Words.length; // Convert

              var x32Words = [];

              for (var i = 0; i < x64WordsLength; i++) {
                var x64Word = x64Words[i];
                x32Words.push(x64Word.high);
                x32Words.push(x64Word.low);
              }

              return X32WordArray.create(x32Words, this.sigBytes);
            },

            /**
             * Creates a copy of this word array.
             *
             * @return {X64WordArray} The clone.
             *
             * @example
             *
             *     var clone = x64WordArray.clone();
             */
            clone: function clone() {
              var clone = Base.clone.call(this); // Clone "words" array

              var words = clone.words = this.words.slice(0); // Clone each X64Word object

              var wordsLength = words.length;

              for (var i = 0; i < wordsLength; i++) {
                words[i] = words[i].clone();
              }

              return clone;
            }
          });
        })();

        return CryptoJS;
      });
      /***/

    },
    /* 128 */

    /***/
    function (module, exports) {
      exports.f = {}.propertyIsEnumerable;
      /***/
    },
    /* 129 */

    /***/
    function (module, exports, __webpack_require__) {
      // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
      var anObject = __webpack_require__(29);

      var dPs = __webpack_require__(257);

      var enumBugKeys = __webpack_require__(182);

      var IE_PROTO = __webpack_require__(180)('IE_PROTO');

      var Empty = function Empty() {
        /* empty */
      };

      var PROTOTYPE = 'prototype'; // Create object with fake `null` prototype: use iframe Object with cleared prototype

      var _createDict = function createDict() {
        // Thrash, waste and sodomy: IE GC bug
        var iframe = __webpack_require__(176)('iframe');

        var i = enumBugKeys.length;
        var lt = '<';
        var gt = '>';
        var iframeDocument;
        iframe.style.display = 'none';

        __webpack_require__(260).appendChild(iframe);

        iframe.src = 'javascript:'; // eslint-disable-line no-script-url
        // createDict = iframe.contentWindow.Object;
        // html.removeChild(iframe);

        iframeDocument = iframe.contentWindow.document;
        iframeDocument.open();
        iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
        iframeDocument.close();
        _createDict = iframeDocument.F;

        while (i--) {
          delete _createDict[PROTOTYPE][enumBugKeys[i]];
        }

        return _createDict();
      };

      module.exports = Object.create || function create(O, Properties) {
        var result;

        if (O !== null) {
          Empty[PROTOTYPE] = anObject(O);
          result = new Empty();
          Empty[PROTOTYPE] = null; // add "__proto__" for Object.getPrototypeOf polyfill

          result[IE_PROTO] = O;
        } else result = _createDict();

        return Properties === undefined ? result : dPs(result, Properties);
      };
      /***/

    },
    /* 130 */

    /***/
    function (module, exports, __webpack_require__) {
      // 7.1.15 ToLength
      var toInteger = __webpack_require__(179);

      var min = Math.min;

      module.exports = function (it) {
        return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
      };
      /***/

    },
    /* 131 */

    /***/
    function (module, exports) {
      var id = 0;
      var px = Math.random();

      module.exports = function (key) {
        return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
      };
      /***/

    },
    /* 132 */

    /***/
    function (module, exports, __webpack_require__) {
      var META = __webpack_require__(131)('meta');

      var isObject = __webpack_require__(22);

      var has = __webpack_require__(51);

      var setDesc = __webpack_require__(26).f;

      var id = 0;

      var isExtensible = Object.isExtensible || function () {
        return true;
      };

      var FREEZE = !__webpack_require__(52)(function () {
        return isExtensible(Object.preventExtensions({}));
      });

      var setMeta = function setMeta(it) {
        setDesc(it, META, {
          value: {
            i: 'O' + ++id,
            // object ID
            w: {} // weak collections IDs

          }
        });
      };

      var fastKey = function fastKey(it, create) {
        // return primitive with prefix
        if (!isObject(it)) return _typeof4(it) == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;

        if (!has(it, META)) {
          // can't set metadata to uncaught frozen object
          if (!isExtensible(it)) return 'F'; // not necessary to add metadata

          if (!create) return 'E'; // add missing metadata

          setMeta(it); // return object ID
        }

        return it[META].i;
      };

      var getWeak = function getWeak(it, create) {
        if (!has(it, META)) {
          // can't set metadata to uncaught frozen object
          if (!isExtensible(it)) return true; // not necessary to add metadata

          if (!create) return false; // add missing metadata

          setMeta(it); // return hash weak collections IDs
        }

        return it[META].w;
      }; // add metadata on freeze-family methods calling


      var onFreeze = function onFreeze(it) {
        if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
        return it;
      };

      var meta = module.exports = {
        KEY: META,
        NEED: false,
        fastKey: fastKey,
        getWeak: getWeak,
        onFreeze: onFreeze
      };
      /***/
    },
    /* 133 */

    /***/
    function (module, exports) {
      /***/
    },
    /* 134 */

    /***/
    function (module, exports, __webpack_require__) {
      var createTypedArrayConstructor = __webpack_require__(236); // `Uint32Array` constructor
      // https://tc39.github.io/ecma262/#sec-typedarray-objects


      createTypedArrayConstructor('Uint32', function (init) {
        return function Uint32Array(data, byteOffset, length) {
          return init(this, data, byteOffset, length);
        };
      });
      /***/
    },
    /* 135 */

    /***/
    function (module, exports) {
      var TINF_OK = 0;
      var TINF_DATA_ERROR = -3;

      function Tree() {
        this.table = new Uint16Array(16);
        /* table of code length counts */

        this.trans = new Uint16Array(288);
        /* code -> symbol translation table */
      }

      function Data(source, dest) {
        this.source = source;
        this.sourceIndex = 0;
        this.tag = 0;
        this.bitcount = 0;
        this.dest = dest;
        this.destLen = 0;
        this.ltree = new Tree();
        /* dynamic length/symbol tree */

        this.dtree = new Tree();
        /* dynamic distance tree */
      }
      /* --------------------------------------------------- *
       * -- uninitialized global data (static structures) -- *
       * --------------------------------------------------- */


      var sltree = new Tree();
      var sdtree = new Tree();
      /* extra bits and base tables for length codes */

      var length_bits = new Uint8Array(30);
      var length_base = new Uint16Array(30);
      /* extra bits and base tables for distance codes */

      var dist_bits = new Uint8Array(30);
      var dist_base = new Uint16Array(30);
      /* special ordering of code length codes */

      var clcidx = new Uint8Array([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);
      /* used by tinf_decode_trees, avoids allocations every call */

      var code_tree = new Tree();
      var lengths = new Uint8Array(288 + 32);
      /* ----------------------- *
       * -- utility functions -- *
       * ----------------------- */

      /* build extra bits and base tables */

      function tinf_build_bits_base(bits, base, delta, first) {
        var i, sum;
        /* build bits table */

        for (i = 0; i < delta; ++i) {
          bits[i] = 0;
        }

        for (i = 0; i < 30 - delta; ++i) {
          bits[i + delta] = i / delta | 0;
        }
        /* build base table */


        for (sum = first, i = 0; i < 30; ++i) {
          base[i] = sum;
          sum += 1 << bits[i];
        }
      }
      /* build the fixed huffman trees */


      function tinf_build_fixed_trees(lt, dt) {
        var i;
        /* build fixed length tree */

        for (i = 0; i < 7; ++i) {
          lt.table[i] = 0;
        }

        lt.table[7] = 24;
        lt.table[8] = 152;
        lt.table[9] = 112;

        for (i = 0; i < 24; ++i) {
          lt.trans[i] = 256 + i;
        }

        for (i = 0; i < 144; ++i) {
          lt.trans[24 + i] = i;
        }

        for (i = 0; i < 8; ++i) {
          lt.trans[24 + 144 + i] = 280 + i;
        }

        for (i = 0; i < 112; ++i) {
          lt.trans[24 + 144 + 8 + i] = 144 + i;
        }
        /* build fixed distance tree */


        for (i = 0; i < 5; ++i) {
          dt.table[i] = 0;
        }

        dt.table[5] = 32;

        for (i = 0; i < 32; ++i) {
          dt.trans[i] = i;
        }
      }
      /* given an array of code lengths, build a tree */


      var offs = new Uint16Array(16);

      function tinf_build_tree(t, lengths, off, num) {
        var i, sum;
        /* clear code length count table */

        for (i = 0; i < 16; ++i) {
          t.table[i] = 0;
        }
        /* scan symbol lengths, and sum code length counts */


        for (i = 0; i < num; ++i) {
          t.table[lengths[off + i]]++;
        }

        t.table[0] = 0;
        /* compute offset table for distribution sort */

        for (sum = 0, i = 0; i < 16; ++i) {
          offs[i] = sum;
          sum += t.table[i];
        }
        /* create code->symbol translation table (symbols sorted by code) */


        for (i = 0; i < num; ++i) {
          if (lengths[off + i]) t.trans[offs[lengths[off + i]]++] = i;
        }
      }
      /* ---------------------- *
       * -- decode functions -- *
       * ---------------------- */

      /* get one bit from source stream */


      function tinf_getbit(d) {
        /* check if tag is empty */
        if (!d.bitcount--) {
          /* load next tag */
          d.tag = d.source[d.sourceIndex++];
          d.bitcount = 7;
        }
        /* shift bit out of tag */


        var bit = d.tag & 1;
        d.tag >>>= 1;
        return bit;
      }
      /* read a num bit value from a stream and add base */


      function tinf_read_bits(d, num, base) {
        if (!num) return base;

        while (d.bitcount < 24) {
          d.tag |= d.source[d.sourceIndex++] << d.bitcount;
          d.bitcount += 8;
        }

        var val = d.tag & 0xffff >>> 16 - num;
        d.tag >>>= num;
        d.bitcount -= num;
        return val + base;
      }
      /* given a data stream and a tree, decode a symbol */


      function tinf_decode_symbol(d, t) {
        while (d.bitcount < 24) {
          d.tag |= d.source[d.sourceIndex++] << d.bitcount;
          d.bitcount += 8;
        }

        var sum = 0,
            cur = 0,
            len = 0;
        var tag = d.tag;
        /* get more bits while code value is above sum */

        do {
          cur = 2 * cur + (tag & 1);
          tag >>>= 1;
          ++len;
          sum += t.table[len];
          cur -= t.table[len];
        } while (cur >= 0);

        d.tag = tag;
        d.bitcount -= len;
        return t.trans[sum + cur];
      }
      /* given a data stream, decode dynamic trees from it */


      function tinf_decode_trees(d, lt, dt) {
        var hlit, hdist, hclen;
        var i, num, length;
        /* get 5 bits HLIT (257-286) */

        hlit = tinf_read_bits(d, 5, 257);
        /* get 5 bits HDIST (1-32) */

        hdist = tinf_read_bits(d, 5, 1);
        /* get 4 bits HCLEN (4-19) */

        hclen = tinf_read_bits(d, 4, 4);

        for (i = 0; i < 19; ++i) {
          lengths[i] = 0;
        }
        /* read code lengths for code length alphabet */


        for (i = 0; i < hclen; ++i) {
          /* get 3 bits code length (0-7) */
          var clen = tinf_read_bits(d, 3, 0);
          lengths[clcidx[i]] = clen;
        }
        /* build code length tree */


        tinf_build_tree(code_tree, lengths, 0, 19);
        /* decode code lengths for the dynamic trees */

        for (num = 0; num < hlit + hdist;) {
          var sym = tinf_decode_symbol(d, code_tree);

          switch (sym) {
            case 16:
              /* copy previous code length 3-6 times (read 2 bits) */
              var prev = lengths[num - 1];

              for (length = tinf_read_bits(d, 2, 3); length; --length) {
                lengths[num++] = prev;
              }

              break;

            case 17:
              /* repeat code length 0 for 3-10 times (read 3 bits) */
              for (length = tinf_read_bits(d, 3, 3); length; --length) {
                lengths[num++] = 0;
              }

              break;

            case 18:
              /* repeat code length 0 for 11-138 times (read 7 bits) */
              for (length = tinf_read_bits(d, 7, 11); length; --length) {
                lengths[num++] = 0;
              }

              break;

            default:
              /* values 0-15 represent the actual code lengths */
              lengths[num++] = sym;
              break;
          }
        }
        /* build dynamic trees */


        tinf_build_tree(lt, lengths, 0, hlit);
        tinf_build_tree(dt, lengths, hlit, hdist);
      }
      /* ----------------------------- *
       * -- block inflate functions -- *
       * ----------------------------- */

      /* given a stream and two trees, inflate a block of data */


      function tinf_inflate_block_data(d, lt, dt) {
        while (1) {
          var sym = tinf_decode_symbol(d, lt);
          /* check for end of block */

          if (sym === 256) {
            return TINF_OK;
          }

          if (sym < 256) {
            d.dest[d.destLen++] = sym;
          } else {
            var length, dist, offs;
            var i;
            sym -= 257;
            /* possibly get more bits from length code */

            length = tinf_read_bits(d, length_bits[sym], length_base[sym]);
            dist = tinf_decode_symbol(d, dt);
            /* possibly get more bits from distance code */

            offs = d.destLen - tinf_read_bits(d, dist_bits[dist], dist_base[dist]);
            /* copy match */

            for (i = offs; i < offs + length; ++i) {
              d.dest[d.destLen++] = d.dest[i];
            }
          }
        }
      }
      /* inflate an uncompressed block of data */


      function tinf_inflate_uncompressed_block(d) {
        var length, invlength;
        var i;
        /* unread from bitbuffer */

        while (d.bitcount > 8) {
          d.sourceIndex--;
          d.bitcount -= 8;
        }
        /* get length */


        length = d.source[d.sourceIndex + 1];
        length = 256 * length + d.source[d.sourceIndex];
        /* get one's complement of length */

        invlength = d.source[d.sourceIndex + 3];
        invlength = 256 * invlength + d.source[d.sourceIndex + 2];
        /* check length */

        if (length !== (~invlength & 0x0000ffff)) return TINF_DATA_ERROR;
        d.sourceIndex += 4;
        /* copy block */

        for (i = length; i; --i) {
          d.dest[d.destLen++] = d.source[d.sourceIndex++];
        }
        /* make sure we start next block on a byte boundary */


        d.bitcount = 0;
        return TINF_OK;
      }
      /* inflate stream from source to dest */


      function tinf_uncompress(source, dest) {
        var d = new Data(source, dest);
        var bfinal, btype, res;

        do {
          /* read final block flag */
          bfinal = tinf_getbit(d);
          /* read block type (2 bits) */

          btype = tinf_read_bits(d, 2, 0);
          /* decompress block */

          switch (btype) {
            case 0:
              /* decompress uncompressed block */
              res = tinf_inflate_uncompressed_block(d);
              break;

            case 1:
              /* decompress block with fixed huffman trees */
              res = tinf_inflate_block_data(d, sltree, sdtree);
              break;

            case 2:
              /* decompress block with dynamic huffman trees */
              tinf_decode_trees(d, d.ltree, d.dtree);
              res = tinf_inflate_block_data(d, d.ltree, d.dtree);
              break;

            default:
              res = TINF_DATA_ERROR;
          }

          if (res !== TINF_OK) throw new Error('Data error');
        } while (!bfinal);

        if (d.destLen < d.dest.length) {
          if (typeof d.dest.slice === 'function') return d.dest.slice(0, d.destLen);else return d.dest.subarray(0, d.destLen);
        }

        return d.dest;
      }
      /* -------------------- *
       * -- initialization -- *
       * -------------------- */

      /* build fixed huffman trees */


      tinf_build_fixed_trees(sltree, sdtree);
      /* build extra bits and base tables */

      tinf_build_bits_base(length_bits, length_base, 4, 3);
      tinf_build_bits_base(dist_bits, dist_base, 2, 1);
      /* fix a special case */

      length_bits[28] = 0;
      length_base[28] = 258;
      module.exports = tinf_uncompress;
      /***/
    },
    /* 136 */

    /***/
    function (module, exports, __webpack_require__) {
      var anObject = __webpack_require__(16);

      var isArrayIteratorMethod = __webpack_require__(150);

      var toLength = __webpack_require__(8);

      var bind = __webpack_require__(96);

      var getIteratorMethod = __webpack_require__(151);

      var callWithSafeIterationClosing = __webpack_require__(214);

      var Result = function Result(stopped, result) {
        this.stopped = stopped;
        this.result = result;
      };

      var iterate = module.exports = function (iterable, fn, that, AS_ENTRIES, IS_ITERATOR) {
        var boundFunction = bind(fn, that, AS_ENTRIES ? 2 : 1);
        var iterator, iterFn, index, length, result, next, step;

        if (IS_ITERATOR) {
          iterator = iterable;
        } else {
          iterFn = getIteratorMethod(iterable);
          if (typeof iterFn != 'function') throw TypeError('Target is not iterable'); // optimisation for array iterators

          if (isArrayIteratorMethod(iterFn)) {
            for (index = 0, length = toLength(iterable.length); length > index; index++) {
              result = AS_ENTRIES ? boundFunction(anObject(step = iterable[index])[0], step[1]) : boundFunction(iterable[index]);
              if (result && result instanceof Result) return result;
            }

            return new Result(false);
          }

          iterator = iterFn.call(iterable);
        }

        next = iterator.next;

        while (!(step = next.call(iterator)).done) {
          result = callWithSafeIterationClosing(iterator, boundFunction, step.value, AS_ENTRIES);
          if (_typeof4(result) == 'object' && result && result instanceof Result) return result;
        }

        return new Result(false);
      };

      iterate.stop = function (result) {
        return new Result(true, result);
      };
      /***/

    },
    /* 137 */

    /***/
    function (module, exports) {
      module.exports = function (exec) {
        try {
          return {
            error: false,
            value: exec()
          };
        } catch (error) {
          return {
            error: true,
            value: error
          };
        }
      };
      /***/

    },
    /* 138 */

    /***/
    function (module, exports, __webpack_require__) {
      var global = __webpack_require__(3);

      var isObject = __webpack_require__(13);

      var document = global.document; // typeof document.createElement is 'object' in old IE

      var EXISTS = isObject(document) && isObject(document.createElement);

      module.exports = function (it) {
        return EXISTS ? document.createElement(it) : {};
      };
      /***/

    },
    /* 139 */

    /***/
    function (module, exports, __webpack_require__) {
      var global = __webpack_require__(3);

      var createNonEnumerableProperty = __webpack_require__(18);

      module.exports = function (key, value) {
        try {
          createNonEnumerableProperty(global, key, value);
        } catch (error) {
          global[key] = value;
        }

        return value;
      };
      /***/

    },
    /* 140 */

    /***/
    function (module, exports, __webpack_require__) {
      var store = __webpack_require__(199);

      var functionToString = Function.toString; // this helper broken in `3.4.1-3.4.4`, so we can't use `shared` helper

      if (typeof store.inspectSource != 'function') {
        store.inspectSource = function (it) {
          return functionToString.call(it);
        };
      }

      module.exports = store.inspectSource;
      /***/
    },
    /* 141 */

    /***/
    function (module, exports, __webpack_require__) {
      var IS_PURE = __webpack_require__(56);

      var store = __webpack_require__(199);

      (module.exports = function (key, value) {
        return store[key] || (store[key] = value !== undefined ? value : {});
      })('versions', []).push({
        version: '3.6.5',
        mode: IS_PURE ? 'pure' : 'global',
        copyright: '© 2020 Denis Pushkarev (zloirock.ru)'
      });
      /***/
    },
    /* 142 */

    /***/
    function (module, exports) {
      // IE8- don't enum bug keys
      module.exports = ['constructor', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'toLocaleString', 'toString', 'valueOf'];
      /***/
    },
    /* 143 */

    /***/
    function (module, exports) {
      exports.f = Object.getOwnPropertySymbols;
      /***/
    },
    /* 144 */

    /***/
    function (module, exports, __webpack_require__) {
      var fails = __webpack_require__(4);

      var replacement = /#|\.prototype\./;

      var isForced = function isForced(feature, detection) {
        var value = data[normalize(feature)];
        return value == POLYFILL ? true : value == NATIVE ? false : typeof detection == 'function' ? fails(detection) : !!detection;
      };

      var normalize = isForced.normalize = function (string) {
        return String(string).replace(replacement, '.').toLowerCase();
      };

      var data = isForced.data = {};
      var NATIVE = isForced.NATIVE = 'N';
      var POLYFILL = isForced.POLYFILL = 'P';
      module.exports = isForced;
      /***/
    },
    /* 145 */

    /***/
    function (module, exports, __webpack_require__) {
      var fails = __webpack_require__(4);

      module.exports = !!Object.getOwnPropertySymbols && !fails(function () {
        // Chrome 38 Symbol has incorrect toString conversion
        // eslint-disable-next-line no-undef
        return !String(Symbol());
      });
      /***/
    },
    /* 146 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var toPrimitive = __webpack_require__(55);

      var definePropertyModule = __webpack_require__(15);

      var createPropertyDescriptor = __webpack_require__(42);

      module.exports = function (object, key, value) {
        var propertyKey = toPrimitive(key);
        if (propertyKey in object) definePropertyModule.f(object, propertyKey, createPropertyDescriptor(0, value));else object[propertyKey] = value;
      };
      /***/

    },
    /* 147 */

    /***/
    function (module, exports, __webpack_require__) {
      var global = __webpack_require__(3);

      var userAgent = __webpack_require__(210);

      var process = global.process;
      var versions = process && process.versions;
      var v8 = versions && versions.v8;
      var match, version;

      if (v8) {
        match = v8.split('.');
        version = match[0] + match[1];
      } else if (userAgent) {
        match = userAgent.match(/Edge\/(\d+)/);

        if (!match || match[1] >= 74) {
          match = userAgent.match(/Chrome\/(\d+)/);
          if (match) version = match[1];
        }
      }

      module.exports = version && +version;
      /***/
    },
    /* 148 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var toObject = __webpack_require__(19);

      var toAbsoluteIndex = __webpack_require__(43);

      var toLength = __webpack_require__(8); // `Array.prototype.fill` method implementation
      // https://tc39.github.io/ecma262/#sec-array.prototype.fill


      module.exports = function fill(value
      /* , start = 0, end = @length */
      ) {
        var O = toObject(this);
        var length = toLength(O.length);
        var argumentsLength = arguments.length;
        var index = toAbsoluteIndex(argumentsLength > 1 ? arguments[1] : undefined, length);
        var end = argumentsLength > 2 ? arguments[2] : undefined;
        var endPos = end === undefined ? length : toAbsoluteIndex(end, length);

        while (endPos > index) {
          O[index++] = value;
        }

        return O;
      };
      /***/

    },
    /* 149 */

    /***/
    function (module, exports, __webpack_require__) {
      var wellKnownSymbol = __webpack_require__(6);

      var create = __webpack_require__(58);

      var definePropertyModule = __webpack_require__(15);

      var UNSCOPABLES = wellKnownSymbol('unscopables');
      var ArrayPrototype = Array.prototype; // Array.prototype[@@unscopables]
      // https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables

      if (ArrayPrototype[UNSCOPABLES] == undefined) {
        definePropertyModule.f(ArrayPrototype, UNSCOPABLES, {
          configurable: true,
          value: create(null)
        });
      } // add a key to Array.prototype[@@unscopables]


      module.exports = function (key) {
        ArrayPrototype[UNSCOPABLES][key] = true;
      };
      /***/

    },
    /* 150 */

    /***/
    function (module, exports, __webpack_require__) {
      var wellKnownSymbol = __webpack_require__(6);

      var Iterators = __webpack_require__(97);

      var ITERATOR = wellKnownSymbol('iterator');
      var ArrayPrototype = Array.prototype; // check on default Array iterator

      module.exports = function (it) {
        return it !== undefined && (Iterators.Array === it || ArrayPrototype[ITERATOR] === it);
      };
      /***/

    },
    /* 151 */

    /***/
    function (module, exports, __webpack_require__) {
      var classof = __webpack_require__(117);

      var Iterators = __webpack_require__(97);

      var wellKnownSymbol = __webpack_require__(6);

      var ITERATOR = wellKnownSymbol('iterator');

      module.exports = function (it) {
        if (it != undefined) return it[ITERATOR] || it['@@iterator'] || Iterators[classof(it)];
      };
      /***/

    },
    /* 152 */

    /***/
    function (module, exports, __webpack_require__) {
      var wellKnownSymbol = __webpack_require__(6);

      var TO_STRING_TAG = wellKnownSymbol('toStringTag');
      var test = {};
      test[TO_STRING_TAG] = 'z';
      module.exports = String(test) === '[object z]';
      /***/
    },
    /* 153 */

    /***/
    function (module, exports, __webpack_require__) {
      var wellKnownSymbol = __webpack_require__(6);

      var ITERATOR = wellKnownSymbol('iterator');
      var SAFE_CLOSING = false;

      try {
        var called = 0;
        var iteratorWithReturn = {
          next: function next() {
            return {
              done: !!called++
            };
          },
          'return': function _return() {
            SAFE_CLOSING = true;
          }
        };

        iteratorWithReturn[ITERATOR] = function () {
          return this;
        }; // eslint-disable-next-line no-throw-literal


        Array.from(iteratorWithReturn, function () {
          throw 2;
        });
      } catch (error) {
        /* empty */
      }

      module.exports = function (exec, SKIP_CLOSING) {
        if (!SKIP_CLOSING && !SAFE_CLOSING) return false;
        var ITERATION_SUPPORT = false;

        try {
          var object = {};

          object[ITERATOR] = function () {
            return {
              next: function next() {
                return {
                  done: ITERATION_SUPPORT = true
                };
              }
            };
          };

          exec(object);
        } catch (error) {
          /* empty */
        }

        return ITERATION_SUPPORT;
      };
      /***/

    },
    /* 154 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var global = __webpack_require__(3);

      var DESCRIPTORS = __webpack_require__(11);

      var NATIVE_ARRAY_BUFFER = __webpack_require__(220);

      var createNonEnumerableProperty = __webpack_require__(18);

      var redefineAll = __webpack_require__(221);

      var fails = __webpack_require__(4);

      var anInstance = __webpack_require__(155);

      var toInteger = __webpack_require__(37);

      var toLength = __webpack_require__(8);

      var toIndex = __webpack_require__(222);

      var IEEE754 = __webpack_require__(321);

      var getPrototypeOf = __webpack_require__(60);

      var setPrototypeOf = __webpack_require__(45);

      var getOwnPropertyNames = __webpack_require__(57).f;

      var defineProperty = __webpack_require__(15).f;

      var arrayFill = __webpack_require__(148);

      var setToStringTag = __webpack_require__(95);

      var InternalStateModule = __webpack_require__(35);

      var getInternalState = InternalStateModule.get;
      var setInternalState = InternalStateModule.set;
      var ARRAY_BUFFER = 'ArrayBuffer';
      var DATA_VIEW = 'DataView';
      var PROTOTYPE = 'prototype';
      var WRONG_LENGTH = 'Wrong length';
      var WRONG_INDEX = 'Wrong index';
      var NativeArrayBuffer = global[ARRAY_BUFFER];
      var $ArrayBuffer = NativeArrayBuffer;
      var $DataView = global[DATA_VIEW];
      var $DataViewPrototype = $DataView && $DataView[PROTOTYPE];
      var ObjectPrototype = Object.prototype;
      var RangeError = global.RangeError;
      var packIEEE754 = IEEE754.pack;
      var unpackIEEE754 = IEEE754.unpack;

      var packInt8 = function packInt8(number) {
        return [number & 0xFF];
      };

      var packInt16 = function packInt16(number) {
        return [number & 0xFF, number >> 8 & 0xFF];
      };

      var packInt32 = function packInt32(number) {
        return [number & 0xFF, number >> 8 & 0xFF, number >> 16 & 0xFF, number >> 24 & 0xFF];
      };

      var unpackInt32 = function unpackInt32(buffer) {
        return buffer[3] << 24 | buffer[2] << 16 | buffer[1] << 8 | buffer[0];
      };

      var packFloat32 = function packFloat32(number) {
        return packIEEE754(number, 23, 4);
      };

      var packFloat64 = function packFloat64(number) {
        return packIEEE754(number, 52, 8);
      };

      var addGetter = function addGetter(Constructor, key) {
        defineProperty(Constructor[PROTOTYPE], key, {
          get: function get() {
            return getInternalState(this)[key];
          }
        });
      };

      var get = function get(view, count, index, isLittleEndian) {
        var intIndex = toIndex(index);
        var store = getInternalState(view);
        if (intIndex + count > store.byteLength) throw RangeError(WRONG_INDEX);
        var bytes = getInternalState(store.buffer).bytes;
        var start = intIndex + store.byteOffset;
        var pack = bytes.slice(start, start + count);
        return isLittleEndian ? pack : pack.reverse();
      };

      var set = function set(view, count, index, conversion, value, isLittleEndian) {
        var intIndex = toIndex(index);
        var store = getInternalState(view);
        if (intIndex + count > store.byteLength) throw RangeError(WRONG_INDEX);
        var bytes = getInternalState(store.buffer).bytes;
        var start = intIndex + store.byteOffset;
        var pack = conversion(+value);

        for (var i = 0; i < count; i++) {
          bytes[start + i] = pack[isLittleEndian ? i : count - i - 1];
        }
      };

      if (!NATIVE_ARRAY_BUFFER) {
        $ArrayBuffer = function ArrayBuffer(length) {
          anInstance(this, $ArrayBuffer, ARRAY_BUFFER);
          var byteLength = toIndex(length);
          setInternalState(this, {
            bytes: arrayFill.call(new Array(byteLength), 0),
            byteLength: byteLength
          });
          if (!DESCRIPTORS) this.byteLength = byteLength;
        };

        $DataView = function DataView(buffer, byteOffset, byteLength) {
          anInstance(this, $DataView, DATA_VIEW);
          anInstance(buffer, $ArrayBuffer, DATA_VIEW);
          var bufferLength = getInternalState(buffer).byteLength;
          var offset = toInteger(byteOffset);
          if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset');
          byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
          if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);
          setInternalState(this, {
            buffer: buffer,
            byteLength: byteLength,
            byteOffset: offset
          });

          if (!DESCRIPTORS) {
            this.buffer = buffer;
            this.byteLength = byteLength;
            this.byteOffset = offset;
          }
        };

        if (DESCRIPTORS) {
          addGetter($ArrayBuffer, 'byteLength');
          addGetter($DataView, 'buffer');
          addGetter($DataView, 'byteLength');
          addGetter($DataView, 'byteOffset');
        }

        redefineAll($DataView[PROTOTYPE], {
          getInt8: function getInt8(byteOffset) {
            return get(this, 1, byteOffset)[0] << 24 >> 24;
          },
          getUint8: function getUint8(byteOffset) {
            return get(this, 1, byteOffset)[0];
          },
          getInt16: function getInt16(byteOffset
          /* , littleEndian */
          ) {
            var bytes = get(this, 2, byteOffset, arguments.length > 1 ? arguments[1] : undefined);
            return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
          },
          getUint16: function getUint16(byteOffset
          /* , littleEndian */
          ) {
            var bytes = get(this, 2, byteOffset, arguments.length > 1 ? arguments[1] : undefined);
            return bytes[1] << 8 | bytes[0];
          },
          getInt32: function getInt32(byteOffset
          /* , littleEndian */
          ) {
            return unpackInt32(get(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined));
          },
          getUint32: function getUint32(byteOffset
          /* , littleEndian */
          ) {
            return unpackInt32(get(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined)) >>> 0;
          },
          getFloat32: function getFloat32(byteOffset
          /* , littleEndian */
          ) {
            return unpackIEEE754(get(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined), 23);
          },
          getFloat64: function getFloat64(byteOffset
          /* , littleEndian */
          ) {
            return unpackIEEE754(get(this, 8, byteOffset, arguments.length > 1 ? arguments[1] : undefined), 52);
          },
          setInt8: function setInt8(byteOffset, value) {
            set(this, 1, byteOffset, packInt8, value);
          },
          setUint8: function setUint8(byteOffset, value) {
            set(this, 1, byteOffset, packInt8, value);
          },
          setInt16: function setInt16(byteOffset, value
          /* , littleEndian */
          ) {
            set(this, 2, byteOffset, packInt16, value, arguments.length > 2 ? arguments[2] : undefined);
          },
          setUint16: function setUint16(byteOffset, value
          /* , littleEndian */
          ) {
            set(this, 2, byteOffset, packInt16, value, arguments.length > 2 ? arguments[2] : undefined);
          },
          setInt32: function setInt32(byteOffset, value
          /* , littleEndian */
          ) {
            set(this, 4, byteOffset, packInt32, value, arguments.length > 2 ? arguments[2] : undefined);
          },
          setUint32: function setUint32(byteOffset, value
          /* , littleEndian */
          ) {
            set(this, 4, byteOffset, packInt32, value, arguments.length > 2 ? arguments[2] : undefined);
          },
          setFloat32: function setFloat32(byteOffset, value
          /* , littleEndian */
          ) {
            set(this, 4, byteOffset, packFloat32, value, arguments.length > 2 ? arguments[2] : undefined);
          },
          setFloat64: function setFloat64(byteOffset, value
          /* , littleEndian */
          ) {
            set(this, 8, byteOffset, packFloat64, value, arguments.length > 2 ? arguments[2] : undefined);
          }
        });
      } else {
        if (!fails(function () {
          NativeArrayBuffer(1);
        }) || !fails(function () {
          new NativeArrayBuffer(-1); // eslint-disable-line no-new
        }) || fails(function () {
          new NativeArrayBuffer(); // eslint-disable-line no-new

          new NativeArrayBuffer(1.5); // eslint-disable-line no-new

          new NativeArrayBuffer(NaN); // eslint-disable-line no-new

          return NativeArrayBuffer.name != ARRAY_BUFFER;
        })) {
          $ArrayBuffer = function ArrayBuffer(length) {
            anInstance(this, $ArrayBuffer);
            return new NativeArrayBuffer(toIndex(length));
          };

          var ArrayBufferPrototype = $ArrayBuffer[PROTOTYPE] = NativeArrayBuffer[PROTOTYPE];

          for (var keys = getOwnPropertyNames(NativeArrayBuffer), j = 0, key; keys.length > j;) {
            if (!((key = keys[j++]) in $ArrayBuffer)) {
              createNonEnumerableProperty($ArrayBuffer, key, NativeArrayBuffer[key]);
            }
          }

          ArrayBufferPrototype.constructor = $ArrayBuffer;
        } // WebKit bug - the same parent prototype for typed arrays and data view


        if (setPrototypeOf && getPrototypeOf($DataViewPrototype) !== ObjectPrototype) {
          setPrototypeOf($DataViewPrototype, ObjectPrototype);
        } // iOS Safari 7.x bug


        var testView = new $DataView(new $ArrayBuffer(2));
        var nativeSetInt8 = $DataViewPrototype.setInt8;
        testView.setInt8(0, 2147483648);
        testView.setInt8(1, 2147483649);
        if (testView.getInt8(0) || !testView.getInt8(1)) redefineAll($DataViewPrototype, {
          setInt8: function setInt8(byteOffset, value) {
            nativeSetInt8.call(this, byteOffset, value << 24 >> 24);
          },
          setUint8: function setUint8(byteOffset, value) {
            nativeSetInt8.call(this, byteOffset, value << 24 >> 24);
          }
        }, {
          unsafe: true
        });
      }

      setToStringTag($ArrayBuffer, ARRAY_BUFFER);
      setToStringTag($DataView, DATA_VIEW);
      module.exports = {
        ArrayBuffer: $ArrayBuffer,
        DataView: $DataView
      };
      /***/
    },
    /* 155 */

    /***/
    function (module, exports) {
      module.exports = function (it, Constructor, name) {
        if (!(it instanceof Constructor)) {
          throw TypeError('Incorrect ' + (name ? name + ' ' : '') + 'invocation');
        }

        return it;
      };
      /***/

    },
    /* 156 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var getBuiltIn = __webpack_require__(36);

      var definePropertyModule = __webpack_require__(15);

      var wellKnownSymbol = __webpack_require__(6);

      var DESCRIPTORS = __webpack_require__(11);

      var SPECIES = wellKnownSymbol('species');

      module.exports = function (CONSTRUCTOR_NAME) {
        var Constructor = getBuiltIn(CONSTRUCTOR_NAME);
        var defineProperty = definePropertyModule.f;

        if (DESCRIPTORS && Constructor && !Constructor[SPECIES]) {
          defineProperty(Constructor, SPECIES, {
            configurable: true,
            get: function get() {
              return this;
            }
          });
        }
      };
      /***/

    },
    /* 157 */

    /***/
    function (module, exports, __webpack_require__) {
      var DESCRIPTORS = __webpack_require__(11);

      var defineProperty = __webpack_require__(15).f;

      var FunctionPrototype = Function.prototype;
      var FunctionPrototypeToString = FunctionPrototype.toString;
      var nameRE = /^\s*function ([^ (]*)/;
      var NAME = 'name'; // Function instances `.name` property
      // https://tc39.github.io/ecma262/#sec-function-instances-name

      if (DESCRIPTORS && !(NAME in FunctionPrototype)) {
        defineProperty(FunctionPrototype, NAME, {
          configurable: true,
          get: function get() {
            try {
              return FunctionPrototypeToString.call(this).match(nameRE)[1];
            } catch (error) {
              return '';
            }
          }
        });
      }
      /***/

    },
    /* 158 */

    /***/
    function (module, exports, __webpack_require__) {
      var toInteger = __webpack_require__(37);

      var requireObjectCoercible = __webpack_require__(34); // `String.prototype.{ codePointAt, at }` methods implementation


      var createMethod = function createMethod(CONVERT_TO_STRING) {
        return function ($this, pos) {
          var S = String(requireObjectCoercible($this));
          var position = toInteger(pos);
          var size = S.length;
          var first, second;
          if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;
          first = S.charCodeAt(position);
          return first < 0xD800 || first > 0xDBFF || position + 1 === size || (second = S.charCodeAt(position + 1)) < 0xDC00 || second > 0xDFFF ? CONVERT_TO_STRING ? S.charAt(position) : first : CONVERT_TO_STRING ? S.slice(position, position + 2) : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;
        };
      };

      module.exports = {
        // `String.prototype.codePointAt` method
        // https://tc39.github.io/ecma262/#sec-string.prototype.codepointat
        codeAt: createMethod(false),
        // `String.prototype.at` method
        // https://github.com/mathiasbynens/String.prototype.at
        charAt: createMethod(true)
      };
      /***/
    },
    /* 159 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var charAt = __webpack_require__(158).charAt;

      var InternalStateModule = __webpack_require__(35);

      var defineIterator = __webpack_require__(216);

      var STRING_ITERATOR = 'String Iterator';
      var setInternalState = InternalStateModule.set;
      var getInternalState = InternalStateModule.getterFor(STRING_ITERATOR); // `String.prototype[@@iterator]` method
      // https://tc39.github.io/ecma262/#sec-string.prototype-@@iterator

      defineIterator(String, 'String', function (iterated) {
        setInternalState(this, {
          type: STRING_ITERATOR,
          string: String(iterated),
          index: 0
        }); // `%StringIteratorPrototype%.next` method
        // https://tc39.github.io/ecma262/#sec-%stringiteratorprototype%.next
      }, function next() {
        var state = getInternalState(this);
        var string = state.string;
        var index = state.index;
        var point;
        if (index >= string.length) return {
          value: undefined,
          done: true
        };
        point = charAt(string, index);
        state.index += point.length;
        return {
          value: point,
          done: false
        };
      });
      /***/
    },
    /* 160 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var fixRegExpWellKnownSymbolLogic = __webpack_require__(161);

      var anObject = __webpack_require__(16);

      var toLength = __webpack_require__(8);

      var requireObjectCoercible = __webpack_require__(34);

      var advanceStringIndex = __webpack_require__(162);

      var regExpExec = __webpack_require__(163); // @@match logic


      fixRegExpWellKnownSymbolLogic('match', 1, function (MATCH, nativeMatch, maybeCallNative) {
        return [// `String.prototype.match` method
        // https://tc39.github.io/ecma262/#sec-string.prototype.match
        function match(regexp) {
          var O = requireObjectCoercible(this);
          var matcher = regexp == undefined ? undefined : regexp[MATCH];
          return matcher !== undefined ? matcher.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
        }, // `RegExp.prototype[@@match]` method
        // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match
        function (regexp) {
          var res = maybeCallNative(nativeMatch, regexp, this);
          if (res.done) return res.value;
          var rx = anObject(regexp);
          var S = String(this);
          if (!rx.global) return regExpExec(rx, S);
          var fullUnicode = rx.unicode;
          rx.lastIndex = 0;
          var A = [];
          var n = 0;
          var result;

          while ((result = regExpExec(rx, S)) !== null) {
            var matchStr = String(result[0]);
            A[n] = matchStr;
            if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
            n++;
          }

          return n === 0 ? null : A;
        }];
      });
      /***/
    },
    /* 161 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict"; // TODO: Remove from `core-js@4` since it's moved to entry points

      __webpack_require__(118);

      var redefine = __webpack_require__(25);

      var fails = __webpack_require__(4);

      var wellKnownSymbol = __webpack_require__(6);

      var regexpExec = __webpack_require__(119);

      var createNonEnumerableProperty = __webpack_require__(18);

      var SPECIES = wellKnownSymbol('species');
      var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {
        // #replace needs built-in support for named groups.
        // #match works fine because it just return the exec results, even if it has
        // a "grops" property.
        var re = /./;

        re.exec = function () {
          var result = [];
          result.groups = {
            a: '7'
          };
          return result;
        };

        return ''.replace(re, '$<a>') !== '7';
      }); // IE <= 11 replaces $0 with the whole match, as if it was $&
      // https://stackoverflow.com/questions/6024666/getting-ie-to-replace-a-regex-with-the-literal-string-0

      var REPLACE_KEEPS_$0 = function () {
        return 'a'.replace(/./, '$0') === '$0';
      }();

      var REPLACE = wellKnownSymbol('replace'); // Safari <= 13.0.3(?) substitutes nth capture where n>m with an empty string

      var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = function () {
        if (/./[REPLACE]) {
          return /./[REPLACE]('a', '$0') === '';
        }

        return false;
      }(); // Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
      // Weex JS has frozen built-in prototypes, so use try / catch wrapper


      var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails(function () {
        var re = /(?:)/;
        var originalExec = re.exec;

        re.exec = function () {
          return originalExec.apply(this, arguments);
        };

        var result = 'ab'.split(re);
        return result.length !== 2 || result[0] !== 'a' || result[1] !== 'b';
      });

      module.exports = function (KEY, length, exec, sham) {
        var SYMBOL = wellKnownSymbol(KEY);
        var DELEGATES_TO_SYMBOL = !fails(function () {
          // String methods call symbol-named RegEp methods
          var O = {};

          O[SYMBOL] = function () {
            return 7;
          };

          return ''[KEY](O) != 7;
        });
        var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails(function () {
          // Symbol-named RegExp methods call .exec
          var execCalled = false;
          var re = /a/;

          if (KEY === 'split') {
            // We can't use real regex here since it causes deoptimization
            // and serious performance degradation in V8
            // https://github.com/zloirock/core-js/issues/306
            re = {}; // RegExp[@@split] doesn't call the regex's exec method, but first creates
            // a new one. We need to return the patched regex when creating the new one.

            re.constructor = {};

            re.constructor[SPECIES] = function () {
              return re;
            };

            re.flags = '';
            re[SYMBOL] = /./[SYMBOL];
          }

          re.exec = function () {
            execCalled = true;
            return null;
          };

          re[SYMBOL]('');
          return !execCalled;
        });

        if (!DELEGATES_TO_SYMBOL || !DELEGATES_TO_EXEC || KEY === 'replace' && !(REPLACE_SUPPORTS_NAMED_GROUPS && REPLACE_KEEPS_$0 && !REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE) || KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC) {
          var nativeRegExpMethod = /./[SYMBOL];
          var methods = exec(SYMBOL, ''[KEY], function (nativeMethod, regexp, str, arg2, forceStringMethod) {
            if (regexp.exec === regexpExec) {
              if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
                // The native String method already delegates to @@method (this
                // polyfilled function), leasing to infinite recursion.
                // We avoid it by directly calling the native @@method method.
                return {
                  done: true,
                  value: nativeRegExpMethod.call(regexp, str, arg2)
                };
              }

              return {
                done: true,
                value: nativeMethod.call(str, regexp, arg2)
              };
            }

            return {
              done: false
            };
          }, {
            REPLACE_KEEPS_$0: REPLACE_KEEPS_$0,
            REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE: REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE
          });
          var stringMethod = methods[0];
          var regexMethod = methods[1];
          redefine(String.prototype, KEY, stringMethod);
          redefine(RegExp.prototype, SYMBOL, length == 2 // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
          // 21.2.5.11 RegExp.prototype[@@split](string, limit)
          ? function (string, arg) {
            return regexMethod.call(string, this, arg);
          } // 21.2.5.6 RegExp.prototype[@@match](string)
          // 21.2.5.9 RegExp.prototype[@@search](string)
          : function (string) {
            return regexMethod.call(string, this);
          });
        }

        if (sham) createNonEnumerableProperty(RegExp.prototype[SYMBOL], 'sham', true);
      };
      /***/

    },
    /* 162 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var charAt = __webpack_require__(158).charAt; // `AdvanceStringIndex` abstract operation
      // https://tc39.github.io/ecma262/#sec-advancestringindex


      module.exports = function (S, index, unicode) {
        return index + (unicode ? charAt(S, index).length : 1);
      };
      /***/

    },
    /* 163 */

    /***/
    function (module, exports, __webpack_require__) {
      var classof = __webpack_require__(30);

      var regexpExec = __webpack_require__(119); // `RegExpExec` abstract operation
      // https://tc39.github.io/ecma262/#sec-regexpexec


      module.exports = function (R, S) {
        var exec = R.exec;

        if (typeof exec === 'function') {
          var result = exec.call(R, S);

          if (_typeof4(result) !== 'object') {
            throw TypeError('RegExp exec method returned something other than an Object or null');
          }

          return result;
        }

        if (classof(R) !== 'RegExp') {
          throw TypeError('RegExp#exec called on incompatible receiver');
        }

        return regexpExec.call(R, S);
      };
      /***/

    },
    /* 164 */

    /***/
    function (module, exports, __webpack_require__) {
      exports = module.exports = __webpack_require__(240);
      exports.Stream = exports;
      exports.Readable = exports;
      exports.Writable = __webpack_require__(165);
      exports.Duplex = __webpack_require__(48);
      exports.Transform = __webpack_require__(243);
      exports.PassThrough = __webpack_require__(345);
      /***/
    },
    /* 165 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";
      /* WEBPACK VAR INJECTION */

      (function (process, global) {
        // Copyright Joyent, Inc. and other Node contributors.
        //
        // Permission is hereby granted, free of charge, to any person obtaining a
        // copy of this software and associated documentation files (the
        // "Software"), to deal in the Software without restriction, including
        // without limitation the rights to use, copy, modify, merge, publish,
        // distribute, sublicense, and/or sell copies of the Software, and to permit
        // persons to whom the Software is furnished to do so, subject to the
        // following conditions:
        //
        // The above copyright notice and this permission notice shall be included
        // in all copies or substantial portions of the Software.
        //
        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
        // USE OR OTHER DEALINGS IN THE SOFTWARE.
        // A bit simpler than readable streams.
        // Implement an async ._write(chunk, encoding, cb), and it'll handle all
        // the drain event emission and buffering.

        /*<replacement>*/
        var pna = __webpack_require__(123);
        /*</replacement>*/


        module.exports = Writable;
        /* <replacement> */

        function WriteReq(chunk, encoding, cb) {
          this.chunk = chunk;
          this.encoding = encoding;
          this.callback = cb;
          this.next = null;
        } // It seems a linked list but it is not
        // there will be only 2 of these for each stream


        function CorkedRequest(state) {
          var _this = this;

          this.next = null;
          this.entry = null;

          this.finish = function () {
            onCorkedFinish(_this, state);
          };
        }
        /* </replacement> */

        /*<replacement>*/


        var asyncWrite = !true && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;
        /*</replacement>*/

        /*<replacement>*/

        var Duplex;
        /*</replacement>*/

        Writable.WritableState = WritableState;
        /*<replacement>*/

        var util = Object.create(__webpack_require__(98));
        util.inherits = __webpack_require__(86);
        /*</replacement>*/

        /*<replacement>*/

        var internalUtil = {
          deprecate: __webpack_require__(344)
        };
        /*</replacement>*/

        /*<replacement>*/

        var Stream = __webpack_require__(241);
        /*</replacement>*/

        /*<replacement>*/


        var Buffer = __webpack_require__(124).Buffer;

        var OurUint8Array = global.Uint8Array || function () {};

        function _uint8ArrayToBuffer(chunk) {
          return Buffer.from(chunk);
        }

        function _isUint8Array(obj) {
          return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
        }
        /*</replacement>*/


        var destroyImpl = __webpack_require__(242);

        util.inherits(Writable, Stream);

        function nop() {}

        function WritableState(options, stream) {
          Duplex = Duplex || __webpack_require__(48);
          options = options || {}; // Duplex streams are both readable and writable, but share
          // the same options object.
          // However, some cases require setting options to different
          // values for the readable and the writable sides of the duplex stream.
          // These options can be provided separately as readableXXX and writableXXX.

          var isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream
          // contains buffers or objects.

          this.objectMode = !!options.objectMode;
          if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
          // Note: 0 is a valid value, means that we always return false if
          // the entire buffer is not flushed immediately on write()

          var hwm = options.highWaterMark;
          var writableHwm = options.writableHighWaterMark;
          var defaultHwm = this.objectMode ? 16 : 16 * 1024;
          if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm; // cast to ints.

          this.highWaterMark = Math.floor(this.highWaterMark); // if _final has been called

          this.finalCalled = false; // drain event flag.

          this.needDrain = false; // at the start of calling end()

          this.ending = false; // when end() has been called, and returned

          this.ended = false; // when 'finish' is emitted

          this.finished = false; // has it been destroyed

          this.destroyed = false; // should we decode strings into buffers before passing to _write?
          // this is here so that some node-core streams can optimize string
          // handling at a lower level.

          var noDecode = options.decodeStrings === false;
          this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
          // encoding is 'binary' so we have to make this configurable.
          // Everything else in the universe uses 'utf8', though.

          this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
          // of how much we're waiting to get pushed to some underlying
          // socket or file.

          this.length = 0; // a flag to see when we're in the middle of a write.

          this.writing = false; // when true all writes will be buffered until .uncork() call

          this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
          // or on a later tick.  We set this to true at first, because any
          // actions that shouldn't happen until "later" should generally also
          // not happen before the first write call.

          this.sync = true; // a flag to know if we're processing previously buffered items, which
          // may call the _write() callback in the same tick, so that we don't
          // end up in an overlapped onwrite situation.

          this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)

          this.onwrite = function (er) {
            onwrite(stream, er);
          }; // the callback that the user supplies to write(chunk,encoding,cb)


          this.writecb = null; // the amount that is being written when _write is called.

          this.writelen = 0;
          this.bufferedRequest = null;
          this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
          // this must be 0 before 'finish' can be emitted

          this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
          // This is relevant for synchronous Transform streams

          this.prefinished = false; // True if the error was already emitted and should not be thrown again

          this.errorEmitted = false; // count buffered requests

          this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
          // one allocated and free to use, and we maintain at most two

          this.corkedRequestsFree = new CorkedRequest(this);
        }

        WritableState.prototype.getBuffer = function getBuffer() {
          var current = this.bufferedRequest;
          var out = [];

          while (current) {
            out.push(current);
            current = current.next;
          }

          return out;
        };

        (function () {
          try {
            Object.defineProperty(WritableState.prototype, 'buffer', {
              get: internalUtil.deprecate(function () {
                return this.getBuffer();
              }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
            });
          } catch (_) {}
        })(); // Test _writableState for inheritance to account for Duplex streams,
        // whose prototype chain only points to Readable.


        var realHasInstance;

        if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
          realHasInstance = Function.prototype[Symbol.hasInstance];
          Object.defineProperty(Writable, Symbol.hasInstance, {
            value: function value(object) {
              if (realHasInstance.call(this, object)) return true;
              if (this !== Writable) return false;
              return object && object._writableState instanceof WritableState;
            }
          });
        } else {
          realHasInstance = function realHasInstance(object) {
            return object instanceof this;
          };
        }

        function Writable(options) {
          Duplex = Duplex || __webpack_require__(48); // Writable ctor is applied to Duplexes, too.
          // `realHasInstance` is necessary because using plain `instanceof`
          // would return false, as no `_writableState` property is attached.
          // Trying to use the custom `instanceof` for Writable here will also break the
          // Node.js LazyTransform implementation, which has a non-trivial getter for
          // `_writableState` that would lead to infinite recursion.

          if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
            return new Writable(options);
          }

          this._writableState = new WritableState(options, this); // legacy.

          this.writable = true;

          if (options) {
            if (typeof options.write === 'function') this._write = options.write;
            if (typeof options.writev === 'function') this._writev = options.writev;
            if (typeof options.destroy === 'function') this._destroy = options.destroy;
            if (typeof options.final === 'function') this._final = options.final;
          }

          Stream.call(this);
        } // Otherwise people can pipe Writable streams, which is just wrong.


        Writable.prototype.pipe = function () {
          this.emit('error', new Error('Cannot pipe, not readable'));
        };

        function writeAfterEnd(stream, cb) {
          var er = new Error('write after end'); // TODO: defer error events consistently everywhere, not just the cb

          stream.emit('error', er);
          pna.nextTick(cb, er);
        } // Checks that a user-supplied chunk is valid, especially for the particular
        // mode the stream is in. Currently this means that `null` is never accepted
        // and undefined/non-string values are only allowed in object mode.


        function validChunk(stream, state, chunk, cb) {
          var valid = true;
          var er = false;

          if (chunk === null) {
            er = new TypeError('May not write null values to stream');
          } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
            er = new TypeError('Invalid non-string/buffer chunk');
          }

          if (er) {
            stream.emit('error', er);
            pna.nextTick(cb, er);
            valid = false;
          }

          return valid;
        }

        Writable.prototype.write = function (chunk, encoding, cb) {
          var state = this._writableState;
          var ret = false;

          var isBuf = !state.objectMode && _isUint8Array(chunk);

          if (isBuf && !Buffer.isBuffer(chunk)) {
            chunk = _uint8ArrayToBuffer(chunk);
          }

          if (typeof encoding === 'function') {
            cb = encoding;
            encoding = null;
          }

          if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
          if (typeof cb !== 'function') cb = nop;
          if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
            state.pendingcb++;
            ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
          }
          return ret;
        };

        Writable.prototype.cork = function () {
          var state = this._writableState;
          state.corked++;
        };

        Writable.prototype.uncork = function () {
          var state = this._writableState;

          if (state.corked) {
            state.corked--;
            if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
          }
        };

        Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
          // node::ParseEncoding() requires lower case.
          if (typeof encoding === 'string') encoding = encoding.toLowerCase();
          if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
          this._writableState.defaultEncoding = encoding;
          return this;
        };

        function decodeChunk(state, chunk, encoding) {
          if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
            chunk = Buffer.from(chunk, encoding);
          }

          return chunk;
        }

        Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
          // making it explicit this property is not enumerable
          // because otherwise some prototype manipulation in
          // userland will fail
          enumerable: false,
          get: function get() {
            return this._writableState.highWaterMark;
          }
        }); // if we're already writing something, then just put this
        // in the queue, and wait our turn.  Otherwise, call _write
        // If we return false, then we need a drain event, so set that flag.

        function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
          if (!isBuf) {
            var newChunk = decodeChunk(state, chunk, encoding);

            if (chunk !== newChunk) {
              isBuf = true;
              encoding = 'buffer';
              chunk = newChunk;
            }
          }

          var len = state.objectMode ? 1 : chunk.length;
          state.length += len;
          var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.

          if (!ret) state.needDrain = true;

          if (state.writing || state.corked) {
            var last = state.lastBufferedRequest;
            state.lastBufferedRequest = {
              chunk: chunk,
              encoding: encoding,
              isBuf: isBuf,
              callback: cb,
              next: null
            };

            if (last) {
              last.next = state.lastBufferedRequest;
            } else {
              state.bufferedRequest = state.lastBufferedRequest;
            }

            state.bufferedRequestCount += 1;
          } else {
            doWrite(stream, state, false, len, chunk, encoding, cb);
          }

          return ret;
        }

        function doWrite(stream, state, writev, len, chunk, encoding, cb) {
          state.writelen = len;
          state.writecb = cb;
          state.writing = true;
          state.sync = true;
          if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
          state.sync = false;
        }

        function onwriteError(stream, state, sync, er, cb) {
          --state.pendingcb;

          if (sync) {
            // defer the callback if we are being called synchronously
            // to avoid piling up things on the stack
            pna.nextTick(cb, er); // this can emit finish, and it will always happen
            // after error

            pna.nextTick(finishMaybe, stream, state);
            stream._writableState.errorEmitted = true;
            stream.emit('error', er);
          } else {
            // the caller expect this to happen before if
            // it is async
            cb(er);
            stream._writableState.errorEmitted = true;
            stream.emit('error', er); // this can emit finish, but finish must
            // always follow error

            finishMaybe(stream, state);
          }
        }

        function onwriteStateUpdate(state) {
          state.writing = false;
          state.writecb = null;
          state.length -= state.writelen;
          state.writelen = 0;
        }

        function onwrite(stream, er) {
          var state = stream._writableState;
          var sync = state.sync;
          var cb = state.writecb;
          onwriteStateUpdate(state);
          if (er) onwriteError(stream, state, sync, er, cb);else {
            // Check if we're actually ready to finish, but don't emit yet
            var finished = needFinish(state);

            if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
              clearBuffer(stream, state);
            }

            if (sync) {
              /*<replacement>*/
              asyncWrite(afterWrite, stream, state, finished, cb);
              /*</replacement>*/
            } else {
              afterWrite(stream, state, finished, cb);
            }
          }
        }

        function afterWrite(stream, state, finished, cb) {
          if (!finished) onwriteDrain(stream, state);
          state.pendingcb--;
          cb();
          finishMaybe(stream, state);
        } // Must force callback to be called on nextTick, so that we don't
        // emit 'drain' before the write() consumer gets the 'false' return
        // value, and has a chance to attach a 'drain' listener.


        function onwriteDrain(stream, state) {
          if (state.length === 0 && state.needDrain) {
            state.needDrain = false;
            stream.emit('drain');
          }
        } // if there's something in the buffer waiting, then process it


        function clearBuffer(stream, state) {
          state.bufferProcessing = true;
          var entry = state.bufferedRequest;

          if (stream._writev && entry && entry.next) {
            // Fast case, write everything using _writev()
            var l = state.bufferedRequestCount;
            var buffer = new Array(l);
            var holder = state.corkedRequestsFree;
            holder.entry = entry;
            var count = 0;
            var allBuffers = true;

            while (entry) {
              buffer[count] = entry;
              if (!entry.isBuf) allBuffers = false;
              entry = entry.next;
              count += 1;
            }

            buffer.allBuffers = allBuffers;
            doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
            // as the hot path ends with doWrite

            state.pendingcb++;
            state.lastBufferedRequest = null;

            if (holder.next) {
              state.corkedRequestsFree = holder.next;
              holder.next = null;
            } else {
              state.corkedRequestsFree = new CorkedRequest(state);
            }

            state.bufferedRequestCount = 0;
          } else {
            // Slow case, write chunks one-by-one
            while (entry) {
              var chunk = entry.chunk;
              var encoding = entry.encoding;
              var cb = entry.callback;
              var len = state.objectMode ? 1 : chunk.length;
              doWrite(stream, state, false, len, chunk, encoding, cb);
              entry = entry.next;
              state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
              // it means that we need to wait until it does.
              // also, that means that the chunk and cb are currently
              // being processed, so move the buffer counter past them.

              if (state.writing) {
                break;
              }
            }

            if (entry === null) state.lastBufferedRequest = null;
          }

          state.bufferedRequest = entry;
          state.bufferProcessing = false;
        }

        Writable.prototype._write = function (chunk, encoding, cb) {
          cb(new Error('_write() is not implemented'));
        };

        Writable.prototype._writev = null;

        Writable.prototype.end = function (chunk, encoding, cb) {
          var state = this._writableState;

          if (typeof chunk === 'function') {
            cb = chunk;
            chunk = null;
            encoding = null;
          } else if (typeof encoding === 'function') {
            cb = encoding;
            encoding = null;
          }

          if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks

          if (state.corked) {
            state.corked = 1;
            this.uncork();
          } // ignore unnecessary end() calls.


          if (!state.ending && !state.finished) endWritable(this, state, cb);
        };

        function needFinish(state) {
          return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
        }

        function callFinal(stream, state) {
          stream._final(function (err) {
            state.pendingcb--;

            if (err) {
              stream.emit('error', err);
            }

            state.prefinished = true;
            stream.emit('prefinish');
            finishMaybe(stream, state);
          });
        }

        function prefinish(stream, state) {
          if (!state.prefinished && !state.finalCalled) {
            if (typeof stream._final === 'function') {
              state.pendingcb++;
              state.finalCalled = true;
              pna.nextTick(callFinal, stream, state);
            } else {
              state.prefinished = true;
              stream.emit('prefinish');
            }
          }
        }

        function finishMaybe(stream, state) {
          var need = needFinish(state);

          if (need) {
            prefinish(stream, state);

            if (state.pendingcb === 0) {
              state.finished = true;
              stream.emit('finish');
            }
          }

          return need;
        }

        function endWritable(stream, state, cb) {
          state.ending = true;
          finishMaybe(stream, state);

          if (cb) {
            if (state.finished) pna.nextTick(cb);else stream.once('finish', cb);
          }

          state.ended = true;
          stream.writable = false;
        }

        function onCorkedFinish(corkReq, state, err) {
          var entry = corkReq.entry;
          corkReq.entry = null;

          while (entry) {
            var cb = entry.callback;
            state.pendingcb--;
            cb(err);
            entry = entry.next;
          }

          if (state.corkedRequestsFree) {
            state.corkedRequestsFree.next = corkReq;
          } else {
            state.corkedRequestsFree = corkReq;
          }
        }

        Object.defineProperty(Writable.prototype, 'destroyed', {
          get: function get() {
            if (this._writableState === undefined) {
              return false;
            }

            return this._writableState.destroyed;
          },
          set: function set(value) {
            // we ignore the value if the stream
            // has not been initialized yet
            if (!this._writableState) {
              return;
            } // backward compatibility, the user is explicitly
            // managing destroyed


            this._writableState.destroyed = value;
          }
        });
        Writable.prototype.destroy = destroyImpl.destroy;
        Writable.prototype._undestroy = destroyImpl.undestroy;

        Writable.prototype._destroy = function (err, cb) {
          this.end();
          cb(err);
        };
        /* WEBPACK VAR INJECTION */

      }).call(this, __webpack_require__(47), __webpack_require__(24));
      /***/
    },
    /* 166 */

    /***/
    function (module, exports, __webpack_require__) {
      /* WEBPACK VAR INJECTION */
      (function (process) {
        // Copyright Joyent, Inc. and other Node contributors.
        //
        // Permission is hereby granted, free of charge, to any person obtaining a
        // copy of this software and associated documentation files (the
        // "Software"), to deal in the Software without restriction, including
        // without limitation the rights to use, copy, modify, merge, publish,
        // distribute, sublicense, and/or sell copies of the Software, and to permit
        // persons to whom the Software is furnished to do so, subject to the
        // following conditions:
        //
        // The above copyright notice and this permission notice shall be included
        // in all copies or substantial portions of the Software.
        //
        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
        // USE OR OTHER DEALINGS IN THE SOFTWARE.
        var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors(obj) {
          var keys = Object.keys(obj);
          var descriptors = {};

          for (var i = 0; i < keys.length; i++) {
            descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
          }

          return descriptors;
        };

        var formatRegExp = /%[sdj%]/g;

        exports.format = function (f) {
          if (!isString(f)) {
            var objects = [];

            for (var i = 0; i < arguments.length; i++) {
              objects.push(inspect(arguments[i]));
            }

            return objects.join(' ');
          }

          var i = 1;
          var args = arguments;
          var len = args.length;
          var str = String(f).replace(formatRegExp, function (x) {
            if (x === '%%') return '%';
            if (i >= len) return x;

            switch (x) {
              case '%s':
                return String(args[i++]);

              case '%d':
                return Number(args[i++]);

              case '%j':
                try {
                  return JSON.stringify(args[i++]);
                } catch (_) {
                  return '[Circular]';
                }

              default:
                return x;
            }
          });

          for (var x = args[i]; i < len; x = args[++i]) {
            if (isNull(x) || !isObject(x)) {
              str += ' ' + x;
            } else {
              str += ' ' + inspect(x);
            }
          }

          return str;
        }; // Mark that a method should not be used.
        // Returns a modified function which warns once by default.
        // If --no-deprecation is set, then it is a no-op.


        exports.deprecate = function (fn, msg) {
          if (typeof process !== 'undefined' && process.noDeprecation === true) {
            return fn;
          } // Allow for deprecating things in the process of starting up.


          if (typeof process === 'undefined') {
            return function () {
              return exports.deprecate(fn, msg).apply(this, arguments);
            };
          }

          var warned = false;

          function deprecated() {
            if (!warned) {
              if (process.throwDeprecation) {
                throw new Error(msg);
              } else if (process.traceDeprecation) {
                console.trace(msg);
              } else {
                console.error(msg);
              }

              warned = true;
            }

            return fn.apply(this, arguments);
          }

          return deprecated;
        };

        var debugs = {};
        var debugEnviron;

        exports.debuglog = function (set) {
          if (isUndefined(debugEnviron)) debugEnviron = undefined || '';
          set = set.toUpperCase();

          if (!debugs[set]) {
            if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
              var pid = process.pid;

              debugs[set] = function () {
                var msg = exports.format.apply(exports, arguments);
                console.error('%s %d: %s', set, pid, msg);
              };
            } else {
              debugs[set] = function () {};
            }
          }

          return debugs[set];
        };
        /**
         * Echos the value of a value. Trys to print the value out
         * in the best way possible given the different types.
         *
         * @param {Object} obj The object to print out.
         * @param {Object} opts Optional options object that alters the output.
         */

        /* legacy: obj, showHidden, depth, colors*/


        function inspect(obj, opts) {
          // default options
          var ctx = {
            seen: [],
            stylize: stylizeNoColor
          }; // legacy...

          if (arguments.length >= 3) ctx.depth = arguments[2];
          if (arguments.length >= 4) ctx.colors = arguments[3];

          if (isBoolean(opts)) {
            // legacy...
            ctx.showHidden = opts;
          } else if (opts) {
            // got an "options" object
            exports._extend(ctx, opts);
          } // set default options


          if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
          if (isUndefined(ctx.depth)) ctx.depth = 2;
          if (isUndefined(ctx.colors)) ctx.colors = false;
          if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
          if (ctx.colors) ctx.stylize = stylizeWithColor;
          return formatValue(ctx, obj, ctx.depth);
        }

        exports.inspect = inspect; // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics

        inspect.colors = {
          'bold': [1, 22],
          'italic': [3, 23],
          'underline': [4, 24],
          'inverse': [7, 27],
          'white': [37, 39],
          'grey': [90, 39],
          'black': [30, 39],
          'blue': [34, 39],
          'cyan': [36, 39],
          'green': [32, 39],
          'magenta': [35, 39],
          'red': [31, 39],
          'yellow': [33, 39]
        }; // Don't use 'blue' not visible on cmd.exe

        inspect.styles = {
          'special': 'cyan',
          'number': 'yellow',
          'boolean': 'yellow',
          'undefined': 'grey',
          'null': 'bold',
          'string': 'green',
          'date': 'magenta',
          // "name": intentionally not styling
          'regexp': 'red'
        };

        function stylizeWithColor(str, styleType) {
          var style = inspect.styles[styleType];

          if (style) {
            return "\x1B[" + inspect.colors[style][0] + 'm' + str + "\x1B[" + inspect.colors[style][1] + 'm';
          } else {
            return str;
          }
        }

        function stylizeNoColor(str, styleType) {
          return str;
        }

        function arrayToHash(array) {
          var hash = {};
          array.forEach(function (val, idx) {
            hash[val] = true;
          });
          return hash;
        }

        function formatValue(ctx, value, recurseTimes) {
          // Provide a hook for user-specified inspect functions.
          // Check that value is an object with an inspect function on it
          if (ctx.customInspect && value && isFunction(value.inspect) && // Filter out the util module, it's inspect function is special
          value.inspect !== exports.inspect && // Also filter out any prototype objects using the circular check.
          !(value.constructor && value.constructor.prototype === value)) {
            var ret = value.inspect(recurseTimes, ctx);

            if (!isString(ret)) {
              ret = formatValue(ctx, ret, recurseTimes);
            }

            return ret;
          } // Primitive types cannot have properties


          var primitive = formatPrimitive(ctx, value);

          if (primitive) {
            return primitive;
          } // Look up the keys of the object.


          var keys = Object.keys(value);
          var visibleKeys = arrayToHash(keys);

          if (ctx.showHidden) {
            keys = Object.getOwnPropertyNames(value);
          } // IE doesn't make error fields non-enumerable
          // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx


          if (isError(value) && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
            return formatError(value);
          } // Some type of object without properties can be shortcutted.


          if (keys.length === 0) {
            if (isFunction(value)) {
              var name = value.name ? ': ' + value.name : '';
              return ctx.stylize('[Function' + name + ']', 'special');
            }

            if (isRegExp(value)) {
              return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
            }

            if (isDate(value)) {
              return ctx.stylize(Date.prototype.toString.call(value), 'date');
            }

            if (isError(value)) {
              return formatError(value);
            }
          }

          var base = '',
              array = false,
              braces = ['{', '}']; // Make Array say that they are Array

          if (isArray(value)) {
            array = true;
            braces = ['[', ']'];
          } // Make functions say that they are functions


          if (isFunction(value)) {
            var n = value.name ? ': ' + value.name : '';
            base = ' [Function' + n + ']';
          } // Make RegExps say that they are RegExps


          if (isRegExp(value)) {
            base = ' ' + RegExp.prototype.toString.call(value);
          } // Make dates with properties first say the date


          if (isDate(value)) {
            base = ' ' + Date.prototype.toUTCString.call(value);
          } // Make error with message first say the error


          if (isError(value)) {
            base = ' ' + formatError(value);
          }

          if (keys.length === 0 && (!array || value.length == 0)) {
            return braces[0] + base + braces[1];
          }

          if (recurseTimes < 0) {
            if (isRegExp(value)) {
              return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
            } else {
              return ctx.stylize('[Object]', 'special');
            }
          }

          ctx.seen.push(value);
          var output;

          if (array) {
            output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
          } else {
            output = keys.map(function (key) {
              return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
            });
          }

          ctx.seen.pop();
          return reduceToSingleString(output, base, braces);
        }

        function formatPrimitive(ctx, value) {
          if (isUndefined(value)) return ctx.stylize('undefined', 'undefined');

          if (isString(value)) {
            var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + '\'';
            return ctx.stylize(simple, 'string');
          }

          if (isNumber(value)) return ctx.stylize('' + value, 'number');
          if (isBoolean(value)) return ctx.stylize('' + value, 'boolean'); // For some reason typeof null is "object", so special case here.

          if (isNull(value)) return ctx.stylize('null', 'null');
        }

        function formatError(value) {
          return '[' + Error.prototype.toString.call(value) + ']';
        }

        function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
          var output = [];

          for (var i = 0, l = value.length; i < l; ++i) {
            if (hasOwnProperty(value, String(i))) {
              output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
            } else {
              output.push('');
            }
          }

          keys.forEach(function (key) {
            if (!key.match(/^\d+$/)) {
              output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
            }
          });
          return output;
        }

        function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
          var name, str, desc;
          desc = Object.getOwnPropertyDescriptor(value, key) || {
            value: value[key]
          };

          if (desc.get) {
            if (desc.set) {
              str = ctx.stylize('[Getter/Setter]', 'special');
            } else {
              str = ctx.stylize('[Getter]', 'special');
            }
          } else {
            if (desc.set) {
              str = ctx.stylize('[Setter]', 'special');
            }
          }

          if (!hasOwnProperty(visibleKeys, key)) {
            name = '[' + key + ']';
          }

          if (!str) {
            if (ctx.seen.indexOf(desc.value) < 0) {
              if (isNull(recurseTimes)) {
                str = formatValue(ctx, desc.value, null);
              } else {
                str = formatValue(ctx, desc.value, recurseTimes - 1);
              }

              if (str.indexOf('\n') > -1) {
                if (array) {
                  str = str.split('\n').map(function (line) {
                    return '  ' + line;
                  }).join('\n').substr(2);
                } else {
                  str = '\n' + str.split('\n').map(function (line) {
                    return '   ' + line;
                  }).join('\n');
                }
              }
            } else {
              str = ctx.stylize('[Circular]', 'special');
            }
          }

          if (isUndefined(name)) {
            if (array && key.match(/^\d+$/)) {
              return str;
            }

            name = JSON.stringify('' + key);

            if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
              name = name.substr(1, name.length - 2);
              name = ctx.stylize(name, 'name');
            } else {
              name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
              name = ctx.stylize(name, 'string');
            }
          }

          return name + ': ' + str;
        }

        function reduceToSingleString(output, base, braces) {
          var numLinesEst = 0;
          var length = output.reduce(function (prev, cur) {
            numLinesEst++;
            if (cur.indexOf('\n') >= 0) numLinesEst++;
            return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
          }, 0);

          if (length > 60) {
            return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
          }

          return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
        } // NOTE: These type checking functions intentionally don't use `instanceof`
        // because it is fragile and can be easily faked with `Object.create()`.


        function isArray(ar) {
          return Array.isArray(ar);
        }

        exports.isArray = isArray;

        function isBoolean(arg) {
          return typeof arg === 'boolean';
        }

        exports.isBoolean = isBoolean;

        function isNull(arg) {
          return arg === null;
        }

        exports.isNull = isNull;

        function isNullOrUndefined(arg) {
          return arg == null;
        }

        exports.isNullOrUndefined = isNullOrUndefined;

        function isNumber(arg) {
          return typeof arg === 'number';
        }

        exports.isNumber = isNumber;

        function isString(arg) {
          return typeof arg === 'string';
        }

        exports.isString = isString;

        function isSymbol(arg) {
          return _typeof4(arg) === 'symbol';
        }

        exports.isSymbol = isSymbol;

        function isUndefined(arg) {
          return arg === void 0;
        }

        exports.isUndefined = isUndefined;

        function isRegExp(re) {
          return isObject(re) && objectToString(re) === '[object RegExp]';
        }

        exports.isRegExp = isRegExp;

        function isObject(arg) {
          return _typeof4(arg) === 'object' && arg !== null;
        }

        exports.isObject = isObject;

        function isDate(d) {
          return isObject(d) && objectToString(d) === '[object Date]';
        }

        exports.isDate = isDate;

        function isError(e) {
          return isObject(e) && (objectToString(e) === '[object Error]' || e instanceof Error);
        }

        exports.isError = isError;

        function isFunction(arg) {
          return typeof arg === 'function';
        }

        exports.isFunction = isFunction;

        function isPrimitive(arg) {
          return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || _typeof4(arg) === 'symbol' || // ES6 symbol
          typeof arg === 'undefined';
        }

        exports.isPrimitive = isPrimitive;
        exports.isBuffer = __webpack_require__(352);

        function objectToString(o) {
          return Object.prototype.toString.call(o);
        }

        function pad(n) {
          return n < 10 ? '0' + n.toString(10) : n.toString(10);
        }

        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']; // 26 Feb 16:19:34

        function timestamp() {
          var d = new Date();
          var time = [pad(d.getHours()), pad(d.getMinutes()), pad(d.getSeconds())].join(':');
          return [d.getDate(), months[d.getMonth()], time].join(' ');
        } // log is just a thin wrapper to console.log that prepends a timestamp


        exports.log = function () {
          console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
        };
        /**
         * Inherit the prototype methods from one constructor into another.
         *
         * The Function.prototype.inherits from lang.js rewritten as a standalone
         * function (not on Function.prototype). NOTE: If this file is to be loaded
         * during bootstrapping this function needs to be rewritten using some native
         * functions as prototype setup using normal JavaScript does not work as
         * expected during bootstrapping (see mirror.js in r114903).
         *
         * @param {function} ctor Constructor function which needs to inherit the
         *     prototype.
         * @param {function} superCtor Constructor function to inherit prototype from.
         */


        exports.inherits = __webpack_require__(353);

        exports._extend = function (origin, add) {
          // Don't do anything if add isn't an object
          if (!add || !isObject(add)) return origin;
          var keys = Object.keys(add);
          var i = keys.length;

          while (i--) {
            origin[keys[i]] = add[keys[i]];
          }

          return origin;
        };

        function hasOwnProperty(obj, prop) {
          return Object.prototype.hasOwnProperty.call(obj, prop);
        }

        var kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;

        exports.promisify = function promisify(original) {
          if (typeof original !== 'function') throw new TypeError('The "original" argument must be of type Function');

          if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
            var fn = original[kCustomPromisifiedSymbol];

            if (typeof fn !== 'function') {
              throw new TypeError('The "util.promisify.custom" argument must be of type Function');
            }

            Object.defineProperty(fn, kCustomPromisifiedSymbol, {
              value: fn,
              enumerable: false,
              writable: false,
              configurable: true
            });
            return fn;
          }

          function fn() {
            var promiseResolve, promiseReject;
            var promise = new Promise(function (resolve, reject) {
              promiseResolve = resolve;
              promiseReject = reject;
            });
            var args = [];

            for (var i = 0; i < arguments.length; i++) {
              args.push(arguments[i]);
            }

            args.push(function (err, value) {
              if (err) {
                promiseReject(err);
              } else {
                promiseResolve(value);
              }
            });

            try {
              original.apply(this, args);
            } catch (err) {
              promiseReject(err);
            }

            return promise;
          }

          Object.setPrototypeOf(fn, Object.getPrototypeOf(original));
          if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
            value: fn,
            enumerable: false,
            writable: false,
            configurable: true
          });
          return Object.defineProperties(fn, getOwnPropertyDescriptors(original));
        };

        exports.promisify.custom = kCustomPromisifiedSymbol;

        function callbackifyOnRejected(reason, cb) {
          // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).
          // Because `null` is a special error value in callbacks which means "no error
          // occurred", we error-wrap so the callback consumer can distinguish between
          // "the promise rejected with null" or "the promise fulfilled with undefined".
          if (!reason) {
            var newReason = new Error('Promise was rejected with a falsy value');
            newReason.reason = reason;
            reason = newReason;
          }

          return cb(reason);
        }

        function callbackify(original) {
          if (typeof original !== 'function') {
            throw new TypeError('The "original" argument must be of type Function');
          } // We DO NOT return the promise as it gives the user a false sense that
          // the promise is actually somehow related to the callback's execution
          // and that the callback throwing will reject the promise.


          function callbackified() {
            var args = [];

            for (var i = 0; i < arguments.length; i++) {
              args.push(arguments[i]);
            }

            var maybeCb = args.pop();

            if (typeof maybeCb !== 'function') {
              throw new TypeError('The last argument must be of type Function');
            }

            var self = this;

            var cb = function cb() {
              return maybeCb.apply(self, arguments);
            }; // In true node style we process the callback on `nextTick` with all the
            // implications (stack, `uncaughtException`, `async_hooks`)


            original.apply(this, args).then(function (ret) {
              process.nextTick(cb, null, ret);
            }, function (rej) {
              process.nextTick(callbackifyOnRejected, rej, cb);
            });
          }

          Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
          Object.defineProperties(callbackified, getOwnPropertyDescriptors(original));
          return callbackified;
        }

        exports.callbackify = callbackify;
        /* WEBPACK VAR INJECTION */
      }).call(this, __webpack_require__(47));
      /***/
    },
    /* 167 */

    /***/
    function (module, exports, __webpack_require__) {
      ;

      (function (root, factory) {
        if (true) {
          // CommonJS
          module.exports = exports = factory(__webpack_require__(2));
        } else {}
      })(this, function (CryptoJS) {
        (function () {
          // Shortcuts
          var C = CryptoJS;
          var C_lib = C.lib;
          var WordArray = C_lib.WordArray;
          var Hasher = C_lib.Hasher;
          var C_algo = C.algo; // Reusable object

          var W = [];
          /**
           * SHA-1 hash algorithm.
           */

          var SHA1 = C_algo.SHA1 = Hasher.extend({
            _doReset: function _doReset() {
              this._hash = new WordArray.init([0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0]);
            },
            _doProcessBlock: function _doProcessBlock(M, offset) {
              // Shortcut
              var H = this._hash.words; // Working variables

              var a = H[0];
              var b = H[1];
              var c = H[2];
              var d = H[3];
              var e = H[4]; // Computation

              for (var i = 0; i < 80; i++) {
                if (i < 16) {
                  W[i] = M[offset + i] | 0;
                } else {
                  var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
                  W[i] = n << 1 | n >>> 31;
                }

                var t = (a << 5 | a >>> 27) + e + W[i];

                if (i < 20) {
                  t += (b & c | ~b & d) + 0x5a827999;
                } else if (i < 40) {
                  t += (b ^ c ^ d) + 0x6ed9eba1;
                } else if (i < 60) {
                  t += (b & c | b & d | c & d) - 0x70e44324;
                } else
                  /* if (i < 80) */
                  {
                    t += (b ^ c ^ d) - 0x359d3e2a;
                  }

                e = d;
                d = c;
                c = b << 30 | b >>> 2;
                b = a;
                a = t;
              } // Intermediate hash value


              H[0] = H[0] + a | 0;
              H[1] = H[1] + b | 0;
              H[2] = H[2] + c | 0;
              H[3] = H[3] + d | 0;
              H[4] = H[4] + e | 0;
            },
            _doFinalize: function _doFinalize() {
              // Shortcuts
              var data = this._data;
              var dataWords = data.words;
              var nBitsTotal = this._nDataBytes * 8;
              var nBitsLeft = data.sigBytes * 8; // Add padding

              dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;
              dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
              dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
              data.sigBytes = dataWords.length * 4; // Hash final blocks

              this._process(); // Return final computed hash


              return this._hash;
            },
            clone: function clone() {
              var clone = Hasher.clone.call(this);
              clone._hash = this._hash.clone();
              return clone;
            }
          });
          /**
           * Shortcut function to the hasher's object interface.
           *
           * @param {WordArray|string} message The message to hash.
           *
           * @return {WordArray} The hash.
           *
           * @static
           *
           * @example
           *
           *     var hash = CryptoJS.SHA1('message');
           *     var hash = CryptoJS.SHA1(wordArray);
           */

          C.SHA1 = Hasher._createHelper(SHA1);
          /**
           * Shortcut function to the HMAC's object interface.
           *
           * @param {WordArray|string} message The message to hash.
           * @param {WordArray|string} key The secret key.
           *
           * @return {WordArray} The HMAC.
           *
           * @static
           *
           * @example
           *
           *     var hmac = CryptoJS.HmacSHA1(message, key);
           */

          C.HmacSHA1 = Hasher._createHmacHelper(SHA1);
        })();

        return CryptoJS.SHA1;
      });
      /***/

    },
    /* 168 */

    /***/
    function (module, exports, __webpack_require__) {
      ;

      (function (root, factory) {
        if (true) {
          // CommonJS
          module.exports = exports = factory(__webpack_require__(2));
        } else {}
      })(this, function (CryptoJS) {
        (function () {
          // Shortcuts
          var C = CryptoJS;
          var C_lib = C.lib;
          var Base = C_lib.Base;
          var C_enc = C.enc;
          var Utf8 = C_enc.Utf8;
          var C_algo = C.algo;
          /**
           * HMAC algorithm.
           */

          var HMAC = C_algo.HMAC = Base.extend({
            /**
             * Initializes a newly created HMAC.
             *
             * @param {Hasher} hasher The hash algorithm to use.
             * @param {WordArray|string} key The secret key.
             *
             * @example
             *
             *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);
             */
            init: function init(hasher, key) {
              // Init hasher
              hasher = this._hasher = new hasher.init(); // Convert string to WordArray, else assume WordArray already

              if (typeof key == 'string') {
                key = Utf8.parse(key);
              } // Shortcuts


              var hasherBlockSize = hasher.blockSize;
              var hasherBlockSizeBytes = hasherBlockSize * 4; // Allow arbitrary length keys

              if (key.sigBytes > hasherBlockSizeBytes) {
                key = hasher.finalize(key);
              } // Clamp excess bits


              key.clamp(); // Clone key for inner and outer pads

              var oKey = this._oKey = key.clone();
              var iKey = this._iKey = key.clone(); // Shortcuts

              var oKeyWords = oKey.words;
              var iKeyWords = iKey.words; // XOR keys with pad constants

              for (var i = 0; i < hasherBlockSize; i++) {
                oKeyWords[i] ^= 0x5c5c5c5c;
                iKeyWords[i] ^= 0x36363636;
              }

              oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes; // Set initial values

              this.reset();
            },

            /**
             * Resets this HMAC to its initial state.
             *
             * @example
             *
             *     hmacHasher.reset();
             */
            reset: function reset() {
              // Shortcut
              var hasher = this._hasher; // Reset

              hasher.reset();
              hasher.update(this._iKey);
            },

            /**
             * Updates this HMAC with a message.
             *
             * @param {WordArray|string} messageUpdate The message to append.
             *
             * @return {HMAC} This HMAC instance.
             *
             * @example
             *
             *     hmacHasher.update('message');
             *     hmacHasher.update(wordArray);
             */
            update: function update(messageUpdate) {
              this._hasher.update(messageUpdate); // Chainable


              return this;
            },

            /**
             * Finalizes the HMAC computation.
             * Note that the finalize operation is effectively a destructive, read-once operation.
             *
             * @param {WordArray|string} messageUpdate (Optional) A final message update.
             *
             * @return {WordArray} The HMAC.
             *
             * @example
             *
             *     var hmac = hmacHasher.finalize();
             *     var hmac = hmacHasher.finalize('message');
             *     var hmac = hmacHasher.finalize(wordArray);
             */
            finalize: function finalize(messageUpdate) {
              // Shortcut
              var hasher = this._hasher; // Compute HMAC

              var innerHash = hasher.finalize(messageUpdate);
              hasher.reset();
              var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));
              return hmac;
            }
          });
        })();
      });
      /***/

    },
    /* 169 */

    /***/
    function (module, exports, __webpack_require__) {
      /* WEBPACK VAR INJECTION */
      (function (Buffer) {
        // Generated by CoffeeScript 1.7.1
        (function () {
          var DecodeStream, iconv;

          try {
            iconv = __webpack_require__(170);
          } catch (_error) {}

          DecodeStream = function () {
            var key;

            function DecodeStream(buffer) {
              this.buffer = buffer;
              this.pos = 0;
              this.length = this.buffer.length;
            }

            DecodeStream.TYPES = {
              UInt8: 1,
              UInt16: 2,
              UInt24: 3,
              UInt32: 4,
              Int8: 1,
              Int16: 2,
              Int24: 3,
              Int32: 4,
              Float: 4,
              Double: 8
            };

            for (key in Buffer.prototype) {
              if (key.slice(0, 4) === 'read') {
                (function (key) {
                  var bytes;
                  bytes = DecodeStream.TYPES[key.replace(/read|[BL]E/g, '')];
                  return DecodeStream.prototype[key] = function () {
                    var ret;
                    ret = this.buffer[key](this.pos);
                    this.pos += bytes;
                    return ret;
                  };
                })(key);
              }
            }

            DecodeStream.prototype.readString = function (length, encoding) {
              var buf, byte, i, _i, _ref;

              if (encoding == null) {
                encoding = 'ascii';
              }

              switch (encoding) {
                case 'utf16le':
                case 'ucs2':
                case 'utf8':
                case 'ascii':
                  return this.buffer.toString(encoding, this.pos, this.pos += length);

                case 'utf16be':
                  buf = new Buffer(this.readBuffer(length));

                  for (i = _i = 0, _ref = buf.length - 1; _i < _ref; i = _i += 2) {
                    byte = buf[i];
                    buf[i] = buf[i + 1];
                    buf[i + 1] = byte;
                  }

                  return buf.toString('utf16le');

                default:
                  buf = this.readBuffer(length);

                  if (iconv) {
                    try {
                      return iconv.decode(buf, encoding);
                    } catch (_error) {}
                  }

                  return buf;
              }
            };

            DecodeStream.prototype.readBuffer = function (length) {
              return this.buffer.slice(this.pos, this.pos += length);
            };

            DecodeStream.prototype.readUInt24BE = function () {
              return (this.readUInt16BE() << 8) + this.readUInt8();
            };

            DecodeStream.prototype.readUInt24LE = function () {
              return this.readUInt16LE() + (this.readUInt8() << 16);
            };

            DecodeStream.prototype.readInt24BE = function () {
              return (this.readInt16BE() << 8) + this.readUInt8();
            };

            DecodeStream.prototype.readInt24LE = function () {
              return this.readUInt16LE() + (this.readInt8() << 16);
            };

            return DecodeStream;
          }();

          module.exports = DecodeStream;
        }).call(this);
        /* WEBPACK VAR INJECTION */
      }).call(this, __webpack_require__(10).Buffer);
      /***/
    },
    /* 170 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var Buffer = __webpack_require__(39).Buffer;

      var bomHandling = __webpack_require__(389),
          iconv = module.exports; // All codecs and aliases are kept here, keyed by encoding name/alias.
      // They are lazy loaded in `iconv.getCodec` from `encodings/index.js`.


      iconv.encodings = null; // Characters emitted in case of error.

      iconv.defaultCharUnicode = '�';
      iconv.defaultCharSingleByte = '?'; // Public API.

      iconv.encode = function encode(str, encoding, options) {
        str = "" + (str || ""); // Ensure string.

        var encoder = iconv.getEncoder(encoding, options);
        var res = encoder.write(str);
        var trail = encoder.end();
        return trail && trail.length > 0 ? Buffer.concat([res, trail]) : res;
      };

      iconv.decode = function decode(buf, encoding, options) {
        if (typeof buf === 'string') {
          if (!iconv.skipDecodeWarning) {
            console.error('Iconv-lite warning: decode()-ing strings is deprecated. Refer to https://github.com/ashtuchkin/iconv-lite/wiki/Use-Buffers-when-decoding');
            iconv.skipDecodeWarning = true;
          }

          buf = Buffer.from("" + (buf || ""), "binary"); // Ensure buffer.
        }

        var decoder = iconv.getDecoder(encoding, options);
        var res = decoder.write(buf);
        var trail = decoder.end();
        return trail ? res + trail : res;
      };

      iconv.encodingExists = function encodingExists(enc) {
        try {
          iconv.getCodec(enc);
          return true;
        } catch (e) {
          return false;
        }
      }; // Legacy aliases to convert functions


      iconv.toEncoding = iconv.encode;
      iconv.fromEncoding = iconv.decode; // Search for a codec in iconv.encodings. Cache codec data in iconv._codecDataCache.

      iconv._codecDataCache = {};

      iconv.getCodec = function getCodec(encoding) {
        if (!iconv.encodings) iconv.encodings = __webpack_require__(390); // Lazy load all encoding definitions.
        // Canonicalize encoding name: strip all non-alphanumeric chars and appended year.

        var enc = iconv._canonicalizeEncoding(encoding); // Traverse iconv.encodings to find actual codec.


        var codecOptions = {};

        while (true) {
          var codec = iconv._codecDataCache[enc];
          if (codec) return codec;
          var codecDef = iconv.encodings[enc];

          switch (_typeof4(codecDef)) {
            case "string":
              // Direct alias to other encoding.
              enc = codecDef;
              break;

            case "object":
              // Alias with options. Can be layered.
              for (var key in codecDef) {
                codecOptions[key] = codecDef[key];
              }

              if (!codecOptions.encodingName) codecOptions.encodingName = enc;
              enc = codecDef.type;
              break;

            case "function":
              // Codec itself.
              if (!codecOptions.encodingName) codecOptions.encodingName = enc; // The codec function must load all tables and return object with .encoder and .decoder methods.
              // It'll be called only once (for each different options object).

              codec = new codecDef(codecOptions, iconv);
              iconv._codecDataCache[codecOptions.encodingName] = codec; // Save it to be reused later.

              return codec;

            default:
              throw new Error("Encoding not recognized: '" + encoding + "' (searched as: '" + enc + "')");
          }
        }
      };

      iconv._canonicalizeEncoding = function (encoding) {
        // Canonicalize encoding name: strip all non-alphanumeric chars and appended year.
        return ('' + encoding).toLowerCase().replace(/:\d{4}$|[^0-9a-z]/g, "");
      };

      iconv.getEncoder = function getEncoder(encoding, options) {
        var codec = iconv.getCodec(encoding),
            encoder = new codec.encoder(options, codec);
        if (codec.bomAware && options && options.addBOM) encoder = new bomHandling.PrependBOM(encoder, options);
        return encoder;
      };

      iconv.getDecoder = function getDecoder(encoding, options) {
        var codec = iconv.getCodec(encoding),
            decoder = new codec.decoder(options, codec);
        if (codec.bomAware && !(options && options.stripBOM === false)) decoder = new bomHandling.StripBOM(decoder, options);
        return decoder;
      }; // Streaming API
      // NOTE: Streaming API naturally depends on 'stream' module from Node.js. Unfortunately in browser environments this module can add
      // up to 100Kb to the output bundle. To avoid unnecessary code bloat, we don't enable Streaming API in browser by default.
      // If you would like to enable it explicitly, please add the following code to your app:
      // > iconv.enableStreamingAPI(require('stream'));


      iconv.enableStreamingAPI = function enableStreamingAPI(stream_module) {
        if (iconv.supportsStreams) return; // Dependency-inject stream module to create IconvLite stream classes.

        var streams = __webpack_require__(405)(stream_module); // Not public API yet, but expose the stream classes.


        iconv.IconvLiteEncoderStream = streams.IconvLiteEncoderStream;
        iconv.IconvLiteDecoderStream = streams.IconvLiteDecoderStream; // Streaming API.

        iconv.encodeStream = function encodeStream(encoding, options) {
          return new iconv.IconvLiteEncoderStream(iconv.getEncoder(encoding, options), options);
        };

        iconv.decodeStream = function decodeStream(encoding, options) {
          return new iconv.IconvLiteDecoderStream(iconv.getDecoder(encoding, options), options);
        };

        iconv.supportsStreams = true;
      }; // Enable Streaming API automatically if 'stream' module is available and non-empty (the majority of environments).


      var stream_module;

      try {
        stream_module = __webpack_require__(406);
      } catch (e) {}

      if (stream_module && stream_module.Transform) {
        iconv.enableStreamingAPI(stream_module);
      } else {
        // In rare cases where 'stream' module is not available by default, throw a helpful exception.
        iconv.encodeStream = iconv.decodeStream = function () {
          throw new Error("iconv-lite Streaming API is not enabled. Use iconv.enableStreamingAPI(require('stream')); to enable it.");
        };
      }

      if (false) {}
      /***/

    },
    /* 171 */

    /***/
    function (module) {
      module.exports = JSON.parse("[[\"0\",\"\\u0000\",127,\"\u20AC\"],[\"8140\",\"\u4E02\u4E04\u4E05\u4E06\u4E0F\u4E12\u4E17\u4E1F\u4E20\u4E21\u4E23\u4E26\u4E29\u4E2E\u4E2F\u4E31\u4E33\u4E35\u4E37\u4E3C\u4E40\u4E41\u4E42\u4E44\u4E46\u4E4A\u4E51\u4E55\u4E57\u4E5A\u4E5B\u4E62\u4E63\u4E64\u4E65\u4E67\u4E68\u4E6A\",5,\"\u4E72\u4E74\",9,\"\u4E7F\",6,\"\u4E87\u4E8A\"],[\"8180\",\"\u4E90\u4E96\u4E97\u4E99\u4E9C\u4E9D\u4E9E\u4EA3\u4EAA\u4EAF\u4EB0\u4EB1\u4EB4\u4EB6\u4EB7\u4EB8\u4EB9\u4EBC\u4EBD\u4EBE\u4EC8\u4ECC\u4ECF\u4ED0\u4ED2\u4EDA\u4EDB\u4EDC\u4EE0\u4EE2\u4EE6\u4EE7\u4EE9\u4EED\u4EEE\u4EEF\u4EF1\u4EF4\u4EF8\u4EF9\u4EFA\u4EFC\u4EFE\u4F00\u4F02\",6,\"\u4F0B\u4F0C\u4F12\",4,\"\u4F1C\u4F1D\u4F21\u4F23\u4F28\u4F29\u4F2C\u4F2D\u4F2E\u4F31\u4F33\u4F35\u4F37\u4F39\u4F3B\u4F3E\",4,\"\u4F44\u4F45\u4F47\",5,\"\u4F52\u4F54\u4F56\u4F61\u4F62\u4F66\u4F68\u4F6A\u4F6B\u4F6D\u4F6E\u4F71\u4F72\u4F75\u4F77\u4F78\u4F79\u4F7A\u4F7D\u4F80\u4F81\u4F82\u4F85\u4F86\u4F87\u4F8A\u4F8C\u4F8E\u4F90\u4F92\u4F93\u4F95\u4F96\u4F98\u4F99\u4F9A\u4F9C\u4F9E\u4F9F\u4FA1\u4FA2\"],[\"8240\",\"\u4FA4\u4FAB\u4FAD\u4FB0\",4,\"\u4FB6\",8,\"\u4FC0\u4FC1\u4FC2\u4FC6\u4FC7\u4FC8\u4FC9\u4FCB\u4FCC\u4FCD\u4FD2\",4,\"\u4FD9\u4FDB\u4FE0\u4FE2\u4FE4\u4FE5\u4FE7\u4FEB\u4FEC\u4FF0\u4FF2\u4FF4\u4FF5\u4FF6\u4FF7\u4FF9\u4FFB\u4FFC\u4FFD\u4FFF\",11],[\"8280\",\"\u500B\u500E\u5010\u5011\u5013\u5015\u5016\u5017\u501B\u501D\u501E\u5020\u5022\u5023\u5024\u5027\u502B\u502F\",10,\"\u503B\u503D\u503F\u5040\u5041\u5042\u5044\u5045\u5046\u5049\u504A\u504B\u504D\u5050\",4,\"\u5056\u5057\u5058\u5059\u505B\u505D\",7,\"\u5066\",5,\"\u506D\",8,\"\u5078\u5079\u507A\u507C\u507D\u5081\u5082\u5083\u5084\u5086\u5087\u5089\u508A\u508B\u508C\u508E\",20,\"\u50A4\u50A6\u50AA\u50AB\u50AD\",4,\"\u50B3\",6,\"\u50BC\"],[\"8340\",\"\u50BD\",17,\"\u50D0\",5,\"\u50D7\u50D8\u50D9\u50DB\",10,\"\u50E8\u50E9\u50EA\u50EB\u50EF\u50F0\u50F1\u50F2\u50F4\u50F6\",4,\"\u50FC\",9,\"\u5108\"],[\"8380\",\"\u5109\u510A\u510C\",5,\"\u5113\",13,\"\u5122\",28,\"\u5142\u5147\u514A\u514C\u514E\u514F\u5150\u5152\u5153\u5157\u5158\u5159\u515B\u515D\",4,\"\u5163\u5164\u5166\u5167\u5169\u516A\u516F\u5172\u517A\u517E\u517F\u5183\u5184\u5186\u5187\u518A\u518B\u518E\u518F\u5190\u5191\u5193\u5194\u5198\u519A\u519D\u519E\u519F\u51A1\u51A3\u51A6\",4,\"\u51AD\u51AE\u51B4\u51B8\u51B9\u51BA\u51BE\u51BF\u51C1\u51C2\u51C3\u51C5\u51C8\u51CA\u51CD\u51CE\u51D0\u51D2\",5],[\"8440\",\"\u51D8\u51D9\u51DA\u51DC\u51DE\u51DF\u51E2\u51E3\u51E5\",5,\"\u51EC\u51EE\u51F1\u51F2\u51F4\u51F7\u51FE\u5204\u5205\u5209\u520B\u520C\u520F\u5210\u5213\u5214\u5215\u521C\u521E\u521F\u5221\u5222\u5223\u5225\u5226\u5227\u522A\u522C\u522F\u5231\u5232\u5234\u5235\u523C\u523E\u5244\",5,\"\u524B\u524E\u524F\u5252\u5253\u5255\u5257\u5258\"],[\"8480\",\"\u5259\u525A\u525B\u525D\u525F\u5260\u5262\u5263\u5264\u5266\u5268\u526B\u526C\u526D\u526E\u5270\u5271\u5273\",9,\"\u527E\u5280\u5283\",4,\"\u5289\",6,\"\u5291\u5292\u5294\",6,\"\u529C\u52A4\u52A5\u52A6\u52A7\u52AE\u52AF\u52B0\u52B4\",9,\"\u52C0\u52C1\u52C2\u52C4\u52C5\u52C6\u52C8\u52CA\u52CC\u52CD\u52CE\u52CF\u52D1\u52D3\u52D4\u52D5\u52D7\u52D9\",5,\"\u52E0\u52E1\u52E2\u52E3\u52E5\",10,\"\u52F1\",7,\"\u52FB\u52FC\u52FD\u5301\u5302\u5303\u5304\u5307\u5309\u530A\u530B\u530C\u530E\"],[\"8540\",\"\u5311\u5312\u5313\u5314\u5318\u531B\u531C\u531E\u531F\u5322\u5324\u5325\u5327\u5328\u5329\u532B\u532C\u532D\u532F\",9,\"\u533C\u533D\u5340\u5342\u5344\u5346\u534B\u534C\u534D\u5350\u5354\u5358\u5359\u535B\u535D\u5365\u5368\u536A\u536C\u536D\u5372\u5376\u5379\u537B\u537C\u537D\u537E\u5380\u5381\u5383\u5387\u5388\u538A\u538E\u538F\"],[\"8580\",\"\u5390\",4,\"\u5396\u5397\u5399\u539B\u539C\u539E\u53A0\u53A1\u53A4\u53A7\u53AA\u53AB\u53AC\u53AD\u53AF\",6,\"\u53B7\u53B8\u53B9\u53BA\u53BC\u53BD\u53BE\u53C0\u53C3\",4,\"\u53CE\u53CF\u53D0\u53D2\u53D3\u53D5\u53DA\u53DC\u53DD\u53DE\u53E1\u53E2\u53E7\u53F4\u53FA\u53FE\u53FF\u5400\u5402\u5405\u5407\u540B\u5414\u5418\u5419\u541A\u541C\u5422\u5424\u5425\u542A\u5430\u5433\u5436\u5437\u543A\u543D\u543F\u5441\u5442\u5444\u5445\u5447\u5449\u544C\u544D\u544E\u544F\u5451\u545A\u545D\",4,\"\u5463\u5465\u5467\u5469\",7,\"\u5474\u5479\u547A\u547E\u547F\u5481\u5483\u5485\u5487\u5488\u5489\u548A\u548D\u5491\u5493\u5497\u5498\u549C\u549E\u549F\u54A0\u54A1\"],[\"8640\",\"\u54A2\u54A5\u54AE\u54B0\u54B2\u54B5\u54B6\u54B7\u54B9\u54BA\u54BC\u54BE\u54C3\u54C5\u54CA\u54CB\u54D6\u54D8\u54DB\u54E0\",4,\"\u54EB\u54EC\u54EF\u54F0\u54F1\u54F4\",5,\"\u54FB\u54FE\u5500\u5502\u5503\u5504\u5505\u5508\u550A\",4,\"\u5512\u5513\u5515\",5,\"\u551C\u551D\u551E\u551F\u5521\u5525\u5526\"],[\"8680\",\"\u5528\u5529\u552B\u552D\u5532\u5534\u5535\u5536\u5538\u5539\u553A\u553B\u553D\u5540\u5542\u5545\u5547\u5548\u554B\",4,\"\u5551\u5552\u5553\u5554\u5557\",4,\"\u555D\u555E\u555F\u5560\u5562\u5563\u5568\u5569\u556B\u556F\",5,\"\u5579\u557A\u557D\u557F\u5585\u5586\u558C\u558D\u558E\u5590\u5592\u5593\u5595\u5596\u5597\u559A\u559B\u559E\u55A0\",6,\"\u55A8\",8,\"\u55B2\u55B4\u55B6\u55B8\u55BA\u55BC\u55BF\",4,\"\u55C6\u55C7\u55C8\u55CA\u55CB\u55CE\u55CF\u55D0\u55D5\u55D7\",4,\"\u55DE\u55E0\u55E2\u55E7\u55E9\u55ED\u55EE\u55F0\u55F1\u55F4\u55F6\u55F8\",4,\"\u55FF\u5602\u5603\u5604\u5605\"],[\"8740\",\"\u5606\u5607\u560A\u560B\u560D\u5610\",7,\"\u5619\u561A\u561C\u561D\u5620\u5621\u5622\u5625\u5626\u5628\u5629\u562A\u562B\u562E\u562F\u5630\u5633\u5635\u5637\u5638\u563A\u563C\u563D\u563E\u5640\",11,\"\u564F\",4,\"\u5655\u5656\u565A\u565B\u565D\",4],[\"8780\",\"\u5663\u5665\u5666\u5667\u566D\u566E\u566F\u5670\u5672\u5673\u5674\u5675\u5677\u5678\u5679\u567A\u567D\",7,\"\u5687\",6,\"\u5690\u5691\u5692\u5694\",14,\"\u56A4\",10,\"\u56B0\",6,\"\u56B8\u56B9\u56BA\u56BB\u56BD\",12,\"\u56CB\",8,\"\u56D5\u56D6\u56D8\u56D9\u56DC\u56E3\u56E5\",5,\"\u56EC\u56EE\u56EF\u56F2\u56F3\u56F6\u56F7\u56F8\u56FB\u56FC\u5700\u5701\u5702\u5705\u5707\u570B\",6],[\"8840\",\"\u5712\",9,\"\u571D\u571E\u5720\u5721\u5722\u5724\u5725\u5726\u5727\u572B\u5731\u5732\u5734\",4,\"\u573C\u573D\u573F\u5741\u5743\u5744\u5745\u5746\u5748\u5749\u574B\u5752\",4,\"\u5758\u5759\u5762\u5763\u5765\u5767\u576C\u576E\u5770\u5771\u5772\u5774\u5775\u5778\u5779\u577A\u577D\u577E\u577F\u5780\"],[\"8880\",\"\u5781\u5787\u5788\u5789\u578A\u578D\",4,\"\u5794\",6,\"\u579C\u579D\u579E\u579F\u57A5\u57A8\u57AA\u57AC\u57AF\u57B0\u57B1\u57B3\u57B5\u57B6\u57B7\u57B9\",8,\"\u57C4\",6,\"\u57CC\u57CD\u57D0\u57D1\u57D3\u57D6\u57D7\u57DB\u57DC\u57DE\u57E1\u57E2\u57E3\u57E5\",7,\"\u57EE\u57F0\u57F1\u57F2\u57F3\u57F5\u57F6\u57F7\u57FB\u57FC\u57FE\u57FF\u5801\u5803\u5804\u5805\u5808\u5809\u580A\u580C\u580E\u580F\u5810\u5812\u5813\u5814\u5816\u5817\u5818\u581A\u581B\u581C\u581D\u581F\u5822\u5823\u5825\",4,\"\u582B\",4,\"\u5831\u5832\u5833\u5834\u5836\",7],[\"8940\",\"\u583E\",5,\"\u5845\",6,\"\u584E\u584F\u5850\u5852\u5853\u5855\u5856\u5857\u5859\",4,\"\u585F\",5,\"\u5866\",4,\"\u586D\",16,\"\u587F\u5882\u5884\u5886\u5887\u5888\u588A\u588B\u588C\"],[\"8980\",\"\u588D\",4,\"\u5894\",4,\"\u589B\u589C\u589D\u58A0\",7,\"\u58AA\",17,\"\u58BD\u58BE\u58BF\u58C0\u58C2\u58C3\u58C4\u58C6\",10,\"\u58D2\u58D3\u58D4\u58D6\",13,\"\u58E5\",5,\"\u58ED\u58EF\u58F1\u58F2\u58F4\u58F5\u58F7\u58F8\u58FA\",7,\"\u5903\u5905\u5906\u5908\",4,\"\u590E\u5910\u5911\u5912\u5913\u5917\u5918\u591B\u591D\u591E\u5920\u5921\u5922\u5923\u5926\u5928\u592C\u5930\u5932\u5933\u5935\u5936\u593B\"],[\"8a40\",\"\u593D\u593E\u593F\u5940\u5943\u5945\u5946\u594A\u594C\u594D\u5950\u5952\u5953\u5959\u595B\",4,\"\u5961\u5963\u5964\u5966\",12,\"\u5975\u5977\u597A\u597B\u597C\u597E\u597F\u5980\u5985\u5989\u598B\u598C\u598E\u598F\u5990\u5991\u5994\u5995\u5998\u599A\u599B\u599C\u599D\u599F\u59A0\u59A1\u59A2\u59A6\"],[\"8a80\",\"\u59A7\u59AC\u59AD\u59B0\u59B1\u59B3\",5,\"\u59BA\u59BC\u59BD\u59BF\",6,\"\u59C7\u59C8\u59C9\u59CC\u59CD\u59CE\u59CF\u59D5\u59D6\u59D9\u59DB\u59DE\",4,\"\u59E4\u59E6\u59E7\u59E9\u59EA\u59EB\u59ED\",11,\"\u59FA\u59FC\u59FD\u59FE\u5A00\u5A02\u5A0A\u5A0B\u5A0D\u5A0E\u5A0F\u5A10\u5A12\u5A14\u5A15\u5A16\u5A17\u5A19\u5A1A\u5A1B\u5A1D\u5A1E\u5A21\u5A22\u5A24\u5A26\u5A27\u5A28\u5A2A\",6,\"\u5A33\u5A35\u5A37\",4,\"\u5A3D\u5A3E\u5A3F\u5A41\",4,\"\u5A47\u5A48\u5A4B\",9,\"\u5A56\u5A57\u5A58\u5A59\u5A5B\",5],[\"8b40\",\"\u5A61\u5A63\u5A64\u5A65\u5A66\u5A68\u5A69\u5A6B\",8,\"\u5A78\u5A79\u5A7B\u5A7C\u5A7D\u5A7E\u5A80\",17,\"\u5A93\",6,\"\u5A9C\",13,\"\u5AAB\u5AAC\"],[\"8b80\",\"\u5AAD\",4,\"\u5AB4\u5AB6\u5AB7\u5AB9\",4,\"\u5ABF\u5AC0\u5AC3\",5,\"\u5ACA\u5ACB\u5ACD\",4,\"\u5AD3\u5AD5\u5AD7\u5AD9\u5ADA\u5ADB\u5ADD\u5ADE\u5ADF\u5AE2\u5AE4\u5AE5\u5AE7\u5AE8\u5AEA\u5AEC\",4,\"\u5AF2\",22,\"\u5B0A\",11,\"\u5B18\",25,\"\u5B33\u5B35\u5B36\u5B38\",7,\"\u5B41\",6],[\"8c40\",\"\u5B48\",7,\"\u5B52\u5B56\u5B5E\u5B60\u5B61\u5B67\u5B68\u5B6B\u5B6D\u5B6E\u5B6F\u5B72\u5B74\u5B76\u5B77\u5B78\u5B79\u5B7B\u5B7C\u5B7E\u5B7F\u5B82\u5B86\u5B8A\u5B8D\u5B8E\u5B90\u5B91\u5B92\u5B94\u5B96\u5B9F\u5BA7\u5BA8\u5BA9\u5BAC\u5BAD\u5BAE\u5BAF\u5BB1\u5BB2\u5BB7\u5BBA\u5BBB\u5BBC\u5BC0\u5BC1\u5BC3\u5BC8\u5BC9\u5BCA\u5BCB\u5BCD\u5BCE\u5BCF\"],[\"8c80\",\"\u5BD1\u5BD4\",8,\"\u5BE0\u5BE2\u5BE3\u5BE6\u5BE7\u5BE9\",4,\"\u5BEF\u5BF1\",6,\"\u5BFD\u5BFE\u5C00\u5C02\u5C03\u5C05\u5C07\u5C08\u5C0B\u5C0C\u5C0D\u5C0E\u5C10\u5C12\u5C13\u5C17\u5C19\u5C1B\u5C1E\u5C1F\u5C20\u5C21\u5C23\u5C26\u5C28\u5C29\u5C2A\u5C2B\u5C2D\u5C2E\u5C2F\u5C30\u5C32\u5C33\u5C35\u5C36\u5C37\u5C43\u5C44\u5C46\u5C47\u5C4C\u5C4D\u5C52\u5C53\u5C54\u5C56\u5C57\u5C58\u5C5A\u5C5B\u5C5C\u5C5D\u5C5F\u5C62\u5C64\u5C67\",6,\"\u5C70\u5C72\",6,\"\u5C7B\u5C7C\u5C7D\u5C7E\u5C80\u5C83\",4,\"\u5C89\u5C8A\u5C8B\u5C8E\u5C8F\u5C92\u5C93\u5C95\u5C9D\",4,\"\u5CA4\",4],[\"8d40\",\"\u5CAA\u5CAE\u5CAF\u5CB0\u5CB2\u5CB4\u5CB6\u5CB9\u5CBA\u5CBB\u5CBC\u5CBE\u5CC0\u5CC2\u5CC3\u5CC5\",5,\"\u5CCC\",5,\"\u5CD3\",5,\"\u5CDA\",6,\"\u5CE2\u5CE3\u5CE7\u5CE9\u5CEB\u5CEC\u5CEE\u5CEF\u5CF1\",9,\"\u5CFC\",4],[\"8d80\",\"\u5D01\u5D04\u5D05\u5D08\",5,\"\u5D0F\",4,\"\u5D15\u5D17\u5D18\u5D19\u5D1A\u5D1C\u5D1D\u5D1F\",4,\"\u5D25\u5D28\u5D2A\u5D2B\u5D2C\u5D2F\",4,\"\u5D35\",7,\"\u5D3F\",7,\"\u5D48\u5D49\u5D4D\",10,\"\u5D59\u5D5A\u5D5C\u5D5E\",10,\"\u5D6A\u5D6D\u5D6E\u5D70\u5D71\u5D72\u5D73\u5D75\",12,\"\u5D83\",21,\"\u5D9A\u5D9B\u5D9C\u5D9E\u5D9F\u5DA0\"],[\"8e40\",\"\u5DA1\",21,\"\u5DB8\",12,\"\u5DC6\",6,\"\u5DCE\",12,\"\u5DDC\u5DDF\u5DE0\u5DE3\u5DE4\u5DEA\u5DEC\u5DED\"],[\"8e80\",\"\u5DF0\u5DF5\u5DF6\u5DF8\",4,\"\u5DFF\u5E00\u5E04\u5E07\u5E09\u5E0A\u5E0B\u5E0D\u5E0E\u5E12\u5E13\u5E17\u5E1E\",7,\"\u5E28\",4,\"\u5E2F\u5E30\u5E32\",4,\"\u5E39\u5E3A\u5E3E\u5E3F\u5E40\u5E41\u5E43\u5E46\",5,\"\u5E4D\",6,\"\u5E56\",4,\"\u5E5C\u5E5D\u5E5F\u5E60\u5E63\",14,\"\u5E75\u5E77\u5E79\u5E7E\u5E81\u5E82\u5E83\u5E85\u5E88\u5E89\u5E8C\u5E8D\u5E8E\u5E92\u5E98\u5E9B\u5E9D\u5EA1\u5EA2\u5EA3\u5EA4\u5EA8\",4,\"\u5EAE\",4,\"\u5EB4\u5EBA\u5EBB\u5EBC\u5EBD\u5EBF\",6],[\"8f40\",\"\u5EC6\u5EC7\u5EC8\u5ECB\",5,\"\u5ED4\u5ED5\u5ED7\u5ED8\u5ED9\u5EDA\u5EDC\",11,\"\u5EE9\u5EEB\",8,\"\u5EF5\u5EF8\u5EF9\u5EFB\u5EFC\u5EFD\u5F05\u5F06\u5F07\u5F09\u5F0C\u5F0D\u5F0E\u5F10\u5F12\u5F14\u5F16\u5F19\u5F1A\u5F1C\u5F1D\u5F1E\u5F21\u5F22\u5F23\u5F24\"],[\"8f80\",\"\u5F28\u5F2B\u5F2C\u5F2E\u5F30\u5F32\",6,\"\u5F3B\u5F3D\u5F3E\u5F3F\u5F41\",14,\"\u5F51\u5F54\u5F59\u5F5A\u5F5B\u5F5C\u5F5E\u5F5F\u5F60\u5F63\u5F65\u5F67\u5F68\u5F6B\u5F6E\u5F6F\u5F72\u5F74\u5F75\u5F76\u5F78\u5F7A\u5F7D\u5F7E\u5F7F\u5F83\u5F86\u5F8D\u5F8E\u5F8F\u5F91\u5F93\u5F94\u5F96\u5F9A\u5F9B\u5F9D\u5F9E\u5F9F\u5FA0\u5FA2\",5,\"\u5FA9\u5FAB\u5FAC\u5FAF\",5,\"\u5FB6\u5FB8\u5FB9\u5FBA\u5FBB\u5FBE\",4,\"\u5FC7\u5FC8\u5FCA\u5FCB\u5FCE\u5FD3\u5FD4\u5FD5\u5FDA\u5FDB\u5FDC\u5FDE\u5FDF\u5FE2\u5FE3\u5FE5\u5FE6\u5FE8\u5FE9\u5FEC\u5FEF\u5FF0\u5FF2\u5FF3\u5FF4\u5FF6\u5FF7\u5FF9\u5FFA\u5FFC\u6007\"],[\"9040\",\"\u6008\u6009\u600B\u600C\u6010\u6011\u6013\u6017\u6018\u601A\u601E\u601F\u6022\u6023\u6024\u602C\u602D\u602E\u6030\",4,\"\u6036\",4,\"\u603D\u603E\u6040\u6044\",6,\"\u604C\u604E\u604F\u6051\u6053\u6054\u6056\u6057\u6058\u605B\u605C\u605E\u605F\u6060\u6061\u6065\u6066\u606E\u6071\u6072\u6074\u6075\u6077\u607E\u6080\"],[\"9080\",\"\u6081\u6082\u6085\u6086\u6087\u6088\u608A\u608B\u608E\u608F\u6090\u6091\u6093\u6095\u6097\u6098\u6099\u609C\u609E\u60A1\u60A2\u60A4\u60A5\u60A7\u60A9\u60AA\u60AE\u60B0\u60B3\u60B5\u60B6\u60B7\u60B9\u60BA\u60BD\",7,\"\u60C7\u60C8\u60C9\u60CC\",4,\"\u60D2\u60D3\u60D4\u60D6\u60D7\u60D9\u60DB\u60DE\u60E1\",4,\"\u60EA\u60F1\u60F2\u60F5\u60F7\u60F8\u60FB\",4,\"\u6102\u6103\u6104\u6105\u6107\u610A\u610B\u610C\u6110\",4,\"\u6116\u6117\u6118\u6119\u611B\u611C\u611D\u611E\u6121\u6122\u6125\u6128\u6129\u612A\u612C\",18,\"\u6140\",6],[\"9140\",\"\u6147\u6149\u614B\u614D\u614F\u6150\u6152\u6153\u6154\u6156\",6,\"\u615E\u615F\u6160\u6161\u6163\u6164\u6165\u6166\u6169\",6,\"\u6171\u6172\u6173\u6174\u6176\u6178\",18,\"\u618C\u618D\u618F\",4,\"\u6195\"],[\"9180\",\"\u6196\",6,\"\u619E\",8,\"\u61AA\u61AB\u61AD\",9,\"\u61B8\",5,\"\u61BF\u61C0\u61C1\u61C3\",4,\"\u61C9\u61CC\",4,\"\u61D3\u61D5\",16,\"\u61E7\",13,\"\u61F6\",8,\"\u6200\",5,\"\u6207\u6209\u6213\u6214\u6219\u621C\u621D\u621E\u6220\u6223\u6226\u6227\u6228\u6229\u622B\u622D\u622F\u6230\u6231\u6232\u6235\u6236\u6238\",4,\"\u6242\u6244\u6245\u6246\u624A\"],[\"9240\",\"\u624F\u6250\u6255\u6256\u6257\u6259\u625A\u625C\",6,\"\u6264\u6265\u6268\u6271\u6272\u6274\u6275\u6277\u6278\u627A\u627B\u627D\u6281\u6282\u6283\u6285\u6286\u6287\u6288\u628B\",5,\"\u6294\u6299\u629C\u629D\u629E\u62A3\u62A6\u62A7\u62A9\u62AA\u62AD\u62AE\u62AF\u62B0\u62B2\u62B3\u62B4\u62B6\u62B7\u62B8\u62BA\u62BE\u62C0\u62C1\"],[\"9280\",\"\u62C3\u62CB\u62CF\u62D1\u62D5\u62DD\u62DE\u62E0\u62E1\u62E4\u62EA\u62EB\u62F0\u62F2\u62F5\u62F8\u62F9\u62FA\u62FB\u6300\u6303\u6304\u6305\u6306\u630A\u630B\u630C\u630D\u630F\u6310\u6312\u6313\u6314\u6315\u6317\u6318\u6319\u631C\u6326\u6327\u6329\u632C\u632D\u632E\u6330\u6331\u6333\",5,\"\u633B\u633C\u633E\u633F\u6340\u6341\u6344\u6347\u6348\u634A\u6351\u6352\u6353\u6354\u6356\",7,\"\u6360\u6364\u6365\u6366\u6368\u636A\u636B\u636C\u636F\u6370\u6372\u6373\u6374\u6375\u6378\u6379\u637C\u637D\u637E\u637F\u6381\u6383\u6384\u6385\u6386\u638B\u638D\u6391\u6393\u6394\u6395\u6397\u6399\",6,\"\u63A1\u63A4\u63A6\u63AB\u63AF\u63B1\u63B2\u63B5\u63B6\u63B9\u63BB\u63BD\u63BF\u63C0\"],[\"9340\",\"\u63C1\u63C2\u63C3\u63C5\u63C7\u63C8\u63CA\u63CB\u63CC\u63D1\u63D3\u63D4\u63D5\u63D7\",6,\"\u63DF\u63E2\u63E4\",4,\"\u63EB\u63EC\u63EE\u63EF\u63F0\u63F1\u63F3\u63F5\u63F7\u63F9\u63FA\u63FB\u63FC\u63FE\u6403\u6404\u6406\",4,\"\u640D\u640E\u6411\u6412\u6415\",5,\"\u641D\u641F\u6422\u6423\u6424\"],[\"9380\",\"\u6425\u6427\u6428\u6429\u642B\u642E\",5,\"\u6435\",4,\"\u643B\u643C\u643E\u6440\u6442\u6443\u6449\u644B\",6,\"\u6453\u6455\u6456\u6457\u6459\",4,\"\u645F\",7,\"\u6468\u646A\u646B\u646C\u646E\",9,\"\u647B\",6,\"\u6483\u6486\u6488\",8,\"\u6493\u6494\u6497\u6498\u649A\u649B\u649C\u649D\u649F\",4,\"\u64A5\u64A6\u64A7\u64A8\u64AA\u64AB\u64AF\u64B1\u64B2\u64B3\u64B4\u64B6\u64B9\u64BB\u64BD\u64BE\u64BF\u64C1\u64C3\u64C4\u64C6\",6,\"\u64CF\u64D1\u64D3\u64D4\u64D5\u64D6\u64D9\u64DA\"],[\"9440\",\"\u64DB\u64DC\u64DD\u64DF\u64E0\u64E1\u64E3\u64E5\u64E7\",24,\"\u6501\",7,\"\u650A\",7,\"\u6513\",4,\"\u6519\",8],[\"9480\",\"\u6522\u6523\u6524\u6526\",4,\"\u652C\u652D\u6530\u6531\u6532\u6533\u6537\u653A\u653C\u653D\u6540\",4,\"\u6546\u6547\u654A\u654B\u654D\u654E\u6550\u6552\u6553\u6554\u6557\u6558\u655A\u655C\u655F\u6560\u6561\u6564\u6565\u6567\u6568\u6569\u656A\u656D\u656E\u656F\u6571\u6573\u6575\u6576\u6578\",14,\"\u6588\u6589\u658A\u658D\u658E\u658F\u6592\u6594\u6595\u6596\u6598\u659A\u659D\u659E\u65A0\u65A2\u65A3\u65A6\u65A8\u65AA\u65AC\u65AE\u65B1\",7,\"\u65BA\u65BB\u65BE\u65BF\u65C0\u65C2\u65C7\u65C8\u65C9\u65CA\u65CD\u65D0\u65D1\u65D3\u65D4\u65D5\u65D8\",7,\"\u65E1\u65E3\u65E4\u65EA\u65EB\"],[\"9540\",\"\u65F2\u65F3\u65F4\u65F5\u65F8\u65F9\u65FB\",4,\"\u6601\u6604\u6605\u6607\u6608\u6609\u660B\u660D\u6610\u6611\u6612\u6616\u6617\u6618\u661A\u661B\u661C\u661E\u6621\u6622\u6623\u6624\u6626\u6629\u662A\u662B\u662C\u662E\u6630\u6632\u6633\u6637\",4,\"\u663D\u663F\u6640\u6642\u6644\",6,\"\u664D\u664E\u6650\u6651\u6658\"],[\"9580\",\"\u6659\u665B\u665C\u665D\u665E\u6660\u6662\u6663\u6665\u6667\u6669\",4,\"\u6671\u6672\u6673\u6675\u6678\u6679\u667B\u667C\u667D\u667F\u6680\u6681\u6683\u6685\u6686\u6688\u6689\u668A\u668B\u668D\u668E\u668F\u6690\u6692\u6693\u6694\u6695\u6698\",4,\"\u669E\",8,\"\u66A9\",4,\"\u66AF\",4,\"\u66B5\u66B6\u66B7\u66B8\u66BA\u66BB\u66BC\u66BD\u66BF\",25,\"\u66DA\u66DE\",7,\"\u66E7\u66E8\u66EA\",5,\"\u66F1\u66F5\u66F6\u66F8\u66FA\u66FB\u66FD\u6701\u6702\u6703\"],[\"9640\",\"\u6704\u6705\u6706\u6707\u670C\u670E\u670F\u6711\u6712\u6713\u6716\u6718\u6719\u671A\u671C\u671E\u6720\",5,\"\u6727\u6729\u672E\u6730\u6732\u6733\u6736\u6737\u6738\u6739\u673B\u673C\u673E\u673F\u6741\u6744\u6745\u6747\u674A\u674B\u674D\u6752\u6754\u6755\u6757\",4,\"\u675D\u6762\u6763\u6764\u6766\u6767\u676B\u676C\u676E\u6771\u6774\u6776\"],[\"9680\",\"\u6778\u6779\u677A\u677B\u677D\u6780\u6782\u6783\u6785\u6786\u6788\u678A\u678C\u678D\u678E\u678F\u6791\u6792\u6793\u6794\u6796\u6799\u679B\u679F\u67A0\u67A1\u67A4\u67A6\u67A9\u67AC\u67AE\u67B1\u67B2\u67B4\u67B9\",7,\"\u67C2\u67C5\",9,\"\u67D5\u67D6\u67D7\u67DB\u67DF\u67E1\u67E3\u67E4\u67E6\u67E7\u67E8\u67EA\u67EB\u67ED\u67EE\u67F2\u67F5\",7,\"\u67FE\u6801\u6802\u6803\u6804\u6806\u680D\u6810\u6812\u6814\u6815\u6818\",4,\"\u681E\u681F\u6820\u6822\",6,\"\u682B\",6,\"\u6834\u6835\u6836\u683A\u683B\u683F\u6847\u684B\u684D\u684F\u6852\u6856\",5],[\"9740\",\"\u685C\u685D\u685E\u685F\u686A\u686C\",7,\"\u6875\u6878\",8,\"\u6882\u6884\u6887\",7,\"\u6890\u6891\u6892\u6894\u6895\u6896\u6898\",9,\"\u68A3\u68A4\u68A5\u68A9\u68AA\u68AB\u68AC\u68AE\u68B1\u68B2\u68B4\u68B6\u68B7\u68B8\"],[\"9780\",\"\u68B9\",6,\"\u68C1\u68C3\",5,\"\u68CA\u68CC\u68CE\u68CF\u68D0\u68D1\u68D3\u68D4\u68D6\u68D7\u68D9\u68DB\",4,\"\u68E1\u68E2\u68E4\",9,\"\u68EF\u68F2\u68F3\u68F4\u68F6\u68F7\u68F8\u68FB\u68FD\u68FE\u68FF\u6900\u6902\u6903\u6904\u6906\",4,\"\u690C\u690F\u6911\u6913\",11,\"\u6921\u6922\u6923\u6925\",7,\"\u692E\u692F\u6931\u6932\u6933\u6935\u6936\u6937\u6938\u693A\u693B\u693C\u693E\u6940\u6941\u6943\",16,\"\u6955\u6956\u6958\u6959\u695B\u695C\u695F\"],[\"9840\",\"\u6961\u6962\u6964\u6965\u6967\u6968\u6969\u696A\u696C\u696D\u696F\u6970\u6972\",4,\"\u697A\u697B\u697D\u697E\u697F\u6981\u6983\u6985\u698A\u698B\u698C\u698E\",5,\"\u6996\u6997\u6999\u699A\u699D\",9,\"\u69A9\u69AA\u69AC\u69AE\u69AF\u69B0\u69B2\u69B3\u69B5\u69B6\u69B8\u69B9\u69BA\u69BC\u69BD\"],[\"9880\",\"\u69BE\u69BF\u69C0\u69C2\",7,\"\u69CB\u69CD\u69CF\u69D1\u69D2\u69D3\u69D5\",5,\"\u69DC\u69DD\u69DE\u69E1\",11,\"\u69EE\u69EF\u69F0\u69F1\u69F3\",9,\"\u69FE\u6A00\",9,\"\u6A0B\",11,\"\u6A19\",5,\"\u6A20\u6A22\",5,\"\u6A29\u6A2B\u6A2C\u6A2D\u6A2E\u6A30\u6A32\u6A33\u6A34\u6A36\",6,\"\u6A3F\",4,\"\u6A45\u6A46\u6A48\",7,\"\u6A51\",6,\"\u6A5A\"],[\"9940\",\"\u6A5C\",4,\"\u6A62\u6A63\u6A64\u6A66\",10,\"\u6A72\",6,\"\u6A7A\u6A7B\u6A7D\u6A7E\u6A7F\u6A81\u6A82\u6A83\u6A85\",8,\"\u6A8F\u6A92\",4,\"\u6A98\",7,\"\u6AA1\",5],[\"9980\",\"\u6AA7\u6AA8\u6AAA\u6AAD\",114,\"\u6B25\u6B26\u6B28\",6],[\"9a40\",\"\u6B2F\u6B30\u6B31\u6B33\u6B34\u6B35\u6B36\u6B38\u6B3B\u6B3C\u6B3D\u6B3F\u6B40\u6B41\u6B42\u6B44\u6B45\u6B48\u6B4A\u6B4B\u6B4D\",11,\"\u6B5A\",7,\"\u6B68\u6B69\u6B6B\",13,\"\u6B7A\u6B7D\u6B7E\u6B7F\u6B80\u6B85\u6B88\"],[\"9a80\",\"\u6B8C\u6B8E\u6B8F\u6B90\u6B91\u6B94\u6B95\u6B97\u6B98\u6B99\u6B9C\",4,\"\u6BA2\",7,\"\u6BAB\",7,\"\u6BB6\u6BB8\",6,\"\u6BC0\u6BC3\u6BC4\u6BC6\",4,\"\u6BCC\u6BCE\u6BD0\u6BD1\u6BD8\u6BDA\u6BDC\",4,\"\u6BE2\",7,\"\u6BEC\u6BED\u6BEE\u6BF0\u6BF1\u6BF2\u6BF4\u6BF6\u6BF7\u6BF8\u6BFA\u6BFB\u6BFC\u6BFE\",6,\"\u6C08\",4,\"\u6C0E\u6C12\u6C17\u6C1C\u6C1D\u6C1E\u6C20\u6C23\u6C25\u6C2B\u6C2C\u6C2D\u6C31\u6C33\u6C36\u6C37\u6C39\u6C3A\u6C3B\u6C3C\u6C3E\u6C3F\u6C43\u6C44\u6C45\u6C48\u6C4B\",4,\"\u6C51\u6C52\u6C53\u6C56\u6C58\"],[\"9b40\",\"\u6C59\u6C5A\u6C62\u6C63\u6C65\u6C66\u6C67\u6C6B\",4,\"\u6C71\u6C73\u6C75\u6C77\u6C78\u6C7A\u6C7B\u6C7C\u6C7F\u6C80\u6C84\u6C87\u6C8A\u6C8B\u6C8D\u6C8E\u6C91\u6C92\u6C95\u6C96\u6C97\u6C98\u6C9A\u6C9C\u6C9D\u6C9E\u6CA0\u6CA2\u6CA8\u6CAC\u6CAF\u6CB0\u6CB4\u6CB5\u6CB6\u6CB7\u6CBA\u6CC0\u6CC1\u6CC2\u6CC3\u6CC6\u6CC7\u6CC8\u6CCB\u6CCD\u6CCE\u6CCF\u6CD1\u6CD2\u6CD8\"],[\"9b80\",\"\u6CD9\u6CDA\u6CDC\u6CDD\u6CDF\u6CE4\u6CE6\u6CE7\u6CE9\u6CEC\u6CED\u6CF2\u6CF4\u6CF9\u6CFF\u6D00\u6D02\u6D03\u6D05\u6D06\u6D08\u6D09\u6D0A\u6D0D\u6D0F\u6D10\u6D11\u6D13\u6D14\u6D15\u6D16\u6D18\u6D1C\u6D1D\u6D1F\",5,\"\u6D26\u6D28\u6D29\u6D2C\u6D2D\u6D2F\u6D30\u6D34\u6D36\u6D37\u6D38\u6D3A\u6D3F\u6D40\u6D42\u6D44\u6D49\u6D4C\u6D50\u6D55\u6D56\u6D57\u6D58\u6D5B\u6D5D\u6D5F\u6D61\u6D62\u6D64\u6D65\u6D67\u6D68\u6D6B\u6D6C\u6D6D\u6D70\u6D71\u6D72\u6D73\u6D75\u6D76\u6D79\u6D7A\u6D7B\u6D7D\",4,\"\u6D83\u6D84\u6D86\u6D87\u6D8A\u6D8B\u6D8D\u6D8F\u6D90\u6D92\u6D96\",4,\"\u6D9C\u6DA2\u6DA5\u6DAC\u6DAD\u6DB0\u6DB1\u6DB3\u6DB4\u6DB6\u6DB7\u6DB9\",5,\"\u6DC1\u6DC2\u6DC3\u6DC8\u6DC9\u6DCA\"],[\"9c40\",\"\u6DCD\u6DCE\u6DCF\u6DD0\u6DD2\u6DD3\u6DD4\u6DD5\u6DD7\u6DDA\u6DDB\u6DDC\u6DDF\u6DE2\u6DE3\u6DE5\u6DE7\u6DE8\u6DE9\u6DEA\u6DED\u6DEF\u6DF0\u6DF2\u6DF4\u6DF5\u6DF6\u6DF8\u6DFA\u6DFD\",7,\"\u6E06\u6E07\u6E08\u6E09\u6E0B\u6E0F\u6E12\u6E13\u6E15\u6E18\u6E19\u6E1B\u6E1C\u6E1E\u6E1F\u6E22\u6E26\u6E27\u6E28\u6E2A\u6E2C\u6E2E\u6E30\u6E31\u6E33\u6E35\"],[\"9c80\",\"\u6E36\u6E37\u6E39\u6E3B\",7,\"\u6E45\",7,\"\u6E4F\u6E50\u6E51\u6E52\u6E55\u6E57\u6E59\u6E5A\u6E5C\u6E5D\u6E5E\u6E60\",10,\"\u6E6C\u6E6D\u6E6F\",14,\"\u6E80\u6E81\u6E82\u6E84\u6E87\u6E88\u6E8A\",4,\"\u6E91\",6,\"\u6E99\u6E9A\u6E9B\u6E9D\u6E9E\u6EA0\u6EA1\u6EA3\u6EA4\u6EA6\u6EA8\u6EA9\u6EAB\u6EAC\u6EAD\u6EAE\u6EB0\u6EB3\u6EB5\u6EB8\u6EB9\u6EBC\u6EBE\u6EBF\u6EC0\u6EC3\u6EC4\u6EC5\u6EC6\u6EC8\u6EC9\u6ECA\u6ECC\u6ECD\u6ECE\u6ED0\u6ED2\u6ED6\u6ED8\u6ED9\u6EDB\u6EDC\u6EDD\u6EE3\u6EE7\u6EEA\",5],[\"9d40\",\"\u6EF0\u6EF1\u6EF2\u6EF3\u6EF5\u6EF6\u6EF7\u6EF8\u6EFA\",7,\"\u6F03\u6F04\u6F05\u6F07\u6F08\u6F0A\",4,\"\u6F10\u6F11\u6F12\u6F16\",9,\"\u6F21\u6F22\u6F23\u6F25\u6F26\u6F27\u6F28\u6F2C\u6F2E\u6F30\u6F32\u6F34\u6F35\u6F37\",6,\"\u6F3F\u6F40\u6F41\u6F42\"],[\"9d80\",\"\u6F43\u6F44\u6F45\u6F48\u6F49\u6F4A\u6F4C\u6F4E\",9,\"\u6F59\u6F5A\u6F5B\u6F5D\u6F5F\u6F60\u6F61\u6F63\u6F64\u6F65\u6F67\",5,\"\u6F6F\u6F70\u6F71\u6F73\u6F75\u6F76\u6F77\u6F79\u6F7B\u6F7D\",6,\"\u6F85\u6F86\u6F87\u6F8A\u6F8B\u6F8F\",12,\"\u6F9D\u6F9E\u6F9F\u6FA0\u6FA2\",4,\"\u6FA8\",10,\"\u6FB4\u6FB5\u6FB7\u6FB8\u6FBA\",5,\"\u6FC1\u6FC3\",5,\"\u6FCA\",6,\"\u6FD3\",10,\"\u6FDF\u6FE2\u6FE3\u6FE4\u6FE5\"],[\"9e40\",\"\u6FE6\",7,\"\u6FF0\",32,\"\u7012\",7,\"\u701C\",6,\"\u7024\",6],[\"9e80\",\"\u702B\",9,\"\u7036\u7037\u7038\u703A\",17,\"\u704D\u704E\u7050\",13,\"\u705F\",11,\"\u706E\u7071\u7072\u7073\u7074\u7077\u7079\u707A\u707B\u707D\u7081\u7082\u7083\u7084\u7086\u7087\u7088\u708B\u708C\u708D\u708F\u7090\u7091\u7093\u7097\u7098\u709A\u709B\u709E\",12,\"\u70B0\u70B2\u70B4\u70B5\u70B6\u70BA\u70BE\u70BF\u70C4\u70C5\u70C6\u70C7\u70C9\u70CB\",12,\"\u70DA\"],[\"9f40\",\"\u70DC\u70DD\u70DE\u70E0\u70E1\u70E2\u70E3\u70E5\u70EA\u70EE\u70F0\",6,\"\u70F8\u70FA\u70FB\u70FC\u70FE\",10,\"\u710B\",4,\"\u7111\u7112\u7114\u7117\u711B\",10,\"\u7127\",7,\"\u7132\u7133\u7134\"],[\"9f80\",\"\u7135\u7137\",13,\"\u7146\u7147\u7148\u7149\u714B\u714D\u714F\",12,\"\u715D\u715F\",4,\"\u7165\u7169\",4,\"\u716F\u7170\u7171\u7174\u7175\u7176\u7177\u7179\u717B\u717C\u717E\",5,\"\u7185\",4,\"\u718B\u718C\u718D\u718E\u7190\u7191\u7192\u7193\u7195\u7196\u7197\u719A\",4,\"\u71A1\",6,\"\u71A9\u71AA\u71AB\u71AD\",5,\"\u71B4\u71B6\u71B7\u71B8\u71BA\",8,\"\u71C4\",9,\"\u71CF\",4],[\"a040\",\"\u71D6\",9,\"\u71E1\u71E2\u71E3\u71E4\u71E6\u71E8\",5,\"\u71EF\",9,\"\u71FA\",11,\"\u7207\",19],[\"a080\",\"\u721B\u721C\u721E\",9,\"\u7229\u722B\u722D\u722E\u722F\u7232\u7233\u7234\u723A\u723C\u723E\u7240\",6,\"\u7249\u724A\u724B\u724E\u724F\u7250\u7251\u7253\u7254\u7255\u7257\u7258\u725A\u725C\u725E\u7260\u7263\u7264\u7265\u7268\u726A\u726B\u726C\u726D\u7270\u7271\u7273\u7274\u7276\u7277\u7278\u727B\u727C\u727D\u7282\u7283\u7285\",4,\"\u728C\u728E\u7290\u7291\u7293\",11,\"\u72A0\",11,\"\u72AE\u72B1\u72B2\u72B3\u72B5\u72BA\",6,\"\u72C5\u72C6\u72C7\u72C9\u72CA\u72CB\u72CC\u72CF\u72D1\u72D3\u72D4\u72D5\u72D6\u72D8\u72DA\u72DB\"],[\"a1a1\",\"\u3000\u3001\u3002\xB7\u02C9\u02C7\xA8\u3003\u3005\u2014\uFF5E\u2016\u2026\u2018\u2019\u201C\u201D\u3014\u3015\u3008\",7,\"\u3016\u3017\u3010\u3011\xB1\xD7\xF7\u2236\u2227\u2228\u2211\u220F\u222A\u2229\u2208\u2237\u221A\u22A5\u2225\u2220\u2312\u2299\u222B\u222E\u2261\u224C\u2248\u223D\u221D\u2260\u226E\u226F\u2264\u2265\u221E\u2235\u2234\u2642\u2640\xB0\u2032\u2033\u2103\uFF04\xA4\uFFE0\uFFE1\u2030\xA7\u2116\u2606\u2605\u25CB\u25CF\u25CE\u25C7\u25C6\u25A1\u25A0\u25B3\u25B2\u203B\u2192\u2190\u2191\u2193\u3013\"],[\"a2a1\",\"\u2170\",9],[\"a2b1\",\"\u2488\",19,\"\u2474\",19,\"\u2460\",9],[\"a2e5\",\"\u3220\",9],[\"a2f1\",\"\u2160\",11],[\"a3a1\",\"\uFF01\uFF02\uFF03\uFFE5\uFF05\",88,\"\uFFE3\"],[\"a4a1\",\"\u3041\",82],[\"a5a1\",\"\u30A1\",85],[\"a6a1\",\"\u0391\",16,\"\u03A3\",6],[\"a6c1\",\"\u03B1\",16,\"\u03C3\",6],[\"a6e0\",\"\uFE35\uFE36\uFE39\uFE3A\uFE3F\uFE40\uFE3D\uFE3E\uFE41\uFE42\uFE43\uFE44\"],[\"a6ee\",\"\uFE3B\uFE3C\uFE37\uFE38\uFE31\"],[\"a6f4\",\"\uFE33\uFE34\"],[\"a7a1\",\"\u0410\",5,\"\u0401\u0416\",25],[\"a7d1\",\"\u0430\",5,\"\u0451\u0436\",25],[\"a840\",\"\u02CA\u02CB\u02D9\u2013\u2015\u2025\u2035\u2105\u2109\u2196\u2197\u2198\u2199\u2215\u221F\u2223\u2252\u2266\u2267\u22BF\u2550\",35,\"\u2581\",6],[\"a880\",\"\u2588\",7,\"\u2593\u2594\u2595\u25BC\u25BD\u25E2\u25E3\u25E4\u25E5\u2609\u2295\u3012\u301D\u301E\"],[\"a8a1\",\"\u0101\xE1\u01CE\xE0\u0113\xE9\u011B\xE8\u012B\xED\u01D0\xEC\u014D\xF3\u01D2\xF2\u016B\xFA\u01D4\xF9\u01D6\u01D8\u01DA\u01DC\xFC\xEA\u0251\"],[\"a8bd\",\"\u0144\u0148\"],[\"a8c0\",\"\u0261\"],[\"a8c5\",\"\u3105\",36],[\"a940\",\"\u3021\",8,\"\u32A3\u338E\u338F\u339C\u339D\u339E\u33A1\u33C4\u33CE\u33D1\u33D2\u33D5\uFE30\uFFE2\uFFE4\"],[\"a959\",\"\u2121\u3231\"],[\"a95c\",\"\u2010\"],[\"a960\",\"\u30FC\u309B\u309C\u30FD\u30FE\u3006\u309D\u309E\uFE49\",9,\"\uFE54\uFE55\uFE56\uFE57\uFE59\",8],[\"a980\",\"\uFE62\",4,\"\uFE68\uFE69\uFE6A\uFE6B\"],[\"a996\",\"\u3007\"],[\"a9a4\",\"\u2500\",75],[\"aa40\",\"\u72DC\u72DD\u72DF\u72E2\",5,\"\u72EA\u72EB\u72F5\u72F6\u72F9\u72FD\u72FE\u72FF\u7300\u7302\u7304\",5,\"\u730B\u730C\u730D\u730F\u7310\u7311\u7312\u7314\u7318\u7319\u731A\u731F\u7320\u7323\u7324\u7326\u7327\u7328\u732D\u732F\u7330\u7332\u7333\u7335\u7336\u733A\u733B\u733C\u733D\u7340\",8],[\"aa80\",\"\u7349\u734A\u734B\u734C\u734E\u734F\u7351\u7353\u7354\u7355\u7356\u7358\",7,\"\u7361\",10,\"\u736E\u7370\u7371\"],[\"ab40\",\"\u7372\",11,\"\u737F\",4,\"\u7385\u7386\u7388\u738A\u738C\u738D\u738F\u7390\u7392\u7393\u7394\u7395\u7397\u7398\u7399\u739A\u739C\u739D\u739E\u73A0\u73A1\u73A3\",5,\"\u73AA\u73AC\u73AD\u73B1\u73B4\u73B5\u73B6\u73B8\u73B9\u73BC\u73BD\u73BE\u73BF\u73C1\u73C3\",4],[\"ab80\",\"\u73CB\u73CC\u73CE\u73D2\",6,\"\u73DA\u73DB\u73DC\u73DD\u73DF\u73E1\u73E2\u73E3\u73E4\u73E6\u73E8\u73EA\u73EB\u73EC\u73EE\u73EF\u73F0\u73F1\u73F3\",4],[\"ac40\",\"\u73F8\",10,\"\u7404\u7407\u7408\u740B\u740C\u740D\u740E\u7411\",8,\"\u741C\",5,\"\u7423\u7424\u7427\u7429\u742B\u742D\u742F\u7431\u7432\u7437\",4,\"\u743D\u743E\u743F\u7440\u7442\",11],[\"ac80\",\"\u744E\",6,\"\u7456\u7458\u745D\u7460\",12,\"\u746E\u746F\u7471\",4,\"\u7478\u7479\u747A\"],[\"ad40\",\"\u747B\u747C\u747D\u747F\u7482\u7484\u7485\u7486\u7488\u7489\u748A\u748C\u748D\u748F\u7491\",10,\"\u749D\u749F\",7,\"\u74AA\",15,\"\u74BB\",12],[\"ad80\",\"\u74C8\",9,\"\u74D3\",8,\"\u74DD\u74DF\u74E1\u74E5\u74E7\",6,\"\u74F0\u74F1\u74F2\"],[\"ae40\",\"\u74F3\u74F5\u74F8\",6,\"\u7500\u7501\u7502\u7503\u7505\",7,\"\u750E\u7510\u7512\u7514\u7515\u7516\u7517\u751B\u751D\u751E\u7520\",4,\"\u7526\u7527\u752A\u752E\u7534\u7536\u7539\u753C\u753D\u753F\u7541\u7542\u7543\u7544\u7546\u7547\u7549\u754A\u754D\u7550\u7551\u7552\u7553\u7555\u7556\u7557\u7558\"],[\"ae80\",\"\u755D\",7,\"\u7567\u7568\u7569\u756B\",6,\"\u7573\u7575\u7576\u7577\u757A\",4,\"\u7580\u7581\u7582\u7584\u7585\u7587\"],[\"af40\",\"\u7588\u7589\u758A\u758C\u758D\u758E\u7590\u7593\u7595\u7598\u759B\u759C\u759E\u75A2\u75A6\",4,\"\u75AD\u75B6\u75B7\u75BA\u75BB\u75BF\u75C0\u75C1\u75C6\u75CB\u75CC\u75CE\u75CF\u75D0\u75D1\u75D3\u75D7\u75D9\u75DA\u75DC\u75DD\u75DF\u75E0\u75E1\u75E5\u75E9\u75EC\u75ED\u75EE\u75EF\u75F2\u75F3\u75F5\u75F6\u75F7\u75F8\u75FA\u75FB\u75FD\u75FE\u7602\u7604\u7606\u7607\"],[\"af80\",\"\u7608\u7609\u760B\u760D\u760E\u760F\u7611\u7612\u7613\u7614\u7616\u761A\u761C\u761D\u761E\u7621\u7623\u7627\u7628\u762C\u762E\u762F\u7631\u7632\u7636\u7637\u7639\u763A\u763B\u763D\u7641\u7642\u7644\"],[\"b040\",\"\u7645\",6,\"\u764E\",5,\"\u7655\u7657\",4,\"\u765D\u765F\u7660\u7661\u7662\u7664\",6,\"\u766C\u766D\u766E\u7670\",7,\"\u7679\u767A\u767C\u767F\u7680\u7681\u7683\u7685\u7689\u768A\u768C\u768D\u768F\u7690\u7692\u7694\u7695\u7697\u7698\u769A\u769B\"],[\"b080\",\"\u769C\",7,\"\u76A5\",8,\"\u76AF\u76B0\u76B3\u76B5\",9,\"\u76C0\u76C1\u76C3\u554A\u963F\u57C3\u6328\u54CE\u5509\u54C0\u7691\u764C\u853C\u77EE\u827E\u788D\u7231\u9698\u978D\u6C28\u5B89\u4FFA\u6309\u6697\u5CB8\u80FA\u6848\u80AE\u6602\u76CE\u51F9\u6556\u71AC\u7FF1\u8884\u50B2\u5965\u61CA\u6FB3\u82AD\u634C\u6252\u53ED\u5427\u7B06\u516B\u75A4\u5DF4\u62D4\u8DCB\u9776\u628A\u8019\u575D\u9738\u7F62\u7238\u767D\u67CF\u767E\u6446\u4F70\u8D25\u62DC\u7A17\u6591\u73ED\u642C\u6273\u822C\u9881\u677F\u7248\u626E\u62CC\u4F34\u74E3\u534A\u529E\u7ECA\u90A6\u5E2E\u6886\u699C\u8180\u7ED1\u68D2\u78C5\u868C\u9551\u508D\u8C24\u82DE\u80DE\u5305\u8912\u5265\"],[\"b140\",\"\u76C4\u76C7\u76C9\u76CB\u76CC\u76D3\u76D5\u76D9\u76DA\u76DC\u76DD\u76DE\u76E0\",4,\"\u76E6\",7,\"\u76F0\u76F3\u76F5\u76F6\u76F7\u76FA\u76FB\u76FD\u76FF\u7700\u7702\u7703\u7705\u7706\u770A\u770C\u770E\",10,\"\u771B\u771C\u771D\u771E\u7721\u7723\u7724\u7725\u7727\u772A\u772B\"],[\"b180\",\"\u772C\u772E\u7730\",4,\"\u7739\u773B\u773D\u773E\u773F\u7742\u7744\u7745\u7746\u7748\",7,\"\u7752\",7,\"\u775C\u8584\u96F9\u4FDD\u5821\u9971\u5B9D\u62B1\u62A5\u66B4\u8C79\u9C8D\u7206\u676F\u7891\u60B2\u5351\u5317\u8F88\u80CC\u8D1D\u94A1\u500D\u72C8\u5907\u60EB\u7119\u88AB\u5954\u82EF\u672C\u7B28\u5D29\u7EF7\u752D\u6CF5\u8E66\u8FF8\u903C\u9F3B\u6BD4\u9119\u7B14\u5F7C\u78A7\u84D6\u853D\u6BD5\u6BD9\u6BD6\u5E01\u5E87\u75F9\u95ED\u655D\u5F0A\u5FC5\u8F9F\u58C1\u81C2\u907F\u965B\u97AD\u8FB9\u7F16\u8D2C\u6241\u4FBF\u53D8\u535E\u8FA8\u8FA9\u8FAB\u904D\u6807\u5F6A\u8198\u8868\u9CD6\u618B\u522B\u762A\u5F6C\u658C\u6FD2\u6EE8\u5BBE\u6448\u5175\u51B0\u67C4\u4E19\u79C9\u997C\u70B3\"],[\"b240\",\"\u775D\u775E\u775F\u7760\u7764\u7767\u7769\u776A\u776D\",11,\"\u777A\u777B\u777C\u7781\u7782\u7783\u7786\",5,\"\u778F\u7790\u7793\",11,\"\u77A1\u77A3\u77A4\u77A6\u77A8\u77AB\u77AD\u77AE\u77AF\u77B1\u77B2\u77B4\u77B6\",4],[\"b280\",\"\u77BC\u77BE\u77C0\",12,\"\u77CE\",8,\"\u77D8\u77D9\u77DA\u77DD\",4,\"\u77E4\u75C5\u5E76\u73BB\u83E0\u64AD\u62E8\u94B5\u6CE2\u535A\u52C3\u640F\u94C2\u7B94\u4F2F\u5E1B\u8236\u8116\u818A\u6E24\u6CCA\u9A73\u6355\u535C\u54FA\u8865\u57E0\u4E0D\u5E03\u6B65\u7C3F\u90E8\u6016\u64E6\u731C\u88C1\u6750\u624D\u8D22\u776C\u8E29\u91C7\u5F69\u83DC\u8521\u9910\u53C2\u8695\u6B8B\u60ED\u60E8\u707F\u82CD\u8231\u4ED3\u6CA7\u85CF\u64CD\u7CD9\u69FD\u66F9\u8349\u5395\u7B56\u4FA7\u518C\u6D4B\u5C42\u8E6D\u63D2\u53C9\u832C\u8336\u67E5\u78B4\u643D\u5BDF\u5C94\u5DEE\u8BE7\u62C6\u67F4\u8C7A\u6400\u63BA\u8749\u998B\u8C17\u7F20\u94F2\u4EA7\u9610\u98A4\u660C\u7316\"],[\"b340\",\"\u77E6\u77E8\u77EA\u77EF\u77F0\u77F1\u77F2\u77F4\u77F5\u77F7\u77F9\u77FA\u77FB\u77FC\u7803\",5,\"\u780A\u780B\u780E\u780F\u7810\u7813\u7815\u7819\u781B\u781E\u7820\u7821\u7822\u7824\u7828\u782A\u782B\u782E\u782F\u7831\u7832\u7833\u7835\u7836\u783D\u783F\u7841\u7842\u7843\u7844\u7846\u7848\u7849\u784A\u784B\u784D\u784F\u7851\u7853\u7854\u7858\u7859\u785A\"],[\"b380\",\"\u785B\u785C\u785E\",11,\"\u786F\",7,\"\u7878\u7879\u787A\u787B\u787D\",6,\"\u573A\u5C1D\u5E38\u957F\u507F\u80A0\u5382\u655E\u7545\u5531\u5021\u8D85\u6284\u949E\u671D\u5632\u6F6E\u5DE2\u5435\u7092\u8F66\u626F\u64A4\u63A3\u5F7B\u6F88\u90F4\u81E3\u8FB0\u5C18\u6668\u5FF1\u6C89\u9648\u8D81\u886C\u6491\u79F0\u57CE\u6A59\u6210\u5448\u4E58\u7A0B\u60E9\u6F84\u8BDA\u627F\u901E\u9A8B\u79E4\u5403\u75F4\u6301\u5319\u6C60\u8FDF\u5F1B\u9A70\u803B\u9F7F\u4F88\u5C3A\u8D64\u7FC5\u65A5\u70BD\u5145\u51B2\u866B\u5D07\u5BA0\u62BD\u916C\u7574\u8E0C\u7A20\u6101\u7B79\u4EC7\u7EF8\u7785\u4E11\u81ED\u521D\u51FA\u6A71\u53A8\u8E87\u9504\u96CF\u6EC1\u9664\u695A\"],[\"b440\",\"\u7884\u7885\u7886\u7888\u788A\u788B\u788F\u7890\u7892\u7894\u7895\u7896\u7899\u789D\u789E\u78A0\u78A2\u78A4\u78A6\u78A8\",7,\"\u78B5\u78B6\u78B7\u78B8\u78BA\u78BB\u78BC\u78BD\u78BF\u78C0\u78C2\u78C3\u78C4\u78C6\u78C7\u78C8\u78CC\u78CD\u78CE\u78CF\u78D1\u78D2\u78D3\u78D6\u78D7\u78D8\u78DA\",9],[\"b480\",\"\u78E4\u78E5\u78E6\u78E7\u78E9\u78EA\u78EB\u78ED\",4,\"\u78F3\u78F5\u78F6\u78F8\u78F9\u78FB\",5,\"\u7902\u7903\u7904\u7906\",6,\"\u7840\u50A8\u77D7\u6410\u89E6\u5904\u63E3\u5DDD\u7A7F\u693D\u4F20\u8239\u5598\u4E32\u75AE\u7A97\u5E62\u5E8A\u95EF\u521B\u5439\u708A\u6376\u9524\u5782\u6625\u693F\u9187\u5507\u6DF3\u7EAF\u8822\u6233\u7EF0\u75B5\u8328\u78C1\u96CC\u8F9E\u6148\u74F7\u8BCD\u6B64\u523A\u8D50\u6B21\u806A\u8471\u56F1\u5306\u4ECE\u4E1B\u51D1\u7C97\u918B\u7C07\u4FC3\u8E7F\u7BE1\u7A9C\u6467\u5D14\u50AC\u8106\u7601\u7CB9\u6DEC\u7FE0\u6751\u5B58\u5BF8\u78CB\u64AE\u6413\u63AA\u632B\u9519\u642D\u8FBE\u7B54\u7629\u6253\u5927\u5446\u6B79\u50A3\u6234\u5E26\u6B86\u4EE3\u8D37\u888B\u5F85\u902E\"],[\"b540\",\"\u790D\",5,\"\u7914\",9,\"\u791F\",4,\"\u7925\",14,\"\u7935\",4,\"\u793D\u793F\u7942\u7943\u7944\u7945\u7947\u794A\",8,\"\u7954\u7955\u7958\u7959\u7961\u7963\"],[\"b580\",\"\u7964\u7966\u7969\u796A\u796B\u796C\u796E\u7970\",6,\"\u7979\u797B\",4,\"\u7982\u7983\u7986\u7987\u7988\u7989\u798B\u798C\u798D\u798E\u7990\u7991\u7992\u6020\u803D\u62C5\u4E39\u5355\u90F8\u63B8\u80C6\u65E6\u6C2E\u4F46\u60EE\u6DE1\u8BDE\u5F39\u86CB\u5F53\u6321\u515A\u8361\u6863\u5200\u6363\u8E48\u5012\u5C9B\u7977\u5BFC\u5230\u7A3B\u60BC\u9053\u76D7\u5FB7\u5F97\u7684\u8E6C\u706F\u767B\u7B49\u77AA\u51F3\u9093\u5824\u4F4E\u6EF4\u8FEA\u654C\u7B1B\u72C4\u6DA4\u7FDF\u5AE1\u62B5\u5E95\u5730\u8482\u7B2C\u5E1D\u5F1F\u9012\u7F14\u98A0\u6382\u6EC7\u7898\u70B9\u5178\u975B\u57AB\u7535\u4F43\u7538\u5E97\u60E6\u5960\u6DC0\u6BBF\u7889\u53FC\u96D5\u51CB\u5201\u6389\u540A\u9493\u8C03\u8DCC\u7239\u789F\u8776\u8FED\u8C0D\u53E0\"],[\"b640\",\"\u7993\",6,\"\u799B\",11,\"\u79A8\",10,\"\u79B4\",4,\"\u79BC\u79BF\u79C2\u79C4\u79C5\u79C7\u79C8\u79CA\u79CC\u79CE\u79CF\u79D0\u79D3\u79D4\u79D6\u79D7\u79D9\",5,\"\u79E0\u79E1\u79E2\u79E5\u79E8\u79EA\"],[\"b680\",\"\u79EC\u79EE\u79F1\",6,\"\u79F9\u79FA\u79FC\u79FE\u79FF\u7A01\u7A04\u7A05\u7A07\u7A08\u7A09\u7A0A\u7A0C\u7A0F\",4,\"\u7A15\u7A16\u7A18\u7A19\u7A1B\u7A1C\u4E01\u76EF\u53EE\u9489\u9876\u9F0E\u952D\u5B9A\u8BA2\u4E22\u4E1C\u51AC\u8463\u61C2\u52A8\u680B\u4F97\u606B\u51BB\u6D1E\u515C\u6296\u6597\u9661\u8C46\u9017\u75D8\u90FD\u7763\u6BD2\u728A\u72EC\u8BFB\u5835\u7779\u8D4C\u675C\u9540\u809A\u5EA6\u6E21\u5992\u7AEF\u77ED\u953B\u6BB5\u65AD\u7F0E\u5806\u5151\u961F\u5BF9\u58A9\u5428\u8E72\u6566\u987F\u56E4\u949D\u76FE\u9041\u6387\u54C6\u591A\u593A\u579B\u8EB2\u6735\u8DFA\u8235\u5241\u60F0\u5815\u86FE\u5CE8\u9E45\u4FC4\u989D\u8BB9\u5A25\u6076\u5384\u627C\u904F\u9102\u997F\u6069\u800C\u513F\u8033\u5C14\u9975\u6D31\u4E8C\"],[\"b740\",\"\u7A1D\u7A1F\u7A21\u7A22\u7A24\",14,\"\u7A34\u7A35\u7A36\u7A38\u7A3A\u7A3E\u7A40\",5,\"\u7A47\",9,\"\u7A52\",4,\"\u7A58\",16],[\"b780\",\"\u7A69\",6,\"\u7A71\u7A72\u7A73\u7A75\u7A7B\u7A7C\u7A7D\u7A7E\u7A82\u7A85\u7A87\u7A89\u7A8A\u7A8B\u7A8C\u7A8E\u7A8F\u7A90\u7A93\u7A94\u7A99\u7A9A\u7A9B\u7A9E\u7AA1\u7AA2\u8D30\u53D1\u7F5A\u7B4F\u4F10\u4E4F\u9600\u6CD5\u73D0\u85E9\u5E06\u756A\u7FFB\u6A0A\u77FE\u9492\u7E41\u51E1\u70E6\u53CD\u8FD4\u8303\u8D29\u72AF\u996D\u6CDB\u574A\u82B3\u65B9\u80AA\u623F\u9632\u59A8\u4EFF\u8BBF\u7EBA\u653E\u83F2\u975E\u5561\u98DE\u80A5\u532A\u8BFD\u5420\u80BA\u5E9F\u6CB8\u8D39\u82AC\u915A\u5429\u6C1B\u5206\u7EB7\u575F\u711A\u6C7E\u7C89\u594B\u4EFD\u5FFF\u6124\u7CAA\u4E30\u5C01\u67AB\u8702\u5CF0\u950B\u98CE\u75AF\u70FD\u9022\u51AF\u7F1D\u8BBD\u5949\u51E4\u4F5B\u5426\u592B\u6577\u80A4\u5B75\u6276\u62C2\u8F90\u5E45\u6C1F\u7B26\u4F0F\u4FD8\u670D\"],[\"b840\",\"\u7AA3\u7AA4\u7AA7\u7AA9\u7AAA\u7AAB\u7AAE\",4,\"\u7AB4\",10,\"\u7AC0\",10,\"\u7ACC\",9,\"\u7AD7\u7AD8\u7ADA\u7ADB\u7ADC\u7ADD\u7AE1\u7AE2\u7AE4\u7AE7\",5,\"\u7AEE\u7AF0\u7AF1\u7AF2\u7AF3\"],[\"b880\",\"\u7AF4\",4,\"\u7AFB\u7AFC\u7AFE\u7B00\u7B01\u7B02\u7B05\u7B07\u7B09\u7B0C\u7B0D\u7B0E\u7B10\u7B12\u7B13\u7B16\u7B17\u7B18\u7B1A\u7B1C\u7B1D\u7B1F\u7B21\u7B22\u7B23\u7B27\u7B29\u7B2D\u6D6E\u6DAA\u798F\u88B1\u5F17\u752B\u629A\u8F85\u4FEF\u91DC\u65A7\u812F\u8151\u5E9C\u8150\u8D74\u526F\u8986\u8D4B\u590D\u5085\u4ED8\u961C\u7236\u8179\u8D1F\u5BCC\u8BA3\u9644\u5987\u7F1A\u5490\u5676\u560E\u8BE5\u6539\u6982\u9499\u76D6\u6E89\u5E72\u7518\u6746\u67D1\u7AFF\u809D\u8D76\u611F\u79C6\u6562\u8D63\u5188\u521A\u94A2\u7F38\u809B\u7EB2\u5C97\u6E2F\u6760\u7BD9\u768B\u9AD8\u818F\u7F94\u7CD5\u641E\u9550\u7A3F\u544A\u54E5\u6B4C\u6401\u6208\u9E3D\u80F3\u7599\u5272\u9769\u845B\u683C\u86E4\u9601\u9694\u94EC\u4E2A\u5404\u7ED9\u6839\u8DDF\u8015\u66F4\u5E9A\u7FB9\"],[\"b940\",\"\u7B2F\u7B30\u7B32\u7B34\u7B35\u7B36\u7B37\u7B39\u7B3B\u7B3D\u7B3F\",5,\"\u7B46\u7B48\u7B4A\u7B4D\u7B4E\u7B53\u7B55\u7B57\u7B59\u7B5C\u7B5E\u7B5F\u7B61\u7B63\",10,\"\u7B6F\u7B70\u7B73\u7B74\u7B76\u7B78\u7B7A\u7B7C\u7B7D\u7B7F\u7B81\u7B82\u7B83\u7B84\u7B86\",6,\"\u7B8E\u7B8F\"],[\"b980\",\"\u7B91\u7B92\u7B93\u7B96\u7B98\u7B99\u7B9A\u7B9B\u7B9E\u7B9F\u7BA0\u7BA3\u7BA4\u7BA5\u7BAE\u7BAF\u7BB0\u7BB2\u7BB3\u7BB5\u7BB6\u7BB7\u7BB9\",7,\"\u7BC2\u7BC3\u7BC4\u57C2\u803F\u6897\u5DE5\u653B\u529F\u606D\u9F9A\u4F9B\u8EAC\u516C\u5BAB\u5F13\u5DE9\u6C5E\u62F1\u8D21\u5171\u94A9\u52FE\u6C9F\u82DF\u72D7\u57A2\u6784\u8D2D\u591F\u8F9C\u83C7\u5495\u7B8D\u4F30\u6CBD\u5B64\u59D1\u9F13\u53E4\u86CA\u9AA8\u8C37\u80A1\u6545\u987E\u56FA\u96C7\u522E\u74DC\u5250\u5BE1\u6302\u8902\u4E56\u62D0\u602A\u68FA\u5173\u5B98\u51A0\u89C2\u7BA1\u9986\u7F50\u60EF\u704C\u8D2F\u5149\u5E7F\u901B\u7470\u89C4\u572D\u7845\u5F52\u9F9F\u95FA\u8F68\u9B3C\u8BE1\u7678\u6842\u67DC\u8DEA\u8D35\u523D\u8F8A\u6EDA\u68CD\u9505\u90ED\u56FD\u679C\u88F9\u8FC7\u54C8\"],[\"ba40\",\"\u7BC5\u7BC8\u7BC9\u7BCA\u7BCB\u7BCD\u7BCE\u7BCF\u7BD0\u7BD2\u7BD4\",4,\"\u7BDB\u7BDC\u7BDE\u7BDF\u7BE0\u7BE2\u7BE3\u7BE4\u7BE7\u7BE8\u7BE9\u7BEB\u7BEC\u7BED\u7BEF\u7BF0\u7BF2\",4,\"\u7BF8\u7BF9\u7BFA\u7BFB\u7BFD\u7BFF\",7,\"\u7C08\u7C09\u7C0A\u7C0D\u7C0E\u7C10\",5,\"\u7C17\u7C18\u7C19\"],[\"ba80\",\"\u7C1A\",4,\"\u7C20\",5,\"\u7C28\u7C29\u7C2B\",12,\"\u7C39\",5,\"\u7C42\u9AB8\u5B69\u6D77\u6C26\u4EA5\u5BB3\u9A87\u9163\u61A8\u90AF\u97E9\u542B\u6DB5\u5BD2\u51FD\u558A\u7F55\u7FF0\u64BC\u634D\u65F1\u61BE\u608D\u710A\u6C57\u6C49\u592F\u676D\u822A\u58D5\u568E\u8C6A\u6BEB\u90DD\u597D\u8017\u53F7\u6D69\u5475\u559D\u8377\u83CF\u6838\u79BE\u548C\u4F55\u5408\u76D2\u8C89\u9602\u6CB3\u6DB8\u8D6B\u8910\u9E64\u8D3A\u563F\u9ED1\u75D5\u5F88\u72E0\u6068\u54FC\u4EA8\u6A2A\u8861\u6052\u8F70\u54C4\u70D8\u8679\u9E3F\u6D2A\u5B8F\u5F18\u7EA2\u5589\u4FAF\u7334\u543C\u539A\u5019\u540E\u547C\u4E4E\u5FFD\u745A\u58F6\u846B\u80E1\u8774\u72D0\u7CCA\u6E56\"],[\"bb40\",\"\u7C43\",9,\"\u7C4E\",36,\"\u7C75\",5,\"\u7C7E\",9],[\"bb80\",\"\u7C88\u7C8A\",6,\"\u7C93\u7C94\u7C96\u7C99\u7C9A\u7C9B\u7CA0\u7CA1\u7CA3\u7CA6\u7CA7\u7CA8\u7CA9\u7CAB\u7CAC\u7CAD\u7CAF\u7CB0\u7CB4\",4,\"\u7CBA\u7CBB\u5F27\u864E\u552C\u62A4\u4E92\u6CAA\u6237\u82B1\u54D7\u534E\u733E\u6ED1\u753B\u5212\u5316\u8BDD\u69D0\u5F8A\u6000\u6DEE\u574F\u6B22\u73AF\u6853\u8FD8\u7F13\u6362\u60A3\u5524\u75EA\u8C62\u7115\u6DA3\u5BA6\u5E7B\u8352\u614C\u9EC4\u78FA\u8757\u7C27\u7687\u51F0\u60F6\u714C\u6643\u5E4C\u604D\u8C0E\u7070\u6325\u8F89\u5FBD\u6062\u86D4\u56DE\u6BC1\u6094\u6167\u5349\u60E0\u6666\u8D3F\u79FD\u4F1A\u70E9\u6C47\u8BB3\u8BF2\u7ED8\u8364\u660F\u5A5A\u9B42\u6D51\u6DF7\u8C41\u6D3B\u4F19\u706B\u83B7\u6216\u60D1\u970D\u8D27\u7978\u51FB\u573E\u57FA\u673A\u7578\u7A3D\u79EF\u7B95\"],[\"bc40\",\"\u7CBF\u7CC0\u7CC2\u7CC3\u7CC4\u7CC6\u7CC9\u7CCB\u7CCE\",6,\"\u7CD8\u7CDA\u7CDB\u7CDD\u7CDE\u7CE1\",6,\"\u7CE9\",5,\"\u7CF0\",7,\"\u7CF9\u7CFA\u7CFC\",13,\"\u7D0B\",5],[\"bc80\",\"\u7D11\",14,\"\u7D21\u7D23\u7D24\u7D25\u7D26\u7D28\u7D29\u7D2A\u7D2C\u7D2D\u7D2E\u7D30\",6,\"\u808C\u9965\u8FF9\u6FC0\u8BA5\u9E21\u59EC\u7EE9\u7F09\u5409\u6781\u68D8\u8F91\u7C4D\u96C6\u53CA\u6025\u75BE\u6C72\u5373\u5AC9\u7EA7\u6324\u51E0\u810A\u5DF1\u84DF\u6280\u5180\u5B63\u4F0E\u796D\u5242\u60B8\u6D4E\u5BC4\u5BC2\u8BA1\u8BB0\u65E2\u5FCC\u9645\u5993\u7EE7\u7EAA\u5609\u67B7\u5939\u4F73\u5BB6\u52A0\u835A\u988A\u8D3E\u7532\u94BE\u5047\u7A3C\u4EF7\u67B6\u9A7E\u5AC1\u6B7C\u76D1\u575A\u5C16\u7B3A\u95F4\u714E\u517C\u80A9\u8270\u5978\u7F04\u8327\u68C0\u67EC\u78B1\u7877\u62E3\u6361\u7B80\u4FED\u526A\u51CF\u8350\u69DB\u9274\u8DF5\u8D31\u89C1\u952E\u7BAD\u4EF6\"],[\"bd40\",\"\u7D37\",54,\"\u7D6F\",7],[\"bd80\",\"\u7D78\",32,\"\u5065\u8230\u5251\u996F\u6E10\u6E85\u6DA7\u5EFA\u50F5\u59DC\u5C06\u6D46\u6C5F\u7586\u848B\u6868\u5956\u8BB2\u5320\u9171\u964D\u8549\u6912\u7901\u7126\u80F6\u4EA4\u90CA\u6D47\u9A84\u5A07\u56BC\u6405\u94F0\u77EB\u4FA5\u811A\u72E1\u89D2\u997A\u7F34\u7EDE\u527F\u6559\u9175\u8F7F\u8F83\u53EB\u7A96\u63ED\u63A5\u7686\u79F8\u8857\u9636\u622A\u52AB\u8282\u6854\u6770\u6377\u776B\u7AED\u6D01\u7ED3\u89E3\u59D0\u6212\u85C9\u82A5\u754C\u501F\u4ECB\u75A5\u8BEB\u5C4A\u5DFE\u7B4B\u65A4\u91D1\u4ECA\u6D25\u895F\u7D27\u9526\u4EC5\u8C28\u8FDB\u9773\u664B\u7981\u8FD1\u70EC\u6D78\"],[\"be40\",\"\u7D99\",12,\"\u7DA7\",6,\"\u7DAF\",42],[\"be80\",\"\u7DDA\",32,\"\u5C3D\u52B2\u8346\u5162\u830E\u775B\u6676\u9CB8\u4EAC\u60CA\u7CBE\u7CB3\u7ECF\u4E95\u8B66\u666F\u9888\u9759\u5883\u656C\u955C\u5F84\u75C9\u9756\u7ADF\u7ADE\u51C0\u70AF\u7A98\u63EA\u7A76\u7EA0\u7396\u97ED\u4E45\u7078\u4E5D\u9152\u53A9\u6551\u65E7\u81FC\u8205\u548E\u5C31\u759A\u97A0\u62D8\u72D9\u75BD\u5C45\u9A79\u83CA\u5C40\u5480\u77E9\u4E3E\u6CAE\u805A\u62D2\u636E\u5DE8\u5177\u8DDD\u8E1E\u952F\u4FF1\u53E5\u60E7\u70AC\u5267\u6350\u9E43\u5A1F\u5026\u7737\u5377\u7EE2\u6485\u652B\u6289\u6398\u5014\u7235\u89C9\u51B3\u8BC0\u7EDD\u5747\u83CC\u94A7\u519B\u541B\u5CFB\"],[\"bf40\",\"\u7DFB\",62],[\"bf80\",\"\u7E3A\u7E3C\",4,\"\u7E42\",4,\"\u7E48\",21,\"\u4FCA\u7AE3\u6D5A\u90E1\u9A8F\u5580\u5496\u5361\u54AF\u5F00\u63E9\u6977\u51EF\u6168\u520A\u582A\u52D8\u574E\u780D\u770B\u5EB7\u6177\u7CE0\u625B\u6297\u4EA2\u7095\u8003\u62F7\u70E4\u9760\u5777\u82DB\u67EF\u68F5\u78D5\u9897\u79D1\u58F3\u54B3\u53EF\u6E34\u514B\u523B\u5BA2\u8BFE\u80AF\u5543\u57A6\u6073\u5751\u542D\u7A7A\u6050\u5B54\u63A7\u62A0\u53E3\u6263\u5BC7\u67AF\u54ED\u7A9F\u82E6\u9177\u5E93\u88E4\u5938\u57AE\u630E\u8DE8\u80EF\u5757\u7B77\u4FA9\u5FEB\u5BBD\u6B3E\u5321\u7B50\u72C2\u6846\u77FF\u7736\u65F7\u51B5\u4E8F\u76D4\u5CBF\u7AA5\u8475\u594E\u9B41\u5080\"],[\"c040\",\"\u7E5E\",35,\"\u7E83\",23,\"\u7E9C\u7E9D\u7E9E\"],[\"c080\",\"\u7EAE\u7EB4\u7EBB\u7EBC\u7ED6\u7EE4\u7EEC\u7EF9\u7F0A\u7F10\u7F1E\u7F37\u7F39\u7F3B\",6,\"\u7F43\u7F46\",9,\"\u7F52\u7F53\u9988\u6127\u6E83\u5764\u6606\u6346\u56F0\u62EC\u6269\u5ED3\u9614\u5783\u62C9\u5587\u8721\u814A\u8FA3\u5566\u83B1\u6765\u8D56\u84DD\u5A6A\u680F\u62E6\u7BEE\u9611\u5170\u6F9C\u8C30\u63FD\u89C8\u61D2\u7F06\u70C2\u6EE5\u7405\u6994\u72FC\u5ECA\u90CE\u6717\u6D6A\u635E\u52B3\u7262\u8001\u4F6C\u59E5\u916A\u70D9\u6D9D\u52D2\u4E50\u96F7\u956D\u857E\u78CA\u7D2F\u5121\u5792\u64C2\u808B\u7C7B\u6CEA\u68F1\u695E\u51B7\u5398\u68A8\u7281\u9ECE\u7BF1\u72F8\u79BB\u6F13\u7406\u674E\u91CC\u9CA4\u793C\u8389\u8354\u540F\u6817\u4E3D\u5389\u52B1\u783E\u5386\u5229\u5088\u4F8B\u4FD0\"],[\"c140\",\"\u7F56\u7F59\u7F5B\u7F5C\u7F5D\u7F5E\u7F60\u7F63\",4,\"\u7F6B\u7F6C\u7F6D\u7F6F\u7F70\u7F73\u7F75\u7F76\u7F77\u7F78\u7F7A\u7F7B\u7F7C\u7F7D\u7F7F\u7F80\u7F82\",7,\"\u7F8B\u7F8D\u7F8F\",4,\"\u7F95\",4,\"\u7F9B\u7F9C\u7FA0\u7FA2\u7FA3\u7FA5\u7FA6\u7FA8\",6,\"\u7FB1\"],[\"c180\",\"\u7FB3\",4,\"\u7FBA\u7FBB\u7FBE\u7FC0\u7FC2\u7FC3\u7FC4\u7FC6\u7FC7\u7FC8\u7FC9\u7FCB\u7FCD\u7FCF\",4,\"\u7FD6\u7FD7\u7FD9\",5,\"\u7FE2\u7FE3\u75E2\u7ACB\u7C92\u6CA5\u96B6\u529B\u7483\u54E9\u4FE9\u8054\u83B2\u8FDE\u9570\u5EC9\u601C\u6D9F\u5E18\u655B\u8138\u94FE\u604B\u70BC\u7EC3\u7CAE\u51C9\u6881\u7CB1\u826F\u4E24\u8F86\u91CF\u667E\u4EAE\u8C05\u64A9\u804A\u50DA\u7597\u71CE\u5BE5\u8FBD\u6F66\u4E86\u6482\u9563\u5ED6\u6599\u5217\u88C2\u70C8\u52A3\u730E\u7433\u6797\u78F7\u9716\u4E34\u90BB\u9CDE\u6DCB\u51DB\u8D41\u541D\u62CE\u73B2\u83F1\u96F6\u9F84\u94C3\u4F36\u7F9A\u51CC\u7075\u9675\u5CAD\u9886\u53E6\u4EE4\u6E9C\u7409\u69B4\u786B\u998F\u7559\u5218\u7624\u6D41\u67F3\u516D\u9F99\u804B\u5499\u7B3C\u7ABF\"],[\"c240\",\"\u7FE4\u7FE7\u7FE8\u7FEA\u7FEB\u7FEC\u7FED\u7FEF\u7FF2\u7FF4\",6,\"\u7FFD\u7FFE\u7FFF\u8002\u8007\u8008\u8009\u800A\u800E\u800F\u8011\u8013\u801A\u801B\u801D\u801E\u801F\u8021\u8023\u8024\u802B\",5,\"\u8032\u8034\u8039\u803A\u803C\u803E\u8040\u8041\u8044\u8045\u8047\u8048\u8049\u804E\u804F\u8050\u8051\u8053\u8055\u8056\u8057\"],[\"c280\",\"\u8059\u805B\",13,\"\u806B\",5,\"\u8072\",11,\"\u9686\u5784\u62E2\u9647\u697C\u5A04\u6402\u7BD3\u6F0F\u964B\u82A6\u5362\u9885\u5E90\u7089\u63B3\u5364\u864F\u9C81\u9E93\u788C\u9732\u8DEF\u8D42\u9E7F\u6F5E\u7984\u5F55\u9646\u622E\u9A74\u5415\u94DD\u4FA3\u65C5\u5C65\u5C61\u7F15\u8651\u6C2F\u5F8B\u7387\u6EE4\u7EFF\u5CE6\u631B\u5B6A\u6EE6\u5375\u4E71\u63A0\u7565\u62A1\u8F6E\u4F26\u4ED1\u6CA6\u7EB6\u8BBA\u841D\u87BA\u7F57\u903B\u9523\u7BA9\u9AA1\u88F8\u843D\u6D1B\u9A86\u7EDC\u5988\u9EBB\u739B\u7801\u8682\u9A6C\u9A82\u561B\u5417\u57CB\u4E70\u9EA6\u5356\u8FC8\u8109\u7792\u9992\u86EE\u6EE1\u8513\u66FC\u6162\u6F2B\"],[\"c340\",\"\u807E\u8081\u8082\u8085\u8088\u808A\u808D\",5,\"\u8094\u8095\u8097\u8099\u809E\u80A3\u80A6\u80A7\u80A8\u80AC\u80B0\u80B3\u80B5\u80B6\u80B8\u80B9\u80BB\u80C5\u80C7\",4,\"\u80CF\",6,\"\u80D8\u80DF\u80E0\u80E2\u80E3\u80E6\u80EE\u80F5\u80F7\u80F9\u80FB\u80FE\u80FF\u8100\u8101\u8103\u8104\u8105\u8107\u8108\u810B\"],[\"c380\",\"\u810C\u8115\u8117\u8119\u811B\u811C\u811D\u811F\",12,\"\u812D\u812E\u8130\u8133\u8134\u8135\u8137\u8139\",4,\"\u813F\u8C29\u8292\u832B\u76F2\u6C13\u5FD9\u83BD\u732B\u8305\u951A\u6BDB\u77DB\u94C6\u536F\u8302\u5192\u5E3D\u8C8C\u8D38\u4E48\u73AB\u679A\u6885\u9176\u9709\u7164\u6CA1\u7709\u5A92\u9541\u6BCF\u7F8E\u6627\u5BD0\u59B9\u5A9A\u95E8\u95F7\u4EEC\u840C\u8499\u6AAC\u76DF\u9530\u731B\u68A6\u5B5F\u772F\u919A\u9761\u7CDC\u8FF7\u8C1C\u5F25\u7C73\u79D8\u89C5\u6CCC\u871C\u5BC6\u5E42\u68C9\u7720\u7EF5\u5195\u514D\u52C9\u5A29\u7F05\u9762\u82D7\u63CF\u7784\u85D0\u79D2\u6E3A\u5E99\u5999\u8511\u706D\u6C11\u62BF\u76BF\u654F\u60AF\u95FD\u660E\u879F\u9E23\u94ED\u540D\u547D\u8C2C\u6478\"],[\"c440\",\"\u8140\",5,\"\u8147\u8149\u814D\u814E\u814F\u8152\u8156\u8157\u8158\u815B\",4,\"\u8161\u8162\u8163\u8164\u8166\u8168\u816A\u816B\u816C\u816F\u8172\u8173\u8175\u8176\u8177\u8178\u8181\u8183\",4,\"\u8189\u818B\u818C\u818D\u818E\u8190\u8192\",5,\"\u8199\u819A\u819E\",4,\"\u81A4\u81A5\"],[\"c480\",\"\u81A7\u81A9\u81AB\",7,\"\u81B4\",5,\"\u81BC\u81BD\u81BE\u81BF\u81C4\u81C5\u81C7\u81C8\u81C9\u81CB\u81CD\",6,\"\u6479\u8611\u6A21\u819C\u78E8\u6469\u9B54\u62B9\u672B\u83AB\u58A8\u9ED8\u6CAB\u6F20\u5BDE\u964C\u8C0B\u725F\u67D0\u62C7\u7261\u4EA9\u59C6\u6BCD\u5893\u66AE\u5E55\u52DF\u6155\u6728\u76EE\u7766\u7267\u7A46\u62FF\u54EA\u5450\u94A0\u90A3\u5A1C\u7EB3\u6C16\u4E43\u5976\u8010\u5948\u5357\u7537\u96BE\u56CA\u6320\u8111\u607C\u95F9\u6DD6\u5462\u9981\u5185\u5AE9\u80FD\u59AE\u9713\u502A\u6CE5\u5C3C\u62DF\u4F60\u533F\u817B\u9006\u6EBA\u852B\u62C8\u5E74\u78BE\u64B5\u637B\u5FF5\u5A18\u917F\u9E1F\u5C3F\u634F\u8042\u5B7D\u556E\u954A\u954D\u6D85\u60A8\u67E0\u72DE\u51DD\u5B81\"],[\"c540\",\"\u81D4\",14,\"\u81E4\u81E5\u81E6\u81E8\u81E9\u81EB\u81EE\",4,\"\u81F5\",5,\"\u81FD\u81FF\u8203\u8207\",4,\"\u820E\u820F\u8211\u8213\u8215\",5,\"\u821D\u8220\u8224\u8225\u8226\u8227\u8229\u822E\u8232\u823A\u823C\u823D\u823F\"],[\"c580\",\"\u8240\u8241\u8242\u8243\u8245\u8246\u8248\u824A\u824C\u824D\u824E\u8250\",7,\"\u8259\u825B\u825C\u825D\u825E\u8260\",7,\"\u8269\u62E7\u6CDE\u725B\u626D\u94AE\u7EBD\u8113\u6D53\u519C\u5F04\u5974\u52AA\u6012\u5973\u6696\u8650\u759F\u632A\u61E6\u7CEF\u8BFA\u54E6\u6B27\u9E25\u6BB4\u85D5\u5455\u5076\u6CA4\u556A\u8DB4\u722C\u5E15\u6015\u7436\u62CD\u6392\u724C\u5F98\u6E43\u6D3E\u6500\u6F58\u76D8\u78D0\u76FC\u7554\u5224\u53DB\u4E53\u5E9E\u65C1\u802A\u80D6\u629B\u5486\u5228\u70AE\u888D\u8DD1\u6CE1\u5478\u80DA\u57F9\u88F4\u8D54\u966A\u914D\u4F69\u6C9B\u55B7\u76C6\u7830\u62A8\u70F9\u6F8E\u5F6D\u84EC\u68DA\u787C\u7BF7\u81A8\u670B\u9E4F\u6367\u78B0\u576F\u7812\u9739\u6279\u62AB\u5288\u7435\u6BD7\"],[\"c640\",\"\u826A\u826B\u826C\u826D\u8271\u8275\u8276\u8277\u8278\u827B\u827C\u8280\u8281\u8283\u8285\u8286\u8287\u8289\u828C\u8290\u8293\u8294\u8295\u8296\u829A\u829B\u829E\u82A0\u82A2\u82A3\u82A7\u82B2\u82B5\u82B6\u82BA\u82BB\u82BC\u82BF\u82C0\u82C2\u82C3\u82C5\u82C6\u82C9\u82D0\u82D6\u82D9\u82DA\u82DD\u82E2\u82E7\u82E8\u82E9\u82EA\u82EC\u82ED\u82EE\u82F0\u82F2\u82F3\u82F5\u82F6\u82F8\"],[\"c680\",\"\u82FA\u82FC\",4,\"\u830A\u830B\u830D\u8310\u8312\u8313\u8316\u8318\u8319\u831D\",9,\"\u8329\u832A\u832E\u8330\u8332\u8337\u833B\u833D\u5564\u813E\u75B2\u76AE\u5339\u75DE\u50FB\u5C41\u8B6C\u7BC7\u504F\u7247\u9A97\u98D8\u6F02\u74E2\u7968\u6487\u77A5\u62FC\u9891\u8D2B\u54C1\u8058\u4E52\u576A\u82F9\u840D\u5E73\u51ED\u74F6\u8BC4\u5C4F\u5761\u6CFC\u9887\u5A46\u7834\u9B44\u8FEB\u7C95\u5256\u6251\u94FA\u4EC6\u8386\u8461\u83E9\u84B2\u57D4\u6734\u5703\u666E\u6D66\u8C31\u66DD\u7011\u671F\u6B3A\u6816\u621A\u59BB\u4E03\u51C4\u6F06\u67D2\u6C8F\u5176\u68CB\u5947\u6B67\u7566\u5D0E\u8110\u9F50\u65D7\u7948\u7941\u9A91\u8D77\u5C82\u4E5E\u4F01\u542F\u5951\u780C\u5668\u6C14\u8FC4\u5F03\u6C7D\u6CE3\u8BAB\u6390\"],[\"c740\",\"\u833E\u833F\u8341\u8342\u8344\u8345\u8348\u834A\",4,\"\u8353\u8355\",4,\"\u835D\u8362\u8370\",6,\"\u8379\u837A\u837E\",6,\"\u8387\u8388\u838A\u838B\u838C\u838D\u838F\u8390\u8391\u8394\u8395\u8396\u8397\u8399\u839A\u839D\u839F\u83A1\",6,\"\u83AC\u83AD\u83AE\"],[\"c780\",\"\u83AF\u83B5\u83BB\u83BE\u83BF\u83C2\u83C3\u83C4\u83C6\u83C8\u83C9\u83CB\u83CD\u83CE\u83D0\u83D1\u83D2\u83D3\u83D5\u83D7\u83D9\u83DA\u83DB\u83DE\u83E2\u83E3\u83E4\u83E6\u83E7\u83E8\u83EB\u83EC\u83ED\u6070\u6D3D\u7275\u6266\u948E\u94C5\u5343\u8FC1\u7B7E\u4EDF\u8C26\u4E7E\u9ED4\u94B1\u94B3\u524D\u6F5C\u9063\u6D45\u8C34\u5811\u5D4C\u6B20\u6B49\u67AA\u545B\u8154\u7F8C\u5899\u8537\u5F3A\u62A2\u6A47\u9539\u6572\u6084\u6865\u77A7\u4E54\u4FA8\u5DE7\u9798\u64AC\u7FD8\u5CED\u4FCF\u7A8D\u5207\u8304\u4E14\u602F\u7A83\u94A6\u4FB5\u4EB2\u79E6\u7434\u52E4\u82B9\u64D2\u79BD\u5BDD\u6C81\u9752\u8F7B\u6C22\u503E\u537F\u6E05\u64CE\u6674\u6C30\u60C5\u9877\u8BF7\u5E86\u743C\u7A77\u79CB\u4E18\u90B1\u7403\u6C42\u56DA\u914B\u6CC5\u8D8B\u533A\u86C6\u66F2\u8EAF\u5C48\u9A71\u6E20\"],[\"c840\",\"\u83EE\u83EF\u83F3\",4,\"\u83FA\u83FB\u83FC\u83FE\u83FF\u8400\u8402\u8405\u8407\u8408\u8409\u840A\u8410\u8412\",5,\"\u8419\u841A\u841B\u841E\",5,\"\u8429\",7,\"\u8432\",5,\"\u8439\u843A\u843B\u843E\",7,\"\u8447\u8448\u8449\"],[\"c880\",\"\u844A\",6,\"\u8452\",4,\"\u8458\u845D\u845E\u845F\u8460\u8462\u8464\",4,\"\u846A\u846E\u846F\u8470\u8472\u8474\u8477\u8479\u847B\u847C\u53D6\u5A36\u9F8B\u8DA3\u53BB\u5708\u98A7\u6743\u919B\u6CC9\u5168\u75CA\u62F3\u72AC\u5238\u529D\u7F3A\u7094\u7638\u5374\u9E4A\u69B7\u786E\u96C0\u88D9\u7FA4\u7136\u71C3\u5189\u67D3\u74E4\u58E4\u6518\u56B7\u8BA9\u9976\u6270\u7ED5\u60F9\u70ED\u58EC\u4EC1\u4EBA\u5FCD\u97E7\u4EFB\u8BA4\u5203\u598A\u7EAB\u6254\u4ECD\u65E5\u620E\u8338\u84C9\u8363\u878D\u7194\u6EB6\u5BB9\u7ED2\u5197\u63C9\u67D4\u8089\u8339\u8815\u5112\u5B7A\u5982\u8FB1\u4E73\u6C5D\u5165\u8925\u8F6F\u962E\u854A\u745E\u9510\u95F0\u6DA6\u82E5\u5F31\u6492\u6D12\u8428\u816E\u9CC3\u585E\u8D5B\u4E09\u53C1\"],[\"c940\",\"\u847D\",4,\"\u8483\u8484\u8485\u8486\u848A\u848D\u848F\",7,\"\u8498\u849A\u849B\u849D\u849E\u849F\u84A0\u84A2\",12,\"\u84B0\u84B1\u84B3\u84B5\u84B6\u84B7\u84BB\u84BC\u84BE\u84C0\u84C2\u84C3\u84C5\u84C6\u84C7\u84C8\u84CB\u84CC\u84CE\u84CF\u84D2\u84D4\u84D5\u84D7\"],[\"c980\",\"\u84D8\",4,\"\u84DE\u84E1\u84E2\u84E4\u84E7\",4,\"\u84ED\u84EE\u84EF\u84F1\",10,\"\u84FD\u84FE\u8500\u8501\u8502\u4F1E\u6563\u6851\u55D3\u4E27\u6414\u9A9A\u626B\u5AC2\u745F\u8272\u6DA9\u68EE\u50E7\u838E\u7802\u6740\u5239\u6C99\u7EB1\u50BB\u5565\u715E\u7B5B\u6652\u73CA\u82EB\u6749\u5C71\u5220\u717D\u886B\u95EA\u9655\u64C5\u8D61\u81B3\u5584\u6C55\u6247\u7F2E\u5892\u4F24\u5546\u8D4F\u664C\u4E0A\u5C1A\u88F3\u68A2\u634E\u7A0D\u70E7\u828D\u52FA\u97F6\u5C11\u54E8\u90B5\u7ECD\u5962\u8D4A\u86C7\u820C\u820D\u8D66\u6444\u5C04\u6151\u6D89\u793E\u8BBE\u7837\u7533\u547B\u4F38\u8EAB\u6DF1\u5A20\u7EC5\u795E\u6C88\u5BA1\u5A76\u751A\u80BE\u614E\u6E17\u58F0\u751F\u7525\u7272\u5347\u7EF3\"],[\"ca40\",\"\u8503\",8,\"\u850D\u850E\u850F\u8510\u8512\u8514\u8515\u8516\u8518\u8519\u851B\u851C\u851D\u851E\u8520\u8522\",8,\"\u852D\",9,\"\u853E\",4,\"\u8544\u8545\u8546\u8547\u854B\",10],[\"ca80\",\"\u8557\u8558\u855A\u855B\u855C\u855D\u855F\",4,\"\u8565\u8566\u8567\u8569\",8,\"\u8573\u8575\u8576\u8577\u8578\u857C\u857D\u857F\u8580\u8581\u7701\u76DB\u5269\u80DC\u5723\u5E08\u5931\u72EE\u65BD\u6E7F\u8BD7\u5C38\u8671\u5341\u77F3\u62FE\u65F6\u4EC0\u98DF\u8680\u5B9E\u8BC6\u53F2\u77E2\u4F7F\u5C4E\u9A76\u59CB\u5F0F\u793A\u58EB\u4E16\u67FF\u4E8B\u62ED\u8A93\u901D\u52BF\u662F\u55DC\u566C\u9002\u4ED5\u4F8D\u91CA\u9970\u6C0F\u5E02\u6043\u5BA4\u89C6\u8BD5\u6536\u624B\u9996\u5B88\u5BFF\u6388\u552E\u53D7\u7626\u517D\u852C\u67A2\u68B3\u6B8A\u6292\u8F93\u53D4\u8212\u6DD1\u758F\u4E66\u8D4E\u5B70\u719F\u85AF\u6691\u66D9\u7F72\u8700\u9ECD\u9F20\u5C5E\u672F\u8FF0\u6811\u675F\u620D\u7AD6\u5885\u5EB6\u6570\u6F31\"],[\"cb40\",\"\u8582\u8583\u8586\u8588\",6,\"\u8590\",10,\"\u859D\",6,\"\u85A5\u85A6\u85A7\u85A9\u85AB\u85AC\u85AD\u85B1\",5,\"\u85B8\u85BA\",6,\"\u85C2\",6,\"\u85CA\",4,\"\u85D1\u85D2\"],[\"cb80\",\"\u85D4\u85D6\",5,\"\u85DD\",6,\"\u85E5\u85E6\u85E7\u85E8\u85EA\",14,\"\u6055\u5237\u800D\u6454\u8870\u7529\u5E05\u6813\u62F4\u971C\u53CC\u723D\u8C01\u6C34\u7761\u7A0E\u542E\u77AC\u987A\u821C\u8BF4\u7855\u6714\u70C1\u65AF\u6495\u5636\u601D\u79C1\u53F8\u4E1D\u6B7B\u8086\u5BFA\u55E3\u56DB\u4F3A\u4F3C\u9972\u5DF3\u677E\u8038\u6002\u9882\u9001\u5B8B\u8BBC\u8BF5\u641C\u8258\u64DE\u55FD\u82CF\u9165\u4FD7\u7D20\u901F\u7C9F\u50F3\u5851\u6EAF\u5BBF\u8BC9\u8083\u9178\u849C\u7B97\u867D\u968B\u968F\u7EE5\u9AD3\u788E\u5C81\u7A57\u9042\u96A7\u795F\u5B59\u635F\u7B0B\u84D1\u68AD\u5506\u7F29\u7410\u7D22\u9501\u6240\u584C\u4ED6\u5B83\u5979\u5854\"],[\"cc40\",\"\u85F9\u85FA\u85FC\u85FD\u85FE\u8600\",4,\"\u8606\",10,\"\u8612\u8613\u8614\u8615\u8617\",15,\"\u8628\u862A\",13,\"\u8639\u863A\u863B\u863D\u863E\u863F\u8640\"],[\"cc80\",\"\u8641\",11,\"\u8652\u8653\u8655\",4,\"\u865B\u865C\u865D\u865F\u8660\u8661\u8663\",7,\"\u736D\u631E\u8E4B\u8E0F\u80CE\u82D4\u62AC\u53F0\u6CF0\u915E\u592A\u6001\u6C70\u574D\u644A\u8D2A\u762B\u6EE9\u575B\u6A80\u75F0\u6F6D\u8C2D\u8C08\u5766\u6BEF\u8892\u78B3\u63A2\u53F9\u70AD\u6C64\u5858\u642A\u5802\u68E0\u819B\u5510\u7CD6\u5018\u8EBA\u6DCC\u8D9F\u70EB\u638F\u6D9B\u6ED4\u7EE6\u8404\u6843\u9003\u6DD8\u9676\u8BA8\u5957\u7279\u85E4\u817E\u75BC\u8A8A\u68AF\u5254\u8E22\u9511\u63D0\u9898\u8E44\u557C\u4F53\u66FF\u568F\u60D5\u6D95\u5243\u5C49\u5929\u6DFB\u586B\u7530\u751C\u606C\u8214\u8146\u6311\u6761\u8FE2\u773A\u8DF3\u8D34\u94C1\u5E16\u5385\u542C\u70C3\"],[\"cd40\",\"\u866D\u866F\u8670\u8672\",6,\"\u8683\",6,\"\u868E\",4,\"\u8694\u8696\",5,\"\u869E\",4,\"\u86A5\u86A6\u86AB\u86AD\u86AE\u86B2\u86B3\u86B7\u86B8\u86B9\u86BB\",4,\"\u86C1\u86C2\u86C3\u86C5\u86C8\u86CC\u86CD\u86D2\u86D3\u86D5\u86D6\u86D7\u86DA\u86DC\"],[\"cd80\",\"\u86DD\u86E0\u86E1\u86E2\u86E3\u86E5\u86E6\u86E7\u86E8\u86EA\u86EB\u86EC\u86EF\u86F5\u86F6\u86F7\u86FA\u86FB\u86FC\u86FD\u86FF\u8701\u8704\u8705\u8706\u870B\u870C\u870E\u870F\u8710\u8711\u8714\u8716\u6C40\u5EF7\u505C\u4EAD\u5EAD\u633A\u8247\u901A\u6850\u916E\u77B3\u540C\u94DC\u5F64\u7AE5\u6876\u6345\u7B52\u7EDF\u75DB\u5077\u6295\u5934\u900F\u51F8\u79C3\u7A81\u56FE\u5F92\u9014\u6D82\u5C60\u571F\u5410\u5154\u6E4D\u56E2\u63A8\u9893\u817F\u8715\u892A\u9000\u541E\u5C6F\u81C0\u62D6\u6258\u8131\u9E35\u9640\u9A6E\u9A7C\u692D\u59A5\u62D3\u553E\u6316\u54C7\u86D9\u6D3C\u5A03\u74E6\u889C\u6B6A\u5916\u8C4C\u5F2F\u6E7E\u73A9\u987D\u4E38\u70F7\u5B8C\u7897\u633D\u665A\u7696\u60CB\u5B9B\u5A49\u4E07\u8155\u6C6A\u738B\u4EA1\u6789\u7F51\u5F80\u65FA\u671B\u5FD8\u5984\u5A01\"],[\"ce40\",\"\u8719\u871B\u871D\u871F\u8720\u8724\u8726\u8727\u8728\u872A\u872B\u872C\u872D\u872F\u8730\u8732\u8733\u8735\u8736\u8738\u8739\u873A\u873C\u873D\u8740\",6,\"\u874A\u874B\u874D\u874F\u8750\u8751\u8752\u8754\u8755\u8756\u8758\u875A\",5,\"\u8761\u8762\u8766\",7,\"\u876F\u8771\u8772\u8773\u8775\"],[\"ce80\",\"\u8777\u8778\u8779\u877A\u877F\u8780\u8781\u8784\u8786\u8787\u8789\u878A\u878C\u878E\",4,\"\u8794\u8795\u8796\u8798\",6,\"\u87A0\",4,\"\u5DCD\u5FAE\u5371\u97E6\u8FDD\u6845\u56F4\u552F\u60DF\u4E3A\u6F4D\u7EF4\u82C7\u840E\u59D4\u4F1F\u4F2A\u5C3E\u7EAC\u672A\u851A\u5473\u754F\u80C3\u5582\u9B4F\u4F4D\u6E2D\u8C13\u5C09\u6170\u536B\u761F\u6E29\u868A\u6587\u95FB\u7EB9\u543B\u7A33\u7D0A\u95EE\u55E1\u7FC1\u74EE\u631D\u8717\u6DA1\u7A9D\u6211\u65A1\u5367\u63E1\u6C83\u5DEB\u545C\u94A8\u4E4C\u6C61\u8BEC\u5C4B\u65E0\u829C\u68A7\u543E\u5434\u6BCB\u6B66\u4E94\u6342\u5348\u821E\u4F0D\u4FAE\u575E\u620A\u96FE\u6664\u7269\u52FF\u52A1\u609F\u8BEF\u6614\u7199\u6790\u897F\u7852\u77FD\u6670\u563B\u5438\u9521\u727A\"],[\"cf40\",\"\u87A5\u87A6\u87A7\u87A9\u87AA\u87AE\u87B0\u87B1\u87B2\u87B4\u87B6\u87B7\u87B8\u87B9\u87BB\u87BC\u87BE\u87BF\u87C1\",4,\"\u87C7\u87C8\u87C9\u87CC\",4,\"\u87D4\",6,\"\u87DC\u87DD\u87DE\u87DF\u87E1\u87E2\u87E3\u87E4\u87E6\u87E7\u87E8\u87E9\u87EB\u87EC\u87ED\u87EF\",9],[\"cf80\",\"\u87FA\u87FB\u87FC\u87FD\u87FF\u8800\u8801\u8802\u8804\",5,\"\u880B\",7,\"\u8814\u8817\u8818\u8819\u881A\u881C\",4,\"\u8823\u7A00\u606F\u5E0C\u6089\u819D\u5915\u60DC\u7184\u70EF\u6EAA\u6C50\u7280\u6A84\u88AD\u5E2D\u4E60\u5AB3\u559C\u94E3\u6D17\u7CFB\u9699\u620F\u7EC6\u778E\u867E\u5323\u971E\u8F96\u6687\u5CE1\u4FA0\u72ED\u4E0B\u53A6\u590F\u5413\u6380\u9528\u5148\u4ED9\u9C9C\u7EA4\u54B8\u8D24\u8854\u8237\u95F2\u6D8E\u5F26\u5ACC\u663E\u9669\u73B0\u732E\u53BF\u817A\u9985\u7FA1\u5BAA\u9677\u9650\u7EBF\u76F8\u53A2\u9576\u9999\u7BB1\u8944\u6E58\u4E61\u7FD4\u7965\u8BE6\u60F3\u54CD\u4EAB\u9879\u5DF7\u6A61\u50CF\u5411\u8C61\u8427\u785D\u9704\u524A\u54EE\u56A3\u9500\u6D88\u5BB5\u6DC6\u6653\"],[\"d040\",\"\u8824\",13,\"\u8833\",5,\"\u883A\u883B\u883D\u883E\u883F\u8841\u8842\u8843\u8846\",5,\"\u884E\",5,\"\u8855\u8856\u8858\u885A\",6,\"\u8866\u8867\u886A\u886D\u886F\u8871\u8873\u8874\u8875\u8876\u8878\u8879\u887A\"],[\"d080\",\"\u887B\u887C\u8880\u8883\u8886\u8887\u8889\u888A\u888C\u888E\u888F\u8890\u8891\u8893\u8894\u8895\u8897\",4,\"\u889D\",4,\"\u88A3\u88A5\",5,\"\u5C0F\u5B5D\u6821\u8096\u5578\u7B11\u6548\u6954\u4E9B\u6B47\u874E\u978B\u534F\u631F\u643A\u90AA\u659C\u80C1\u8C10\u5199\u68B0\u5378\u87F9\u61C8\u6CC4\u6CFB\u8C22\u5C51\u85AA\u82AF\u950C\u6B23\u8F9B\u65B0\u5FFB\u5FC3\u4FE1\u8845\u661F\u8165\u7329\u60FA\u5174\u5211\u578B\u5F62\u90A2\u884C\u9192\u5E78\u674F\u6027\u59D3\u5144\u51F6\u80F8\u5308\u6C79\u96C4\u718A\u4F11\u4FEE\u7F9E\u673D\u55C5\u9508\u79C0\u8896\u7EE3\u589F\u620C\u9700\u865A\u5618\u987B\u5F90\u8BB8\u84C4\u9157\u53D9\u65ED\u5E8F\u755C\u6064\u7D6E\u5A7F\u7EEA\u7EED\u8F69\u55A7\u5BA3\u60AC\u65CB\u7384\"],[\"d140\",\"\u88AC\u88AE\u88AF\u88B0\u88B2\",4,\"\u88B8\u88B9\u88BA\u88BB\u88BD\u88BE\u88BF\u88C0\u88C3\u88C4\u88C7\u88C8\u88CA\u88CB\u88CC\u88CD\u88CF\u88D0\u88D1\u88D3\u88D6\u88D7\u88DA\",4,\"\u88E0\u88E1\u88E6\u88E7\u88E9\",6,\"\u88F2\u88F5\u88F6\u88F7\u88FA\u88FB\u88FD\u88FF\u8900\u8901\u8903\",5],[\"d180\",\"\u8909\u890B\",4,\"\u8911\u8914\",4,\"\u891C\",4,\"\u8922\u8923\u8924\u8926\u8927\u8928\u8929\u892C\u892D\u892E\u892F\u8931\u8932\u8933\u8935\u8937\u9009\u7663\u7729\u7EDA\u9774\u859B\u5B66\u7A74\u96EA\u8840\u52CB\u718F\u5FAA\u65EC\u8BE2\u5BFB\u9A6F\u5DE1\u6B89\u6C5B\u8BAD\u8BAF\u900A\u8FC5\u538B\u62BC\u9E26\u9E2D\u5440\u4E2B\u82BD\u7259\u869C\u5D16\u8859\u6DAF\u96C5\u54D1\u4E9A\u8BB6\u7109\u54BD\u9609\u70DF\u6DF9\u76D0\u4E25\u7814\u8712\u5CA9\u5EF6\u8A00\u989C\u960E\u708E\u6CBF\u5944\u63A9\u773C\u884D\u6F14\u8273\u5830\u71D5\u538C\u781A\u96C1\u5501\u5F66\u7130\u5BB4\u8C1A\u9A8C\u6B83\u592E\u9E2F\u79E7\u6768\u626C\u4F6F\u75A1\u7F8A\u6D0B\u9633\u6C27\u4EF0\u75D2\u517B\u6837\u6F3E\u9080\u8170\u5996\u7476\"],[\"d240\",\"\u8938\",8,\"\u8942\u8943\u8945\",24,\"\u8960\",5,\"\u8967\",19,\"\u897C\"],[\"d280\",\"\u897D\u897E\u8980\u8982\u8984\u8985\u8987\",26,\"\u6447\u5C27\u9065\u7A91\u8C23\u59DA\u54AC\u8200\u836F\u8981\u8000\u6930\u564E\u8036\u7237\u91CE\u51B6\u4E5F\u9875\u6396\u4E1A\u53F6\u66F3\u814B\u591C\u6DB2\u4E00\u58F9\u533B\u63D6\u94F1\u4F9D\u4F0A\u8863\u9890\u5937\u9057\u79FB\u4EEA\u80F0\u7591\u6C82\u5B9C\u59E8\u5F5D\u6905\u8681\u501A\u5DF2\u4E59\u77E3\u4EE5\u827A\u6291\u6613\u9091\u5C79\u4EBF\u5F79\u81C6\u9038\u8084\u75AB\u4EA6\u88D4\u610F\u6BC5\u5FC6\u4E49\u76CA\u6EA2\u8BE3\u8BAE\u8C0A\u8BD1\u5F02\u7FFC\u7FCC\u7ECE\u8335\u836B\u56E0\u6BB7\u97F3\u9634\u59FB\u541F\u94F6\u6DEB\u5BC5\u996E\u5C39\u5F15\u9690\"],[\"d340\",\"\u89A2\",30,\"\u89C3\u89CD\u89D3\u89D4\u89D5\u89D7\u89D8\u89D9\u89DB\u89DD\u89DF\u89E0\u89E1\u89E2\u89E4\u89E7\u89E8\u89E9\u89EA\u89EC\u89ED\u89EE\u89F0\u89F1\u89F2\u89F4\",6],[\"d380\",\"\u89FB\",4,\"\u8A01\",5,\"\u8A08\",21,\"\u5370\u82F1\u6A31\u5A74\u9E70\u5E94\u7F28\u83B9\u8424\u8425\u8367\u8747\u8FCE\u8D62\u76C8\u5F71\u9896\u786C\u6620\u54DF\u62E5\u4F63\u81C3\u75C8\u5EB8\u96CD\u8E0A\u86F9\u548F\u6CF3\u6D8C\u6C38\u607F\u52C7\u7528\u5E7D\u4F18\u60A0\u5FE7\u5C24\u7531\u90AE\u94C0\u72B9\u6CB9\u6E38\u9149\u6709\u53CB\u53F3\u4F51\u91C9\u8BF1\u53C8\u5E7C\u8FC2\u6DE4\u4E8E\u76C2\u6986\u865E\u611A\u8206\u4F59\u4FDE\u903E\u9C7C\u6109\u6E1D\u6E14\u9685\u4E88\u5A31\u96E8\u4E0E\u5C7F\u79B9\u5B87\u8BED\u7FBD\u7389\u57DF\u828B\u90C1\u5401\u9047\u55BB\u5CEA\u5FA1\u6108\u6B32\u72F1\u80B2\u8A89\"],[\"d440\",\"\u8A1E\",31,\"\u8A3F\",8,\"\u8A49\",21],[\"d480\",\"\u8A5F\",25,\"\u8A7A\",6,\"\u6D74\u5BD3\u88D5\u9884\u8C6B\u9A6D\u9E33\u6E0A\u51A4\u5143\u57A3\u8881\u539F\u63F4\u8F95\u56ED\u5458\u5706\u733F\u6E90\u7F18\u8FDC\u82D1\u613F\u6028\u9662\u66F0\u7EA6\u8D8A\u8DC3\u94A5\u5CB3\u7CA4\u6708\u60A6\u9605\u8018\u4E91\u90E7\u5300\u9668\u5141\u8FD0\u8574\u915D\u6655\u97F5\u5B55\u531D\u7838\u6742\u683D\u54C9\u707E\u5BB0\u8F7D\u518D\u5728\u54B1\u6512\u6682\u8D5E\u8D43\u810F\u846C\u906D\u7CDF\u51FF\u85FB\u67A3\u65E9\u6FA1\u86A4\u8E81\u566A\u9020\u7682\u7076\u71E5\u8D23\u62E9\u5219\u6CFD\u8D3C\u600E\u589E\u618E\u66FE\u8D60\u624E\u55B3\u6E23\u672D\u8F67\"],[\"d540\",\"\u8A81\",7,\"\u8A8B\",7,\"\u8A94\",46],[\"d580\",\"\u8AC3\",32,\"\u94E1\u95F8\u7728\u6805\u69A8\u548B\u4E4D\u70B8\u8BC8\u6458\u658B\u5B85\u7A84\u503A\u5BE8\u77BB\u6BE1\u8A79\u7C98\u6CBE\u76CF\u65A9\u8F97\u5D2D\u5C55\u8638\u6808\u5360\u6218\u7AD9\u6E5B\u7EFD\u6A1F\u7AE0\u5F70\u6F33\u5F20\u638C\u6DA8\u6756\u4E08\u5E10\u8D26\u4ED7\u80C0\u7634\u969C\u62DB\u662D\u627E\u6CBC\u8D75\u7167\u7F69\u5146\u8087\u53EC\u906E\u6298\u54F2\u86F0\u8F99\u8005\u9517\u8517\u8FD9\u6D59\u73CD\u659F\u771F\u7504\u7827\u81FB\u8D1E\u9488\u4FA6\u6795\u75B9\u8BCA\u9707\u632F\u9547\u9635\u84B8\u6323\u7741\u5F81\u72F0\u4E89\u6014\u6574\u62EF\u6B63\u653F\"],[\"d640\",\"\u8AE4\",34,\"\u8B08\",27],[\"d680\",\"\u8B24\u8B25\u8B27\",30,\"\u5E27\u75C7\u90D1\u8BC1\u829D\u679D\u652F\u5431\u8718\u77E5\u80A2\u8102\u6C41\u4E4B\u7EC7\u804C\u76F4\u690D\u6B96\u6267\u503C\u4F84\u5740\u6307\u6B62\u8DBE\u53EA\u65E8\u7EB8\u5FD7\u631A\u63B7\u81F3\u81F4\u7F6E\u5E1C\u5CD9\u5236\u667A\u79E9\u7A1A\u8D28\u7099\u75D4\u6EDE\u6CBB\u7A92\u4E2D\u76C5\u5FE0\u949F\u8877\u7EC8\u79CD\u80BF\u91CD\u4EF2\u4F17\u821F\u5468\u5DDE\u6D32\u8BCC\u7CA5\u8F74\u8098\u5E1A\u5492\u76B1\u5B99\u663C\u9AA4\u73E0\u682A\u86DB\u6731\u732A\u8BF8\u8BDB\u9010\u7AF9\u70DB\u716E\u62C4\u77A9\u5631\u4E3B\u8457\u67F1\u52A9\u86C0\u8D2E\u94F8\u7B51\"],[\"d740\",\"\u8B46\",31,\"\u8B67\",4,\"\u8B6D\",25],[\"d780\",\"\u8B87\",24,\"\u8BAC\u8BB1\u8BBB\u8BC7\u8BD0\u8BEA\u8C09\u8C1E\u4F4F\u6CE8\u795D\u9A7B\u6293\u722A\u62FD\u4E13\u7816\u8F6C\u64B0\u8D5A\u7BC6\u6869\u5E84\u88C5\u5986\u649E\u58EE\u72B6\u690E\u9525\u8FFD\u8D58\u5760\u7F00\u8C06\u51C6\u6349\u62D9\u5353\u684C\u7422\u8301\u914C\u5544\u7740\u707C\u6D4A\u5179\u54A8\u8D44\u59FF\u6ECB\u6DC4\u5B5C\u7D2B\u4ED4\u7C7D\u6ED3\u5B50\u81EA\u6E0D\u5B57\u9B03\u68D5\u8E2A\u5B97\u7EFC\u603B\u7EB5\u90B9\u8D70\u594F\u63CD\u79DF\u8DB3\u5352\u65CF\u7956\u8BC5\u963B\u7EC4\u94BB\u7E82\u5634\u9189\u6700\u7F6A\u5C0A\u9075\u6628\u5DE6\u4F50\u67DE\u505A\u4F5C\u5750\u5EA7\"],[\"d840\",\"\u8C38\",8,\"\u8C42\u8C43\u8C44\u8C45\u8C48\u8C4A\u8C4B\u8C4D\",7,\"\u8C56\u8C57\u8C58\u8C59\u8C5B\",5,\"\u8C63\",6,\"\u8C6C\",6,\"\u8C74\u8C75\u8C76\u8C77\u8C7B\",6,\"\u8C83\u8C84\u8C86\u8C87\"],[\"d880\",\"\u8C88\u8C8B\u8C8D\",6,\"\u8C95\u8C96\u8C97\u8C99\",20,\"\u4E8D\u4E0C\u5140\u4E10\u5EFF\u5345\u4E15\u4E98\u4E1E\u9B32\u5B6C\u5669\u4E28\u79BA\u4E3F\u5315\u4E47\u592D\u723B\u536E\u6C10\u56DF\u80E4\u9997\u6BD3\u777E\u9F17\u4E36\u4E9F\u9F10\u4E5C\u4E69\u4E93\u8288\u5B5B\u556C\u560F\u4EC4\u538D\u539D\u53A3\u53A5\u53AE\u9765\u8D5D\u531A\u53F5\u5326\u532E\u533E\u8D5C\u5366\u5363\u5202\u5208\u520E\u522D\u5233\u523F\u5240\u524C\u525E\u5261\u525C\u84AF\u527D\u5282\u5281\u5290\u5293\u5182\u7F54\u4EBB\u4EC3\u4EC9\u4EC2\u4EE8\u4EE1\u4EEB\u4EDE\u4F1B\u4EF3\u4F22\u4F64\u4EF5\u4F25\u4F27\u4F09\u4F2B\u4F5E\u4F67\u6538\u4F5A\u4F5D\"],[\"d940\",\"\u8CAE\",62],[\"d980\",\"\u8CED\",32,\"\u4F5F\u4F57\u4F32\u4F3D\u4F76\u4F74\u4F91\u4F89\u4F83\u4F8F\u4F7E\u4F7B\u4FAA\u4F7C\u4FAC\u4F94\u4FE6\u4FE8\u4FEA\u4FC5\u4FDA\u4FE3\u4FDC\u4FD1\u4FDF\u4FF8\u5029\u504C\u4FF3\u502C\u500F\u502E\u502D\u4FFE\u501C\u500C\u5025\u5028\u507E\u5043\u5055\u5048\u504E\u506C\u507B\u50A5\u50A7\u50A9\u50BA\u50D6\u5106\u50ED\u50EC\u50E6\u50EE\u5107\u510B\u4EDD\u6C3D\u4F58\u4F65\u4FCE\u9FA0\u6C46\u7C74\u516E\u5DFD\u9EC9\u9998\u5181\u5914\u52F9\u530D\u8A07\u5310\u51EB\u5919\u5155\u4EA0\u5156\u4EB3\u886E\u88A4\u4EB5\u8114\u88D2\u7980\u5B34\u8803\u7FB8\u51AB\u51B1\u51BD\u51BC\"],[\"da40\",\"\u8D0E\",14,\"\u8D20\u8D51\u8D52\u8D57\u8D5F\u8D65\u8D68\u8D69\u8D6A\u8D6C\u8D6E\u8D6F\u8D71\u8D72\u8D78\",8,\"\u8D82\u8D83\u8D86\u8D87\u8D88\u8D89\u8D8C\",4,\"\u8D92\u8D93\u8D95\",9,\"\u8DA0\u8DA1\"],[\"da80\",\"\u8DA2\u8DA4\",12,\"\u8DB2\u8DB6\u8DB7\u8DB9\u8DBB\u8DBD\u8DC0\u8DC1\u8DC2\u8DC5\u8DC7\u8DC8\u8DC9\u8DCA\u8DCD\u8DD0\u8DD2\u8DD3\u8DD4\u51C7\u5196\u51A2\u51A5\u8BA0\u8BA6\u8BA7\u8BAA\u8BB4\u8BB5\u8BB7\u8BC2\u8BC3\u8BCB\u8BCF\u8BCE\u8BD2\u8BD3\u8BD4\u8BD6\u8BD8\u8BD9\u8BDC\u8BDF\u8BE0\u8BE4\u8BE8\u8BE9\u8BEE\u8BF0\u8BF3\u8BF6\u8BF9\u8BFC\u8BFF\u8C00\u8C02\u8C04\u8C07\u8C0C\u8C0F\u8C11\u8C12\u8C14\u8C15\u8C16\u8C19\u8C1B\u8C18\u8C1D\u8C1F\u8C20\u8C21\u8C25\u8C27\u8C2A\u8C2B\u8C2E\u8C2F\u8C32\u8C33\u8C35\u8C36\u5369\u537A\u961D\u9622\u9621\u9631\u962A\u963D\u963C\u9642\u9649\u9654\u965F\u9667\u966C\u9672\u9674\u9688\u968D\u9697\u96B0\u9097\u909B\u909D\u9099\u90AC\u90A1\u90B4\u90B3\u90B6\u90BA\"],[\"db40\",\"\u8DD5\u8DD8\u8DD9\u8DDC\u8DE0\u8DE1\u8DE2\u8DE5\u8DE6\u8DE7\u8DE9\u8DED\u8DEE\u8DF0\u8DF1\u8DF2\u8DF4\u8DF6\u8DFC\u8DFE\",6,\"\u8E06\u8E07\u8E08\u8E0B\u8E0D\u8E0E\u8E10\u8E11\u8E12\u8E13\u8E15\",7,\"\u8E20\u8E21\u8E24\",4,\"\u8E2B\u8E2D\u8E30\u8E32\u8E33\u8E34\u8E36\u8E37\u8E38\u8E3B\u8E3C\u8E3E\"],[\"db80\",\"\u8E3F\u8E43\u8E45\u8E46\u8E4C\",4,\"\u8E53\",5,\"\u8E5A\",11,\"\u8E67\u8E68\u8E6A\u8E6B\u8E6E\u8E71\u90B8\u90B0\u90CF\u90C5\u90BE\u90D0\u90C4\u90C7\u90D3\u90E6\u90E2\u90DC\u90D7\u90DB\u90EB\u90EF\u90FE\u9104\u9122\u911E\u9123\u9131\u912F\u9139\u9143\u9146\u520D\u5942\u52A2\u52AC\u52AD\u52BE\u54FF\u52D0\u52D6\u52F0\u53DF\u71EE\u77CD\u5EF4\u51F5\u51FC\u9B2F\u53B6\u5F01\u755A\u5DEF\u574C\u57A9\u57A1\u587E\u58BC\u58C5\u58D1\u5729\u572C\u572A\u5733\u5739\u572E\u572F\u575C\u573B\u5742\u5769\u5785\u576B\u5786\u577C\u577B\u5768\u576D\u5776\u5773\u57AD\u57A4\u578C\u57B2\u57CF\u57A7\u57B4\u5793\u57A0\u57D5\u57D8\u57DA\u57D9\u57D2\u57B8\u57F4\u57EF\u57F8\u57E4\u57DD\"],[\"dc40\",\"\u8E73\u8E75\u8E77\",4,\"\u8E7D\u8E7E\u8E80\u8E82\u8E83\u8E84\u8E86\u8E88\",6,\"\u8E91\u8E92\u8E93\u8E95\",6,\"\u8E9D\u8E9F\",11,\"\u8EAD\u8EAE\u8EB0\u8EB1\u8EB3\",6,\"\u8EBB\",7],[\"dc80\",\"\u8EC3\",10,\"\u8ECF\",21,\"\u580B\u580D\u57FD\u57ED\u5800\u581E\u5819\u5844\u5820\u5865\u586C\u5881\u5889\u589A\u5880\u99A8\u9F19\u61FF\u8279\u827D\u827F\u828F\u828A\u82A8\u8284\u828E\u8291\u8297\u8299\u82AB\u82B8\u82BE\u82B0\u82C8\u82CA\u82E3\u8298\u82B7\u82AE\u82CB\u82CC\u82C1\u82A9\u82B4\u82A1\u82AA\u829F\u82C4\u82CE\u82A4\u82E1\u8309\u82F7\u82E4\u830F\u8307\u82DC\u82F4\u82D2\u82D8\u830C\u82FB\u82D3\u8311\u831A\u8306\u8314\u8315\u82E0\u82D5\u831C\u8351\u835B\u835C\u8308\u8392\u833C\u8334\u8331\u839B\u835E\u832F\u834F\u8347\u8343\u835F\u8340\u8317\u8360\u832D\u833A\u8333\u8366\u8365\"],[\"dd40\",\"\u8EE5\",62],[\"dd80\",\"\u8F24\",32,\"\u8368\u831B\u8369\u836C\u836A\u836D\u836E\u83B0\u8378\u83B3\u83B4\u83A0\u83AA\u8393\u839C\u8385\u837C\u83B6\u83A9\u837D\u83B8\u837B\u8398\u839E\u83A8\u83BA\u83BC\u83C1\u8401\u83E5\u83D8\u5807\u8418\u840B\u83DD\u83FD\u83D6\u841C\u8438\u8411\u8406\u83D4\u83DF\u840F\u8403\u83F8\u83F9\u83EA\u83C5\u83C0\u8426\u83F0\u83E1\u845C\u8451\u845A\u8459\u8473\u8487\u8488\u847A\u8489\u8478\u843C\u8446\u8469\u8476\u848C\u848E\u8431\u846D\u84C1\u84CD\u84D0\u84E6\u84BD\u84D3\u84CA\u84BF\u84BA\u84E0\u84A1\u84B9\u84B4\u8497\u84E5\u84E3\u850C\u750D\u8538\u84F0\u8539\u851F\u853A\"],[\"de40\",\"\u8F45\",32,\"\u8F6A\u8F80\u8F8C\u8F92\u8F9D\u8FA0\u8FA1\u8FA2\u8FA4\u8FA5\u8FA6\u8FA7\u8FAA\u8FAC\u8FAD\u8FAE\u8FAF\u8FB2\u8FB3\u8FB4\u8FB5\u8FB7\u8FB8\u8FBA\u8FBB\u8FBC\u8FBF\u8FC0\u8FC3\u8FC6\"],[\"de80\",\"\u8FC9\",4,\"\u8FCF\u8FD2\u8FD6\u8FD7\u8FDA\u8FE0\u8FE1\u8FE3\u8FE7\u8FEC\u8FEF\u8FF1\u8FF2\u8FF4\u8FF5\u8FF6\u8FFA\u8FFB\u8FFC\u8FFE\u8FFF\u9007\u9008\u900C\u900E\u9013\u9015\u9018\u8556\u853B\u84FF\u84FC\u8559\u8548\u8568\u8564\u855E\u857A\u77A2\u8543\u8572\u857B\u85A4\u85A8\u8587\u858F\u8579\u85AE\u859C\u8585\u85B9\u85B7\u85B0\u85D3\u85C1\u85DC\u85FF\u8627\u8605\u8629\u8616\u863C\u5EFE\u5F08\u593C\u5941\u8037\u5955\u595A\u5958\u530F\u5C22\u5C25\u5C2C\u5C34\u624C\u626A\u629F\u62BB\u62CA\u62DA\u62D7\u62EE\u6322\u62F6\u6339\u634B\u6343\u63AD\u63F6\u6371\u637A\u638E\u63B4\u636D\u63AC\u638A\u6369\u63AE\u63BC\u63F2\u63F8\u63E0\u63FF\u63C4\u63DE\u63CE\u6452\u63C6\u63BE\u6445\u6441\u640B\u641B\u6420\u640C\u6426\u6421\u645E\u6484\u646D\u6496\"],[\"df40\",\"\u9019\u901C\u9023\u9024\u9025\u9027\",5,\"\u9030\",4,\"\u9037\u9039\u903A\u903D\u903F\u9040\u9043\u9045\u9046\u9048\",4,\"\u904E\u9054\u9055\u9056\u9059\u905A\u905C\",5,\"\u9064\u9066\u9067\u9069\u906A\u906B\u906C\u906F\",4,\"\u9076\",6,\"\u907E\u9081\"],[\"df80\",\"\u9084\u9085\u9086\u9087\u9089\u908A\u908C\",4,\"\u9092\u9094\u9096\u9098\u909A\u909C\u909E\u909F\u90A0\u90A4\u90A5\u90A7\u90A8\u90A9\u90AB\u90AD\u90B2\u90B7\u90BC\u90BD\u90BF\u90C0\u647A\u64B7\u64B8\u6499\u64BA\u64C0\u64D0\u64D7\u64E4\u64E2\u6509\u6525\u652E\u5F0B\u5FD2\u7519\u5F11\u535F\u53F1\u53FD\u53E9\u53E8\u53FB\u5412\u5416\u5406\u544B\u5452\u5453\u5454\u5456\u5443\u5421\u5457\u5459\u5423\u5432\u5482\u5494\u5477\u5471\u5464\u549A\u549B\u5484\u5476\u5466\u549D\u54D0\u54AD\u54C2\u54B4\u54D2\u54A7\u54A6\u54D3\u54D4\u5472\u54A3\u54D5\u54BB\u54BF\u54CC\u54D9\u54DA\u54DC\u54A9\u54AA\u54A4\u54DD\u54CF\u54DE\u551B\u54E7\u5520\u54FD\u5514\u54F3\u5522\u5523\u550F\u5511\u5527\u552A\u5567\u558F\u55B5\u5549\u556D\u5541\u5555\u553F\u5550\u553C\"],[\"e040\",\"\u90C2\u90C3\u90C6\u90C8\u90C9\u90CB\u90CC\u90CD\u90D2\u90D4\u90D5\u90D6\u90D8\u90D9\u90DA\u90DE\u90DF\u90E0\u90E3\u90E4\u90E5\u90E9\u90EA\u90EC\u90EE\u90F0\u90F1\u90F2\u90F3\u90F5\u90F6\u90F7\u90F9\u90FA\u90FB\u90FC\u90FF\u9100\u9101\u9103\u9105\",19,\"\u911A\u911B\u911C\"],[\"e080\",\"\u911D\u911F\u9120\u9121\u9124\",10,\"\u9130\u9132\",6,\"\u913A\",8,\"\u9144\u5537\u5556\u5575\u5576\u5577\u5533\u5530\u555C\u558B\u55D2\u5583\u55B1\u55B9\u5588\u5581\u559F\u557E\u55D6\u5591\u557B\u55DF\u55BD\u55BE\u5594\u5599\u55EA\u55F7\u55C9\u561F\u55D1\u55EB\u55EC\u55D4\u55E6\u55DD\u55C4\u55EF\u55E5\u55F2\u55F3\u55CC\u55CD\u55E8\u55F5\u55E4\u8F94\u561E\u5608\u560C\u5601\u5624\u5623\u55FE\u5600\u5627\u562D\u5658\u5639\u5657\u562C\u564D\u5662\u5659\u565C\u564C\u5654\u5686\u5664\u5671\u566B\u567B\u567C\u5685\u5693\u56AF\u56D4\u56D7\u56DD\u56E1\u56F5\u56EB\u56F9\u56FF\u5704\u570A\u5709\u571C\u5E0F\u5E19\u5E14\u5E11\u5E31\u5E3B\u5E3C\"],[\"e140\",\"\u9145\u9147\u9148\u9151\u9153\u9154\u9155\u9156\u9158\u9159\u915B\u915C\u915F\u9160\u9166\u9167\u9168\u916B\u916D\u9173\u917A\u917B\u917C\u9180\",4,\"\u9186\u9188\u918A\u918E\u918F\u9193\",6,\"\u919C\",5,\"\u91A4\",5,\"\u91AB\u91AC\u91B0\u91B1\u91B2\u91B3\u91B6\u91B7\u91B8\u91B9\u91BB\"],[\"e180\",\"\u91BC\",10,\"\u91C8\u91CB\u91D0\u91D2\",9,\"\u91DD\",8,\"\u5E37\u5E44\u5E54\u5E5B\u5E5E\u5E61\u5C8C\u5C7A\u5C8D\u5C90\u5C96\u5C88\u5C98\u5C99\u5C91\u5C9A\u5C9C\u5CB5\u5CA2\u5CBD\u5CAC\u5CAB\u5CB1\u5CA3\u5CC1\u5CB7\u5CC4\u5CD2\u5CE4\u5CCB\u5CE5\u5D02\u5D03\u5D27\u5D26\u5D2E\u5D24\u5D1E\u5D06\u5D1B\u5D58\u5D3E\u5D34\u5D3D\u5D6C\u5D5B\u5D6F\u5D5D\u5D6B\u5D4B\u5D4A\u5D69\u5D74\u5D82\u5D99\u5D9D\u8C73\u5DB7\u5DC5\u5F73\u5F77\u5F82\u5F87\u5F89\u5F8C\u5F95\u5F99\u5F9C\u5FA8\u5FAD\u5FB5\u5FBC\u8862\u5F61\u72AD\u72B0\u72B4\u72B7\u72B8\u72C3\u72C1\u72CE\u72CD\u72D2\u72E8\u72EF\u72E9\u72F2\u72F4\u72F7\u7301\u72F3\u7303\u72FA\"],[\"e240\",\"\u91E6\",62],[\"e280\",\"\u9225\",32,\"\u72FB\u7317\u7313\u7321\u730A\u731E\u731D\u7315\u7322\u7339\u7325\u732C\u7338\u7331\u7350\u734D\u7357\u7360\u736C\u736F\u737E\u821B\u5925\u98E7\u5924\u5902\u9963\u9967\",5,\"\u9974\u9977\u997D\u9980\u9984\u9987\u998A\u998D\u9990\u9991\u9993\u9994\u9995\u5E80\u5E91\u5E8B\u5E96\u5EA5\u5EA0\u5EB9\u5EB5\u5EBE\u5EB3\u8D53\u5ED2\u5ED1\u5EDB\u5EE8\u5EEA\u81BA\u5FC4\u5FC9\u5FD6\u5FCF\u6003\u5FEE\u6004\u5FE1\u5FE4\u5FFE\u6005\u6006\u5FEA\u5FED\u5FF8\u6019\u6035\u6026\u601B\u600F\u600D\u6029\u602B\u600A\u603F\u6021\u6078\u6079\u607B\u607A\u6042\"],[\"e340\",\"\u9246\",45,\"\u9275\",16],[\"e380\",\"\u9286\",7,\"\u928F\",24,\"\u606A\u607D\u6096\u609A\u60AD\u609D\u6083\u6092\u608C\u609B\u60EC\u60BB\u60B1\u60DD\u60D8\u60C6\u60DA\u60B4\u6120\u6126\u6115\u6123\u60F4\u6100\u610E\u612B\u614A\u6175\u61AC\u6194\u61A7\u61B7\u61D4\u61F5\u5FDD\u96B3\u95E9\u95EB\u95F1\u95F3\u95F5\u95F6\u95FC\u95FE\u9603\u9604\u9606\u9608\u960A\u960B\u960C\u960D\u960F\u9612\u9615\u9616\u9617\u9619\u961A\u4E2C\u723F\u6215\u6C35\u6C54\u6C5C\u6C4A\u6CA3\u6C85\u6C90\u6C94\u6C8C\u6C68\u6C69\u6C74\u6C76\u6C86\u6CA9\u6CD0\u6CD4\u6CAD\u6CF7\u6CF8\u6CF1\u6CD7\u6CB2\u6CE0\u6CD6\u6CFA\u6CEB\u6CEE\u6CB1\u6CD3\u6CEF\u6CFE\"],[\"e440\",\"\u92A8\",5,\"\u92AF\",24,\"\u92C9\",31],[\"e480\",\"\u92E9\",32,\"\u6D39\u6D27\u6D0C\u6D43\u6D48\u6D07\u6D04\u6D19\u6D0E\u6D2B\u6D4D\u6D2E\u6D35\u6D1A\u6D4F\u6D52\u6D54\u6D33\u6D91\u6D6F\u6D9E\u6DA0\u6D5E\u6D93\u6D94\u6D5C\u6D60\u6D7C\u6D63\u6E1A\u6DC7\u6DC5\u6DDE\u6E0E\u6DBF\u6DE0\u6E11\u6DE6\u6DDD\u6DD9\u6E16\u6DAB\u6E0C\u6DAE\u6E2B\u6E6E\u6E4E\u6E6B\u6EB2\u6E5F\u6E86\u6E53\u6E54\u6E32\u6E25\u6E44\u6EDF\u6EB1\u6E98\u6EE0\u6F2D\u6EE2\u6EA5\u6EA7\u6EBD\u6EBB\u6EB7\u6ED7\u6EB4\u6ECF\u6E8F\u6EC2\u6E9F\u6F62\u6F46\u6F47\u6F24\u6F15\u6EF9\u6F2F\u6F36\u6F4B\u6F74\u6F2A\u6F09\u6F29\u6F89\u6F8D\u6F8C\u6F78\u6F72\u6F7C\u6F7A\u6FD1\"],[\"e540\",\"\u930A\",51,\"\u933F\",10],[\"e580\",\"\u934A\",31,\"\u936B\u6FC9\u6FA7\u6FB9\u6FB6\u6FC2\u6FE1\u6FEE\u6FDE\u6FE0\u6FEF\u701A\u7023\u701B\u7039\u7035\u704F\u705E\u5B80\u5B84\u5B95\u5B93\u5BA5\u5BB8\u752F\u9A9E\u6434\u5BE4\u5BEE\u8930\u5BF0\u8E47\u8B07\u8FB6\u8FD3\u8FD5\u8FE5\u8FEE\u8FE4\u8FE9\u8FE6\u8FF3\u8FE8\u9005\u9004\u900B\u9026\u9011\u900D\u9016\u9021\u9035\u9036\u902D\u902F\u9044\u9051\u9052\u9050\u9068\u9058\u9062\u905B\u66B9\u9074\u907D\u9082\u9088\u9083\u908B\u5F50\u5F57\u5F56\u5F58\u5C3B\u54AB\u5C50\u5C59\u5B71\u5C63\u5C66\u7FBC\u5F2A\u5F29\u5F2D\u8274\u5F3C\u9B3B\u5C6E\u5981\u5983\u598D\u59A9\u59AA\u59A3\"],[\"e640\",\"\u936C\",34,\"\u9390\",27],[\"e680\",\"\u93AC\",29,\"\u93CB\u93CC\u93CD\u5997\u59CA\u59AB\u599E\u59A4\u59D2\u59B2\u59AF\u59D7\u59BE\u5A05\u5A06\u59DD\u5A08\u59E3\u59D8\u59F9\u5A0C\u5A09\u5A32\u5A34\u5A11\u5A23\u5A13\u5A40\u5A67\u5A4A\u5A55\u5A3C\u5A62\u5A75\u80EC\u5AAA\u5A9B\u5A77\u5A7A\u5ABE\u5AEB\u5AB2\u5AD2\u5AD4\u5AB8\u5AE0\u5AE3\u5AF1\u5AD6\u5AE6\u5AD8\u5ADC\u5B09\u5B17\u5B16\u5B32\u5B37\u5B40\u5C15\u5C1C\u5B5A\u5B65\u5B73\u5B51\u5B53\u5B62\u9A75\u9A77\u9A78\u9A7A\u9A7F\u9A7D\u9A80\u9A81\u9A85\u9A88\u9A8A\u9A90\u9A92\u9A93\u9A96\u9A98\u9A9B\u9A9C\u9A9D\u9A9F\u9AA0\u9AA2\u9AA3\u9AA5\u9AA7\u7E9F\u7EA1\u7EA3\u7EA5\u7EA8\u7EA9\"],[\"e740\",\"\u93CE\",7,\"\u93D7\",54],[\"e780\",\"\u940E\",32,\"\u7EAD\u7EB0\u7EBE\u7EC0\u7EC1\u7EC2\u7EC9\u7ECB\u7ECC\u7ED0\u7ED4\u7ED7\u7EDB\u7EE0\u7EE1\u7EE8\u7EEB\u7EEE\u7EEF\u7EF1\u7EF2\u7F0D\u7EF6\u7EFA\u7EFB\u7EFE\u7F01\u7F02\u7F03\u7F07\u7F08\u7F0B\u7F0C\u7F0F\u7F11\u7F12\u7F17\u7F19\u7F1C\u7F1B\u7F1F\u7F21\",6,\"\u7F2A\u7F2B\u7F2C\u7F2D\u7F2F\",4,\"\u7F35\u5E7A\u757F\u5DDB\u753E\u9095\u738E\u7391\u73AE\u73A2\u739F\u73CF\u73C2\u73D1\u73B7\u73B3\u73C0\u73C9\u73C8\u73E5\u73D9\u987C\u740A\u73E9\u73E7\u73DE\u73BA\u73F2\u740F\u742A\u745B\u7426\u7425\u7428\u7430\u742E\u742C\"],[\"e840\",\"\u942F\",14,\"\u943F\",43,\"\u946C\u946D\u946E\u946F\"],[\"e880\",\"\u9470\",20,\"\u9491\u9496\u9498\u94C7\u94CF\u94D3\u94D4\u94DA\u94E6\u94FB\u951C\u9520\u741B\u741A\u7441\u745C\u7457\u7455\u7459\u7477\u746D\u747E\u749C\u748E\u7480\u7481\u7487\u748B\u749E\u74A8\u74A9\u7490\u74A7\u74D2\u74BA\u97EA\u97EB\u97EC\u674C\u6753\u675E\u6748\u6769\u67A5\u6787\u676A\u6773\u6798\u67A7\u6775\u67A8\u679E\u67AD\u678B\u6777\u677C\u67F0\u6809\u67D8\u680A\u67E9\u67B0\u680C\u67D9\u67B5\u67DA\u67B3\u67DD\u6800\u67C3\u67B8\u67E2\u680E\u67C1\u67FD\u6832\u6833\u6860\u6861\u684E\u6862\u6844\u6864\u6883\u681D\u6855\u6866\u6841\u6867\u6840\u683E\u684A\u6849\u6829\u68B5\u688F\u6874\u6877\u6893\u686B\u68C2\u696E\u68FC\u691F\u6920\u68F9\"],[\"e940\",\"\u9527\u9533\u953D\u9543\u9548\u954B\u9555\u955A\u9560\u956E\u9574\u9575\u9577\",7,\"\u9580\",42],[\"e980\",\"\u95AB\",32,\"\u6924\u68F0\u690B\u6901\u6957\u68E3\u6910\u6971\u6939\u6960\u6942\u695D\u6984\u696B\u6980\u6998\u6978\u6934\u69CC\u6987\u6988\u69CE\u6989\u6966\u6963\u6979\u699B\u69A7\u69BB\u69AB\u69AD\u69D4\u69B1\u69C1\u69CA\u69DF\u6995\u69E0\u698D\u69FF\u6A2F\u69ED\u6A17\u6A18\u6A65\u69F2\u6A44\u6A3E\u6AA0\u6A50\u6A5B\u6A35\u6A8E\u6A79\u6A3D\u6A28\u6A58\u6A7C\u6A91\u6A90\u6AA9\u6A97\u6AAB\u7337\u7352\u6B81\u6B82\u6B87\u6B84\u6B92\u6B93\u6B8D\u6B9A\u6B9B\u6BA1\u6BAA\u8F6B\u8F6D\u8F71\u8F72\u8F73\u8F75\u8F76\u8F78\u8F77\u8F79\u8F7A\u8F7C\u8F7E\u8F81\u8F82\u8F84\u8F87\u8F8B\"],[\"ea40\",\"\u95CC\",27,\"\u95EC\u95FF\u9607\u9613\u9618\u961B\u961E\u9620\u9623\",6,\"\u962B\u962C\u962D\u962F\u9630\u9637\u9638\u9639\u963A\u963E\u9641\u9643\u964A\u964E\u964F\u9651\u9652\u9653\u9656\u9657\"],[\"ea80\",\"\u9658\u9659\u965A\u965C\u965D\u965E\u9660\u9663\u9665\u9666\u966B\u966D\",4,\"\u9673\u9678\",12,\"\u9687\u9689\u968A\u8F8D\u8F8E\u8F8F\u8F98\u8F9A\u8ECE\u620B\u6217\u621B\u621F\u6222\u6221\u6225\u6224\u622C\u81E7\u74EF\u74F4\u74FF\u750F\u7511\u7513\u6534\u65EE\u65EF\u65F0\u660A\u6619\u6772\u6603\u6615\u6600\u7085\u66F7\u661D\u6634\u6631\u6636\u6635\u8006\u665F\u6654\u6641\u664F\u6656\u6661\u6657\u6677\u6684\u668C\u66A7\u669D\u66BE\u66DB\u66DC\u66E6\u66E9\u8D32\u8D33\u8D36\u8D3B\u8D3D\u8D40\u8D45\u8D46\u8D48\u8D49\u8D47\u8D4D\u8D55\u8D59\u89C7\u89CA\u89CB\u89CC\u89CE\u89CF\u89D0\u89D1\u726E\u729F\u725D\u7266\u726F\u727E\u727F\u7284\u728B\u728D\u728F\u7292\u6308\u6332\u63B0\"],[\"eb40\",\"\u968C\u968E\u9691\u9692\u9693\u9695\u9696\u969A\u969B\u969D\",9,\"\u96A8\",7,\"\u96B1\u96B2\u96B4\u96B5\u96B7\u96B8\u96BA\u96BB\u96BF\u96C2\u96C3\u96C8\u96CA\u96CB\u96D0\u96D1\u96D3\u96D4\u96D6\",9,\"\u96E1\",6,\"\u96EB\"],[\"eb80\",\"\u96EC\u96ED\u96EE\u96F0\u96F1\u96F2\u96F4\u96F5\u96F8\u96FA\u96FB\u96FC\u96FD\u96FF\u9702\u9703\u9705\u970A\u970B\u970C\u9710\u9711\u9712\u9714\u9715\u9717\",4,\"\u971D\u971F\u9720\u643F\u64D8\u8004\u6BEA\u6BF3\u6BFD\u6BF5\u6BF9\u6C05\u6C07\u6C06\u6C0D\u6C15\u6C18\u6C19\u6C1A\u6C21\u6C29\u6C24\u6C2A\u6C32\u6535\u6555\u656B\u724D\u7252\u7256\u7230\u8662\u5216\u809F\u809C\u8093\u80BC\u670A\u80BD\u80B1\u80AB\u80AD\u80B4\u80B7\u80E7\u80E8\u80E9\u80EA\u80DB\u80C2\u80C4\u80D9\u80CD\u80D7\u6710\u80DD\u80EB\u80F1\u80F4\u80ED\u810D\u810E\u80F2\u80FC\u6715\u8112\u8C5A\u8136\u811E\u812C\u8118\u8132\u8148\u814C\u8153\u8174\u8159\u815A\u8171\u8160\u8169\u817C\u817D\u816D\u8167\u584D\u5AB5\u8188\u8182\u8191\u6ED5\u81A3\u81AA\u81CC\u6726\u81CA\u81BB\"],[\"ec40\",\"\u9721\",8,\"\u972B\u972C\u972E\u972F\u9731\u9733\",4,\"\u973A\u973B\u973C\u973D\u973F\",18,\"\u9754\u9755\u9757\u9758\u975A\u975C\u975D\u975F\u9763\u9764\u9766\u9767\u9768\u976A\",7],[\"ec80\",\"\u9772\u9775\u9777\",4,\"\u977D\",7,\"\u9786\",4,\"\u978C\u978E\u978F\u9790\u9793\u9795\u9796\u9797\u9799\",4,\"\u81C1\u81A6\u6B24\u6B37\u6B39\u6B43\u6B46\u6B59\u98D1\u98D2\u98D3\u98D5\u98D9\u98DA\u6BB3\u5F40\u6BC2\u89F3\u6590\u9F51\u6593\u65BC\u65C6\u65C4\u65C3\u65CC\u65CE\u65D2\u65D6\u7080\u709C\u7096\u709D\u70BB\u70C0\u70B7\u70AB\u70B1\u70E8\u70CA\u7110\u7113\u7116\u712F\u7131\u7173\u715C\u7168\u7145\u7172\u714A\u7178\u717A\u7198\u71B3\u71B5\u71A8\u71A0\u71E0\u71D4\u71E7\u71F9\u721D\u7228\u706C\u7118\u7166\u71B9\u623E\u623D\u6243\u6248\u6249\u793B\u7940\u7946\u7949\u795B\u795C\u7953\u795A\u7962\u7957\u7960\u796F\u7967\u797A\u7985\u798A\u799A\u79A7\u79B3\u5FD1\u5FD0\"],[\"ed40\",\"\u979E\u979F\u97A1\u97A2\u97A4\",6,\"\u97AC\u97AE\u97B0\u97B1\u97B3\u97B5\",46],[\"ed80\",\"\u97E4\u97E5\u97E8\u97EE\",4,\"\u97F4\u97F7\",23,\"\u603C\u605D\u605A\u6067\u6041\u6059\u6063\u60AB\u6106\u610D\u615D\u61A9\u619D\u61CB\u61D1\u6206\u8080\u807F\u6C93\u6CF6\u6DFC\u77F6\u77F8\u7800\u7809\u7817\u7818\u7811\u65AB\u782D\u781C\u781D\u7839\u783A\u783B\u781F\u783C\u7825\u782C\u7823\u7829\u784E\u786D\u7856\u7857\u7826\u7850\u7847\u784C\u786A\u789B\u7893\u789A\u7887\u789C\u78A1\u78A3\u78B2\u78B9\u78A5\u78D4\u78D9\u78C9\u78EC\u78F2\u7905\u78F4\u7913\u7924\u791E\u7934\u9F9B\u9EF9\u9EFB\u9EFC\u76F1\u7704\u770D\u76F9\u7707\u7708\u771A\u7722\u7719\u772D\u7726\u7735\u7738\u7750\u7751\u7747\u7743\u775A\u7768\"],[\"ee40\",\"\u980F\",62],[\"ee80\",\"\u984E\",32,\"\u7762\u7765\u777F\u778D\u777D\u7780\u778C\u7791\u779F\u77A0\u77B0\u77B5\u77BD\u753A\u7540\u754E\u754B\u7548\u755B\u7572\u7579\u7583\u7F58\u7F61\u7F5F\u8A48\u7F68\u7F74\u7F71\u7F79\u7F81\u7F7E\u76CD\u76E5\u8832\u9485\u9486\u9487\u948B\u948A\u948C\u948D\u948F\u9490\u9494\u9497\u9495\u949A\u949B\u949C\u94A3\u94A4\u94AB\u94AA\u94AD\u94AC\u94AF\u94B0\u94B2\u94B4\u94B6\",4,\"\u94BC\u94BD\u94BF\u94C4\u94C8\",6,\"\u94D0\u94D1\u94D2\u94D5\u94D6\u94D7\u94D9\u94D8\u94DB\u94DE\u94DF\u94E0\u94E2\u94E4\u94E5\u94E7\u94E8\u94EA\"],[\"ef40\",\"\u986F\",5,\"\u988B\u988E\u9892\u9895\u9899\u98A3\u98A8\",37,\"\u98CF\u98D0\u98D4\u98D6\u98D7\u98DB\u98DC\u98DD\u98E0\",4],[\"ef80\",\"\u98E5\u98E6\u98E9\",30,\"\u94E9\u94EB\u94EE\u94EF\u94F3\u94F4\u94F5\u94F7\u94F9\u94FC\u94FD\u94FF\u9503\u9502\u9506\u9507\u9509\u950A\u950D\u950E\u950F\u9512\",4,\"\u9518\u951B\u951D\u951E\u951F\u9522\u952A\u952B\u9529\u952C\u9531\u9532\u9534\u9536\u9537\u9538\u953C\u953E\u953F\u9542\u9535\u9544\u9545\u9546\u9549\u954C\u954E\u954F\u9552\u9553\u9554\u9556\u9557\u9558\u9559\u955B\u955E\u955F\u955D\u9561\u9562\u9564\",8,\"\u956F\u9571\u9572\u9573\u953A\u77E7\u77EC\u96C9\u79D5\u79ED\u79E3\u79EB\u7A06\u5D47\u7A03\u7A02\u7A1E\u7A14\"],[\"f040\",\"\u9908\",4,\"\u990E\u990F\u9911\",28,\"\u992F\",26],[\"f080\",\"\u994A\",9,\"\u9956\",12,\"\u9964\u9966\u9973\u9978\u9979\u997B\u997E\u9982\u9983\u9989\u7A39\u7A37\u7A51\u9ECF\u99A5\u7A70\u7688\u768E\u7693\u7699\u76A4\u74DE\u74E0\u752C\u9E20\u9E22\u9E28\",4,\"\u9E32\u9E31\u9E36\u9E38\u9E37\u9E39\u9E3A\u9E3E\u9E41\u9E42\u9E44\u9E46\u9E47\u9E48\u9E49\u9E4B\u9E4C\u9E4E\u9E51\u9E55\u9E57\u9E5A\u9E5B\u9E5C\u9E5E\u9E63\u9E66\",6,\"\u9E71\u9E6D\u9E73\u7592\u7594\u7596\u75A0\u759D\u75AC\u75A3\u75B3\u75B4\u75B8\u75C4\u75B1\u75B0\u75C3\u75C2\u75D6\u75CD\u75E3\u75E8\u75E6\u75E4\u75EB\u75E7\u7603\u75F1\u75FC\u75FF\u7610\u7600\u7605\u760C\u7617\u760A\u7625\u7618\u7615\u7619\"],[\"f140\",\"\u998C\u998E\u999A\",10,\"\u99A6\u99A7\u99A9\",47],[\"f180\",\"\u99D9\",32,\"\u761B\u763C\u7622\u7620\u7640\u762D\u7630\u763F\u7635\u7643\u763E\u7633\u764D\u765E\u7654\u765C\u7656\u766B\u766F\u7FCA\u7AE6\u7A78\u7A79\u7A80\u7A86\u7A88\u7A95\u7AA6\u7AA0\u7AAC\u7AA8\u7AAD\u7AB3\u8864\u8869\u8872\u887D\u887F\u8882\u88A2\u88C6\u88B7\u88BC\u88C9\u88E2\u88CE\u88E3\u88E5\u88F1\u891A\u88FC\u88E8\u88FE\u88F0\u8921\u8919\u8913\u891B\u890A\u8934\u892B\u8936\u8941\u8966\u897B\u758B\u80E5\u76B2\u76B4\u77DC\u8012\u8014\u8016\u801C\u8020\u8022\u8025\u8026\u8027\u8029\u8028\u8031\u800B\u8035\u8043\u8046\u804D\u8052\u8069\u8071\u8983\u9878\u9880\u9883\"],[\"f240\",\"\u99FA\",62],[\"f280\",\"\u9A39\",32,\"\u9889\u988C\u988D\u988F\u9894\u989A\u989B\u989E\u989F\u98A1\u98A2\u98A5\u98A6\u864D\u8654\u866C\u866E\u867F\u867A\u867C\u867B\u86A8\u868D\u868B\u86AC\u869D\u86A7\u86A3\u86AA\u8693\u86A9\u86B6\u86C4\u86B5\u86CE\u86B0\u86BA\u86B1\u86AF\u86C9\u86CF\u86B4\u86E9\u86F1\u86F2\u86ED\u86F3\u86D0\u8713\u86DE\u86F4\u86DF\u86D8\u86D1\u8703\u8707\u86F8\u8708\u870A\u870D\u8709\u8723\u873B\u871E\u8725\u872E\u871A\u873E\u8748\u8734\u8731\u8729\u8737\u873F\u8782\u8722\u877D\u877E\u877B\u8760\u8770\u874C\u876E\u878B\u8753\u8763\u877C\u8764\u8759\u8765\u8793\u87AF\u87A8\u87D2\"],[\"f340\",\"\u9A5A\",17,\"\u9A72\u9A83\u9A89\u9A8D\u9A8E\u9A94\u9A95\u9A99\u9AA6\u9AA9\",6,\"\u9AB2\u9AB3\u9AB4\u9AB5\u9AB9\u9ABB\u9ABD\u9ABE\u9ABF\u9AC3\u9AC4\u9AC6\",4,\"\u9ACD\u9ACE\u9ACF\u9AD0\u9AD2\u9AD4\u9AD5\u9AD6\u9AD7\u9AD9\u9ADA\u9ADB\u9ADC\"],[\"f380\",\"\u9ADD\u9ADE\u9AE0\u9AE2\u9AE3\u9AE4\u9AE5\u9AE7\u9AE8\u9AE9\u9AEA\u9AEC\u9AEE\u9AF0\",8,\"\u9AFA\u9AFC\",6,\"\u9B04\u9B05\u9B06\u87C6\u8788\u8785\u87AD\u8797\u8783\u87AB\u87E5\u87AC\u87B5\u87B3\u87CB\u87D3\u87BD\u87D1\u87C0\u87CA\u87DB\u87EA\u87E0\u87EE\u8816\u8813\u87FE\u880A\u881B\u8821\u8839\u883C\u7F36\u7F42\u7F44\u7F45\u8210\u7AFA\u7AFD\u7B08\u7B03\u7B04\u7B15\u7B0A\u7B2B\u7B0F\u7B47\u7B38\u7B2A\u7B19\u7B2E\u7B31\u7B20\u7B25\u7B24\u7B33\u7B3E\u7B1E\u7B58\u7B5A\u7B45\u7B75\u7B4C\u7B5D\u7B60\u7B6E\u7B7B\u7B62\u7B72\u7B71\u7B90\u7BA6\u7BA7\u7BB8\u7BAC\u7B9D\u7BA8\u7B85\u7BAA\u7B9C\u7BA2\u7BAB\u7BB4\u7BD1\u7BC1\u7BCC\u7BDD\u7BDA\u7BE5\u7BE6\u7BEA\u7C0C\u7BFE\u7BFC\u7C0F\u7C16\u7C0B\"],[\"f440\",\"\u9B07\u9B09\",5,\"\u9B10\u9B11\u9B12\u9B14\",10,\"\u9B20\u9B21\u9B22\u9B24\",10,\"\u9B30\u9B31\u9B33\",7,\"\u9B3D\u9B3E\u9B3F\u9B40\u9B46\u9B4A\u9B4B\u9B4C\u9B4E\u9B50\u9B52\u9B53\u9B55\",5],[\"f480\",\"\u9B5B\",32,\"\u7C1F\u7C2A\u7C26\u7C38\u7C41\u7C40\u81FE\u8201\u8202\u8204\u81EC\u8844\u8221\u8222\u8223\u822D\u822F\u8228\u822B\u8238\u823B\u8233\u8234\u823E\u8244\u8249\u824B\u824F\u825A\u825F\u8268\u887E\u8885\u8888\u88D8\u88DF\u895E\u7F9D\u7F9F\u7FA7\u7FAF\u7FB0\u7FB2\u7C7C\u6549\u7C91\u7C9D\u7C9C\u7C9E\u7CA2\u7CB2\u7CBC\u7CBD\u7CC1\u7CC7\u7CCC\u7CCD\u7CC8\u7CC5\u7CD7\u7CE8\u826E\u66A8\u7FBF\u7FCE\u7FD5\u7FE5\u7FE1\u7FE6\u7FE9\u7FEE\u7FF3\u7CF8\u7D77\u7DA6\u7DAE\u7E47\u7E9B\u9EB8\u9EB4\u8D73\u8D84\u8D94\u8D91\u8DB1\u8D67\u8D6D\u8C47\u8C49\u914A\u9150\u914E\u914F\u9164\"],[\"f540\",\"\u9B7C\",62],[\"f580\",\"\u9BBB\",32,\"\u9162\u9161\u9170\u9169\u916F\u917D\u917E\u9172\u9174\u9179\u918C\u9185\u9190\u918D\u9191\u91A2\u91A3\u91AA\u91AD\u91AE\u91AF\u91B5\u91B4\u91BA\u8C55\u9E7E\u8DB8\u8DEB\u8E05\u8E59\u8E69\u8DB5\u8DBF\u8DBC\u8DBA\u8DC4\u8DD6\u8DD7\u8DDA\u8DDE\u8DCE\u8DCF\u8DDB\u8DC6\u8DEC\u8DF7\u8DF8\u8DE3\u8DF9\u8DFB\u8DE4\u8E09\u8DFD\u8E14\u8E1D\u8E1F\u8E2C\u8E2E\u8E23\u8E2F\u8E3A\u8E40\u8E39\u8E35\u8E3D\u8E31\u8E49\u8E41\u8E42\u8E51\u8E52\u8E4A\u8E70\u8E76\u8E7C\u8E6F\u8E74\u8E85\u8E8F\u8E94\u8E90\u8E9C\u8E9E\u8C78\u8C82\u8C8A\u8C85\u8C98\u8C94\u659B\u89D6\u89DE\u89DA\u89DC\"],[\"f640\",\"\u9BDC\",62],[\"f680\",\"\u9C1B\",32,\"\u89E5\u89EB\u89EF\u8A3E\u8B26\u9753\u96E9\u96F3\u96EF\u9706\u9701\u9708\u970F\u970E\u972A\u972D\u9730\u973E\u9F80\u9F83\u9F85\",5,\"\u9F8C\u9EFE\u9F0B\u9F0D\u96B9\u96BC\u96BD\u96CE\u96D2\u77BF\u96E0\u928E\u92AE\u92C8\u933E\u936A\u93CA\u938F\u943E\u946B\u9C7F\u9C82\u9C85\u9C86\u9C87\u9C88\u7A23\u9C8B\u9C8E\u9C90\u9C91\u9C92\u9C94\u9C95\u9C9A\u9C9B\u9C9E\",5,\"\u9CA5\",4,\"\u9CAB\u9CAD\u9CAE\u9CB0\",7,\"\u9CBA\u9CBB\u9CBC\u9CBD\u9CC4\u9CC5\u9CC6\u9CC7\u9CCA\u9CCB\"],[\"f740\",\"\u9C3C\",62],[\"f780\",\"\u9C7B\u9C7D\u9C7E\u9C80\u9C83\u9C84\u9C89\u9C8A\u9C8C\u9C8F\u9C93\u9C96\u9C97\u9C98\u9C99\u9C9D\u9CAA\u9CAC\u9CAF\u9CB9\u9CBE\",4,\"\u9CC8\u9CC9\u9CD1\u9CD2\u9CDA\u9CDB\u9CE0\u9CE1\u9CCC\",4,\"\u9CD3\u9CD4\u9CD5\u9CD7\u9CD8\u9CD9\u9CDC\u9CDD\u9CDF\u9CE2\u977C\u9785\u9791\u9792\u9794\u97AF\u97AB\u97A3\u97B2\u97B4\u9AB1\u9AB0\u9AB7\u9E58\u9AB6\u9ABA\u9ABC\u9AC1\u9AC0\u9AC5\u9AC2\u9ACB\u9ACC\u9AD1\u9B45\u9B43\u9B47\u9B49\u9B48\u9B4D\u9B51\u98E8\u990D\u992E\u9955\u9954\u9ADF\u9AE1\u9AE6\u9AEF\u9AEB\u9AFB\u9AED\u9AF9\u9B08\u9B0F\u9B13\u9B1F\u9B23\u9EBD\u9EBE\u7E3B\u9E82\u9E87\u9E88\u9E8B\u9E92\u93D6\u9E9D\u9E9F\u9EDB\u9EDC\u9EDD\u9EE0\u9EDF\u9EE2\u9EE9\u9EE7\u9EE5\u9EEA\u9EEF\u9F22\u9F2C\u9F2F\u9F39\u9F37\u9F3D\u9F3E\u9F44\"],[\"f840\",\"\u9CE3\",62],[\"f880\",\"\u9D22\",32],[\"f940\",\"\u9D43\",62],[\"f980\",\"\u9D82\",32],[\"fa40\",\"\u9DA3\",62],[\"fa80\",\"\u9DE2\",32],[\"fb40\",\"\u9E03\",27,\"\u9E24\u9E27\u9E2E\u9E30\u9E34\u9E3B\u9E3C\u9E40\u9E4D\u9E50\u9E52\u9E53\u9E54\u9E56\u9E59\u9E5D\u9E5F\u9E60\u9E61\u9E62\u9E65\u9E6E\u9E6F\u9E72\u9E74\",9,\"\u9E80\"],[\"fb80\",\"\u9E81\u9E83\u9E84\u9E85\u9E86\u9E89\u9E8A\u9E8C\",5,\"\u9E94\",8,\"\u9E9E\u9EA0\",5,\"\u9EA7\u9EA8\u9EA9\u9EAA\"],[\"fc40\",\"\u9EAB\",8,\"\u9EB5\u9EB6\u9EB7\u9EB9\u9EBA\u9EBC\u9EBF\",4,\"\u9EC5\u9EC6\u9EC7\u9EC8\u9ECA\u9ECB\u9ECC\u9ED0\u9ED2\u9ED3\u9ED5\u9ED6\u9ED7\u9ED9\u9EDA\u9EDE\u9EE1\u9EE3\u9EE4\u9EE6\u9EE8\u9EEB\u9EEC\u9EED\u9EEE\u9EF0\",8,\"\u9EFA\u9EFD\u9EFF\",6],[\"fc80\",\"\u9F06\",4,\"\u9F0C\u9F0F\u9F11\u9F12\u9F14\u9F15\u9F16\u9F18\u9F1A\",5,\"\u9F21\u9F23\",8,\"\u9F2D\u9F2E\u9F30\u9F31\"],[\"fd40\",\"\u9F32\",4,\"\u9F38\u9F3A\u9F3C\u9F3F\",4,\"\u9F45\",10,\"\u9F52\",38],[\"fd80\",\"\u9F79\",5,\"\u9F81\u9F82\u9F8D\",11,\"\u9F9C\u9F9D\u9F9E\u9FA1\",4,\"\uF92C\uF979\uF995\uF9E7\uF9F1\"],[\"fe40\",\"\uFA0C\uFA0D\uFA0E\uFA0F\uFA11\uFA13\uFA14\uFA18\uFA1F\uFA20\uFA21\uFA23\uFA24\uFA27\uFA28\uFA29\"]]");
      /***/
    },
    /* 172 */

    /***/
    function (module, exports, __webpack_require__) {
      // fallback for non-array-like ES3 and non-enumerable old V8 strings
      var cof = __webpack_require__(99); // eslint-disable-next-line no-prototype-builtins


      module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
        return cof(it) == 'String' ? it.split('') : Object(it);
      };
      /***/
    },
    /* 173 */

    /***/
    function (module, exports) {
      // 7.2.1 RequireObjectCoercible(argument)
      module.exports = function (it) {
        if (it == undefined) throw TypeError("Can't call method on  " + it);
        return it;
      };
      /***/

    },
    /* 174 */

    /***/
    function (module, exports, __webpack_require__) {
      var pIE = __webpack_require__(128);

      var createDesc = __webpack_require__(100);

      var toIObject = __webpack_require__(50);

      var toPrimitive = __webpack_require__(175);

      var has = __webpack_require__(51);

      var IE8_DOM_DEFINE = __webpack_require__(254);

      var gOPD = Object.getOwnPropertyDescriptor;
      exports.f = __webpack_require__(23) ? gOPD : function getOwnPropertyDescriptor(O, P) {
        O = toIObject(O);
        P = toPrimitive(P, true);
        if (IE8_DOM_DEFINE) try {
          return gOPD(O, P);
        } catch (e) {
          /* empty */
        }
        if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
      };
      /***/
    },
    /* 175 */

    /***/
    function (module, exports, __webpack_require__) {
      // 7.1.1 ToPrimitive(input [, PreferredType])
      var isObject = __webpack_require__(22); // instead of the ES6 spec version, we didn't implement @@toPrimitive case
      // and the second argument - flag - preferred type is a string


      module.exports = function (it, S) {
        if (!isObject(it)) return it;
        var fn, val;
        if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
        if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
        if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
        throw TypeError("Can't convert object to primitive value");
      };
      /***/

    },
    /* 176 */

    /***/
    function (module, exports, __webpack_require__) {
      var isObject = __webpack_require__(22);

      var document = __webpack_require__(17).document; // typeof document.createElement is 'object' in old IE


      var is = isObject(document) && isObject(document.createElement);

      module.exports = function (it) {
        return is ? document.createElement(it) : {};
      };
      /***/

    },
    /* 177 */

    /***/
    function (module, exports, __webpack_require__) {
      // most Object methods by ES6 should accept primitives
      var $export = __webpack_require__(9);

      var core = __webpack_require__(7);

      var fails = __webpack_require__(52);

      module.exports = function (KEY, exec) {
        var fn = (core.Object || {})[KEY] || Object[KEY];
        var exp = {};
        exp[KEY] = exec(fn);
        $export($export.S + $export.F * fails(function () {
          fn(1);
        }), 'Object', exp);
      };
      /***/

    },
    /* 178 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var LIBRARY = __webpack_require__(104);

      var $export = __webpack_require__(9);

      var redefine = __webpack_require__(256);

      var hide = __webpack_require__(41);

      var Iterators = __webpack_require__(103);

      var $iterCreate = __webpack_require__(424);

      var setToStringTag = __webpack_require__(106);

      var getPrototypeOf = __webpack_require__(426);

      var ITERATOR = __webpack_require__(21)('iterator');

      var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`

      var FF_ITERATOR = '@@iterator';
      var KEYS = 'keys';
      var VALUES = 'values';

      var returnThis = function returnThis() {
        return this;
      };

      module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
        $iterCreate(Constructor, NAME, next);

        var getMethod = function getMethod(kind) {
          if (!BUGGY && kind in proto) return proto[kind];

          switch (kind) {
            case KEYS:
              return function keys() {
                return new Constructor(this, kind);
              };

            case VALUES:
              return function values() {
                return new Constructor(this, kind);
              };
          }

          return function entries() {
            return new Constructor(this, kind);
          };
        };

        var TAG = NAME + ' Iterator';
        var DEF_VALUES = DEFAULT == VALUES;
        var VALUES_BUG = false;
        var proto = Base.prototype;
        var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
        var $default = $native || getMethod(DEFAULT);
        var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
        var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
        var methods, key, IteratorPrototype; // Fix native

        if ($anyNative) {
          IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));

          if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
            // Set @@toStringTag to native iterators
            setToStringTag(IteratorPrototype, TAG, true); // fix for some old engines

            if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);
          }
        } // fix Array#{values, @@iterator}.name in V8 / FF


        if (DEF_VALUES && $native && $native.name !== VALUES) {
          VALUES_BUG = true;

          $default = function values() {
            return $native.call(this);
          };
        } // Define iterator


        if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
          hide(proto, ITERATOR, $default);
        } // Plug for library


        Iterators[NAME] = $default;
        Iterators[TAG] = returnThis;

        if (DEFAULT) {
          methods = {
            values: DEF_VALUES ? $default : getMethod(VALUES),
            keys: IS_SET ? $default : getMethod(KEYS),
            entries: $entries
          };
          if (FORCED) for (key in methods) {
            if (!(key in proto)) redefine(proto, key, methods[key]);
          } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
        }

        return methods;
      };
      /***/

    },
    /* 179 */

    /***/
    function (module, exports) {
      // 7.1.4 ToInteger
      var ceil = Math.ceil;
      var floor = Math.floor;

      module.exports = function (it) {
        return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
      };
      /***/

    },
    /* 180 */

    /***/
    function (module, exports, __webpack_require__) {
      var shared = __webpack_require__(181)('keys');

      var uid = __webpack_require__(131);

      module.exports = function (key) {
        return shared[key] || (shared[key] = uid(key));
      };
      /***/

    },
    /* 181 */

    /***/
    function (module, exports, __webpack_require__) {
      var core = __webpack_require__(7);

      var global = __webpack_require__(17);

      var SHARED = '__core-js_shared__';
      var store = global[SHARED] || (global[SHARED] = {});
      (module.exports = function (key, value) {
        return store[key] || (store[key] = value !== undefined ? value : {});
      })('versions', []).push({
        version: core.version,
        mode: __webpack_require__(104) ? 'pure' : 'global',
        copyright: '© 2019 Denis Pushkarev (zloirock.ru)'
      });
      /***/
    },
    /* 182 */

    /***/
    function (module, exports) {
      // IE 8- don't enum bug keys
      module.exports = 'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'.split(',');
      /***/
    },
    /* 183 */

    /***/
    function (module, exports, __webpack_require__) {
      var classof = __webpack_require__(184);

      var ITERATOR = __webpack_require__(21)('iterator');

      var Iterators = __webpack_require__(103);

      module.exports = __webpack_require__(7).getIteratorMethod = function (it) {
        if (it != undefined) return it[ITERATOR] || it['@@iterator'] || Iterators[classof(it)];
      };
      /***/

    },
    /* 184 */

    /***/
    function (module, exports, __webpack_require__) {
      // getting tag from 19.1.3.6 Object.prototype.toString()
      var cof = __webpack_require__(99);

      var TAG = __webpack_require__(21)('toStringTag'); // ES3 wrong here


      var ARG = cof(function () {
        return arguments;
      }()) == 'Arguments'; // fallback for IE11 Script Access Denied error

      var tryGet = function tryGet(it, key) {
        try {
          return it[key];
        } catch (e) {
          /* empty */
        }
      };

      module.exports = function (it) {
        var O, T, B;
        return it === undefined ? 'Undefined' : it === null ? 'Null' // @@toStringTag case
        : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T // builtinTag case
        : ARG ? cof(O) // ES3 arguments fallback
        : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
      };
      /***/

    },
    /* 185 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      exports.__esModule = true;

      var _iterator = __webpack_require__(432);

      var _iterator2 = _interopRequireDefault(_iterator);

      var _symbol = __webpack_require__(434);

      var _symbol2 = _interopRequireDefault(_symbol);

      var _typeof = typeof _symbol2.default === "function" && _typeof4(_iterator2.default) === "symbol" ? function (obj) {
        return _typeof4(obj);
      } : function (obj) {
        return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : _typeof4(obj);
      };

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          default: obj
        };
      }

      exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
        return typeof obj === "undefined" ? "undefined" : _typeof(obj);
      } : function (obj) {
        return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
      };
      /***/
    },
    /* 186 */

    /***/
    function (module, exports, __webpack_require__) {
      exports.f = __webpack_require__(21);
      /***/
    },
    /* 187 */

    /***/
    function (module, exports, __webpack_require__) {
      var global = __webpack_require__(17);

      var core = __webpack_require__(7);

      var LIBRARY = __webpack_require__(104);

      var wksExt = __webpack_require__(186);

      var defineProperty = __webpack_require__(26).f;

      module.exports = function (name) {
        var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
        if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, {
          value: wksExt.f(name)
        });
      };
      /***/

    },
    /* 188 */

    /***/
    function (module, exports) {
      exports.f = Object.getOwnPropertySymbols;
      /***/
    },
    /* 189 */

    /***/
    function (module, exports, __webpack_require__) {
      var hide = __webpack_require__(41);

      module.exports = function (target, src, safe) {
        for (var key in src) {
          if (safe && target[key]) target[key] = src[key];else hide(target, key, src[key]);
        }

        return target;
      };
      /***/

    },
    /* 190 */

    /***/
    function (module, exports) {
      module.exports = function (it, Constructor, name, forbiddenField) {
        if (!(it instanceof Constructor) || forbiddenField !== undefined && forbiddenField in it) {
          throw TypeError(name + ': incorrect invocation!');
        }

        return it;
      };
      /***/

    },
    /* 191 */

    /***/
    function (module, exports, __webpack_require__) {
      var isObject = __webpack_require__(22);

      module.exports = function (it, TYPE) {
        if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');
        return it;
      };
      /***/

    },
    /* 192 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var $ = __webpack_require__(1);

      var $indexOf = __webpack_require__(93).indexOf;

      var arrayMethodIsStrict = __webpack_require__(59);

      var arrayMethodUsesToLength = __webpack_require__(31);

      var nativeIndexOf = [].indexOf;
      var NEGATIVE_ZERO = !!nativeIndexOf && 1 / [1].indexOf(1, -0) < 0;
      var STRICT_METHOD = arrayMethodIsStrict('indexOf');
      var USES_TO_LENGTH = arrayMethodUsesToLength('indexOf', {
        ACCESSORS: true,
        1: 0
      }); // `Array.prototype.indexOf` method
      // https://tc39.github.io/ecma262/#sec-array.prototype.indexof

      $({
        target: 'Array',
        proto: true,
        forced: NEGATIVE_ZERO || !STRICT_METHOD || !USES_TO_LENGTH
      }, {
        indexOf: function indexOf(searchElement
        /* , fromIndex = 0 */
        ) {
          return NEGATIVE_ZERO // convert -0 to +0
          ? nativeIndexOf.apply(this, arguments) || 0 : $indexOf(this, searchElement, arguments.length > 1 ? arguments[1] : undefined);
        }
      });
      /***/
    },
    /* 193 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict"; // 25.4.1.5 NewPromiseCapability(C)

      var aFunction = __webpack_require__(101);

      function PromiseCapability(C) {
        var resolve, reject;
        this.promise = new C(function ($$resolve, $$reject) {
          if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
          resolve = $$resolve;
          reject = $$reject;
        });
        this.resolve = aFunction(resolve);
        this.reject = aFunction(reject);
      }

      module.exports.f = function (C) {
        return new PromiseCapability(C);
      };
      /***/

    },
    /* 194 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var isString = __webpack_require__(0).isString;

      var isNumber = __webpack_require__(0).isNumber;

      var isObject = __webpack_require__(0).isObject;

      var isArray = __webpack_require__(0).isArray;

      var isUndefined = __webpack_require__(0).isUndefined;

      var LineBreaker = __webpack_require__(290);

      var LEADING = /^(\s)+/g;
      var TRAILING = /(\s)+$/g;
      /**
       * Creates an instance of TextTools - text measurement utility
       *
       * @constructor
       * @param {FontProvider} fontProvider
       */

      function TextTools(fontProvider) {
        this.fontProvider = fontProvider;
      }
      /**
       * Converts an array of strings (or inline-definition-objects) into a collection
       * of inlines and calculated minWidth/maxWidth.
       * and their min/max widths
       * @param  {Object} textArray - an array of inline-definition-objects (or strings)
       * @param  {Object} styleContextStack current style stack
       * @return {Object}                   collection of inlines, minWidth, maxWidth
       */


      TextTools.prototype.buildInlines = function (textArray, styleContextStack) {
        var measured = measure(this.fontProvider, textArray, styleContextStack);
        var minWidth = 0,
            maxWidth = 0,
            currentLineWidth;
        measured.forEach(function (inline) {
          minWidth = Math.max(minWidth, inline.width - inline.leadingCut - inline.trailingCut);

          if (!currentLineWidth) {
            currentLineWidth = {
              width: 0,
              leadingCut: inline.leadingCut,
              trailingCut: 0
            };
          }

          currentLineWidth.width += inline.width;
          currentLineWidth.trailingCut = inline.trailingCut;
          maxWidth = Math.max(maxWidth, getTrimmedWidth(currentLineWidth));

          if (inline.lineEnd) {
            currentLineWidth = null;
          }
        });

        if (getStyleProperty({}, styleContextStack, 'noWrap', false)) {
          minWidth = maxWidth;
        }

        return {
          items: measured,
          minWidth: minWidth,
          maxWidth: maxWidth
        };

        function getTrimmedWidth(item) {
          return Math.max(0, item.width - item.leadingCut - item.trailingCut);
        }
      };
      /**
       * Returns size of the specified string (without breaking it) using the current style
       * @param  {String} text              text to be measured
       * @param  {Object} styleContextStack current style stack
       * @return {Object}                   size of the specified string
       */


      TextTools.prototype.sizeOfString = function (text, styleContextStack) {
        text = text ? text.toString().replace(/\t/g, '    ') : ''; //TODO: refactor - extract from measure

        var fontName = getStyleProperty({}, styleContextStack, 'font', 'Roboto');
        var fontSize = getStyleProperty({}, styleContextStack, 'fontSize', 12);
        var fontFeatures = getStyleProperty({}, styleContextStack, 'fontFeatures', null);
        var bold = getStyleProperty({}, styleContextStack, 'bold', false);
        var italics = getStyleProperty({}, styleContextStack, 'italics', false);
        var lineHeight = getStyleProperty({}, styleContextStack, 'lineHeight', 1);
        var characterSpacing = getStyleProperty({}, styleContextStack, 'characterSpacing', 0);
        var font = this.fontProvider.provideFont(fontName, bold, italics);
        return {
          width: widthOfString(text, font, fontSize, characterSpacing, fontFeatures),
          height: font.lineHeight(fontSize) * lineHeight,
          fontSize: fontSize,
          lineHeight: lineHeight,
          ascender: font.ascender / 1000 * fontSize,
          descender: font.descender / 1000 * fontSize
        };
      };
      /**
       * Returns size of the specified rotated string (without breaking it) using the current style
       *
       * @param  {string} text text to be measured
       * @param  {number} angle
       * @param  {object} styleContextStack current style stack
       * @returns {object} size of the specified string
       */


      TextTools.prototype.sizeOfRotatedText = function (text, angle, styleContextStack) {
        var angleRad = angle * Math.PI / -180;
        var size = this.sizeOfString(text, styleContextStack);
        return {
          width: Math.abs(size.height * Math.sin(angleRad)) + Math.abs(size.width * Math.cos(angleRad)),
          height: Math.abs(size.width * Math.sin(angleRad)) + Math.abs(size.height * Math.cos(angleRad))
        };
      };

      TextTools.prototype.widthOfString = function (text, font, fontSize, characterSpacing, fontFeatures) {
        return widthOfString(text, font, fontSize, characterSpacing, fontFeatures);
      };

      function splitWords(text, noWrap) {
        var results = [];
        text = text.replace(/\t/g, '    ');

        if (noWrap) {
          results.push({
            text: text
          });
          return results;
        }

        var breaker = new LineBreaker(text);
        var last = 0;
        var bk;

        while (bk = breaker.nextBreak()) {
          var word = text.slice(last, bk.position);

          if (bk.required || word.match(/\r?\n$|\r$/)) {
            // new line
            word = word.replace(/\r?\n$|\r$/, '');
            results.push({
              text: word,
              lineEnd: true
            });
          } else {
            results.push({
              text: word
            });
          }

          last = bk.position;
        }

        return results;
      }

      function copyStyle(source, destination) {
        destination = destination || {};
        source = source || {}; //TODO: default style

        for (var key in source) {
          if (key != 'text' && source.hasOwnProperty(key)) {
            destination[key] = source[key];
          }
        }

        return destination;
      }

      function normalizeTextArray(array, styleContextStack) {
        function flatten(array) {
          return array.reduce(function (prev, cur) {
            var current = isArray(cur.text) ? flatten(cur.text) : cur;
            var more = [].concat(current).some(Array.isArray);
            return prev.concat(more ? flatten(current) : current);
          }, []);
        }

        function getOneWord(index, words, noWrap) {
          if (isUndefined(words[index])) {
            return null;
          }

          if (words[index].lineEnd) {
            return null;
          }

          var word = words[index].text;

          if (noWrap) {
            var tmpWords = splitWords(normalizeString(word), false);

            if (isUndefined(tmpWords[tmpWords.length - 1])) {
              return null;
            }

            word = tmpWords[tmpWords.length - 1].text;
          }

          return word;
        }

        var results = [];

        if (!isArray(array)) {
          array = [array];
        }

        array = flatten(array);
        var lastWord = null;

        for (var i = 0, l = array.length; i < l; i++) {
          var item = array[i];
          var style = null;
          var words;
          var noWrap = getStyleProperty(item || {}, styleContextStack, 'noWrap', false);

          if (isObject(item)) {
            if (item._textRef && item._textRef._textNodeRef.text) {
              item.text = item._textRef._textNodeRef.text;
            }

            words = splitWords(normalizeString(item.text), noWrap);
            style = copyStyle(item);
          } else {
            words = splitWords(normalizeString(item), noWrap);
          }

          if (lastWord && words.length) {
            var firstWord = getOneWord(0, words, noWrap);
            var wrapWords = splitWords(normalizeString(lastWord + firstWord), false);

            if (wrapWords.length === 1) {
              results[results.length - 1].noNewLine = true;
            }
          }

          for (var i2 = 0, l2 = words.length; i2 < l2; i2++) {
            var result = {
              text: words[i2].text
            };

            if (words[i2].lineEnd) {
              result.lineEnd = true;
            }

            copyStyle(style, result);
            results.push(result);
          }

          lastWord = null;

          if (i + 1 < l) {
            lastWord = getOneWord(words.length - 1, words, noWrap);
          }
        }

        return results;
      }

      function normalizeString(value) {
        if (value === undefined || value === null) {
          return '';
        } else if (isNumber(value)) {
          return value.toString();
        } else if (isString(value)) {
          return value;
        } else {
          return value.toString();
        }
      }

      function getStyleProperty(item, styleContextStack, property, defaultValue) {
        var value;

        if (item[property] !== undefined && item[property] !== null) {
          // item defines this property
          return item[property];
        }

        if (!styleContextStack) {
          return defaultValue;
        }

        styleContextStack.auto(item, function () {
          value = styleContextStack.getProperty(property);
        });

        if (value !== null && value !== undefined) {
          return value;
        } else {
          return defaultValue;
        }
      }

      function measure(fontProvider, textArray, styleContextStack) {
        var normalized = normalizeTextArray(textArray, styleContextStack);

        if (normalized.length) {
          var leadingIndent = getStyleProperty(normalized[0], styleContextStack, 'leadingIndent', 0);

          if (leadingIndent) {
            normalized[0].leadingCut = -leadingIndent;
            normalized[0].leadingIndent = leadingIndent;
          }
        }

        normalized.forEach(function (item) {
          var fontName = getStyleProperty(item, styleContextStack, 'font', 'Roboto');
          var fontSize = getStyleProperty(item, styleContextStack, 'fontSize', 12);
          var fontFeatures = getStyleProperty(item, styleContextStack, 'fontFeatures', null);
          var bold = getStyleProperty(item, styleContextStack, 'bold', false);
          var italics = getStyleProperty(item, styleContextStack, 'italics', false);
          var color = getStyleProperty(item, styleContextStack, 'color', 'black');
          var decoration = getStyleProperty(item, styleContextStack, 'decoration', null);
          var decorationColor = getStyleProperty(item, styleContextStack, 'decorationColor', null);
          var decorationStyle = getStyleProperty(item, styleContextStack, 'decorationStyle', null);
          var background = getStyleProperty(item, styleContextStack, 'background', null);
          var lineHeight = getStyleProperty(item, styleContextStack, 'lineHeight', 1);
          var characterSpacing = getStyleProperty(item, styleContextStack, 'characterSpacing', 0);
          var link = getStyleProperty(item, styleContextStack, 'link', null);
          var linkToPage = getStyleProperty(item, styleContextStack, 'linkToPage', null);
          var linkToDestination = getStyleProperty(item, styleContextStack, 'linkToDestination', null);
          var noWrap = getStyleProperty(item, styleContextStack, 'noWrap', null);
          var preserveLeadingSpaces = getStyleProperty(item, styleContextStack, 'preserveLeadingSpaces', false);
          var preserveTrailingSpaces = getStyleProperty(item, styleContextStack, 'preserveTrailingSpaces', false);
          var opacity = getStyleProperty(item, styleContextStack, 'opacity', 1);
          var font = fontProvider.provideFont(fontName, bold, italics);
          item.width = widthOfString(item.text, font, fontSize, characterSpacing, fontFeatures);
          item.height = font.lineHeight(fontSize) * lineHeight;

          if (!item.leadingCut) {
            item.leadingCut = 0;
          }

          var leadingSpaces;

          if (!preserveLeadingSpaces && (leadingSpaces = item.text.match(LEADING))) {
            item.leadingCut += widthOfString(leadingSpaces[0], font, fontSize, characterSpacing, fontFeatures);
          }

          var trailingSpaces;

          if (!preserveTrailingSpaces && (trailingSpaces = item.text.match(TRAILING))) {
            item.trailingCut = widthOfString(trailingSpaces[0], font, fontSize, characterSpacing, fontFeatures);
          } else {
            item.trailingCut = 0;
          }

          item.alignment = getStyleProperty(item, styleContextStack, 'alignment', 'left');
          item.font = font;
          item.fontSize = fontSize;
          item.fontFeatures = fontFeatures;
          item.characterSpacing = characterSpacing;
          item.color = color;
          item.decoration = decoration;
          item.decorationColor = decorationColor;
          item.decorationStyle = decorationStyle;
          item.background = background;
          item.link = link;
          item.linkToPage = linkToPage;
          item.linkToDestination = linkToDestination;
          item.noWrap = noWrap;
          item.opacity = opacity;
        });
        return normalized;
      }

      function widthOfString(text, font, fontSize, characterSpacing, fontFeatures) {
        return font.widthOfString(text, fontSize, fontFeatures) + (characterSpacing || 0) * (text.length - 1);
      }

      module.exports = TextTools;
      /***/
    },
    /* 195 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var isString = __webpack_require__(0).isString;

      function buildColumnWidths(columns, availableWidth) {
        var autoColumns = [],
            autoMin = 0,
            autoMax = 0,
            starColumns = [],
            starMaxMin = 0,
            starMaxMax = 0,
            fixedColumns = [],
            initial_availableWidth = availableWidth;
        columns.forEach(function (column) {
          if (isAutoColumn(column)) {
            autoColumns.push(column);
            autoMin += column._minWidth;
            autoMax += column._maxWidth;
          } else if (isStarColumn(column)) {
            starColumns.push(column);
            starMaxMin = Math.max(starMaxMin, column._minWidth);
            starMaxMax = Math.max(starMaxMax, column._maxWidth);
          } else {
            fixedColumns.push(column);
          }
        });
        fixedColumns.forEach(function (col) {
          // width specified as %
          if (isString(col.width) && /\d+%/.test(col.width)) {
            col.width = parseFloat(col.width) * initial_availableWidth / 100;
          }

          if (col.width < col._minWidth && col.elasticWidth) {
            col._calcWidth = col._minWidth;
          } else {
            col._calcWidth = col.width;
          }

          availableWidth -= col._calcWidth;
        }); // http://www.freesoft.org/CIE/RFC/1942/18.htm
        // http://www.w3.org/TR/CSS2/tables.html#width-layout
        // http://dev.w3.org/csswg/css3-tables-algorithms/Overview.src.htm

        var minW = autoMin + starMaxMin * starColumns.length;
        var maxW = autoMax + starMaxMax * starColumns.length;

        if (minW >= availableWidth) {
          // case 1 - there's no way to fit all columns within available width
          // that's actually pretty bad situation with PDF as we have no horizontal scroll
          // no easy workaround (unless we decide, in the future, to split single words)
          // currently we simply use minWidths for all columns
          autoColumns.forEach(function (col) {
            col._calcWidth = col._minWidth;
          });
          starColumns.forEach(function (col) {
            col._calcWidth = starMaxMin; // starMaxMin already contains padding
          });
        } else {
          if (maxW < availableWidth) {
            // case 2 - we can fit rest of the table within available space
            autoColumns.forEach(function (col) {
              col._calcWidth = col._maxWidth;
              availableWidth -= col._calcWidth;
            });
          } else {
            // maxW is too large, but minW fits within available width
            var W = availableWidth - minW;
            var D = maxW - minW;
            autoColumns.forEach(function (col) {
              var d = col._maxWidth - col._minWidth;
              col._calcWidth = col._minWidth + d * W / D;
              availableWidth -= col._calcWidth;
            });
          }

          if (starColumns.length > 0) {
            var starSize = availableWidth / starColumns.length;
            starColumns.forEach(function (col) {
              col._calcWidth = starSize;
            });
          }
        }
      }

      function isAutoColumn(column) {
        return column.width === 'auto';
      }

      function isStarColumn(column) {
        return column.width === null || column.width === undefined || column.width === '*' || column.width === 'star';
      } //TODO: refactor and reuse in measureTable


      function measureMinMax(columns) {
        var result = {
          min: 0,
          max: 0
        };
        var maxStar = {
          min: 0,
          max: 0
        };
        var starCount = 0;

        for (var i = 0, l = columns.length; i < l; i++) {
          var c = columns[i];

          if (isStarColumn(c)) {
            maxStar.min = Math.max(maxStar.min, c._minWidth);
            maxStar.max = Math.max(maxStar.max, c._maxWidth);
            starCount++;
          } else if (isAutoColumn(c)) {
            result.min += c._minWidth;
            result.max += c._maxWidth;
          } else {
            result.min += c.width !== undefined && c.width || c._minWidth;
            result.max += c.width !== undefined && c.width || c._maxWidth;
          }
        }

        if (starCount) {
          result.min += starCount * maxStar.min;
          result.max += starCount * maxStar.max;
        }

        return result;
      }
      /**
       * Calculates column widths
       * @private
       */


      module.exports = {
        buildColumnWidths: buildColumnWidths,
        measureMinMax: measureMinMax,
        isAutoColumn: isAutoColumn,
        isStarColumn: isStarColumn
      };
      /***/
    },
    /* 196 */

    /***/
    function (module, exports) {
      var toString = {}.toString;

      module.exports = Array.isArray || function (arr) {
        return toString.call(arr) == '[object Array]';
      };
      /***/

    },
    /* 197 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var $ = __webpack_require__(1);

      var global = __webpack_require__(3);

      var getBuiltIn = __webpack_require__(36);

      var IS_PURE = __webpack_require__(56);

      var DESCRIPTORS = __webpack_require__(11);

      var NATIVE_SYMBOL = __webpack_require__(145);

      var USE_SYMBOL_AS_UID = __webpack_require__(202);

      var fails = __webpack_require__(4);

      var has = __webpack_require__(14);

      var isArray = __webpack_require__(115);

      var isObject = __webpack_require__(13);

      var anObject = __webpack_require__(16);

      var toObject = __webpack_require__(19);

      var toIndexedObject = __webpack_require__(27);

      var toPrimitive = __webpack_require__(55);

      var createPropertyDescriptor = __webpack_require__(42);

      var nativeObjectCreate = __webpack_require__(58);

      var objectKeys = __webpack_require__(94);

      var getOwnPropertyNamesModule = __webpack_require__(57);

      var getOwnPropertyNamesExternal = __webpack_require__(311);

      var getOwnPropertySymbolsModule = __webpack_require__(143);

      var getOwnPropertyDescriptorModule = __webpack_require__(54);

      var definePropertyModule = __webpack_require__(15);

      var propertyIsEnumerableModule = __webpack_require__(110);

      var createNonEnumerableProperty = __webpack_require__(18);

      var redefine = __webpack_require__(25);

      var shared = __webpack_require__(141);

      var sharedKey = __webpack_require__(111);

      var hiddenKeys = __webpack_require__(113);

      var uid = __webpack_require__(112);

      var wellKnownSymbol = __webpack_require__(6);

      var wrappedWellKnownSymbolModule = __webpack_require__(204);

      var defineWellKnownSymbol = __webpack_require__(205);

      var setToStringTag = __webpack_require__(95);

      var InternalStateModule = __webpack_require__(35);

      var $forEach = __webpack_require__(20).forEach;

      var HIDDEN = sharedKey('hidden');
      var SYMBOL = 'Symbol';
      var PROTOTYPE = 'prototype';
      var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');
      var setInternalState = InternalStateModule.set;
      var getInternalState = InternalStateModule.getterFor(SYMBOL);
      var ObjectPrototype = Object[PROTOTYPE];
      var $Symbol = global.Symbol;
      var $stringify = getBuiltIn('JSON', 'stringify');
      var nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
      var nativeDefineProperty = definePropertyModule.f;
      var nativeGetOwnPropertyNames = getOwnPropertyNamesExternal.f;
      var nativePropertyIsEnumerable = propertyIsEnumerableModule.f;
      var AllSymbols = shared('symbols');
      var ObjectPrototypeSymbols = shared('op-symbols');
      var StringToSymbolRegistry = shared('string-to-symbol-registry');
      var SymbolToStringRegistry = shared('symbol-to-string-registry');
      var WellKnownSymbolsStore = shared('wks');
      var QObject = global.QObject; // Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173

      var USE_SETTER = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild; // fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687

      var setSymbolDescriptor = DESCRIPTORS && fails(function () {
        return nativeObjectCreate(nativeDefineProperty({}, 'a', {
          get: function get() {
            return nativeDefineProperty(this, 'a', {
              value: 7
            }).a;
          }
        })).a != 7;
      }) ? function (O, P, Attributes) {
        var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor(ObjectPrototype, P);
        if (ObjectPrototypeDescriptor) delete ObjectPrototype[P];
        nativeDefineProperty(O, P, Attributes);

        if (ObjectPrototypeDescriptor && O !== ObjectPrototype) {
          nativeDefineProperty(ObjectPrototype, P, ObjectPrototypeDescriptor);
        }
      } : nativeDefineProperty;

      var wrap = function wrap(tag, description) {
        var symbol = AllSymbols[tag] = nativeObjectCreate($Symbol[PROTOTYPE]);
        setInternalState(symbol, {
          type: SYMBOL,
          tag: tag,
          description: description
        });
        if (!DESCRIPTORS) symbol.description = description;
        return symbol;
      };

      var isSymbol = USE_SYMBOL_AS_UID ? function (it) {
        return _typeof4(it) == 'symbol';
      } : function (it) {
        return Object(it) instanceof $Symbol;
      };

      var $defineProperty = function defineProperty(O, P, Attributes) {
        if (O === ObjectPrototype) $defineProperty(ObjectPrototypeSymbols, P, Attributes);
        anObject(O);
        var key = toPrimitive(P, true);
        anObject(Attributes);

        if (has(AllSymbols, key)) {
          if (!Attributes.enumerable) {
            if (!has(O, HIDDEN)) nativeDefineProperty(O, HIDDEN, createPropertyDescriptor(1, {}));
            O[HIDDEN][key] = true;
          } else {
            if (has(O, HIDDEN) && O[HIDDEN][key]) O[HIDDEN][key] = false;
            Attributes = nativeObjectCreate(Attributes, {
              enumerable: createPropertyDescriptor(0, false)
            });
          }

          return setSymbolDescriptor(O, key, Attributes);
        }

        return nativeDefineProperty(O, key, Attributes);
      };

      var $defineProperties = function defineProperties(O, Properties) {
        anObject(O);
        var properties = toIndexedObject(Properties);
        var keys = objectKeys(properties).concat($getOwnPropertySymbols(properties));
        $forEach(keys, function (key) {
          if (!DESCRIPTORS || $propertyIsEnumerable.call(properties, key)) $defineProperty(O, key, properties[key]);
        });
        return O;
      };

      var $create = function create(O, Properties) {
        return Properties === undefined ? nativeObjectCreate(O) : $defineProperties(nativeObjectCreate(O), Properties);
      };

      var $propertyIsEnumerable = function propertyIsEnumerable(V) {
        var P = toPrimitive(V, true);
        var enumerable = nativePropertyIsEnumerable.call(this, P);
        if (this === ObjectPrototype && has(AllSymbols, P) && !has(ObjectPrototypeSymbols, P)) return false;
        return enumerable || !has(this, P) || !has(AllSymbols, P) || has(this, HIDDEN) && this[HIDDEN][P] ? enumerable : true;
      };

      var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(O, P) {
        var it = toIndexedObject(O);
        var key = toPrimitive(P, true);
        if (it === ObjectPrototype && has(AllSymbols, key) && !has(ObjectPrototypeSymbols, key)) return;
        var descriptor = nativeGetOwnPropertyDescriptor(it, key);

        if (descriptor && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) {
          descriptor.enumerable = true;
        }

        return descriptor;
      };

      var $getOwnPropertyNames = function getOwnPropertyNames(O) {
        var names = nativeGetOwnPropertyNames(toIndexedObject(O));
        var result = [];
        $forEach(names, function (key) {
          if (!has(AllSymbols, key) && !has(hiddenKeys, key)) result.push(key);
        });
        return result;
      };

      var $getOwnPropertySymbols = function getOwnPropertySymbols(O) {
        var IS_OBJECT_PROTOTYPE = O === ObjectPrototype;
        var names = nativeGetOwnPropertyNames(IS_OBJECT_PROTOTYPE ? ObjectPrototypeSymbols : toIndexedObject(O));
        var result = [];
        $forEach(names, function (key) {
          if (has(AllSymbols, key) && (!IS_OBJECT_PROTOTYPE || has(ObjectPrototype, key))) {
            result.push(AllSymbols[key]);
          }
        });
        return result;
      }; // `Symbol` constructor
      // https://tc39.github.io/ecma262/#sec-symbol-constructor


      if (!NATIVE_SYMBOL) {
        $Symbol = function _Symbol3() {
          if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor');
          var description = !arguments.length || arguments[0] === undefined ? undefined : String(arguments[0]);
          var tag = uid(description);

          var setter = function setter(value) {
            if (this === ObjectPrototype) setter.call(ObjectPrototypeSymbols, value);
            if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
            setSymbolDescriptor(this, tag, createPropertyDescriptor(1, value));
          };

          if (DESCRIPTORS && USE_SETTER) setSymbolDescriptor(ObjectPrototype, tag, {
            configurable: true,
            set: setter
          });
          return wrap(tag, description);
        };

        redefine($Symbol[PROTOTYPE], 'toString', function toString() {
          return getInternalState(this).tag;
        });
        redefine($Symbol, 'withoutSetter', function (description) {
          return wrap(uid(description), description);
        });
        propertyIsEnumerableModule.f = $propertyIsEnumerable;
        definePropertyModule.f = $defineProperty;
        getOwnPropertyDescriptorModule.f = $getOwnPropertyDescriptor;
        getOwnPropertyNamesModule.f = getOwnPropertyNamesExternal.f = $getOwnPropertyNames;
        getOwnPropertySymbolsModule.f = $getOwnPropertySymbols;

        wrappedWellKnownSymbolModule.f = function (name) {
          return wrap(wellKnownSymbol(name), name);
        };

        if (DESCRIPTORS) {
          // https://github.com/tc39/proposal-Symbol-description
          nativeDefineProperty($Symbol[PROTOTYPE], 'description', {
            configurable: true,
            get: function description() {
              return getInternalState(this).description;
            }
          });

          if (!IS_PURE) {
            redefine(ObjectPrototype, 'propertyIsEnumerable', $propertyIsEnumerable, {
              unsafe: true
            });
          }
        }
      }

      $({
        global: true,
        wrap: true,
        forced: !NATIVE_SYMBOL,
        sham: !NATIVE_SYMBOL
      }, {
        Symbol: $Symbol
      });
      $forEach(objectKeys(WellKnownSymbolsStore), function (name) {
        defineWellKnownSymbol(name);
      });
      $({
        target: SYMBOL,
        stat: true,
        forced: !NATIVE_SYMBOL
      }, {
        // `Symbol.for` method
        // https://tc39.github.io/ecma262/#sec-symbol.for
        'for': function _for(key) {
          var string = String(key);
          if (has(StringToSymbolRegistry, string)) return StringToSymbolRegistry[string];
          var symbol = $Symbol(string);
          StringToSymbolRegistry[string] = symbol;
          SymbolToStringRegistry[symbol] = string;
          return symbol;
        },
        // `Symbol.keyFor` method
        // https://tc39.github.io/ecma262/#sec-symbol.keyfor
        keyFor: function keyFor(sym) {
          if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol');
          if (has(SymbolToStringRegistry, sym)) return SymbolToStringRegistry[sym];
        },
        useSetter: function useSetter() {
          USE_SETTER = true;
        },
        useSimple: function useSimple() {
          USE_SETTER = false;
        }
      });
      $({
        target: 'Object',
        stat: true,
        forced: !NATIVE_SYMBOL,
        sham: !DESCRIPTORS
      }, {
        // `Object.create` method
        // https://tc39.github.io/ecma262/#sec-object.create
        create: $create,
        // `Object.defineProperty` method
        // https://tc39.github.io/ecma262/#sec-object.defineproperty
        defineProperty: $defineProperty,
        // `Object.defineProperties` method
        // https://tc39.github.io/ecma262/#sec-object.defineproperties
        defineProperties: $defineProperties,
        // `Object.getOwnPropertyDescriptor` method
        // https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptors
        getOwnPropertyDescriptor: $getOwnPropertyDescriptor
      });
      $({
        target: 'Object',
        stat: true,
        forced: !NATIVE_SYMBOL
      }, {
        // `Object.getOwnPropertyNames` method
        // https://tc39.github.io/ecma262/#sec-object.getownpropertynames
        getOwnPropertyNames: $getOwnPropertyNames,
        // `Object.getOwnPropertySymbols` method
        // https://tc39.github.io/ecma262/#sec-object.getownpropertysymbols
        getOwnPropertySymbols: $getOwnPropertySymbols
      }); // Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
      // https://bugs.chromium.org/p/v8/issues/detail?id=3443

      $({
        target: 'Object',
        stat: true,
        forced: fails(function () {
          getOwnPropertySymbolsModule.f(1);
        })
      }, {
        getOwnPropertySymbols: function getOwnPropertySymbols(it) {
          return getOwnPropertySymbolsModule.f(toObject(it));
        }
      }); // `JSON.stringify` method behavior with symbols
      // https://tc39.github.io/ecma262/#sec-json.stringify

      if ($stringify) {
        var FORCED_JSON_STRINGIFY = !NATIVE_SYMBOL || fails(function () {
          var symbol = $Symbol(); // MS Edge converts symbol values to JSON as {}

          return $stringify([symbol]) != '[null]' // WebKit converts symbol values to JSON as null
          || $stringify({
            a: symbol
          }) != '{}' // V8 throws on boxed symbols
          || $stringify(Object(symbol)) != '{}';
        });
        $({
          target: 'JSON',
          stat: true,
          forced: FORCED_JSON_STRINGIFY
        }, {
          // eslint-disable-next-line no-unused-vars
          stringify: function stringify(it, replacer, space) {
            var args = [it];
            var index = 1;
            var $replacer;

            while (arguments.length > index) {
              args.push(arguments[index++]);
            }

            $replacer = replacer;
            if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined

            if (!isArray(replacer)) replacer = function replacer(key, value) {
              if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
              if (!isSymbol(value)) return value;
            };
            args[1] = replacer;
            return $stringify.apply(null, args);
          }
        });
      } // `Symbol.prototype[@@toPrimitive]` method
      // https://tc39.github.io/ecma262/#sec-symbol.prototype-@@toprimitive


      if (!$Symbol[PROTOTYPE][TO_PRIMITIVE]) {
        createNonEnumerableProperty($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
      } // `Symbol.prototype[@@toStringTag]` property
      // https://tc39.github.io/ecma262/#sec-symbol.prototype-@@tostringtag


      setToStringTag($Symbol, SYMBOL);
      hiddenKeys[HIDDEN] = true;
      /***/
    },
    /* 198 */

    /***/
    function (module, exports, __webpack_require__) {
      var DESCRIPTORS = __webpack_require__(11);

      var fails = __webpack_require__(4);

      var createElement = __webpack_require__(138); // Thank's IE8 for his funny defineProperty


      module.exports = !DESCRIPTORS && !fails(function () {
        return Object.defineProperty(createElement('div'), 'a', {
          get: function get() {
            return 7;
          }
        }).a != 7;
      });
      /***/
    },
    /* 199 */

    /***/
    function (module, exports, __webpack_require__) {
      var global = __webpack_require__(3);

      var setGlobal = __webpack_require__(139);

      var SHARED = '__core-js_shared__';
      var store = global[SHARED] || setGlobal(SHARED, {});
      module.exports = store;
      /***/
    },
    /* 200 */

    /***/
    function (module, exports, __webpack_require__) {
      var has = __webpack_require__(14);

      var ownKeys = __webpack_require__(309);

      var getOwnPropertyDescriptorModule = __webpack_require__(54);

      var definePropertyModule = __webpack_require__(15);

      module.exports = function (target, source) {
        var keys = ownKeys(source);
        var defineProperty = definePropertyModule.f;
        var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;

        for (var i = 0; i < keys.length; i++) {
          var key = keys[i];
          if (!has(target, key)) defineProperty(target, key, getOwnPropertyDescriptor(source, key));
        }
      };
      /***/

    },
    /* 201 */

    /***/
    function (module, exports, __webpack_require__) {
      var has = __webpack_require__(14);

      var toIndexedObject = __webpack_require__(27);

      var indexOf = __webpack_require__(93).indexOf;

      var hiddenKeys = __webpack_require__(113);

      module.exports = function (object, names) {
        var O = toIndexedObject(object);
        var i = 0;
        var result = [];
        var key;

        for (key in O) {
          !has(hiddenKeys, key) && has(O, key) && result.push(key);
        } // Don't enum bug & hidden keys


        while (names.length > i) {
          if (has(O, key = names[i++])) {
            ~indexOf(result, key) || result.push(key);
          }
        }

        return result;
      };
      /***/

    },
    /* 202 */

    /***/
    function (module, exports, __webpack_require__) {
      var NATIVE_SYMBOL = __webpack_require__(145);

      module.exports = NATIVE_SYMBOL // eslint-disable-next-line no-undef
      && !Symbol.sham // eslint-disable-next-line no-undef
      && _typeof4(Symbol.iterator) == 'symbol';
      /***/
    },
    /* 203 */

    /***/
    function (module, exports, __webpack_require__) {
      var getBuiltIn = __webpack_require__(36);

      module.exports = getBuiltIn('document', 'documentElement');
      /***/
    },
    /* 204 */

    /***/
    function (module, exports, __webpack_require__) {
      var wellKnownSymbol = __webpack_require__(6);

      exports.f = wellKnownSymbol;
      /***/
    },
    /* 205 */

    /***/
    function (module, exports, __webpack_require__) {
      var path = __webpack_require__(114);

      var has = __webpack_require__(14);

      var wrappedWellKnownSymbolModule = __webpack_require__(204);

      var defineProperty = __webpack_require__(15).f;

      module.exports = function (NAME) {
        var _Symbol4 = path.Symbol || (path.Symbol = {});

        if (!has(_Symbol4, NAME)) defineProperty(_Symbol4, NAME, {
          value: wrappedWellKnownSymbolModule.f(NAME)
        });
      };
      /***/

    },
    /* 206 */

    /***/
    function (module, exports, __webpack_require__) {
      var isObject = __webpack_require__(13);

      var isArray = __webpack_require__(115);

      var wellKnownSymbol = __webpack_require__(6);

      var SPECIES = wellKnownSymbol('species'); // `ArraySpeciesCreate` abstract operation
      // https://tc39.github.io/ecma262/#sec-arrayspeciescreate

      module.exports = function (originalArray, length) {
        var C;

        if (isArray(originalArray)) {
          C = originalArray.constructor; // cross-realm fallback

          if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;else if (isObject(C)) {
            C = C[SPECIES];
            if (C === null) C = undefined;
          }
        }

        return new (C === undefined ? Array : C)(length === 0 ? 0 : length);
      };
      /***/

    },
    /* 207 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict"; // `Symbol.prototype.description` getter
      // https://tc39.github.io/ecma262/#sec-symbol.prototype.description

      var $ = __webpack_require__(1);

      var DESCRIPTORS = __webpack_require__(11);

      var global = __webpack_require__(3);

      var has = __webpack_require__(14);

      var isObject = __webpack_require__(13);

      var defineProperty = __webpack_require__(15).f;

      var copyConstructorProperties = __webpack_require__(200);

      var NativeSymbol = global.Symbol;

      if (DESCRIPTORS && typeof NativeSymbol == 'function' && (!('description' in NativeSymbol.prototype) || // Safari 12 bug
      NativeSymbol().description !== undefined)) {
        var EmptyStringDescriptionStore = {}; // wrap Symbol constructor for correct work with undefined description

        var SymbolWrapper = function _Symbol5() {
          var description = arguments.length < 1 || arguments[0] === undefined ? undefined : String(arguments[0]);
          var result = this instanceof SymbolWrapper ? new NativeSymbol(description) // in Edge 13, String(Symbol(undefined)) === 'Symbol(undefined)'
          : description === undefined ? NativeSymbol() : NativeSymbol(description);
          if (description === '') EmptyStringDescriptionStore[result] = true;
          return result;
        };

        copyConstructorProperties(SymbolWrapper, NativeSymbol);
        var symbolPrototype = SymbolWrapper.prototype = NativeSymbol.prototype;
        symbolPrototype.constructor = SymbolWrapper;
        var symbolToString = symbolPrototype.toString;
        var native = String(NativeSymbol('test')) == 'Symbol(test)';
        var regexp = /^Symbol\((.*)\)[^)]+$/;
        defineProperty(symbolPrototype, 'description', {
          configurable: true,
          get: function description() {
            var symbol = isObject(this) ? this.valueOf() : this;
            var string = symbolToString.call(symbol);
            if (has(EmptyStringDescriptionStore, symbol)) return '';
            var desc = native ? string.slice(7, -1) : string.replace(regexp, '$1');
            return desc === '' ? undefined : desc;
          }
        });
        $({
          global: true,
          forced: true
        }, {
          Symbol: SymbolWrapper
        });
      }
      /***/

    },
    /* 208 */

    /***/
    function (module, exports, __webpack_require__) {
      var defineWellKnownSymbol = __webpack_require__(205); // `Symbol.iterator` well-known symbol
      // https://tc39.github.io/ecma262/#sec-symbol.iterator


      defineWellKnownSymbol('iterator');
      /***/
    },
    /* 209 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var $ = __webpack_require__(1);

      var fails = __webpack_require__(4);

      var isArray = __webpack_require__(115);

      var isObject = __webpack_require__(13);

      var toObject = __webpack_require__(19);

      var toLength = __webpack_require__(8);

      var createProperty = __webpack_require__(146);

      var arraySpeciesCreate = __webpack_require__(206);

      var arrayMethodHasSpeciesSupport = __webpack_require__(116);

      var wellKnownSymbol = __webpack_require__(6);

      var V8_VERSION = __webpack_require__(147);

      var IS_CONCAT_SPREADABLE = wellKnownSymbol('isConcatSpreadable');
      var MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;
      var MAXIMUM_ALLOWED_INDEX_EXCEEDED = 'Maximum allowed index exceeded'; // We can't use this feature detection in V8 since it causes
      // deoptimization and serious performance degradation
      // https://github.com/zloirock/core-js/issues/679

      var IS_CONCAT_SPREADABLE_SUPPORT = V8_VERSION >= 51 || !fails(function () {
        var array = [];
        array[IS_CONCAT_SPREADABLE] = false;
        return array.concat()[0] !== array;
      });
      var SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('concat');

      var isConcatSpreadable = function isConcatSpreadable(O) {
        if (!isObject(O)) return false;
        var spreadable = O[IS_CONCAT_SPREADABLE];
        return spreadable !== undefined ? !!spreadable : isArray(O);
      };

      var FORCED = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT; // `Array.prototype.concat` method
      // https://tc39.github.io/ecma262/#sec-array.prototype.concat
      // with adding support of @@isConcatSpreadable and @@species

      $({
        target: 'Array',
        proto: true,
        forced: FORCED
      }, {
        concat: function concat(arg) {
          // eslint-disable-line no-unused-vars
          var O = toObject(this);
          var A = arraySpeciesCreate(O, 0);
          var n = 0;
          var i, k, length, len, E;

          for (i = -1, length = arguments.length; i < length; i++) {
            E = i === -1 ? O : arguments[i];

            if (isConcatSpreadable(E)) {
              len = toLength(E.length);
              if (n + len > MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);

              for (k = 0; k < len; k++, n++) {
                if (k in E) createProperty(A, n, E[k]);
              }
            } else {
              if (n >= MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
              createProperty(A, n++, E);
            }
          }

          A.length = n;
          return A;
        }
      });
      /***/
    },
    /* 210 */

    /***/
    function (module, exports, __webpack_require__) {
      var getBuiltIn = __webpack_require__(36);

      module.exports = getBuiltIn('navigator', 'userAgent') || '';
      /***/
    },
    /* 211 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(1);

      var fill = __webpack_require__(148);

      var addToUnscopables = __webpack_require__(149); // `Array.prototype.fill` method
      // https://tc39.github.io/ecma262/#sec-array.prototype.fill


      $({
        target: 'Array',
        proto: true
      }, {
        fill: fill
      }); // https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables

      addToUnscopables('fill');
      /***/
    },
    /* 212 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var $forEach = __webpack_require__(20).forEach;

      var arrayMethodIsStrict = __webpack_require__(59);

      var arrayMethodUsesToLength = __webpack_require__(31);

      var STRICT_METHOD = arrayMethodIsStrict('forEach');
      var USES_TO_LENGTH = arrayMethodUsesToLength('forEach'); // `Array.prototype.forEach` method implementation
      // https://tc39.github.io/ecma262/#sec-array.prototype.foreach

      module.exports = !STRICT_METHOD || !USES_TO_LENGTH ? function forEach(callbackfn
      /* , thisArg */
      ) {
        return $forEach(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
      } : [].forEach;
      /***/
    },
    /* 213 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(1);

      var from = __webpack_require__(315);

      var checkCorrectnessOfIteration = __webpack_require__(153);

      var INCORRECT_ITERATION = !checkCorrectnessOfIteration(function (iterable) {
        Array.from(iterable);
      }); // `Array.from` method
      // https://tc39.github.io/ecma262/#sec-array.from

      $({
        target: 'Array',
        stat: true,
        forced: INCORRECT_ITERATION
      }, {
        from: from
      });
      /***/
    },
    /* 214 */

    /***/
    function (module, exports, __webpack_require__) {
      var anObject = __webpack_require__(16); // call something on iterator step with safe closing on error


      module.exports = function (iterator, fn, value, ENTRIES) {
        try {
          return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value); // 7.4.6 IteratorClose(iterator, completion)
        } catch (error) {
          var returnMethod = iterator['return'];
          if (returnMethod !== undefined) anObject(returnMethod.call(iterator));
          throw error;
        }
      };
      /***/

    },
    /* 215 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var $ = __webpack_require__(1);

      var $includes = __webpack_require__(93).includes;

      var addToUnscopables = __webpack_require__(149);

      var arrayMethodUsesToLength = __webpack_require__(31);

      var USES_TO_LENGTH = arrayMethodUsesToLength('indexOf', {
        ACCESSORS: true,
        1: 0
      }); // `Array.prototype.includes` method
      // https://tc39.github.io/ecma262/#sec-array.prototype.includes

      $({
        target: 'Array',
        proto: true,
        forced: !USES_TO_LENGTH
      }, {
        includes: function includes(el
        /* , fromIndex = 0 */
        ) {
          return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
        }
      }); // https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables

      addToUnscopables('includes');
      /***/
    },
    /* 216 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var $ = __webpack_require__(1);

      var createIteratorConstructor = __webpack_require__(316);

      var getPrototypeOf = __webpack_require__(60);

      var setPrototypeOf = __webpack_require__(45);

      var setToStringTag = __webpack_require__(95);

      var createNonEnumerableProperty = __webpack_require__(18);

      var redefine = __webpack_require__(25);

      var wellKnownSymbol = __webpack_require__(6);

      var IS_PURE = __webpack_require__(56);

      var Iterators = __webpack_require__(97);

      var IteratorsCore = __webpack_require__(217);

      var IteratorPrototype = IteratorsCore.IteratorPrototype;
      var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;
      var ITERATOR = wellKnownSymbol('iterator');
      var KEYS = 'keys';
      var VALUES = 'values';
      var ENTRIES = 'entries';

      var returnThis = function returnThis() {
        return this;
      };

      module.exports = function (Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
        createIteratorConstructor(IteratorConstructor, NAME, next);

        var getIterationMethod = function getIterationMethod(KIND) {
          if (KIND === DEFAULT && defaultIterator) return defaultIterator;
          if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype) return IterablePrototype[KIND];

          switch (KIND) {
            case KEYS:
              return function keys() {
                return new IteratorConstructor(this, KIND);
              };

            case VALUES:
              return function values() {
                return new IteratorConstructor(this, KIND);
              };

            case ENTRIES:
              return function entries() {
                return new IteratorConstructor(this, KIND);
              };
          }

          return function () {
            return new IteratorConstructor(this);
          };
        };

        var TO_STRING_TAG = NAME + ' Iterator';
        var INCORRECT_VALUES_NAME = false;
        var IterablePrototype = Iterable.prototype;
        var nativeIterator = IterablePrototype[ITERATOR] || IterablePrototype['@@iterator'] || DEFAULT && IterablePrototype[DEFAULT];
        var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);
        var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;
        var CurrentIteratorPrototype, methods, KEY; // fix native

        if (anyNativeIterator) {
          CurrentIteratorPrototype = getPrototypeOf(anyNativeIterator.call(new Iterable()));

          if (IteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
            if (!IS_PURE && getPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype) {
              if (setPrototypeOf) {
                setPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);
              } else if (typeof CurrentIteratorPrototype[ITERATOR] != 'function') {
                createNonEnumerableProperty(CurrentIteratorPrototype, ITERATOR, returnThis);
              }
            } // Set @@toStringTag to native iterators


            setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);
            if (IS_PURE) Iterators[TO_STRING_TAG] = returnThis;
          }
        } // fix Array#{values, @@iterator}.name in V8 / FF


        if (DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
          INCORRECT_VALUES_NAME = true;

          defaultIterator = function values() {
            return nativeIterator.call(this);
          };
        } // define iterator


        if ((!IS_PURE || FORCED) && IterablePrototype[ITERATOR] !== defaultIterator) {
          createNonEnumerableProperty(IterablePrototype, ITERATOR, defaultIterator);
        }

        Iterators[NAME] = defaultIterator; // export additional methods

        if (DEFAULT) {
          methods = {
            values: getIterationMethod(VALUES),
            keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
            entries: getIterationMethod(ENTRIES)
          };
          if (FORCED) for (KEY in methods) {
            if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
              redefine(IterablePrototype, KEY, methods[KEY]);
            }
          } else $({
            target: NAME,
            proto: true,
            forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME
          }, methods);
        }

        return methods;
      };
      /***/

    },
    /* 217 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var getPrototypeOf = __webpack_require__(60);

      var createNonEnumerableProperty = __webpack_require__(18);

      var has = __webpack_require__(14);

      var wellKnownSymbol = __webpack_require__(6);

      var IS_PURE = __webpack_require__(56);

      var ITERATOR = wellKnownSymbol('iterator');
      var BUGGY_SAFARI_ITERATORS = false;

      var returnThis = function returnThis() {
        return this;
      }; // `%IteratorPrototype%` object
      // https://tc39.github.io/ecma262/#sec-%iteratorprototype%-object


      var IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;

      if ([].keys) {
        arrayIterator = [].keys(); // Safari 8 has buggy iterators w/o `next`

        if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;else {
          PrototypeOfArrayIteratorPrototype = getPrototypeOf(getPrototypeOf(arrayIterator));
          if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype = PrototypeOfArrayIteratorPrototype;
        }
      }

      if (IteratorPrototype == undefined) IteratorPrototype = {}; // 25.1.2.1.1 %IteratorPrototype%[@@iterator]()

      if (!IS_PURE && !has(IteratorPrototype, ITERATOR)) {
        createNonEnumerableProperty(IteratorPrototype, ITERATOR, returnThis);
      }

      module.exports = {
        IteratorPrototype: IteratorPrototype,
        BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS
      };
      /***/
    },
    /* 218 */

    /***/
    function (module, exports, __webpack_require__) {
      var fails = __webpack_require__(4);

      module.exports = !fails(function () {
        function F() {
          /* empty */
        }

        F.prototype.constructor = null;
        return Object.getPrototypeOf(new F()) !== F.prototype;
      });
      /***/
    },
    /* 219 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var $ = __webpack_require__(1);

      var IndexedObject = __webpack_require__(92);

      var toIndexedObject = __webpack_require__(27);

      var arrayMethodIsStrict = __webpack_require__(59);

      var nativeJoin = [].join;
      var ES3_STRINGS = IndexedObject != Object;
      var STRICT_METHOD = arrayMethodIsStrict('join', ','); // `Array.prototype.join` method
      // https://tc39.github.io/ecma262/#sec-array.prototype.join

      $({
        target: 'Array',
        proto: true,
        forced: ES3_STRINGS || !STRICT_METHOD
      }, {
        join: function join(separator) {
          return nativeJoin.call(toIndexedObject(this), separator === undefined ? ',' : separator);
        }
      });
      /***/
    },
    /* 220 */

    /***/
    function (module, exports) {
      module.exports = typeof ArrayBuffer !== 'undefined' && typeof DataView !== 'undefined';
      /***/
    },
    /* 221 */

    /***/
    function (module, exports, __webpack_require__) {
      var redefine = __webpack_require__(25);

      module.exports = function (target, src, options) {
        for (var key in src) {
          redefine(target, key, src[key], options);
        }

        return target;
      };
      /***/

    },
    /* 222 */

    /***/
    function (module, exports, __webpack_require__) {
      var toInteger = __webpack_require__(37);

      var toLength = __webpack_require__(8); // `ToIndex` abstract operation
      // https://tc39.github.io/ecma262/#sec-toindex


      module.exports = function (it) {
        if (it === undefined) return 0;
        var number = toInteger(it);
        var length = toLength(number);
        if (number !== length) throw RangeError('Wrong length or index');
        return length;
      };
      /***/

    },
    /* 223 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var DESCRIPTORS = __webpack_require__(11);

      var global = __webpack_require__(3);

      var isForced = __webpack_require__(144);

      var redefine = __webpack_require__(25);

      var has = __webpack_require__(14);

      var classof = __webpack_require__(30);

      var inheritIfRequired = __webpack_require__(224);

      var toPrimitive = __webpack_require__(55);

      var fails = __webpack_require__(4);

      var create = __webpack_require__(58);

      var getOwnPropertyNames = __webpack_require__(57).f;

      var getOwnPropertyDescriptor = __webpack_require__(54).f;

      var defineProperty = __webpack_require__(15).f;

      var trim = __webpack_require__(225).trim;

      var NUMBER = 'Number';
      var NativeNumber = global[NUMBER];
      var NumberPrototype = NativeNumber.prototype; // Opera ~12 has broken Object#toString

      var BROKEN_CLASSOF = classof(create(NumberPrototype)) == NUMBER; // `ToNumber` abstract operation
      // https://tc39.github.io/ecma262/#sec-tonumber

      var toNumber = function toNumber(argument) {
        var it = toPrimitive(argument, false);
        var first, third, radix, maxCode, digits, length, index, code;

        if (typeof it == 'string' && it.length > 2) {
          it = trim(it);
          first = it.charCodeAt(0);

          if (first === 43 || first === 45) {
            third = it.charCodeAt(2);
            if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
          } else if (first === 48) {
            switch (it.charCodeAt(1)) {
              case 66:
              case 98:
                radix = 2;
                maxCode = 49;
                break;
              // fast equal of /^0b[01]+$/i

              case 79:
              case 111:
                radix = 8;
                maxCode = 55;
                break;
              // fast equal of /^0o[0-7]+$/i

              default:
                return +it;
            }

            digits = it.slice(2);
            length = digits.length;

            for (index = 0; index < length; index++) {
              code = digits.charCodeAt(index); // parseInt parses a string to a first unavailable symbol
              // but ToNumber should return NaN if a string contains unavailable symbols

              if (code < 48 || code > maxCode) return NaN;
            }

            return parseInt(digits, radix);
          }
        }

        return +it;
      }; // `Number` constructor
      // https://tc39.github.io/ecma262/#sec-number-constructor


      if (isForced(NUMBER, !NativeNumber(' 0o1') || !NativeNumber('0b1') || NativeNumber('+0x1'))) {
        var NumberWrapper = function Number(value) {
          var it = arguments.length < 1 ? 0 : value;
          var dummy = this;
          return dummy instanceof NumberWrapper // check on 1..constructor(foo) case
          && (BROKEN_CLASSOF ? fails(function () {
            NumberPrototype.valueOf.call(dummy);
          }) : classof(dummy) != NUMBER) ? inheritIfRequired(new NativeNumber(toNumber(it)), dummy, NumberWrapper) : toNumber(it);
        };

        for (var keys = DESCRIPTORS ? getOwnPropertyNames(NativeNumber) : ( // ES3:
        'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' + // ES2015 (in case, if modules with ES2015 Number statics required before):
        'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' + 'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger').split(','), j = 0, key; keys.length > j; j++) {
          if (has(NativeNumber, key = keys[j]) && !has(NumberWrapper, key)) {
            defineProperty(NumberWrapper, key, getOwnPropertyDescriptor(NativeNumber, key));
          }
        }

        NumberWrapper.prototype = NumberPrototype;
        NumberPrototype.constructor = NumberWrapper;
        redefine(global, NUMBER, NumberWrapper);
      }
      /***/

    },
    /* 224 */

    /***/
    function (module, exports, __webpack_require__) {
      var isObject = __webpack_require__(13);

      var setPrototypeOf = __webpack_require__(45); // makes subclassing work correct for wrapped built-ins


      module.exports = function ($this, dummy, Wrapper) {
        var NewTarget, NewTargetPrototype;
        if ( // it can work only with native `setPrototypeOf`
        setPrototypeOf && // we haven't completely correct pre-ES6 way for getting `new.target`, so use this
        typeof (NewTarget = dummy.constructor) == 'function' && NewTarget !== Wrapper && isObject(NewTargetPrototype = NewTarget.prototype) && NewTargetPrototype !== Wrapper.prototype) setPrototypeOf($this, NewTargetPrototype);
        return $this;
      };
      /***/

    },
    /* 225 */

    /***/
    function (module, exports, __webpack_require__) {
      var requireObjectCoercible = __webpack_require__(34);

      var whitespaces = __webpack_require__(226);

      var whitespace = '[' + whitespaces + ']';
      var ltrim = RegExp('^' + whitespace + whitespace + '*');
      var rtrim = RegExp(whitespace + whitespace + '*$'); // `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation

      var createMethod = function createMethod(TYPE) {
        return function ($this) {
          var string = String(requireObjectCoercible($this));
          if (TYPE & 1) string = string.replace(ltrim, '');
          if (TYPE & 2) string = string.replace(rtrim, '');
          return string;
        };
      };

      module.exports = {
        // `String.prototype.{ trimLeft, trimStart }` methods
        // https://tc39.github.io/ecma262/#sec-string.prototype.trimstart
        start: createMethod(1),
        // `String.prototype.{ trimRight, trimEnd }` methods
        // https://tc39.github.io/ecma262/#sec-string.prototype.trimend
        end: createMethod(2),
        // `String.prototype.trim` method
        // https://tc39.github.io/ecma262/#sec-string.prototype.trim
        trim: createMethod(3)
      };
      /***/
    },
    /* 226 */

    /***/
    function (module, exports) {
      // a string of all valid unicode whitespaces
      // eslint-disable-next-line max-len
      module.exports = "\t\n\x0B\f\r \xA0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF";
      /***/
    },
    /* 227 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(1);

      var toObject = __webpack_require__(19);

      var nativeKeys = __webpack_require__(94);

      var fails = __webpack_require__(4);

      var FAILS_ON_PRIMITIVES = fails(function () {
        nativeKeys(1);
      }); // `Object.keys` method
      // https://tc39.github.io/ecma262/#sec-object.keys

      $({
        target: 'Object',
        stat: true,
        forced: FAILS_ON_PRIMITIVES
      }, {
        keys: function keys(it) {
          return nativeKeys(toObject(it));
        }
      });
      /***/
    },
    /* 228 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var anObject = __webpack_require__(16); // `RegExp.prototype.flags` getter implementation
      // https://tc39.github.io/ecma262/#sec-get-regexp.prototype.flags


      module.exports = function () {
        var that = anObject(this);
        var result = '';
        if (that.global) result += 'g';
        if (that.ignoreCase) result += 'i';
        if (that.multiline) result += 'm';
        if (that.dotAll) result += 's';
        if (that.unicode) result += 'u';
        if (that.sticky) result += 'y';
        return result;
      };
      /***/

    },
    /* 229 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var redefine = __webpack_require__(25);

      var anObject = __webpack_require__(16);

      var fails = __webpack_require__(4);

      var flags = __webpack_require__(228);

      var TO_STRING = 'toString';
      var RegExpPrototype = RegExp.prototype;
      var nativeToString = RegExpPrototype[TO_STRING];
      var NOT_GENERIC = fails(function () {
        return nativeToString.call({
          source: 'a',
          flags: 'b'
        }) != '/a/b';
      }); // FF44- RegExp#toString has a wrong name

      var INCORRECT_NAME = nativeToString.name != TO_STRING; // `RegExp.prototype.toString` method
      // https://tc39.github.io/ecma262/#sec-regexp.prototype.tostring

      if (NOT_GENERIC || INCORRECT_NAME) {
        redefine(RegExp.prototype, TO_STRING, function toString() {
          var R = anObject(this);
          var p = String(R.source);
          var rf = R.flags;
          var f = String(rf === undefined && R instanceof RegExp && !('flags' in RegExpPrototype) ? flags.call(R) : rf);
          return '/' + p + '/' + f;
        }, {
          unsafe: true
        });
      }
      /***/

    },
    /* 230 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var fixRegExpWellKnownSymbolLogic = __webpack_require__(161);

      var anObject = __webpack_require__(16);

      var toObject = __webpack_require__(19);

      var toLength = __webpack_require__(8);

      var toInteger = __webpack_require__(37);

      var requireObjectCoercible = __webpack_require__(34);

      var advanceStringIndex = __webpack_require__(162);

      var regExpExec = __webpack_require__(163);

      var max = Math.max;
      var min = Math.min;
      var floor = Math.floor;
      var SUBSTITUTION_SYMBOLS = /\$([$&'`]|\d\d?|<[^>]*>)/g;
      var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&'`]|\d\d?)/g;

      var maybeToString = function maybeToString(it) {
        return it === undefined ? it : String(it);
      }; // @@replace logic


      fixRegExpWellKnownSymbolLogic('replace', 2, function (REPLACE, nativeReplace, maybeCallNative, reason) {
        var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = reason.REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE;
        var REPLACE_KEEPS_$0 = reason.REPLACE_KEEPS_$0;
        var UNSAFE_SUBSTITUTE = REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE ? '$' : '$0';
        return [// `String.prototype.replace` method
        // https://tc39.github.io/ecma262/#sec-string.prototype.replace
        function replace(searchValue, replaceValue) {
          var O = requireObjectCoercible(this);
          var replacer = searchValue == undefined ? undefined : searchValue[REPLACE];
          return replacer !== undefined ? replacer.call(searchValue, O, replaceValue) : nativeReplace.call(String(O), searchValue, replaceValue);
        }, // `RegExp.prototype[@@replace]` method
        // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace
        function (regexp, replaceValue) {
          if (!REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE && REPLACE_KEEPS_$0 || typeof replaceValue === 'string' && replaceValue.indexOf(UNSAFE_SUBSTITUTE) === -1) {
            var res = maybeCallNative(nativeReplace, regexp, this, replaceValue);
            if (res.done) return res.value;
          }

          var rx = anObject(regexp);
          var S = String(this);
          var functionalReplace = typeof replaceValue === 'function';
          if (!functionalReplace) replaceValue = String(replaceValue);
          var global = rx.global;

          if (global) {
            var fullUnicode = rx.unicode;
            rx.lastIndex = 0;
          }

          var results = [];

          while (true) {
            var result = regExpExec(rx, S);
            if (result === null) break;
            results.push(result);
            if (!global) break;
            var matchStr = String(result[0]);
            if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
          }

          var accumulatedResult = '';
          var nextSourcePosition = 0;

          for (var i = 0; i < results.length; i++) {
            result = results[i];
            var matched = String(result[0]);
            var position = max(min(toInteger(result.index), S.length), 0);
            var captures = []; // NOTE: This is equivalent to
            //   captures = result.slice(1).map(maybeToString)
            // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
            // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
            // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.

            for (var j = 1; j < result.length; j++) {
              captures.push(maybeToString(result[j]));
            }

            var namedCaptures = result.groups;

            if (functionalReplace) {
              var replacerArgs = [matched].concat(captures, position, S);
              if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);
              var replacement = String(replaceValue.apply(undefined, replacerArgs));
            } else {
              replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
            }

            if (position >= nextSourcePosition) {
              accumulatedResult += S.slice(nextSourcePosition, position) + replacement;
              nextSourcePosition = position + matched.length;
            }
          }

          return accumulatedResult + S.slice(nextSourcePosition);
        }]; // https://tc39.github.io/ecma262/#sec-getsubstitution

        function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {
          var tailPos = position + matched.length;
          var m = captures.length;
          var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;

          if (namedCaptures !== undefined) {
            namedCaptures = toObject(namedCaptures);
            symbols = SUBSTITUTION_SYMBOLS;
          }

          return nativeReplace.call(replacement, symbols, function (match, ch) {
            var capture;

            switch (ch.charAt(0)) {
              case '$':
                return '$';

              case '&':
                return matched;

              case '`':
                return str.slice(0, position);

              case "'":
                return str.slice(tailPos);

              case '<':
                capture = namedCaptures[ch.slice(1, -1)];
                break;

              default:
                // \d\d?
                var n = +ch;
                if (n === 0) return match;

                if (n > m) {
                  var f = floor(n / 10);
                  if (f === 0) return match;
                  if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);
                  return match;
                }

                capture = captures[n - 1];
            }

            return capture === undefined ? '' : capture;
          });
        }
      });
      /***/
    },
    /* 231 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var fixRegExpWellKnownSymbolLogic = __webpack_require__(161);

      var isRegExp = __webpack_require__(332);

      var anObject = __webpack_require__(16);

      var requireObjectCoercible = __webpack_require__(34);

      var speciesConstructor = __webpack_require__(38);

      var advanceStringIndex = __webpack_require__(162);

      var toLength = __webpack_require__(8);

      var callRegExpExec = __webpack_require__(163);

      var regexpExec = __webpack_require__(119);

      var fails = __webpack_require__(4);

      var arrayPush = [].push;
      var min = Math.min;
      var MAX_UINT32 = 0xFFFFFFFF; // babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError

      var SUPPORTS_Y = !fails(function () {
        return !RegExp(MAX_UINT32, 'y');
      }); // @@split logic

      fixRegExpWellKnownSymbolLogic('split', 2, function (SPLIT, nativeSplit, maybeCallNative) {
        var internalSplit;

        if ('abbc'.split(/(b)*/)[1] == 'c' || 'test'.split(/(?:)/, -1).length != 4 || 'ab'.split(/(?:ab)*/).length != 2 || '.'.split(/(.?)(.?)/).length != 4 || '.'.split(/()()/).length > 1 || ''.split(/.?/).length) {
          // based on es5-shim implementation, need to rework it
          internalSplit = function internalSplit(separator, limit) {
            var string = String(requireObjectCoercible(this));
            var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
            if (lim === 0) return [];
            if (separator === undefined) return [string]; // If `separator` is not a regex, use native split

            if (!isRegExp(separator)) {
              return nativeSplit.call(string, separator, lim);
            }

            var output = [];
            var flags = (separator.ignoreCase ? 'i' : '') + (separator.multiline ? 'm' : '') + (separator.unicode ? 'u' : '') + (separator.sticky ? 'y' : '');
            var lastLastIndex = 0; // Make `global` and avoid `lastIndex` issues by working with a copy

            var separatorCopy = new RegExp(separator.source, flags + 'g');
            var match, lastIndex, lastLength;

            while (match = regexpExec.call(separatorCopy, string)) {
              lastIndex = separatorCopy.lastIndex;

              if (lastIndex > lastLastIndex) {
                output.push(string.slice(lastLastIndex, match.index));
                if (match.length > 1 && match.index < string.length) arrayPush.apply(output, match.slice(1));
                lastLength = match[0].length;
                lastLastIndex = lastIndex;
                if (output.length >= lim) break;
              }

              if (separatorCopy.lastIndex === match.index) separatorCopy.lastIndex++; // Avoid an infinite loop
            }

            if (lastLastIndex === string.length) {
              if (lastLength || !separatorCopy.test('')) output.push('');
            } else output.push(string.slice(lastLastIndex));

            return output.length > lim ? output.slice(0, lim) : output;
          }; // Chakra, V8

        } else if ('0'.split(undefined, 0).length) {
          internalSplit = function internalSplit(separator, limit) {
            return separator === undefined && limit === 0 ? [] : nativeSplit.call(this, separator, limit);
          };
        } else internalSplit = nativeSplit;

        return [// `String.prototype.split` method
        // https://tc39.github.io/ecma262/#sec-string.prototype.split
        function split(separator, limit) {
          var O = requireObjectCoercible(this);
          var splitter = separator == undefined ? undefined : separator[SPLIT];
          return splitter !== undefined ? splitter.call(separator, O, limit) : internalSplit.call(String(O), separator, limit);
        }, // `RegExp.prototype[@@split]` method
        // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split
        //
        // NOTE: This cannot be properly polyfilled in engines that don't support
        // the 'y' flag.
        function (regexp, limit) {
          var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== nativeSplit);
          if (res.done) return res.value;
          var rx = anObject(regexp);
          var S = String(this);
          var C = speciesConstructor(rx, RegExp);
          var unicodeMatching = rx.unicode;
          var flags = (rx.ignoreCase ? 'i' : '') + (rx.multiline ? 'm' : '') + (rx.unicode ? 'u' : '') + (SUPPORTS_Y ? 'y' : 'g'); // ^(? + rx + ) is needed, in combination with some S slicing, to
          // simulate the 'y' flag.

          var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);
          var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
          if (lim === 0) return [];
          if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];
          var p = 0;
          var q = 0;
          var A = [];

          while (q < S.length) {
            splitter.lastIndex = SUPPORTS_Y ? q : 0;
            var z = callRegExpExec(splitter, SUPPORTS_Y ? S : S.slice(q));
            var e;

            if (z === null || (e = min(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p) {
              q = advanceStringIndex(S, q, unicodeMatching);
            } else {
              A.push(S.slice(p, q));
              if (A.length === lim) return A;

              for (var i = 1; i <= z.length - 1; i++) {
                A.push(z[i]);
                if (A.length === lim) return A;
              }

              q = p = e;
            }
          }

          A.push(S.slice(p));
          return A;
        }];
      }, !SUPPORTS_Y);
      /***/
    },
    /* 232 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var $ = __webpack_require__(1);

      var $trim = __webpack_require__(225).trim;

      var forcedStringTrimMethod = __webpack_require__(333); // `String.prototype.trim` method
      // https://tc39.github.io/ecma262/#sec-string.prototype.trim


      $({
        target: 'String',
        proto: true,
        forced: forcedStringTrimMethod('trim')
      }, {
        trim: function trim() {
          return $trim(this);
        }
      });
      /***/
    },
    /* 233 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var $ = __webpack_require__(1);

      var createHTML = __webpack_require__(234);

      var forcedStringHTMLMethod = __webpack_require__(235); // `String.prototype.link` method
      // https://tc39.github.io/ecma262/#sec-string.prototype.link


      $({
        target: 'String',
        proto: true,
        forced: forcedStringHTMLMethod('link')
      }, {
        link: function link(url) {
          return createHTML(this, 'a', 'href', url);
        }
      });
      /***/
    },
    /* 234 */

    /***/
    function (module, exports, __webpack_require__) {
      var requireObjectCoercible = __webpack_require__(34);

      var quot = /"/g; // B.2.3.2.1 CreateHTML(string, tag, attribute, value)
      // https://tc39.github.io/ecma262/#sec-createhtml

      module.exports = function (string, tag, attribute, value) {
        var S = String(requireObjectCoercible(string));
        var p1 = '<' + tag;
        if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
        return p1 + '>' + S + '</' + tag + '>';
      };
      /***/

    },
    /* 235 */

    /***/
    function (module, exports, __webpack_require__) {
      var fails = __webpack_require__(4); // check the existence of a method, lowercase
      // of a tag and escaping quotes in arguments


      module.exports = function (METHOD_NAME) {
        return fails(function () {
          var test = ''[METHOD_NAME]('"');
          return test !== test.toLowerCase() || test.split('"').length > 3;
        });
      };
      /***/

    },
    /* 236 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var $ = __webpack_require__(1);

      var global = __webpack_require__(3);

      var DESCRIPTORS = __webpack_require__(11);

      var TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS = __webpack_require__(335);

      var ArrayBufferViewCore = __webpack_require__(5);

      var ArrayBufferModule = __webpack_require__(154);

      var anInstance = __webpack_require__(155);

      var createPropertyDescriptor = __webpack_require__(42);

      var createNonEnumerableProperty = __webpack_require__(18);

      var toLength = __webpack_require__(8);

      var toIndex = __webpack_require__(222);

      var toOffset = __webpack_require__(237);

      var toPrimitive = __webpack_require__(55);

      var has = __webpack_require__(14);

      var classof = __webpack_require__(117);

      var isObject = __webpack_require__(13);

      var create = __webpack_require__(58);

      var setPrototypeOf = __webpack_require__(45);

      var getOwnPropertyNames = __webpack_require__(57).f;

      var typedArrayFrom = __webpack_require__(337);

      var forEach = __webpack_require__(20).forEach;

      var setSpecies = __webpack_require__(156);

      var definePropertyModule = __webpack_require__(15);

      var getOwnPropertyDescriptorModule = __webpack_require__(54);

      var InternalStateModule = __webpack_require__(35);

      var inheritIfRequired = __webpack_require__(224);

      var getInternalState = InternalStateModule.get;
      var setInternalState = InternalStateModule.set;
      var nativeDefineProperty = definePropertyModule.f;
      var nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
      var round = Math.round;
      var RangeError = global.RangeError;
      var ArrayBuffer = ArrayBufferModule.ArrayBuffer;
      var DataView = ArrayBufferModule.DataView;
      var NATIVE_ARRAY_BUFFER_VIEWS = ArrayBufferViewCore.NATIVE_ARRAY_BUFFER_VIEWS;
      var TYPED_ARRAY_TAG = ArrayBufferViewCore.TYPED_ARRAY_TAG;
      var TypedArray = ArrayBufferViewCore.TypedArray;
      var TypedArrayPrototype = ArrayBufferViewCore.TypedArrayPrototype;
      var aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;
      var isTypedArray = ArrayBufferViewCore.isTypedArray;
      var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
      var WRONG_LENGTH = 'Wrong length';

      var fromList = function fromList(C, list) {
        var index = 0;
        var length = list.length;
        var result = new (aTypedArrayConstructor(C))(length);

        while (length > index) {
          result[index] = list[index++];
        }

        return result;
      };

      var addGetter = function addGetter(it, key) {
        nativeDefineProperty(it, key, {
          get: function get() {
            return getInternalState(this)[key];
          }
        });
      };

      var isArrayBuffer = function isArrayBuffer(it) {
        var klass;
        return it instanceof ArrayBuffer || (klass = classof(it)) == 'ArrayBuffer' || klass == 'SharedArrayBuffer';
      };

      var isTypedArrayIndex = function isTypedArrayIndex(target, key) {
        return isTypedArray(target) && _typeof4(key) != 'symbol' && key in target && String(+key) == String(key);
      };

      var wrappedGetOwnPropertyDescriptor = function getOwnPropertyDescriptor(target, key) {
        return isTypedArrayIndex(target, key = toPrimitive(key, true)) ? createPropertyDescriptor(2, target[key]) : nativeGetOwnPropertyDescriptor(target, key);
      };

      var wrappedDefineProperty = function defineProperty(target, key, descriptor) {
        if (isTypedArrayIndex(target, key = toPrimitive(key, true)) && isObject(descriptor) && has(descriptor, 'value') && !has(descriptor, 'get') && !has(descriptor, 'set') // TODO: add validation descriptor w/o calling accessors
        && !descriptor.configurable && (!has(descriptor, 'writable') || descriptor.writable) && (!has(descriptor, 'enumerable') || descriptor.enumerable)) {
          target[key] = descriptor.value;
          return target;
        }

        return nativeDefineProperty(target, key, descriptor);
      };

      if (DESCRIPTORS) {
        if (!NATIVE_ARRAY_BUFFER_VIEWS) {
          getOwnPropertyDescriptorModule.f = wrappedGetOwnPropertyDescriptor;
          definePropertyModule.f = wrappedDefineProperty;
          addGetter(TypedArrayPrototype, 'buffer');
          addGetter(TypedArrayPrototype, 'byteOffset');
          addGetter(TypedArrayPrototype, 'byteLength');
          addGetter(TypedArrayPrototype, 'length');
        }

        $({
          target: 'Object',
          stat: true,
          forced: !NATIVE_ARRAY_BUFFER_VIEWS
        }, {
          getOwnPropertyDescriptor: wrappedGetOwnPropertyDescriptor,
          defineProperty: wrappedDefineProperty
        });

        module.exports = function (TYPE, wrapper, CLAMPED) {
          var BYTES = TYPE.match(/\d+$/)[0] / 8;
          var CONSTRUCTOR_NAME = TYPE + (CLAMPED ? 'Clamped' : '') + 'Array';
          var GETTER = 'get' + TYPE;
          var SETTER = 'set' + TYPE;
          var NativeTypedArrayConstructor = global[CONSTRUCTOR_NAME];
          var TypedArrayConstructor = NativeTypedArrayConstructor;
          var TypedArrayConstructorPrototype = TypedArrayConstructor && TypedArrayConstructor.prototype;
          var exported = {};

          var getter = function getter(that, index) {
            var data = getInternalState(that);
            return data.view[GETTER](index * BYTES + data.byteOffset, true);
          };

          var setter = function setter(that, index, value) {
            var data = getInternalState(that);
            if (CLAMPED) value = (value = round(value)) < 0 ? 0 : value > 0xFF ? 0xFF : value & 0xFF;
            data.view[SETTER](index * BYTES + data.byteOffset, value, true);
          };

          var addElement = function addElement(that, index) {
            nativeDefineProperty(that, index, {
              get: function get() {
                return getter(this, index);
              },
              set: function set(value) {
                return setter(this, index, value);
              },
              enumerable: true
            });
          };

          if (!NATIVE_ARRAY_BUFFER_VIEWS) {
            TypedArrayConstructor = wrapper(function (that, data, offset, $length) {
              anInstance(that, TypedArrayConstructor, CONSTRUCTOR_NAME);
              var index = 0;
              var byteOffset = 0;
              var buffer, byteLength, length;

              if (!isObject(data)) {
                length = toIndex(data);
                byteLength = length * BYTES;
                buffer = new ArrayBuffer(byteLength);
              } else if (isArrayBuffer(data)) {
                buffer = data;
                byteOffset = toOffset(offset, BYTES);
                var $len = data.byteLength;

                if ($length === undefined) {
                  if ($len % BYTES) throw RangeError(WRONG_LENGTH);
                  byteLength = $len - byteOffset;
                  if (byteLength < 0) throw RangeError(WRONG_LENGTH);
                } else {
                  byteLength = toLength($length) * BYTES;
                  if (byteLength + byteOffset > $len) throw RangeError(WRONG_LENGTH);
                }

                length = byteLength / BYTES;
              } else if (isTypedArray(data)) {
                return fromList(TypedArrayConstructor, data);
              } else {
                return typedArrayFrom.call(TypedArrayConstructor, data);
              }

              setInternalState(that, {
                buffer: buffer,
                byteOffset: byteOffset,
                byteLength: byteLength,
                length: length,
                view: new DataView(buffer)
              });

              while (index < length) {
                addElement(that, index++);
              }
            });
            if (setPrototypeOf) setPrototypeOf(TypedArrayConstructor, TypedArray);
            TypedArrayConstructorPrototype = TypedArrayConstructor.prototype = create(TypedArrayPrototype);
          } else if (TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS) {
            TypedArrayConstructor = wrapper(function (dummy, data, typedArrayOffset, $length) {
              anInstance(dummy, TypedArrayConstructor, CONSTRUCTOR_NAME);
              return inheritIfRequired(function () {
                if (!isObject(data)) return new NativeTypedArrayConstructor(toIndex(data));
                if (isArrayBuffer(data)) return $length !== undefined ? new NativeTypedArrayConstructor(data, toOffset(typedArrayOffset, BYTES), $length) : typedArrayOffset !== undefined ? new NativeTypedArrayConstructor(data, toOffset(typedArrayOffset, BYTES)) : new NativeTypedArrayConstructor(data);
                if (isTypedArray(data)) return fromList(TypedArrayConstructor, data);
                return typedArrayFrom.call(TypedArrayConstructor, data);
              }(), dummy, TypedArrayConstructor);
            });
            if (setPrototypeOf) setPrototypeOf(TypedArrayConstructor, TypedArray);
            forEach(getOwnPropertyNames(NativeTypedArrayConstructor), function (key) {
              if (!(key in TypedArrayConstructor)) {
                createNonEnumerableProperty(TypedArrayConstructor, key, NativeTypedArrayConstructor[key]);
              }
            });
            TypedArrayConstructor.prototype = TypedArrayConstructorPrototype;
          }

          if (TypedArrayConstructorPrototype.constructor !== TypedArrayConstructor) {
            createNonEnumerableProperty(TypedArrayConstructorPrototype, 'constructor', TypedArrayConstructor);
          }

          if (TYPED_ARRAY_TAG) {
            createNonEnumerableProperty(TypedArrayConstructorPrototype, TYPED_ARRAY_TAG, CONSTRUCTOR_NAME);
          }

          exported[CONSTRUCTOR_NAME] = TypedArrayConstructor;
          $({
            global: true,
            forced: TypedArrayConstructor != NativeTypedArrayConstructor,
            sham: !NATIVE_ARRAY_BUFFER_VIEWS
          }, exported);

          if (!(BYTES_PER_ELEMENT in TypedArrayConstructor)) {
            createNonEnumerableProperty(TypedArrayConstructor, BYTES_PER_ELEMENT, BYTES);
          }

          if (!(BYTES_PER_ELEMENT in TypedArrayConstructorPrototype)) {
            createNonEnumerableProperty(TypedArrayConstructorPrototype, BYTES_PER_ELEMENT, BYTES);
          }

          setSpecies(CONSTRUCTOR_NAME);
        };
      } else module.exports = function () {
        /* empty */
      };
      /***/

    },
    /* 237 */

    /***/
    function (module, exports, __webpack_require__) {
      var toPositiveInteger = __webpack_require__(336);

      module.exports = function (it, BYTES) {
        var offset = toPositiveInteger(it);
        if (offset % BYTES) throw RangeError('Wrong offset');
        return offset;
      };
      /***/

    },
    /* 238 */

    /***/
    function (module, exports, __webpack_require__) {
      var aFunction = __webpack_require__(44);

      var toObject = __webpack_require__(19);

      var IndexedObject = __webpack_require__(92);

      var toLength = __webpack_require__(8); // `Array.prototype.{ reduce, reduceRight }` methods implementation


      var createMethod = function createMethod(IS_RIGHT) {
        return function (that, callbackfn, argumentsLength, memo) {
          aFunction(callbackfn);
          var O = toObject(that);
          var self = IndexedObject(O);
          var length = toLength(O.length);
          var index = IS_RIGHT ? length - 1 : 0;
          var i = IS_RIGHT ? -1 : 1;
          if (argumentsLength < 2) while (true) {
            if (index in self) {
              memo = self[index];
              index += i;
              break;
            }

            index += i;

            if (IS_RIGHT ? index < 0 : length <= index) {
              throw TypeError('Reduce of empty array with no initial value');
            }
          }

          for (; IS_RIGHT ? index >= 0 : length > index; index += i) {
            if (index in self) {
              memo = callbackfn(memo, self[index], index, O);
            }
          }

          return memo;
        };
      };

      module.exports = {
        // `Array.prototype.reduce` method
        // https://tc39.github.io/ecma262/#sec-array.prototype.reduce
        left: createMethod(false),
        // `Array.prototype.reduceRight` method
        // https://tc39.github.io/ecma262/#sec-array.prototype.reduceright
        right: createMethod(true)
      };
      /***/
    },
    /* 239 */

    /***/
    function (module, exports) {
      // iterable DOM collections
      // flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods
      module.exports = {
        CSSRuleList: 0,
        CSSStyleDeclaration: 0,
        CSSValueList: 0,
        ClientRectList: 0,
        DOMRectList: 0,
        DOMStringList: 0,
        DOMTokenList: 1,
        DataTransferItemList: 0,
        FileList: 0,
        HTMLAllCollection: 0,
        HTMLCollection: 0,
        HTMLFormElement: 0,
        HTMLSelectElement: 0,
        MediaList: 0,
        MimeTypeArray: 0,
        NamedNodeMap: 0,
        NodeList: 1,
        PaintRequestList: 0,
        Plugin: 0,
        PluginArray: 0,
        SVGLengthList: 0,
        SVGNumberList: 0,
        SVGPathSegList: 0,
        SVGPointList: 0,
        SVGStringList: 0,
        SVGTransformList: 0,
        SourceBufferList: 0,
        StyleSheetList: 0,
        TextTrackCueList: 0,
        TextTrackList: 0,
        TouchList: 0
      };
      /***/
    },
    /* 240 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";
      /* WEBPACK VAR INJECTION */

      (function (global, process) {
        // Copyright Joyent, Inc. and other Node contributors.
        //
        // Permission is hereby granted, free of charge, to any person obtaining a
        // copy of this software and associated documentation files (the
        // "Software"), to deal in the Software without restriction, including
        // without limitation the rights to use, copy, modify, merge, publish,
        // distribute, sublicense, and/or sell copies of the Software, and to permit
        // persons to whom the Software is furnished to do so, subject to the
        // following conditions:
        //
        // The above copyright notice and this permission notice shall be included
        // in all copies or substantial portions of the Software.
        //
        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
        // USE OR OTHER DEALINGS IN THE SOFTWARE.

        /*<replacement>*/
        var pna = __webpack_require__(123);
        /*</replacement>*/


        module.exports = Readable;
        /*<replacement>*/

        var isArray = __webpack_require__(196);
        /*</replacement>*/

        /*<replacement>*/


        var Duplex;
        /*</replacement>*/

        Readable.ReadableState = ReadableState;
        /*<replacement>*/

        var EE = __webpack_require__(122).EventEmitter;

        var EElistenerCount = function EElistenerCount(emitter, type) {
          return emitter.listeners(type).length;
        };
        /*</replacement>*/

        /*<replacement>*/


        var Stream = __webpack_require__(241);
        /*</replacement>*/

        /*<replacement>*/


        var Buffer = __webpack_require__(124).Buffer;

        var OurUint8Array = global.Uint8Array || function () {};

        function _uint8ArrayToBuffer(chunk) {
          return Buffer.from(chunk);
        }

        function _isUint8Array(obj) {
          return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
        }
        /*</replacement>*/

        /*<replacement>*/


        var util = Object.create(__webpack_require__(98));
        util.inherits = __webpack_require__(86);
        /*</replacement>*/

        /*<replacement>*/

        var debugUtil = __webpack_require__(341);

        var debug = void 0;

        if (debugUtil && debugUtil.debuglog) {
          debug = debugUtil.debuglog('stream');
        } else {
          debug = function debug() {};
        }
        /*</replacement>*/


        var BufferList = __webpack_require__(342);

        var destroyImpl = __webpack_require__(242);

        var StringDecoder;
        util.inherits(Readable, Stream);
        var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

        function prependListener(emitter, event, fn) {
          // Sadly this is not cacheable as some libraries bundle their own
          // event emitter implementation with them.
          if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
          // userland ones.  NEVER DO THIS. This is here only because this code needs
          // to continue to work with older versions of Node.js that do not include
          // the prependListener() method. The goal is to eventually remove this hack.

          if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
        }

        function ReadableState(options, stream) {
          Duplex = Duplex || __webpack_require__(48);
          options = options || {}; // Duplex streams are both readable and writable, but share
          // the same options object.
          // However, some cases require setting options to different
          // values for the readable and the writable sides of the duplex stream.
          // These options can be provided separately as readableXXX and writableXXX.

          var isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to
          // make all the buffer merging and length checks go away

          this.objectMode = !!options.objectMode;
          if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
          // Note: 0 is a valid value, means "don't call _read preemptively ever"

          var hwm = options.highWaterMark;
          var readableHwm = options.readableHighWaterMark;
          var defaultHwm = this.objectMode ? 16 : 16 * 1024;
          if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;else this.highWaterMark = defaultHwm; // cast to ints.

          this.highWaterMark = Math.floor(this.highWaterMark); // A linked list is used to store data chunks instead of an array because the
          // linked list can remove elements from the beginning faster than
          // array.shift()

          this.buffer = new BufferList();
          this.length = 0;
          this.pipes = null;
          this.pipesCount = 0;
          this.flowing = null;
          this.ended = false;
          this.endEmitted = false;
          this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
          // immediately, or on a later tick.  We set this to true at first, because
          // any actions that shouldn't happen until "later" should generally also
          // not happen before the first read call.

          this.sync = true; // whenever we return null, then we set a flag to say
          // that we're awaiting a 'readable' event emission.

          this.needReadable = false;
          this.emittedReadable = false;
          this.readableListening = false;
          this.resumeScheduled = false; // has it been destroyed

          this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
          // encoding is 'binary' so we have to make this configurable.
          // Everything else in the universe uses 'utf8', though.

          this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s

          this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled

          this.readingMore = false;
          this.decoder = null;
          this.encoding = null;

          if (options.encoding) {
            if (!StringDecoder) StringDecoder = __webpack_require__(125).StringDecoder;
            this.decoder = new StringDecoder(options.encoding);
            this.encoding = options.encoding;
          }
        }

        function Readable(options) {
          Duplex = Duplex || __webpack_require__(48);
          if (!(this instanceof Readable)) return new Readable(options);
          this._readableState = new ReadableState(options, this); // legacy

          this.readable = true;

          if (options) {
            if (typeof options.read === 'function') this._read = options.read;
            if (typeof options.destroy === 'function') this._destroy = options.destroy;
          }

          Stream.call(this);
        }

        Object.defineProperty(Readable.prototype, 'destroyed', {
          get: function get() {
            if (this._readableState === undefined) {
              return false;
            }

            return this._readableState.destroyed;
          },
          set: function set(value) {
            // we ignore the value if the stream
            // has not been initialized yet
            if (!this._readableState) {
              return;
            } // backward compatibility, the user is explicitly
            // managing destroyed


            this._readableState.destroyed = value;
          }
        });
        Readable.prototype.destroy = destroyImpl.destroy;
        Readable.prototype._undestroy = destroyImpl.undestroy;

        Readable.prototype._destroy = function (err, cb) {
          this.push(null);
          cb(err);
        }; // Manually shove something into the read() buffer.
        // This returns true if the highWaterMark has not been hit yet,
        // similar to how Writable.write() returns true if you should
        // write() some more.


        Readable.prototype.push = function (chunk, encoding) {
          var state = this._readableState;
          var skipChunkCheck;

          if (!state.objectMode) {
            if (typeof chunk === 'string') {
              encoding = encoding || state.defaultEncoding;

              if (encoding !== state.encoding) {
                chunk = Buffer.from(chunk, encoding);
                encoding = '';
              }

              skipChunkCheck = true;
            }
          } else {
            skipChunkCheck = true;
          }

          return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
        }; // Unshift should *always* be something directly out of read()


        Readable.prototype.unshift = function (chunk) {
          return readableAddChunk(this, chunk, null, true, false);
        };

        function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
          var state = stream._readableState;

          if (chunk === null) {
            state.reading = false;
            onEofChunk(stream, state);
          } else {
            var er;
            if (!skipChunkCheck) er = chunkInvalid(state, chunk);

            if (er) {
              stream.emit('error', er);
            } else if (state.objectMode || chunk && chunk.length > 0) {
              if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
                chunk = _uint8ArrayToBuffer(chunk);
              }

              if (addToFront) {
                if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);
              } else if (state.ended) {
                stream.emit('error', new Error('stream.push() after EOF'));
              } else {
                state.reading = false;

                if (state.decoder && !encoding) {
                  chunk = state.decoder.write(chunk);
                  if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
                } else {
                  addChunk(stream, state, chunk, false);
                }
              }
            } else if (!addToFront) {
              state.reading = false;
            }
          }

          return needMoreData(state);
        }

        function addChunk(stream, state, chunk, addToFront) {
          if (state.flowing && state.length === 0 && !state.sync) {
            stream.emit('data', chunk);
            stream.read(0);
          } else {
            // update the buffer info.
            state.length += state.objectMode ? 1 : chunk.length;
            if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
            if (state.needReadable) emitReadable(stream);
          }

          maybeReadMore(stream, state);
        }

        function chunkInvalid(state, chunk) {
          var er;

          if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
            er = new TypeError('Invalid non-string/buffer chunk');
          }

          return er;
        } // if it's past the high water mark, we can push in some more.
        // Also, if we have no data yet, we can stand some
        // more bytes.  This is to work around cases where hwm=0,
        // such as the repl.  Also, if the push() triggered a
        // readable event, and the user called read(largeNumber) such that
        // needReadable was set, then we ought to push more, so that another
        // 'readable' event will be triggered.


        function needMoreData(state) {
          return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
        }

        Readable.prototype.isPaused = function () {
          return this._readableState.flowing === false;
        }; // backwards compatibility.


        Readable.prototype.setEncoding = function (enc) {
          if (!StringDecoder) StringDecoder = __webpack_require__(125).StringDecoder;
          this._readableState.decoder = new StringDecoder(enc);
          this._readableState.encoding = enc;
          return this;
        }; // Don't raise the hwm > 8MB


        var MAX_HWM = 0x800000;

        function computeNewHighWaterMark(n) {
          if (n >= MAX_HWM) {
            n = MAX_HWM;
          } else {
            // Get the next highest power of 2 to prevent increasing hwm excessively in
            // tiny amounts
            n--;
            n |= n >>> 1;
            n |= n >>> 2;
            n |= n >>> 4;
            n |= n >>> 8;
            n |= n >>> 16;
            n++;
          }

          return n;
        } // This function is designed to be inlinable, so please take care when making
        // changes to the function body.


        function howMuchToRead(n, state) {
          if (n <= 0 || state.length === 0 && state.ended) return 0;
          if (state.objectMode) return 1;

          if (n !== n) {
            // Only flow one buffer at a time
            if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
          } // If we're asking for more than the current hwm, then raise the hwm.


          if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
          if (n <= state.length) return n; // Don't have enough

          if (!state.ended) {
            state.needReadable = true;
            return 0;
          }

          return state.length;
        } // you can override either this method, or the async _read(n) below.


        Readable.prototype.read = function (n) {
          debug('read', n);
          n = parseInt(n, 10);
          var state = this._readableState;
          var nOrig = n;
          if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
          // already have a bunch of data in the buffer, then just trigger
          // the 'readable' event and move on.

          if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
            debug('read: emitReadable', state.length, state.ended);
            if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
            return null;
          }

          n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.

          if (n === 0 && state.ended) {
            if (state.length === 0) endReadable(this);
            return null;
          } // All the actual chunk generation logic needs to be
          // *below* the call to _read.  The reason is that in certain
          // synthetic stream cases, such as passthrough streams, _read
          // may be a completely synchronous operation which may change
          // the state of the read buffer, providing enough data when
          // before there was *not* enough.
          //
          // So, the steps are:
          // 1. Figure out what the state of things will be after we do
          // a read from the buffer.
          //
          // 2. If that resulting state will trigger a _read, then call _read.
          // Note that this may be asynchronous, or synchronous.  Yes, it is
          // deeply ugly to write APIs this way, but that still doesn't mean
          // that the Readable class should behave improperly, as streams are
          // designed to be sync/async agnostic.
          // Take note if the _read call is sync or async (ie, if the read call
          // has returned yet), so that we know whether or not it's safe to emit
          // 'readable' etc.
          //
          // 3. Actually pull the requested chunks out of the buffer and return.
          // if we need a readable event, then we need to do some reading.


          var doRead = state.needReadable;
          debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some

          if (state.length === 0 || state.length - n < state.highWaterMark) {
            doRead = true;
            debug('length less than watermark', doRead);
          } // however, if we've ended, then there's no point, and if we're already
          // reading, then it's unnecessary.


          if (state.ended || state.reading) {
            doRead = false;
            debug('reading or ended', doRead);
          } else if (doRead) {
            debug('do read');
            state.reading = true;
            state.sync = true; // if the length is currently zero, then we *need* a readable event.

            if (state.length === 0) state.needReadable = true; // call internal read method

            this._read(state.highWaterMark);

            state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
            // and we need to re-evaluate how much data we can return to the user.

            if (!state.reading) n = howMuchToRead(nOrig, state);
          }

          var ret;
          if (n > 0) ret = fromList(n, state);else ret = null;

          if (ret === null) {
            state.needReadable = true;
            n = 0;
          } else {
            state.length -= n;
          }

          if (state.length === 0) {
            // If we have nothing in the buffer, then we want to know
            // as soon as we *do* get something into the buffer.
            if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.

            if (nOrig !== n && state.ended) endReadable(this);
          }

          if (ret !== null) this.emit('data', ret);
          return ret;
        };

        function onEofChunk(stream, state) {
          if (state.ended) return;

          if (state.decoder) {
            var chunk = state.decoder.end();

            if (chunk && chunk.length) {
              state.buffer.push(chunk);
              state.length += state.objectMode ? 1 : chunk.length;
            }
          }

          state.ended = true; // emit 'readable' now to make sure it gets picked up.

          emitReadable(stream);
        } // Don't emit readable right away in sync mode, because this can trigger
        // another read() call => stack overflow.  This way, it might trigger
        // a nextTick recursion warning, but that's not so bad.


        function emitReadable(stream) {
          var state = stream._readableState;
          state.needReadable = false;

          if (!state.emittedReadable) {
            debug('emitReadable', state.flowing);
            state.emittedReadable = true;
            if (state.sync) pna.nextTick(emitReadable_, stream);else emitReadable_(stream);
          }
        }

        function emitReadable_(stream) {
          debug('emit readable');
          stream.emit('readable');
          flow(stream);
        } // at this point, the user has presumably seen the 'readable' event,
        // and called read() to consume some data.  that may have triggered
        // in turn another _read(n) call, in which case reading = true if
        // it's in progress.
        // However, if we're not ended, or reading, and the length < hwm,
        // then go ahead and try to read some more preemptively.


        function maybeReadMore(stream, state) {
          if (!state.readingMore) {
            state.readingMore = true;
            pna.nextTick(maybeReadMore_, stream, state);
          }
        }

        function maybeReadMore_(stream, state) {
          var len = state.length;

          while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
            debug('maybeReadMore read 0');
            stream.read(0);
            if (len === state.length) // didn't get any data, stop spinning.
              break;else len = state.length;
          }

          state.readingMore = false;
        } // abstract method.  to be overridden in specific implementation classes.
        // call cb(er, data) where data is <= n in length.
        // for virtual (non-string, non-buffer) streams, "length" is somewhat
        // arbitrary, and perhaps not very meaningful.


        Readable.prototype._read = function (n) {
          this.emit('error', new Error('_read() is not implemented'));
        };

        Readable.prototype.pipe = function (dest, pipeOpts) {
          var src = this;
          var state = this._readableState;

          switch (state.pipesCount) {
            case 0:
              state.pipes = dest;
              break;

            case 1:
              state.pipes = [state.pipes, dest];
              break;

            default:
              state.pipes.push(dest);
              break;
          }

          state.pipesCount += 1;
          debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
          var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
          var endFn = doEnd ? onend : unpipe;
          if (state.endEmitted) pna.nextTick(endFn);else src.once('end', endFn);
          dest.on('unpipe', onunpipe);

          function onunpipe(readable, unpipeInfo) {
            debug('onunpipe');

            if (readable === src) {
              if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
                unpipeInfo.hasUnpiped = true;
                cleanup();
              }
            }
          }

          function onend() {
            debug('onend');
            dest.end();
          } // when the dest drains, it reduces the awaitDrain counter
          // on the source.  This would be more elegant with a .once()
          // handler in flow(), but adding and removing repeatedly is
          // too slow.


          var ondrain = pipeOnDrain(src);
          dest.on('drain', ondrain);
          var cleanedUp = false;

          function cleanup() {
            debug('cleanup'); // cleanup event handlers once the pipe is broken

            dest.removeListener('close', onclose);
            dest.removeListener('finish', onfinish);
            dest.removeListener('drain', ondrain);
            dest.removeListener('error', onerror);
            dest.removeListener('unpipe', onunpipe);
            src.removeListener('end', onend);
            src.removeListener('end', unpipe);
            src.removeListener('data', ondata);
            cleanedUp = true; // if the reader is waiting for a drain event from this
            // specific writer, then it would cause it to never start
            // flowing again.
            // So, if this is awaiting a drain, then we just call it now.
            // If we don't know, then assume that we are waiting for one.

            if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
          } // If the user pushes more data while we're writing to dest then we'll end up
          // in ondata again. However, we only want to increase awaitDrain once because
          // dest will only emit one 'drain' event for the multiple writes.
          // => Introduce a guard on increasing awaitDrain.


          var increasedAwaitDrain = false;
          src.on('data', ondata);

          function ondata(chunk) {
            debug('ondata');
            increasedAwaitDrain = false;
            var ret = dest.write(chunk);

            if (false === ret && !increasedAwaitDrain) {
              // If the user unpiped during `dest.write()`, it is possible
              // to get stuck in a permanently paused state if that write
              // also returned false.
              // => Check whether `dest` is still a piping destination.
              if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
                debug('false write response, pause', src._readableState.awaitDrain);
                src._readableState.awaitDrain++;
                increasedAwaitDrain = true;
              }

              src.pause();
            }
          } // if the dest has an error, then stop piping into it.
          // however, don't suppress the throwing behavior for this.


          function onerror(er) {
            debug('onerror', er);
            unpipe();
            dest.removeListener('error', onerror);
            if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
          } // Make sure our error handler is attached before userland ones.


          prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.

          function onclose() {
            dest.removeListener('finish', onfinish);
            unpipe();
          }

          dest.once('close', onclose);

          function onfinish() {
            debug('onfinish');
            dest.removeListener('close', onclose);
            unpipe();
          }

          dest.once('finish', onfinish);

          function unpipe() {
            debug('unpipe');
            src.unpipe(dest);
          } // tell the dest that it's being piped to


          dest.emit('pipe', src); // start the flow if it hasn't been started already.

          if (!state.flowing) {
            debug('pipe resume');
            src.resume();
          }

          return dest;
        };

        function pipeOnDrain(src) {
          return function () {
            var state = src._readableState;
            debug('pipeOnDrain', state.awaitDrain);
            if (state.awaitDrain) state.awaitDrain--;

            if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
              state.flowing = true;
              flow(src);
            }
          };
        }

        Readable.prototype.unpipe = function (dest) {
          var state = this._readableState;
          var unpipeInfo = {
            hasUnpiped: false
          }; // if we're not piping anywhere, then do nothing.

          if (state.pipesCount === 0) return this; // just one destination.  most common case.

          if (state.pipesCount === 1) {
            // passed in one, but it's not the right one.
            if (dest && dest !== state.pipes) return this;
            if (!dest) dest = state.pipes; // got a match.

            state.pipes = null;
            state.pipesCount = 0;
            state.flowing = false;
            if (dest) dest.emit('unpipe', this, unpipeInfo);
            return this;
          } // slow case. multiple pipe destinations.


          if (!dest) {
            // remove all.
            var dests = state.pipes;
            var len = state.pipesCount;
            state.pipes = null;
            state.pipesCount = 0;
            state.flowing = false;

            for (var i = 0; i < len; i++) {
              dests[i].emit('unpipe', this, unpipeInfo);
            }

            return this;
          } // try to find the right one.


          var index = indexOf(state.pipes, dest);
          if (index === -1) return this;
          state.pipes.splice(index, 1);
          state.pipesCount -= 1;
          if (state.pipesCount === 1) state.pipes = state.pipes[0];
          dest.emit('unpipe', this, unpipeInfo);
          return this;
        }; // set up data events if they are asked for
        // Ensure readable listeners eventually get something


        Readable.prototype.on = function (ev, fn) {
          var res = Stream.prototype.on.call(this, ev, fn);

          if (ev === 'data') {
            // Start flowing on next tick if stream isn't explicitly paused
            if (this._readableState.flowing !== false) this.resume();
          } else if (ev === 'readable') {
            var state = this._readableState;

            if (!state.endEmitted && !state.readableListening) {
              state.readableListening = state.needReadable = true;
              state.emittedReadable = false;

              if (!state.reading) {
                pna.nextTick(nReadingNextTick, this);
              } else if (state.length) {
                emitReadable(this);
              }
            }
          }

          return res;
        };

        Readable.prototype.addListener = Readable.prototype.on;

        function nReadingNextTick(self) {
          debug('readable nexttick read 0');
          self.read(0);
        } // pause() and resume() are remnants of the legacy readable stream API
        // If the user uses them, then switch into old mode.


        Readable.prototype.resume = function () {
          var state = this._readableState;

          if (!state.flowing) {
            debug('resume');
            state.flowing = true;
            resume(this, state);
          }

          return this;
        };

        function resume(stream, state) {
          if (!state.resumeScheduled) {
            state.resumeScheduled = true;
            pna.nextTick(resume_, stream, state);
          }
        }

        function resume_(stream, state) {
          if (!state.reading) {
            debug('resume read 0');
            stream.read(0);
          }

          state.resumeScheduled = false;
          state.awaitDrain = 0;
          stream.emit('resume');
          flow(stream);
          if (state.flowing && !state.reading) stream.read(0);
        }

        Readable.prototype.pause = function () {
          debug('call pause flowing=%j', this._readableState.flowing);

          if (false !== this._readableState.flowing) {
            debug('pause');
            this._readableState.flowing = false;
            this.emit('pause');
          }

          return this;
        };

        function flow(stream) {
          var state = stream._readableState;
          debug('flow', state.flowing);

          while (state.flowing && stream.read() !== null) {}
        } // wrap an old-style stream as the async data source.
        // This is *not* part of the readable stream interface.
        // It is an ugly unfortunate mess of history.


        Readable.prototype.wrap = function (stream) {
          var _this = this;

          var state = this._readableState;
          var paused = false;
          stream.on('end', function () {
            debug('wrapped end');

            if (state.decoder && !state.ended) {
              var chunk = state.decoder.end();
              if (chunk && chunk.length) _this.push(chunk);
            }

            _this.push(null);
          });
          stream.on('data', function (chunk) {
            debug('wrapped data');
            if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode

            if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

            var ret = _this.push(chunk);

            if (!ret) {
              paused = true;
              stream.pause();
            }
          }); // proxy all the other methods.
          // important when wrapping filters and duplexes.

          for (var i in stream) {
            if (this[i] === undefined && typeof stream[i] === 'function') {
              this[i] = function (method) {
                return function () {
                  return stream[method].apply(stream, arguments);
                };
              }(i);
            }
          } // proxy certain important events.


          for (var n = 0; n < kProxyEvents.length; n++) {
            stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
          } // when we try to consume some more bytes, simply unpause the
          // underlying stream.


          this._read = function (n) {
            debug('wrapped _read', n);

            if (paused) {
              paused = false;
              stream.resume();
            }
          };

          return this;
        };

        Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
          // making it explicit this property is not enumerable
          // because otherwise some prototype manipulation in
          // userland will fail
          enumerable: false,
          get: function get() {
            return this._readableState.highWaterMark;
          }
        }); // exposed for testing purposes only.

        Readable._fromList = fromList; // Pluck off n bytes from an array of buffers.
        // Length is the combined lengths of all the buffers in the list.
        // This function is designed to be inlinable, so please take care when making
        // changes to the function body.

        function fromList(n, state) {
          // nothing buffered
          if (state.length === 0) return null;
          var ret;
          if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
            // read it all, truncate the list
            if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
            state.buffer.clear();
          } else {
            // read part of list
            ret = fromListPartial(n, state.buffer, state.decoder);
          }
          return ret;
        } // Extracts only enough buffered data to satisfy the amount requested.
        // This function is designed to be inlinable, so please take care when making
        // changes to the function body.


        function fromListPartial(n, list, hasStrings) {
          var ret;

          if (n < list.head.data.length) {
            // slice is the same for buffers and strings
            ret = list.head.data.slice(0, n);
            list.head.data = list.head.data.slice(n);
          } else if (n === list.head.data.length) {
            // first chunk is a perfect match
            ret = list.shift();
          } else {
            // result spans more than one buffer
            ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
          }

          return ret;
        } // Copies a specified amount of characters from the list of buffered data
        // chunks.
        // This function is designed to be inlinable, so please take care when making
        // changes to the function body.


        function copyFromBufferString(n, list) {
          var p = list.head;
          var c = 1;
          var ret = p.data;
          n -= ret.length;

          while (p = p.next) {
            var str = p.data;
            var nb = n > str.length ? str.length : n;
            if (nb === str.length) ret += str;else ret += str.slice(0, n);
            n -= nb;

            if (n === 0) {
              if (nb === str.length) {
                ++c;
                if (p.next) list.head = p.next;else list.head = list.tail = null;
              } else {
                list.head = p;
                p.data = str.slice(nb);
              }

              break;
            }

            ++c;
          }

          list.length -= c;
          return ret;
        } // Copies a specified amount of bytes from the list of buffered data chunks.
        // This function is designed to be inlinable, so please take care when making
        // changes to the function body.


        function copyFromBuffer(n, list) {
          var ret = Buffer.allocUnsafe(n);
          var p = list.head;
          var c = 1;
          p.data.copy(ret);
          n -= p.data.length;

          while (p = p.next) {
            var buf = p.data;
            var nb = n > buf.length ? buf.length : n;
            buf.copy(ret, ret.length - n, 0, nb);
            n -= nb;

            if (n === 0) {
              if (nb === buf.length) {
                ++c;
                if (p.next) list.head = p.next;else list.head = list.tail = null;
              } else {
                list.head = p;
                p.data = buf.slice(nb);
              }

              break;
            }

            ++c;
          }

          list.length -= c;
          return ret;
        }

        function endReadable(stream) {
          var state = stream._readableState; // If we get here before consuming all the bytes, then that is a
          // bug in node.  Should never happen.

          if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

          if (!state.endEmitted) {
            state.ended = true;
            pna.nextTick(endReadableNT, state, stream);
          }
        }

        function endReadableNT(state, stream) {
          // Check that we didn't get one last unshift.
          if (!state.endEmitted && state.length === 0) {
            state.endEmitted = true;
            stream.readable = false;
            stream.emit('end');
          }
        }

        function indexOf(xs, x) {
          for (var i = 0, l = xs.length; i < l; i++) {
            if (xs[i] === x) return i;
          }

          return -1;
        }
        /* WEBPACK VAR INJECTION */

      }).call(this, __webpack_require__(24), __webpack_require__(47));
      /***/
    },
    /* 241 */

    /***/
    function (module, exports, __webpack_require__) {
      module.exports = __webpack_require__(122).EventEmitter;
      /***/
    },
    /* 242 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";
      /*<replacement>*/

      var pna = __webpack_require__(123);
      /*</replacement>*/
      // undocumented cb() API, needed for core, not for public API


      function destroy(err, cb) {
        var _this = this;

        var readableDestroyed = this._readableState && this._readableState.destroyed;
        var writableDestroyed = this._writableState && this._writableState.destroyed;

        if (readableDestroyed || writableDestroyed) {
          if (cb) {
            cb(err);
          } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
            pna.nextTick(emitErrorNT, this, err);
          }

          return this;
        } // we set destroyed to true before firing error callbacks in order
        // to make it re-entrance safe in case destroy() is called within callbacks


        if (this._readableState) {
          this._readableState.destroyed = true;
        } // if this is a duplex stream mark the writable part as destroyed as well


        if (this._writableState) {
          this._writableState.destroyed = true;
        }

        this._destroy(err || null, function (err) {
          if (!cb && err) {
            pna.nextTick(emitErrorNT, _this, err);

            if (_this._writableState) {
              _this._writableState.errorEmitted = true;
            }
          } else if (cb) {
            cb(err);
          }
        });

        return this;
      }

      function undestroy() {
        if (this._readableState) {
          this._readableState.destroyed = false;
          this._readableState.reading = false;
          this._readableState.ended = false;
          this._readableState.endEmitted = false;
        }

        if (this._writableState) {
          this._writableState.destroyed = false;
          this._writableState.ended = false;
          this._writableState.ending = false;
          this._writableState.finished = false;
          this._writableState.errorEmitted = false;
        }
      }

      function emitErrorNT(self, err) {
        self.emit('error', err);
      }

      module.exports = {
        destroy: destroy,
        undestroy: undestroy
      };
      /***/
    },
    /* 243 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict"; // Copyright Joyent, Inc. and other Node contributors.
      //
      // Permission is hereby granted, free of charge, to any person obtaining a
      // copy of this software and associated documentation files (the
      // "Software"), to deal in the Software without restriction, including
      // without limitation the rights to use, copy, modify, merge, publish,
      // distribute, sublicense, and/or sell copies of the Software, and to permit
      // persons to whom the Software is furnished to do so, subject to the
      // following conditions:
      //
      // The above copyright notice and this permission notice shall be included
      // in all copies or substantial portions of the Software.
      //
      // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
      // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
      // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
      // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
      // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
      // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
      // USE OR OTHER DEALINGS IN THE SOFTWARE.
      // a transform stream is a readable/writable stream where you do
      // something with the data.  Sometimes it's called a "filter",
      // but that's not a great name for it, since that implies a thing where
      // some bits pass through, and others are simply ignored.  (That would
      // be a valid example of a transform, of course.)
      //
      // While the output is causally related to the input, it's not a
      // necessarily symmetric or synchronous transformation.  For example,
      // a zlib stream might take multiple plain-text writes(), and then
      // emit a single compressed chunk some time in the future.
      //
      // Here's how this works:
      //
      // The Transform stream has all the aspects of the readable and writable
      // stream classes.  When you write(chunk), that calls _write(chunk,cb)
      // internally, and returns false if there's a lot of pending writes
      // buffered up.  When you call read(), that calls _read(n) until
      // there's enough pending readable data buffered up.
      //
      // In a transform stream, the written data is placed in a buffer.  When
      // _read(n) is called, it transforms the queued up data, calling the
      // buffered _write cb's as it consumes chunks.  If consuming a single
      // written chunk would result in multiple output chunks, then the first
      // outputted bit calls the readcb, and subsequent chunks just go into
      // the read buffer, and will cause it to emit 'readable' if necessary.
      //
      // This way, back-pressure is actually determined by the reading side,
      // since _read has to be called to start processing a new chunk.  However,
      // a pathological inflate type of transform can cause excessive buffering
      // here.  For example, imagine a stream where every byte of input is
      // interpreted as an integer from 0-255, and then results in that many
      // bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
      // 1kb of data being output.  In this case, you could write a very small
      // amount of input, and end up with a very large amount of output.  In
      // such a pathological inflating mechanism, there'd be no way to tell
      // the system to stop doing the transform.  A single 4MB write could
      // cause the system to run out of memory.
      //
      // However, even in such a pathological case, only a single written chunk
      // would be consumed, and then the rest would wait (un-transformed) until
      // the results of the previous transformed chunk were consumed.

      module.exports = Transform;

      var Duplex = __webpack_require__(48);
      /*<replacement>*/


      var util = Object.create(__webpack_require__(98));
      util.inherits = __webpack_require__(86);
      /*</replacement>*/

      util.inherits(Transform, Duplex);

      function afterTransform(er, data) {
        var ts = this._transformState;
        ts.transforming = false;
        var cb = ts.writecb;

        if (!cb) {
          return this.emit('error', new Error('write callback called multiple times'));
        }

        ts.writechunk = null;
        ts.writecb = null;
        if (data != null) // single equals check for both `null` and `undefined`
          this.push(data);
        cb(er);
        var rs = this._readableState;
        rs.reading = false;

        if (rs.needReadable || rs.length < rs.highWaterMark) {
          this._read(rs.highWaterMark);
        }
      }

      function Transform(options) {
        if (!(this instanceof Transform)) return new Transform(options);
        Duplex.call(this, options);
        this._transformState = {
          afterTransform: afterTransform.bind(this),
          needTransform: false,
          transforming: false,
          writecb: null,
          writechunk: null,
          writeencoding: null
        }; // start out asking for a readable event once data is transformed.

        this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
        // that Readable wants before the first _read call, so unset the
        // sync guard flag.

        this._readableState.sync = false;

        if (options) {
          if (typeof options.transform === 'function') this._transform = options.transform;
          if (typeof options.flush === 'function') this._flush = options.flush;
        } // When the writable side finishes, then flush out anything remaining.


        this.on('prefinish', prefinish);
      }

      function prefinish() {
        var _this = this;

        if (typeof this._flush === 'function') {
          this._flush(function (er, data) {
            done(_this, er, data);
          });
        } else {
          done(this, null, null);
        }
      }

      Transform.prototype.push = function (chunk, encoding) {
        this._transformState.needTransform = false;
        return Duplex.prototype.push.call(this, chunk, encoding);
      }; // This is the part where you do stuff!
      // override this function in implementation classes.
      // 'chunk' is an input chunk.
      //
      // Call `push(newChunk)` to pass along transformed output
      // to the readable side.  You may call 'push' zero or more times.
      //
      // Call `cb(err)` when you are done with this chunk.  If you pass
      // an error, then that'll put the hurt on the whole operation.  If you
      // never call cb(), then you'll never get another chunk.


      Transform.prototype._transform = function (chunk, encoding, cb) {
        throw new Error('_transform() is not implemented');
      };

      Transform.prototype._write = function (chunk, encoding, cb) {
        var ts = this._transformState;
        ts.writecb = cb;
        ts.writechunk = chunk;
        ts.writeencoding = encoding;

        if (!ts.transforming) {
          var rs = this._readableState;
          if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
        }
      }; // Doesn't matter what the args are here.
      // _transform does all the work.
      // That we got here means that the readable side wants more data.


      Transform.prototype._read = function (n) {
        var ts = this._transformState;

        if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
          ts.transforming = true;

          this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
        } else {
          // mark that we need a transform, so that any data that comes in
          // will get processed, now that we've asked for it.
          ts.needTransform = true;
        }
      };

      Transform.prototype._destroy = function (err, cb) {
        var _this2 = this;

        Duplex.prototype._destroy.call(this, err, function (err2) {
          cb(err2);

          _this2.emit('close');
        });
      };

      function done(stream, er, data) {
        if (er) return stream.emit('error', er);
        if (data != null) // single equals check for both `null` and `undefined`
          stream.push(data); // if there's nothing in the write buffer, then that means
        // that nothing more will ever be provided

        if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');
        if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');
        return stream.push(null);
      }
      /***/

    },
    /* 244 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";
      /* WEBPACK VAR INJECTION */

      (function (process) {
        var Buffer = __webpack_require__(10).Buffer;

        var Transform = __webpack_require__(121).Transform;

        var binding = __webpack_require__(350);

        var util = __webpack_require__(166);

        var assert = __webpack_require__(245).ok;

        var kMaxLength = __webpack_require__(10).kMaxLength;

        var kRangeErrorMessage = 'Cannot create final Buffer. It would be larger ' + 'than 0x' + kMaxLength.toString(16) + ' bytes'; // zlib doesn't provide these, so kludge them in following the same
        // const naming scheme zlib uses.

        binding.Z_MIN_WINDOWBITS = 8;
        binding.Z_MAX_WINDOWBITS = 15;
        binding.Z_DEFAULT_WINDOWBITS = 15; // fewer than 64 bytes per chunk is stupid.
        // technically it could work with as few as 8, but even 64 bytes
        // is absurdly low.  Usually a MB or more is best.

        binding.Z_MIN_CHUNK = 64;
        binding.Z_MAX_CHUNK = Infinity;
        binding.Z_DEFAULT_CHUNK = 16 * 1024;
        binding.Z_MIN_MEMLEVEL = 1;
        binding.Z_MAX_MEMLEVEL = 9;
        binding.Z_DEFAULT_MEMLEVEL = 8;
        binding.Z_MIN_LEVEL = -1;
        binding.Z_MAX_LEVEL = 9;
        binding.Z_DEFAULT_LEVEL = binding.Z_DEFAULT_COMPRESSION; // expose all the zlib constants

        var bkeys = Object.keys(binding);

        for (var bk = 0; bk < bkeys.length; bk++) {
          var bkey = bkeys[bk];

          if (bkey.match(/^Z/)) {
            Object.defineProperty(exports, bkey, {
              enumerable: true,
              value: binding[bkey],
              writable: false
            });
          }
        } // translation table for return codes.


        var codes = {
          Z_OK: binding.Z_OK,
          Z_STREAM_END: binding.Z_STREAM_END,
          Z_NEED_DICT: binding.Z_NEED_DICT,
          Z_ERRNO: binding.Z_ERRNO,
          Z_STREAM_ERROR: binding.Z_STREAM_ERROR,
          Z_DATA_ERROR: binding.Z_DATA_ERROR,
          Z_MEM_ERROR: binding.Z_MEM_ERROR,
          Z_BUF_ERROR: binding.Z_BUF_ERROR,
          Z_VERSION_ERROR: binding.Z_VERSION_ERROR
        };
        var ckeys = Object.keys(codes);

        for (var ck = 0; ck < ckeys.length; ck++) {
          var ckey = ckeys[ck];
          codes[codes[ckey]] = ckey;
        }

        Object.defineProperty(exports, 'codes', {
          enumerable: true,
          value: Object.freeze(codes),
          writable: false
        });
        exports.Deflate = Deflate;
        exports.Inflate = Inflate;
        exports.Gzip = Gzip;
        exports.Gunzip = Gunzip;
        exports.DeflateRaw = DeflateRaw;
        exports.InflateRaw = InflateRaw;
        exports.Unzip = Unzip;

        exports.createDeflate = function (o) {
          return new Deflate(o);
        };

        exports.createInflate = function (o) {
          return new Inflate(o);
        };

        exports.createDeflateRaw = function (o) {
          return new DeflateRaw(o);
        };

        exports.createInflateRaw = function (o) {
          return new InflateRaw(o);
        };

        exports.createGzip = function (o) {
          return new Gzip(o);
        };

        exports.createGunzip = function (o) {
          return new Gunzip(o);
        };

        exports.createUnzip = function (o) {
          return new Unzip(o);
        }; // Convenience methods.
        // compress/decompress a string or buffer in one step.


        exports.deflate = function (buffer, opts, callback) {
          if (typeof opts === 'function') {
            callback = opts;
            opts = {};
          }

          return zlibBuffer(new Deflate(opts), buffer, callback);
        };

        exports.deflateSync = function (buffer, opts) {
          return zlibBufferSync(new Deflate(opts), buffer);
        };

        exports.gzip = function (buffer, opts, callback) {
          if (typeof opts === 'function') {
            callback = opts;
            opts = {};
          }

          return zlibBuffer(new Gzip(opts), buffer, callback);
        };

        exports.gzipSync = function (buffer, opts) {
          return zlibBufferSync(new Gzip(opts), buffer);
        };

        exports.deflateRaw = function (buffer, opts, callback) {
          if (typeof opts === 'function') {
            callback = opts;
            opts = {};
          }

          return zlibBuffer(new DeflateRaw(opts), buffer, callback);
        };

        exports.deflateRawSync = function (buffer, opts) {
          return zlibBufferSync(new DeflateRaw(opts), buffer);
        };

        exports.unzip = function (buffer, opts, callback) {
          if (typeof opts === 'function') {
            callback = opts;
            opts = {};
          }

          return zlibBuffer(new Unzip(opts), buffer, callback);
        };

        exports.unzipSync = function (buffer, opts) {
          return zlibBufferSync(new Unzip(opts), buffer);
        };

        exports.inflate = function (buffer, opts, callback) {
          if (typeof opts === 'function') {
            callback = opts;
            opts = {};
          }

          return zlibBuffer(new Inflate(opts), buffer, callback);
        };

        exports.inflateSync = function (buffer, opts) {
          return zlibBufferSync(new Inflate(opts), buffer);
        };

        exports.gunzip = function (buffer, opts, callback) {
          if (typeof opts === 'function') {
            callback = opts;
            opts = {};
          }

          return zlibBuffer(new Gunzip(opts), buffer, callback);
        };

        exports.gunzipSync = function (buffer, opts) {
          return zlibBufferSync(new Gunzip(opts), buffer);
        };

        exports.inflateRaw = function (buffer, opts, callback) {
          if (typeof opts === 'function') {
            callback = opts;
            opts = {};
          }

          return zlibBuffer(new InflateRaw(opts), buffer, callback);
        };

        exports.inflateRawSync = function (buffer, opts) {
          return zlibBufferSync(new InflateRaw(opts), buffer);
        };

        function zlibBuffer(engine, buffer, callback) {
          var buffers = [];
          var nread = 0;
          engine.on('error', onError);
          engine.on('end', onEnd);
          engine.end(buffer);
          flow();

          function flow() {
            var chunk;

            while (null !== (chunk = engine.read())) {
              buffers.push(chunk);
              nread += chunk.length;
            }

            engine.once('readable', flow);
          }

          function onError(err) {
            engine.removeListener('end', onEnd);
            engine.removeListener('readable', flow);
            callback(err);
          }

          function onEnd() {
            var buf;
            var err = null;

            if (nread >= kMaxLength) {
              err = new RangeError(kRangeErrorMessage);
            } else {
              buf = Buffer.concat(buffers, nread);
            }

            buffers = [];
            engine.close();
            callback(err, buf);
          }
        }

        function zlibBufferSync(engine, buffer) {
          if (typeof buffer === 'string') buffer = Buffer.from(buffer);
          if (!Buffer.isBuffer(buffer)) throw new TypeError('Not a string or buffer');
          var flushFlag = engine._finishFlushFlag;
          return engine._processChunk(buffer, flushFlag);
        } // generic zlib
        // minimal 2-byte header


        function Deflate(opts) {
          if (!(this instanceof Deflate)) return new Deflate(opts);
          Zlib.call(this, opts, binding.DEFLATE);
        }

        function Inflate(opts) {
          if (!(this instanceof Inflate)) return new Inflate(opts);
          Zlib.call(this, opts, binding.INFLATE);
        } // gzip - bigger header, same deflate compression


        function Gzip(opts) {
          if (!(this instanceof Gzip)) return new Gzip(opts);
          Zlib.call(this, opts, binding.GZIP);
        }

        function Gunzip(opts) {
          if (!(this instanceof Gunzip)) return new Gunzip(opts);
          Zlib.call(this, opts, binding.GUNZIP);
        } // raw - no header


        function DeflateRaw(opts) {
          if (!(this instanceof DeflateRaw)) return new DeflateRaw(opts);
          Zlib.call(this, opts, binding.DEFLATERAW);
        }

        function InflateRaw(opts) {
          if (!(this instanceof InflateRaw)) return new InflateRaw(opts);
          Zlib.call(this, opts, binding.INFLATERAW);
        } // auto-detect header.


        function Unzip(opts) {
          if (!(this instanceof Unzip)) return new Unzip(opts);
          Zlib.call(this, opts, binding.UNZIP);
        }

        function isValidFlushFlag(flag) {
          return flag === binding.Z_NO_FLUSH || flag === binding.Z_PARTIAL_FLUSH || flag === binding.Z_SYNC_FLUSH || flag === binding.Z_FULL_FLUSH || flag === binding.Z_FINISH || flag === binding.Z_BLOCK;
        } // the Zlib class they all inherit from
        // This thing manages the queue of requests, and returns
        // true or false if there is anything in the queue when
        // you call the .write() method.


        function Zlib(opts, mode) {
          var _this = this;

          this._opts = opts = opts || {};
          this._chunkSize = opts.chunkSize || exports.Z_DEFAULT_CHUNK;
          Transform.call(this, opts);

          if (opts.flush && !isValidFlushFlag(opts.flush)) {
            throw new Error('Invalid flush flag: ' + opts.flush);
          }

          if (opts.finishFlush && !isValidFlushFlag(opts.finishFlush)) {
            throw new Error('Invalid flush flag: ' + opts.finishFlush);
          }

          this._flushFlag = opts.flush || binding.Z_NO_FLUSH;
          this._finishFlushFlag = typeof opts.finishFlush !== 'undefined' ? opts.finishFlush : binding.Z_FINISH;

          if (opts.chunkSize) {
            if (opts.chunkSize < exports.Z_MIN_CHUNK || opts.chunkSize > exports.Z_MAX_CHUNK) {
              throw new Error('Invalid chunk size: ' + opts.chunkSize);
            }
          }

          if (opts.windowBits) {
            if (opts.windowBits < exports.Z_MIN_WINDOWBITS || opts.windowBits > exports.Z_MAX_WINDOWBITS) {
              throw new Error('Invalid windowBits: ' + opts.windowBits);
            }
          }

          if (opts.level) {
            if (opts.level < exports.Z_MIN_LEVEL || opts.level > exports.Z_MAX_LEVEL) {
              throw new Error('Invalid compression level: ' + opts.level);
            }
          }

          if (opts.memLevel) {
            if (opts.memLevel < exports.Z_MIN_MEMLEVEL || opts.memLevel > exports.Z_MAX_MEMLEVEL) {
              throw new Error('Invalid memLevel: ' + opts.memLevel);
            }
          }

          if (opts.strategy) {
            if (opts.strategy != exports.Z_FILTERED && opts.strategy != exports.Z_HUFFMAN_ONLY && opts.strategy != exports.Z_RLE && opts.strategy != exports.Z_FIXED && opts.strategy != exports.Z_DEFAULT_STRATEGY) {
              throw new Error('Invalid strategy: ' + opts.strategy);
            }
          }

          if (opts.dictionary) {
            if (!Buffer.isBuffer(opts.dictionary)) {
              throw new Error('Invalid dictionary: it should be a Buffer instance');
            }
          }

          this._handle = new binding.Zlib(mode);
          var self = this;
          this._hadError = false;

          this._handle.onerror = function (message, errno) {
            // there is no way to cleanly recover.
            // continuing only obscures problems.
            _close(self);

            self._hadError = true;
            var error = new Error(message);
            error.errno = errno;
            error.code = exports.codes[errno];
            self.emit('error', error);
          };

          var level = exports.Z_DEFAULT_COMPRESSION;
          if (typeof opts.level === 'number') level = opts.level;
          var strategy = exports.Z_DEFAULT_STRATEGY;
          if (typeof opts.strategy === 'number') strategy = opts.strategy;

          this._handle.init(opts.windowBits || exports.Z_DEFAULT_WINDOWBITS, level, opts.memLevel || exports.Z_DEFAULT_MEMLEVEL, strategy, opts.dictionary);

          this._buffer = Buffer.allocUnsafe(this._chunkSize);
          this._offset = 0;
          this._level = level;
          this._strategy = strategy;
          this.once('end', this.close);
          Object.defineProperty(this, '_closed', {
            get: function get() {
              return !_this._handle;
            },
            configurable: true,
            enumerable: true
          });
        }

        util.inherits(Zlib, Transform);

        Zlib.prototype.params = function (level, strategy, callback) {
          if (level < exports.Z_MIN_LEVEL || level > exports.Z_MAX_LEVEL) {
            throw new RangeError('Invalid compression level: ' + level);
          }

          if (strategy != exports.Z_FILTERED && strategy != exports.Z_HUFFMAN_ONLY && strategy != exports.Z_RLE && strategy != exports.Z_FIXED && strategy != exports.Z_DEFAULT_STRATEGY) {
            throw new TypeError('Invalid strategy: ' + strategy);
          }

          if (this._level !== level || this._strategy !== strategy) {
            var self = this;
            this.flush(binding.Z_SYNC_FLUSH, function () {
              assert(self._handle, 'zlib binding closed');

              self._handle.params(level, strategy);

              if (!self._hadError) {
                self._level = level;
                self._strategy = strategy;
                if (callback) callback();
              }
            });
          } else {
            process.nextTick(callback);
          }
        };

        Zlib.prototype.reset = function () {
          assert(this._handle, 'zlib binding closed');
          return this._handle.reset();
        }; // This is the _flush function called by the transform class,
        // internally, when the last chunk has been written.


        Zlib.prototype._flush = function (callback) {
          this._transform(Buffer.alloc(0), '', callback);
        };

        Zlib.prototype.flush = function (kind, callback) {
          var _this2 = this;

          var ws = this._writableState;

          if (typeof kind === 'function' || kind === undefined && !callback) {
            callback = kind;
            kind = binding.Z_FULL_FLUSH;
          }

          if (ws.ended) {
            if (callback) process.nextTick(callback);
          } else if (ws.ending) {
            if (callback) this.once('end', callback);
          } else if (ws.needDrain) {
            if (callback) {
              this.once('drain', function () {
                return _this2.flush(kind, callback);
              });
            }
          } else {
            this._flushFlag = kind;
            this.write(Buffer.alloc(0), '', callback);
          }
        };

        Zlib.prototype.close = function (callback) {
          _close(this, callback);

          process.nextTick(emitCloseNT, this);
        };

        function _close(engine, callback) {
          if (callback) process.nextTick(callback); // Caller may invoke .close after a zlib error (which will null _handle).

          if (!engine._handle) return;

          engine._handle.close();

          engine._handle = null;
        }

        function emitCloseNT(self) {
          self.emit('close');
        }

        Zlib.prototype._transform = function (chunk, encoding, cb) {
          var flushFlag;
          var ws = this._writableState;
          var ending = ws.ending || ws.ended;
          var last = ending && (!chunk || ws.length === chunk.length);
          if (chunk !== null && !Buffer.isBuffer(chunk)) return cb(new Error('invalid input'));
          if (!this._handle) return cb(new Error('zlib binding closed')); // If it's the last chunk, or a final flush, we use the Z_FINISH flush flag
          // (or whatever flag was provided using opts.finishFlush).
          // If it's explicitly flushing at some other time, then we use
          // Z_FULL_FLUSH. Otherwise, use Z_NO_FLUSH for maximum compression
          // goodness.

          if (last) flushFlag = this._finishFlushFlag;else {
            flushFlag = this._flushFlag; // once we've flushed the last of the queue, stop flushing and
            // go back to the normal behavior.

            if (chunk.length >= ws.length) {
              this._flushFlag = this._opts.flush || binding.Z_NO_FLUSH;
            }
          }

          this._processChunk(chunk, flushFlag, cb);
        };

        Zlib.prototype._processChunk = function (chunk, flushFlag, cb) {
          var availInBefore = chunk && chunk.length;
          var availOutBefore = this._chunkSize - this._offset;
          var inOff = 0;
          var self = this;
          var async = typeof cb === 'function';

          if (!async) {
            var buffers = [];
            var nread = 0;
            var error;
            this.on('error', function (er) {
              error = er;
            });
            assert(this._handle, 'zlib binding closed');

            do {
              var res = this._handle.writeSync(flushFlag, chunk, // in
              inOff, // in_off
              availInBefore, // in_len
              this._buffer, // out
              this._offset, //out_off
              availOutBefore); // out_len

            } while (!this._hadError && callback(res[0], res[1]));

            if (this._hadError) {
              throw error;
            }

            if (nread >= kMaxLength) {
              _close(this);

              throw new RangeError(kRangeErrorMessage);
            }

            var buf = Buffer.concat(buffers, nread);

            _close(this);

            return buf;
          }

          assert(this._handle, 'zlib binding closed');

          var req = this._handle.write(flushFlag, chunk, // in
          inOff, // in_off
          availInBefore, // in_len
          this._buffer, // out
          this._offset, //out_off
          availOutBefore); // out_len


          req.buffer = chunk;
          req.callback = callback;

          function callback(availInAfter, availOutAfter) {
            // When the callback is used in an async write, the callback's
            // context is the `req` object that was created. The req object
            // is === this._handle, and that's why it's important to null
            // out the values after they are done being used. `this._handle`
            // can stay in memory longer than the callback and buffer are needed.
            if (this) {
              this.buffer = null;
              this.callback = null;
            }

            if (self._hadError) return;
            var have = availOutBefore - availOutAfter;
            assert(have >= 0, 'have should not go down');

            if (have > 0) {
              var out = self._buffer.slice(self._offset, self._offset + have);

              self._offset += have; // serve some output to the consumer.

              if (async) {
                self.push(out);
              } else {
                buffers.push(out);
                nread += out.length;
              }
            } // exhausted the output buffer, or used all the input create a new one.


            if (availOutAfter === 0 || self._offset >= self._chunkSize) {
              availOutBefore = self._chunkSize;
              self._offset = 0;
              self._buffer = Buffer.allocUnsafe(self._chunkSize);
            }

            if (availOutAfter === 0) {
              // Not actually done.  Need to reprocess.
              // Also, update the availInBefore to the availInAfter value,
              // so that if we have to hit it a third (fourth, etc.) time,
              // it'll have the correct byte counts.
              inOff += availInBefore - availInAfter;
              availInBefore = availInAfter;
              if (!async) return true;

              var newReq = self._handle.write(flushFlag, chunk, inOff, availInBefore, self._buffer, self._offset, self._chunkSize);

              newReq.callback = callback; // this same function

              newReq.buffer = chunk;
              return;
            }

            if (!async) return false; // finished with the chunk.

            cb();
          }
        };

        util.inherits(Deflate, Zlib);
        util.inherits(Inflate, Zlib);
        util.inherits(Gzip, Zlib);
        util.inherits(Gunzip, Zlib);
        util.inherits(DeflateRaw, Zlib);
        util.inherits(InflateRaw, Zlib);
        util.inherits(Unzip, Zlib);
        /* WEBPACK VAR INJECTION */
      }).call(this, __webpack_require__(47));
      /***/
    },
    /* 245 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";
      /* WEBPACK VAR INJECTION */

      (function (global) {
        var objectAssign = __webpack_require__(351); // compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
        // original notice:

        /*!
         * The buffer module from node.js, for the browser.
         *
         * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
         * @license  MIT
         */


        function compare(a, b) {
          if (a === b) {
            return 0;
          }

          var x = a.length;
          var y = b.length;

          for (var i = 0, len = Math.min(x, y); i < len; ++i) {
            if (a[i] !== b[i]) {
              x = a[i];
              y = b[i];
              break;
            }
          }

          if (x < y) {
            return -1;
          }

          if (y < x) {
            return 1;
          }

          return 0;
        }

        function isBuffer(b) {
          if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {
            return global.Buffer.isBuffer(b);
          }

          return !!(b != null && b._isBuffer);
        } // based on node assert, original notice:
        // NB: The URL to the CommonJS spec is kept just for tradition.
        //     node-assert has evolved a lot since then, both in API and behavior.
        // http://wiki.commonjs.org/wiki/Unit_Testing/1.0
        //
        // THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
        //
        // Originally from narwhal.js (http://narwhaljs.org)
        // Copyright (c) 2009 Thomas Robinson <280north.com>
        //
        // Permission is hereby granted, free of charge, to any person obtaining a copy
        // of this software and associated documentation files (the 'Software'), to
        // deal in the Software without restriction, including without limitation the
        // rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
        // sell copies of the Software, and to permit persons to whom the Software is
        // furnished to do so, subject to the following conditions:
        //
        // The above copyright notice and this permission notice shall be included in
        // all copies or substantial portions of the Software.
        //
        // THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        // AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
        // ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
        // WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


        var util = __webpack_require__(166);

        var hasOwn = Object.prototype.hasOwnProperty;
        var pSlice = Array.prototype.slice;

        var functionsHaveNames = function () {
          return function foo() {}.name === 'foo';
        }();

        function pToString(obj) {
          return Object.prototype.toString.call(obj);
        }

        function isView(arrbuf) {
          if (isBuffer(arrbuf)) {
            return false;
          }

          if (typeof global.ArrayBuffer !== 'function') {
            return false;
          }

          if (typeof ArrayBuffer.isView === 'function') {
            return ArrayBuffer.isView(arrbuf);
          }

          if (!arrbuf) {
            return false;
          }

          if (arrbuf instanceof DataView) {
            return true;
          }

          if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
            return true;
          }

          return false;
        } // 1. The assert module provides functions that throw
        // AssertionError's when particular conditions are not met. The
        // assert module must conform to the following interface.


        var assert = module.exports = ok; // 2. The AssertionError is defined in assert.
        // new assert.AssertionError({ message: message,
        //                             actual: actual,
        //                             expected: expected })

        var regex = /\s*function\s+([^\(\s]*)\s*/; // based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js

        function getName(func) {
          if (!util.isFunction(func)) {
            return;
          }

          if (functionsHaveNames) {
            return func.name;
          }

          var str = func.toString();
          var match = str.match(regex);
          return match && match[1];
        }

        assert.AssertionError = function AssertionError(options) {
          this.name = 'AssertionError';
          this.actual = options.actual;
          this.expected = options.expected;
          this.operator = options.operator;

          if (options.message) {
            this.message = options.message;
            this.generatedMessage = false;
          } else {
            this.message = getMessage(this);
            this.generatedMessage = true;
          }

          var stackStartFunction = options.stackStartFunction || fail;

          if (Error.captureStackTrace) {
            Error.captureStackTrace(this, stackStartFunction);
          } else {
            // non v8 browsers so we can have a stacktrace
            var err = new Error();

            if (err.stack) {
              var out = err.stack; // try to strip useless frames

              var fn_name = getName(stackStartFunction);
              var idx = out.indexOf('\n' + fn_name);

              if (idx >= 0) {
                // once we have located the function frame
                // we need to strip out everything before it (and its line)
                var next_line = out.indexOf('\n', idx + 1);
                out = out.substring(next_line + 1);
              }

              this.stack = out;
            }
          }
        }; // assert.AssertionError instanceof Error


        util.inherits(assert.AssertionError, Error);

        function truncate(s, n) {
          if (typeof s === 'string') {
            return s.length < n ? s : s.slice(0, n);
          } else {
            return s;
          }
        }

        function inspect(something) {
          if (functionsHaveNames || !util.isFunction(something)) {
            return util.inspect(something);
          }

          var rawname = getName(something);
          var name = rawname ? ': ' + rawname : '';
          return '[Function' + name + ']';
        }

        function getMessage(self) {
          return truncate(inspect(self.actual), 128) + ' ' + self.operator + ' ' + truncate(inspect(self.expected), 128);
        } // At present only the three keys mentioned above are used and
        // understood by the spec. Implementations or sub modules can pass
        // other keys to the AssertionError's constructor - they will be
        // ignored.
        // 3. All of the following functions must throw an AssertionError
        // when a corresponding condition is not met, with a message that
        // may be undefined if not provided.  All assertion methods provide
        // both the actual and expected values to the assertion error for
        // display purposes.


        function fail(actual, expected, message, operator, stackStartFunction) {
          throw new assert.AssertionError({
            message: message,
            actual: actual,
            expected: expected,
            operator: operator,
            stackStartFunction: stackStartFunction
          });
        } // EXTENSION! allows for well behaved errors defined elsewhere.


        assert.fail = fail; // 4. Pure assertion tests whether a value is truthy, as determined
        // by !!guard.
        // assert.ok(guard, message_opt);
        // This statement is equivalent to assert.equal(true, !!guard,
        // message_opt);. To test strictly for the value true, use
        // assert.strictEqual(true, guard, message_opt);.

        function ok(value, message) {
          if (!value) fail(value, true, message, '==', assert.ok);
        }

        assert.ok = ok; // 5. The equality assertion tests shallow, coercive equality with
        // ==.
        // assert.equal(actual, expected, message_opt);

        assert.equal = function equal(actual, expected, message) {
          if (actual != expected) fail(actual, expected, message, '==', assert.equal);
        }; // 6. The non-equality assertion tests for whether two objects are not equal
        // with != assert.notEqual(actual, expected, message_opt);


        assert.notEqual = function notEqual(actual, expected, message) {
          if (actual == expected) {
            fail(actual, expected, message, '!=', assert.notEqual);
          }
        }; // 7. The equivalence assertion tests a deep equality relation.
        // assert.deepEqual(actual, expected, message_opt);


        assert.deepEqual = function deepEqual(actual, expected, message) {
          if (!_deepEqual(actual, expected, false)) {
            fail(actual, expected, message, 'deepEqual', assert.deepEqual);
          }
        };

        assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
          if (!_deepEqual(actual, expected, true)) {
            fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);
          }
        };

        function _deepEqual(actual, expected, strict, memos) {
          // 7.1. All identical values are equivalent, as determined by ===.
          if (actual === expected) {
            return true;
          } else if (isBuffer(actual) && isBuffer(expected)) {
            return compare(actual, expected) === 0; // 7.2. If the expected value is a Date object, the actual value is
            // equivalent if it is also a Date object that refers to the same time.
          } else if (util.isDate(actual) && util.isDate(expected)) {
            return actual.getTime() === expected.getTime(); // 7.3 If the expected value is a RegExp object, the actual value is
            // equivalent if it is also a RegExp object with the same source and
            // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
          } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
            return actual.source === expected.source && actual.global === expected.global && actual.multiline === expected.multiline && actual.lastIndex === expected.lastIndex && actual.ignoreCase === expected.ignoreCase; // 7.4. Other pairs that do not both pass typeof value == 'object',
            // equivalence is determined by ==.
          } else if ((actual === null || _typeof4(actual) !== 'object') && (expected === null || _typeof4(expected) !== 'object')) {
            return strict ? actual === expected : actual == expected; // If both values are instances of typed arrays, wrap their underlying
            // ArrayBuffers in a Buffer each to increase performance
            // This optimization requires the arrays to have the same type as checked by
            // Object.prototype.toString (aka pToString). Never perform binary
            // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
            // bit patterns are not identical.
          } else if (isView(actual) && isView(expected) && pToString(actual) === pToString(expected) && !(actual instanceof Float32Array || actual instanceof Float64Array)) {
            return compare(new Uint8Array(actual.buffer), new Uint8Array(expected.buffer)) === 0; // 7.5 For all other Object pairs, including Array objects, equivalence is
            // determined by having the same number of owned properties (as verified
            // with Object.prototype.hasOwnProperty.call), the same set of keys
            // (although not necessarily the same order), equivalent values for every
            // corresponding key, and an identical 'prototype' property. Note: this
            // accounts for both named and indexed properties on Arrays.
          } else if (isBuffer(actual) !== isBuffer(expected)) {
            return false;
          } else {
            memos = memos || {
              actual: [],
              expected: []
            };
            var actualIndex = memos.actual.indexOf(actual);

            if (actualIndex !== -1) {
              if (actualIndex === memos.expected.indexOf(expected)) {
                return true;
              }
            }

            memos.actual.push(actual);
            memos.expected.push(expected);
            return objEquiv(actual, expected, strict, memos);
          }
        }

        function isArguments(object) {
          return Object.prototype.toString.call(object) == '[object Arguments]';
        }

        function objEquiv(a, b, strict, actualVisitedObjects) {
          if (a === null || a === undefined || b === null || b === undefined) return false; // if one is a primitive, the other must be same

          if (util.isPrimitive(a) || util.isPrimitive(b)) return a === b;
          if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b)) return false;
          var aIsArgs = isArguments(a);
          var bIsArgs = isArguments(b);
          if (aIsArgs && !bIsArgs || !aIsArgs && bIsArgs) return false;

          if (aIsArgs) {
            a = pSlice.call(a);
            b = pSlice.call(b);
            return _deepEqual(a, b, strict);
          }

          var ka = objectKeys(a);
          var kb = objectKeys(b);
          var key, i; // having the same number of owned properties (keys incorporates
          // hasOwnProperty)

          if (ka.length !== kb.length) return false; //the same set of keys (although not necessarily the same order),

          ka.sort();
          kb.sort(); //~~~cheap key test

          for (i = ka.length - 1; i >= 0; i--) {
            if (ka[i] !== kb[i]) return false;
          } //equivalent values for every corresponding key, and
          //~~~possibly expensive deep test


          for (i = ka.length - 1; i >= 0; i--) {
            key = ka[i];
            if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects)) return false;
          }

          return true;
        } // 8. The non-equivalence assertion tests for any deep inequality.
        // assert.notDeepEqual(actual, expected, message_opt);


        assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
          if (_deepEqual(actual, expected, false)) {
            fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
          }
        };

        assert.notDeepStrictEqual = notDeepStrictEqual;

        function notDeepStrictEqual(actual, expected, message) {
          if (_deepEqual(actual, expected, true)) {
            fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
          }
        } // 9. The strict equality assertion tests strict equality, as determined by ===.
        // assert.strictEqual(actual, expected, message_opt);


        assert.strictEqual = function strictEqual(actual, expected, message) {
          if (actual !== expected) {
            fail(actual, expected, message, '===', assert.strictEqual);
          }
        }; // 10. The strict non-equality assertion tests for strict inequality, as
        // determined by !==.  assert.notStrictEqual(actual, expected, message_opt);


        assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
          if (actual === expected) {
            fail(actual, expected, message, '!==', assert.notStrictEqual);
          }
        };

        function expectedException(actual, expected) {
          if (!actual || !expected) {
            return false;
          }

          if (Object.prototype.toString.call(expected) == '[object RegExp]') {
            return expected.test(actual);
          }

          try {
            if (actual instanceof expected) {
              return true;
            }
          } catch (e) {// Ignore.  The instanceof check doesn't work for arrow functions.
          }

          if (Error.isPrototypeOf(expected)) {
            return false;
          }

          return expected.call({}, actual) === true;
        }

        function _tryBlock(block) {
          var error;

          try {
            block();
          } catch (e) {
            error = e;
          }

          return error;
        }

        function _throws(shouldThrow, block, expected, message) {
          var actual;

          if (typeof block !== 'function') {
            throw new TypeError('"block" argument must be a function');
          }

          if (typeof expected === 'string') {
            message = expected;
            expected = null;
          }

          actual = _tryBlock(block);
          message = (expected && expected.name ? ' (' + expected.name + ').' : '.') + (message ? ' ' + message : '.');

          if (shouldThrow && !actual) {
            fail(actual, expected, 'Missing expected exception' + message);
          }

          var userProvidedMessage = typeof message === 'string';
          var isUnwantedException = !shouldThrow && util.isError(actual);
          var isUnexpectedException = !shouldThrow && actual && !expected;

          if (isUnwantedException && userProvidedMessage && expectedException(actual, expected) || isUnexpectedException) {
            fail(actual, expected, 'Got unwanted exception' + message);
          }

          if (shouldThrow && actual && expected && !expectedException(actual, expected) || !shouldThrow && actual) {
            throw actual;
          }
        } // 11. Expected to throw an error:
        // assert.throws(block, Error_opt, message_opt);


        assert.throws = function (block,
        /*optional*/
        error,
        /*optional*/
        message) {
          _throws(true, block, error, message);
        }; // EXTENSION! This is annoying to write outside this module.


        assert.doesNotThrow = function (block,
        /*optional*/
        error,
        /*optional*/
        message) {
          _throws(false, block, error, message);
        };

        assert.ifError = function (err) {
          if (err) throw err;
        }; // Expose a strict only variant of assert


        function strict(value, message) {
          if (!value) fail(value, true, message, '==', strict);
        }

        assert.strict = objectAssign(strict, assert, {
          equal: assert.strictEqual,
          deepEqual: assert.deepStrictEqual,
          notEqual: assert.notStrictEqual,
          notDeepEqual: assert.notDeepStrictEqual
        });
        assert.strict.strict = assert.strict;

        var objectKeys = Object.keys || function (obj) {
          var keys = [];

          for (var key in obj) {
            if (hasOwn.call(obj, key)) keys.push(key);
          }

          return keys;
        };
        /* WEBPACK VAR INJECTION */

      }).call(this, __webpack_require__(24));
      /***/
    },
    /* 246 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict"; // Note: adler32 takes 12% for level 0 and 2% for level 6.
      // It isn't worth it to make additional optimizations as in original.
      // Small size is preferable.
      // (C) 1995-2013 Jean-loup Gailly and Mark Adler
      // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
      //
      // This software is provided 'as-is', without any express or implied
      // warranty. In no event will the authors be held liable for any damages
      // arising from the use of this software.
      //
      // Permission is granted to anyone to use this software for any purpose,
      // including commercial applications, and to alter it and redistribute it
      // freely, subject to the following restrictions:
      //
      // 1. The origin of this software must not be misrepresented; you must not
      //   claim that you wrote the original software. If you use this software
      //   in a product, an acknowledgment in the product documentation would be
      //   appreciated but is not required.
      // 2. Altered source versions must be plainly marked as such, and must not be
      //   misrepresented as being the original software.
      // 3. This notice may not be removed or altered from any source distribution.

      function adler32(adler, buf, len, pos) {
        var s1 = adler & 0xffff | 0,
            s2 = adler >>> 16 & 0xffff | 0,
            n = 0;

        while (len !== 0) {
          // Set limit ~ twice less than 5552, to keep
          // s2 in 31-bits, because we force signed ints.
          // in other case %= will fail.
          n = len > 2000 ? 2000 : len;
          len -= n;

          do {
            s1 = s1 + buf[pos++] | 0;
            s2 = s2 + s1 | 0;
          } while (--n);

          s1 %= 65521;
          s2 %= 65521;
        }

        return s1 | s2 << 16 | 0;
      }

      module.exports = adler32;
      /***/
    },
    /* 247 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict"; // Note: we can't get significant speed boost here.
      // So write code to minimize size - no pregenerated tables
      // and array tools dependencies.
      // (C) 1995-2013 Jean-loup Gailly and Mark Adler
      // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
      //
      // This software is provided 'as-is', without any express or implied
      // warranty. In no event will the authors be held liable for any damages
      // arising from the use of this software.
      //
      // Permission is granted to anyone to use this software for any purpose,
      // including commercial applications, and to alter it and redistribute it
      // freely, subject to the following restrictions:
      //
      // 1. The origin of this software must not be misrepresented; you must not
      //   claim that you wrote the original software. If you use this software
      //   in a product, an acknowledgment in the product documentation would be
      //   appreciated but is not required.
      // 2. Altered source versions must be plainly marked as such, and must not be
      //   misrepresented as being the original software.
      // 3. This notice may not be removed or altered from any source distribution.
      // Use ordinary array, since untyped makes no boost here

      function makeTable() {
        var c,
            table = [];

        for (var n = 0; n < 256; n++) {
          c = n;

          for (var k = 0; k < 8; k++) {
            c = c & 1 ? 0xEDB88320 ^ c >>> 1 : c >>> 1;
          }

          table[n] = c;
        }

        return table;
      } // Create table on load. Just 255 signed longs. Not a problem.


      var crcTable = makeTable();

      function crc32(crc, buf, len, pos) {
        var t = crcTable,
            end = pos + len;
        crc ^= -1;

        for (var i = pos; i < end; i++) {
          crc = crc >>> 8 ^ t[(crc ^ buf[i]) & 0xFF];
        }

        return crc ^ -1; // >>> 0;
      }

      module.exports = crc32;
      /***/
    },
    /* 248 */

    /***/
    function (module, exports, __webpack_require__) {
      ;

      (function (root, factory) {
        if (true) {
          // CommonJS
          module.exports = exports = factory(__webpack_require__(2));
        } else {}
      })(this, function (CryptoJS) {
        (function (Math) {
          // Shortcuts
          var C = CryptoJS;
          var C_lib = C.lib;
          var WordArray = C_lib.WordArray;
          var Hasher = C_lib.Hasher;
          var C_algo = C.algo; // Initialization and round constants tables

          var H = [];
          var K = []; // Compute constants

          (function () {
            function isPrime(n) {
              var sqrtN = Math.sqrt(n);

              for (var factor = 2; factor <= sqrtN; factor++) {
                if (!(n % factor)) {
                  return false;
                }
              }

              return true;
            }

            function getFractionalBits(n) {
              return (n - (n | 0)) * 0x100000000 | 0;
            }

            var n = 2;
            var nPrime = 0;

            while (nPrime < 64) {
              if (isPrime(n)) {
                if (nPrime < 8) {
                  H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));
                }

                K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));
                nPrime++;
              }

              n++;
            }
          })(); // Reusable object


          var W = [];
          /**
           * SHA-256 hash algorithm.
           */

          var SHA256 = C_algo.SHA256 = Hasher.extend({
            _doReset: function _doReset() {
              this._hash = new WordArray.init(H.slice(0));
            },
            _doProcessBlock: function _doProcessBlock(M, offset) {
              // Shortcut
              var H = this._hash.words; // Working variables

              var a = H[0];
              var b = H[1];
              var c = H[2];
              var d = H[3];
              var e = H[4];
              var f = H[5];
              var g = H[6];
              var h = H[7]; // Computation

              for (var i = 0; i < 64; i++) {
                if (i < 16) {
                  W[i] = M[offset + i] | 0;
                } else {
                  var gamma0x = W[i - 15];
                  var gamma0 = (gamma0x << 25 | gamma0x >>> 7) ^ (gamma0x << 14 | gamma0x >>> 18) ^ gamma0x >>> 3;
                  var gamma1x = W[i - 2];
                  var gamma1 = (gamma1x << 15 | gamma1x >>> 17) ^ (gamma1x << 13 | gamma1x >>> 19) ^ gamma1x >>> 10;
                  W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];
                }

                var ch = e & f ^ ~e & g;
                var maj = a & b ^ a & c ^ b & c;
                var sigma0 = (a << 30 | a >>> 2) ^ (a << 19 | a >>> 13) ^ (a << 10 | a >>> 22);
                var sigma1 = (e << 26 | e >>> 6) ^ (e << 21 | e >>> 11) ^ (e << 7 | e >>> 25);
                var t1 = h + sigma1 + ch + K[i] + W[i];
                var t2 = sigma0 + maj;
                h = g;
                g = f;
                f = e;
                e = d + t1 | 0;
                d = c;
                c = b;
                b = a;
                a = t1 + t2 | 0;
              } // Intermediate hash value


              H[0] = H[0] + a | 0;
              H[1] = H[1] + b | 0;
              H[2] = H[2] + c | 0;
              H[3] = H[3] + d | 0;
              H[4] = H[4] + e | 0;
              H[5] = H[5] + f | 0;
              H[6] = H[6] + g | 0;
              H[7] = H[7] + h | 0;
            },
            _doFinalize: function _doFinalize() {
              // Shortcuts
              var data = this._data;
              var dataWords = data.words;
              var nBitsTotal = this._nDataBytes * 8;
              var nBitsLeft = data.sigBytes * 8; // Add padding

              dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;
              dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
              dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
              data.sigBytes = dataWords.length * 4; // Hash final blocks

              this._process(); // Return final computed hash


              return this._hash;
            },
            clone: function clone() {
              var clone = Hasher.clone.call(this);
              clone._hash = this._hash.clone();
              return clone;
            }
          });
          /**
           * Shortcut function to the hasher's object interface.
           *
           * @param {WordArray|string} message The message to hash.
           *
           * @return {WordArray} The hash.
           *
           * @static
           *
           * @example
           *
           *     var hash = CryptoJS.SHA256('message');
           *     var hash = CryptoJS.SHA256(wordArray);
           */

          C.SHA256 = Hasher._createHelper(SHA256);
          /**
           * Shortcut function to the HMAC's object interface.
           *
           * @param {WordArray|string} message The message to hash.
           * @param {WordArray|string} key The secret key.
           *
           * @return {WordArray} The HMAC.
           *
           * @static
           *
           * @example
           *
           *     var hmac = CryptoJS.HmacSHA256(message, key);
           */

          C.HmacSHA256 = Hasher._createHmacHelper(SHA256);
        })(Math);

        return CryptoJS.SHA256;
      });
      /***/

    },
    /* 249 */

    /***/
    function (module, exports, __webpack_require__) {
      ;

      (function (root, factory, undef) {
        if (true) {
          // CommonJS
          module.exports = exports = factory(__webpack_require__(2), __webpack_require__(127));
        } else {}
      })(this, function (CryptoJS) {
        (function () {
          // Shortcuts
          var C = CryptoJS;
          var C_lib = C.lib;
          var Hasher = C_lib.Hasher;
          var C_x64 = C.x64;
          var X64Word = C_x64.Word;
          var X64WordArray = C_x64.WordArray;
          var C_algo = C.algo;

          function X64Word_create() {
            return X64Word.create.apply(X64Word, arguments);
          } // Constants


          var K = [X64Word_create(0x428a2f98, 0xd728ae22), X64Word_create(0x71374491, 0x23ef65cd), X64Word_create(0xb5c0fbcf, 0xec4d3b2f), X64Word_create(0xe9b5dba5, 0x8189dbbc), X64Word_create(0x3956c25b, 0xf348b538), X64Word_create(0x59f111f1, 0xb605d019), X64Word_create(0x923f82a4, 0xaf194f9b), X64Word_create(0xab1c5ed5, 0xda6d8118), X64Word_create(0xd807aa98, 0xa3030242), X64Word_create(0x12835b01, 0x45706fbe), X64Word_create(0x243185be, 0x4ee4b28c), X64Word_create(0x550c7dc3, 0xd5ffb4e2), X64Word_create(0x72be5d74, 0xf27b896f), X64Word_create(0x80deb1fe, 0x3b1696b1), X64Word_create(0x9bdc06a7, 0x25c71235), X64Word_create(0xc19bf174, 0xcf692694), X64Word_create(0xe49b69c1, 0x9ef14ad2), X64Word_create(0xefbe4786, 0x384f25e3), X64Word_create(0x0fc19dc6, 0x8b8cd5b5), X64Word_create(0x240ca1cc, 0x77ac9c65), X64Word_create(0x2de92c6f, 0x592b0275), X64Word_create(0x4a7484aa, 0x6ea6e483), X64Word_create(0x5cb0a9dc, 0xbd41fbd4), X64Word_create(0x76f988da, 0x831153b5), X64Word_create(0x983e5152, 0xee66dfab), X64Word_create(0xa831c66d, 0x2db43210), X64Word_create(0xb00327c8, 0x98fb213f), X64Word_create(0xbf597fc7, 0xbeef0ee4), X64Word_create(0xc6e00bf3, 0x3da88fc2), X64Word_create(0xd5a79147, 0x930aa725), X64Word_create(0x06ca6351, 0xe003826f), X64Word_create(0x14292967, 0x0a0e6e70), X64Word_create(0x27b70a85, 0x46d22ffc), X64Word_create(0x2e1b2138, 0x5c26c926), X64Word_create(0x4d2c6dfc, 0x5ac42aed), X64Word_create(0x53380d13, 0x9d95b3df), X64Word_create(0x650a7354, 0x8baf63de), X64Word_create(0x766a0abb, 0x3c77b2a8), X64Word_create(0x81c2c92e, 0x47edaee6), X64Word_create(0x92722c85, 0x1482353b), X64Word_create(0xa2bfe8a1, 0x4cf10364), X64Word_create(0xa81a664b, 0xbc423001), X64Word_create(0xc24b8b70, 0xd0f89791), X64Word_create(0xc76c51a3, 0x0654be30), X64Word_create(0xd192e819, 0xd6ef5218), X64Word_create(0xd6990624, 0x5565a910), X64Word_create(0xf40e3585, 0x5771202a), X64Word_create(0x106aa070, 0x32bbd1b8), X64Word_create(0x19a4c116, 0xb8d2d0c8), X64Word_create(0x1e376c08, 0x5141ab53), X64Word_create(0x2748774c, 0xdf8eeb99), X64Word_create(0x34b0bcb5, 0xe19b48a8), X64Word_create(0x391c0cb3, 0xc5c95a63), X64Word_create(0x4ed8aa4a, 0xe3418acb), X64Word_create(0x5b9cca4f, 0x7763e373), X64Word_create(0x682e6ff3, 0xd6b2b8a3), X64Word_create(0x748f82ee, 0x5defb2fc), X64Word_create(0x78a5636f, 0x43172f60), X64Word_create(0x84c87814, 0xa1f0ab72), X64Word_create(0x8cc70208, 0x1a6439ec), X64Word_create(0x90befffa, 0x23631e28), X64Word_create(0xa4506ceb, 0xde82bde9), X64Word_create(0xbef9a3f7, 0xb2c67915), X64Word_create(0xc67178f2, 0xe372532b), X64Word_create(0xca273ece, 0xea26619c), X64Word_create(0xd186b8c7, 0x21c0c207), X64Word_create(0xeada7dd6, 0xcde0eb1e), X64Word_create(0xf57d4f7f, 0xee6ed178), X64Word_create(0x06f067aa, 0x72176fba), X64Word_create(0x0a637dc5, 0xa2c898a6), X64Word_create(0x113f9804, 0xbef90dae), X64Word_create(0x1b710b35, 0x131c471b), X64Word_create(0x28db77f5, 0x23047d84), X64Word_create(0x32caab7b, 0x40c72493), X64Word_create(0x3c9ebe0a, 0x15c9bebc), X64Word_create(0x431d67c4, 0x9c100d4c), X64Word_create(0x4cc5d4be, 0xcb3e42b6), X64Word_create(0x597f299c, 0xfc657e2a), X64Word_create(0x5fcb6fab, 0x3ad6faec), X64Word_create(0x6c44198c, 0x4a475817)]; // Reusable objects

          var W = [];

          (function () {
            for (var i = 0; i < 80; i++) {
              W[i] = X64Word_create();
            }
          })();
          /**
           * SHA-512 hash algorithm.
           */


          var SHA512 = C_algo.SHA512 = Hasher.extend({
            _doReset: function _doReset() {
              this._hash = new X64WordArray.init([new X64Word.init(0x6a09e667, 0xf3bcc908), new X64Word.init(0xbb67ae85, 0x84caa73b), new X64Word.init(0x3c6ef372, 0xfe94f82b), new X64Word.init(0xa54ff53a, 0x5f1d36f1), new X64Word.init(0x510e527f, 0xade682d1), new X64Word.init(0x9b05688c, 0x2b3e6c1f), new X64Word.init(0x1f83d9ab, 0xfb41bd6b), new X64Word.init(0x5be0cd19, 0x137e2179)]);
            },
            _doProcessBlock: function _doProcessBlock(M, offset) {
              // Shortcuts
              var H = this._hash.words;
              var H0 = H[0];
              var H1 = H[1];
              var H2 = H[2];
              var H3 = H[3];
              var H4 = H[4];
              var H5 = H[5];
              var H6 = H[6];
              var H7 = H[7];
              var H0h = H0.high;
              var H0l = H0.low;
              var H1h = H1.high;
              var H1l = H1.low;
              var H2h = H2.high;
              var H2l = H2.low;
              var H3h = H3.high;
              var H3l = H3.low;
              var H4h = H4.high;
              var H4l = H4.low;
              var H5h = H5.high;
              var H5l = H5.low;
              var H6h = H6.high;
              var H6l = H6.low;
              var H7h = H7.high;
              var H7l = H7.low; // Working variables

              var ah = H0h;
              var al = H0l;
              var bh = H1h;
              var bl = H1l;
              var ch = H2h;
              var cl = H2l;
              var dh = H3h;
              var dl = H3l;
              var eh = H4h;
              var el = H4l;
              var fh = H5h;
              var fl = H5l;
              var gh = H6h;
              var gl = H6l;
              var hh = H7h;
              var hl = H7l; // Rounds

              for (var i = 0; i < 80; i++) {
                // Shortcut
                var Wi = W[i]; // Extend message

                if (i < 16) {
                  var Wih = Wi.high = M[offset + i * 2] | 0;
                  var Wil = Wi.low = M[offset + i * 2 + 1] | 0;
                } else {
                  // Gamma0
                  var gamma0x = W[i - 15];
                  var gamma0xh = gamma0x.high;
                  var gamma0xl = gamma0x.low;
                  var gamma0h = (gamma0xh >>> 1 | gamma0xl << 31) ^ (gamma0xh >>> 8 | gamma0xl << 24) ^ gamma0xh >>> 7;
                  var gamma0l = (gamma0xl >>> 1 | gamma0xh << 31) ^ (gamma0xl >>> 8 | gamma0xh << 24) ^ (gamma0xl >>> 7 | gamma0xh << 25); // Gamma1

                  var gamma1x = W[i - 2];
                  var gamma1xh = gamma1x.high;
                  var gamma1xl = gamma1x.low;
                  var gamma1h = (gamma1xh >>> 19 | gamma1xl << 13) ^ (gamma1xh << 3 | gamma1xl >>> 29) ^ gamma1xh >>> 6;
                  var gamma1l = (gamma1xl >>> 19 | gamma1xh << 13) ^ (gamma1xl << 3 | gamma1xh >>> 29) ^ (gamma1xl >>> 6 | gamma1xh << 26); // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]

                  var Wi7 = W[i - 7];
                  var Wi7h = Wi7.high;
                  var Wi7l = Wi7.low;
                  var Wi16 = W[i - 16];
                  var Wi16h = Wi16.high;
                  var Wi16l = Wi16.low;
                  var Wil = gamma0l + Wi7l;
                  var Wih = gamma0h + Wi7h + (Wil >>> 0 < gamma0l >>> 0 ? 1 : 0);
                  var Wil = Wil + gamma1l;
                  var Wih = Wih + gamma1h + (Wil >>> 0 < gamma1l >>> 0 ? 1 : 0);
                  var Wil = Wil + Wi16l;
                  var Wih = Wih + Wi16h + (Wil >>> 0 < Wi16l >>> 0 ? 1 : 0);
                  Wi.high = Wih;
                  Wi.low = Wil;
                }

                var chh = eh & fh ^ ~eh & gh;
                var chl = el & fl ^ ~el & gl;
                var majh = ah & bh ^ ah & ch ^ bh & ch;
                var majl = al & bl ^ al & cl ^ bl & cl;
                var sigma0h = (ah >>> 28 | al << 4) ^ (ah << 30 | al >>> 2) ^ (ah << 25 | al >>> 7);
                var sigma0l = (al >>> 28 | ah << 4) ^ (al << 30 | ah >>> 2) ^ (al << 25 | ah >>> 7);
                var sigma1h = (eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9);
                var sigma1l = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9); // t1 = h + sigma1 + ch + K[i] + W[i]

                var Ki = K[i];
                var Kih = Ki.high;
                var Kil = Ki.low;
                var t1l = hl + sigma1l;
                var t1h = hh + sigma1h + (t1l >>> 0 < hl >>> 0 ? 1 : 0);
                var t1l = t1l + chl;
                var t1h = t1h + chh + (t1l >>> 0 < chl >>> 0 ? 1 : 0);
                var t1l = t1l + Kil;
                var t1h = t1h + Kih + (t1l >>> 0 < Kil >>> 0 ? 1 : 0);
                var t1l = t1l + Wil;
                var t1h = t1h + Wih + (t1l >>> 0 < Wil >>> 0 ? 1 : 0); // t2 = sigma0 + maj

                var t2l = sigma0l + majl;
                var t2h = sigma0h + majh + (t2l >>> 0 < sigma0l >>> 0 ? 1 : 0); // Update working variables

                hh = gh;
                hl = gl;
                gh = fh;
                gl = fl;
                fh = eh;
                fl = el;
                el = dl + t1l | 0;
                eh = dh + t1h + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
                dh = ch;
                dl = cl;
                ch = bh;
                cl = bl;
                bh = ah;
                bl = al;
                al = t1l + t2l | 0;
                ah = t1h + t2h + (al >>> 0 < t1l >>> 0 ? 1 : 0) | 0;
              } // Intermediate hash value


              H0l = H0.low = H0l + al;
              H0.high = H0h + ah + (H0l >>> 0 < al >>> 0 ? 1 : 0);
              H1l = H1.low = H1l + bl;
              H1.high = H1h + bh + (H1l >>> 0 < bl >>> 0 ? 1 : 0);
              H2l = H2.low = H2l + cl;
              H2.high = H2h + ch + (H2l >>> 0 < cl >>> 0 ? 1 : 0);
              H3l = H3.low = H3l + dl;
              H3.high = H3h + dh + (H3l >>> 0 < dl >>> 0 ? 1 : 0);
              H4l = H4.low = H4l + el;
              H4.high = H4h + eh + (H4l >>> 0 < el >>> 0 ? 1 : 0);
              H5l = H5.low = H5l + fl;
              H5.high = H5h + fh + (H5l >>> 0 < fl >>> 0 ? 1 : 0);
              H6l = H6.low = H6l + gl;
              H6.high = H6h + gh + (H6l >>> 0 < gl >>> 0 ? 1 : 0);
              H7l = H7.low = H7l + hl;
              H7.high = H7h + hh + (H7l >>> 0 < hl >>> 0 ? 1 : 0);
            },
            _doFinalize: function _doFinalize() {
              // Shortcuts
              var data = this._data;
              var dataWords = data.words;
              var nBitsTotal = this._nDataBytes * 8;
              var nBitsLeft = data.sigBytes * 8; // Add padding

              dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;
              dataWords[(nBitsLeft + 128 >>> 10 << 5) + 30] = Math.floor(nBitsTotal / 0x100000000);
              dataWords[(nBitsLeft + 128 >>> 10 << 5) + 31] = nBitsTotal;
              data.sigBytes = dataWords.length * 4; // Hash final blocks

              this._process(); // Convert hash to 32-bit word array before returning


              var hash = this._hash.toX32(); // Return final computed hash


              return hash;
            },
            clone: function clone() {
              var clone = Hasher.clone.call(this);
              clone._hash = this._hash.clone();
              return clone;
            },
            blockSize: 1024 / 32
          });
          /**
           * Shortcut function to the hasher's object interface.
           *
           * @param {WordArray|string} message The message to hash.
           *
           * @return {WordArray} The hash.
           *
           * @static
           *
           * @example
           *
           *     var hash = CryptoJS.SHA512('message');
           *     var hash = CryptoJS.SHA512(wordArray);
           */

          C.SHA512 = Hasher._createHelper(SHA512);
          /**
           * Shortcut function to the HMAC's object interface.
           *
           * @param {WordArray|string} message The message to hash.
           * @param {WordArray|string} key The secret key.
           *
           * @return {WordArray} The HMAC.
           *
           * @static
           *
           * @example
           *
           *     var hmac = CryptoJS.HmacSHA512(message, key);
           */

          C.HmacSHA512 = Hasher._createHmacHelper(SHA512);
        })();

        return CryptoJS.SHA512;
      });
      /***/

    },
    /* 250 */

    /***/
    function (module) {
      module.exports = JSON.parse("[[\"a140\",\"\",62],[\"a180\",\"\",32],[\"a240\",\"\",62],[\"a280\",\"\",32],[\"a2ab\",\"\",5],[\"a2e3\",\"€\"],[\"a2ef\",\"\"],[\"a2fd\",\"\"],[\"a340\",\"\",62],[\"a380\",\"\",31,\"　\"],[\"a440\",\"\",62],[\"a480\",\"\",32],[\"a4f4\",\"\",10],[\"a540\",\"\",62],[\"a580\",\"\",32],[\"a5f7\",\"\",7],[\"a640\",\"\",62],[\"a680\",\"\",32],[\"a6b9\",\"\",7],[\"a6d9\",\"\",6],[\"a6ec\",\"\"],[\"a6f3\",\"\"],[\"a6f6\",\"\",8],[\"a740\",\"\",62],[\"a780\",\"\",32],[\"a7c2\",\"\",14],[\"a7f2\",\"\",12],[\"a896\",\"\",10],[\"a8bc\",\"ḿ\"],[\"a8bf\",\"ǹ\"],[\"a8c1\",\"\"],[\"a8ea\",\"\",20],[\"a958\",\"\"],[\"a95b\",\"\"],[\"a95d\",\"\"],[\"a989\",\"〾⿰\",11],[\"a997\",\"\",12],[\"a9f0\",\"\",14],[\"aaa1\",\"\",93],[\"aba1\",\"\",93],[\"aca1\",\"\",93],[\"ada1\",\"\",93],[\"aea1\",\"\",93],[\"afa1\",\"\",93],[\"d7fa\",\"\",4],[\"f8a1\",\"\",93],[\"f9a1\",\"\",93],[\"faa1\",\"\",93],[\"fba1\",\"\",93],[\"fca1\",\"\",93],[\"fda1\",\"\",93],[\"fe50\",\"⺁⺄㑳㑇⺈⺋㖞㘚㘎⺌⺗㥮㤘㧏㧟㩳㧐㭎㱮㳠⺧⺪䁖䅟⺮䌷⺳⺶⺷䎱䎬⺻䏝䓖䙡䙌\"],[\"fe80\",\"䜣䜩䝼䞍⻊䥇䥺䥽䦂䦃䦅䦆䦟䦛䦷䦶䲣䲟䲠䲡䱷䲢䴓\",6,\"䶮\",93],[\"8135f437\",\"\"]]");
      /***/
    },
    /* 251 */

    /***/
    function (module) {
      module.exports = JSON.parse("[[\"0\",\"\\u0000\",127],[\"a140\",\"\u3000\uFF0C\u3001\u3002\uFF0E\u2027\uFF1B\uFF1A\uFF1F\uFF01\uFE30\u2026\u2025\uFE50\uFE51\uFE52\xB7\uFE54\uFE55\uFE56\uFE57\uFF5C\u2013\uFE31\u2014\uFE33\u2574\uFE34\uFE4F\uFF08\uFF09\uFE35\uFE36\uFF5B\uFF5D\uFE37\uFE38\u3014\u3015\uFE39\uFE3A\u3010\u3011\uFE3B\uFE3C\u300A\u300B\uFE3D\uFE3E\u3008\u3009\uFE3F\uFE40\u300C\u300D\uFE41\uFE42\u300E\u300F\uFE43\uFE44\uFE59\uFE5A\"],[\"a1a1\",\"\uFE5B\uFE5C\uFE5D\uFE5E\u2018\u2019\u201C\u201D\u301D\u301E\u2035\u2032\uFF03\uFF06\uFF0A\u203B\xA7\u3003\u25CB\u25CF\u25B3\u25B2\u25CE\u2606\u2605\u25C7\u25C6\u25A1\u25A0\u25BD\u25BC\u32A3\u2105\xAF\uFFE3\uFF3F\u02CD\uFE49\uFE4A\uFE4D\uFE4E\uFE4B\uFE4C\uFE5F\uFE60\uFE61\uFF0B\uFF0D\xD7\xF7\xB1\u221A\uFF1C\uFF1E\uFF1D\u2266\u2267\u2260\u221E\u2252\u2261\uFE62\",4,\"\uFF5E\u2229\u222A\u22A5\u2220\u221F\u22BF\u33D2\u33D1\u222B\u222E\u2235\u2234\u2640\u2642\u2295\u2299\u2191\u2193\u2190\u2192\u2196\u2197\u2199\u2198\u2225\u2223\uFF0F\"],[\"a240\",\"\uFF3C\u2215\uFE68\uFF04\uFFE5\u3012\uFFE0\uFFE1\uFF05\uFF20\u2103\u2109\uFE69\uFE6A\uFE6B\u33D5\u339C\u339D\u339E\u33CE\u33A1\u338E\u338F\u33C4\xB0\u5159\u515B\u515E\u515D\u5161\u5163\u55E7\u74E9\u7CCE\u2581\",7,\"\u258F\u258E\u258D\u258C\u258B\u258A\u2589\u253C\u2534\u252C\u2524\u251C\u2594\u2500\u2502\u2595\u250C\u2510\u2514\u2518\u256D\"],[\"a2a1\",\"\u256E\u2570\u256F\u2550\u255E\u256A\u2561\u25E2\u25E3\u25E5\u25E4\u2571\u2572\u2573\uFF10\",9,\"\u2160\",9,\"\u3021\",8,\"\u5341\u5344\u5345\uFF21\",25,\"\uFF41\",21],[\"a340\",\"\uFF57\uFF58\uFF59\uFF5A\u0391\",16,\"\u03A3\",6,\"\u03B1\",16,\"\u03C3\",6,\"\u3105\",10],[\"a3a1\",\"\u3110\",25,\"\u02D9\u02C9\u02CA\u02C7\u02CB\"],[\"a3e1\",\"\u20AC\"],[\"a440\",\"\u4E00\u4E59\u4E01\u4E03\u4E43\u4E5D\u4E86\u4E8C\u4EBA\u513F\u5165\u516B\u51E0\u5200\u5201\u529B\u5315\u5341\u535C\u53C8\u4E09\u4E0B\u4E08\u4E0A\u4E2B\u4E38\u51E1\u4E45\u4E48\u4E5F\u4E5E\u4E8E\u4EA1\u5140\u5203\u52FA\u5343\u53C9\u53E3\u571F\u58EB\u5915\u5927\u5973\u5B50\u5B51\u5B53\u5BF8\u5C0F\u5C22\u5C38\u5C71\u5DDD\u5DE5\u5DF1\u5DF2\u5DF3\u5DFE\u5E72\u5EFE\u5F0B\u5F13\u624D\"],[\"a4a1\",\"\u4E11\u4E10\u4E0D\u4E2D\u4E30\u4E39\u4E4B\u5C39\u4E88\u4E91\u4E95\u4E92\u4E94\u4EA2\u4EC1\u4EC0\u4EC3\u4EC6\u4EC7\u4ECD\u4ECA\u4ECB\u4EC4\u5143\u5141\u5167\u516D\u516E\u516C\u5197\u51F6\u5206\u5207\u5208\u52FB\u52FE\u52FF\u5316\u5339\u5348\u5347\u5345\u535E\u5384\u53CB\u53CA\u53CD\u58EC\u5929\u592B\u592A\u592D\u5B54\u5C11\u5C24\u5C3A\u5C6F\u5DF4\u5E7B\u5EFF\u5F14\u5F15\u5FC3\u6208\u6236\u624B\u624E\u652F\u6587\u6597\u65A4\u65B9\u65E5\u66F0\u6708\u6728\u6B20\u6B62\u6B79\u6BCB\u6BD4\u6BDB\u6C0F\u6C34\u706B\u722A\u7236\u723B\u7247\u7259\u725B\u72AC\u738B\u4E19\"],[\"a540\",\"\u4E16\u4E15\u4E14\u4E18\u4E3B\u4E4D\u4E4F\u4E4E\u4EE5\u4ED8\u4ED4\u4ED5\u4ED6\u4ED7\u4EE3\u4EE4\u4ED9\u4EDE\u5145\u5144\u5189\u518A\u51AC\u51F9\u51FA\u51F8\u520A\u52A0\u529F\u5305\u5306\u5317\u531D\u4EDF\u534A\u5349\u5361\u5360\u536F\u536E\u53BB\u53EF\u53E4\u53F3\u53EC\u53EE\u53E9\u53E8\u53FC\u53F8\u53F5\u53EB\u53E6\u53EA\u53F2\u53F1\u53F0\u53E5\u53ED\u53FB\u56DB\u56DA\u5916\"],[\"a5a1\",\"\u592E\u5931\u5974\u5976\u5B55\u5B83\u5C3C\u5DE8\u5DE7\u5DE6\u5E02\u5E03\u5E73\u5E7C\u5F01\u5F18\u5F17\u5FC5\u620A\u6253\u6254\u6252\u6251\u65A5\u65E6\u672E\u672C\u672A\u672B\u672D\u6B63\u6BCD\u6C11\u6C10\u6C38\u6C41\u6C40\u6C3E\u72AF\u7384\u7389\u74DC\u74E6\u7518\u751F\u7528\u7529\u7530\u7531\u7532\u7533\u758B\u767D\u76AE\u76BF\u76EE\u77DB\u77E2\u77F3\u793A\u79BE\u7A74\u7ACB\u4E1E\u4E1F\u4E52\u4E53\u4E69\u4E99\u4EA4\u4EA6\u4EA5\u4EFF\u4F09\u4F19\u4F0A\u4F15\u4F0D\u4F10\u4F11\u4F0F\u4EF2\u4EF6\u4EFB\u4EF0\u4EF3\u4EFD\u4F01\u4F0B\u5149\u5147\u5146\u5148\u5168\"],[\"a640\",\"\u5171\u518D\u51B0\u5217\u5211\u5212\u520E\u5216\u52A3\u5308\u5321\u5320\u5370\u5371\u5409\u540F\u540C\u540A\u5410\u5401\u540B\u5404\u5411\u540D\u5408\u5403\u540E\u5406\u5412\u56E0\u56DE\u56DD\u5733\u5730\u5728\u572D\u572C\u572F\u5729\u5919\u591A\u5937\u5938\u5984\u5978\u5983\u597D\u5979\u5982\u5981\u5B57\u5B58\u5B87\u5B88\u5B85\u5B89\u5BFA\u5C16\u5C79\u5DDE\u5E06\u5E76\u5E74\"],[\"a6a1\",\"\u5F0F\u5F1B\u5FD9\u5FD6\u620E\u620C\u620D\u6210\u6263\u625B\u6258\u6536\u65E9\u65E8\u65EC\u65ED\u66F2\u66F3\u6709\u673D\u6734\u6731\u6735\u6B21\u6B64\u6B7B\u6C16\u6C5D\u6C57\u6C59\u6C5F\u6C60\u6C50\u6C55\u6C61\u6C5B\u6C4D\u6C4E\u7070\u725F\u725D\u767E\u7AF9\u7C73\u7CF8\u7F36\u7F8A\u7FBD\u8001\u8003\u800C\u8012\u8033\u807F\u8089\u808B\u808C\u81E3\u81EA\u81F3\u81FC\u820C\u821B\u821F\u826E\u8272\u827E\u866B\u8840\u884C\u8863\u897F\u9621\u4E32\u4EA8\u4F4D\u4F4F\u4F47\u4F57\u4F5E\u4F34\u4F5B\u4F55\u4F30\u4F50\u4F51\u4F3D\u4F3A\u4F38\u4F43\u4F54\u4F3C\u4F46\u4F63\"],[\"a740\",\"\u4F5C\u4F60\u4F2F\u4F4E\u4F36\u4F59\u4F5D\u4F48\u4F5A\u514C\u514B\u514D\u5175\u51B6\u51B7\u5225\u5224\u5229\u522A\u5228\u52AB\u52A9\u52AA\u52AC\u5323\u5373\u5375\u541D\u542D\u541E\u543E\u5426\u544E\u5427\u5446\u5443\u5433\u5448\u5442\u541B\u5429\u544A\u5439\u543B\u5438\u542E\u5435\u5436\u5420\u543C\u5440\u5431\u542B\u541F\u542C\u56EA\u56F0\u56E4\u56EB\u574A\u5751\u5740\u574D\"],[\"a7a1\",\"\u5747\u574E\u573E\u5750\u574F\u573B\u58EF\u593E\u599D\u5992\u59A8\u599E\u59A3\u5999\u5996\u598D\u59A4\u5993\u598A\u59A5\u5B5D\u5B5C\u5B5A\u5B5B\u5B8C\u5B8B\u5B8F\u5C2C\u5C40\u5C41\u5C3F\u5C3E\u5C90\u5C91\u5C94\u5C8C\u5DEB\u5E0C\u5E8F\u5E87\u5E8A\u5EF7\u5F04\u5F1F\u5F64\u5F62\u5F77\u5F79\u5FD8\u5FCC\u5FD7\u5FCD\u5FF1\u5FEB\u5FF8\u5FEA\u6212\u6211\u6284\u6297\u6296\u6280\u6276\u6289\u626D\u628A\u627C\u627E\u6279\u6273\u6292\u626F\u6298\u626E\u6295\u6293\u6291\u6286\u6539\u653B\u6538\u65F1\u66F4\u675F\u674E\u674F\u6750\u6751\u675C\u6756\u675E\u6749\u6746\u6760\"],[\"a840\",\"\u6753\u6757\u6B65\u6BCF\u6C42\u6C5E\u6C99\u6C81\u6C88\u6C89\u6C85\u6C9B\u6C6A\u6C7A\u6C90\u6C70\u6C8C\u6C68\u6C96\u6C92\u6C7D\u6C83\u6C72\u6C7E\u6C74\u6C86\u6C76\u6C8D\u6C94\u6C98\u6C82\u7076\u707C\u707D\u7078\u7262\u7261\u7260\u72C4\u72C2\u7396\u752C\u752B\u7537\u7538\u7682\u76EF\u77E3\u79C1\u79C0\u79BF\u7A76\u7CFB\u7F55\u8096\u8093\u809D\u8098\u809B\u809A\u80B2\u826F\u8292\"],[\"a8a1\",\"\u828B\u828D\u898B\u89D2\u8A00\u8C37\u8C46\u8C55\u8C9D\u8D64\u8D70\u8DB3\u8EAB\u8ECA\u8F9B\u8FB0\u8FC2\u8FC6\u8FC5\u8FC4\u5DE1\u9091\u90A2\u90AA\u90A6\u90A3\u9149\u91C6\u91CC\u9632\u962E\u9631\u962A\u962C\u4E26\u4E56\u4E73\u4E8B\u4E9B\u4E9E\u4EAB\u4EAC\u4F6F\u4F9D\u4F8D\u4F73\u4F7F\u4F6C\u4F9B\u4F8B\u4F86\u4F83\u4F70\u4F75\u4F88\u4F69\u4F7B\u4F96\u4F7E\u4F8F\u4F91\u4F7A\u5154\u5152\u5155\u5169\u5177\u5176\u5178\u51BD\u51FD\u523B\u5238\u5237\u523A\u5230\u522E\u5236\u5241\u52BE\u52BB\u5352\u5354\u5353\u5351\u5366\u5377\u5378\u5379\u53D6\u53D4\u53D7\u5473\u5475\"],[\"a940\",\"\u5496\u5478\u5495\u5480\u547B\u5477\u5484\u5492\u5486\u547C\u5490\u5471\u5476\u548C\u549A\u5462\u5468\u548B\u547D\u548E\u56FA\u5783\u5777\u576A\u5769\u5761\u5766\u5764\u577C\u591C\u5949\u5947\u5948\u5944\u5954\u59BE\u59BB\u59D4\u59B9\u59AE\u59D1\u59C6\u59D0\u59CD\u59CB\u59D3\u59CA\u59AF\u59B3\u59D2\u59C5\u5B5F\u5B64\u5B63\u5B97\u5B9A\u5B98\u5B9C\u5B99\u5B9B\u5C1A\u5C48\u5C45\"],[\"a9a1\",\"\u5C46\u5CB7\u5CA1\u5CB8\u5CA9\u5CAB\u5CB1\u5CB3\u5E18\u5E1A\u5E16\u5E15\u5E1B\u5E11\u5E78\u5E9A\u5E97\u5E9C\u5E95\u5E96\u5EF6\u5F26\u5F27\u5F29\u5F80\u5F81\u5F7F\u5F7C\u5FDD\u5FE0\u5FFD\u5FF5\u5FFF\u600F\u6014\u602F\u6035\u6016\u602A\u6015\u6021\u6027\u6029\u602B\u601B\u6216\u6215\u623F\u623E\u6240\u627F\u62C9\u62CC\u62C4\u62BF\u62C2\u62B9\u62D2\u62DB\u62AB\u62D3\u62D4\u62CB\u62C8\u62A8\u62BD\u62BC\u62D0\u62D9\u62C7\u62CD\u62B5\u62DA\u62B1\u62D8\u62D6\u62D7\u62C6\u62AC\u62CE\u653E\u65A7\u65BC\u65FA\u6614\u6613\u660C\u6606\u6602\u660E\u6600\u660F\u6615\u660A\"],[\"aa40\",\"\u6607\u670D\u670B\u676D\u678B\u6795\u6771\u679C\u6773\u6777\u6787\u679D\u6797\u676F\u6770\u677F\u6789\u677E\u6790\u6775\u679A\u6793\u677C\u676A\u6772\u6B23\u6B66\u6B67\u6B7F\u6C13\u6C1B\u6CE3\u6CE8\u6CF3\u6CB1\u6CCC\u6CE5\u6CB3\u6CBD\u6CBE\u6CBC\u6CE2\u6CAB\u6CD5\u6CD3\u6CB8\u6CC4\u6CB9\u6CC1\u6CAE\u6CD7\u6CC5\u6CF1\u6CBF\u6CBB\u6CE1\u6CDB\u6CCA\u6CAC\u6CEF\u6CDC\u6CD6\u6CE0\"],[\"aaa1\",\"\u7095\u708E\u7092\u708A\u7099\u722C\u722D\u7238\u7248\u7267\u7269\u72C0\u72CE\u72D9\u72D7\u72D0\u73A9\u73A8\u739F\u73AB\u73A5\u753D\u759D\u7599\u759A\u7684\u76C2\u76F2\u76F4\u77E5\u77FD\u793E\u7940\u7941\u79C9\u79C8\u7A7A\u7A79\u7AFA\u7CFE\u7F54\u7F8C\u7F8B\u8005\u80BA\u80A5\u80A2\u80B1\u80A1\u80AB\u80A9\u80B4\u80AA\u80AF\u81E5\u81FE\u820D\u82B3\u829D\u8299\u82AD\u82BD\u829F\u82B9\u82B1\u82AC\u82A5\u82AF\u82B8\u82A3\u82B0\u82BE\u82B7\u864E\u8671\u521D\u8868\u8ECB\u8FCE\u8FD4\u8FD1\u90B5\u90B8\u90B1\u90B6\u91C7\u91D1\u9577\u9580\u961C\u9640\u963F\u963B\u9644\"],[\"ab40\",\"\u9642\u96B9\u96E8\u9752\u975E\u4E9F\u4EAD\u4EAE\u4FE1\u4FB5\u4FAF\u4FBF\u4FE0\u4FD1\u4FCF\u4FDD\u4FC3\u4FB6\u4FD8\u4FDF\u4FCA\u4FD7\u4FAE\u4FD0\u4FC4\u4FC2\u4FDA\u4FCE\u4FDE\u4FB7\u5157\u5192\u5191\u51A0\u524E\u5243\u524A\u524D\u524C\u524B\u5247\u52C7\u52C9\u52C3\u52C1\u530D\u5357\u537B\u539A\u53DB\u54AC\u54C0\u54A8\u54CE\u54C9\u54B8\u54A6\u54B3\u54C7\u54C2\u54BD\u54AA\u54C1\"],[\"aba1\",\"\u54C4\u54C8\u54AF\u54AB\u54B1\u54BB\u54A9\u54A7\u54BF\u56FF\u5782\u578B\u57A0\u57A3\u57A2\u57CE\u57AE\u5793\u5955\u5951\u594F\u594E\u5950\u59DC\u59D8\u59FF\u59E3\u59E8\u5A03\u59E5\u59EA\u59DA\u59E6\u5A01\u59FB\u5B69\u5BA3\u5BA6\u5BA4\u5BA2\u5BA5\u5C01\u5C4E\u5C4F\u5C4D\u5C4B\u5CD9\u5CD2\u5DF7\u5E1D\u5E25\u5E1F\u5E7D\u5EA0\u5EA6\u5EFA\u5F08\u5F2D\u5F65\u5F88\u5F85\u5F8A\u5F8B\u5F87\u5F8C\u5F89\u6012\u601D\u6020\u6025\u600E\u6028\u604D\u6070\u6068\u6062\u6046\u6043\u606C\u606B\u606A\u6064\u6241\u62DC\u6316\u6309\u62FC\u62ED\u6301\u62EE\u62FD\u6307\u62F1\u62F7\"],[\"ac40\",\"\u62EF\u62EC\u62FE\u62F4\u6311\u6302\u653F\u6545\u65AB\u65BD\u65E2\u6625\u662D\u6620\u6627\u662F\u661F\u6628\u6631\u6624\u66F7\u67FF\u67D3\u67F1\u67D4\u67D0\u67EC\u67B6\u67AF\u67F5\u67E9\u67EF\u67C4\u67D1\u67B4\u67DA\u67E5\u67B8\u67CF\u67DE\u67F3\u67B0\u67D9\u67E2\u67DD\u67D2\u6B6A\u6B83\u6B86\u6BB5\u6BD2\u6BD7\u6C1F\u6CC9\u6D0B\u6D32\u6D2A\u6D41\u6D25\u6D0C\u6D31\u6D1E\u6D17\"],[\"aca1\",\"\u6D3B\u6D3D\u6D3E\u6D36\u6D1B\u6CF5\u6D39\u6D27\u6D38\u6D29\u6D2E\u6D35\u6D0E\u6D2B\u70AB\u70BA\u70B3\u70AC\u70AF\u70AD\u70B8\u70AE\u70A4\u7230\u7272\u726F\u7274\u72E9\u72E0\u72E1\u73B7\u73CA\u73BB\u73B2\u73CD\u73C0\u73B3\u751A\u752D\u754F\u754C\u754E\u754B\u75AB\u75A4\u75A5\u75A2\u75A3\u7678\u7686\u7687\u7688\u76C8\u76C6\u76C3\u76C5\u7701\u76F9\u76F8\u7709\u770B\u76FE\u76FC\u7707\u77DC\u7802\u7814\u780C\u780D\u7946\u7949\u7948\u7947\u79B9\u79BA\u79D1\u79D2\u79CB\u7A7F\u7A81\u7AFF\u7AFD\u7C7D\u7D02\u7D05\u7D00\u7D09\u7D07\u7D04\u7D06\u7F38\u7F8E\u7FBF\u8004\"],[\"ad40\",\"\u8010\u800D\u8011\u8036\u80D6\u80E5\u80DA\u80C3\u80C4\u80CC\u80E1\u80DB\u80CE\u80DE\u80E4\u80DD\u81F4\u8222\u82E7\u8303\u8305\u82E3\u82DB\u82E6\u8304\u82E5\u8302\u8309\u82D2\u82D7\u82F1\u8301\u82DC\u82D4\u82D1\u82DE\u82D3\u82DF\u82EF\u8306\u8650\u8679\u867B\u867A\u884D\u886B\u8981\u89D4\u8A08\u8A02\u8A03\u8C9E\u8CA0\u8D74\u8D73\u8DB4\u8ECD\u8ECC\u8FF0\u8FE6\u8FE2\u8FEA\u8FE5\"],[\"ada1\",\"\u8FED\u8FEB\u8FE4\u8FE8\u90CA\u90CE\u90C1\u90C3\u914B\u914A\u91CD\u9582\u9650\u964B\u964C\u964D\u9762\u9769\u97CB\u97ED\u97F3\u9801\u98A8\u98DB\u98DF\u9996\u9999\u4E58\u4EB3\u500C\u500D\u5023\u4FEF\u5026\u5025\u4FF8\u5029\u5016\u5006\u503C\u501F\u501A\u5012\u5011\u4FFA\u5000\u5014\u5028\u4FF1\u5021\u500B\u5019\u5018\u4FF3\u4FEE\u502D\u502A\u4FFE\u502B\u5009\u517C\u51A4\u51A5\u51A2\u51CD\u51CC\u51C6\u51CB\u5256\u525C\u5254\u525B\u525D\u532A\u537F\u539F\u539D\u53DF\u54E8\u5510\u5501\u5537\u54FC\u54E5\u54F2\u5506\u54FA\u5514\u54E9\u54ED\u54E1\u5509\u54EE\u54EA\"],[\"ae40\",\"\u54E6\u5527\u5507\u54FD\u550F\u5703\u5704\u57C2\u57D4\u57CB\u57C3\u5809\u590F\u5957\u5958\u595A\u5A11\u5A18\u5A1C\u5A1F\u5A1B\u5A13\u59EC\u5A20\u5A23\u5A29\u5A25\u5A0C\u5A09\u5B6B\u5C58\u5BB0\u5BB3\u5BB6\u5BB4\u5BAE\u5BB5\u5BB9\u5BB8\u5C04\u5C51\u5C55\u5C50\u5CED\u5CFD\u5CFB\u5CEA\u5CE8\u5CF0\u5CF6\u5D01\u5CF4\u5DEE\u5E2D\u5E2B\u5EAB\u5EAD\u5EA7\u5F31\u5F92\u5F91\u5F90\u6059\"],[\"aea1\",\"\u6063\u6065\u6050\u6055\u606D\u6069\u606F\u6084\u609F\u609A\u608D\u6094\u608C\u6085\u6096\u6247\u62F3\u6308\u62FF\u634E\u633E\u632F\u6355\u6342\u6346\u634F\u6349\u633A\u6350\u633D\u632A\u632B\u6328\u634D\u634C\u6548\u6549\u6599\u65C1\u65C5\u6642\u6649\u664F\u6643\u6652\u664C\u6645\u6641\u66F8\u6714\u6715\u6717\u6821\u6838\u6848\u6846\u6853\u6839\u6842\u6854\u6829\u68B3\u6817\u684C\u6851\u683D\u67F4\u6850\u6840\u683C\u6843\u682A\u6845\u6813\u6818\u6841\u6B8A\u6B89\u6BB7\u6C23\u6C27\u6C28\u6C26\u6C24\u6CF0\u6D6A\u6D95\u6D88\u6D87\u6D66\u6D78\u6D77\u6D59\u6D93\"],[\"af40\",\"\u6D6C\u6D89\u6D6E\u6D5A\u6D74\u6D69\u6D8C\u6D8A\u6D79\u6D85\u6D65\u6D94\u70CA\u70D8\u70E4\u70D9\u70C8\u70CF\u7239\u7279\u72FC\u72F9\u72FD\u72F8\u72F7\u7386\u73ED\u7409\u73EE\u73E0\u73EA\u73DE\u7554\u755D\u755C\u755A\u7559\u75BE\u75C5\u75C7\u75B2\u75B3\u75BD\u75BC\u75B9\u75C2\u75B8\u768B\u76B0\u76CA\u76CD\u76CE\u7729\u771F\u7720\u7728\u77E9\u7830\u7827\u7838\u781D\u7834\u7837\"],[\"afa1\",\"\u7825\u782D\u7820\u781F\u7832\u7955\u7950\u7960\u795F\u7956\u795E\u795D\u7957\u795A\u79E4\u79E3\u79E7\u79DF\u79E6\u79E9\u79D8\u7A84\u7A88\u7AD9\u7B06\u7B11\u7C89\u7D21\u7D17\u7D0B\u7D0A\u7D20\u7D22\u7D14\u7D10\u7D15\u7D1A\u7D1C\u7D0D\u7D19\u7D1B\u7F3A\u7F5F\u7F94\u7FC5\u7FC1\u8006\u8018\u8015\u8019\u8017\u803D\u803F\u80F1\u8102\u80F0\u8105\u80ED\u80F4\u8106\u80F8\u80F3\u8108\u80FD\u810A\u80FC\u80EF\u81ED\u81EC\u8200\u8210\u822A\u822B\u8228\u822C\u82BB\u832B\u8352\u8354\u834A\u8338\u8350\u8349\u8335\u8334\u834F\u8332\u8339\u8336\u8317\u8340\u8331\u8328\u8343\"],[\"b040\",\"\u8654\u868A\u86AA\u8693\u86A4\u86A9\u868C\u86A3\u869C\u8870\u8877\u8881\u8882\u887D\u8879\u8A18\u8A10\u8A0E\u8A0C\u8A15\u8A0A\u8A17\u8A13\u8A16\u8A0F\u8A11\u8C48\u8C7A\u8C79\u8CA1\u8CA2\u8D77\u8EAC\u8ED2\u8ED4\u8ECF\u8FB1\u9001\u9006\u8FF7\u9000\u8FFA\u8FF4\u9003\u8FFD\u9005\u8FF8\u9095\u90E1\u90DD\u90E2\u9152\u914D\u914C\u91D8\u91DD\u91D7\u91DC\u91D9\u9583\u9662\u9663\u9661\"],[\"b0a1\",\"\u965B\u965D\u9664\u9658\u965E\u96BB\u98E2\u99AC\u9AA8\u9AD8\u9B25\u9B32\u9B3C\u4E7E\u507A\u507D\u505C\u5047\u5043\u504C\u505A\u5049\u5065\u5076\u504E\u5055\u5075\u5074\u5077\u504F\u500F\u506F\u506D\u515C\u5195\u51F0\u526A\u526F\u52D2\u52D9\u52D8\u52D5\u5310\u530F\u5319\u533F\u5340\u533E\u53C3\u66FC\u5546\u556A\u5566\u5544\u555E\u5561\u5543\u554A\u5531\u5556\u554F\u5555\u552F\u5564\u5538\u552E\u555C\u552C\u5563\u5533\u5541\u5557\u5708\u570B\u5709\u57DF\u5805\u580A\u5806\u57E0\u57E4\u57FA\u5802\u5835\u57F7\u57F9\u5920\u5962\u5A36\u5A41\u5A49\u5A66\u5A6A\u5A40\"],[\"b140\",\"\u5A3C\u5A62\u5A5A\u5A46\u5A4A\u5B70\u5BC7\u5BC5\u5BC4\u5BC2\u5BBF\u5BC6\u5C09\u5C08\u5C07\u5C60\u5C5C\u5C5D\u5D07\u5D06\u5D0E\u5D1B\u5D16\u5D22\u5D11\u5D29\u5D14\u5D19\u5D24\u5D27\u5D17\u5DE2\u5E38\u5E36\u5E33\u5E37\u5EB7\u5EB8\u5EB6\u5EB5\u5EBE\u5F35\u5F37\u5F57\u5F6C\u5F69\u5F6B\u5F97\u5F99\u5F9E\u5F98\u5FA1\u5FA0\u5F9C\u607F\u60A3\u6089\u60A0\u60A8\u60CB\u60B4\u60E6\u60BD\"],[\"b1a1\",\"\u60C5\u60BB\u60B5\u60DC\u60BC\u60D8\u60D5\u60C6\u60DF\u60B8\u60DA\u60C7\u621A\u621B\u6248\u63A0\u63A7\u6372\u6396\u63A2\u63A5\u6377\u6367\u6398\u63AA\u6371\u63A9\u6389\u6383\u639B\u636B\u63A8\u6384\u6388\u6399\u63A1\u63AC\u6392\u638F\u6380\u637B\u6369\u6368\u637A\u655D\u6556\u6551\u6559\u6557\u555F\u654F\u6558\u6555\u6554\u659C\u659B\u65AC\u65CF\u65CB\u65CC\u65CE\u665D\u665A\u6664\u6668\u6666\u665E\u66F9\u52D7\u671B\u6881\u68AF\u68A2\u6893\u68B5\u687F\u6876\u68B1\u68A7\u6897\u68B0\u6883\u68C4\u68AD\u6886\u6885\u6894\u689D\u68A8\u689F\u68A1\u6882\u6B32\u6BBA\"],[\"b240\",\"\u6BEB\u6BEC\u6C2B\u6D8E\u6DBC\u6DF3\u6DD9\u6DB2\u6DE1\u6DCC\u6DE4\u6DFB\u6DFA\u6E05\u6DC7\u6DCB\u6DAF\u6DD1\u6DAE\u6DDE\u6DF9\u6DB8\u6DF7\u6DF5\u6DC5\u6DD2\u6E1A\u6DB5\u6DDA\u6DEB\u6DD8\u6DEA\u6DF1\u6DEE\u6DE8\u6DC6\u6DC4\u6DAA\u6DEC\u6DBF\u6DE6\u70F9\u7109\u710A\u70FD\u70EF\u723D\u727D\u7281\u731C\u731B\u7316\u7313\u7319\u7387\u7405\u740A\u7403\u7406\u73FE\u740D\u74E0\u74F6\"],[\"b2a1\",\"\u74F7\u751C\u7522\u7565\u7566\u7562\u7570\u758F\u75D4\u75D5\u75B5\u75CA\u75CD\u768E\u76D4\u76D2\u76DB\u7737\u773E\u773C\u7736\u7738\u773A\u786B\u7843\u784E\u7965\u7968\u796D\u79FB\u7A92\u7A95\u7B20\u7B28\u7B1B\u7B2C\u7B26\u7B19\u7B1E\u7B2E\u7C92\u7C97\u7C95\u7D46\u7D43\u7D71\u7D2E\u7D39\u7D3C\u7D40\u7D30\u7D33\u7D44\u7D2F\u7D42\u7D32\u7D31\u7F3D\u7F9E\u7F9A\u7FCC\u7FCE\u7FD2\u801C\u804A\u8046\u812F\u8116\u8123\u812B\u8129\u8130\u8124\u8202\u8235\u8237\u8236\u8239\u838E\u839E\u8398\u8378\u83A2\u8396\u83BD\u83AB\u8392\u838A\u8393\u8389\u83A0\u8377\u837B\u837C\"],[\"b340\",\"\u8386\u83A7\u8655\u5F6A\u86C7\u86C0\u86B6\u86C4\u86B5\u86C6\u86CB\u86B1\u86AF\u86C9\u8853\u889E\u8888\u88AB\u8892\u8896\u888D\u888B\u8993\u898F\u8A2A\u8A1D\u8A23\u8A25\u8A31\u8A2D\u8A1F\u8A1B\u8A22\u8C49\u8C5A\u8CA9\u8CAC\u8CAB\u8CA8\u8CAA\u8CA7\u8D67\u8D66\u8DBE\u8DBA\u8EDB\u8EDF\u9019\u900D\u901A\u9017\u9023\u901F\u901D\u9010\u9015\u901E\u9020\u900F\u9022\u9016\u901B\u9014\"],[\"b3a1\",\"\u90E8\u90ED\u90FD\u9157\u91CE\u91F5\u91E6\u91E3\u91E7\u91ED\u91E9\u9589\u966A\u9675\u9673\u9678\u9670\u9674\u9676\u9677\u966C\u96C0\u96EA\u96E9\u7AE0\u7ADF\u9802\u9803\u9B5A\u9CE5\u9E75\u9E7F\u9EA5\u9EBB\u50A2\u508D\u5085\u5099\u5091\u5080\u5096\u5098\u509A\u6700\u51F1\u5272\u5274\u5275\u5269\u52DE\u52DD\u52DB\u535A\u53A5\u557B\u5580\u55A7\u557C\u558A\u559D\u5598\u5582\u559C\u55AA\u5594\u5587\u558B\u5583\u55B3\u55AE\u559F\u553E\u55B2\u559A\u55BB\u55AC\u55B1\u557E\u5589\u55AB\u5599\u570D\u582F\u582A\u5834\u5824\u5830\u5831\u5821\u581D\u5820\u58F9\u58FA\u5960\"],[\"b440\",\"\u5A77\u5A9A\u5A7F\u5A92\u5A9B\u5AA7\u5B73\u5B71\u5BD2\u5BCC\u5BD3\u5BD0\u5C0A\u5C0B\u5C31\u5D4C\u5D50\u5D34\u5D47\u5DFD\u5E45\u5E3D\u5E40\u5E43\u5E7E\u5ECA\u5EC1\u5EC2\u5EC4\u5F3C\u5F6D\u5FA9\u5FAA\u5FA8\u60D1\u60E1\u60B2\u60B6\u60E0\u611C\u6123\u60FA\u6115\u60F0\u60FB\u60F4\u6168\u60F1\u610E\u60F6\u6109\u6100\u6112\u621F\u6249\u63A3\u638C\u63CF\u63C0\u63E9\u63C9\u63C6\u63CD\"],[\"b4a1\",\"\u63D2\u63E3\u63D0\u63E1\u63D6\u63ED\u63EE\u6376\u63F4\u63EA\u63DB\u6452\u63DA\u63F9\u655E\u6566\u6562\u6563\u6591\u6590\u65AF\u666E\u6670\u6674\u6676\u666F\u6691\u667A\u667E\u6677\u66FE\u66FF\u671F\u671D\u68FA\u68D5\u68E0\u68D8\u68D7\u6905\u68DF\u68F5\u68EE\u68E7\u68F9\u68D2\u68F2\u68E3\u68CB\u68CD\u690D\u6912\u690E\u68C9\u68DA\u696E\u68FB\u6B3E\u6B3A\u6B3D\u6B98\u6B96\u6BBC\u6BEF\u6C2E\u6C2F\u6C2C\u6E2F\u6E38\u6E54\u6E21\u6E32\u6E67\u6E4A\u6E20\u6E25\u6E23\u6E1B\u6E5B\u6E58\u6E24\u6E56\u6E6E\u6E2D\u6E26\u6E6F\u6E34\u6E4D\u6E3A\u6E2C\u6E43\u6E1D\u6E3E\u6ECB\"],[\"b540\",\"\u6E89\u6E19\u6E4E\u6E63\u6E44\u6E72\u6E69\u6E5F\u7119\u711A\u7126\u7130\u7121\u7136\u716E\u711C\u724C\u7284\u7280\u7336\u7325\u7334\u7329\u743A\u742A\u7433\u7422\u7425\u7435\u7436\u7434\u742F\u741B\u7426\u7428\u7525\u7526\u756B\u756A\u75E2\u75DB\u75E3\u75D9\u75D8\u75DE\u75E0\u767B\u767C\u7696\u7693\u76B4\u76DC\u774F\u77ED\u785D\u786C\u786F\u7A0D\u7A08\u7A0B\u7A05\u7A00\u7A98\"],[\"b5a1\",\"\u7A97\u7A96\u7AE5\u7AE3\u7B49\u7B56\u7B46\u7B50\u7B52\u7B54\u7B4D\u7B4B\u7B4F\u7B51\u7C9F\u7CA5\u7D5E\u7D50\u7D68\u7D55\u7D2B\u7D6E\u7D72\u7D61\u7D66\u7D62\u7D70\u7D73\u5584\u7FD4\u7FD5\u800B\u8052\u8085\u8155\u8154\u814B\u8151\u814E\u8139\u8146\u813E\u814C\u8153\u8174\u8212\u821C\u83E9\u8403\u83F8\u840D\u83E0\u83C5\u840B\u83C1\u83EF\u83F1\u83F4\u8457\u840A\u83F0\u840C\u83CC\u83FD\u83F2\u83CA\u8438\u840E\u8404\u83DC\u8407\u83D4\u83DF\u865B\u86DF\u86D9\u86ED\u86D4\u86DB\u86E4\u86D0\u86DE\u8857\u88C1\u88C2\u88B1\u8983\u8996\u8A3B\u8A60\u8A55\u8A5E\u8A3C\u8A41\"],[\"b640\",\"\u8A54\u8A5B\u8A50\u8A46\u8A34\u8A3A\u8A36\u8A56\u8C61\u8C82\u8CAF\u8CBC\u8CB3\u8CBD\u8CC1\u8CBB\u8CC0\u8CB4\u8CB7\u8CB6\u8CBF\u8CB8\u8D8A\u8D85\u8D81\u8DCE\u8DDD\u8DCB\u8DDA\u8DD1\u8DCC\u8DDB\u8DC6\u8EFB\u8EF8\u8EFC\u8F9C\u902E\u9035\u9031\u9038\u9032\u9036\u9102\u90F5\u9109\u90FE\u9163\u9165\u91CF\u9214\u9215\u9223\u9209\u921E\u920D\u9210\u9207\u9211\u9594\u958F\u958B\u9591\"],[\"b6a1\",\"\u9593\u9592\u958E\u968A\u968E\u968B\u967D\u9685\u9686\u968D\u9672\u9684\u96C1\u96C5\u96C4\u96C6\u96C7\u96EF\u96F2\u97CC\u9805\u9806\u9808\u98E7\u98EA\u98EF\u98E9\u98F2\u98ED\u99AE\u99AD\u9EC3\u9ECD\u9ED1\u4E82\u50AD\u50B5\u50B2\u50B3\u50C5\u50BE\u50AC\u50B7\u50BB\u50AF\u50C7\u527F\u5277\u527D\u52DF\u52E6\u52E4\u52E2\u52E3\u532F\u55DF\u55E8\u55D3\u55E6\u55CE\u55DC\u55C7\u55D1\u55E3\u55E4\u55EF\u55DA\u55E1\u55C5\u55C6\u55E5\u55C9\u5712\u5713\u585E\u5851\u5858\u5857\u585A\u5854\u586B\u584C\u586D\u584A\u5862\u5852\u584B\u5967\u5AC1\u5AC9\u5ACC\u5ABE\u5ABD\u5ABC\"],[\"b740\",\"\u5AB3\u5AC2\u5AB2\u5D69\u5D6F\u5E4C\u5E79\u5EC9\u5EC8\u5F12\u5F59\u5FAC\u5FAE\u611A\u610F\u6148\u611F\u60F3\u611B\u60F9\u6101\u6108\u614E\u614C\u6144\u614D\u613E\u6134\u6127\u610D\u6106\u6137\u6221\u6222\u6413\u643E\u641E\u642A\u642D\u643D\u642C\u640F\u641C\u6414\u640D\u6436\u6416\u6417\u6406\u656C\u659F\u65B0\u6697\u6689\u6687\u6688\u6696\u6684\u6698\u668D\u6703\u6994\u696D\"],[\"b7a1\",\"\u695A\u6977\u6960\u6954\u6975\u6930\u6982\u694A\u6968\u696B\u695E\u6953\u6979\u6986\u695D\u6963\u695B\u6B47\u6B72\u6BC0\u6BBF\u6BD3\u6BFD\u6EA2\u6EAF\u6ED3\u6EB6\u6EC2\u6E90\u6E9D\u6EC7\u6EC5\u6EA5\u6E98\u6EBC\u6EBA\u6EAB\u6ED1\u6E96\u6E9C\u6EC4\u6ED4\u6EAA\u6EA7\u6EB4\u714E\u7159\u7169\u7164\u7149\u7167\u715C\u716C\u7166\u714C\u7165\u715E\u7146\u7168\u7156\u723A\u7252\u7337\u7345\u733F\u733E\u746F\u745A\u7455\u745F\u745E\u7441\u743F\u7459\u745B\u745C\u7576\u7578\u7600\u75F0\u7601\u75F2\u75F1\u75FA\u75FF\u75F4\u75F3\u76DE\u76DF\u775B\u776B\u7766\u775E\u7763\"],[\"b840\",\"\u7779\u776A\u776C\u775C\u7765\u7768\u7762\u77EE\u788E\u78B0\u7897\u7898\u788C\u7889\u787C\u7891\u7893\u787F\u797A\u797F\u7981\u842C\u79BD\u7A1C\u7A1A\u7A20\u7A14\u7A1F\u7A1E\u7A9F\u7AA0\u7B77\u7BC0\u7B60\u7B6E\u7B67\u7CB1\u7CB3\u7CB5\u7D93\u7D79\u7D91\u7D81\u7D8F\u7D5B\u7F6E\u7F69\u7F6A\u7F72\u7FA9\u7FA8\u7FA4\u8056\u8058\u8086\u8084\u8171\u8170\u8178\u8165\u816E\u8173\u816B\"],[\"b8a1\",\"\u8179\u817A\u8166\u8205\u8247\u8482\u8477\u843D\u8431\u8475\u8466\u846B\u8449\u846C\u845B\u843C\u8435\u8461\u8463\u8469\u846D\u8446\u865E\u865C\u865F\u86F9\u8713\u8708\u8707\u8700\u86FE\u86FB\u8702\u8703\u8706\u870A\u8859\u88DF\u88D4\u88D9\u88DC\u88D8\u88DD\u88E1\u88CA\u88D5\u88D2\u899C\u89E3\u8A6B\u8A72\u8A73\u8A66\u8A69\u8A70\u8A87\u8A7C\u8A63\u8AA0\u8A71\u8A85\u8A6D\u8A62\u8A6E\u8A6C\u8A79\u8A7B\u8A3E\u8A68\u8C62\u8C8A\u8C89\u8CCA\u8CC7\u8CC8\u8CC4\u8CB2\u8CC3\u8CC2\u8CC5\u8DE1\u8DDF\u8DE8\u8DEF\u8DF3\u8DFA\u8DEA\u8DE4\u8DE6\u8EB2\u8F03\u8F09\u8EFE\u8F0A\"],[\"b940\",\"\u8F9F\u8FB2\u904B\u904A\u9053\u9042\u9054\u903C\u9055\u9050\u9047\u904F\u904E\u904D\u9051\u903E\u9041\u9112\u9117\u916C\u916A\u9169\u91C9\u9237\u9257\u9238\u923D\u9240\u923E\u925B\u924B\u9264\u9251\u9234\u9249\u924D\u9245\u9239\u923F\u925A\u9598\u9698\u9694\u9695\u96CD\u96CB\u96C9\u96CA\u96F7\u96FB\u96F9\u96F6\u9756\u9774\u9776\u9810\u9811\u9813\u980A\u9812\u980C\u98FC\u98F4\"],[\"b9a1\",\"\u98FD\u98FE\u99B3\u99B1\u99B4\u9AE1\u9CE9\u9E82\u9F0E\u9F13\u9F20\u50E7\u50EE\u50E5\u50D6\u50ED\u50DA\u50D5\u50CF\u50D1\u50F1\u50CE\u50E9\u5162\u51F3\u5283\u5282\u5331\u53AD\u55FE\u5600\u561B\u5617\u55FD\u5614\u5606\u5609\u560D\u560E\u55F7\u5616\u561F\u5608\u5610\u55F6\u5718\u5716\u5875\u587E\u5883\u5893\u588A\u5879\u5885\u587D\u58FD\u5925\u5922\u5924\u596A\u5969\u5AE1\u5AE6\u5AE9\u5AD7\u5AD6\u5AD8\u5AE3\u5B75\u5BDE\u5BE7\u5BE1\u5BE5\u5BE6\u5BE8\u5BE2\u5BE4\u5BDF\u5C0D\u5C62\u5D84\u5D87\u5E5B\u5E63\u5E55\u5E57\u5E54\u5ED3\u5ED6\u5F0A\u5F46\u5F70\u5FB9\u6147\"],[\"ba40\",\"\u613F\u614B\u6177\u6162\u6163\u615F\u615A\u6158\u6175\u622A\u6487\u6458\u6454\u64A4\u6478\u645F\u647A\u6451\u6467\u6434\u646D\u647B\u6572\u65A1\u65D7\u65D6\u66A2\u66A8\u669D\u699C\u69A8\u6995\u69C1\u69AE\u69D3\u69CB\u699B\u69B7\u69BB\u69AB\u69B4\u69D0\u69CD\u69AD\u69CC\u69A6\u69C3\u69A3\u6B49\u6B4C\u6C33\u6F33\u6F14\u6EFE\u6F13\u6EF4\u6F29\u6F3E\u6F20\u6F2C\u6F0F\u6F02\u6F22\"],[\"baa1\",\"\u6EFF\u6EEF\u6F06\u6F31\u6F38\u6F32\u6F23\u6F15\u6F2B\u6F2F\u6F88\u6F2A\u6EEC\u6F01\u6EF2\u6ECC\u6EF7\u7194\u7199\u717D\u718A\u7184\u7192\u723E\u7292\u7296\u7344\u7350\u7464\u7463\u746A\u7470\u746D\u7504\u7591\u7627\u760D\u760B\u7609\u7613\u76E1\u76E3\u7784\u777D\u777F\u7761\u78C1\u789F\u78A7\u78B3\u78A9\u78A3\u798E\u798F\u798D\u7A2E\u7A31\u7AAA\u7AA9\u7AED\u7AEF\u7BA1\u7B95\u7B8B\u7B75\u7B97\u7B9D\u7B94\u7B8F\u7BB8\u7B87\u7B84\u7CB9\u7CBD\u7CBE\u7DBB\u7DB0\u7D9C\u7DBD\u7DBE\u7DA0\u7DCA\u7DB4\u7DB2\u7DB1\u7DBA\u7DA2\u7DBF\u7DB5\u7DB8\u7DAD\u7DD2\u7DC7\u7DAC\"],[\"bb40\",\"\u7F70\u7FE0\u7FE1\u7FDF\u805E\u805A\u8087\u8150\u8180\u818F\u8188\u818A\u817F\u8182\u81E7\u81FA\u8207\u8214\u821E\u824B\u84C9\u84BF\u84C6\u84C4\u8499\u849E\u84B2\u849C\u84CB\u84B8\u84C0\u84D3\u8490\u84BC\u84D1\u84CA\u873F\u871C\u873B\u8722\u8725\u8734\u8718\u8755\u8737\u8729\u88F3\u8902\u88F4\u88F9\u88F8\u88FD\u88E8\u891A\u88EF\u8AA6\u8A8C\u8A9E\u8AA3\u8A8D\u8AA1\u8A93\u8AA4\"],[\"bba1\",\"\u8AAA\u8AA5\u8AA8\u8A98\u8A91\u8A9A\u8AA7\u8C6A\u8C8D\u8C8C\u8CD3\u8CD1\u8CD2\u8D6B\u8D99\u8D95\u8DFC\u8F14\u8F12\u8F15\u8F13\u8FA3\u9060\u9058\u905C\u9063\u9059\u905E\u9062\u905D\u905B\u9119\u9118\u911E\u9175\u9178\u9177\u9174\u9278\u9280\u9285\u9298\u9296\u927B\u9293\u929C\u92A8\u927C\u9291\u95A1\u95A8\u95A9\u95A3\u95A5\u95A4\u9699\u969C\u969B\u96CC\u96D2\u9700\u977C\u9785\u97F6\u9817\u9818\u98AF\u98B1\u9903\u9905\u990C\u9909\u99C1\u9AAF\u9AB0\u9AE6\u9B41\u9B42\u9CF4\u9CF6\u9CF3\u9EBC\u9F3B\u9F4A\u5104\u5100\u50FB\u50F5\u50F9\u5102\u5108\u5109\u5105\u51DC\"],[\"bc40\",\"\u5287\u5288\u5289\u528D\u528A\u52F0\u53B2\u562E\u563B\u5639\u5632\u563F\u5634\u5629\u5653\u564E\u5657\u5674\u5636\u562F\u5630\u5880\u589F\u589E\u58B3\u589C\u58AE\u58A9\u58A6\u596D\u5B09\u5AFB\u5B0B\u5AF5\u5B0C\u5B08\u5BEE\u5BEC\u5BE9\u5BEB\u5C64\u5C65\u5D9D\u5D94\u5E62\u5E5F\u5E61\u5EE2\u5EDA\u5EDF\u5EDD\u5EE3\u5EE0\u5F48\u5F71\u5FB7\u5FB5\u6176\u6167\u616E\u615D\u6155\u6182\"],[\"bca1\",\"\u617C\u6170\u616B\u617E\u61A7\u6190\u61AB\u618E\u61AC\u619A\u61A4\u6194\u61AE\u622E\u6469\u646F\u6479\u649E\u64B2\u6488\u6490\u64B0\u64A5\u6493\u6495\u64A9\u6492\u64AE\u64AD\u64AB\u649A\u64AC\u6499\u64A2\u64B3\u6575\u6577\u6578\u66AE\u66AB\u66B4\u66B1\u6A23\u6A1F\u69E8\u6A01\u6A1E\u6A19\u69FD\u6A21\u6A13\u6A0A\u69F3\u6A02\u6A05\u69ED\u6A11\u6B50\u6B4E\u6BA4\u6BC5\u6BC6\u6F3F\u6F7C\u6F84\u6F51\u6F66\u6F54\u6F86\u6F6D\u6F5B\u6F78\u6F6E\u6F8E\u6F7A\u6F70\u6F64\u6F97\u6F58\u6ED5\u6F6F\u6F60\u6F5F\u719F\u71AC\u71B1\u71A8\u7256\u729B\u734E\u7357\u7469\u748B\u7483\"],[\"bd40\",\"\u747E\u7480\u757F\u7620\u7629\u761F\u7624\u7626\u7621\u7622\u769A\u76BA\u76E4\u778E\u7787\u778C\u7791\u778B\u78CB\u78C5\u78BA\u78CA\u78BE\u78D5\u78BC\u78D0\u7A3F\u7A3C\u7A40\u7A3D\u7A37\u7A3B\u7AAF\u7AAE\u7BAD\u7BB1\u7BC4\u7BB4\u7BC6\u7BC7\u7BC1\u7BA0\u7BCC\u7CCA\u7DE0\u7DF4\u7DEF\u7DFB\u7DD8\u7DEC\u7DDD\u7DE8\u7DE3\u7DDA\u7DDE\u7DE9\u7D9E\u7DD9\u7DF2\u7DF9\u7F75\u7F77\u7FAF\"],[\"bda1\",\"\u7FE9\u8026\u819B\u819C\u819D\u81A0\u819A\u8198\u8517\u853D\u851A\u84EE\u852C\u852D\u8513\u8511\u8523\u8521\u8514\u84EC\u8525\u84FF\u8506\u8782\u8774\u8776\u8760\u8766\u8778\u8768\u8759\u8757\u874C\u8753\u885B\u885D\u8910\u8907\u8912\u8913\u8915\u890A\u8ABC\u8AD2\u8AC7\u8AC4\u8A95\u8ACB\u8AF8\u8AB2\u8AC9\u8AC2\u8ABF\u8AB0\u8AD6\u8ACD\u8AB6\u8AB9\u8ADB\u8C4C\u8C4E\u8C6C\u8CE0\u8CDE\u8CE6\u8CE4\u8CEC\u8CED\u8CE2\u8CE3\u8CDC\u8CEA\u8CE1\u8D6D\u8D9F\u8DA3\u8E2B\u8E10\u8E1D\u8E22\u8E0F\u8E29\u8E1F\u8E21\u8E1E\u8EBA\u8F1D\u8F1B\u8F1F\u8F29\u8F26\u8F2A\u8F1C\u8F1E\"],[\"be40\",\"\u8F25\u9069\u906E\u9068\u906D\u9077\u9130\u912D\u9127\u9131\u9187\u9189\u918B\u9183\u92C5\u92BB\u92B7\u92EA\u92AC\u92E4\u92C1\u92B3\u92BC\u92D2\u92C7\u92F0\u92B2\u95AD\u95B1\u9704\u9706\u9707\u9709\u9760\u978D\u978B\u978F\u9821\u982B\u981C\u98B3\u990A\u9913\u9912\u9918\u99DD\u99D0\u99DF\u99DB\u99D1\u99D5\u99D2\u99D9\u9AB7\u9AEE\u9AEF\u9B27\u9B45\u9B44\u9B77\u9B6F\u9D06\u9D09\"],[\"bea1\",\"\u9D03\u9EA9\u9EBE\u9ECE\u58A8\u9F52\u5112\u5118\u5114\u5110\u5115\u5180\u51AA\u51DD\u5291\u5293\u52F3\u5659\u566B\u5679\u5669\u5664\u5678\u566A\u5668\u5665\u5671\u566F\u566C\u5662\u5676\u58C1\u58BE\u58C7\u58C5\u596E\u5B1D\u5B34\u5B78\u5BF0\u5C0E\u5F4A\u61B2\u6191\u61A9\u618A\u61CD\u61B6\u61BE\u61CA\u61C8\u6230\u64C5\u64C1\u64CB\u64BB\u64BC\u64DA\u64C4\u64C7\u64C2\u64CD\u64BF\u64D2\u64D4\u64BE\u6574\u66C6\u66C9\u66B9\u66C4\u66C7\u66B8\u6A3D\u6A38\u6A3A\u6A59\u6A6B\u6A58\u6A39\u6A44\u6A62\u6A61\u6A4B\u6A47\u6A35\u6A5F\u6A48\u6B59\u6B77\u6C05\u6FC2\u6FB1\u6FA1\"],[\"bf40\",\"\u6FC3\u6FA4\u6FC1\u6FA7\u6FB3\u6FC0\u6FB9\u6FB6\u6FA6\u6FA0\u6FB4\u71BE\u71C9\u71D0\u71D2\u71C8\u71D5\u71B9\u71CE\u71D9\u71DC\u71C3\u71C4\u7368\u749C\u74A3\u7498\u749F\u749E\u74E2\u750C\u750D\u7634\u7638\u763A\u76E7\u76E5\u77A0\u779E\u779F\u77A5\u78E8\u78DA\u78EC\u78E7\u79A6\u7A4D\u7A4E\u7A46\u7A4C\u7A4B\u7ABA\u7BD9\u7C11\u7BC9\u7BE4\u7BDB\u7BE1\u7BE9\u7BE6\u7CD5\u7CD6\u7E0A\"],[\"bfa1\",\"\u7E11\u7E08\u7E1B\u7E23\u7E1E\u7E1D\u7E09\u7E10\u7F79\u7FB2\u7FF0\u7FF1\u7FEE\u8028\u81B3\u81A9\u81A8\u81FB\u8208\u8258\u8259\u854A\u8559\u8548\u8568\u8569\u8543\u8549\u856D\u856A\u855E\u8783\u879F\u879E\u87A2\u878D\u8861\u892A\u8932\u8925\u892B\u8921\u89AA\u89A6\u8AE6\u8AFA\u8AEB\u8AF1\u8B00\u8ADC\u8AE7\u8AEE\u8AFE\u8B01\u8B02\u8AF7\u8AED\u8AF3\u8AF6\u8AFC\u8C6B\u8C6D\u8C93\u8CF4\u8E44\u8E31\u8E34\u8E42\u8E39\u8E35\u8F3B\u8F2F\u8F38\u8F33\u8FA8\u8FA6\u9075\u9074\u9078\u9072\u907C\u907A\u9134\u9192\u9320\u9336\u92F8\u9333\u932F\u9322\u92FC\u932B\u9304\u931A\"],[\"c040\",\"\u9310\u9326\u9321\u9315\u932E\u9319\u95BB\u96A7\u96A8\u96AA\u96D5\u970E\u9711\u9716\u970D\u9713\u970F\u975B\u975C\u9766\u9798\u9830\u9838\u983B\u9837\u982D\u9839\u9824\u9910\u9928\u991E\u991B\u9921\u991A\u99ED\u99E2\u99F1\u9AB8\u9ABC\u9AFB\u9AED\u9B28\u9B91\u9D15\u9D23\u9D26\u9D28\u9D12\u9D1B\u9ED8\u9ED4\u9F8D\u9F9C\u512A\u511F\u5121\u5132\u52F5\u568E\u5680\u5690\u5685\u5687\"],[\"c0a1\",\"\u568F\u58D5\u58D3\u58D1\u58CE\u5B30\u5B2A\u5B24\u5B7A\u5C37\u5C68\u5DBC\u5DBA\u5DBD\u5DB8\u5E6B\u5F4C\u5FBD\u61C9\u61C2\u61C7\u61E6\u61CB\u6232\u6234\u64CE\u64CA\u64D8\u64E0\u64F0\u64E6\u64EC\u64F1\u64E2\u64ED\u6582\u6583\u66D9\u66D6\u6A80\u6A94\u6A84\u6AA2\u6A9C\u6ADB\u6AA3\u6A7E\u6A97\u6A90\u6AA0\u6B5C\u6BAE\u6BDA\u6C08\u6FD8\u6FF1\u6FDF\u6FE0\u6FDB\u6FE4\u6FEB\u6FEF\u6F80\u6FEC\u6FE1\u6FE9\u6FD5\u6FEE\u6FF0\u71E7\u71DF\u71EE\u71E6\u71E5\u71ED\u71EC\u71F4\u71E0\u7235\u7246\u7370\u7372\u74A9\u74B0\u74A6\u74A8\u7646\u7642\u764C\u76EA\u77B3\u77AA\u77B0\u77AC\"],[\"c140\",\"\u77A7\u77AD\u77EF\u78F7\u78FA\u78F4\u78EF\u7901\u79A7\u79AA\u7A57\u7ABF\u7C07\u7C0D\u7BFE\u7BF7\u7C0C\u7BE0\u7CE0\u7CDC\u7CDE\u7CE2\u7CDF\u7CD9\u7CDD\u7E2E\u7E3E\u7E46\u7E37\u7E32\u7E43\u7E2B\u7E3D\u7E31\u7E45\u7E41\u7E34\u7E39\u7E48\u7E35\u7E3F\u7E2F\u7F44\u7FF3\u7FFC\u8071\u8072\u8070\u806F\u8073\u81C6\u81C3\u81BA\u81C2\u81C0\u81BF\u81BD\u81C9\u81BE\u81E8\u8209\u8271\u85AA\"],[\"c1a1\",\"\u8584\u857E\u859C\u8591\u8594\u85AF\u859B\u8587\u85A8\u858A\u8667\u87C0\u87D1\u87B3\u87D2\u87C6\u87AB\u87BB\u87BA\u87C8\u87CB\u893B\u8936\u8944\u8938\u893D\u89AC\u8B0E\u8B17\u8B19\u8B1B\u8B0A\u8B20\u8B1D\u8B04\u8B10\u8C41\u8C3F\u8C73\u8CFA\u8CFD\u8CFC\u8CF8\u8CFB\u8DA8\u8E49\u8E4B\u8E48\u8E4A\u8F44\u8F3E\u8F42\u8F45\u8F3F\u907F\u907D\u9084\u9081\u9082\u9080\u9139\u91A3\u919E\u919C\u934D\u9382\u9328\u9375\u934A\u9365\u934B\u9318\u937E\u936C\u935B\u9370\u935A\u9354\u95CA\u95CB\u95CC\u95C8\u95C6\u96B1\u96B8\u96D6\u971C\u971E\u97A0\u97D3\u9846\u98B6\u9935\u9A01\"],[\"c240\",\"\u99FF\u9BAE\u9BAB\u9BAA\u9BAD\u9D3B\u9D3F\u9E8B\u9ECF\u9EDE\u9EDC\u9EDD\u9EDB\u9F3E\u9F4B\u53E2\u5695\u56AE\u58D9\u58D8\u5B38\u5F5D\u61E3\u6233\u64F4\u64F2\u64FE\u6506\u64FA\u64FB\u64F7\u65B7\u66DC\u6726\u6AB3\u6AAC\u6AC3\u6ABB\u6AB8\u6AC2\u6AAE\u6AAF\u6B5F\u6B78\u6BAF\u7009\u700B\u6FFE\u7006\u6FFA\u7011\u700F\u71FB\u71FC\u71FE\u71F8\u7377\u7375\u74A7\u74BF\u7515\u7656\u7658\"],[\"c2a1\",\"\u7652\u77BD\u77BF\u77BB\u77BC\u790E\u79AE\u7A61\u7A62\u7A60\u7AC4\u7AC5\u7C2B\u7C27\u7C2A\u7C1E\u7C23\u7C21\u7CE7\u7E54\u7E55\u7E5E\u7E5A\u7E61\u7E52\u7E59\u7F48\u7FF9\u7FFB\u8077\u8076\u81CD\u81CF\u820A\u85CF\u85A9\u85CD\u85D0\u85C9\u85B0\u85BA\u85B9\u85A6\u87EF\u87EC\u87F2\u87E0\u8986\u89B2\u89F4\u8B28\u8B39\u8B2C\u8B2B\u8C50\u8D05\u8E59\u8E63\u8E66\u8E64\u8E5F\u8E55\u8EC0\u8F49\u8F4D\u9087\u9083\u9088\u91AB\u91AC\u91D0\u9394\u938A\u9396\u93A2\u93B3\u93AE\u93AC\u93B0\u9398\u939A\u9397\u95D4\u95D6\u95D0\u95D5\u96E2\u96DC\u96D9\u96DB\u96DE\u9724\u97A3\u97A6\"],[\"c340\",\"\u97AD\u97F9\u984D\u984F\u984C\u984E\u9853\u98BA\u993E\u993F\u993D\u992E\u99A5\u9A0E\u9AC1\u9B03\u9B06\u9B4F\u9B4E\u9B4D\u9BCA\u9BC9\u9BFD\u9BC8\u9BC0\u9D51\u9D5D\u9D60\u9EE0\u9F15\u9F2C\u5133\u56A5\u58DE\u58DF\u58E2\u5BF5\u9F90\u5EEC\u61F2\u61F7\u61F6\u61F5\u6500\u650F\u66E0\u66DD\u6AE5\u6ADD\u6ADA\u6AD3\u701B\u701F\u7028\u701A\u701D\u7015\u7018\u7206\u720D\u7258\u72A2\u7378\"],[\"c3a1\",\"\u737A\u74BD\u74CA\u74E3\u7587\u7586\u765F\u7661\u77C7\u7919\u79B1\u7A6B\u7A69\u7C3E\u7C3F\u7C38\u7C3D\u7C37\u7C40\u7E6B\u7E6D\u7E79\u7E69\u7E6A\u7F85\u7E73\u7FB6\u7FB9\u7FB8\u81D8\u85E9\u85DD\u85EA\u85D5\u85E4\u85E5\u85F7\u87FB\u8805\u880D\u87F9\u87FE\u8960\u895F\u8956\u895E\u8B41\u8B5C\u8B58\u8B49\u8B5A\u8B4E\u8B4F\u8B46\u8B59\u8D08\u8D0A\u8E7C\u8E72\u8E87\u8E76\u8E6C\u8E7A\u8E74\u8F54\u8F4E\u8FAD\u908A\u908B\u91B1\u91AE\u93E1\u93D1\u93DF\u93C3\u93C8\u93DC\u93DD\u93D6\u93E2\u93CD\u93D8\u93E4\u93D7\u93E8\u95DC\u96B4\u96E3\u972A\u9727\u9761\u97DC\u97FB\u985E\"],[\"c440\",\"\u9858\u985B\u98BC\u9945\u9949\u9A16\u9A19\u9B0D\u9BE8\u9BE7\u9BD6\u9BDB\u9D89\u9D61\u9D72\u9D6A\u9D6C\u9E92\u9E97\u9E93\u9EB4\u52F8\u56A8\u56B7\u56B6\u56B4\u56BC\u58E4\u5B40\u5B43\u5B7D\u5BF6\u5DC9\u61F8\u61FA\u6518\u6514\u6519\u66E6\u6727\u6AEC\u703E\u7030\u7032\u7210\u737B\u74CF\u7662\u7665\u7926\u792A\u792C\u792B\u7AC7\u7AF6\u7C4C\u7C43\u7C4D\u7CEF\u7CF0\u8FAE\u7E7D\u7E7C\"],[\"c4a1\",\"\u7E82\u7F4C\u8000\u81DA\u8266\u85FB\u85F9\u8611\u85FA\u8606\u860B\u8607\u860A\u8814\u8815\u8964\u89BA\u89F8\u8B70\u8B6C\u8B66\u8B6F\u8B5F\u8B6B\u8D0F\u8D0D\u8E89\u8E81\u8E85\u8E82\u91B4\u91CB\u9418\u9403\u93FD\u95E1\u9730\u98C4\u9952\u9951\u99A8\u9A2B\u9A30\u9A37\u9A35\u9C13\u9C0D\u9E79\u9EB5\u9EE8\u9F2F\u9F5F\u9F63\u9F61\u5137\u5138\u56C1\u56C0\u56C2\u5914\u5C6C\u5DCD\u61FC\u61FE\u651D\u651C\u6595\u66E9\u6AFB\u6B04\u6AFA\u6BB2\u704C\u721B\u72A7\u74D6\u74D4\u7669\u77D3\u7C50\u7E8F\u7E8C\u7FBC\u8617\u862D\u861A\u8823\u8822\u8821\u881F\u896A\u896C\u89BD\u8B74\"],[\"c540\",\"\u8B77\u8B7D\u8D13\u8E8A\u8E8D\u8E8B\u8F5F\u8FAF\u91BA\u942E\u9433\u9435\u943A\u9438\u9432\u942B\u95E2\u9738\u9739\u9732\u97FF\u9867\u9865\u9957\u9A45\u9A43\u9A40\u9A3E\u9ACF\u9B54\u9B51\u9C2D\u9C25\u9DAF\u9DB4\u9DC2\u9DB8\u9E9D\u9EEF\u9F19\u9F5C\u9F66\u9F67\u513C\u513B\u56C8\u56CA\u56C9\u5B7F\u5DD4\u5DD2\u5F4E\u61FF\u6524\u6B0A\u6B61\u7051\u7058\u7380\u74E4\u758A\u766E\u766C\"],[\"c5a1\",\"\u79B3\u7C60\u7C5F\u807E\u807D\u81DF\u8972\u896F\u89FC\u8B80\u8D16\u8D17\u8E91\u8E93\u8F61\u9148\u9444\u9451\u9452\u973D\u973E\u97C3\u97C1\u986B\u9955\u9A55\u9A4D\u9AD2\u9B1A\u9C49\u9C31\u9C3E\u9C3B\u9DD3\u9DD7\u9F34\u9F6C\u9F6A\u9F94\u56CC\u5DD6\u6200\u6523\u652B\u652A\u66EC\u6B10\u74DA\u7ACA\u7C64\u7C63\u7C65\u7E93\u7E96\u7E94\u81E2\u8638\u863F\u8831\u8B8A\u9090\u908F\u9463\u9460\u9464\u9768\u986F\u995C\u9A5A\u9A5B\u9A57\u9AD3\u9AD4\u9AD1\u9C54\u9C57\u9C56\u9DE5\u9E9F\u9EF4\u56D1\u58E9\u652C\u705E\u7671\u7672\u77D7\u7F50\u7F88\u8836\u8839\u8862\u8B93\u8B92\"],[\"c640\",\"\u8B96\u8277\u8D1B\u91C0\u946A\u9742\u9748\u9744\u97C6\u9870\u9A5F\u9B22\u9B58\u9C5F\u9DF9\u9DFA\u9E7C\u9E7D\u9F07\u9F77\u9F72\u5EF3\u6B16\u7063\u7C6C\u7C6E\u883B\u89C0\u8EA1\u91C1\u9472\u9470\u9871\u995E\u9AD6\u9B23\u9ECC\u7064\u77DA\u8B9A\u9477\u97C9\u9A62\u9A65\u7E9C\u8B9C\u8EAA\u91C5\u947D\u947E\u947C\u9C77\u9C78\u9EF7\u8C54\u947F\u9E1A\u7228\u9A6A\u9B31\u9E1B\u9E1E\u7C72\"],[\"c940\",\"\u4E42\u4E5C\u51F5\u531A\u5382\u4E07\u4E0C\u4E47\u4E8D\u56D7\uFA0C\u5C6E\u5F73\u4E0F\u5187\u4E0E\u4E2E\u4E93\u4EC2\u4EC9\u4EC8\u5198\u52FC\u536C\u53B9\u5720\u5903\u592C\u5C10\u5DFF\u65E1\u6BB3\u6BCC\u6C14\u723F\u4E31\u4E3C\u4EE8\u4EDC\u4EE9\u4EE1\u4EDD\u4EDA\u520C\u531C\u534C\u5722\u5723\u5917\u592F\u5B81\u5B84\u5C12\u5C3B\u5C74\u5C73\u5E04\u5E80\u5E82\u5FC9\u6209\u6250\u6C15\"],[\"c9a1\",\"\u6C36\u6C43\u6C3F\u6C3B\u72AE\u72B0\u738A\u79B8\u808A\u961E\u4F0E\u4F18\u4F2C\u4EF5\u4F14\u4EF1\u4F00\u4EF7\u4F08\u4F1D\u4F02\u4F05\u4F22\u4F13\u4F04\u4EF4\u4F12\u51B1\u5213\u5209\u5210\u52A6\u5322\u531F\u534D\u538A\u5407\u56E1\u56DF\u572E\u572A\u5734\u593C\u5980\u597C\u5985\u597B\u597E\u5977\u597F\u5B56\u5C15\u5C25\u5C7C\u5C7A\u5C7B\u5C7E\u5DDF\u5E75\u5E84\u5F02\u5F1A\u5F74\u5FD5\u5FD4\u5FCF\u625C\u625E\u6264\u6261\u6266\u6262\u6259\u6260\u625A\u6265\u65EF\u65EE\u673E\u6739\u6738\u673B\u673A\u673F\u673C\u6733\u6C18\u6C46\u6C52\u6C5C\u6C4F\u6C4A\u6C54\u6C4B\"],[\"ca40\",\"\u6C4C\u7071\u725E\u72B4\u72B5\u738E\u752A\u767F\u7A75\u7F51\u8278\u827C\u8280\u827D\u827F\u864D\u897E\u9099\u9097\u9098\u909B\u9094\u9622\u9624\u9620\u9623\u4F56\u4F3B\u4F62\u4F49\u4F53\u4F64\u4F3E\u4F67\u4F52\u4F5F\u4F41\u4F58\u4F2D\u4F33\u4F3F\u4F61\u518F\u51B9\u521C\u521E\u5221\u52AD\u52AE\u5309\u5363\u5372\u538E\u538F\u5430\u5437\u542A\u5454\u5445\u5419\u541C\u5425\u5418\"],[\"caa1\",\"\u543D\u544F\u5441\u5428\u5424\u5447\u56EE\u56E7\u56E5\u5741\u5745\u574C\u5749\u574B\u5752\u5906\u5940\u59A6\u5998\u59A0\u5997\u598E\u59A2\u5990\u598F\u59A7\u59A1\u5B8E\u5B92\u5C28\u5C2A\u5C8D\u5C8F\u5C88\u5C8B\u5C89\u5C92\u5C8A\u5C86\u5C93\u5C95\u5DE0\u5E0A\u5E0E\u5E8B\u5E89\u5E8C\u5E88\u5E8D\u5F05\u5F1D\u5F78\u5F76\u5FD2\u5FD1\u5FD0\u5FED\u5FE8\u5FEE\u5FF3\u5FE1\u5FE4\u5FE3\u5FFA\u5FEF\u5FF7\u5FFB\u6000\u5FF4\u623A\u6283\u628C\u628E\u628F\u6294\u6287\u6271\u627B\u627A\u6270\u6281\u6288\u6277\u627D\u6272\u6274\u6537\u65F0\u65F4\u65F3\u65F2\u65F5\u6745\u6747\"],[\"cb40\",\"\u6759\u6755\u674C\u6748\u675D\u674D\u675A\u674B\u6BD0\u6C19\u6C1A\u6C78\u6C67\u6C6B\u6C84\u6C8B\u6C8F\u6C71\u6C6F\u6C69\u6C9A\u6C6D\u6C87\u6C95\u6C9C\u6C66\u6C73\u6C65\u6C7B\u6C8E\u7074\u707A\u7263\u72BF\u72BD\u72C3\u72C6\u72C1\u72BA\u72C5\u7395\u7397\u7393\u7394\u7392\u753A\u7539\u7594\u7595\u7681\u793D\u8034\u8095\u8099\u8090\u8092\u809C\u8290\u828F\u8285\u828E\u8291\u8293\"],[\"cba1\",\"\u828A\u8283\u8284\u8C78\u8FC9\u8FBF\u909F\u90A1\u90A5\u909E\u90A7\u90A0\u9630\u9628\u962F\u962D\u4E33\u4F98\u4F7C\u4F85\u4F7D\u4F80\u4F87\u4F76\u4F74\u4F89\u4F84\u4F77\u4F4C\u4F97\u4F6A\u4F9A\u4F79\u4F81\u4F78\u4F90\u4F9C\u4F94\u4F9E\u4F92\u4F82\u4F95\u4F6B\u4F6E\u519E\u51BC\u51BE\u5235\u5232\u5233\u5246\u5231\u52BC\u530A\u530B\u533C\u5392\u5394\u5487\u547F\u5481\u5491\u5482\u5488\u546B\u547A\u547E\u5465\u546C\u5474\u5466\u548D\u546F\u5461\u5460\u5498\u5463\u5467\u5464\u56F7\u56F9\u576F\u5772\u576D\u576B\u5771\u5770\u5776\u5780\u5775\u577B\u5773\u5774\u5762\"],[\"cc40\",\"\u5768\u577D\u590C\u5945\u59B5\u59BA\u59CF\u59CE\u59B2\u59CC\u59C1\u59B6\u59BC\u59C3\u59D6\u59B1\u59BD\u59C0\u59C8\u59B4\u59C7\u5B62\u5B65\u5B93\u5B95\u5C44\u5C47\u5CAE\u5CA4\u5CA0\u5CB5\u5CAF\u5CA8\u5CAC\u5C9F\u5CA3\u5CAD\u5CA2\u5CAA\u5CA7\u5C9D\u5CA5\u5CB6\u5CB0\u5CA6\u5E17\u5E14\u5E19\u5F28\u5F22\u5F23\u5F24\u5F54\u5F82\u5F7E\u5F7D\u5FDE\u5FE5\u602D\u6026\u6019\u6032\u600B\"],[\"cca1\",\"\u6034\u600A\u6017\u6033\u601A\u601E\u602C\u6022\u600D\u6010\u602E\u6013\u6011\u600C\u6009\u601C\u6214\u623D\u62AD\u62B4\u62D1\u62BE\u62AA\u62B6\u62CA\u62AE\u62B3\u62AF\u62BB\u62A9\u62B0\u62B8\u653D\u65A8\u65BB\u6609\u65FC\u6604\u6612\u6608\u65FB\u6603\u660B\u660D\u6605\u65FD\u6611\u6610\u66F6\u670A\u6785\u676C\u678E\u6792\u6776\u677B\u6798\u6786\u6784\u6774\u678D\u678C\u677A\u679F\u6791\u6799\u6783\u677D\u6781\u6778\u6779\u6794\u6B25\u6B80\u6B7E\u6BDE\u6C1D\u6C93\u6CEC\u6CEB\u6CEE\u6CD9\u6CB6\u6CD4\u6CAD\u6CE7\u6CB7\u6CD0\u6CC2\u6CBA\u6CC3\u6CC6\u6CED\u6CF2\"],[\"cd40\",\"\u6CD2\u6CDD\u6CB4\u6C8A\u6C9D\u6C80\u6CDE\u6CC0\u6D30\u6CCD\u6CC7\u6CB0\u6CF9\u6CCF\u6CE9\u6CD1\u7094\u7098\u7085\u7093\u7086\u7084\u7091\u7096\u7082\u709A\u7083\u726A\u72D6\u72CB\u72D8\u72C9\u72DC\u72D2\u72D4\u72DA\u72CC\u72D1\u73A4\u73A1\u73AD\u73A6\u73A2\u73A0\u73AC\u739D\u74DD\u74E8\u753F\u7540\u753E\u758C\u7598\u76AF\u76F3\u76F1\u76F0\u76F5\u77F8\u77FC\u77F9\u77FB\u77FA\"],[\"cda1\",\"\u77F7\u7942\u793F\u79C5\u7A78\u7A7B\u7AFB\u7C75\u7CFD\u8035\u808F\u80AE\u80A3\u80B8\u80B5\u80AD\u8220\u82A0\u82C0\u82AB\u829A\u8298\u829B\u82B5\u82A7\u82AE\u82BC\u829E\u82BA\u82B4\u82A8\u82A1\u82A9\u82C2\u82A4\u82C3\u82B6\u82A2\u8670\u866F\u866D\u866E\u8C56\u8FD2\u8FCB\u8FD3\u8FCD\u8FD6\u8FD5\u8FD7\u90B2\u90B4\u90AF\u90B3\u90B0\u9639\u963D\u963C\u963A\u9643\u4FCD\u4FC5\u4FD3\u4FB2\u4FC9\u4FCB\u4FC1\u4FD4\u4FDC\u4FD9\u4FBB\u4FB3\u4FDB\u4FC7\u4FD6\u4FBA\u4FC0\u4FB9\u4FEC\u5244\u5249\u52C0\u52C2\u533D\u537C\u5397\u5396\u5399\u5398\u54BA\u54A1\u54AD\u54A5\u54CF\"],[\"ce40\",\"\u54C3\u830D\u54B7\u54AE\u54D6\u54B6\u54C5\u54C6\u54A0\u5470\u54BC\u54A2\u54BE\u5472\u54DE\u54B0\u57B5\u579E\u579F\u57A4\u578C\u5797\u579D\u579B\u5794\u5798\u578F\u5799\u57A5\u579A\u5795\u58F4\u590D\u5953\u59E1\u59DE\u59EE\u5A00\u59F1\u59DD\u59FA\u59FD\u59FC\u59F6\u59E4\u59F2\u59F7\u59DB\u59E9\u59F3\u59F5\u59E0\u59FE\u59F4\u59ED\u5BA8\u5C4C\u5CD0\u5CD8\u5CCC\u5CD7\u5CCB\u5CDB\"],[\"cea1\",\"\u5CDE\u5CDA\u5CC9\u5CC7\u5CCA\u5CD6\u5CD3\u5CD4\u5CCF\u5CC8\u5CC6\u5CCE\u5CDF\u5CF8\u5DF9\u5E21\u5E22\u5E23\u5E20\u5E24\u5EB0\u5EA4\u5EA2\u5E9B\u5EA3\u5EA5\u5F07\u5F2E\u5F56\u5F86\u6037\u6039\u6054\u6072\u605E\u6045\u6053\u6047\u6049\u605B\u604C\u6040\u6042\u605F\u6024\u6044\u6058\u6066\u606E\u6242\u6243\u62CF\u630D\u630B\u62F5\u630E\u6303\u62EB\u62F9\u630F\u630C\u62F8\u62F6\u6300\u6313\u6314\u62FA\u6315\u62FB\u62F0\u6541\u6543\u65AA\u65BF\u6636\u6621\u6632\u6635\u661C\u6626\u6622\u6633\u662B\u663A\u661D\u6634\u6639\u662E\u670F\u6710\u67C1\u67F2\u67C8\u67BA\"],[\"cf40\",\"\u67DC\u67BB\u67F8\u67D8\u67C0\u67B7\u67C5\u67EB\u67E4\u67DF\u67B5\u67CD\u67B3\u67F7\u67F6\u67EE\u67E3\u67C2\u67B9\u67CE\u67E7\u67F0\u67B2\u67FC\u67C6\u67ED\u67CC\u67AE\u67E6\u67DB\u67FA\u67C9\u67CA\u67C3\u67EA\u67CB\u6B28\u6B82\u6B84\u6BB6\u6BD6\u6BD8\u6BE0\u6C20\u6C21\u6D28\u6D34\u6D2D\u6D1F\u6D3C\u6D3F\u6D12\u6D0A\u6CDA\u6D33\u6D04\u6D19\u6D3A\u6D1A\u6D11\u6D00\u6D1D\u6D42\"],[\"cfa1\",\"\u6D01\u6D18\u6D37\u6D03\u6D0F\u6D40\u6D07\u6D20\u6D2C\u6D08\u6D22\u6D09\u6D10\u70B7\u709F\u70BE\u70B1\u70B0\u70A1\u70B4\u70B5\u70A9\u7241\u7249\u724A\u726C\u7270\u7273\u726E\u72CA\u72E4\u72E8\u72EB\u72DF\u72EA\u72E6\u72E3\u7385\u73CC\u73C2\u73C8\u73C5\u73B9\u73B6\u73B5\u73B4\u73EB\u73BF\u73C7\u73BE\u73C3\u73C6\u73B8\u73CB\u74EC\u74EE\u752E\u7547\u7548\u75A7\u75AA\u7679\u76C4\u7708\u7703\u7704\u7705\u770A\u76F7\u76FB\u76FA\u77E7\u77E8\u7806\u7811\u7812\u7805\u7810\u780F\u780E\u7809\u7803\u7813\u794A\u794C\u794B\u7945\u7944\u79D5\u79CD\u79CF\u79D6\u79CE\u7A80\"],[\"d040\",\"\u7A7E\u7AD1\u7B00\u7B01\u7C7A\u7C78\u7C79\u7C7F\u7C80\u7C81\u7D03\u7D08\u7D01\u7F58\u7F91\u7F8D\u7FBE\u8007\u800E\u800F\u8014\u8037\u80D8\u80C7\u80E0\u80D1\u80C8\u80C2\u80D0\u80C5\u80E3\u80D9\u80DC\u80CA\u80D5\u80C9\u80CF\u80D7\u80E6\u80CD\u81FF\u8221\u8294\u82D9\u82FE\u82F9\u8307\u82E8\u8300\u82D5\u833A\u82EB\u82D6\u82F4\u82EC\u82E1\u82F2\u82F5\u830C\u82FB\u82F6\u82F0\u82EA\"],[\"d0a1\",\"\u82E4\u82E0\u82FA\u82F3\u82ED\u8677\u8674\u867C\u8673\u8841\u884E\u8867\u886A\u8869\u89D3\u8A04\u8A07\u8D72\u8FE3\u8FE1\u8FEE\u8FE0\u90F1\u90BD\u90BF\u90D5\u90C5\u90BE\u90C7\u90CB\u90C8\u91D4\u91D3\u9654\u964F\u9651\u9653\u964A\u964E\u501E\u5005\u5007\u5013\u5022\u5030\u501B\u4FF5\u4FF4\u5033\u5037\u502C\u4FF6\u4FF7\u5017\u501C\u5020\u5027\u5035\u502F\u5031\u500E\u515A\u5194\u5193\u51CA\u51C4\u51C5\u51C8\u51CE\u5261\u525A\u5252\u525E\u525F\u5255\u5262\u52CD\u530E\u539E\u5526\u54E2\u5517\u5512\u54E7\u54F3\u54E4\u551A\u54FF\u5504\u5508\u54EB\u5511\u5505\u54F1\"],[\"d140\",\"\u550A\u54FB\u54F7\u54F8\u54E0\u550E\u5503\u550B\u5701\u5702\u57CC\u5832\u57D5\u57D2\u57BA\u57C6\u57BD\u57BC\u57B8\u57B6\u57BF\u57C7\u57D0\u57B9\u57C1\u590E\u594A\u5A19\u5A16\u5A2D\u5A2E\u5A15\u5A0F\u5A17\u5A0A\u5A1E\u5A33\u5B6C\u5BA7\u5BAD\u5BAC\u5C03\u5C56\u5C54\u5CEC\u5CFF\u5CEE\u5CF1\u5CF7\u5D00\u5CF9\u5E29\u5E28\u5EA8\u5EAE\u5EAA\u5EAC\u5F33\u5F30\u5F67\u605D\u605A\u6067\"],[\"d1a1\",\"\u6041\u60A2\u6088\u6080\u6092\u6081\u609D\u6083\u6095\u609B\u6097\u6087\u609C\u608E\u6219\u6246\u62F2\u6310\u6356\u632C\u6344\u6345\u6336\u6343\u63E4\u6339\u634B\u634A\u633C\u6329\u6341\u6334\u6358\u6354\u6359\u632D\u6347\u6333\u635A\u6351\u6338\u6357\u6340\u6348\u654A\u6546\u65C6\u65C3\u65C4\u65C2\u664A\u665F\u6647\u6651\u6712\u6713\u681F\u681A\u6849\u6832\u6833\u683B\u684B\u684F\u6816\u6831\u681C\u6835\u682B\u682D\u682F\u684E\u6844\u6834\u681D\u6812\u6814\u6826\u6828\u682E\u684D\u683A\u6825\u6820\u6B2C\u6B2F\u6B2D\u6B31\u6B34\u6B6D\u8082\u6B88\u6BE6\u6BE4\"],[\"d240\",\"\u6BE8\u6BE3\u6BE2\u6BE7\u6C25\u6D7A\u6D63\u6D64\u6D76\u6D0D\u6D61\u6D92\u6D58\u6D62\u6D6D\u6D6F\u6D91\u6D8D\u6DEF\u6D7F\u6D86\u6D5E\u6D67\u6D60\u6D97\u6D70\u6D7C\u6D5F\u6D82\u6D98\u6D2F\u6D68\u6D8B\u6D7E\u6D80\u6D84\u6D16\u6D83\u6D7B\u6D7D\u6D75\u6D90\u70DC\u70D3\u70D1\u70DD\u70CB\u7F39\u70E2\u70D7\u70D2\u70DE\u70E0\u70D4\u70CD\u70C5\u70C6\u70C7\u70DA\u70CE\u70E1\u7242\u7278\"],[\"d2a1\",\"\u7277\u7276\u7300\u72FA\u72F4\u72FE\u72F6\u72F3\u72FB\u7301\u73D3\u73D9\u73E5\u73D6\u73BC\u73E7\u73E3\u73E9\u73DC\u73D2\u73DB\u73D4\u73DD\u73DA\u73D7\u73D8\u73E8\u74DE\u74DF\u74F4\u74F5\u7521\u755B\u755F\u75B0\u75C1\u75BB\u75C4\u75C0\u75BF\u75B6\u75BA\u768A\u76C9\u771D\u771B\u7710\u7713\u7712\u7723\u7711\u7715\u7719\u771A\u7722\u7727\u7823\u782C\u7822\u7835\u782F\u7828\u782E\u782B\u7821\u7829\u7833\u782A\u7831\u7954\u795B\u794F\u795C\u7953\u7952\u7951\u79EB\u79EC\u79E0\u79EE\u79ED\u79EA\u79DC\u79DE\u79DD\u7A86\u7A89\u7A85\u7A8B\u7A8C\u7A8A\u7A87\u7AD8\u7B10\"],[\"d340\",\"\u7B04\u7B13\u7B05\u7B0F\u7B08\u7B0A\u7B0E\u7B09\u7B12\u7C84\u7C91\u7C8A\u7C8C\u7C88\u7C8D\u7C85\u7D1E\u7D1D\u7D11\u7D0E\u7D18\u7D16\u7D13\u7D1F\u7D12\u7D0F\u7D0C\u7F5C\u7F61\u7F5E\u7F60\u7F5D\u7F5B\u7F96\u7F92\u7FC3\u7FC2\u7FC0\u8016\u803E\u8039\u80FA\u80F2\u80F9\u80F5\u8101\u80FB\u8100\u8201\u822F\u8225\u8333\u832D\u8344\u8319\u8351\u8325\u8356\u833F\u8341\u8326\u831C\u8322\"],[\"d3a1\",\"\u8342\u834E\u831B\u832A\u8308\u833C\u834D\u8316\u8324\u8320\u8337\u832F\u8329\u8347\u8345\u834C\u8353\u831E\u832C\u834B\u8327\u8348\u8653\u8652\u86A2\u86A8\u8696\u868D\u8691\u869E\u8687\u8697\u8686\u868B\u869A\u8685\u86A5\u8699\u86A1\u86A7\u8695\u8698\u868E\u869D\u8690\u8694\u8843\u8844\u886D\u8875\u8876\u8872\u8880\u8871\u887F\u886F\u8883\u887E\u8874\u887C\u8A12\u8C47\u8C57\u8C7B\u8CA4\u8CA3\u8D76\u8D78\u8DB5\u8DB7\u8DB6\u8ED1\u8ED3\u8FFE\u8FF5\u9002\u8FFF\u8FFB\u9004\u8FFC\u8FF6\u90D6\u90E0\u90D9\u90DA\u90E3\u90DF\u90E5\u90D8\u90DB\u90D7\u90DC\u90E4\u9150\"],[\"d440\",\"\u914E\u914F\u91D5\u91E2\u91DA\u965C\u965F\u96BC\u98E3\u9ADF\u9B2F\u4E7F\u5070\u506A\u5061\u505E\u5060\u5053\u504B\u505D\u5072\u5048\u504D\u5041\u505B\u504A\u5062\u5015\u5045\u505F\u5069\u506B\u5063\u5064\u5046\u5040\u506E\u5073\u5057\u5051\u51D0\u526B\u526D\u526C\u526E\u52D6\u52D3\u532D\u539C\u5575\u5576\u553C\u554D\u5550\u5534\u552A\u5551\u5562\u5536\u5535\u5530\u5552\u5545\"],[\"d4a1\",\"\u550C\u5532\u5565\u554E\u5539\u5548\u552D\u553B\u5540\u554B\u570A\u5707\u57FB\u5814\u57E2\u57F6\u57DC\u57F4\u5800\u57ED\u57FD\u5808\u57F8\u580B\u57F3\u57CF\u5807\u57EE\u57E3\u57F2\u57E5\u57EC\u57E1\u580E\u57FC\u5810\u57E7\u5801\u580C\u57F1\u57E9\u57F0\u580D\u5804\u595C\u5A60\u5A58\u5A55\u5A67\u5A5E\u5A38\u5A35\u5A6D\u5A50\u5A5F\u5A65\u5A6C\u5A53\u5A64\u5A57\u5A43\u5A5D\u5A52\u5A44\u5A5B\u5A48\u5A8E\u5A3E\u5A4D\u5A39\u5A4C\u5A70\u5A69\u5A47\u5A51\u5A56\u5A42\u5A5C\u5B72\u5B6E\u5BC1\u5BC0\u5C59\u5D1E\u5D0B\u5D1D\u5D1A\u5D20\u5D0C\u5D28\u5D0D\u5D26\u5D25\u5D0F\"],[\"d540\",\"\u5D30\u5D12\u5D23\u5D1F\u5D2E\u5E3E\u5E34\u5EB1\u5EB4\u5EB9\u5EB2\u5EB3\u5F36\u5F38\u5F9B\u5F96\u5F9F\u608A\u6090\u6086\u60BE\u60B0\u60BA\u60D3\u60D4\u60CF\u60E4\u60D9\u60DD\u60C8\u60B1\u60DB\u60B7\u60CA\u60BF\u60C3\u60CD\u60C0\u6332\u6365\u638A\u6382\u637D\u63BD\u639E\u63AD\u639D\u6397\u63AB\u638E\u636F\u6387\u6390\u636E\u63AF\u6375\u639C\u636D\u63AE\u637C\u63A4\u633B\u639F\"],[\"d5a1\",\"\u6378\u6385\u6381\u6391\u638D\u6370\u6553\u65CD\u6665\u6661\u665B\u6659\u665C\u6662\u6718\u6879\u6887\u6890\u689C\u686D\u686E\u68AE\u68AB\u6956\u686F\u68A3\u68AC\u68A9\u6875\u6874\u68B2\u688F\u6877\u6892\u687C\u686B\u6872\u68AA\u6880\u6871\u687E\u689B\u6896\u688B\u68A0\u6889\u68A4\u6878\u687B\u6891\u688C\u688A\u687D\u6B36\u6B33\u6B37\u6B38\u6B91\u6B8F\u6B8D\u6B8E\u6B8C\u6C2A\u6DC0\u6DAB\u6DB4\u6DB3\u6E74\u6DAC\u6DE9\u6DE2\u6DB7\u6DF6\u6DD4\u6E00\u6DC8\u6DE0\u6DDF\u6DD6\u6DBE\u6DE5\u6DDC\u6DDD\u6DDB\u6DF4\u6DCA\u6DBD\u6DED\u6DF0\u6DBA\u6DD5\u6DC2\u6DCF\u6DC9\"],[\"d640\",\"\u6DD0\u6DF2\u6DD3\u6DFD\u6DD7\u6DCD\u6DE3\u6DBB\u70FA\u710D\u70F7\u7117\u70F4\u710C\u70F0\u7104\u70F3\u7110\u70FC\u70FF\u7106\u7113\u7100\u70F8\u70F6\u710B\u7102\u710E\u727E\u727B\u727C\u727F\u731D\u7317\u7307\u7311\u7318\u730A\u7308\u72FF\u730F\u731E\u7388\u73F6\u73F8\u73F5\u7404\u7401\u73FD\u7407\u7400\u73FA\u73FC\u73FF\u740C\u740B\u73F4\u7408\u7564\u7563\u75CE\u75D2\u75CF\"],[\"d6a1\",\"\u75CB\u75CC\u75D1\u75D0\u768F\u7689\u76D3\u7739\u772F\u772D\u7731\u7732\u7734\u7733\u773D\u7725\u773B\u7735\u7848\u7852\u7849\u784D\u784A\u784C\u7826\u7845\u7850\u7964\u7967\u7969\u796A\u7963\u796B\u7961\u79BB\u79FA\u79F8\u79F6\u79F7\u7A8F\u7A94\u7A90\u7B35\u7B47\u7B34\u7B25\u7B30\u7B22\u7B24\u7B33\u7B18\u7B2A\u7B1D\u7B31\u7B2B\u7B2D\u7B2F\u7B32\u7B38\u7B1A\u7B23\u7C94\u7C98\u7C96\u7CA3\u7D35\u7D3D\u7D38\u7D36\u7D3A\u7D45\u7D2C\u7D29\u7D41\u7D47\u7D3E\u7D3F\u7D4A\u7D3B\u7D28\u7F63\u7F95\u7F9C\u7F9D\u7F9B\u7FCA\u7FCB\u7FCD\u7FD0\u7FD1\u7FC7\u7FCF\u7FC9\u801F\"],[\"d740\",\"\u801E\u801B\u8047\u8043\u8048\u8118\u8125\u8119\u811B\u812D\u811F\u812C\u811E\u8121\u8115\u8127\u811D\u8122\u8211\u8238\u8233\u823A\u8234\u8232\u8274\u8390\u83A3\u83A8\u838D\u837A\u8373\u83A4\u8374\u838F\u8381\u8395\u8399\u8375\u8394\u83A9\u837D\u8383\u838C\u839D\u839B\u83AA\u838B\u837E\u83A5\u83AF\u8388\u8397\u83B0\u837F\u83A6\u8387\u83AE\u8376\u839A\u8659\u8656\u86BF\u86B7\"],[\"d7a1\",\"\u86C2\u86C1\u86C5\u86BA\u86B0\u86C8\u86B9\u86B3\u86B8\u86CC\u86B4\u86BB\u86BC\u86C3\u86BD\u86BE\u8852\u8889\u8895\u88A8\u88A2\u88AA\u889A\u8891\u88A1\u889F\u8898\u88A7\u8899\u889B\u8897\u88A4\u88AC\u888C\u8893\u888E\u8982\u89D6\u89D9\u89D5\u8A30\u8A27\u8A2C\u8A1E\u8C39\u8C3B\u8C5C\u8C5D\u8C7D\u8CA5\u8D7D\u8D7B\u8D79\u8DBC\u8DC2\u8DB9\u8DBF\u8DC1\u8ED8\u8EDE\u8EDD\u8EDC\u8ED7\u8EE0\u8EE1\u9024\u900B\u9011\u901C\u900C\u9021\u90EF\u90EA\u90F0\u90F4\u90F2\u90F3\u90D4\u90EB\u90EC\u90E9\u9156\u9158\u915A\u9153\u9155\u91EC\u91F4\u91F1\u91F3\u91F8\u91E4\u91F9\u91EA\"],[\"d840\",\"\u91EB\u91F7\u91E8\u91EE\u957A\u9586\u9588\u967C\u966D\u966B\u9671\u966F\u96BF\u976A\u9804\u98E5\u9997\u509B\u5095\u5094\u509E\u508B\u50A3\u5083\u508C\u508E\u509D\u5068\u509C\u5092\u5082\u5087\u515F\u51D4\u5312\u5311\u53A4\u53A7\u5591\u55A8\u55A5\u55AD\u5577\u5645\u55A2\u5593\u5588\u558F\u55B5\u5581\u55A3\u5592\u55A4\u557D\u558C\u55A6\u557F\u5595\u55A1\u558E\u570C\u5829\u5837\"],[\"d8a1\",\"\u5819\u581E\u5827\u5823\u5828\u57F5\u5848\u5825\u581C\u581B\u5833\u583F\u5836\u582E\u5839\u5838\u582D\u582C\u583B\u5961\u5AAF\u5A94\u5A9F\u5A7A\u5AA2\u5A9E\u5A78\u5AA6\u5A7C\u5AA5\u5AAC\u5A95\u5AAE\u5A37\u5A84\u5A8A\u5A97\u5A83\u5A8B\u5AA9\u5A7B\u5A7D\u5A8C\u5A9C\u5A8F\u5A93\u5A9D\u5BEA\u5BCD\u5BCB\u5BD4\u5BD1\u5BCA\u5BCE\u5C0C\u5C30\u5D37\u5D43\u5D6B\u5D41\u5D4B\u5D3F\u5D35\u5D51\u5D4E\u5D55\u5D33\u5D3A\u5D52\u5D3D\u5D31\u5D59\u5D42\u5D39\u5D49\u5D38\u5D3C\u5D32\u5D36\u5D40\u5D45\u5E44\u5E41\u5F58\u5FA6\u5FA5\u5FAB\u60C9\u60B9\u60CC\u60E2\u60CE\u60C4\u6114\"],[\"d940\",\"\u60F2\u610A\u6116\u6105\u60F5\u6113\u60F8\u60FC\u60FE\u60C1\u6103\u6118\u611D\u6110\u60FF\u6104\u610B\u624A\u6394\u63B1\u63B0\u63CE\u63E5\u63E8\u63EF\u63C3\u649D\u63F3\u63CA\u63E0\u63F6\u63D5\u63F2\u63F5\u6461\u63DF\u63BE\u63DD\u63DC\u63C4\u63D8\u63D3\u63C2\u63C7\u63CC\u63CB\u63C8\u63F0\u63D7\u63D9\u6532\u6567\u656A\u6564\u655C\u6568\u6565\u658C\u659D\u659E\u65AE\u65D0\u65D2\"],[\"d9a1\",\"\u667C\u666C\u667B\u6680\u6671\u6679\u666A\u6672\u6701\u690C\u68D3\u6904\u68DC\u692A\u68EC\u68EA\u68F1\u690F\u68D6\u68F7\u68EB\u68E4\u68F6\u6913\u6910\u68F3\u68E1\u6907\u68CC\u6908\u6970\u68B4\u6911\u68EF\u68C6\u6914\u68F8\u68D0\u68FD\u68FC\u68E8\u690B\u690A\u6917\u68CE\u68C8\u68DD\u68DE\u68E6\u68F4\u68D1\u6906\u68D4\u68E9\u6915\u6925\u68C7\u6B39\u6B3B\u6B3F\u6B3C\u6B94\u6B97\u6B99\u6B95\u6BBD\u6BF0\u6BF2\u6BF3\u6C30\u6DFC\u6E46\u6E47\u6E1F\u6E49\u6E88\u6E3C\u6E3D\u6E45\u6E62\u6E2B\u6E3F\u6E41\u6E5D\u6E73\u6E1C\u6E33\u6E4B\u6E40\u6E51\u6E3B\u6E03\u6E2E\u6E5E\"],[\"da40\",\"\u6E68\u6E5C\u6E61\u6E31\u6E28\u6E60\u6E71\u6E6B\u6E39\u6E22\u6E30\u6E53\u6E65\u6E27\u6E78\u6E64\u6E77\u6E55\u6E79\u6E52\u6E66\u6E35\u6E36\u6E5A\u7120\u711E\u712F\u70FB\u712E\u7131\u7123\u7125\u7122\u7132\u711F\u7128\u713A\u711B\u724B\u725A\u7288\u7289\u7286\u7285\u728B\u7312\u730B\u7330\u7322\u7331\u7333\u7327\u7332\u732D\u7326\u7323\u7335\u730C\u742E\u742C\u7430\u742B\u7416\"],[\"daa1\",\"\u741A\u7421\u742D\u7431\u7424\u7423\u741D\u7429\u7420\u7432\u74FB\u752F\u756F\u756C\u75E7\u75DA\u75E1\u75E6\u75DD\u75DF\u75E4\u75D7\u7695\u7692\u76DA\u7746\u7747\u7744\u774D\u7745\u774A\u774E\u774B\u774C\u77DE\u77EC\u7860\u7864\u7865\u785C\u786D\u7871\u786A\u786E\u7870\u7869\u7868\u785E\u7862\u7974\u7973\u7972\u7970\u7A02\u7A0A\u7A03\u7A0C\u7A04\u7A99\u7AE6\u7AE4\u7B4A\u7B3B\u7B44\u7B48\u7B4C\u7B4E\u7B40\u7B58\u7B45\u7CA2\u7C9E\u7CA8\u7CA1\u7D58\u7D6F\u7D63\u7D53\u7D56\u7D67\u7D6A\u7D4F\u7D6D\u7D5C\u7D6B\u7D52\u7D54\u7D69\u7D51\u7D5F\u7D4E\u7F3E\u7F3F\u7F65\"],[\"db40\",\"\u7F66\u7FA2\u7FA0\u7FA1\u7FD7\u8051\u804F\u8050\u80FE\u80D4\u8143\u814A\u8152\u814F\u8147\u813D\u814D\u813A\u81E6\u81EE\u81F7\u81F8\u81F9\u8204\u823C\u823D\u823F\u8275\u833B\u83CF\u83F9\u8423\u83C0\u83E8\u8412\u83E7\u83E4\u83FC\u83F6\u8410\u83C6\u83C8\u83EB\u83E3\u83BF\u8401\u83DD\u83E5\u83D8\u83FF\u83E1\u83CB\u83CE\u83D6\u83F5\u83C9\u8409\u840F\u83DE\u8411\u8406\u83C2\u83F3\"],[\"dba1\",\"\u83D5\u83FA\u83C7\u83D1\u83EA\u8413\u83C3\u83EC\u83EE\u83C4\u83FB\u83D7\u83E2\u841B\u83DB\u83FE\u86D8\u86E2\u86E6\u86D3\u86E3\u86DA\u86EA\u86DD\u86EB\u86DC\u86EC\u86E9\u86D7\u86E8\u86D1\u8848\u8856\u8855\u88BA\u88D7\u88B9\u88B8\u88C0\u88BE\u88B6\u88BC\u88B7\u88BD\u88B2\u8901\u88C9\u8995\u8998\u8997\u89DD\u89DA\u89DB\u8A4E\u8A4D\u8A39\u8A59\u8A40\u8A57\u8A58\u8A44\u8A45\u8A52\u8A48\u8A51\u8A4A\u8A4C\u8A4F\u8C5F\u8C81\u8C80\u8CBA\u8CBE\u8CB0\u8CB9\u8CB5\u8D84\u8D80\u8D89\u8DD8\u8DD3\u8DCD\u8DC7\u8DD6\u8DDC\u8DCF\u8DD5\u8DD9\u8DC8\u8DD7\u8DC5\u8EEF\u8EF7\u8EFA\"],[\"dc40\",\"\u8EF9\u8EE6\u8EEE\u8EE5\u8EF5\u8EE7\u8EE8\u8EF6\u8EEB\u8EF1\u8EEC\u8EF4\u8EE9\u902D\u9034\u902F\u9106\u912C\u9104\u90FF\u90FC\u9108\u90F9\u90FB\u9101\u9100\u9107\u9105\u9103\u9161\u9164\u915F\u9162\u9160\u9201\u920A\u9225\u9203\u921A\u9226\u920F\u920C\u9200\u9212\u91FF\u91FD\u9206\u9204\u9227\u9202\u921C\u9224\u9219\u9217\u9205\u9216\u957B\u958D\u958C\u9590\u9687\u967E\u9688\"],[\"dca1\",\"\u9689\u9683\u9680\u96C2\u96C8\u96C3\u96F1\u96F0\u976C\u9770\u976E\u9807\u98A9\u98EB\u9CE6\u9EF9\u4E83\u4E84\u4EB6\u50BD\u50BF\u50C6\u50AE\u50C4\u50CA\u50B4\u50C8\u50C2\u50B0\u50C1\u50BA\u50B1\u50CB\u50C9\u50B6\u50B8\u51D7\u527A\u5278\u527B\u527C\u55C3\u55DB\u55CC\u55D0\u55CB\u55CA\u55DD\u55C0\u55D4\u55C4\u55E9\u55BF\u55D2\u558D\u55CF\u55D5\u55E2\u55D6\u55C8\u55F2\u55CD\u55D9\u55C2\u5714\u5853\u5868\u5864\u584F\u584D\u5849\u586F\u5855\u584E\u585D\u5859\u5865\u585B\u583D\u5863\u5871\u58FC\u5AC7\u5AC4\u5ACB\u5ABA\u5AB8\u5AB1\u5AB5\u5AB0\u5ABF\u5AC8\u5ABB\u5AC6\"],[\"dd40\",\"\u5AB7\u5AC0\u5ACA\u5AB4\u5AB6\u5ACD\u5AB9\u5A90\u5BD6\u5BD8\u5BD9\u5C1F\u5C33\u5D71\u5D63\u5D4A\u5D65\u5D72\u5D6C\u5D5E\u5D68\u5D67\u5D62\u5DF0\u5E4F\u5E4E\u5E4A\u5E4D\u5E4B\u5EC5\u5ECC\u5EC6\u5ECB\u5EC7\u5F40\u5FAF\u5FAD\u60F7\u6149\u614A\u612B\u6145\u6136\u6132\u612E\u6146\u612F\u614F\u6129\u6140\u6220\u9168\u6223\u6225\u6224\u63C5\u63F1\u63EB\u6410\u6412\u6409\u6420\u6424\"],[\"dda1\",\"\u6433\u6443\u641F\u6415\u6418\u6439\u6437\u6422\u6423\u640C\u6426\u6430\u6428\u6441\u6435\u642F\u640A\u641A\u6440\u6425\u6427\u640B\u63E7\u641B\u642E\u6421\u640E\u656F\u6592\u65D3\u6686\u668C\u6695\u6690\u668B\u668A\u6699\u6694\u6678\u6720\u6966\u695F\u6938\u694E\u6962\u6971\u693F\u6945\u696A\u6939\u6942\u6957\u6959\u697A\u6948\u6949\u6935\u696C\u6933\u693D\u6965\u68F0\u6978\u6934\u6969\u6940\u696F\u6944\u6976\u6958\u6941\u6974\u694C\u693B\u694B\u6937\u695C\u694F\u6951\u6932\u6952\u692F\u697B\u693C\u6B46\u6B45\u6B43\u6B42\u6B48\u6B41\u6B9B\uFA0D\u6BFB\u6BFC\"],[\"de40\",\"\u6BF9\u6BF7\u6BF8\u6E9B\u6ED6\u6EC8\u6E8F\u6EC0\u6E9F\u6E93\u6E94\u6EA0\u6EB1\u6EB9\u6EC6\u6ED2\u6EBD\u6EC1\u6E9E\u6EC9\u6EB7\u6EB0\u6ECD\u6EA6\u6ECF\u6EB2\u6EBE\u6EC3\u6EDC\u6ED8\u6E99\u6E92\u6E8E\u6E8D\u6EA4\u6EA1\u6EBF\u6EB3\u6ED0\u6ECA\u6E97\u6EAE\u6EA3\u7147\u7154\u7152\u7163\u7160\u7141\u715D\u7162\u7172\u7178\u716A\u7161\u7142\u7158\u7143\u714B\u7170\u715F\u7150\u7153\"],[\"dea1\",\"\u7144\u714D\u715A\u724F\u728D\u728C\u7291\u7290\u728E\u733C\u7342\u733B\u733A\u7340\u734A\u7349\u7444\u744A\u744B\u7452\u7451\u7457\u7440\u744F\u7450\u744E\u7442\u7446\u744D\u7454\u74E1\u74FF\u74FE\u74FD\u751D\u7579\u7577\u6983\u75EF\u760F\u7603\u75F7\u75FE\u75FC\u75F9\u75F8\u7610\u75FB\u75F6\u75ED\u75F5\u75FD\u7699\u76B5\u76DD\u7755\u775F\u7760\u7752\u7756\u775A\u7769\u7767\u7754\u7759\u776D\u77E0\u7887\u789A\u7894\u788F\u7884\u7895\u7885\u7886\u78A1\u7883\u7879\u7899\u7880\u7896\u787B\u797C\u7982\u797D\u7979\u7A11\u7A18\u7A19\u7A12\u7A17\u7A15\u7A22\u7A13\"],[\"df40\",\"\u7A1B\u7A10\u7AA3\u7AA2\u7A9E\u7AEB\u7B66\u7B64\u7B6D\u7B74\u7B69\u7B72\u7B65\u7B73\u7B71\u7B70\u7B61\u7B78\u7B76\u7B63\u7CB2\u7CB4\u7CAF\u7D88\u7D86\u7D80\u7D8D\u7D7F\u7D85\u7D7A\u7D8E\u7D7B\u7D83\u7D7C\u7D8C\u7D94\u7D84\u7D7D\u7D92\u7F6D\u7F6B\u7F67\u7F68\u7F6C\u7FA6\u7FA5\u7FA7\u7FDB\u7FDC\u8021\u8164\u8160\u8177\u815C\u8169\u815B\u8162\u8172\u6721\u815E\u8176\u8167\u816F\"],[\"dfa1\",\"\u8144\u8161\u821D\u8249\u8244\u8240\u8242\u8245\u84F1\u843F\u8456\u8476\u8479\u848F\u848D\u8465\u8451\u8440\u8486\u8467\u8430\u844D\u847D\u845A\u8459\u8474\u8473\u845D\u8507\u845E\u8437\u843A\u8434\u847A\u8443\u8478\u8432\u8445\u8429\u83D9\u844B\u842F\u8442\u842D\u845F\u8470\u8439\u844E\u844C\u8452\u846F\u84C5\u848E\u843B\u8447\u8436\u8433\u8468\u847E\u8444\u842B\u8460\u8454\u846E\u8450\u870B\u8704\u86F7\u870C\u86FA\u86D6\u86F5\u874D\u86F8\u870E\u8709\u8701\u86F6\u870D\u8705\u88D6\u88CB\u88CD\u88CE\u88DE\u88DB\u88DA\u88CC\u88D0\u8985\u899B\u89DF\u89E5\u89E4\"],[\"e040\",\"\u89E1\u89E0\u89E2\u89DC\u89E6\u8A76\u8A86\u8A7F\u8A61\u8A3F\u8A77\u8A82\u8A84\u8A75\u8A83\u8A81\u8A74\u8A7A\u8C3C\u8C4B\u8C4A\u8C65\u8C64\u8C66\u8C86\u8C84\u8C85\u8CCC\u8D68\u8D69\u8D91\u8D8C\u8D8E\u8D8F\u8D8D\u8D93\u8D94\u8D90\u8D92\u8DF0\u8DE0\u8DEC\u8DF1\u8DEE\u8DD0\u8DE9\u8DE3\u8DE2\u8DE7\u8DF2\u8DEB\u8DF4\u8F06\u8EFF\u8F01\u8F00\u8F05\u8F07\u8F08\u8F02\u8F0B\u9052\u903F\"],[\"e0a1\",\"\u9044\u9049\u903D\u9110\u910D\u910F\u9111\u9116\u9114\u910B\u910E\u916E\u916F\u9248\u9252\u9230\u923A\u9266\u9233\u9265\u925E\u9283\u922E\u924A\u9246\u926D\u926C\u924F\u9260\u9267\u926F\u9236\u9261\u9270\u9231\u9254\u9263\u9250\u9272\u924E\u9253\u924C\u9256\u9232\u959F\u959C\u959E\u959B\u9692\u9693\u9691\u9697\u96CE\u96FA\u96FD\u96F8\u96F5\u9773\u9777\u9778\u9772\u980F\u980D\u980E\u98AC\u98F6\u98F9\u99AF\u99B2\u99B0\u99B5\u9AAD\u9AAB\u9B5B\u9CEA\u9CED\u9CE7\u9E80\u9EFD\u50E6\u50D4\u50D7\u50E8\u50F3\u50DB\u50EA\u50DD\u50E4\u50D3\u50EC\u50F0\u50EF\u50E3\u50E0\"],[\"e140\",\"\u51D8\u5280\u5281\u52E9\u52EB\u5330\u53AC\u5627\u5615\u560C\u5612\u55FC\u560F\u561C\u5601\u5613\u5602\u55FA\u561D\u5604\u55FF\u55F9\u5889\u587C\u5890\u5898\u5886\u5881\u587F\u5874\u588B\u587A\u5887\u5891\u588E\u5876\u5882\u5888\u587B\u5894\u588F\u58FE\u596B\u5ADC\u5AEE\u5AE5\u5AD5\u5AEA\u5ADA\u5AED\u5AEB\u5AF3\u5AE2\u5AE0\u5ADB\u5AEC\u5ADE\u5ADD\u5AD9\u5AE8\u5ADF\u5B77\u5BE0\"],[\"e1a1\",\"\u5BE3\u5C63\u5D82\u5D80\u5D7D\u5D86\u5D7A\u5D81\u5D77\u5D8A\u5D89\u5D88\u5D7E\u5D7C\u5D8D\u5D79\u5D7F\u5E58\u5E59\u5E53\u5ED8\u5ED1\u5ED7\u5ECE\u5EDC\u5ED5\u5ED9\u5ED2\u5ED4\u5F44\u5F43\u5F6F\u5FB6\u612C\u6128\u6141\u615E\u6171\u6173\u6152\u6153\u6172\u616C\u6180\u6174\u6154\u617A\u615B\u6165\u613B\u616A\u6161\u6156\u6229\u6227\u622B\u642B\u644D\u645B\u645D\u6474\u6476\u6472\u6473\u647D\u6475\u6466\u64A6\u644E\u6482\u645E\u645C\u644B\u6453\u6460\u6450\u647F\u643F\u646C\u646B\u6459\u6465\u6477\u6573\u65A0\u66A1\u66A0\u669F\u6705\u6704\u6722\u69B1\u69B6\u69C9\"],[\"e240\",\"\u69A0\u69CE\u6996\u69B0\u69AC\u69BC\u6991\u6999\u698E\u69A7\u698D\u69A9\u69BE\u69AF\u69BF\u69C4\u69BD\u69A4\u69D4\u69B9\u69CA\u699A\u69CF\u69B3\u6993\u69AA\u69A1\u699E\u69D9\u6997\u6990\u69C2\u69B5\u69A5\u69C6\u6B4A\u6B4D\u6B4B\u6B9E\u6B9F\u6BA0\u6BC3\u6BC4\u6BFE\u6ECE\u6EF5\u6EF1\u6F03\u6F25\u6EF8\u6F37\u6EFB\u6F2E\u6F09\u6F4E\u6F19\u6F1A\u6F27\u6F18\u6F3B\u6F12\u6EED\u6F0A\"],[\"e2a1\",\"\u6F36\u6F73\u6EF9\u6EEE\u6F2D\u6F40\u6F30\u6F3C\u6F35\u6EEB\u6F07\u6F0E\u6F43\u6F05\u6EFD\u6EF6\u6F39\u6F1C\u6EFC\u6F3A\u6F1F\u6F0D\u6F1E\u6F08\u6F21\u7187\u7190\u7189\u7180\u7185\u7182\u718F\u717B\u7186\u7181\u7197\u7244\u7253\u7297\u7295\u7293\u7343\u734D\u7351\u734C\u7462\u7473\u7471\u7475\u7472\u7467\u746E\u7500\u7502\u7503\u757D\u7590\u7616\u7608\u760C\u7615\u7611\u760A\u7614\u76B8\u7781\u777C\u7785\u7782\u776E\u7780\u776F\u777E\u7783\u78B2\u78AA\u78B4\u78AD\u78A8\u787E\u78AB\u789E\u78A5\u78A0\u78AC\u78A2\u78A4\u7998\u798A\u798B\u7996\u7995\u7994\u7993\"],[\"e340\",\"\u7997\u7988\u7992\u7990\u7A2B\u7A4A\u7A30\u7A2F\u7A28\u7A26\u7AA8\u7AAB\u7AAC\u7AEE\u7B88\u7B9C\u7B8A\u7B91\u7B90\u7B96\u7B8D\u7B8C\u7B9B\u7B8E\u7B85\u7B98\u5284\u7B99\u7BA4\u7B82\u7CBB\u7CBF\u7CBC\u7CBA\u7DA7\u7DB7\u7DC2\u7DA3\u7DAA\u7DC1\u7DC0\u7DC5\u7D9D\u7DCE\u7DC4\u7DC6\u7DCB\u7DCC\u7DAF\u7DB9\u7D96\u7DBC\u7D9F\u7DA6\u7DAE\u7DA9\u7DA1\u7DC9\u7F73\u7FE2\u7FE3\u7FE5\u7FDE\"],[\"e3a1\",\"\u8024\u805D\u805C\u8189\u8186\u8183\u8187\u818D\u818C\u818B\u8215\u8497\u84A4\u84A1\u849F\u84BA\u84CE\u84C2\u84AC\u84AE\u84AB\u84B9\u84B4\u84C1\u84CD\u84AA\u849A\u84B1\u84D0\u849D\u84A7\u84BB\u84A2\u8494\u84C7\u84CC\u849B\u84A9\u84AF\u84A8\u84D6\u8498\u84B6\u84CF\u84A0\u84D7\u84D4\u84D2\u84DB\u84B0\u8491\u8661\u8733\u8723\u8728\u876B\u8740\u872E\u871E\u8721\u8719\u871B\u8743\u872C\u8741\u873E\u8746\u8720\u8732\u872A\u872D\u873C\u8712\u873A\u8731\u8735\u8742\u8726\u8727\u8738\u8724\u871A\u8730\u8711\u88F7\u88E7\u88F1\u88F2\u88FA\u88FE\u88EE\u88FC\u88F6\u88FB\"],[\"e440\",\"\u88F0\u88EC\u88EB\u899D\u89A1\u899F\u899E\u89E9\u89EB\u89E8\u8AAB\u8A99\u8A8B\u8A92\u8A8F\u8A96\u8C3D\u8C68\u8C69\u8CD5\u8CCF\u8CD7\u8D96\u8E09\u8E02\u8DFF\u8E0D\u8DFD\u8E0A\u8E03\u8E07\u8E06\u8E05\u8DFE\u8E00\u8E04\u8F10\u8F11\u8F0E\u8F0D\u9123\u911C\u9120\u9122\u911F\u911D\u911A\u9124\u9121\u911B\u917A\u9172\u9179\u9173\u92A5\u92A4\u9276\u929B\u927A\u92A0\u9294\u92AA\u928D\"],[\"e4a1\",\"\u92A6\u929A\u92AB\u9279\u9297\u927F\u92A3\u92EE\u928E\u9282\u9295\u92A2\u927D\u9288\u92A1\u928A\u9286\u928C\u9299\u92A7\u927E\u9287\u92A9\u929D\u928B\u922D\u969E\u96A1\u96FF\u9758\u977D\u977A\u977E\u9783\u9780\u9782\u977B\u9784\u9781\u977F\u97CE\u97CD\u9816\u98AD\u98AE\u9902\u9900\u9907\u999D\u999C\u99C3\u99B9\u99BB\u99BA\u99C2\u99BD\u99C7\u9AB1\u9AE3\u9AE7\u9B3E\u9B3F\u9B60\u9B61\u9B5F\u9CF1\u9CF2\u9CF5\u9EA7\u50FF\u5103\u5130\u50F8\u5106\u5107\u50F6\u50FE\u510B\u510C\u50FD\u510A\u528B\u528C\u52F1\u52EF\u5648\u5642\u564C\u5635\u5641\u564A\u5649\u5646\u5658\"],[\"e540\",\"\u565A\u5640\u5633\u563D\u562C\u563E\u5638\u562A\u563A\u571A\u58AB\u589D\u58B1\u58A0\u58A3\u58AF\u58AC\u58A5\u58A1\u58FF\u5AFF\u5AF4\u5AFD\u5AF7\u5AF6\u5B03\u5AF8\u5B02\u5AF9\u5B01\u5B07\u5B05\u5B0F\u5C67\u5D99\u5D97\u5D9F\u5D92\u5DA2\u5D93\u5D95\u5DA0\u5D9C\u5DA1\u5D9A\u5D9E\u5E69\u5E5D\u5E60\u5E5C\u7DF3\u5EDB\u5EDE\u5EE1\u5F49\u5FB2\u618B\u6183\u6179\u61B1\u61B0\u61A2\u6189\"],[\"e5a1\",\"\u619B\u6193\u61AF\u61AD\u619F\u6192\u61AA\u61A1\u618D\u6166\u61B3\u622D\u646E\u6470\u6496\u64A0\u6485\u6497\u649C\u648F\u648B\u648A\u648C\u64A3\u649F\u6468\u64B1\u6498\u6576\u657A\u6579\u657B\u65B2\u65B3\u66B5\u66B0\u66A9\u66B2\u66B7\u66AA\u66AF\u6A00\u6A06\u6A17\u69E5\u69F8\u6A15\u69F1\u69E4\u6A20\u69FF\u69EC\u69E2\u6A1B\u6A1D\u69FE\u6A27\u69F2\u69EE\u6A14\u69F7\u69E7\u6A40\u6A08\u69E6\u69FB\u6A0D\u69FC\u69EB\u6A09\u6A04\u6A18\u6A25\u6A0F\u69F6\u6A26\u6A07\u69F4\u6A16\u6B51\u6BA5\u6BA3\u6BA2\u6BA6\u6C01\u6C00\u6BFF\u6C02\u6F41\u6F26\u6F7E\u6F87\u6FC6\u6F92\"],[\"e640\",\"\u6F8D\u6F89\u6F8C\u6F62\u6F4F\u6F85\u6F5A\u6F96\u6F76\u6F6C\u6F82\u6F55\u6F72\u6F52\u6F50\u6F57\u6F94\u6F93\u6F5D\u6F00\u6F61\u6F6B\u6F7D\u6F67\u6F90\u6F53\u6F8B\u6F69\u6F7F\u6F95\u6F63\u6F77\u6F6A\u6F7B\u71B2\u71AF\u719B\u71B0\u71A0\u719A\u71A9\u71B5\u719D\u71A5\u719E\u71A4\u71A1\u71AA\u719C\u71A7\u71B3\u7298\u729A\u7358\u7352\u735E\u735F\u7360\u735D\u735B\u7361\u735A\u7359\"],[\"e6a1\",\"\u7362\u7487\u7489\u748A\u7486\u7481\u747D\u7485\u7488\u747C\u7479\u7508\u7507\u757E\u7625\u761E\u7619\u761D\u761C\u7623\u761A\u7628\u761B\u769C\u769D\u769E\u769B\u778D\u778F\u7789\u7788\u78CD\u78BB\u78CF\u78CC\u78D1\u78CE\u78D4\u78C8\u78C3\u78C4\u78C9\u799A\u79A1\u79A0\u799C\u79A2\u799B\u6B76\u7A39\u7AB2\u7AB4\u7AB3\u7BB7\u7BCB\u7BBE\u7BAC\u7BCE\u7BAF\u7BB9\u7BCA\u7BB5\u7CC5\u7CC8\u7CCC\u7CCB\u7DF7\u7DDB\u7DEA\u7DE7\u7DD7\u7DE1\u7E03\u7DFA\u7DE6\u7DF6\u7DF1\u7DF0\u7DEE\u7DDF\u7F76\u7FAC\u7FB0\u7FAD\u7FED\u7FEB\u7FEA\u7FEC\u7FE6\u7FE8\u8064\u8067\u81A3\u819F\"],[\"e740\",\"\u819E\u8195\u81A2\u8199\u8197\u8216\u824F\u8253\u8252\u8250\u824E\u8251\u8524\u853B\u850F\u8500\u8529\u850E\u8509\u850D\u851F\u850A\u8527\u851C\u84FB\u852B\u84FA\u8508\u850C\u84F4\u852A\u84F2\u8515\u84F7\u84EB\u84F3\u84FC\u8512\u84EA\u84E9\u8516\u84FE\u8528\u851D\u852E\u8502\u84FD\u851E\u84F6\u8531\u8526\u84E7\u84E8\u84F0\u84EF\u84F9\u8518\u8520\u8530\u850B\u8519\u852F\u8662\"],[\"e7a1\",\"\u8756\u8763\u8764\u8777\u87E1\u8773\u8758\u8754\u875B\u8752\u8761\u875A\u8751\u875E\u876D\u876A\u8750\u874E\u875F\u875D\u876F\u876C\u877A\u876E\u875C\u8765\u874F\u877B\u8775\u8762\u8767\u8769\u885A\u8905\u890C\u8914\u890B\u8917\u8918\u8919\u8906\u8916\u8911\u890E\u8909\u89A2\u89A4\u89A3\u89ED\u89F0\u89EC\u8ACF\u8AC6\u8AB8\u8AD3\u8AD1\u8AD4\u8AD5\u8ABB\u8AD7\u8ABE\u8AC0\u8AC5\u8AD8\u8AC3\u8ABA\u8ABD\u8AD9\u8C3E\u8C4D\u8C8F\u8CE5\u8CDF\u8CD9\u8CE8\u8CDA\u8CDD\u8CE7\u8DA0\u8D9C\u8DA1\u8D9B\u8E20\u8E23\u8E25\u8E24\u8E2E\u8E15\u8E1B\u8E16\u8E11\u8E19\u8E26\u8E27\"],[\"e840\",\"\u8E14\u8E12\u8E18\u8E13\u8E1C\u8E17\u8E1A\u8F2C\u8F24\u8F18\u8F1A\u8F20\u8F23\u8F16\u8F17\u9073\u9070\u906F\u9067\u906B\u912F\u912B\u9129\u912A\u9132\u9126\u912E\u9185\u9186\u918A\u9181\u9182\u9184\u9180\u92D0\u92C3\u92C4\u92C0\u92D9\u92B6\u92CF\u92F1\u92DF\u92D8\u92E9\u92D7\u92DD\u92CC\u92EF\u92C2\u92E8\u92CA\u92C8\u92CE\u92E6\u92CD\u92D5\u92C9\u92E0\u92DE\u92E7\u92D1\u92D3\"],[\"e8a1\",\"\u92B5\u92E1\u92C6\u92B4\u957C\u95AC\u95AB\u95AE\u95B0\u96A4\u96A2\u96D3\u9705\u9708\u9702\u975A\u978A\u978E\u9788\u97D0\u97CF\u981E\u981D\u9826\u9829\u9828\u9820\u981B\u9827\u98B2\u9908\u98FA\u9911\u9914\u9916\u9917\u9915\u99DC\u99CD\u99CF\u99D3\u99D4\u99CE\u99C9\u99D6\u99D8\u99CB\u99D7\u99CC\u9AB3\u9AEC\u9AEB\u9AF3\u9AF2\u9AF1\u9B46\u9B43\u9B67\u9B74\u9B71\u9B66\u9B76\u9B75\u9B70\u9B68\u9B64\u9B6C\u9CFC\u9CFA\u9CFD\u9CFF\u9CF7\u9D07\u9D00\u9CF9\u9CFB\u9D08\u9D05\u9D04\u9E83\u9ED3\u9F0F\u9F10\u511C\u5113\u5117\u511A\u5111\u51DE\u5334\u53E1\u5670\u5660\u566E\"],[\"e940\",\"\u5673\u5666\u5663\u566D\u5672\u565E\u5677\u571C\u571B\u58C8\u58BD\u58C9\u58BF\u58BA\u58C2\u58BC\u58C6\u5B17\u5B19\u5B1B\u5B21\u5B14\u5B13\u5B10\u5B16\u5B28\u5B1A\u5B20\u5B1E\u5BEF\u5DAC\u5DB1\u5DA9\u5DA7\u5DB5\u5DB0\u5DAE\u5DAA\u5DA8\u5DB2\u5DAD\u5DAF\u5DB4\u5E67\u5E68\u5E66\u5E6F\u5EE9\u5EE7\u5EE6\u5EE8\u5EE5\u5F4B\u5FBC\u619D\u61A8\u6196\u61C5\u61B4\u61C6\u61C1\u61CC\u61BA\"],[\"e9a1\",\"\u61BF\u61B8\u618C\u64D7\u64D6\u64D0\u64CF\u64C9\u64BD\u6489\u64C3\u64DB\u64F3\u64D9\u6533\u657F\u657C\u65A2\u66C8\u66BE\u66C0\u66CA\u66CB\u66CF\u66BD\u66BB\u66BA\u66CC\u6723\u6A34\u6A66\u6A49\u6A67\u6A32\u6A68\u6A3E\u6A5D\u6A6D\u6A76\u6A5B\u6A51\u6A28\u6A5A\u6A3B\u6A3F\u6A41\u6A6A\u6A64\u6A50\u6A4F\u6A54\u6A6F\u6A69\u6A60\u6A3C\u6A5E\u6A56\u6A55\u6A4D\u6A4E\u6A46\u6B55\u6B54\u6B56\u6BA7\u6BAA\u6BAB\u6BC8\u6BC7\u6C04\u6C03\u6C06\u6FAD\u6FCB\u6FA3\u6FC7\u6FBC\u6FCE\u6FC8\u6F5E\u6FC4\u6FBD\u6F9E\u6FCA\u6FA8\u7004\u6FA5\u6FAE\u6FBA\u6FAC\u6FAA\u6FCF\u6FBF\u6FB8\"],[\"ea40\",\"\u6FA2\u6FC9\u6FAB\u6FCD\u6FAF\u6FB2\u6FB0\u71C5\u71C2\u71BF\u71B8\u71D6\u71C0\u71C1\u71CB\u71D4\u71CA\u71C7\u71CF\u71BD\u71D8\u71BC\u71C6\u71DA\u71DB\u729D\u729E\u7369\u7366\u7367\u736C\u7365\u736B\u736A\u747F\u749A\u74A0\u7494\u7492\u7495\u74A1\u750B\u7580\u762F\u762D\u7631\u763D\u7633\u763C\u7635\u7632\u7630\u76BB\u76E6\u779A\u779D\u77A1\u779C\u779B\u77A2\u77A3\u7795\u7799\"],[\"eaa1\",\"\u7797\u78DD\u78E9\u78E5\u78EA\u78DE\u78E3\u78DB\u78E1\u78E2\u78ED\u78DF\u78E0\u79A4\u7A44\u7A48\u7A47\u7AB6\u7AB8\u7AB5\u7AB1\u7AB7\u7BDE\u7BE3\u7BE7\u7BDD\u7BD5\u7BE5\u7BDA\u7BE8\u7BF9\u7BD4\u7BEA\u7BE2\u7BDC\u7BEB\u7BD8\u7BDF\u7CD2\u7CD4\u7CD7\u7CD0\u7CD1\u7E12\u7E21\u7E17\u7E0C\u7E1F\u7E20\u7E13\u7E0E\u7E1C\u7E15\u7E1A\u7E22\u7E0B\u7E0F\u7E16\u7E0D\u7E14\u7E25\u7E24\u7F43\u7F7B\u7F7C\u7F7A\u7FB1\u7FEF\u802A\u8029\u806C\u81B1\u81A6\u81AE\u81B9\u81B5\u81AB\u81B0\u81AC\u81B4\u81B2\u81B7\u81A7\u81F2\u8255\u8256\u8257\u8556\u8545\u856B\u854D\u8553\u8561\u8558\"],[\"eb40\",\"\u8540\u8546\u8564\u8541\u8562\u8544\u8551\u8547\u8563\u853E\u855B\u8571\u854E\u856E\u8575\u8555\u8567\u8560\u858C\u8566\u855D\u8554\u8565\u856C\u8663\u8665\u8664\u879B\u878F\u8797\u8793\u8792\u8788\u8781\u8796\u8798\u8779\u8787\u87A3\u8785\u8790\u8791\u879D\u8784\u8794\u879C\u879A\u8789\u891E\u8926\u8930\u892D\u892E\u8927\u8931\u8922\u8929\u8923\u892F\u892C\u891F\u89F1\u8AE0\"],[\"eba1\",\"\u8AE2\u8AF2\u8AF4\u8AF5\u8ADD\u8B14\u8AE4\u8ADF\u8AF0\u8AC8\u8ADE\u8AE1\u8AE8\u8AFF\u8AEF\u8AFB\u8C91\u8C92\u8C90\u8CF5\u8CEE\u8CF1\u8CF0\u8CF3\u8D6C\u8D6E\u8DA5\u8DA7\u8E33\u8E3E\u8E38\u8E40\u8E45\u8E36\u8E3C\u8E3D\u8E41\u8E30\u8E3F\u8EBD\u8F36\u8F2E\u8F35\u8F32\u8F39\u8F37\u8F34\u9076\u9079\u907B\u9086\u90FA\u9133\u9135\u9136\u9193\u9190\u9191\u918D\u918F\u9327\u931E\u9308\u931F\u9306\u930F\u937A\u9338\u933C\u931B\u9323\u9312\u9301\u9346\u932D\u930E\u930D\u92CB\u931D\u92FA\u9325\u9313\u92F9\u92F7\u9334\u9302\u9324\u92FF\u9329\u9339\u9335\u932A\u9314\u930C\"],[\"ec40\",\"\u930B\u92FE\u9309\u9300\u92FB\u9316\u95BC\u95CD\u95BE\u95B9\u95BA\u95B6\u95BF\u95B5\u95BD\u96A9\u96D4\u970B\u9712\u9710\u9799\u9797\u9794\u97F0\u97F8\u9835\u982F\u9832\u9924\u991F\u9927\u9929\u999E\u99EE\u99EC\u99E5\u99E4\u99F0\u99E3\u99EA\u99E9\u99E7\u9AB9\u9ABF\u9AB4\u9ABB\u9AF6\u9AFA\u9AF9\u9AF7\u9B33\u9B80\u9B85\u9B87\u9B7C\u9B7E\u9B7B\u9B82\u9B93\u9B92\u9B90\u9B7A\u9B95\"],[\"eca1\",\"\u9B7D\u9B88\u9D25\u9D17\u9D20\u9D1E\u9D14\u9D29\u9D1D\u9D18\u9D22\u9D10\u9D19\u9D1F\u9E88\u9E86\u9E87\u9EAE\u9EAD\u9ED5\u9ED6\u9EFA\u9F12\u9F3D\u5126\u5125\u5122\u5124\u5120\u5129\u52F4\u5693\u568C\u568D\u5686\u5684\u5683\u567E\u5682\u567F\u5681\u58D6\u58D4\u58CF\u58D2\u5B2D\u5B25\u5B32\u5B23\u5B2C\u5B27\u5B26\u5B2F\u5B2E\u5B7B\u5BF1\u5BF2\u5DB7\u5E6C\u5E6A\u5FBE\u5FBB\u61C3\u61B5\u61BC\u61E7\u61E0\u61E5\u61E4\u61E8\u61DE\u64EF\u64E9\u64E3\u64EB\u64E4\u64E8\u6581\u6580\u65B6\u65DA\u66D2\u6A8D\u6A96\u6A81\u6AA5\u6A89\u6A9F\u6A9B\u6AA1\u6A9E\u6A87\u6A93\u6A8E\"],[\"ed40\",\"\u6A95\u6A83\u6AA8\u6AA4\u6A91\u6A7F\u6AA6\u6A9A\u6A85\u6A8C\u6A92\u6B5B\u6BAD\u6C09\u6FCC\u6FA9\u6FF4\u6FD4\u6FE3\u6FDC\u6FED\u6FE7\u6FE6\u6FDE\u6FF2\u6FDD\u6FE2\u6FE8\u71E1\u71F1\u71E8\u71F2\u71E4\u71F0\u71E2\u7373\u736E\u736F\u7497\u74B2\u74AB\u7490\u74AA\u74AD\u74B1\u74A5\u74AF\u7510\u7511\u7512\u750F\u7584\u7643\u7648\u7649\u7647\u76A4\u76E9\u77B5\u77AB\u77B2\u77B7\u77B6\"],[\"eda1\",\"\u77B4\u77B1\u77A8\u77F0\u78F3\u78FD\u7902\u78FB\u78FC\u78F2\u7905\u78F9\u78FE\u7904\u79AB\u79A8\u7A5C\u7A5B\u7A56\u7A58\u7A54\u7A5A\u7ABE\u7AC0\u7AC1\u7C05\u7C0F\u7BF2\u7C00\u7BFF\u7BFB\u7C0E\u7BF4\u7C0B\u7BF3\u7C02\u7C09\u7C03\u7C01\u7BF8\u7BFD\u7C06\u7BF0\u7BF1\u7C10\u7C0A\u7CE8\u7E2D\u7E3C\u7E42\u7E33\u9848\u7E38\u7E2A\u7E49\u7E40\u7E47\u7E29\u7E4C\u7E30\u7E3B\u7E36\u7E44\u7E3A\u7F45\u7F7F\u7F7E\u7F7D\u7FF4\u7FF2\u802C\u81BB\u81C4\u81CC\u81CA\u81C5\u81C7\u81BC\u81E9\u825B\u825A\u825C\u8583\u8580\u858F\u85A7\u8595\u85A0\u858B\u85A3\u857B\u85A4\u859A\u859E\"],[\"ee40\",\"\u8577\u857C\u8589\u85A1\u857A\u8578\u8557\u858E\u8596\u8586\u858D\u8599\u859D\u8581\u85A2\u8582\u8588\u8585\u8579\u8576\u8598\u8590\u859F\u8668\u87BE\u87AA\u87AD\u87C5\u87B0\u87AC\u87B9\u87B5\u87BC\u87AE\u87C9\u87C3\u87C2\u87CC\u87B7\u87AF\u87C4\u87CA\u87B4\u87B6\u87BF\u87B8\u87BD\u87DE\u87B2\u8935\u8933\u893C\u893E\u8941\u8952\u8937\u8942\u89AD\u89AF\u89AE\u89F2\u89F3\u8B1E\"],[\"eea1\",\"\u8B18\u8B16\u8B11\u8B05\u8B0B\u8B22\u8B0F\u8B12\u8B15\u8B07\u8B0D\u8B08\u8B06\u8B1C\u8B13\u8B1A\u8C4F\u8C70\u8C72\u8C71\u8C6F\u8C95\u8C94\u8CF9\u8D6F\u8E4E\u8E4D\u8E53\u8E50\u8E4C\u8E47\u8F43\u8F40\u9085\u907E\u9138\u919A\u91A2\u919B\u9199\u919F\u91A1\u919D\u91A0\u93A1\u9383\u93AF\u9364\u9356\u9347\u937C\u9358\u935C\u9376\u9349\u9350\u9351\u9360\u936D\u938F\u934C\u936A\u9379\u9357\u9355\u9352\u934F\u9371\u9377\u937B\u9361\u935E\u9363\u9367\u9380\u934E\u9359\u95C7\u95C0\u95C9\u95C3\u95C5\u95B7\u96AE\u96B0\u96AC\u9720\u971F\u9718\u971D\u9719\u979A\u97A1\u979C\"],[\"ef40\",\"\u979E\u979D\u97D5\u97D4\u97F1\u9841\u9844\u984A\u9849\u9845\u9843\u9925\u992B\u992C\u992A\u9933\u9932\u992F\u992D\u9931\u9930\u9998\u99A3\u99A1\u9A02\u99FA\u99F4\u99F7\u99F9\u99F8\u99F6\u99FB\u99FD\u99FE\u99FC\u9A03\u9ABE\u9AFE\u9AFD\u9B01\u9AFC\u9B48\u9B9A\u9BA8\u9B9E\u9B9B\u9BA6\u9BA1\u9BA5\u9BA4\u9B86\u9BA2\u9BA0\u9BAF\u9D33\u9D41\u9D67\u9D36\u9D2E\u9D2F\u9D31\u9D38\u9D30\"],[\"efa1\",\"\u9D45\u9D42\u9D43\u9D3E\u9D37\u9D40\u9D3D\u7FF5\u9D2D\u9E8A\u9E89\u9E8D\u9EB0\u9EC8\u9EDA\u9EFB\u9EFF\u9F24\u9F23\u9F22\u9F54\u9FA0\u5131\u512D\u512E\u5698\u569C\u5697\u569A\u569D\u5699\u5970\u5B3C\u5C69\u5C6A\u5DC0\u5E6D\u5E6E\u61D8\u61DF\u61ED\u61EE\u61F1\u61EA\u61F0\u61EB\u61D6\u61E9\u64FF\u6504\u64FD\u64F8\u6501\u6503\u64FC\u6594\u65DB\u66DA\u66DB\u66D8\u6AC5\u6AB9\u6ABD\u6AE1\u6AC6\u6ABA\u6AB6\u6AB7\u6AC7\u6AB4\u6AAD\u6B5E\u6BC9\u6C0B\u7007\u700C\u700D\u7001\u7005\u7014\u700E\u6FFF\u7000\u6FFB\u7026\u6FFC\u6FF7\u700A\u7201\u71FF\u71F9\u7203\u71FD\u7376\"],[\"f040\",\"\u74B8\u74C0\u74B5\u74C1\u74BE\u74B6\u74BB\u74C2\u7514\u7513\u765C\u7664\u7659\u7650\u7653\u7657\u765A\u76A6\u76BD\u76EC\u77C2\u77BA\u78FF\u790C\u7913\u7914\u7909\u7910\u7912\u7911\u79AD\u79AC\u7A5F\u7C1C\u7C29\u7C19\u7C20\u7C1F\u7C2D\u7C1D\u7C26\u7C28\u7C22\u7C25\u7C30\u7E5C\u7E50\u7E56\u7E63\u7E58\u7E62\u7E5F\u7E51\u7E60\u7E57\u7E53\u7FB5\u7FB3\u7FF7\u7FF8\u8075\u81D1\u81D2\"],[\"f0a1\",\"\u81D0\u825F\u825E\u85B4\u85C6\u85C0\u85C3\u85C2\u85B3\u85B5\u85BD\u85C7\u85C4\u85BF\u85CB\u85CE\u85C8\u85C5\u85B1\u85B6\u85D2\u8624\u85B8\u85B7\u85BE\u8669\u87E7\u87E6\u87E2\u87DB\u87EB\u87EA\u87E5\u87DF\u87F3\u87E4\u87D4\u87DC\u87D3\u87ED\u87D8\u87E3\u87A4\u87D7\u87D9\u8801\u87F4\u87E8\u87DD\u8953\u894B\u894F\u894C\u8946\u8950\u8951\u8949\u8B2A\u8B27\u8B23\u8B33\u8B30\u8B35\u8B47\u8B2F\u8B3C\u8B3E\u8B31\u8B25\u8B37\u8B26\u8B36\u8B2E\u8B24\u8B3B\u8B3D\u8B3A\u8C42\u8C75\u8C99\u8C98\u8C97\u8CFE\u8D04\u8D02\u8D00\u8E5C\u8E62\u8E60\u8E57\u8E56\u8E5E\u8E65\u8E67\"],[\"f140\",\"\u8E5B\u8E5A\u8E61\u8E5D\u8E69\u8E54\u8F46\u8F47\u8F48\u8F4B\u9128\u913A\u913B\u913E\u91A8\u91A5\u91A7\u91AF\u91AA\u93B5\u938C\u9392\u93B7\u939B\u939D\u9389\u93A7\u938E\u93AA\u939E\u93A6\u9395\u9388\u9399\u939F\u938D\u93B1\u9391\u93B2\u93A4\u93A8\u93B4\u93A3\u93A5\u95D2\u95D3\u95D1\u96B3\u96D7\u96DA\u5DC2\u96DF\u96D8\u96DD\u9723\u9722\u9725\u97AC\u97AE\u97A8\u97AB\u97A4\u97AA\"],[\"f1a1\",\"\u97A2\u97A5\u97D7\u97D9\u97D6\u97D8\u97FA\u9850\u9851\u9852\u98B8\u9941\u993C\u993A\u9A0F\u9A0B\u9A09\u9A0D\u9A04\u9A11\u9A0A\u9A05\u9A07\u9A06\u9AC0\u9ADC\u9B08\u9B04\u9B05\u9B29\u9B35\u9B4A\u9B4C\u9B4B\u9BC7\u9BC6\u9BC3\u9BBF\u9BC1\u9BB5\u9BB8\u9BD3\u9BB6\u9BC4\u9BB9\u9BBD\u9D5C\u9D53\u9D4F\u9D4A\u9D5B\u9D4B\u9D59\u9D56\u9D4C\u9D57\u9D52\u9D54\u9D5F\u9D58\u9D5A\u9E8E\u9E8C\u9EDF\u9F01\u9F00\u9F16\u9F25\u9F2B\u9F2A\u9F29\u9F28\u9F4C\u9F55\u5134\u5135\u5296\u52F7\u53B4\u56AB\u56AD\u56A6\u56A7\u56AA\u56AC\u58DA\u58DD\u58DB\u5912\u5B3D\u5B3E\u5B3F\u5DC3\u5E70\"],[\"f240\",\"\u5FBF\u61FB\u6507\u6510\u650D\u6509\u650C\u650E\u6584\u65DE\u65DD\u66DE\u6AE7\u6AE0\u6ACC\u6AD1\u6AD9\u6ACB\u6ADF\u6ADC\u6AD0\u6AEB\u6ACF\u6ACD\u6ADE\u6B60\u6BB0\u6C0C\u7019\u7027\u7020\u7016\u702B\u7021\u7022\u7023\u7029\u7017\u7024\u701C\u702A\u720C\u720A\u7207\u7202\u7205\u72A5\u72A6\u72A4\u72A3\u72A1\u74CB\u74C5\u74B7\u74C3\u7516\u7660\u77C9\u77CA\u77C4\u77F1\u791D\u791B\"],[\"f2a1\",\"\u7921\u791C\u7917\u791E\u79B0\u7A67\u7A68\u7C33\u7C3C\u7C39\u7C2C\u7C3B\u7CEC\u7CEA\u7E76\u7E75\u7E78\u7E70\u7E77\u7E6F\u7E7A\u7E72\u7E74\u7E68\u7F4B\u7F4A\u7F83\u7F86\u7FB7\u7FFD\u7FFE\u8078\u81D7\u81D5\u8264\u8261\u8263\u85EB\u85F1\u85ED\u85D9\u85E1\u85E8\u85DA\u85D7\u85EC\u85F2\u85F8\u85D8\u85DF\u85E3\u85DC\u85D1\u85F0\u85E6\u85EF\u85DE\u85E2\u8800\u87FA\u8803\u87F6\u87F7\u8809\u880C\u880B\u8806\u87FC\u8808\u87FF\u880A\u8802\u8962\u895A\u895B\u8957\u8961\u895C\u8958\u895D\u8959\u8988\u89B7\u89B6\u89F6\u8B50\u8B48\u8B4A\u8B40\u8B53\u8B56\u8B54\u8B4B\u8B55\"],[\"f340\",\"\u8B51\u8B42\u8B52\u8B57\u8C43\u8C77\u8C76\u8C9A\u8D06\u8D07\u8D09\u8DAC\u8DAA\u8DAD\u8DAB\u8E6D\u8E78\u8E73\u8E6A\u8E6F\u8E7B\u8EC2\u8F52\u8F51\u8F4F\u8F50\u8F53\u8FB4\u9140\u913F\u91B0\u91AD\u93DE\u93C7\u93CF\u93C2\u93DA\u93D0\u93F9\u93EC\u93CC\u93D9\u93A9\u93E6\u93CA\u93D4\u93EE\u93E3\u93D5\u93C4\u93CE\u93C0\u93D2\u93E7\u957D\u95DA\u95DB\u96E1\u9729\u972B\u972C\u9728\u9726\"],[\"f3a1\",\"\u97B3\u97B7\u97B6\u97DD\u97DE\u97DF\u985C\u9859\u985D\u9857\u98BF\u98BD\u98BB\u98BE\u9948\u9947\u9943\u99A6\u99A7\u9A1A\u9A15\u9A25\u9A1D\u9A24\u9A1B\u9A22\u9A20\u9A27\u9A23\u9A1E\u9A1C\u9A14\u9AC2\u9B0B\u9B0A\u9B0E\u9B0C\u9B37\u9BEA\u9BEB\u9BE0\u9BDE\u9BE4\u9BE6\u9BE2\u9BF0\u9BD4\u9BD7\u9BEC\u9BDC\u9BD9\u9BE5\u9BD5\u9BE1\u9BDA\u9D77\u9D81\u9D8A\u9D84\u9D88\u9D71\u9D80\u9D78\u9D86\u9D8B\u9D8C\u9D7D\u9D6B\u9D74\u9D75\u9D70\u9D69\u9D85\u9D73\u9D7B\u9D82\u9D6F\u9D79\u9D7F\u9D87\u9D68\u9E94\u9E91\u9EC0\u9EFC\u9F2D\u9F40\u9F41\u9F4D\u9F56\u9F57\u9F58\u5337\u56B2\"],[\"f440\",\"\u56B5\u56B3\u58E3\u5B45\u5DC6\u5DC7\u5EEE\u5EEF\u5FC0\u5FC1\u61F9\u6517\u6516\u6515\u6513\u65DF\u66E8\u66E3\u66E4\u6AF3\u6AF0\u6AEA\u6AE8\u6AF9\u6AF1\u6AEE\u6AEF\u703C\u7035\u702F\u7037\u7034\u7031\u7042\u7038\u703F\u703A\u7039\u7040\u703B\u7033\u7041\u7213\u7214\u72A8\u737D\u737C\u74BA\u76AB\u76AA\u76BE\u76ED\u77CC\u77CE\u77CF\u77CD\u77F2\u7925\u7923\u7927\u7928\u7924\u7929\"],[\"f4a1\",\"\u79B2\u7A6E\u7A6C\u7A6D\u7AF7\u7C49\u7C48\u7C4A\u7C47\u7C45\u7CEE\u7E7B\u7E7E\u7E81\u7E80\u7FBA\u7FFF\u8079\u81DB\u81D9\u820B\u8268\u8269\u8622\u85FF\u8601\u85FE\u861B\u8600\u85F6\u8604\u8609\u8605\u860C\u85FD\u8819\u8810\u8811\u8817\u8813\u8816\u8963\u8966\u89B9\u89F7\u8B60\u8B6A\u8B5D\u8B68\u8B63\u8B65\u8B67\u8B6D\u8DAE\u8E86\u8E88\u8E84\u8F59\u8F56\u8F57\u8F55\u8F58\u8F5A\u908D\u9143\u9141\u91B7\u91B5\u91B2\u91B3\u940B\u9413\u93FB\u9420\u940F\u9414\u93FE\u9415\u9410\u9428\u9419\u940D\u93F5\u9400\u93F7\u9407\u940E\u9416\u9412\u93FA\u9409\u93F8\u940A\u93FF\"],[\"f540\",\"\u93FC\u940C\u93F6\u9411\u9406\u95DE\u95E0\u95DF\u972E\u972F\u97B9\u97BB\u97FD\u97FE\u9860\u9862\u9863\u985F\u98C1\u98C2\u9950\u994E\u9959\u994C\u994B\u9953\u9A32\u9A34\u9A31\u9A2C\u9A2A\u9A36\u9A29\u9A2E\u9A38\u9A2D\u9AC7\u9ACA\u9AC6\u9B10\u9B12\u9B11\u9C0B\u9C08\u9BF7\u9C05\u9C12\u9BF8\u9C40\u9C07\u9C0E\u9C06\u9C17\u9C14\u9C09\u9D9F\u9D99\u9DA4\u9D9D\u9D92\u9D98\u9D90\u9D9B\"],[\"f5a1\",\"\u9DA0\u9D94\u9D9C\u9DAA\u9D97\u9DA1\u9D9A\u9DA2\u9DA8\u9D9E\u9DA3\u9DBF\u9DA9\u9D96\u9DA6\u9DA7\u9E99\u9E9B\u9E9A\u9EE5\u9EE4\u9EE7\u9EE6\u9F30\u9F2E\u9F5B\u9F60\u9F5E\u9F5D\u9F59\u9F91\u513A\u5139\u5298\u5297\u56C3\u56BD\u56BE\u5B48\u5B47\u5DCB\u5DCF\u5EF1\u61FD\u651B\u6B02\u6AFC\u6B03\u6AF8\u6B00\u7043\u7044\u704A\u7048\u7049\u7045\u7046\u721D\u721A\u7219\u737E\u7517\u766A\u77D0\u792D\u7931\u792F\u7C54\u7C53\u7CF2\u7E8A\u7E87\u7E88\u7E8B\u7E86\u7E8D\u7F4D\u7FBB\u8030\u81DD\u8618\u862A\u8626\u861F\u8623\u861C\u8619\u8627\u862E\u8621\u8620\u8629\u861E\u8625\"],[\"f640\",\"\u8829\u881D\u881B\u8820\u8824\u881C\u882B\u884A\u896D\u8969\u896E\u896B\u89FA\u8B79\u8B78\u8B45\u8B7A\u8B7B\u8D10\u8D14\u8DAF\u8E8E\u8E8C\u8F5E\u8F5B\u8F5D\u9146\u9144\u9145\u91B9\u943F\u943B\u9436\u9429\u943D\u943C\u9430\u9439\u942A\u9437\u942C\u9440\u9431\u95E5\u95E4\u95E3\u9735\u973A\u97BF\u97E1\u9864\u98C9\u98C6\u98C0\u9958\u9956\u9A39\u9A3D\u9A46\u9A44\u9A42\u9A41\u9A3A\"],[\"f6a1\",\"\u9A3F\u9ACD\u9B15\u9B17\u9B18\u9B16\u9B3A\u9B52\u9C2B\u9C1D\u9C1C\u9C2C\u9C23\u9C28\u9C29\u9C24\u9C21\u9DB7\u9DB6\u9DBC\u9DC1\u9DC7\u9DCA\u9DCF\u9DBE\u9DC5\u9DC3\u9DBB\u9DB5\u9DCE\u9DB9\u9DBA\u9DAC\u9DC8\u9DB1\u9DAD\u9DCC\u9DB3\u9DCD\u9DB2\u9E7A\u9E9C\u9EEB\u9EEE\u9EED\u9F1B\u9F18\u9F1A\u9F31\u9F4E\u9F65\u9F64\u9F92\u4EB9\u56C6\u56C5\u56CB\u5971\u5B4B\u5B4C\u5DD5\u5DD1\u5EF2\u6521\u6520\u6526\u6522\u6B0B\u6B08\u6B09\u6C0D\u7055\u7056\u7057\u7052\u721E\u721F\u72A9\u737F\u74D8\u74D5\u74D9\u74D7\u766D\u76AD\u7935\u79B4\u7A70\u7A71\u7C57\u7C5C\u7C59\u7C5B\u7C5A\"],[\"f740\",\"\u7CF4\u7CF1\u7E91\u7F4F\u7F87\u81DE\u826B\u8634\u8635\u8633\u862C\u8632\u8636\u882C\u8828\u8826\u882A\u8825\u8971\u89BF\u89BE\u89FB\u8B7E\u8B84\u8B82\u8B86\u8B85\u8B7F\u8D15\u8E95\u8E94\u8E9A\u8E92\u8E90\u8E96\u8E97\u8F60\u8F62\u9147\u944C\u9450\u944A\u944B\u944F\u9447\u9445\u9448\u9449\u9446\u973F\u97E3\u986A\u9869\u98CB\u9954\u995B\u9A4E\u9A53\u9A54\u9A4C\u9A4F\u9A48\u9A4A\"],[\"f7a1\",\"\u9A49\u9A52\u9A50\u9AD0\u9B19\u9B2B\u9B3B\u9B56\u9B55\u9C46\u9C48\u9C3F\u9C44\u9C39\u9C33\u9C41\u9C3C\u9C37\u9C34\u9C32\u9C3D\u9C36\u9DDB\u9DD2\u9DDE\u9DDA\u9DCB\u9DD0\u9DDC\u9DD1\u9DDF\u9DE9\u9DD9\u9DD8\u9DD6\u9DF5\u9DD5\u9DDD\u9EB6\u9EF0\u9F35\u9F33\u9F32\u9F42\u9F6B\u9F95\u9FA2\u513D\u5299\u58E8\u58E7\u5972\u5B4D\u5DD8\u882F\u5F4F\u6201\u6203\u6204\u6529\u6525\u6596\u66EB\u6B11\u6B12\u6B0F\u6BCA\u705B\u705A\u7222\u7382\u7381\u7383\u7670\u77D4\u7C67\u7C66\u7E95\u826C\u863A\u8640\u8639\u863C\u8631\u863B\u863E\u8830\u8832\u882E\u8833\u8976\u8974\u8973\u89FE\"],[\"f840\",\"\u8B8C\u8B8E\u8B8B\u8B88\u8C45\u8D19\u8E98\u8F64\u8F63\u91BC\u9462\u9455\u945D\u9457\u945E\u97C4\u97C5\u9800\u9A56\u9A59\u9B1E\u9B1F\u9B20\u9C52\u9C58\u9C50\u9C4A\u9C4D\u9C4B\u9C55\u9C59\u9C4C\u9C4E\u9DFB\u9DF7\u9DEF\u9DE3\u9DEB\u9DF8\u9DE4\u9DF6\u9DE1\u9DEE\u9DE6\u9DF2\u9DF0\u9DE2\u9DEC\u9DF4\u9DF3\u9DE8\u9DED\u9EC2\u9ED0\u9EF2\u9EF3\u9F06\u9F1C\u9F38\u9F37\u9F36\u9F43\u9F4F\"],[\"f8a1\",\"\u9F71\u9F70\u9F6E\u9F6F\u56D3\u56CD\u5B4E\u5C6D\u652D\u66ED\u66EE\u6B13\u705F\u7061\u705D\u7060\u7223\u74DB\u74E5\u77D5\u7938\u79B7\u79B6\u7C6A\u7E97\u7F89\u826D\u8643\u8838\u8837\u8835\u884B\u8B94\u8B95\u8E9E\u8E9F\u8EA0\u8E9D\u91BE\u91BD\u91C2\u946B\u9468\u9469\u96E5\u9746\u9743\u9747\u97C7\u97E5\u9A5E\u9AD5\u9B59\u9C63\u9C67\u9C66\u9C62\u9C5E\u9C60\u9E02\u9DFE\u9E07\u9E03\u9E06\u9E05\u9E00\u9E01\u9E09\u9DFF\u9DFD\u9E04\u9EA0\u9F1E\u9F46\u9F74\u9F75\u9F76\u56D4\u652E\u65B8\u6B18\u6B19\u6B17\u6B1A\u7062\u7226\u72AA\u77D8\u77D9\u7939\u7C69\u7C6B\u7CF6\u7E9A\"],[\"f940\",\"\u7E98\u7E9B\u7E99\u81E0\u81E1\u8646\u8647\u8648\u8979\u897A\u897C\u897B\u89FF\u8B98\u8B99\u8EA5\u8EA4\u8EA3\u946E\u946D\u946F\u9471\u9473\u9749\u9872\u995F\u9C68\u9C6E\u9C6D\u9E0B\u9E0D\u9E10\u9E0F\u9E12\u9E11\u9EA1\u9EF5\u9F09\u9F47\u9F78\u9F7B\u9F7A\u9F79\u571E\u7066\u7C6F\u883C\u8DB2\u8EA6\u91C3\u9474\u9478\u9476\u9475\u9A60\u9C74\u9C73\u9C71\u9C75\u9E14\u9E13\u9EF6\u9F0A\"],[\"f9a1\",\"\u9FA4\u7068\u7065\u7CF7\u866A\u883E\u883D\u883F\u8B9E\u8C9C\u8EA9\u8EC9\u974B\u9873\u9874\u98CC\u9961\u99AB\u9A64\u9A66\u9A67\u9B24\u9E15\u9E17\u9F48\u6207\u6B1E\u7227\u864C\u8EA8\u9482\u9480\u9481\u9A69\u9A68\u9B2E\u9E19\u7229\u864B\u8B9F\u9483\u9C79\u9EB7\u7675\u9A6B\u9C7A\u9E1D\u7069\u706A\u9EA4\u9F7E\u9F49\u9F98\u7881\u92B9\u88CF\u58BB\u6052\u7CA7\u5AFA\u2554\u2566\u2557\u2560\u256C\u2563\u255A\u2569\u255D\u2552\u2564\u2555\u255E\u256A\u2561\u2558\u2567\u255B\u2553\u2565\u2556\u255F\u256B\u2562\u2559\u2568\u255C\u2551\u2550\u256D\u256E\u2570\u256F\u2593\"]]");
      /***/
    },
    /* 252 */

    /***/
    function (module, exports, __webpack_require__) {
      // Generated by CoffeeScript 1.7.1
      (function () {
        var ArrayT, NumberT, utils;
        NumberT = __webpack_require__(89).Number;
        utils = __webpack_require__(40);

        ArrayT = function () {
          function ArrayT(type, length, lengthType) {
            this.type = type;
            this.length = length;
            this.lengthType = lengthType != null ? lengthType : 'count';
          }

          ArrayT.prototype.decode = function (stream, parent) {
            var ctx, i, length, pos, res, target, _i;

            pos = stream.pos;
            res = [];
            ctx = parent;

            if (this.length != null) {
              length = utils.resolveLength(this.length, stream, parent);
            }

            if (this.length instanceof NumberT) {
              Object.defineProperties(res, {
                parent: {
                  value: parent
                },
                _startOffset: {
                  value: pos
                },
                _currentOffset: {
                  value: 0,
                  writable: true
                },
                _length: {
                  value: length
                }
              });
              ctx = res;
            }

            if (length == null || this.lengthType === 'bytes') {
              target = length != null ? stream.pos + length : (parent != null ? parent._length : void 0) ? parent._startOffset + parent._length : stream.length;

              while (stream.pos < target) {
                res.push(this.type.decode(stream, ctx));
              }
            } else {
              for (i = _i = 0; _i < length; i = _i += 1) {
                res.push(this.type.decode(stream, ctx));
              }
            }

            return res;
          };

          ArrayT.prototype.size = function (array, ctx) {
            var item, size, _i, _len;

            if (!array) {
              return this.type.size(null, ctx) * utils.resolveLength(this.length, null, ctx);
            }

            size = 0;

            if (this.length instanceof NumberT) {
              size += this.length.size();
              ctx = {
                parent: ctx
              };
            }

            for (_i = 0, _len = array.length; _i < _len; _i++) {
              item = array[_i];
              size += this.type.size(item, ctx);
            }

            return size;
          };

          ArrayT.prototype.encode = function (stream, array, parent) {
            var ctx, i, item, ptr, _i, _len;

            ctx = parent;

            if (this.length instanceof NumberT) {
              ctx = {
                pointers: [],
                startOffset: stream.pos,
                parent: parent
              };
              ctx.pointerOffset = stream.pos + this.size(array, ctx);
              this.length.encode(stream, array.length);
            }

            for (_i = 0, _len = array.length; _i < _len; _i++) {
              item = array[_i];
              this.type.encode(stream, item, ctx);
            }

            if (this.length instanceof NumberT) {
              i = 0;

              while (i < ctx.pointers.length) {
                ptr = ctx.pointers[i++];
                ptr.type.encode(stream, ptr.val);
              }
            }
          };

          return ArrayT;
        }();

        module.exports = ArrayT;
      }).call(this);
      /***/
    },
    /* 253 */

    /***/
    function (module, exports, __webpack_require__) {
      // Generated by CoffeeScript 1.7.1
      (function () {
        var Struct, utils;
        utils = __webpack_require__(40);

        Struct = function () {
          function Struct(fields) {
            this.fields = fields != null ? fields : {};
          }

          Struct.prototype.decode = function (stream, parent, length) {
            var res, _ref;

            if (length == null) {
              length = 0;
            }

            res = this._setup(stream, parent, length);

            this._parseFields(stream, res, this.fields);

            if ((_ref = this.process) != null) {
              _ref.call(res, stream);
            }

            return res;
          };

          Struct.prototype._setup = function (stream, parent, length) {
            var res;
            res = {};
            Object.defineProperties(res, {
              parent: {
                value: parent
              },
              _startOffset: {
                value: stream.pos
              },
              _currentOffset: {
                value: 0,
                writable: true
              },
              _length: {
                value: length
              }
            });
            return res;
          };

          Struct.prototype._parseFields = function (stream, res, fields) {
            var key, type, val;

            for (key in fields) {
              type = fields[key];

              if (typeof type === 'function') {
                val = type.call(res, res);
              } else {
                val = type.decode(stream, res);
              }

              if (val !== void 0) {
                if (val instanceof utils.PropertyDescriptor) {
                  Object.defineProperty(res, key, val);
                } else {
                  res[key] = val;
                }
              }

              res._currentOffset = stream.pos - res._startOffset;
            }
          };

          Struct.prototype.size = function (val, parent, includePointers) {
            var ctx, key, size, type, _ref;

            if (val == null) {
              val = {};
            }

            if (includePointers == null) {
              includePointers = true;
            }

            ctx = {
              parent: parent,
              val: val,
              pointerSize: 0
            };
            size = 0;
            _ref = this.fields;

            for (key in _ref) {
              type = _ref[key];

              if (type.size != null) {
                size += type.size(val[key], ctx);
              }
            }

            if (includePointers) {
              size += ctx.pointerSize;
            }

            return size;
          };

          Struct.prototype.encode = function (stream, val, parent) {
            var ctx, i, key, ptr, type, _ref, _ref1;

            if ((_ref = this.preEncode) != null) {
              _ref.call(val, stream);
            }

            ctx = {
              pointers: [],
              startOffset: stream.pos,
              parent: parent,
              val: val,
              pointerSize: 0
            };
            ctx.pointerOffset = stream.pos + this.size(val, ctx, false);
            _ref1 = this.fields;

            for (key in _ref1) {
              type = _ref1[key];

              if (type.encode != null) {
                type.encode(stream, val[key], ctx);
              }
            }

            i = 0;

            while (i < ctx.pointers.length) {
              ptr = ctx.pointers[i++];
              ptr.type.encode(stream, ptr.val, ptr.parent);
            }
          };

          return Struct;
        }();

        module.exports = Struct;
      }).call(this);
      /***/
    },
    /* 254 */

    /***/
    function (module, exports, __webpack_require__) {
      module.exports = !__webpack_require__(23) && !__webpack_require__(52)(function () {
        return Object.defineProperty(__webpack_require__(176)('div'), 'a', {
          get: function get() {
            return 7;
          }
        }).a != 7;
      });
      /***/
    },
    /* 255 */

    /***/
    function (module, exports) {
      module.exports = function (done, value) {
        return {
          value: value,
          done: !!done
        };
      };
      /***/

    },
    /* 256 */

    /***/
    function (module, exports, __webpack_require__) {
      module.exports = __webpack_require__(41);
      /***/
    },
    /* 257 */

    /***/
    function (module, exports, __webpack_require__) {
      var dP = __webpack_require__(26);

      var anObject = __webpack_require__(29);

      var getKeys = __webpack_require__(105);

      module.exports = __webpack_require__(23) ? Object.defineProperties : function defineProperties(O, Properties) {
        anObject(O);
        var keys = getKeys(Properties);
        var length = keys.length;
        var i = 0;
        var P;

        while (length > i) {
          dP.f(O, P = keys[i++], Properties[P]);
        }

        return O;
      };
      /***/
    },
    /* 258 */

    /***/
    function (module, exports, __webpack_require__) {
      var has = __webpack_require__(51);

      var toIObject = __webpack_require__(50);

      var arrayIndexOf = __webpack_require__(425)(false);

      var IE_PROTO = __webpack_require__(180)('IE_PROTO');

      module.exports = function (object, names) {
        var O = toIObject(object);
        var i = 0;
        var result = [];
        var key;

        for (key in O) {
          if (key != IE_PROTO) has(O, key) && result.push(key);
        } // Don't enum bug & hidden keys


        while (names.length > i) {
          if (has(O, key = names[i++])) {
            ~arrayIndexOf(result, key) || result.push(key);
          }
        }

        return result;
      };
      /***/

    },
    /* 259 */

    /***/
    function (module, exports, __webpack_require__) {
      var toInteger = __webpack_require__(179);

      var max = Math.max;
      var min = Math.min;

      module.exports = function (index, length) {
        index = toInteger(index);
        return index < 0 ? max(index + length, 0) : min(index, length);
      };
      /***/

    },
    /* 260 */

    /***/
    function (module, exports, __webpack_require__) {
      var document = __webpack_require__(17).document;

      module.exports = document && document.documentElement;
      /***/
    },
    /* 261 */

    /***/
    function (module, exports, __webpack_require__) {
      // 7.2.2 IsArray(argument)
      var cof = __webpack_require__(99);

      module.exports = Array.isArray || function isArray(arg) {
        return cof(arg) == 'Array';
      };
      /***/

    },
    /* 262 */

    /***/
    function (module, exports, __webpack_require__) {
      // 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
      var $keys = __webpack_require__(258);

      var hiddenKeys = __webpack_require__(182).concat('length', 'prototype');

      exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
        return $keys(O, hiddenKeys);
      };
      /***/

    },
    /* 263 */

    /***/
    function (module, exports, __webpack_require__) {
      module.exports = {
        "default": __webpack_require__(444),
        __esModule: true
      };
      /***/
    },
    /* 264 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var dP = __webpack_require__(26).f;

      var create = __webpack_require__(129);

      var redefineAll = __webpack_require__(189);

      var ctx = __webpack_require__(33);

      var anInstance = __webpack_require__(190);

      var forOf = __webpack_require__(107);

      var $iterDefine = __webpack_require__(178);

      var step = __webpack_require__(255);

      var setSpecies = __webpack_require__(267);

      var DESCRIPTORS = __webpack_require__(23);

      var fastKey = __webpack_require__(132).fastKey;

      var validate = __webpack_require__(191);

      var SIZE = DESCRIPTORS ? '_s' : 'size';

      var getEntry = function getEntry(that, key) {
        // fast case
        var index = fastKey(key);
        var entry;
        if (index !== 'F') return that._i[index]; // frozen object case

        for (entry = that._f; entry; entry = entry.n) {
          if (entry.k == key) return entry;
        }
      };

      module.exports = {
        getConstructor: function getConstructor(wrapper, NAME, IS_MAP, ADDER) {
          var C = wrapper(function (that, iterable) {
            anInstance(that, C, NAME, '_i');
            that._t = NAME; // collection type

            that._i = create(null); // index

            that._f = undefined; // first entry

            that._l = undefined; // last entry

            that[SIZE] = 0; // size

            if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
          });
          redefineAll(C.prototype, {
            // 23.1.3.1 Map.prototype.clear()
            // 23.2.3.2 Set.prototype.clear()
            clear: function clear() {
              for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {
                entry.r = true;
                if (entry.p) entry.p = entry.p.n = undefined;
                delete data[entry.i];
              }

              that._f = that._l = undefined;
              that[SIZE] = 0;
            },
            // 23.1.3.3 Map.prototype.delete(key)
            // 23.2.3.4 Set.prototype.delete(value)
            'delete': function _delete(key) {
              var that = validate(this, NAME);
              var entry = getEntry(that, key);

              if (entry) {
                var next = entry.n;
                var prev = entry.p;
                delete that._i[entry.i];
                entry.r = true;
                if (prev) prev.n = next;
                if (next) next.p = prev;
                if (that._f == entry) that._f = next;
                if (that._l == entry) that._l = prev;
                that[SIZE]--;
              }

              return !!entry;
            },
            // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
            // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
            forEach: function forEach(callbackfn
            /* , that = undefined */
            ) {
              validate(this, NAME);
              var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
              var entry;

              while (entry = entry ? entry.n : this._f) {
                f(entry.v, entry.k, this); // revert to the last existing entry

                while (entry && entry.r) {
                  entry = entry.p;
                }
              }
            },
            // 23.1.3.7 Map.prototype.has(key)
            // 23.2.3.7 Set.prototype.has(value)
            has: function has(key) {
              return !!getEntry(validate(this, NAME), key);
            }
          });
          if (DESCRIPTORS) dP(C.prototype, 'size', {
            get: function get() {
              return validate(this, NAME)[SIZE];
            }
          });
          return C;
        },
        def: function def(that, key, value) {
          var entry = getEntry(that, key);
          var prev, index; // change existing entry

          if (entry) {
            entry.v = value; // create new entry
          } else {
            that._l = entry = {
              i: index = fastKey(key, true),
              // <- index
              k: key,
              // <- key
              v: value,
              // <- value
              p: prev = that._l,
              // <- previous entry
              n: undefined,
              // <- next entry
              r: false // <- removed

            };
            if (!that._f) that._f = entry;
            if (prev) prev.n = entry;
            that[SIZE]++; // add to index

            if (index !== 'F') that._i[index] = entry;
          }

          return that;
        },
        getEntry: getEntry,
        setStrong: function setStrong(C, NAME, IS_MAP) {
          // add .keys, .values, .entries, [@@iterator]
          // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
          $iterDefine(C, NAME, function (iterated, kind) {
            this._t = validate(iterated, NAME); // target

            this._k = kind; // kind

            this._l = undefined; // previous
          }, function () {
            var that = this;
            var kind = that._k;
            var entry = that._l; // revert to the last existing entry

            while (entry && entry.r) {
              entry = entry.p;
            } // get next entry


            if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
              // or finish the iteration
              that._t = undefined;
              return step(1);
            } // return step by kind


            if (kind == 'keys') return step(0, entry.k);
            if (kind == 'values') return step(0, entry.v);
            return step(0, [entry.k, entry.v]);
          }, IS_MAP ? 'entries' : 'values', !IS_MAP, true); // add [@@species], 23.1.2.2, 23.2.2.2

          setSpecies(NAME);
        }
      };
      /***/
    },
    /* 265 */

    /***/
    function (module, exports, __webpack_require__) {
      // call something on iterator step with safe closing on error
      var anObject = __webpack_require__(29);

      module.exports = function (iterator, fn, value, entries) {
        try {
          return entries ? fn(anObject(value)[0], value[1]) : fn(value); // 7.4.6 IteratorClose(iterator, completion)
        } catch (e) {
          var ret = iterator['return'];
          if (ret !== undefined) anObject(ret.call(iterator));
          throw e;
        }
      };
      /***/

    },
    /* 266 */

    /***/
    function (module, exports, __webpack_require__) {
      // check on default Array iterator
      var Iterators = __webpack_require__(103);

      var ITERATOR = __webpack_require__(21)('iterator');

      var ArrayProto = Array.prototype;

      module.exports = function (it) {
        return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
      };
      /***/

    },
    /* 267 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var global = __webpack_require__(17);

      var core = __webpack_require__(7);

      var dP = __webpack_require__(26);

      var DESCRIPTORS = __webpack_require__(23);

      var SPECIES = __webpack_require__(21)('species');

      module.exports = function (KEY) {
        var C = typeof core[KEY] == 'function' ? core[KEY] : global[KEY];
        if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
          configurable: true,
          get: function get() {
            return this;
          }
        });
      };
      /***/

    },
    /* 268 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var global = __webpack_require__(17);

      var $export = __webpack_require__(9);

      var meta = __webpack_require__(132);

      var fails = __webpack_require__(52);

      var hide = __webpack_require__(41);

      var redefineAll = __webpack_require__(189);

      var forOf = __webpack_require__(107);

      var anInstance = __webpack_require__(190);

      var isObject = __webpack_require__(22);

      var setToStringTag = __webpack_require__(106);

      var dP = __webpack_require__(26).f;

      var each = __webpack_require__(451)(0);

      var DESCRIPTORS = __webpack_require__(23);

      module.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
        var Base = global[NAME];
        var C = Base;
        var ADDER = IS_MAP ? 'set' : 'add';
        var proto = C && C.prototype;
        var O = {};

        if (!DESCRIPTORS || typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {
          new C().entries().next();
        }))) {
          // create collection constructor
          C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
          redefineAll(C.prototype, methods);
          meta.NEED = true;
        } else {
          C = wrapper(function (target, iterable) {
            anInstance(target, C, NAME, '_c');
            target._c = new Base();
            if (iterable != undefined) forOf(iterable, IS_MAP, target[ADDER], target);
          });
          each('add,clear,delete,forEach,get,has,set,keys,values,entries,toJSON'.split(','), function (KEY) {
            var IS_ADDER = KEY == 'add' || KEY == 'set';
            if (KEY in proto && !(IS_WEAK && KEY == 'clear')) hide(C.prototype, KEY, function (a, b) {
              anInstance(this, C, KEY);
              if (!IS_ADDER && IS_WEAK && !isObject(a)) return KEY == 'get' ? undefined : false;

              var result = this._c[KEY](a === 0 ? 0 : a, b);

              return IS_ADDER ? this : result;
            });
          });
          IS_WEAK || dP(C.prototype, 'size', {
            get: function get() {
              return this._c.size;
            }
          });
        }

        setToStringTag(C, NAME);
        O[NAME] = C;
        $export($export.G + $export.W + $export.F, O);
        if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);
        return C;
      };
      /***/

    },
    /* 269 */

    /***/
    function (module, exports, __webpack_require__) {
      // https://github.com/DavidBruant/Map-Set.prototype.toJSON
      var classof = __webpack_require__(184);

      var from = __webpack_require__(455);

      module.exports = function (NAME) {
        return function toJSON() {
          if (classof(this) != NAME) throw TypeError(NAME + "#toJSON isn't generic");
          return from(this);
        };
      };
      /***/

    },
    /* 270 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict"; // https://tc39.github.io/proposal-setmap-offrom/

      var $export = __webpack_require__(9);

      module.exports = function (COLLECTION) {
        $export($export.S, COLLECTION, {
          of: function of() {
            var length = arguments.length;
            var A = new Array(length);

            while (length--) {
              A[length] = arguments[length];
            }

            return new this(A);
          }
        });
      };
      /***/

    },
    /* 271 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict"; // https://tc39.github.io/proposal-setmap-offrom/

      var $export = __webpack_require__(9);

      var aFunction = __webpack_require__(101);

      var ctx = __webpack_require__(33);

      var forOf = __webpack_require__(107);

      module.exports = function (COLLECTION) {
        $export($export.S, COLLECTION, {
          from: function from(source
          /* , mapFn, thisArg */
          ) {
            var mapFn = arguments[1];
            var mapping, A, n, cb;
            aFunction(this);
            mapping = mapFn !== undefined;
            if (mapping) aFunction(mapFn);
            if (source == undefined) return new this();
            A = [];

            if (mapping) {
              n = 0;
              cb = ctx(mapFn, arguments[2], 2);
              forOf(source, false, function (nextItem) {
                A.push(cb(nextItem, n++));
              });
            } else {
              forOf(source, false, A.push, A);
            }

            return new this(A);
          }
        });
      };
      /***/

    },
    /* 272 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var slice = Array.prototype.slice;

      var isArgs = __webpack_require__(273);

      var origKeys = Object.keys;
      var keysShim = origKeys ? function keys(o) {
        return origKeys(o);
      } : __webpack_require__(471);
      var originalKeys = Object.keys;

      keysShim.shim = function shimObjectKeys() {
        if (Object.keys) {
          var keysWorksWithArguments = function () {
            // Safari 5.0 bug
            var args = Object.keys(arguments);
            return args && args.length === arguments.length;
          }(1, 2);

          if (!keysWorksWithArguments) {
            Object.keys = function keys(object) {
              // eslint-disable-line func-name-matching
              if (isArgs(object)) {
                return originalKeys(slice.call(object));
              }

              return originalKeys(object);
            };
          }
        } else {
          Object.keys = keysShim;
        }

        return Object.keys || keysShim;
      };

      module.exports = keysShim;
      /***/
    },
    /* 273 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var toStr = Object.prototype.toString;

      module.exports = function isArguments(value) {
        var str = toStr.call(value);
        var isArgs = str === '[object Arguments]';

        if (!isArgs) {
          isArgs = str !== '[object Array]' && value !== null && _typeof4(value) === 'object' && typeof value.length === 'number' && value.length >= 0 && toStr.call(value.callee) === '[object Function]';
        }

        return isArgs;
      };
      /***/

    },
    /* 274 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var bind = __webpack_require__(275);

      var GetIntrinsic = __webpack_require__(475);

      var $apply = GetIntrinsic('%Function.prototype.apply%');
      var $call = GetIntrinsic('%Function.prototype.call%');
      var $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);

      module.exports = function callBind() {
        return $reflectApply(bind, $call, arguments);
      };

      module.exports.apply = function applyBind() {
        return $reflectApply(bind, $apply, arguments);
      };
      /***/

    },
    /* 275 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var implementation = __webpack_require__(474);

      module.exports = Function.prototype.bind || implementation;
      /***/
    },
    /* 276 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";
      /* WEBPACK VAR INJECTION */

      (function (global) {
        var origSymbol = global.Symbol;

        var hasSymbolSham = __webpack_require__(476);

        module.exports = function hasNativeSymbols() {
          if (typeof origSymbol !== 'function') {
            return false;
          }

          if (typeof Symbol !== 'function') {
            return false;
          }

          if (_typeof4(origSymbol('foo')) !== 'symbol') {
            return false;
          }

          if (_typeof4(Symbol('bar')) !== 'symbol') {
            return false;
          }

          return hasSymbolSham();
        };
        /* WEBPACK VAR INJECTION */

      }).call(this, __webpack_require__(24));
      /***/
    },
    /* 277 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var numberIsNaN = function numberIsNaN(value) {
        return value !== value;
      };

      module.exports = function is(a, b) {
        if (a === 0 && b === 0) {
          return 1 / a === 1 / b;
        }

        if (a === b) {
          return true;
        }

        if (numberIsNaN(a) && numberIsNaN(b)) {
          return true;
        }

        return false;
      };
      /***/

    },
    /* 278 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var implementation = __webpack_require__(277);

      module.exports = function getPolyfill() {
        return typeof Object.is === 'function' ? Object.is : implementation;
      };
      /***/

    },
    /* 279 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var $Object = Object;
      var $TypeError = TypeError;

      module.exports = function flags() {
        if (this != null && this !== $Object(this)) {
          throw new $TypeError('RegExp.prototype.flags getter called on non-object');
        }

        var result = '';

        if (this.global) {
          result += 'g';
        }

        if (this.ignoreCase) {
          result += 'i';
        }

        if (this.multiline) {
          result += 'm';
        }

        if (this.dotAll) {
          result += 's';
        }

        if (this.unicode) {
          result += 'u';
        }

        if (this.sticky) {
          result += 'y';
        }

        return result;
      };
      /***/

    },
    /* 280 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var implementation = __webpack_require__(279);

      var supportsDescriptors = __webpack_require__(108).supportsDescriptors;

      var $gOPD = Object.getOwnPropertyDescriptor;
      var $TypeError = TypeError;

      module.exports = function getPolyfill() {
        if (!supportsDescriptors) {
          throw new $TypeError('RegExp.prototype.flags requires a true ES5 environment that supports property descriptors');
        }

        if (/a/mig.flags === 'gim') {
          var descriptor = $gOPD(RegExp.prototype, 'flags');

          if (descriptor && typeof descriptor.get === 'function' && typeof /a/.dotAll === 'boolean') {
            return descriptor.get;
          }
        }

        return implementation;
      };
      /***/

    },
    /* 281 */

    /***/
    function (module, exports, __webpack_require__) {
      var ITERATOR = __webpack_require__(21)('iterator');

      var SAFE_CLOSING = false;

      try {
        var riter = [7][ITERATOR]();

        riter['return'] = function () {
          SAFE_CLOSING = true;
        }; // eslint-disable-next-line no-throw-literal


        Array.from(riter, function () {
          throw 2;
        });
      } catch (e) {
        /* empty */
      }

      module.exports = function (exec, skipClosing) {
        if (!skipClosing && !SAFE_CLOSING) return false;
        var safe = false;

        try {
          var arr = [7];
          var iter = arr[ITERATOR]();

          iter.next = function () {
            return {
              done: safe = true
            };
          };

          arr[ITERATOR] = function () {
            return iter;
          };

          exec(arr);
        } catch (e) {
          /* empty */
        }

        return safe;
      };
      /***/

    },
    /* 282 */

    /***/
    function (module, exports, __webpack_require__) {
      // 7.3.20 SpeciesConstructor(O, defaultConstructor)
      var anObject = __webpack_require__(29);

      var aFunction = __webpack_require__(101);

      var SPECIES = __webpack_require__(21)('species');

      module.exports = function (O, D) {
        var C = anObject(O).constructor;
        var S;
        return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
      };
      /***/

    },
    /* 283 */

    /***/
    function (module, exports, __webpack_require__) {
      var ctx = __webpack_require__(33);

      var invoke = __webpack_require__(514);

      var html = __webpack_require__(260);

      var cel = __webpack_require__(176);

      var global = __webpack_require__(17);

      var process = global.process;
      var setTask = global.setImmediate;
      var clearTask = global.clearImmediate;
      var MessageChannel = global.MessageChannel;
      var Dispatch = global.Dispatch;
      var counter = 0;
      var queue = {};
      var ONREADYSTATECHANGE = 'onreadystatechange';
      var defer, channel, port;

      var run = function run() {
        var id = +this; // eslint-disable-next-line no-prototype-builtins

        if (queue.hasOwnProperty(id)) {
          var fn = queue[id];
          delete queue[id];
          fn();
        }
      };

      var listener = function listener(event) {
        run.call(event.data);
      }; // Node.js 0.9+ & IE10+ has setImmediate, otherwise:


      if (!setTask || !clearTask) {
        setTask = function setImmediate(fn) {
          var args = [];
          var i = 1;

          while (arguments.length > i) {
            args.push(arguments[i++]);
          }

          queue[++counter] = function () {
            // eslint-disable-next-line no-new-func
            invoke(typeof fn == 'function' ? fn : Function(fn), args);
          };

          defer(counter);
          return counter;
        };

        clearTask = function clearImmediate(id) {
          delete queue[id];
        }; // Node.js 0.8-


        if (__webpack_require__(99)(process) == 'process') {
          defer = function defer(id) {
            process.nextTick(ctx(run, id, 1));
          }; // Sphere (JS game engine) Dispatch API

        } else if (Dispatch && Dispatch.now) {
          defer = function defer(id) {
            Dispatch.now(ctx(run, id, 1));
          }; // Browsers with MessageChannel, includes WebWorkers

        } else if (MessageChannel) {
          channel = new MessageChannel();
          port = channel.port2;
          channel.port1.onmessage = listener;
          defer = ctx(port.postMessage, port, 1); // Browsers with postMessage, skip WebWorkers
          // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
        } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
          defer = function defer(id) {
            global.postMessage(id + '', '*');
          };

          global.addEventListener('message', listener, false); // IE8-
        } else if (ONREADYSTATECHANGE in cel('script')) {
          defer = function defer(id) {
            html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {
              html.removeChild(this);
              run.call(id);
            };
          }; // Rest old browsers

        } else {
          defer = function defer(id) {
            setTimeout(ctx(run, id, 1), 0);
          };
        }
      }

      module.exports = {
        set: setTask,
        clear: clearTask
      };
      /***/
    },
    /* 284 */

    /***/
    function (module, exports) {
      module.exports = function (exec) {
        try {
          return {
            e: false,
            v: exec()
          };
        } catch (e) {
          return {
            e: true,
            v: e
          };
        }
      };
      /***/

    },
    /* 285 */

    /***/
    function (module, exports, __webpack_require__) {
      var anObject = __webpack_require__(29);

      var isObject = __webpack_require__(22);

      var newPromiseCapability = __webpack_require__(193);

      module.exports = function (C, x) {
        anObject(C);
        if (isObject(x) && x.constructor === C) return x;
        var promiseCapability = newPromiseCapability.f(C);
        var resolve = promiseCapability.resolve;
        resolve(x);
        return promiseCapability.promise;
      };
      /***/

    },
    /* 286 */

    /***/
    function (module, exports, __webpack_require__) {
      /* Copyright 2013 Google Inc. All Rights Reserved.
      
         Licensed under the Apache License, Version 2.0 (the "License");
         you may not use this file except in compliance with the License.
         You may obtain a copy of the License at
      
         http://www.apache.org/licenses/LICENSE-2.0
      
         Unless required by applicable law or agreed to in writing, software
         distributed under the License is distributed on an "AS IS" BASIS,
         WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         See the License for the specific language governing permissions and
         limitations under the License.
      */
      var BrotliInput = __webpack_require__(287).BrotliInput;

      var BrotliOutput = __webpack_require__(287).BrotliOutput;

      var BrotliBitReader = __webpack_require__(520);

      var BrotliDictionary = __webpack_require__(288);

      var HuffmanCode = __webpack_require__(289).HuffmanCode;

      var BrotliBuildHuffmanTable = __webpack_require__(289).BrotliBuildHuffmanTable;

      var Context = __webpack_require__(524);

      var Prefix = __webpack_require__(525);

      var Transform = __webpack_require__(526);

      var kDefaultCodeLength = 8;
      var kCodeLengthRepeatCode = 16;
      var kNumLiteralCodes = 256;
      var kNumInsertAndCopyCodes = 704;
      var kNumBlockLengthCodes = 26;
      var kLiteralContextBits = 6;
      var kDistanceContextBits = 2;
      var HUFFMAN_TABLE_BITS = 8;
      var HUFFMAN_TABLE_MASK = 0xff;
      /* Maximum possible Huffman table size for an alphabet size of 704, max code
       * length 15 and root table bits 8. */

      var HUFFMAN_MAX_TABLE_SIZE = 1080;
      var CODE_LENGTH_CODES = 18;
      var kCodeLengthCodeOrder = new Uint8Array([1, 2, 3, 4, 0, 5, 17, 6, 16, 7, 8, 9, 10, 11, 12, 13, 14, 15]);
      var NUM_DISTANCE_SHORT_CODES = 16;
      var kDistanceShortCodeIndexOffset = new Uint8Array([3, 2, 1, 0, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2]);
      var kDistanceShortCodeValueOffset = new Int8Array([0, 0, 0, 0, -1, 1, -2, 2, -3, 3, -1, 1, -2, 2, -3, 3]);
      var kMaxHuffmanTableSize = new Uint16Array([256, 402, 436, 468, 500, 534, 566, 598, 630, 662, 694, 726, 758, 790, 822, 854, 886, 920, 952, 984, 1016, 1048, 1080]);

      function DecodeWindowBits(br) {
        var n;

        if (br.readBits(1) === 0) {
          return 16;
        }

        n = br.readBits(3);

        if (n > 0) {
          return 17 + n;
        }

        n = br.readBits(3);

        if (n > 0) {
          return 8 + n;
        }

        return 17;
      }
      /* Decodes a number in the range [0..255], by reading 1 - 11 bits. */


      function DecodeVarLenUint8(br) {
        if (br.readBits(1)) {
          var nbits = br.readBits(3);

          if (nbits === 0) {
            return 1;
          } else {
            return br.readBits(nbits) + (1 << nbits);
          }
        }

        return 0;
      }

      function MetaBlockLength() {
        this.meta_block_length = 0;
        this.input_end = 0;
        this.is_uncompressed = 0;
        this.is_metadata = false;
      }

      function DecodeMetaBlockLength(br) {
        var out = new MetaBlockLength();
        var size_nibbles;
        var size_bytes;
        var i;
        out.input_end = br.readBits(1);

        if (out.input_end && br.readBits(1)) {
          return out;
        }

        size_nibbles = br.readBits(2) + 4;

        if (size_nibbles === 7) {
          out.is_metadata = true;
          if (br.readBits(1) !== 0) throw new Error('Invalid reserved bit');
          size_bytes = br.readBits(2);
          if (size_bytes === 0) return out;

          for (i = 0; i < size_bytes; i++) {
            var next_byte = br.readBits(8);
            if (i + 1 === size_bytes && size_bytes > 1 && next_byte === 0) throw new Error('Invalid size byte');
            out.meta_block_length |= next_byte << i * 8;
          }
        } else {
          for (i = 0; i < size_nibbles; ++i) {
            var next_nibble = br.readBits(4);
            if (i + 1 === size_nibbles && size_nibbles > 4 && next_nibble === 0) throw new Error('Invalid size nibble');
            out.meta_block_length |= next_nibble << i * 4;
          }
        }

        ++out.meta_block_length;

        if (!out.input_end && !out.is_metadata) {
          out.is_uncompressed = br.readBits(1);
        }

        return out;
      }
      /* Decodes the next Huffman code from bit-stream. */


      function ReadSymbol(table, index, br) {
        var start_index = index;
        var nbits;
        br.fillBitWindow();
        index += br.val_ >>> br.bit_pos_ & HUFFMAN_TABLE_MASK;
        nbits = table[index].bits - HUFFMAN_TABLE_BITS;

        if (nbits > 0) {
          br.bit_pos_ += HUFFMAN_TABLE_BITS;
          index += table[index].value;
          index += br.val_ >>> br.bit_pos_ & (1 << nbits) - 1;
        }

        br.bit_pos_ += table[index].bits;
        return table[index].value;
      }

      function ReadHuffmanCodeLengths(code_length_code_lengths, num_symbols, code_lengths, br) {
        var symbol = 0;
        var prev_code_len = kDefaultCodeLength;
        var repeat = 0;
        var repeat_code_len = 0;
        var space = 32768;
        var table = [];

        for (var i = 0; i < 32; i++) {
          table.push(new HuffmanCode(0, 0));
        }

        BrotliBuildHuffmanTable(table, 0, 5, code_length_code_lengths, CODE_LENGTH_CODES);

        while (symbol < num_symbols && space > 0) {
          var p = 0;
          var code_len;
          br.readMoreInput();
          br.fillBitWindow();
          p += br.val_ >>> br.bit_pos_ & 31;
          br.bit_pos_ += table[p].bits;
          code_len = table[p].value & 0xff;

          if (code_len < kCodeLengthRepeatCode) {
            repeat = 0;
            code_lengths[symbol++] = code_len;

            if (code_len !== 0) {
              prev_code_len = code_len;
              space -= 32768 >> code_len;
            }
          } else {
            var extra_bits = code_len - 14;
            var old_repeat;
            var repeat_delta;
            var new_len = 0;

            if (code_len === kCodeLengthRepeatCode) {
              new_len = prev_code_len;
            }

            if (repeat_code_len !== new_len) {
              repeat = 0;
              repeat_code_len = new_len;
            }

            old_repeat = repeat;

            if (repeat > 0) {
              repeat -= 2;
              repeat <<= extra_bits;
            }

            repeat += br.readBits(extra_bits) + 3;
            repeat_delta = repeat - old_repeat;

            if (symbol + repeat_delta > num_symbols) {
              throw new Error('[ReadHuffmanCodeLengths] symbol + repeat_delta > num_symbols');
            }

            for (var x = 0; x < repeat_delta; x++) {
              code_lengths[symbol + x] = repeat_code_len;
            }

            symbol += repeat_delta;

            if (repeat_code_len !== 0) {
              space -= repeat_delta << 15 - repeat_code_len;
            }
          }
        }

        if (space !== 0) {
          throw new Error("[ReadHuffmanCodeLengths] space = " + space);
        }

        for (; symbol < num_symbols; symbol++) {
          code_lengths[symbol] = 0;
        }
      }

      function ReadHuffmanCode(alphabet_size, tables, table, br) {
        var table_size = 0;
        var simple_code_or_skip;
        var code_lengths = new Uint8Array(alphabet_size);
        br.readMoreInput();
        /* simple_code_or_skip is used as follows:
           1 for simple code;
           0 for no skipping, 2 skips 2 code lengths, 3 skips 3 code lengths */

        simple_code_or_skip = br.readBits(2);

        if (simple_code_or_skip === 1) {
          /* Read symbols, codes & code lengths directly. */
          var i;
          var max_bits_counter = alphabet_size - 1;
          var max_bits = 0;
          var symbols = new Int32Array(4);
          var num_symbols = br.readBits(2) + 1;

          while (max_bits_counter) {
            max_bits_counter >>= 1;
            ++max_bits;
          }

          for (i = 0; i < num_symbols; ++i) {
            symbols[i] = br.readBits(max_bits) % alphabet_size;
            code_lengths[symbols[i]] = 2;
          }

          code_lengths[symbols[0]] = 1;

          switch (num_symbols) {
            case 1:
              break;

            case 3:
              if (symbols[0] === symbols[1] || symbols[0] === symbols[2] || symbols[1] === symbols[2]) {
                throw new Error('[ReadHuffmanCode] invalid symbols');
              }

              break;

            case 2:
              if (symbols[0] === symbols[1]) {
                throw new Error('[ReadHuffmanCode] invalid symbols');
              }

              code_lengths[symbols[1]] = 1;
              break;

            case 4:
              if (symbols[0] === symbols[1] || symbols[0] === symbols[2] || symbols[0] === symbols[3] || symbols[1] === symbols[2] || symbols[1] === symbols[3] || symbols[2] === symbols[3]) {
                throw new Error('[ReadHuffmanCode] invalid symbols');
              }

              if (br.readBits(1)) {
                code_lengths[symbols[2]] = 3;
                code_lengths[symbols[3]] = 3;
              } else {
                code_lengths[symbols[0]] = 2;
              }

              break;
          }
        } else {
          /* Decode Huffman-coded code lengths. */
          var i;
          var code_length_code_lengths = new Uint8Array(CODE_LENGTH_CODES);
          var space = 32;
          var num_codes = 0;
          /* Static Huffman code for the code length code lengths */

          var huff = [new HuffmanCode(2, 0), new HuffmanCode(2, 4), new HuffmanCode(2, 3), new HuffmanCode(3, 2), new HuffmanCode(2, 0), new HuffmanCode(2, 4), new HuffmanCode(2, 3), new HuffmanCode(4, 1), new HuffmanCode(2, 0), new HuffmanCode(2, 4), new HuffmanCode(2, 3), new HuffmanCode(3, 2), new HuffmanCode(2, 0), new HuffmanCode(2, 4), new HuffmanCode(2, 3), new HuffmanCode(4, 5)];

          for (i = simple_code_or_skip; i < CODE_LENGTH_CODES && space > 0; ++i) {
            var code_len_idx = kCodeLengthCodeOrder[i];
            var p = 0;
            var v;
            br.fillBitWindow();
            p += br.val_ >>> br.bit_pos_ & 15;
            br.bit_pos_ += huff[p].bits;
            v = huff[p].value;
            code_length_code_lengths[code_len_idx] = v;

            if (v !== 0) {
              space -= 32 >> v;
              ++num_codes;
            }
          }

          if (!(num_codes === 1 || space === 0)) throw new Error('[ReadHuffmanCode] invalid num_codes or space');
          ReadHuffmanCodeLengths(code_length_code_lengths, alphabet_size, code_lengths, br);
        }

        table_size = BrotliBuildHuffmanTable(tables, table, HUFFMAN_TABLE_BITS, code_lengths, alphabet_size);

        if (table_size === 0) {
          throw new Error("[ReadHuffmanCode] BuildHuffmanTable failed: ");
        }

        return table_size;
      }

      function ReadBlockLength(table, index, br) {
        var code;
        var nbits;
        code = ReadSymbol(table, index, br);
        nbits = Prefix.kBlockLengthPrefixCode[code].nbits;
        return Prefix.kBlockLengthPrefixCode[code].offset + br.readBits(nbits);
      }

      function TranslateShortCodes(code, ringbuffer, index) {
        var val;

        if (code < NUM_DISTANCE_SHORT_CODES) {
          index += kDistanceShortCodeIndexOffset[code];
          index &= 3;
          val = ringbuffer[index] + kDistanceShortCodeValueOffset[code];
        } else {
          val = code - NUM_DISTANCE_SHORT_CODES + 1;
        }

        return val;
      }

      function MoveToFront(v, index) {
        var value = v[index];
        var i = index;

        for (; i; --i) {
          v[i] = v[i - 1];
        }

        v[0] = value;
      }

      function InverseMoveToFrontTransform(v, v_len) {
        var mtf = new Uint8Array(256);
        var i;

        for (i = 0; i < 256; ++i) {
          mtf[i] = i;
        }

        for (i = 0; i < v_len; ++i) {
          var index = v[i];
          v[i] = mtf[index];
          if (index) MoveToFront(mtf, index);
        }
      }
      /* Contains a collection of huffman trees with the same alphabet size. */


      function HuffmanTreeGroup(alphabet_size, num_htrees) {
        this.alphabet_size = alphabet_size;
        this.num_htrees = num_htrees;
        this.codes = new Array(num_htrees + num_htrees * kMaxHuffmanTableSize[alphabet_size + 31 >>> 5]);
        this.htrees = new Uint32Array(num_htrees);
      }

      HuffmanTreeGroup.prototype.decode = function (br) {
        var i;
        var table_size;
        var next = 0;

        for (i = 0; i < this.num_htrees; ++i) {
          this.htrees[i] = next;
          table_size = ReadHuffmanCode(this.alphabet_size, this.codes, next, br);
          next += table_size;
        }
      };

      function DecodeContextMap(context_map_size, br) {
        var out = {
          num_htrees: null,
          context_map: null
        };
        var use_rle_for_zeros;
        var max_run_length_prefix = 0;
        var table;
        var i;
        br.readMoreInput();
        var num_htrees = out.num_htrees = DecodeVarLenUint8(br) + 1;
        var context_map = out.context_map = new Uint8Array(context_map_size);

        if (num_htrees <= 1) {
          return out;
        }

        use_rle_for_zeros = br.readBits(1);

        if (use_rle_for_zeros) {
          max_run_length_prefix = br.readBits(4) + 1;
        }

        table = [];

        for (i = 0; i < HUFFMAN_MAX_TABLE_SIZE; i++) {
          table[i] = new HuffmanCode(0, 0);
        }

        ReadHuffmanCode(num_htrees + max_run_length_prefix, table, 0, br);

        for (i = 0; i < context_map_size;) {
          var code;
          br.readMoreInput();
          code = ReadSymbol(table, 0, br);

          if (code === 0) {
            context_map[i] = 0;
            ++i;
          } else if (code <= max_run_length_prefix) {
            var reps = 1 + (1 << code) + br.readBits(code);

            while (--reps) {
              if (i >= context_map_size) {
                throw new Error("[DecodeContextMap] i >= context_map_size");
              }

              context_map[i] = 0;
              ++i;
            }
          } else {
            context_map[i] = code - max_run_length_prefix;
            ++i;
          }
        }

        if (br.readBits(1)) {
          InverseMoveToFrontTransform(context_map, context_map_size);
        }

        return out;
      }

      function DecodeBlockType(max_block_type, trees, tree_type, block_types, ringbuffers, indexes, br) {
        var ringbuffer = tree_type * 2;
        var index = tree_type;
        var type_code = ReadSymbol(trees, tree_type * HUFFMAN_MAX_TABLE_SIZE, br);
        var block_type;

        if (type_code === 0) {
          block_type = ringbuffers[ringbuffer + (indexes[index] & 1)];
        } else if (type_code === 1) {
          block_type = ringbuffers[ringbuffer + (indexes[index] - 1 & 1)] + 1;
        } else {
          block_type = type_code - 2;
        }

        if (block_type >= max_block_type) {
          block_type -= max_block_type;
        }

        block_types[tree_type] = block_type;
        ringbuffers[ringbuffer + (indexes[index] & 1)] = block_type;
        ++indexes[index];
      }

      function CopyUncompressedBlockToOutput(output, len, pos, ringbuffer, ringbuffer_mask, br) {
        var rb_size = ringbuffer_mask + 1;
        var rb_pos = pos & ringbuffer_mask;
        var br_pos = br.pos_ & BrotliBitReader.IBUF_MASK;
        var nbytes;
        /* For short lengths copy byte-by-byte */

        if (len < 8 || br.bit_pos_ + (len << 3) < br.bit_end_pos_) {
          while (len-- > 0) {
            br.readMoreInput();
            ringbuffer[rb_pos++] = br.readBits(8);

            if (rb_pos === rb_size) {
              output.write(ringbuffer, rb_size);
              rb_pos = 0;
            }
          }

          return;
        }

        if (br.bit_end_pos_ < 32) {
          throw new Error('[CopyUncompressedBlockToOutput] br.bit_end_pos_ < 32');
        }
        /* Copy remaining 0-4 bytes from br.val_ to ringbuffer. */


        while (br.bit_pos_ < 32) {
          ringbuffer[rb_pos] = br.val_ >>> br.bit_pos_;
          br.bit_pos_ += 8;
          ++rb_pos;
          --len;
        }
        /* Copy remaining bytes from br.buf_ to ringbuffer. */


        nbytes = br.bit_end_pos_ - br.bit_pos_ >> 3;

        if (br_pos + nbytes > BrotliBitReader.IBUF_MASK) {
          var tail = BrotliBitReader.IBUF_MASK + 1 - br_pos;

          for (var x = 0; x < tail; x++) {
            ringbuffer[rb_pos + x] = br.buf_[br_pos + x];
          }

          nbytes -= tail;
          rb_pos += tail;
          len -= tail;
          br_pos = 0;
        }

        for (var x = 0; x < nbytes; x++) {
          ringbuffer[rb_pos + x] = br.buf_[br_pos + x];
        }

        rb_pos += nbytes;
        len -= nbytes;
        /* If we wrote past the logical end of the ringbuffer, copy the tail of the
           ringbuffer to its beginning and flush the ringbuffer to the output. */

        if (rb_pos >= rb_size) {
          output.write(ringbuffer, rb_size);
          rb_pos -= rb_size;

          for (var x = 0; x < rb_pos; x++) {
            ringbuffer[x] = ringbuffer[rb_size + x];
          }
        }
        /* If we have more to copy than the remaining size of the ringbuffer, then we
           first fill the ringbuffer from the input and then flush the ringbuffer to
           the output */


        while (rb_pos + len >= rb_size) {
          nbytes = rb_size - rb_pos;

          if (br.input_.read(ringbuffer, rb_pos, nbytes) < nbytes) {
            throw new Error('[CopyUncompressedBlockToOutput] not enough bytes');
          }

          output.write(ringbuffer, rb_size);
          len -= nbytes;
          rb_pos = 0;
        }
        /* Copy straight from the input onto the ringbuffer. The ringbuffer will be
           flushed to the output at a later time. */


        if (br.input_.read(ringbuffer, rb_pos, len) < len) {
          throw new Error('[CopyUncompressedBlockToOutput] not enough bytes');
        }
        /* Restore the state of the bit reader. */


        br.reset();
      }
      /* Advances the bit reader position to the next byte boundary and verifies
         that any skipped bits are set to zero. */


      function JumpToByteBoundary(br) {
        var new_bit_pos = br.bit_pos_ + 7 & ~7;
        var pad_bits = br.readBits(new_bit_pos - br.bit_pos_);
        return pad_bits == 0;
      }

      function BrotliDecompressedSize(buffer) {
        var input = new BrotliInput(buffer);
        var br = new BrotliBitReader(input);
        DecodeWindowBits(br);
        var out = DecodeMetaBlockLength(br);
        return out.meta_block_length;
      }

      exports.BrotliDecompressedSize = BrotliDecompressedSize;

      function BrotliDecompressBuffer(buffer, output_size) {
        var input = new BrotliInput(buffer);

        if (output_size == null) {
          output_size = BrotliDecompressedSize(buffer);
        }

        var output_buffer = new Uint8Array(output_size);
        var output = new BrotliOutput(output_buffer);
        BrotliDecompress(input, output);

        if (output.pos < output.buffer.length) {
          output.buffer = output.buffer.subarray(0, output.pos);
        }

        return output.buffer;
      }

      exports.BrotliDecompressBuffer = BrotliDecompressBuffer;

      function BrotliDecompress(input, output) {
        var i;
        var pos = 0;
        var input_end = 0;
        var window_bits = 0;
        var max_backward_distance;
        var max_distance = 0;
        var ringbuffer_size;
        var ringbuffer_mask;
        var ringbuffer;
        var ringbuffer_end;
        /* This ring buffer holds a few past copy distances that will be used by */

        /* some special distance codes. */

        var dist_rb = [16, 15, 11, 4];
        var dist_rb_idx = 0;
        /* The previous 2 bytes used for context. */

        var prev_byte1 = 0;
        var prev_byte2 = 0;
        var hgroup = [new HuffmanTreeGroup(0, 0), new HuffmanTreeGroup(0, 0), new HuffmanTreeGroup(0, 0)];
        var block_type_trees;
        var block_len_trees;
        var br;
        /* We need the slack region for the following reasons:
             - always doing two 8-byte copies for fast backward copying
             - transforms
             - flushing the input ringbuffer when decoding uncompressed blocks */

        var kRingBufferWriteAheadSlack = 128 + BrotliBitReader.READ_SIZE;
        br = new BrotliBitReader(input);
        /* Decode window size. */

        window_bits = DecodeWindowBits(br);
        max_backward_distance = (1 << window_bits) - 16;
        ringbuffer_size = 1 << window_bits;
        ringbuffer_mask = ringbuffer_size - 1;
        ringbuffer = new Uint8Array(ringbuffer_size + kRingBufferWriteAheadSlack + BrotliDictionary.maxDictionaryWordLength);
        ringbuffer_end = ringbuffer_size;
        block_type_trees = [];
        block_len_trees = [];

        for (var x = 0; x < 3 * HUFFMAN_MAX_TABLE_SIZE; x++) {
          block_type_trees[x] = new HuffmanCode(0, 0);
          block_len_trees[x] = new HuffmanCode(0, 0);
        }

        while (!input_end) {
          var meta_block_remaining_len = 0;
          var is_uncompressed;
          var block_length = [1 << 28, 1 << 28, 1 << 28];
          var block_type = [0];
          var num_block_types = [1, 1, 1];
          var block_type_rb = [0, 1, 0, 1, 0, 1];
          var block_type_rb_index = [0];
          var distance_postfix_bits;
          var num_direct_distance_codes;
          var distance_postfix_mask;
          var num_distance_codes;
          var context_map = null;
          var context_modes = null;
          var num_literal_htrees;
          var dist_context_map = null;
          var num_dist_htrees;
          var context_offset = 0;
          var context_map_slice = null;
          var literal_htree_index = 0;
          var dist_context_offset = 0;
          var dist_context_map_slice = null;
          var dist_htree_index = 0;
          var context_lookup_offset1 = 0;
          var context_lookup_offset2 = 0;
          var context_mode;
          var htree_command;

          for (i = 0; i < 3; ++i) {
            hgroup[i].codes = null;
            hgroup[i].htrees = null;
          }

          br.readMoreInput();

          var _out = DecodeMetaBlockLength(br);

          meta_block_remaining_len = _out.meta_block_length;

          if (pos + meta_block_remaining_len > output.buffer.length) {
            /* We need to grow the output buffer to fit the additional data. */
            var tmp = new Uint8Array(pos + meta_block_remaining_len);
            tmp.set(output.buffer);
            output.buffer = tmp;
          }

          input_end = _out.input_end;
          is_uncompressed = _out.is_uncompressed;

          if (_out.is_metadata) {
            JumpToByteBoundary(br);

            for (; meta_block_remaining_len > 0; --meta_block_remaining_len) {
              br.readMoreInput();
              /* Read one byte and ignore it. */

              br.readBits(8);
            }

            continue;
          }

          if (meta_block_remaining_len === 0) {
            continue;
          }

          if (is_uncompressed) {
            br.bit_pos_ = br.bit_pos_ + 7 & ~7;
            CopyUncompressedBlockToOutput(output, meta_block_remaining_len, pos, ringbuffer, ringbuffer_mask, br);
            pos += meta_block_remaining_len;
            continue;
          }

          for (i = 0; i < 3; ++i) {
            num_block_types[i] = DecodeVarLenUint8(br) + 1;

            if (num_block_types[i] >= 2) {
              ReadHuffmanCode(num_block_types[i] + 2, block_type_trees, i * HUFFMAN_MAX_TABLE_SIZE, br);
              ReadHuffmanCode(kNumBlockLengthCodes, block_len_trees, i * HUFFMAN_MAX_TABLE_SIZE, br);
              block_length[i] = ReadBlockLength(block_len_trees, i * HUFFMAN_MAX_TABLE_SIZE, br);
              block_type_rb_index[i] = 1;
            }
          }

          br.readMoreInput();
          distance_postfix_bits = br.readBits(2);
          num_direct_distance_codes = NUM_DISTANCE_SHORT_CODES + (br.readBits(4) << distance_postfix_bits);
          distance_postfix_mask = (1 << distance_postfix_bits) - 1;
          num_distance_codes = num_direct_distance_codes + (48 << distance_postfix_bits);
          context_modes = new Uint8Array(num_block_types[0]);

          for (i = 0; i < num_block_types[0]; ++i) {
            br.readMoreInput();
            context_modes[i] = br.readBits(2) << 1;
          }

          var _o1 = DecodeContextMap(num_block_types[0] << kLiteralContextBits, br);

          num_literal_htrees = _o1.num_htrees;
          context_map = _o1.context_map;

          var _o2 = DecodeContextMap(num_block_types[2] << kDistanceContextBits, br);

          num_dist_htrees = _o2.num_htrees;
          dist_context_map = _o2.context_map;
          hgroup[0] = new HuffmanTreeGroup(kNumLiteralCodes, num_literal_htrees);
          hgroup[1] = new HuffmanTreeGroup(kNumInsertAndCopyCodes, num_block_types[1]);
          hgroup[2] = new HuffmanTreeGroup(num_distance_codes, num_dist_htrees);

          for (i = 0; i < 3; ++i) {
            hgroup[i].decode(br);
          }

          context_map_slice = 0;
          dist_context_map_slice = 0;
          context_mode = context_modes[block_type[0]];
          context_lookup_offset1 = Context.lookupOffsets[context_mode];
          context_lookup_offset2 = Context.lookupOffsets[context_mode + 1];
          htree_command = hgroup[1].htrees[0];

          while (meta_block_remaining_len > 0) {
            var cmd_code;
            var range_idx;
            var insert_code;
            var copy_code;
            var insert_length;
            var copy_length;
            var distance_code;
            var distance;
            var context;
            var j;
            var copy_dst;
            br.readMoreInput();

            if (block_length[1] === 0) {
              DecodeBlockType(num_block_types[1], block_type_trees, 1, block_type, block_type_rb, block_type_rb_index, br);
              block_length[1] = ReadBlockLength(block_len_trees, HUFFMAN_MAX_TABLE_SIZE, br);
              htree_command = hgroup[1].htrees[block_type[1]];
            }

            --block_length[1];
            cmd_code = ReadSymbol(hgroup[1].codes, htree_command, br);
            range_idx = cmd_code >> 6;

            if (range_idx >= 2) {
              range_idx -= 2;
              distance_code = -1;
            } else {
              distance_code = 0;
            }

            insert_code = Prefix.kInsertRangeLut[range_idx] + (cmd_code >> 3 & 7);
            copy_code = Prefix.kCopyRangeLut[range_idx] + (cmd_code & 7);
            insert_length = Prefix.kInsertLengthPrefixCode[insert_code].offset + br.readBits(Prefix.kInsertLengthPrefixCode[insert_code].nbits);
            copy_length = Prefix.kCopyLengthPrefixCode[copy_code].offset + br.readBits(Prefix.kCopyLengthPrefixCode[copy_code].nbits);
            prev_byte1 = ringbuffer[pos - 1 & ringbuffer_mask];
            prev_byte2 = ringbuffer[pos - 2 & ringbuffer_mask];

            for (j = 0; j < insert_length; ++j) {
              br.readMoreInput();

              if (block_length[0] === 0) {
                DecodeBlockType(num_block_types[0], block_type_trees, 0, block_type, block_type_rb, block_type_rb_index, br);
                block_length[0] = ReadBlockLength(block_len_trees, 0, br);
                context_offset = block_type[0] << kLiteralContextBits;
                context_map_slice = context_offset;
                context_mode = context_modes[block_type[0]];
                context_lookup_offset1 = Context.lookupOffsets[context_mode];
                context_lookup_offset2 = Context.lookupOffsets[context_mode + 1];
              }

              context = Context.lookup[context_lookup_offset1 + prev_byte1] | Context.lookup[context_lookup_offset2 + prev_byte2];
              literal_htree_index = context_map[context_map_slice + context];
              --block_length[0];
              prev_byte2 = prev_byte1;
              prev_byte1 = ReadSymbol(hgroup[0].codes, hgroup[0].htrees[literal_htree_index], br);
              ringbuffer[pos & ringbuffer_mask] = prev_byte1;

              if ((pos & ringbuffer_mask) === ringbuffer_mask) {
                output.write(ringbuffer, ringbuffer_size);
              }

              ++pos;
            }

            meta_block_remaining_len -= insert_length;
            if (meta_block_remaining_len <= 0) break;

            if (distance_code < 0) {
              var context;
              br.readMoreInput();

              if (block_length[2] === 0) {
                DecodeBlockType(num_block_types[2], block_type_trees, 2, block_type, block_type_rb, block_type_rb_index, br);
                block_length[2] = ReadBlockLength(block_len_trees, 2 * HUFFMAN_MAX_TABLE_SIZE, br);
                dist_context_offset = block_type[2] << kDistanceContextBits;
                dist_context_map_slice = dist_context_offset;
              }

              --block_length[2];
              context = (copy_length > 4 ? 3 : copy_length - 2) & 0xff;
              dist_htree_index = dist_context_map[dist_context_map_slice + context];
              distance_code = ReadSymbol(hgroup[2].codes, hgroup[2].htrees[dist_htree_index], br);

              if (distance_code >= num_direct_distance_codes) {
                var nbits;
                var postfix;
                var offset;
                distance_code -= num_direct_distance_codes;
                postfix = distance_code & distance_postfix_mask;
                distance_code >>= distance_postfix_bits;
                nbits = (distance_code >> 1) + 1;
                offset = (2 + (distance_code & 1) << nbits) - 4;
                distance_code = num_direct_distance_codes + (offset + br.readBits(nbits) << distance_postfix_bits) + postfix;
              }
            }
            /* Convert the distance code to the actual distance by possibly looking */

            /* up past distnaces from the ringbuffer. */


            distance = TranslateShortCodes(distance_code, dist_rb, dist_rb_idx);

            if (distance < 0) {
              throw new Error('[BrotliDecompress] invalid distance');
            }

            if (pos < max_backward_distance && max_distance !== max_backward_distance) {
              max_distance = pos;
            } else {
              max_distance = max_backward_distance;
            }

            copy_dst = pos & ringbuffer_mask;

            if (distance > max_distance) {
              if (copy_length >= BrotliDictionary.minDictionaryWordLength && copy_length <= BrotliDictionary.maxDictionaryWordLength) {
                var offset = BrotliDictionary.offsetsByLength[copy_length];
                var word_id = distance - max_distance - 1;
                var shift = BrotliDictionary.sizeBitsByLength[copy_length];
                var mask = (1 << shift) - 1;
                var word_idx = word_id & mask;
                var transform_idx = word_id >> shift;
                offset += word_idx * copy_length;

                if (transform_idx < Transform.kNumTransforms) {
                  var len = Transform.transformDictionaryWord(ringbuffer, copy_dst, offset, copy_length, transform_idx);
                  copy_dst += len;
                  pos += len;
                  meta_block_remaining_len -= len;

                  if (copy_dst >= ringbuffer_end) {
                    output.write(ringbuffer, ringbuffer_size);

                    for (var _x = 0; _x < copy_dst - ringbuffer_end; _x++) {
                      ringbuffer[_x] = ringbuffer[ringbuffer_end + _x];
                    }
                  }
                } else {
                  throw new Error("Invalid backward reference. pos: " + pos + " distance: " + distance + " len: " + copy_length + " bytes left: " + meta_block_remaining_len);
                }
              } else {
                throw new Error("Invalid backward reference. pos: " + pos + " distance: " + distance + " len: " + copy_length + " bytes left: " + meta_block_remaining_len);
              }
            } else {
              if (distance_code > 0) {
                dist_rb[dist_rb_idx & 3] = distance;
                ++dist_rb_idx;
              }

              if (copy_length > meta_block_remaining_len) {
                throw new Error("Invalid backward reference. pos: " + pos + " distance: " + distance + " len: " + copy_length + " bytes left: " + meta_block_remaining_len);
              }

              for (j = 0; j < copy_length; ++j) {
                ringbuffer[pos & ringbuffer_mask] = ringbuffer[pos - distance & ringbuffer_mask];

                if ((pos & ringbuffer_mask) === ringbuffer_mask) {
                  output.write(ringbuffer, ringbuffer_size);
                }

                ++pos;
                --meta_block_remaining_len;
              }
            }
            /* When we get here, we must have inserted at least one literal and */

            /* made a copy of at least length two, therefore accessing the last 2 */

            /* bytes is valid. */


            prev_byte1 = ringbuffer[pos - 1 & ringbuffer_mask];
            prev_byte2 = ringbuffer[pos - 2 & ringbuffer_mask];
          }
          /* Protect pos from overflow, wrap it around at every GB of input data */


          pos &= 0x3fffffff;
        }

        output.write(ringbuffer, pos & ringbuffer_mask);
      }

      exports.BrotliDecompress = BrotliDecompress;
      BrotliDictionary.init();
      /***/
    },
    /* 287 */

    /***/
    function (module, exports) {
      function BrotliInput(buffer) {
        this.buffer = buffer;
        this.pos = 0;
      }

      BrotliInput.prototype.read = function (buf, i, count) {
        if (this.pos + count > this.buffer.length) {
          count = this.buffer.length - this.pos;
        }

        for (var p = 0; p < count; p++) {
          buf[i + p] = this.buffer[this.pos + p];
        }

        this.pos += count;
        return count;
      };

      exports.BrotliInput = BrotliInput;

      function BrotliOutput(buf) {
        this.buffer = buf;
        this.pos = 0;
      }

      BrotliOutput.prototype.write = function (buf, count) {
        if (this.pos + count > this.buffer.length) throw new Error('Output buffer is not large enough');
        this.buffer.set(buf.subarray(0, count), this.pos);
        this.pos += count;
        return count;
      };

      exports.BrotliOutput = BrotliOutput;
      /***/
    },
    /* 288 */

    /***/
    function (module, exports, __webpack_require__) {
      /* Copyright 2013 Google Inc. All Rights Reserved.
      
         Licensed under the Apache License, Version 2.0 (the "License");
         you may not use this file except in compliance with the License.
         You may obtain a copy of the License at
      
         http://www.apache.org/licenses/LICENSE-2.0
      
         Unless required by applicable law or agreed to in writing, software
         distributed under the License is distributed on an "AS IS" BASIS,
         WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         See the License for the specific language governing permissions and
         limitations under the License.
      
         Collection of static dictionary words.
      */
      var data = __webpack_require__(521);

      exports.init = function () {
        exports.dictionary = data.init();
      };

      exports.offsetsByLength = new Uint32Array([0, 0, 0, 0, 0, 4096, 9216, 21504, 35840, 44032, 53248, 63488, 74752, 87040, 93696, 100864, 104704, 106752, 108928, 113536, 115968, 118528, 119872, 121280, 122016]);
      exports.sizeBitsByLength = new Uint8Array([0, 0, 0, 0, 10, 10, 11, 11, 10, 10, 10, 10, 10, 9, 9, 8, 7, 7, 8, 7, 7, 6, 6, 5, 5]);
      exports.minDictionaryWordLength = 4;
      exports.maxDictionaryWordLength = 24;
      /***/
    },
    /* 289 */

    /***/
    function (module, exports) {
      function HuffmanCode(bits, value) {
        this.bits = bits;
        /* number of bits used for this symbol */

        this.value = value;
        /* symbol value or table offset */
      }

      exports.HuffmanCode = HuffmanCode;
      var MAX_LENGTH = 15;
      /* Returns reverse(reverse(key, len) + 1, len), where reverse(key, len) is the
         bit-wise reversal of the len least significant bits of key. */

      function GetNextKey(key, len) {
        var step = 1 << len - 1;

        while (key & step) {
          step >>= 1;
        }

        return (key & step - 1) + step;
      }
      /* Stores code in table[0], table[step], table[2*step], ..., table[end] */

      /* Assumes that end is an integer multiple of step */


      function ReplicateValue(table, i, step, end, code) {
        do {
          end -= step;
          table[i + end] = new HuffmanCode(code.bits, code.value);
        } while (end > 0);
      }
      /* Returns the table width of the next 2nd level table. count is the histogram
         of bit lengths for the remaining symbols, len is the code length of the next
         processed symbol */


      function NextTableBitSize(count, len, root_bits) {
        var left = 1 << len - root_bits;

        while (len < MAX_LENGTH) {
          left -= count[len];
          if (left <= 0) break;
          ++len;
          left <<= 1;
        }

        return len - root_bits;
      }

      exports.BrotliBuildHuffmanTable = function (root_table, table, root_bits, code_lengths, code_lengths_size) {
        var start_table = table;
        var code;
        /* current table entry */

        var len;
        /* current code length */

        var symbol;
        /* symbol index in original or sorted table */

        var key;
        /* reversed prefix code */

        var step;
        /* step size to replicate values in current table */

        var low;
        /* low bits for current root entry */

        var mask;
        /* mask for low bits */

        var table_bits;
        /* key length of current table */

        var table_size;
        /* size of current table */

        var total_size;
        /* sum of root table size and 2nd level table sizes */

        var sorted;
        /* symbols sorted by code length */

        var count = new Int32Array(MAX_LENGTH + 1);
        /* number of codes of each length */

        var offset = new Int32Array(MAX_LENGTH + 1);
        /* offsets in sorted table for each length */

        sorted = new Int32Array(code_lengths_size);
        /* build histogram of code lengths */

        for (symbol = 0; symbol < code_lengths_size; symbol++) {
          count[code_lengths[symbol]]++;
        }
        /* generate offsets into sorted symbol table by code length */


        offset[1] = 0;

        for (len = 1; len < MAX_LENGTH; len++) {
          offset[len + 1] = offset[len] + count[len];
        }
        /* sort symbols by length, by symbol order within each length */


        for (symbol = 0; symbol < code_lengths_size; symbol++) {
          if (code_lengths[symbol] !== 0) {
            sorted[offset[code_lengths[symbol]]++] = symbol;
          }
        }

        table_bits = root_bits;
        table_size = 1 << table_bits;
        total_size = table_size;
        /* special case code with only one value */

        if (offset[MAX_LENGTH] === 1) {
          for (key = 0; key < total_size; ++key) {
            root_table[table + key] = new HuffmanCode(0, sorted[0] & 0xffff);
          }

          return total_size;
        }
        /* fill in root table */


        key = 0;
        symbol = 0;

        for (len = 1, step = 2; len <= root_bits; ++len, step <<= 1) {
          for (; count[len] > 0; --count[len]) {
            code = new HuffmanCode(len & 0xff, sorted[symbol++] & 0xffff);
            ReplicateValue(root_table, table + key, step, table_size, code);
            key = GetNextKey(key, len);
          }
        }
        /* fill in 2nd level tables and add pointers to root table */


        mask = total_size - 1;
        low = -1;

        for (len = root_bits + 1, step = 2; len <= MAX_LENGTH; ++len, step <<= 1) {
          for (; count[len] > 0; --count[len]) {
            if ((key & mask) !== low) {
              table += table_size;
              table_bits = NextTableBitSize(count, len, root_bits);
              table_size = 1 << table_bits;
              total_size += table_size;
              low = key & mask;
              root_table[start_table + low] = new HuffmanCode(table_bits + root_bits & 0xff, table - start_table - low & 0xffff);
            }

            code = new HuffmanCode(len - root_bits & 0xff, sorted[symbol++] & 0xffff);
            ReplicateValue(root_table, table + (key >> root_bits), step, table_size, code);
            key = GetNextKey(key, len);
          }
        }

        return total_size;
      };
      /***/

    },
    /* 290 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var AI, AL, BA, BK, CB, CJ, CR, ID, LF, NL, NS, SA, SG, SP, WJ, XX;

      var UnicodeTrie = __webpack_require__(527);

      var base64 = __webpack_require__(528);

      var _require = __webpack_require__(529);

      BK = _require.BK;
      CR = _require.CR;
      LF = _require.LF;
      NL = _require.NL;
      CB = _require.CB;
      BA = _require.BA;
      SP = _require.SP;
      WJ = _require.WJ;
      SP = _require.SP;
      BK = _require.BK;
      LF = _require.LF;
      NL = _require.NL;
      AI = _require.AI;
      AL = _require.AL;
      SA = _require.SA;
      SG = _require.SG;
      XX = _require.XX;
      CJ = _require.CJ;
      ID = _require.ID;
      NS = _require.NS;

      var _require2 = __webpack_require__(530),
          DI_BRK = _require2.DI_BRK,
          IN_BRK = _require2.IN_BRK,
          CI_BRK = _require2.CI_BRK,
          CP_BRK = _require2.CP_BRK,
          PR_BRK = _require2.PR_BRK,
          pairTable = _require2.pairTable;

      var data = base64.toByteArray("AA4IAAAAAAAAAhqg5VV7NJtZvz7fTC8zU5deplUlMrQoWqmqahD5So0aipYWrUhVFSVBQ10iSTtUtW6nKDVF6k7d75eQfEUbFcQ9KiFS90tQEolcP23nrLPmO+esr/+f39rr/a293t/e7/P8nmfvlz0O6RvrBJADtbBNaD88IOKTOmOrCqhu9zE770vc1pBV/xL5dxj2V7Zj4FGSomFKStCWNlV7hG1VabZfZ1LaHbFrRwzzLjzPoi1UHDnlV/lWbhgIIJvLBp/pu7AHEdRnIY+ROdXxg4fNpMdTxVnnm08OjozejAVsBqwqz8kddGRlRxsd8c55dNZoPuex6a7Dt6L0NNb03sqgTlR2/OT7eTt0Y0WnpUXxLsp5SMANc4DsmX4zJUBQvznwexm9tsMH+C9uRYMPOd96ZHB29NZjCIM2nfO7tsmQveX3l2r7ft0N4/SRJ7kO6Y8ZCaeuUQ4gMTZ67cp7TgxvlNDsPgOBdZi2YTam5Q7m3+00l+XG7PrDe6YoPmHgK+yLih7fAR16ZFCeD9WvOVt+gfNW/KT5/M6rb/9KERt+N1lad5RneVjzxXHsLofuU+TvrEsr3+26sVz5WJh6L/svoPK3qepFH9bysDljWtD1F7KrxzW1i9r+e/NLxV/acts7zuo304J9+t3Pd6Y6u8f3EAqxNRgv5DZjaI3unyvkvHPya/v3mWVYOC38qBq11+yHZ2bAyP1HbkV92vdno7r2lxz9UwCdCJVfd14NLcpO2CadHS/XPJ9doXgz5vLv/1OBVS3gX0D9n6LiNIDfpilO9RsLgZ2W/wIy8W/Rh93jfoz4qmRV2xElv6p2lRXQdO6/Cv8f5nGn3u0wLXjhnvClabL1o+7yvIpvLfT/xsKG30y/sTvq30ia9Czxp9dr9v/e7Yn/O0QJXxxBOJmceP/DBFa1q1v6oudn/e6qc/37dUoNvnYL4plQ9OoneYOh/r8fOFm7yl7FETHY9dXd5K2n/qEc53dOEe1TTJcvCfp1dpTC334l0vyaFL6mttNEbFjzO+ZV2mLk0qc3BrxJ4d9gweMmjRorxb7vic0rSq6D4wzAyFWas1TqPE0sLI8XLAryC8tPChaN3ALEZSWmtB34SyZcxXYn/E4Tg0LeMIPhgPKD9zyHGMxxhxnDDih7eI86xECTM8zodUCdgffUmRh4rQ8zyA6ow/Aei+01a8OMfziQQ+GAEkhwN/cqUFYAVzA9ex4n6jgtsiMvXf5BtXxEU4hSphvx3v8+9au8eEekEEpkrkne/zB1M+HAPuXIz3paxKlfe8aDMfGWAX6Md6PuuAdKHFVH++Ed5LEji94Z5zeiJIxbmWeN7rr1/ZcaBl5/nimdHsHgIH/ssyLUXZ4fDQ46HnBb+hQqG8yNiKRrXL/b1IPYDUsu3dFKtRMcjqlRvONd4xBvOufx2cUHuk8pmG1D7PyOQmUmluisVFS9OWS8fPIe8LiCtjwJKnEC9hrS9uKmISI3Wa5+vdXUG9dtyfr7g/oJv2wbzeZU838G6mEvntUb3SVV/fBZ6H/sL+lElzeRrHy2Xbe7UWX1q5sgOQ81rv+2baej4fP4m5Mf/GkoxfDtT3++KP7do9Jn26aa6xAhCf5L9RZVfkWKCcjI1eYbm2plvTEqkDxKC402bGzXCYaGnuALHabBT1dFLuOSB7RorOPEhZah1NjZIgR/UFGfK3p1ElYnevOMBDLURdpIjrI+qZk4sffGbRFiXuEmdFjiAODlQCJvIaB1rW61Ljg3y4eS4LAcSgDxxZQs0DYa15wA032Z+lGUfpoyOrFo3mg1sRQtN/fHHCx3TrM8eTrldMbYisDLXbUDoXMLejSq0fUNuO1muX0gEa8vgyegkqiqqbC3W0S4cC9Kmt8MuS/hFO7Xei3f8rSvIjeveMM7kxjUixOrl6gJshe4JU7PhOHpfrRYvu7yoAZKa3Buyk2J+K5W+nNTz1nhJDhRUfDJLiUXxjxXCJeeaOe/r7HlBP/uURc/5efaZEPxr55Qj39rfTLkugUGyMrwo7HAglfEjDriehF1jXtwJkPoiYkYQ5aoXSA7qbCBGKq5hwtu2VkpI9xVDop/1xrC52eiIvCoPWx4lLl40jm9upvycVPfpaH9/o2D4xKXpeNjE2HPQRS+3RFaYTc4Txw7Dvq5X6JBRwzs9mvoB49BK6b+XgsZVJYiInTlSXZ+62FT18mkFVcPKCJsoF5ahb19WheZLUYsSwdrrVM3aQ2XE6SzU2xHDS6iWkodk5AF6F8WUNmmushi8aVpMPwiIfEiQWo3CApONDRjrhDiVnkaFsaP5rjIJkmsN6V26li5LNM3JxGSyKgomknTyyrhcnwv9Qcqaq5utAh44W30SWo8Q0XHKR0glPF4fWst1FUCnk2woFq3iy9fAbzcjJ8fvSjgKVOfn14RDqyQuIgaGJZuswTywdCFSa89SakMf6fe+9KaQMYQlKxiJBczuPSho4wmBjdA+ag6QUOr2GdpcbSl51Ay6khhBt5UXdrnxc7ZGMxCvz96A4oLocxh2+px+1zkyLacCGrxnPzTRSgrLKpStFpH5ppKWm7PgMKZtwgytKLOjbGCOQLTm+KOowqa1sdut9raj1CZFkZD0jbaKNLpJUarSH5Qknx1YiOxdA5L6d5sfI/unmkSF65Ic/AvtXt98Pnrdwl5vgppQ3dYzWFwknZsy6xh2llmLxpegF8ayLwniknlXRHiF4hzzrgB8jQ4wdIqcaHCEAxyJwCeGkXPBZYSrrGa4vMwZvNN9aK0F4JBOK9mQ8g8EjEbIQVwvfS2D8GuCYsdqwqSWbQrfWdTRUJMqmpnWPax4Z7E137I6brHbvjpPlfNZpF1d7PP7HB/MPHcHVKTMhLO4f3CZcaccZEOiS2DpKiQB5KXDJ+Ospcz4qTRCRxgrKEQIgUkKLTKKwskdx2DWo3bg3PEoB5h2nA24olwfKSR+QR6TAvEDi/0czhUT59RZmO1MGeKGeEfuOSPWfL+XKmhqpZmOVR9mJVNDPKOS49Lq+Um10YsBybzDMtemlPCOJEtE8zaXhsaqEs9bngSJGhlOTTMlCXly9Qv5cRN3PVLK7zoMptutf7ihutrQ/Xj7VqeCdUwleTTKklOI8Wep9h7fCY0kVtDtIWKnubWAvbNZtsRRqOYl802vebPEkZRSZc6wXOfPtpPtN5HI63EUFfsy7U/TLr8NkIzaY3vx4A28x765XZMzRZTpMk81YIMuwJ5+/zoCuZj1wGnaHObxa5rpKZj4WhT670maRw04w0e3cZW74Z0aZe2n05hjZaxm6urenz8Ef5O6Yu1J2aqYAlqsCXs5ZB5o1JJ5l3xkTVr8rJQ09NLsBqRRDT2IIjOPmcJa6xQ1R5yGP9jAsj23xYDTezdyqG8YWZ7vJBIWK56K+iDgcHimiQOTIasNSua1fOBxsKMMEKd15jxTl+3CyvGCR+UyRwuSI2XuwRIPoNNclPihfJhaq2mKkNijwYLY6feqohktukmI3KDvOpN7ItCqHHhNuKlxMfBAEO5LjW2RKh6lE5Hd1dtAOopac/Z4FdsNsjMhXz/ug8JGmbVJTA+VOBJXdrYyJcIn5+OEeoK8kWEWF+wdG8ZtZHKSquWDtDVyhFPkRVqguKFkLkKCz46hcU1SUY9oJ2Sk+dmq0kglqk4kqKT1CV9JDELPjK1WsWGkEXF87g9P98e5ff0mIupm/w6vc3kCeq04X5bgJQlcMFRjlFWmSk+kssXCAVikfeAlMuzpUvCSdXiG+dc6KrIiLxxhbEVuKf7vW7KmDQI95bZe3H9mN3/77F6fZ2Yx/F9yClllj8gXpLWLpd5+v90iOaFa9sd7Pvx0lNa1o1+bkiZ69wCiC2x9UIb6/boBCuNMB/HYR0RC6+FD9Oe5qrgQl6JbXtkaYn0wkdNhROLqyhv6cKvyMj1Fvs2o3OOKoMYTubGENLfY5F6H9d8wX1cnINsvz+wZFQu3zhWVlwJvwBEp69Dqu/ZnkBf3nIfbx4TK7zOVJH5sGJX+IMwkn1vVBn38GbpTg9bJnMcTOb5F6Ci5gOn9Fcy6Qzcu+FL6mYJJ+f2ZZJGda1VqruZ0JRXItp8X0aTjIcJgzdaXlha7q7kV4ebrMsunfsRyRa9qYuryBHA0hc1KVsKdE+oI0ljLmSAyMze8lWmc5/lQ18slyTVC/vADTc+SNM5++gztTBLz4m0aVUKcfgOEExuKVomJ7XQDZuziMDjG6JP9tgR7JXZTeo9RGetW/Xm9/TgPJpTgHACPOGvmy2mDm9fl09WeMm9sQUAXP3Su2uApeCwJVT5iWCXDgmcuTsFgU9Nm6/PusJzSbDQIMfl6INY/OAEvZRN54BSSXUClM51im6Wn9VhVamKJmzOaFJErgJcs0etFZ40LIF3EPkjFTjGmAhsd174NnOwJW8TdJ1Dja+E6Wa6FVS22Haj1DDA474EesoMP5nbspAPJLWJ8rYcP1DwCslhnn+gTFm+sS9wY+U6SogAa9tiwpoxuaFeqm2OK+uozR6SfiLCOPz36LiDlzXr6UWd7BpY6mlrNANkTOeme5EgnnAkQRTGo9T6iYxbUKfGJcI9B+ub2PcyUOgpwXbOf3bHFWtygD7FYbRhb+vkzi87dB0JeXl/vBpBUz93VtqZi7AL7C1VowTF+tGmyurw7DBcktc+UMY0E10Jw4URojf8NdaNpN6E1q4+Oz+4YePtMLy8FPRP");
      var classTrie = new UnicodeTrie(data);

      var mapClass = function mapClass(c) {
        switch (c) {
          case AI:
            return AL;

          case SA:
          case SG:
          case XX:
            return AL;

          case CJ:
            return NS;

          default:
            return c;
        }
      };

      var mapFirst = function mapFirst(c) {
        switch (c) {
          case LF:
          case NL:
            return BK;

          case CB:
            return BA;

          case SP:
            return WJ;

          default:
            return c;
        }
      };

      var Break = function Break(position, required) {
        if (required === void 0) {
          required = false;
        }

        this.position = position;
        this.required = required;
      };

      ;

      var LineBreaker = /*#__PURE__*/function () {
        function LineBreaker(string) {
          this.string = string;
          this.pos = 0;
          this.lastPos = 0;
          this.curClass = null;
          this.nextClass = null;
        }

        var _proto = LineBreaker.prototype;

        _proto.nextCodePoint = function nextCodePoint() {
          var code = this.string.charCodeAt(this.pos++);
          var next = this.string.charCodeAt(this.pos); // If a surrogate pair

          if (0xd800 <= code && code <= 0xdbff && 0xdc00 <= next && next <= 0xdfff) {
            this.pos++;
            return (code - 0xd800) * 0x400 + (next - 0xdc00) + 0x10000;
          }

          return code;
        };

        _proto.nextCharClass = function nextCharClass() {
          return mapClass(classTrie.get(this.nextCodePoint()));
        };

        _proto.nextBreak = function nextBreak() {
          // get the first char if we're at the beginning of the string
          if (this.curClass == null) {
            this.curClass = mapFirst(this.nextCharClass());
          }

          while (this.pos < this.string.length) {
            this.lastPos = this.pos;
            var lastClass = this.nextClass;
            this.nextClass = this.nextCharClass(); // explicit newline

            if (this.curClass === BK || this.curClass === CR && this.nextClass !== LF) {
              this.curClass = mapFirst(mapClass(this.nextClass));
              return new Break(this.lastPos, true);
            } // handle classes not handled by the pair table


            var cur = void 0;

            switch (this.nextClass) {
              case SP:
                cur = this.curClass;
                break;

              case BK:
              case LF:
              case NL:
                cur = BK;
                break;

              case CR:
                cur = CR;
                break;

              case CB:
                cur = BA;
                break;
            }

            if (cur != null) {
              this.curClass = cur;

              if (this.nextClass === CB) {
                return new Break(this.lastPos);
              }

              continue;
            } // if not handled already, use the pair table


            var shouldBreak = false;

            switch (pairTable[this.curClass][this.nextClass]) {
              case DI_BRK:
                // Direct break
                shouldBreak = true;
                break;

              case IN_BRK:
                // possible indirect break
                shouldBreak = lastClass === SP;
                break;

              case CI_BRK:
                shouldBreak = lastClass === SP;

                if (!shouldBreak) {
                  continue;
                }

                break;

              case CP_BRK:
                // prohibited for combining marks
                if (lastClass !== SP) {
                  continue;
                }

                break;
            }

            this.curClass = this.nextClass;

            if (shouldBreak) {
              return new Break(this.lastPos);
            }
          }

          if (this.pos >= this.string.length) {
            if (this.lastPos < this.string.length) {
              this.lastPos = this.string.length;
              return new Break(this.string.length);
            } else {
              return null;
            }
          }
        };

        return LineBreaker;
      }();

      ;
      module.exports = LineBreaker;
      /***/
    },
    /* 291 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      function TraversalTracker() {
        this.events = {};
      }

      TraversalTracker.prototype.startTracking = function (event, callback) {
        var callbacks = this.events[event] || (this.events[event] = []);

        if (callbacks.indexOf(callback) < 0) {
          callbacks.push(callback);
        }
      };

      TraversalTracker.prototype.stopTracking = function (event, callback) {
        var callbacks = this.events[event];

        if (!callbacks) {
          return;
        }

        var index = callbacks.indexOf(callback);

        if (index >= 0) {
          callbacks.splice(index, 1);
        }
      };

      TraversalTracker.prototype.emit = function (event) {
        var args = Array.prototype.slice.call(arguments, 1);
        var callbacks = this.events[event];

        if (!callbacks) {
          return;
        }

        callbacks.forEach(function (callback) {
          callback.apply(this, args);
        });
      };

      TraversalTracker.prototype.auto = function (event, callback, innerFunction) {
        this.startTracking(event, callback);
        innerFunction();
        this.stopTracking(event, callback);
      };

      module.exports = TraversalTracker;
      /***/
    },
    /* 292 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var isString = __webpack_require__(0).isString;

      var isArray = __webpack_require__(0).isArray;

      var isUndefined = __webpack_require__(0).isUndefined;

      var isNull = __webpack_require__(0).isNull;
      /**
       * Creates an instance of StyleContextStack used for style inheritance and style overrides
       *
       * @constructor
       * @this {StyleContextStack}
       * @param {Object} named styles dictionary
       * @param {Object} optional default style definition
       */


      function StyleContextStack(styleDictionary, defaultStyle) {
        this.defaultStyle = defaultStyle || {};
        this.styleDictionary = styleDictionary;
        this.styleOverrides = [];
      }
      /**
       * Creates cloned version of current stack
       * @return {StyleContextStack} current stack snapshot
       */


      StyleContextStack.prototype.clone = function () {
        var stack = new StyleContextStack(this.styleDictionary, this.defaultStyle);
        this.styleOverrides.forEach(function (item) {
          stack.styleOverrides.push(item);
        });
        return stack;
      };
      /**
       * Pushes style-name or style-overrides-object onto the stack for future evaluation
       *
       * @param {String|Object} styleNameOrOverride style-name (referring to styleDictionary) or
       *                                            a new dictionary defining overriding properties
       */


      StyleContextStack.prototype.push = function (styleNameOrOverride) {
        this.styleOverrides.push(styleNameOrOverride);
      };
      /**
       * Removes last style-name or style-overrides-object from the stack
       *
       * @param {Number} howMany - optional number of elements to be popped (if not specified,
       *                           one element will be removed from the stack)
       */


      StyleContextStack.prototype.pop = function (howMany) {
        howMany = howMany || 1;

        while (howMany-- > 0) {
          this.styleOverrides.pop();
        }
      };
      /**
       * Creates a set of named styles or/and a style-overrides-object based on the item,
       * pushes those elements onto the stack for future evaluation and returns the number
       * of elements pushed, so they can be easily poped then.
       *
       * @param {Object} item - an object with optional style property and/or style overrides
       * @return the number of items pushed onto the stack
       */


      StyleContextStack.prototype.autopush = function (item) {
        if (isString(item)) {
          return 0;
        }

        var styleNames = [];

        if (item.style) {
          if (isArray(item.style)) {
            styleNames = item.style;
          } else {
            styleNames = [item.style];
          }
        }

        for (var i = 0, l = styleNames.length; i < l; i++) {
          this.push(styleNames[i]);
        }

        var styleProperties = ['font', 'fontSize', 'fontFeatures', 'bold', 'italics', 'alignment', 'color', 'columnGap', 'fillColor', 'fillOpacity', 'decoration', 'decorationStyle', 'decorationColor', 'background', 'lineHeight', 'characterSpacing', 'noWrap', 'markerColor', 'leadingIndent' //'tableCellPadding'
        // 'cellBorder',
        // 'headerCellBorder',
        // 'oddRowCellBorder',
        // 'evenRowCellBorder',
        // 'tableBorder'
        ];
        var styleOverrideObject = {};
        var pushStyleOverrideObject = false;
        styleProperties.forEach(function (key) {
          if (!isUndefined(item[key]) && !isNull(item[key])) {
            styleOverrideObject[key] = item[key];
            pushStyleOverrideObject = true;
          }
        });

        if (pushStyleOverrideObject) {
          this.push(styleOverrideObject);
        }

        return styleNames.length + (pushStyleOverrideObject ? 1 : 0);
      };
      /**
       * Automatically pushes elements onto the stack, using autopush based on item,
       * executes callback and then pops elements back. Returns value returned by callback
       *
       * @param  {Object}   item - an object with optional style property and/or style overrides
       * @param  {Function} function to be called between autopush and pop
       * @return {Object} value returned by callback
       */


      StyleContextStack.prototype.auto = function (item, callback) {
        var pushedItems = this.autopush(item);
        var result = callback();

        if (pushedItems > 0) {
          this.pop(pushedItems);
        }

        return result;
      };
      /**
       * Evaluates stack and returns value of a named property
       *
       * @param {String} property - property name
       * @return property value or null if not found
       */


      StyleContextStack.prototype.getProperty = function (property) {
        if (this.styleOverrides) {
          for (var i = this.styleOverrides.length - 1; i >= 0; i--) {
            var item = this.styleOverrides[i];

            if (isString(item)) {
              // named-style-override
              var style = this.styleDictionary[item];

              if (style && !isUndefined(style[property]) && !isNull(style[property])) {
                return style[property];
              }
            } else if (!isUndefined(item[property]) && !isNull(item[property])) {
              // style-overrides-object
              return item[property];
            }
          }
        }

        return this.defaultStyle && this.defaultStyle[property];
      };

      module.exports = StyleContextStack;
      /***/
    },
    /* 293 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var TraversalTracker = __webpack_require__(291);

      var isString = __webpack_require__(0).isString;
      /**
       * Creates an instance of DocumentContext - a store for current x, y positions and available width/height.
       * It facilitates column divisions and vertical sync
       */


      function DocumentContext(pageSize, pageMargins) {
        this.pages = [];
        this.pageMargins = pageMargins;
        this.x = pageMargins.left;
        this.availableWidth = pageSize.width - pageMargins.left - pageMargins.right;
        this.availableHeight = 0;
        this.page = -1;
        this.snapshots = [];
        this.endingCell = null;
        this.tracker = new TraversalTracker();
        this.backgroundLength = [];
        this.addPage(pageSize);
      }

      DocumentContext.prototype.beginColumnGroup = function () {
        this.snapshots.push({
          x: this.x,
          y: this.y,
          availableHeight: this.availableHeight,
          availableWidth: this.availableWidth,
          page: this.page,
          bottomMost: {
            x: this.x,
            y: this.y,
            availableHeight: this.availableHeight,
            availableWidth: this.availableWidth,
            page: this.page
          },
          endingCell: this.endingCell,
          lastColumnWidth: this.lastColumnWidth
        });
        this.lastColumnWidth = 0;
      };

      DocumentContext.prototype.beginColumn = function (width, offset, endingCell) {
        var saved = this.snapshots[this.snapshots.length - 1];
        this.calculateBottomMost(saved);
        this.endingCell = endingCell;
        this.page = saved.page;
        this.x = this.x + this.lastColumnWidth + (offset || 0);
        this.y = saved.y;
        this.availableWidth = width; //saved.availableWidth - offset;

        this.availableHeight = saved.availableHeight;
        this.lastColumnWidth = width;
      };

      DocumentContext.prototype.calculateBottomMost = function (destContext) {
        if (this.endingCell) {
          this.saveContextInEndingCell(this.endingCell);
          this.endingCell = null;
        } else {
          destContext.bottomMost = bottomMostContext(this, destContext.bottomMost);
        }
      };

      DocumentContext.prototype.markEnding = function (endingCell) {
        this.page = endingCell._columnEndingContext.page;
        this.x = endingCell._columnEndingContext.x;
        this.y = endingCell._columnEndingContext.y;
        this.availableWidth = endingCell._columnEndingContext.availableWidth;
        this.availableHeight = endingCell._columnEndingContext.availableHeight;
        this.lastColumnWidth = endingCell._columnEndingContext.lastColumnWidth;
      };

      DocumentContext.prototype.saveContextInEndingCell = function (endingCell) {
        endingCell._columnEndingContext = {
          page: this.page,
          x: this.x,
          y: this.y,
          availableHeight: this.availableHeight,
          availableWidth: this.availableWidth,
          lastColumnWidth: this.lastColumnWidth
        };
      };

      DocumentContext.prototype.completeColumnGroup = function (height) {
        var saved = this.snapshots.pop();
        this.calculateBottomMost(saved);
        this.endingCell = null;
        this.x = saved.x;
        var y = saved.bottomMost.y;

        if (height) {
          if (saved.page === saved.bottomMost.page) {
            if (saved.y + height > y) {
              y = saved.y + height;
            }
          } else {
            y += height;
          }
        }

        this.y = y;
        this.page = saved.bottomMost.page;
        this.availableWidth = saved.availableWidth;
        this.availableHeight = saved.bottomMost.availableHeight;

        if (height) {
          this.availableHeight -= y - saved.bottomMost.y;
        }

        this.lastColumnWidth = saved.lastColumnWidth;
      };

      DocumentContext.prototype.addMargin = function (left, right) {
        this.x += left;
        this.availableWidth -= left + (right || 0);
      };

      DocumentContext.prototype.moveDown = function (offset) {
        this.y += offset;
        this.availableHeight -= offset;
        return this.availableHeight > 0;
      };

      DocumentContext.prototype.initializePage = function () {
        this.y = this.pageMargins.top;
        this.availableHeight = this.getCurrentPage().pageSize.height - this.pageMargins.top - this.pageMargins.bottom;
        this.pageSnapshot().availableWidth = this.getCurrentPage().pageSize.width - this.pageMargins.left - this.pageMargins.right;
      };

      DocumentContext.prototype.pageSnapshot = function () {
        if (this.snapshots[0]) {
          return this.snapshots[0];
        } else {
          return this;
        }
      };

      DocumentContext.prototype.moveTo = function (x, y) {
        if (x !== undefined && x !== null) {
          this.x = x;
          this.availableWidth = this.getCurrentPage().pageSize.width - this.x - this.pageMargins.right;
        }

        if (y !== undefined && y !== null) {
          this.y = y;
          this.availableHeight = this.getCurrentPage().pageSize.height - this.y - this.pageMargins.bottom;
        }
      };

      DocumentContext.prototype.moveToRelative = function (x, y) {
        if (x !== undefined && x !== null) {
          this.x = this.x + x;
        }

        if (y !== undefined && y !== null) {
          this.y = this.y + y;
        }
      };

      DocumentContext.prototype.beginDetachedBlock = function () {
        this.snapshots.push({
          x: this.x,
          y: this.y,
          availableHeight: this.availableHeight,
          availableWidth: this.availableWidth,
          page: this.page,
          endingCell: this.endingCell,
          lastColumnWidth: this.lastColumnWidth
        });
      };

      DocumentContext.prototype.endDetachedBlock = function () {
        var saved = this.snapshots.pop();
        this.x = saved.x;
        this.y = saved.y;
        this.availableWidth = saved.availableWidth;
        this.availableHeight = saved.availableHeight;
        this.page = saved.page;
        this.endingCell = saved.endingCell;
        this.lastColumnWidth = saved.lastColumnWidth;
      };

      function pageOrientation(pageOrientationString, currentPageOrientation) {
        if (pageOrientationString === undefined) {
          return currentPageOrientation;
        } else if (isString(pageOrientationString) && pageOrientationString.toLowerCase() === 'landscape') {
          return 'landscape';
        } else {
          return 'portrait';
        }
      }

      var getPageSize = function getPageSize(currentPage, newPageOrientation) {
        newPageOrientation = pageOrientation(newPageOrientation, currentPage.pageSize.orientation);

        if (newPageOrientation !== currentPage.pageSize.orientation) {
          return {
            orientation: newPageOrientation,
            width: currentPage.pageSize.height,
            height: currentPage.pageSize.width
          };
        } else {
          return {
            orientation: currentPage.pageSize.orientation,
            width: currentPage.pageSize.width,
            height: currentPage.pageSize.height
          };
        }
      };

      DocumentContext.prototype.moveToNextPage = function (pageOrientation) {
        var nextPageIndex = this.page + 1;
        var prevPage = this.page;
        var prevY = this.y;
        var createNewPage = nextPageIndex >= this.pages.length;

        if (createNewPage) {
          var currentAvailableWidth = this.availableWidth;
          var currentPageOrientation = this.getCurrentPage().pageSize.orientation;
          var pageSize = getPageSize(this.getCurrentPage(), pageOrientation);
          this.addPage(pageSize);

          if (currentPageOrientation === pageSize.orientation) {
            this.availableWidth = currentAvailableWidth;
          }
        } else {
          this.page = nextPageIndex;
          this.initializePage();
        }

        return {
          newPageCreated: createNewPage,
          prevPage: prevPage,
          prevY: prevY,
          y: this.y
        };
      };

      DocumentContext.prototype.addPage = function (pageSize) {
        var page = {
          items: [],
          pageSize: pageSize
        };
        this.pages.push(page);
        this.backgroundLength.push(0);
        this.page = this.pages.length - 1;
        this.initializePage();
        this.tracker.emit('pageAdded');
        return page;
      };

      DocumentContext.prototype.getCurrentPage = function () {
        if (this.page < 0 || this.page >= this.pages.length) {
          return null;
        }

        return this.pages[this.page];
      };

      DocumentContext.prototype.getCurrentPosition = function () {
        var pageSize = this.getCurrentPage().pageSize;
        var innerHeight = pageSize.height - this.pageMargins.top - this.pageMargins.bottom;
        var innerWidth = pageSize.width - this.pageMargins.left - this.pageMargins.right;
        return {
          pageNumber: this.page + 1,
          pageOrientation: pageSize.orientation,
          pageInnerHeight: innerHeight,
          pageInnerWidth: innerWidth,
          left: this.x,
          top: this.y,
          verticalRatio: (this.y - this.pageMargins.top) / innerHeight,
          horizontalRatio: (this.x - this.pageMargins.left) / innerWidth
        };
      };

      function bottomMostContext(c1, c2) {
        var r;

        if (c1.page > c2.page) {
          r = c1;
        } else if (c2.page > c1.page) {
          r = c2;
        } else {
          r = c1.y > c2.y ? c1 : c2;
        }

        return {
          page: r.page,
          x: r.x,
          y: r.y,
          availableHeight: r.availableHeight,
          availableWidth: r.availableWidth
        };
      }

      module.exports = DocumentContext;
      /***/
    },
    /* 294 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";
      /**
       * Creates an instance of Line
       *
       * @constructor
       * @this {Line}
       * @param {Number} Maximum width this line can have
       */

      function Line(maxWidth) {
        this.maxWidth = maxWidth;
        this.leadingCut = 0;
        this.trailingCut = 0;
        this.inlineWidths = 0;
        this.inlines = [];
      }

      Line.prototype.getAscenderHeight = function () {
        var y = 0;
        this.inlines.forEach(function (inline) {
          y = Math.max(y, inline.font.ascender / 1000 * inline.fontSize);
        });
        return y;
      };

      Line.prototype.hasEnoughSpaceForInline = function (inline, nextInlines) {
        nextInlines = nextInlines || [];

        if (this.inlines.length === 0) {
          return true;
        }

        if (this.newLineForced) {
          return false;
        }

        var inlineWidth = inline.width;
        var inlineTrailingCut = inline.trailingCut || 0;

        if (inline.noNewLine) {
          for (var i = 0, l = nextInlines.length; i < l; i++) {
            var nextInline = nextInlines[i];
            inlineWidth += nextInline.width;
            inlineTrailingCut += nextInline.trailingCut || 0;

            if (!nextInline.noNewLine) {
              break;
            }
          }
        }

        return this.inlineWidths + inlineWidth - this.leadingCut - inlineTrailingCut <= this.maxWidth;
      };

      Line.prototype.addInline = function (inline) {
        if (this.inlines.length === 0) {
          this.leadingCut = inline.leadingCut || 0;
        }

        this.trailingCut = inline.trailingCut || 0;
        inline.x = this.inlineWidths - this.leadingCut;
        this.inlines.push(inline);
        this.inlineWidths += inline.width;

        if (inline.lineEnd) {
          this.newLineForced = true;
        }
      };

      Line.prototype.getWidth = function () {
        return this.inlineWidths - this.leadingCut - this.trailingCut;
      };

      Line.prototype.getAvailableWidth = function () {
        return this.maxWidth - this.getWidth();
      };
      /**
       * Returns line height
       * @return {Number}
       */


      Line.prototype.getHeight = function () {
        var max = 0;
        this.inlines.forEach(function (item) {
          max = Math.max(max, item.height || 0);
        });
        return max;
      };

      module.exports = Line;
      /***/
    },
    /* 295 */

    /***/
    function (module, exports, __webpack_require__) {
      var global = __webpack_require__(3);

      module.exports = global.Promise;
      /***/
    },
    /* 296 */

    /***/
    function (module, exports, __webpack_require__) {
      var global = __webpack_require__(3);

      var fails = __webpack_require__(4);

      var classof = __webpack_require__(30);

      var bind = __webpack_require__(96);

      var html = __webpack_require__(203);

      var createElement = __webpack_require__(138);

      var IS_IOS = __webpack_require__(297);

      var location = global.location;
      var set = global.setImmediate;
      var clear = global.clearImmediate;
      var process = global.process;
      var MessageChannel = global.MessageChannel;
      var Dispatch = global.Dispatch;
      var counter = 0;
      var queue = {};
      var ONREADYSTATECHANGE = 'onreadystatechange';
      var defer, channel, port;

      var run = function run(id) {
        // eslint-disable-next-line no-prototype-builtins
        if (queue.hasOwnProperty(id)) {
          var fn = queue[id];
          delete queue[id];
          fn();
        }
      };

      var runner = function runner(id) {
        return function () {
          run(id);
        };
      };

      var listener = function listener(event) {
        run(event.data);
      };

      var post = function post(id) {
        // old engines have not location.origin
        global.postMessage(id + '', location.protocol + '//' + location.host);
      }; // Node.js 0.9+ & IE10+ has setImmediate, otherwise:


      if (!set || !clear) {
        set = function setImmediate(fn) {
          var args = [];
          var i = 1;

          while (arguments.length > i) {
            args.push(arguments[i++]);
          }

          queue[++counter] = function () {
            // eslint-disable-next-line no-new-func
            (typeof fn == 'function' ? fn : Function(fn)).apply(undefined, args);
          };

          defer(counter);
          return counter;
        };

        clear = function clearImmediate(id) {
          delete queue[id];
        }; // Node.js 0.8-


        if (classof(process) == 'process') {
          defer = function defer(id) {
            process.nextTick(runner(id));
          }; // Sphere (JS game engine) Dispatch API

        } else if (Dispatch && Dispatch.now) {
          defer = function defer(id) {
            Dispatch.now(runner(id));
          }; // Browsers with MessageChannel, includes WebWorkers
          // except iOS - https://github.com/zloirock/core-js/issues/624

        } else if (MessageChannel && !IS_IOS) {
          channel = new MessageChannel();
          port = channel.port2;
          channel.port1.onmessage = listener;
          defer = bind(port.postMessage, port, 1); // Browsers with postMessage, skip WebWorkers
          // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
        } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts && !fails(post) && location.protocol !== 'file:') {
          defer = post;
          global.addEventListener('message', listener, false); // IE8-
        } else if (ONREADYSTATECHANGE in createElement('script')) {
          defer = function defer(id) {
            html.appendChild(createElement('script'))[ONREADYSTATECHANGE] = function () {
              html.removeChild(this);
              run(id);
            };
          }; // Rest old browsers

        } else {
          defer = function defer(id) {
            setTimeout(runner(id), 0);
          };
        }
      }

      module.exports = {
        set: set,
        clear: clear
      };
      /***/
    },
    /* 297 */

    /***/
    function (module, exports, __webpack_require__) {
      var userAgent = __webpack_require__(210);

      module.exports = /(iphone|ipod|ipad).*applewebkit/i.test(userAgent);
      /***/
    },
    /* 298 */

    /***/
    function (module, exports, __webpack_require__) {
      var anObject = __webpack_require__(16);

      var isObject = __webpack_require__(13);

      var newPromiseCapability = __webpack_require__(109);

      module.exports = function (C, x) {
        anObject(C);
        if (isObject(x) && x.constructor === C) return x;
        var promiseCapability = newPromiseCapability.f(C);
        var resolve = promiseCapability.resolve;
        resolve(x);
        return promiseCapability.promise;
      };
      /***/

    },
    /* 299 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var $ = __webpack_require__(1);

      var aFunction = __webpack_require__(44);

      var newPromiseCapabilityModule = __webpack_require__(109);

      var perform = __webpack_require__(137);

      var iterate = __webpack_require__(136); // `Promise.allSettled` method
      // https://github.com/tc39/proposal-promise-allSettled


      $({
        target: 'Promise',
        stat: true
      }, {
        allSettled: function allSettled(iterable) {
          var C = this;
          var capability = newPromiseCapabilityModule.f(C);
          var resolve = capability.resolve;
          var reject = capability.reject;
          var result = perform(function () {
            var promiseResolve = aFunction(C.resolve);
            var values = [];
            var counter = 0;
            var remaining = 1;
            iterate(iterable, function (promise) {
              var index = counter++;
              var alreadyCalled = false;
              values.push(undefined);
              remaining++;
              promiseResolve.call(C, promise).then(function (value) {
                if (alreadyCalled) return;
                alreadyCalled = true;
                values[index] = {
                  status: 'fulfilled',
                  value: value
                };
                --remaining || resolve(values);
              }, function (e) {
                if (alreadyCalled) return;
                alreadyCalled = true;
                values[index] = {
                  status: 'rejected',
                  reason: e
                };
                --remaining || resolve(values);
              });
            });
            --remaining || resolve(values);
          });
          if (result.error) reject(result.value);
          return capability.promise;
        }
      });
      /***/
    },
    /* 300 */

    /***/
    function (module, exports, __webpack_require__) {
      var ___EXPOSE_LOADER_IMPORT___ = __webpack_require__(301);

      var ___EXPOSE_LOADER_GET_GLOBAL_THIS___ = __webpack_require__(563);

      var ___EXPOSE_LOADER_GLOBAL_THIS___ = ___EXPOSE_LOADER_GET_GLOBAL_THIS___;
      if (typeof ___EXPOSE_LOADER_GLOBAL_THIS___["pdfMake"] === 'undefined') ___EXPOSE_LOADER_GLOBAL_THIS___["pdfMake"] = ___EXPOSE_LOADER_IMPORT___;
      module.exports = ___EXPOSE_LOADER_IMPORT___;
      /***/
    },
    /* 301 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";
      /* WEBPACK VAR INJECTION */

      (function (Buffer, global) {
        var isFunction = __webpack_require__(0).isFunction;

        var isUndefined = __webpack_require__(0).isUndefined;

        var isNull = __webpack_require__(0).isNull;

        var FileSaver = __webpack_require__(304);

        var saveAs = FileSaver.saveAs;
        var defaultClientFonts = {
          Roboto: {
            normal: 'Roboto-Regular.ttf',
            bold: 'Roboto-Medium.ttf',
            italics: 'Roboto-Italic.ttf',
            bolditalics: 'Roboto-MediumItalic.ttf'
          }
        };

        function Document(docDefinition, tableLayouts, fonts, vfs) {
          this.docDefinition = docDefinition;
          this.tableLayouts = tableLayouts || null;
          this.fonts = fonts || defaultClientFonts;
          this.vfs = vfs;
        }

        function canCreatePdf() {
          // Ensure the browser provides the level of support needed
          if (!Object.keys || typeof Uint16Array === 'undefined') {
            return false;
          }

          return true;
        }

        Document.prototype._createDoc = function (options, cb) {
          options = options || {};

          if (this.tableLayouts) {
            options.tableLayouts = this.tableLayouts;
          }

          var PdfPrinter = __webpack_require__(305);

          var printer = new PdfPrinter(this.fonts);

          __webpack_require__(53).bindFS(this.vfs); // bind virtual file system to file system


          if (!isFunction(cb)) {
            var doc = printer.createPdfKitDocument(this.docDefinition, options);
            return doc;
          }

          var URLBrowserResolver = __webpack_require__(549);

          var urlResolver = new URLBrowserResolver(__webpack_require__(53));

          for (var font in this.fonts) {
            if (this.fonts.hasOwnProperty(font)) {
              if (this.fonts[font].normal) {
                urlResolver.resolve(this.fonts[font].normal);
              }

              if (this.fonts[font].bold) {
                urlResolver.resolve(this.fonts[font].bold);
              }

              if (this.fonts[font].italics) {
                urlResolver.resolve(this.fonts[font].italics);
              }

              if (this.fonts[font].bolditalics) {
                urlResolver.resolve(this.fonts[font].bolditalics);
              }
            }
          }

          if (this.docDefinition.images) {
            for (var image in this.docDefinition.images) {
              if (this.docDefinition.images.hasOwnProperty(image)) {
                urlResolver.resolve(this.docDefinition.images[image]);
              }
            }
          }

          var _this = this;

          urlResolver.resolved().then(function () {
            var doc = printer.createPdfKitDocument(_this.docDefinition, options);
            cb(doc);
          }, function (result) {
            throw result;
          });
        };

        Document.prototype._flushDoc = function (doc, callback) {
          var chunks = [];
          var result;
          doc.on('readable', function () {
            var chunk;

            while ((chunk = doc.read(9007199254740991)) !== null) {
              chunks.push(chunk);
            }
          });
          doc.on('end', function () {
            result = Buffer.concat(chunks);
            callback(result, doc._pdfMakePages);
          });
          doc.end();
        };

        Document.prototype._getPages = function (options, cb) {
          if (!cb) {
            throw '_getPages is an async method and needs a callback argument';
          }

          var _this = this;

          this._createDoc(options, function (doc) {
            _this._flushDoc(doc, function (ignoreBuffer, pages) {
              cb(pages);
            });
          });
        };

        Document.prototype._bufferToBlob = function (buffer) {
          var blob;

          try {
            blob = new Blob([buffer], {
              type: 'application/pdf'
            });
          } catch (e) {
            // Old browser which can't handle it without making it an byte array (ie10)
            if (e.name === 'InvalidStateError') {
              var byteArray = new Uint8Array(buffer);
              blob = new Blob([byteArray.buffer], {
                type: 'application/pdf'
              });
            }
          }

          if (!blob) {
            throw 'Could not generate blob';
          }

          return blob;
        };

        Document.prototype._openWindow = function () {
          // we have to open the window immediately and store the reference
          // otherwise popup blockers will stop us
          var win = window.open('', '_blank');

          if (win === null) {
            throw 'Open PDF in new window blocked by browser';
          }

          return win;
        };

        Document.prototype._openPdf = function (options, win) {
          if (!win) {
            win = this._openWindow();
          }

          try {
            this.getBlob(function (result) {
              var urlCreator = window.URL || window.webkitURL;
              var pdfUrl = urlCreator.createObjectURL(result);
              win.location.href = pdfUrl;
              /* temporarily disabled
              if (win !== window) {
              	setTimeout(function () {
              		if (isNull(win.window)) { // is closed by AdBlock
              			window.location.href = pdfUrl; // open in actual window
              		}
              	}, 500);
              }
              */
            }, options);
          } catch (e) {
            win.close();
            throw e;
          }
        };

        Document.prototype.open = function (options, win) {
          options = options || {};
          options.autoPrint = false;
          win = win || null;

          this._openPdf(options, win);
        };

        Document.prototype.print = function (options, win) {
          options = options || {};
          options.autoPrint = true;
          win = win || null;

          this._openPdf(options, win);
        };
        /**
         * download(defaultFileName = 'file.pdf', cb = null, options = {})
         * or
         * download(cb, options = {})
         */


        Document.prototype.download = function (defaultFileName, cb, options) {
          if (isFunction(defaultFileName)) {
            if (!isUndefined(cb)) {
              options = cb;
            }

            cb = defaultFileName;
            defaultFileName = null;
          }

          defaultFileName = defaultFileName || 'file.pdf';
          this.getBlob(function (result) {
            saveAs(result, defaultFileName);

            if (isFunction(cb)) {
              cb();
            }
          }, options);
        };

        Document.prototype.getBase64 = function (cb, options) {
          if (!cb) {
            throw 'getBase64 is an async method and needs a callback argument';
          }

          this.getBuffer(function (buffer) {
            cb(buffer.toString('base64'));
          }, options);
        };

        Document.prototype.getDataUrl = function (cb, options) {
          if (!cb) {
            throw 'getDataUrl is an async method and needs a callback argument';
          }

          this.getBuffer(function (buffer) {
            cb('data:application/pdf;base64,' + buffer.toString('base64'));
          }, options);
        };

        Document.prototype.getBlob = function (cb, options) {
          if (!cb) {
            throw 'getBlob is an async method and needs a callback argument';
          }

          var that = this;
          this.getBuffer(function (result) {
            var blob = that._bufferToBlob(result);

            cb(blob);
          }, options);
        };

        Document.prototype.getBuffer = function (cb, options) {
          if (!cb) {
            throw 'getBuffer is an async method and needs a callback argument';
          }

          var _this = this;

          this._createDoc(options, function (doc) {
            _this._flushDoc(doc, function (buffer) {
              cb(buffer);
            });
          });
        };

        Document.prototype.getStream = function (options, cb) {
          if (!isFunction(cb)) {
            var doc = this._createDoc(options);

            return doc;
          }

          this._createDoc(options, function (doc) {
            cb(doc);
          });
        };

        module.exports = {
          createPdf: function createPdf(docDefinition, tableLayouts, fonts, vfs) {
            if (!canCreatePdf()) {
              throw 'Your browser does not provide the level of support needed';
            }

            return new Document(docDefinition, tableLayouts || global.pdfMake.tableLayouts, fonts || global.pdfMake.fonts, vfs || global.pdfMake.vfs);
          }
        };
        /* WEBPACK VAR INJECTION */
      }).call(this, __webpack_require__(10).Buffer, __webpack_require__(24));
      /***/
    },
    /* 302 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      exports.byteLength = byteLength;
      exports.toByteArray = toByteArray;
      exports.fromByteArray = fromByteArray;
      var lookup = [];
      var revLookup = [];
      var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
      var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

      for (var i = 0, len = code.length; i < len; ++i) {
        lookup[i] = code[i];
        revLookup[code.charCodeAt(i)] = i;
      } // Support decoding URL-safe base64 strings, as Node.js does.
      // See: https://en.wikipedia.org/wiki/Base64#URL_applications


      revLookup['-'.charCodeAt(0)] = 62;
      revLookup['_'.charCodeAt(0)] = 63;

      function getLens(b64) {
        var len = b64.length;

        if (len % 4 > 0) {
          throw new Error('Invalid string. Length must be a multiple of 4');
        } // Trim off extra bytes after placeholder bytes are found
        // See: https://github.com/beatgammit/base64-js/issues/42


        var validLen = b64.indexOf('=');
        if (validLen === -1) validLen = len;
        var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
        return [validLen, placeHoldersLen];
      } // base64 is 4/3 + up to two characters of the original data


      function byteLength(b64) {
        var lens = getLens(b64);
        var validLen = lens[0];
        var placeHoldersLen = lens[1];
        return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
      }

      function _byteLength(b64, validLen, placeHoldersLen) {
        return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
      }

      function toByteArray(b64) {
        var tmp;
        var lens = getLens(b64);
        var validLen = lens[0];
        var placeHoldersLen = lens[1];
        var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
        var curByte = 0; // if there are placeholders, only get up to the last complete 4 chars

        var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
        var i;

        for (i = 0; i < len; i += 4) {
          tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
          arr[curByte++] = tmp >> 16 & 0xFF;
          arr[curByte++] = tmp >> 8 & 0xFF;
          arr[curByte++] = tmp & 0xFF;
        }

        if (placeHoldersLen === 2) {
          tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
          arr[curByte++] = tmp & 0xFF;
        }

        if (placeHoldersLen === 1) {
          tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
          arr[curByte++] = tmp >> 8 & 0xFF;
          arr[curByte++] = tmp & 0xFF;
        }

        return arr;
      }

      function tripletToBase64(num) {
        return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
      }

      function encodeChunk(uint8, start, end) {
        var tmp;
        var output = [];

        for (var i = start; i < end; i += 3) {
          tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
          output.push(tripletToBase64(tmp));
        }

        return output.join('');
      }

      function fromByteArray(uint8) {
        var tmp;
        var len = uint8.length;
        var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes

        var parts = [];
        var maxChunkLength = 16383; // must be multiple of 3
        // go through the array every three bytes, we'll deal with trailing stuff later

        for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
          parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
        } // pad the end with zeros, but make sure to not forget the extra bytes


        if (extraBytes === 1) {
          tmp = uint8[len - 1];
          parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + '==');
        } else if (extraBytes === 2) {
          tmp = (uint8[len - 2] << 8) + uint8[len - 1];
          parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + '=');
        }

        return parts.join('');
      }
      /***/

    },
    /* 303 */

    /***/
    function (module, exports) {
      exports.read = function (buffer, offset, isLE, mLen, nBytes) {
        var e, m;
        var eLen = nBytes * 8 - mLen - 1;
        var eMax = (1 << eLen) - 1;
        var eBias = eMax >> 1;
        var nBits = -7;
        var i = isLE ? nBytes - 1 : 0;
        var d = isLE ? -1 : 1;
        var s = buffer[offset + i];
        i += d;
        e = s & (1 << -nBits) - 1;
        s >>= -nBits;
        nBits += eLen;

        for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

        m = e & (1 << -nBits) - 1;
        e >>= -nBits;
        nBits += mLen;

        for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

        if (e === 0) {
          e = 1 - eBias;
        } else if (e === eMax) {
          return m ? NaN : (s ? -1 : 1) * Infinity;
        } else {
          m = m + Math.pow(2, mLen);
          e = e - eBias;
        }

        return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
      };

      exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
        var e, m, c;
        var eLen = nBytes * 8 - mLen - 1;
        var eMax = (1 << eLen) - 1;
        var eBias = eMax >> 1;
        var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
        var i = isLE ? 0 : nBytes - 1;
        var d = isLE ? 1 : -1;
        var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
        value = Math.abs(value);

        if (isNaN(value) || value === Infinity) {
          m = isNaN(value) ? 1 : 0;
          e = eMax;
        } else {
          e = Math.floor(Math.log(value) / Math.LN2);

          if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
          }

          if (e + eBias >= 1) {
            value += rt / c;
          } else {
            value += rt * Math.pow(2, 1 - eBias);
          }

          if (value * c >= 2) {
            e++;
            c /= 2;
          }

          if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
          } else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
          } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
          }
        }

        for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

        e = e << mLen | m;
        eLen += mLen;

        for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

        buffer[offset + i - d] |= s * 128;
      };
      /***/

    },
    /* 304 */

    /***/
    function (module, exports, __webpack_require__) {
      /* WEBPACK VAR INJECTION */
      (function (global) {
        var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

        (function (a, b) {
          if (true) !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = b, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else {}
        })(this, function () {
          "use strict";

          function b(a, b) {
            return "undefined" == typeof b ? b = {
              autoBom: !1
            } : "object" != _typeof4(b) && (console.warn("Deprecated: Expected third argument to be a object"), b = {
              autoBom: !b
            }), b.autoBom && /^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(a.type) ? new Blob(["\uFEFF", a], {
              type: a.type
            }) : a;
          }

          function c(b, c, d) {
            var e = new XMLHttpRequest();
            e.open("GET", b), e.responseType = "blob", e.onload = function () {
              a(e.response, c, d);
            }, e.onerror = function () {
              console.error("could not download file");
            }, e.send();
          }

          function d(a) {
            var b = new XMLHttpRequest();
            b.open("HEAD", a, !1);

            try {
              b.send();
            } catch (a) {}

            return 200 <= b.status && 299 >= b.status;
          }

          function e(a) {
            try {
              a.dispatchEvent(new MouseEvent("click"));
            } catch (c) {
              var b = document.createEvent("MouseEvents");
              b.initMouseEvent("click", !0, !0, window, 0, 0, 0, 80, 20, !1, !1, !1, !1, 0, null), a.dispatchEvent(b);
            }
          }

          var f = "object" == (typeof window === "undefined" ? "undefined" : _typeof4(window)) && window.window === window ? window : "object" == (typeof self === "undefined" ? "undefined" : _typeof4(self)) && self.self === self ? self : "object" == _typeof4(global) && global.global === global ? global : void 0,
              a = f.saveAs || ("object" != (typeof window === "undefined" ? "undefined" : _typeof4(window)) || window !== f ? function () {} : typeof HTMLAnchorElement !== "undefined" && "download" in HTMLAnchorElement.prototype ? function (b, g, h) {
            var i = f.URL || f.webkitURL,
                j = document.createElement("a");
            g = g || b.name || "download", j.download = g, j.rel = "noopener", "string" == typeof b ? (j.href = b, j.origin === location.origin ? e(j) : d(j.href) ? c(b, g, h) : e(j, j.target = "_blank")) : (j.href = i.createObjectURL(b), setTimeout(function () {
              i.revokeObjectURL(j.href);
            }, 4E4), setTimeout(function () {
              e(j);
            }, 0));
          } : "msSaveOrOpenBlob" in navigator ? function (f, g, h) {
            if (g = g || f.name || "download", "string" != typeof f) navigator.msSaveOrOpenBlob(b(f, h), g);else if (d(f)) c(f, g, h);else {
              var i = document.createElement("a");
              i.href = f, i.target = "_blank", setTimeout(function () {
                e(i);
              });
            }
          } : function (a, b, d, e) {
            if (e = e || open("", "_blank"), e && (e.document.title = e.document.body.innerText = "downloading..."), "string" == typeof a) return c(a, b, d);
            var g = "application/octet-stream" === a.type,
                h = /constructor/i.test(f.HTMLElement) || f.safari,
                i = /CriOS\/[\d]+/.test(navigator.userAgent);

            if ((i || g && h) && "object" == (typeof FileReader === "undefined" ? "undefined" : _typeof4(FileReader))) {
              var j = new FileReader();
              j.onloadend = function () {
                var a = j.result;
                a = i ? a : a.replace(/^data:[^;]*;/, "data:attachment/file;"), e ? e.location.href = a : location = a, e = null;
              }, j.readAsDataURL(a);
            } else {
              var k = f.URL || f.webkitURL,
                  l = k.createObjectURL(a);
              e ? e.location = l : location.href = l, e = null, setTimeout(function () {
                k.revokeObjectURL(l);
              }, 4E4);
            }
          });
          f.saveAs = a.saveAs = a, true && (module.exports = a);
        });
        /* WEBPACK VAR INJECTION */

      }).call(this, __webpack_require__(24));
      /***/
    },
    /* 305 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";
      /*eslint no-unused-vars: ["error", {"args": "none"}]*/

      var PdfKitEngine = __webpack_require__(306);

      var FontProvider = __webpack_require__(532);

      var LayoutBuilder = __webpack_require__(533);

      var sizes = __webpack_require__(540);

      var ImageMeasure = __webpack_require__(541);

      var SVGMeasure = __webpack_require__(542);

      var textDecorator = __webpack_require__(546);

      var TextTools = __webpack_require__(194);

      var isFunction = __webpack_require__(0).isFunction;

      var isString = __webpack_require__(0).isString;

      var isNumber = __webpack_require__(0).isNumber;

      var isBoolean = __webpack_require__(0).isBoolean;

      var isArray = __webpack_require__(0).isArray;

      var isUndefined = __webpack_require__(0).isUndefined;

      var getSvgToPDF = function getSvgToPDF() {
        try {
          // optional dependency to support svg nodes
          return __webpack_require__(547);
        } catch (e) {
          throw new Error('Please install svg-to-pdfkit to enable svg nodes');
        }
      };

      var findFont = function findFont(fonts, requiredFonts, defaultFont) {
        for (var i = 0; i < requiredFonts.length; i++) {
          var requiredFont = requiredFonts[i].toLowerCase();

          for (var font in fonts) {
            if (font.toLowerCase() === requiredFont) {
              return font;
            }
          }
        }

        return defaultFont;
      }; ////////////////////////////////////////
      // PdfPrinter

      /**
       * @class Creates an instance of a PdfPrinter which turns document definition into a pdf
       *
       * @param {Object} fontDescriptors font definition dictionary
       *
       * @example
       * var fontDescriptors = {
       *	Roboto: {
       *		normal: 'fonts/Roboto-Regular.ttf',
       *		bold: 'fonts/Roboto-Medium.ttf',
       *		italics: 'fonts/Roboto-Italic.ttf',
       *		bolditalics: 'fonts/Roboto-MediumItalic.ttf'
       *	}
       * };
       *
       * var printer = new PdfPrinter(fontDescriptors);
       */


      function PdfPrinter(fontDescriptors) {
        this.fontDescriptors = fontDescriptors;
      }
      /**
       * Executes layout engine for the specified document and renders it into a pdfkit document
       * ready to be saved.
       *
       * @param {Object} docDefinition document definition
       * @param {Object} docDefinition.content an array describing the pdf structure (for more information take a look at the examples in the /examples folder)
       * @param {Object} [docDefinition.defaultStyle] default (implicit) style definition
       * @param {Object} [docDefinition.styles] dictionary defining all styles which can be used in the document
       * @param {Object} [docDefinition.pageSize] page size (pdfkit units, A4 dimensions by default)
       * @param {Number} docDefinition.pageSize.width width
       * @param {Number} docDefinition.pageSize.height height
       * @param {Object} [docDefinition.pageMargins] page margins (pdfkit units)
       * @param {Number} docDefinition.maxPagesNumber maximum number of pages to render
       *
       * @example
       *
       * var docDefinition = {
       * 	info: {
       *		title: 'awesome Document',
       *		author: 'john doe',
       *		subject: 'subject of document',
       *		keywords: 'keywords for document',
       * 	},
       *	content: [
       *		'First paragraph',
       *		'Second paragraph, this time a little bit longer',
       *		{ text: 'Third paragraph, slightly bigger font size', fontSize: 20 },
       *		{ text: 'Another paragraph using a named style', style: 'header' },
       *		{ text: ['playing with ', 'inlines' ] },
       *		{ text: ['and ', { text: 'restyling ', bold: true }, 'them'] },
       *	],
       *	styles: {
       *		header: { fontSize: 30, bold: true }
       *	}
       * }
       *
       * var pdfKitDoc = printer.createPdfKitDocument(docDefinition);
       *
       * pdfKitDoc.pipe(fs.createWriteStream('sample.pdf'));
       * pdfKitDoc.end();
       *
       * @return {Object} a pdfKit document object which can be saved or encode to data-url
       */


      PdfPrinter.prototype.createPdfKitDocument = function (docDefinition, options) {
        options = options || {};
        docDefinition.version = docDefinition.version || '1.3';
        docDefinition.compress = isBoolean(docDefinition.compress) ? docDefinition.compress : true;
        docDefinition.images = docDefinition.images || {};
        docDefinition.pageMargins = docDefinition.pageMargins !== undefined && docDefinition.pageMargins !== null ? docDefinition.pageMargins : 40;
        var pageSize = fixPageSize(docDefinition.pageSize, docDefinition.pageOrientation);
        var pdfOptions = {
          size: [pageSize.width, pageSize.height],
          pdfVersion: docDefinition.version,
          compress: docDefinition.compress,
          userPassword: docDefinition.userPassword,
          ownerPassword: docDefinition.ownerPassword,
          permissions: docDefinition.permissions,
          fontLayoutCache: isBoolean(options.fontLayoutCache) ? options.fontLayoutCache : true,
          bufferPages: options.bufferPages || false,
          autoFirstPage: false,
          font: null
        };
        this.pdfKitDoc = PdfKitEngine.createPdfDocument(pdfOptions);
        setMetadata(docDefinition, this.pdfKitDoc);
        this.fontProvider = new FontProvider(this.fontDescriptors, this.pdfKitDoc);
        var builder = new LayoutBuilder(pageSize, fixPageMargins(docDefinition.pageMargins), new ImageMeasure(this.pdfKitDoc, docDefinition.images), new SVGMeasure());
        registerDefaultTableLayouts(builder);

        if (options.tableLayouts) {
          builder.registerTableLayouts(options.tableLayouts);
        }

        var pages = builder.layoutDocument(docDefinition.content, this.fontProvider, docDefinition.styles || {}, docDefinition.defaultStyle || {
          fontSize: 12,
          font: 'Roboto'
        }, docDefinition.background, docDefinition.header, docDefinition.footer, docDefinition.images, docDefinition.watermark, docDefinition.pageBreakBefore);
        var maxNumberPages = docDefinition.maxPagesNumber || -1;

        if (isNumber(maxNumberPages) && maxNumberPages > -1) {
          pages = pages.slice(0, maxNumberPages);
        } // if pageSize.height is set to Infinity, calculate the actual height of the page that
        // was laid out using the height of each of the items in the page.


        if (pageSize.height === Infinity) {
          var pageHeight = calculatePageHeight(pages, docDefinition.pageMargins);
          this.pdfKitDoc.options.size = [pageSize.width, pageHeight];
        }

        renderPages(pages, this.fontProvider, this.pdfKitDoc, options.progressCallback);

        if (options.autoPrint) {
          var printActionRef = this.pdfKitDoc.ref({
            Type: 'Action',
            S: 'Named',
            N: 'Print'
          });
          this.pdfKitDoc._root.data.OpenAction = printActionRef;
          printActionRef.end();
        }

        return this.pdfKitDoc;
      };

      function setMetadata(docDefinition, pdfKitDoc) {
        // PDF standard has these properties reserved: Title, Author, Subject, Keywords,
        // Creator, Producer, CreationDate, ModDate, Trapped.
        // To keep the pdfmake api consistent, the info field are defined lowercase.
        // Custom properties don't contain a space.
        function standardizePropertyKey(key) {
          var standardProperties = ['Title', 'Author', 'Subject', 'Keywords', 'Creator', 'Producer', 'CreationDate', 'ModDate', 'Trapped'];
          var standardizedKey = key.charAt(0).toUpperCase() + key.slice(1);

          if (standardProperties.indexOf(standardizedKey) !== -1) {
            return standardizedKey;
          }

          return key.replace(/\s+/g, '');
        }

        pdfKitDoc.info.Producer = 'pdfmake';
        pdfKitDoc.info.Creator = 'pdfmake';

        if (docDefinition.info) {
          for (var key in docDefinition.info) {
            var value = docDefinition.info[key];

            if (value) {
              key = standardizePropertyKey(key);
              pdfKitDoc.info[key] = value;
            }
          }
        }
      }

      function calculatePageHeight(pages, margins) {
        function getItemHeight(item) {
          if (isFunction(item.item.getHeight)) {
            return item.item.getHeight();
          } else if (item.item._height) {
            return item.item._height;
          } else {
            // TODO: add support for next item types
            return 0;
          }
        }

        function getBottomPosition(item) {
          var top = item.item.y;
          var height = getItemHeight(item);
          return top + height;
        }

        var fixedMargins = fixPageMargins(margins || 40);
        var height = fixedMargins.top;
        pages.forEach(function (page) {
          page.items.forEach(function (item) {
            var bottomPosition = getBottomPosition(item);

            if (bottomPosition > height) {
              height = bottomPosition;
            }
          });
        });
        height += fixedMargins.bottom;
        return height;
      }

      function fixPageSize(pageSize, pageOrientation) {
        function isNeedSwapPageSizes(pageOrientation) {
          if (isString(pageOrientation)) {
            pageOrientation = pageOrientation.toLowerCase();
            return pageOrientation === 'portrait' && size.width > size.height || pageOrientation === 'landscape' && size.width < size.height;
          }

          return false;
        } // if pageSize.height is set to auto, set the height to infinity so there are no page breaks.


        if (pageSize && pageSize.height === 'auto') {
          pageSize.height = Infinity;
        }

        var size = pageSize2widthAndHeight(pageSize || 'A4');

        if (isNeedSwapPageSizes(pageOrientation)) {
          // swap page sizes
          size = {
            width: size.height,
            height: size.width
          };
        }

        size.orientation = size.width > size.height ? 'landscape' : 'portrait';
        return size;
      }

      function fixPageMargins(margin) {
        if (isNumber(margin)) {
          margin = {
            left: margin,
            right: margin,
            top: margin,
            bottom: margin
          };
        } else if (isArray(margin)) {
          if (margin.length === 2) {
            margin = {
              left: margin[0],
              top: margin[1],
              right: margin[0],
              bottom: margin[1]
            };
          } else if (margin.length === 4) {
            margin = {
              left: margin[0],
              top: margin[1],
              right: margin[2],
              bottom: margin[3]
            };
          } else {
            throw 'Invalid pageMargins definition';
          }
        }

        return margin;
      }

      function registerDefaultTableLayouts(layoutBuilder) {
        layoutBuilder.registerTableLayouts({
          noBorders: {
            hLineWidth: function hLineWidth(i) {
              return 0;
            },
            vLineWidth: function vLineWidth(i) {
              return 0;
            },
            paddingLeft: function paddingLeft(i) {
              return i && 4 || 0;
            },
            paddingRight: function paddingRight(i, node) {
              return i < node.table.widths.length - 1 ? 4 : 0;
            }
          },
          headerLineOnly: {
            hLineWidth: function hLineWidth(i, node) {
              if (i === 0 || i === node.table.body.length) {
                return 0;
              }

              return i === node.table.headerRows ? 2 : 0;
            },
            vLineWidth: function vLineWidth(i) {
              return 0;
            },
            paddingLeft: function paddingLeft(i) {
              return i === 0 ? 0 : 8;
            },
            paddingRight: function paddingRight(i, node) {
              return i === node.table.widths.length - 1 ? 0 : 8;
            }
          },
          lightHorizontalLines: {
            hLineWidth: function hLineWidth(i, node) {
              if (i === 0 || i === node.table.body.length) {
                return 0;
              }

              return i === node.table.headerRows ? 2 : 1;
            },
            vLineWidth: function vLineWidth(i) {
              return 0;
            },
            hLineColor: function hLineColor(i) {
              return i === 1 ? 'black' : '#aaa';
            },
            paddingLeft: function paddingLeft(i) {
              return i === 0 ? 0 : 8;
            },
            paddingRight: function paddingRight(i, node) {
              return i === node.table.widths.length - 1 ? 0 : 8;
            }
          }
        });
      }

      function pageSize2widthAndHeight(pageSize) {
        if (isString(pageSize)) {
          var size = sizes[pageSize.toUpperCase()];

          if (!size) {
            throw 'Page size ' + pageSize + ' not recognized';
          }

          return {
            width: size[0],
            height: size[1]
          };
        }

        return pageSize;
      }

      function updatePageOrientationInOptions(currentPage, pdfKitDoc) {
        var previousPageOrientation = pdfKitDoc.options.size[0] > pdfKitDoc.options.size[1] ? 'landscape' : 'portrait';

        if (currentPage.pageSize.orientation !== previousPageOrientation) {
          var width = pdfKitDoc.options.size[0];
          var height = pdfKitDoc.options.size[1];
          pdfKitDoc.options.size = [height, width];
        }
      }

      function renderPages(pages, fontProvider, pdfKitDoc, progressCallback) {
        pdfKitDoc._pdfMakePages = pages;
        pdfKitDoc.addPage();
        var totalItems = 0;

        if (progressCallback) {
          pages.forEach(function (page) {
            totalItems += page.items.length;
          });
        }

        var renderedItems = 0;

        progressCallback = progressCallback || function () {};

        for (var i = 0; i < pages.length; i++) {
          if (i > 0) {
            updatePageOrientationInOptions(pages[i], pdfKitDoc);
            pdfKitDoc.addPage(pdfKitDoc.options);
          }

          var page = pages[i];

          for (var ii = 0, il = page.items.length; ii < il; ii++) {
            var item = page.items[ii];

            switch (item.type) {
              case 'vector':
                renderVector(item.item, pdfKitDoc);
                break;

              case 'line':
                renderLine(item.item, item.item.x, item.item.y, pdfKitDoc);
                break;

              case 'image':
                renderImage(item.item, item.item.x, item.item.y, pdfKitDoc);
                break;

              case 'svg':
                renderSVG(item.item, item.item.x, item.item.y, pdfKitDoc, fontProvider);
                break;

              case 'beginClip':
                beginClip(item.item, pdfKitDoc);
                break;

              case 'endClip':
                endClip(pdfKitDoc);
                break;
            }

            renderedItems++;
            progressCallback(renderedItems / totalItems);
          }

          if (page.watermark) {
            renderWatermark(page, pdfKitDoc);
          }
        }
      }

      function renderLine(line, x, y, pdfKitDoc) {
        function preparePageNodeRefLine(_pageNodeRef, inline) {
          var newWidth;
          var diffWidth;
          var textTools = new TextTools(null);

          if (isUndefined(_pageNodeRef.positions)) {
            throw 'Page reference id not found';
          }

          var pageNumber = _pageNodeRef.positions[0].pageNumber.toString();

          inline.text = pageNumber;
          newWidth = textTools.widthOfString(inline.text, inline.font, inline.fontSize, inline.characterSpacing, inline.fontFeatures);
          diffWidth = inline.width - newWidth;
          inline.width = newWidth;

          switch (inline.alignment) {
            case 'right':
              inline.x += diffWidth;
              break;

            case 'center':
              inline.x += diffWidth / 2;
              break;
          }
        }

        if (line._pageNodeRef) {
          preparePageNodeRefLine(line._pageNodeRef, line.inlines[0]);
        }

        x = x || 0;
        y = y || 0;
        var lineHeight = line.getHeight();
        var ascenderHeight = line.getAscenderHeight();
        var descent = lineHeight - ascenderHeight;
        textDecorator.drawBackground(line, x, y, pdfKitDoc); //TODO: line.optimizeInlines();

        for (var i = 0, l = line.inlines.length; i < l; i++) {
          var inline = line.inlines[i];
          var shiftToBaseline = lineHeight - inline.font.ascender / 1000 * inline.fontSize - descent;

          if (inline._pageNodeRef) {
            preparePageNodeRefLine(inline._pageNodeRef, inline);
          }

          var options = {
            lineBreak: false,
            textWidth: inline.width,
            characterSpacing: inline.characterSpacing,
            wordCount: 1,
            link: inline.link
          };

          if (inline.linkToDestination) {
            options.goTo = inline.linkToDestination;
          }

          if (line.id && i === 0) {
            options.destination = line.id;
          }

          if (inline.fontFeatures) {
            options.features = inline.fontFeatures;
          }

          var opacity = isNumber(inline.opacity) ? inline.opacity : 1;
          pdfKitDoc.opacity(opacity);
          pdfKitDoc.fill(inline.color || 'black');
          pdfKitDoc._font = inline.font;
          pdfKitDoc.fontSize(inline.fontSize);
          pdfKitDoc.text(inline.text, x + inline.x, y + shiftToBaseline, options);

          if (inline.linkToPage) {
            var _ref = pdfKitDoc.ref({
              Type: 'Action',
              S: 'GoTo',
              D: [inline.linkToPage, 0, 0]
            }).end();

            pdfKitDoc.annotate(x + inline.x, y + shiftToBaseline, inline.width, inline.height, {
              Subtype: 'Link',
              Dest: [inline.linkToPage - 1, 'XYZ', null, null, null]
            });
          }
        }

        textDecorator.drawDecorations(line, x, y, pdfKitDoc);
      }

      function renderWatermark(page, pdfKitDoc) {
        var watermark = page.watermark;
        pdfKitDoc.fill(watermark.color);
        pdfKitDoc.opacity(watermark.opacity);
        pdfKitDoc.save();
        pdfKitDoc.rotate(watermark.angle, {
          origin: [pdfKitDoc.page.width / 2, pdfKitDoc.page.height / 2]
        });
        var x = pdfKitDoc.page.width / 2 - watermark._size.size.width / 2;
        var y = pdfKitDoc.page.height / 2 - watermark._size.size.height / 2;
        pdfKitDoc._font = watermark.font;
        pdfKitDoc.fontSize(watermark.fontSize);
        pdfKitDoc.text(watermark.text, x, y, {
          lineBreak: false
        });
        pdfKitDoc.restore();
      }

      function renderVector(vector, pdfKitDoc) {
        //TODO: pdf optimization (there's no need to write all properties everytime)
        pdfKitDoc.lineWidth(vector.lineWidth || 1);

        if (vector.dash) {
          pdfKitDoc.dash(vector.dash.length, {
            space: vector.dash.space || vector.dash.length,
            phase: vector.dash.phase || 0
          });
        } else {
          pdfKitDoc.undash();
        }

        pdfKitDoc.lineJoin(vector.lineJoin || 'miter');
        pdfKitDoc.lineCap(vector.lineCap || 'butt'); //TODO: clipping

        var gradient = null;

        switch (vector.type) {
          case 'ellipse':
            pdfKitDoc.ellipse(vector.x, vector.y, vector.r1, vector.r2);

            if (vector.linearGradient) {
              gradient = pdfKitDoc.linearGradient(vector.x - vector.r1, vector.y, vector.x + vector.r1, vector.y);
            }

            break;

          case 'rect':
            if (vector.r) {
              pdfKitDoc.roundedRect(vector.x, vector.y, vector.w, vector.h, vector.r);
            } else {
              pdfKitDoc.rect(vector.x, vector.y, vector.w, vector.h);
            }

            if (vector.linearGradient) {
              gradient = pdfKitDoc.linearGradient(vector.x, vector.y, vector.x + vector.w, vector.y);
            }

            break;

          case 'line':
            pdfKitDoc.moveTo(vector.x1, vector.y1);
            pdfKitDoc.lineTo(vector.x2, vector.y2);
            break;

          case 'polyline':
            if (vector.points.length === 0) {
              break;
            }

            pdfKitDoc.moveTo(vector.points[0].x, vector.points[0].y);

            for (var i = 1, l = vector.points.length; i < l; i++) {
              pdfKitDoc.lineTo(vector.points[i].x, vector.points[i].y);
            }

            if (vector.points.length > 1) {
              var p1 = vector.points[0];
              var pn = vector.points[vector.points.length - 1];

              if (vector.closePath || p1.x === pn.x && p1.y === pn.y) {
                pdfKitDoc.closePath();
              }
            }

            break;

          case 'path':
            pdfKitDoc.path(vector.d);
            break;
        }

        if (vector.linearGradient && gradient) {
          var step = 1 / (vector.linearGradient.length - 1);

          for (var i = 0; i < vector.linearGradient.length; i++) {
            gradient.stop(i * step, vector.linearGradient[i]);
          }

          vector.color = gradient;
        }

        var fillOpacity = isNumber(vector.fillOpacity) ? vector.fillOpacity : 1;
        var strokeOpacity = isNumber(vector.strokeOpacity) ? vector.strokeOpacity : 1;

        if (vector.color && vector.lineColor) {
          pdfKitDoc.fillColor(vector.color, fillOpacity);
          pdfKitDoc.strokeColor(vector.lineColor, strokeOpacity);
          pdfKitDoc.fillAndStroke();
        } else if (vector.color) {
          pdfKitDoc.fillColor(vector.color, fillOpacity);
          pdfKitDoc.fill();
        } else {
          pdfKitDoc.strokeColor(vector.lineColor || 'black', strokeOpacity);
          pdfKitDoc.stroke();
        }
      }

      function renderImage(image, x, y, pdfKitDoc) {
        var opacity = isNumber(image.opacity) ? image.opacity : 1;
        pdfKitDoc.opacity(opacity);
        pdfKitDoc.image(image.image, image.x, image.y, {
          width: image._width,
          height: image._height
        });

        if (image.link) {
          pdfKitDoc.link(image.x, image.y, image._width, image._height, image.link);
        }

        if (image.linkToPage) {
          pdfKitDoc.ref({
            Type: 'Action',
            S: 'GoTo',
            D: [image.linkToPage, 0, 0]
          }).end();
          pdfKitDoc.annotate(image.x, image.y, image._width, image._height, {
            Subtype: 'Link',
            Dest: [image.linkToPage - 1, 'XYZ', null, null, null]
          });
        }

        if (image.linkToDestination) {
          pdfKitDoc.goTo(image.x, image.y, image._width, image._height, image.linkToDestination);
        }
      }

      function renderSVG(svg, x, y, pdfKitDoc, fontProvider) {
        var options = Object.assign({
          width: svg._width,
          height: svg._height,
          assumePt: true
        }, svg.options);

        options.fontCallback = function (family, bold, italic) {
          var fontsFamily = family.split(',').map(function (f) {
            return f.trim().replace(/('|")/g, '');
          });
          var font = findFont(fontProvider.fonts, fontsFamily, svg.font || 'Roboto');
          var fontFile = fontProvider.getFontFile(font, bold, italic);

          if (fontFile === null) {
            var type = fontProvider.getFontType(bold, italic);
            throw new Error('Font \'' + font + '\' in style \'' + type + '\' is not defined in the font section of the document definition.');
          }

          return fontFile;
        };

        getSvgToPDF()(pdfKitDoc, svg.svg, svg.x, svg.y, options);
      }

      function beginClip(rect, pdfKitDoc) {
        pdfKitDoc.save();
        pdfKitDoc.addContent('' + rect.x + ' ' + rect.y + ' ' + rect.width + ' ' + rect.height + ' re');
        pdfKitDoc.clip();
      }

      function endClip(pdfKitDoc) {
        pdfKitDoc.restore();
      }

      module.exports = PdfPrinter;
      /***/
    },
    /* 306 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      function _interopDefault(ex) {
        return ex && _typeof4(ex) === 'object' && 'default' in ex ? ex['default'] : ex;
      }

      var PdfKit = _interopDefault(__webpack_require__(307));

      function getEngineInstance() {
        return PdfKit;
      }

      function createPdfDocument(options) {
        options = options || {};
        return new PdfKit(options);
      }

      module.exports = {
        getEngineInstance: getEngineInstance,
        createPdfDocument: createPdfDocument
      };
      /***/
    },
    /* 307 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";
      /* WEBPACK VAR INJECTION */

      (function (Buffer, __dirname) {
        __webpack_require__(197);

        __webpack_require__(207);

        __webpack_require__(208);

        __webpack_require__(209);

        __webpack_require__(312);

        __webpack_require__(211);

        __webpack_require__(313);

        __webpack_require__(314);

        __webpack_require__(213);

        __webpack_require__(215);

        __webpack_require__(28);

        __webpack_require__(219);

        __webpack_require__(318);

        __webpack_require__(46);

        __webpack_require__(319);

        __webpack_require__(320);

        __webpack_require__(61);

        __webpack_require__(157);

        __webpack_require__(223);

        __webpack_require__(322);

        __webpack_require__(324);

        __webpack_require__(326);

        __webpack_require__(227);

        __webpack_require__(327);

        __webpack_require__(32);

        __webpack_require__(118);

        __webpack_require__(229);

        __webpack_require__(330);

        __webpack_require__(331);

        __webpack_require__(159);

        __webpack_require__(160);

        __webpack_require__(230);

        __webpack_require__(231);

        __webpack_require__(232);

        __webpack_require__(233);

        __webpack_require__(334);

        __webpack_require__(62);

        __webpack_require__(63);

        __webpack_require__(64);

        __webpack_require__(65);

        __webpack_require__(66);

        __webpack_require__(67);

        __webpack_require__(68);

        __webpack_require__(69);

        __webpack_require__(70);

        __webpack_require__(71);

        __webpack_require__(72);

        __webpack_require__(73);

        __webpack_require__(74);

        __webpack_require__(75);

        __webpack_require__(76);

        __webpack_require__(77);

        __webpack_require__(78);

        __webpack_require__(79);

        __webpack_require__(80);

        __webpack_require__(81);

        __webpack_require__(82);

        __webpack_require__(83);

        __webpack_require__(84);

        __webpack_require__(85);

        __webpack_require__(340);

        __webpack_require__(120);

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        var _stream = _interopRequireDefault(__webpack_require__(121));

        var _zlib = _interopRequireDefault(__webpack_require__(244));

        var _cryptoJs = _interopRequireDefault(__webpack_require__(362));

        var _fontkit = _interopRequireDefault(__webpack_require__(386));

        var _events = __webpack_require__(122);

        var _linebreak = _interopRequireDefault(__webpack_require__(290));

        var _pngJs = _interopRequireDefault(__webpack_require__(531));

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {
            default: obj
          };
        }

        var fs = __webpack_require__(53);

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }

        function _defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }

        function _createClass(Constructor, protoProps, staticProps) {
          if (protoProps) _defineProperties(Constructor.prototype, protoProps);
          if (staticProps) _defineProperties(Constructor, staticProps);
          return Constructor;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function");
          }

          subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
              value: subClass,
              writable: true,
              configurable: true
            }
          });
          if (superClass) _setPrototypeOf(subClass, superClass);
        }

        function _getPrototypeOf(o) {
          _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
            return o.__proto__ || Object.getPrototypeOf(o);
          };
          return _getPrototypeOf(o);
        }

        function _setPrototypeOf(o, p) {
          _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
            o.__proto__ = p;
            return o;
          };

          return _setPrototypeOf(o, p);
        }

        function _assertThisInitialized(self) {
          if (self === void 0) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }

          return self;
        }

        function _possibleConstructorReturn(self, call) {
          if (call && (_typeof4(call) === "object" || typeof call === "function")) {
            return call;
          }

          return _assertThisInitialized(self);
        }

        function _slicedToArray(arr, i) {
          return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
        }

        function _toConsumableArray(arr) {
          return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
        }

        function _arrayWithoutHoles(arr) {
          if (Array.isArray(arr)) {
            for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
              arr2[i] = arr[i];
            }

            return arr2;
          }
        }

        function _arrayWithHoles(arr) {
          if (Array.isArray(arr)) return arr;
        }

        function _iterableToArray(iter) {
          if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
        }

        function _iterableToArrayLimit(arr, i) {
          if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) {
            return;
          }

          var _arr = [];
          var _n = true;
          var _d = false;
          var _e = undefined;

          try {
            for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
              _arr.push(_s.value);

              if (i && _arr.length === i) break;
            }
          } catch (err) {
            _d = true;
            _e = err;
          } finally {
            try {
              if (!_n && _i["return"] != null) _i["return"]();
            } finally {
              if (_d) throw _e;
            }
          }

          return _arr;
        }

        function _nonIterableSpread() {
          throw new TypeError("Invalid attempt to spread non-iterable instance");
        }

        function _nonIterableRest() {
          throw new TypeError("Invalid attempt to destructure non-iterable instance");
        }
        /*
        PDFAbstractReference - abstract class for PDF reference
        */


        var PDFAbstractReference = /*#__PURE__*/function () {
          function PDFAbstractReference() {
            _classCallCheck(this, PDFAbstractReference);
          }

          _createClass(PDFAbstractReference, [{
            key: "toString",
            value: function toString() {
              throw new Error('Must be implemented by subclasses');
            }
          }]);

          return PDFAbstractReference;
        }();

        var PDFNameTree = /*#__PURE__*/function () {
          function PDFNameTree() {
            _classCallCheck(this, PDFNameTree);

            this._items = {};
          }

          _createClass(PDFNameTree, [{
            key: "add",
            value: function add(key, val) {
              return this._items[key] = val;
            }
          }, {
            key: "get",
            value: function get(key) {
              return this._items[key];
            }
          }, {
            key: "toString",
            value: function toString() {
              // Needs to be sorted by key
              var sortedKeys = Object.keys(this._items).sort(function (a, b) {
                return a.localeCompare(b);
              });
              var out = ['<<'];

              if (sortedKeys.length > 1) {
                var first = sortedKeys[0],
                    last = sortedKeys[sortedKeys.length - 1];
                out.push("  /Limits ".concat(PDFObject.convert([new String(first), new String(last)])));
              }

              out.push('  /Names [');
              var _iteratorNormalCompletion = true;
              var _didIteratorError = false;
              var _iteratorError = undefined;

              try {
                for (var _iterator = sortedKeys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                  var key = _step.value;
                  out.push("    ".concat(PDFObject.convert(new String(key)), " ").concat(PDFObject.convert(this._items[key])));
                }
              } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                  }
                } finally {
                  if (_didIteratorError) {
                    throw _iteratorError;
                  }
                }
              }

              out.push(']');
              out.push('>>');
              return out.join('\n');
            }
          }]);

          return PDFNameTree;
        }();

        var pad = function pad(str, length) {
          return (Array(length + 1).join('0') + str).slice(-length);
        };

        var escapableRe = /[\n\r\t\b\f\(\)\\]/g;
        var escapable = {
          '\n': '\\n',
          '\r': '\\r',
          '\t': '\\t',
          '\b': '\\b',
          '\f': '\\f',
          '\\': '\\\\',
          '(': '\\(',
          ')': '\\)'
        }; // Convert little endian UTF-16 to big endian

        var swapBytes = function swapBytes(buff) {
          var l = buff.length;

          if (l & 0x01) {
            throw new Error('Buffer length must be even');
          } else {
            for (var i = 0, end = l - 1; i < end; i += 2) {
              var a = buff[i];
              buff[i] = buff[i + 1];
              buff[i + 1] = a;
            }
          }

          return buff;
        };

        var PDFObject = /*#__PURE__*/function () {
          function PDFObject() {
            _classCallCheck(this, PDFObject);
          }

          _createClass(PDFObject, null, [{
            key: "convert",
            value: function convert(object) {
              var encryptFn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null; // String literals are converted to the PDF name type

              if (typeof object === 'string') {
                return "/".concat(object); // String objects are converted to PDF strings (UTF-16)
              } else if (object instanceof String) {
                var string = object; // Detect if this is a unicode string

                var isUnicode = false;

                for (var i = 0, end = string.length; i < end; i++) {
                  if (string.charCodeAt(i) > 0x7f) {
                    isUnicode = true;
                    break;
                  }
                } // If so, encode it as big endian UTF-16


                var stringBuffer;

                if (isUnicode) {
                  stringBuffer = swapBytes(Buffer.from("\uFEFF".concat(string), 'utf16le'));
                } else {
                  stringBuffer = Buffer.from(string.valueOf(), 'ascii');
                } // Encrypt the string when necessary


                if (encryptFn) {
                  string = encryptFn(stringBuffer).toString('binary');
                } else {
                  string = stringBuffer.toString('binary');
                } // Escape characters as required by the spec


                string = string.replace(escapableRe, function (c) {
                  return escapable[c];
                });
                return "(".concat(string, ")"); // Buffers are converted to PDF hex strings
              } else if (Buffer.isBuffer(object)) {
                return "<".concat(object.toString('hex'), ">");
              } else if (object instanceof PDFAbstractReference || object instanceof PDFNameTree) {
                return object.toString();
              } else if (object instanceof Date) {
                var _string = "D:".concat(pad(object.getUTCFullYear(), 4)) + pad(object.getUTCMonth() + 1, 2) + pad(object.getUTCDate(), 2) + pad(object.getUTCHours(), 2) + pad(object.getUTCMinutes(), 2) + pad(object.getUTCSeconds(), 2) + 'Z'; // Encrypt the string when necessary


                if (encryptFn) {
                  _string = encryptFn(new Buffer(_string, 'ascii')).toString('binary'); // Escape characters as required by the spec

                  _string = _string.replace(escapableRe, function (c) {
                    return escapable[c];
                  });
                }

                return "(".concat(_string, ")");
              } else if (Array.isArray(object)) {
                var items = object.map(function (e) {
                  return PDFObject.convert(e, encryptFn);
                }).join(' ');
                return "[".concat(items, "]");
              } else if ({}.toString.call(object) === '[object Object]') {
                var out = ['<<'];

                for (var key in object) {
                  var val = object[key];
                  out.push("/".concat(key, " ").concat(PDFObject.convert(val, encryptFn)));
                }

                out.push('>>');
                return out.join('\n');
              } else if (typeof object === 'number') {
                return PDFObject.number(object);
              } else {
                return "".concat(object);
              }
            }
          }, {
            key: "number",
            value: function number(n) {
              if (n > -1e21 && n < 1e21) {
                return Math.round(n * 1e6) / 1e6;
              }

              throw new Error("unsupported number: ".concat(n));
            }
          }]);

          return PDFObject;
        }();

        var PDFReference = /*#__PURE__*/function (_PDFAbstractReference) {
          _inherits(PDFReference, _PDFAbstractReference);

          function PDFReference(document, id) {
            var _this;

            var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

            _classCallCheck(this, PDFReference);

            _this = _possibleConstructorReturn(this, _getPrototypeOf(PDFReference).call(this));
            _this.document = document;
            _this.id = id;
            _this.data = data;
            _this.gen = 0;
            _this.compress = _this.document.compress && !_this.data.Filter;
            _this.uncompressedLength = 0;
            _this.buffer = [];
            return _this;
          }

          _createClass(PDFReference, [{
            key: "write",
            value: function write(chunk) {
              if (!Buffer.isBuffer(chunk)) {
                chunk = new Buffer(chunk + '\n', 'binary');
              }

              this.uncompressedLength += chunk.length;

              if (this.data.Length == null) {
                this.data.Length = 0;
              }

              this.buffer.push(chunk);
              this.data.Length += chunk.length;

              if (this.compress) {
                return this.data.Filter = 'FlateDecode';
              }
            }
          }, {
            key: "end",
            value: function end(chunk) {
              if (chunk) {
                this.write(chunk);
              }

              return this.finalize();
            }
          }, {
            key: "finalize",
            value: function finalize() {
              this.offset = this.document._offset;
              var encryptFn = this.document._security ? this.document._security.getEncryptFn(this.id, this.gen) : null;

              if (this.buffer.length) {
                this.buffer = Buffer.concat(this.buffer);

                if (this.compress) {
                  this.buffer = _zlib.default.deflateSync(this.buffer);
                }

                if (encryptFn) {
                  this.buffer = encryptFn(this.buffer);
                }

                this.data.Length = this.buffer.length;
              }

              this.document._write("".concat(this.id, " ").concat(this.gen, " obj"));

              this.document._write(PDFObject.convert(this.data, encryptFn));

              if (this.buffer.length) {
                this.document._write('stream');

                this.document._write(this.buffer);

                this.buffer = []; // free up memory

                this.document._write('\nendstream');
              }

              this.document._write('endobj');

              this.document._refEnd(this);
            }
          }, {
            key: "toString",
            value: function toString() {
              return "".concat(this.id, " ").concat(this.gen, " R");
            }
          }]);

          return PDFReference;
        }(PDFAbstractReference);
        /*
        PDFPage - represents a single page in the PDF document
        By Devon Govett
        */


        var DEFAULT_MARGINS = {
          top: 72,
          left: 72,
          bottom: 72,
          right: 72
        };
        var SIZES = {
          '4A0': [4767.87, 6740.79],
          '2A0': [3370.39, 4767.87],
          A0: [2383.94, 3370.39],
          A1: [1683.78, 2383.94],
          A2: [1190.55, 1683.78],
          A3: [841.89, 1190.55],
          A4: [595.28, 841.89],
          A5: [419.53, 595.28],
          A6: [297.64, 419.53],
          A7: [209.76, 297.64],
          A8: [147.4, 209.76],
          A9: [104.88, 147.4],
          A10: [73.7, 104.88],
          B0: [2834.65, 4008.19],
          B1: [2004.09, 2834.65],
          B2: [1417.32, 2004.09],
          B3: [1000.63, 1417.32],
          B4: [708.66, 1000.63],
          B5: [498.9, 708.66],
          B6: [354.33, 498.9],
          B7: [249.45, 354.33],
          B8: [175.75, 249.45],
          B9: [124.72, 175.75],
          B10: [87.87, 124.72],
          C0: [2599.37, 3676.54],
          C1: [1836.85, 2599.37],
          C2: [1298.27, 1836.85],
          C3: [918.43, 1298.27],
          C4: [649.13, 918.43],
          C5: [459.21, 649.13],
          C6: [323.15, 459.21],
          C7: [229.61, 323.15],
          C8: [161.57, 229.61],
          C9: [113.39, 161.57],
          C10: [79.37, 113.39],
          RA0: [2437.8, 3458.27],
          RA1: [1729.13, 2437.8],
          RA2: [1218.9, 1729.13],
          RA3: [864.57, 1218.9],
          RA4: [609.45, 864.57],
          SRA0: [2551.18, 3628.35],
          SRA1: [1814.17, 2551.18],
          SRA2: [1275.59, 1814.17],
          SRA3: [907.09, 1275.59],
          SRA4: [637.8, 907.09],
          EXECUTIVE: [521.86, 756.0],
          FOLIO: [612.0, 936.0],
          LEGAL: [612.0, 1008.0],
          LETTER: [612.0, 792.0],
          TABLOID: [792.0, 1224.0]
        };

        var PDFPage = /*#__PURE__*/function () {
          function PDFPage(document) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            _classCallCheck(this, PDFPage);

            this.document = document;
            this.size = options.size || 'letter';
            this.layout = options.layout || 'portrait'; // process margins

            if (typeof options.margin === 'number') {
              this.margins = {
                top: options.margin,
                left: options.margin,
                bottom: options.margin,
                right: options.margin
              }; // default to 1 inch margins
            } else {
              this.margins = options.margins || DEFAULT_MARGINS;
            } // calculate page dimensions


            var dimensions = Array.isArray(this.size) ? this.size : SIZES[this.size.toUpperCase()];
            this.width = dimensions[this.layout === 'portrait' ? 0 : 1];
            this.height = dimensions[this.layout === 'portrait' ? 1 : 0];
            this.content = this.document.ref(); // Initialize the Font, XObject, and ExtGState dictionaries

            this.resources = this.document.ref({
              ProcSet: ['PDF', 'Text', 'ImageB', 'ImageC', 'ImageI']
            }); // The page dictionary

            this.dictionary = this.document.ref({
              Type: 'Page',
              Parent: this.document._root.data.Pages,
              MediaBox: [0, 0, this.width, this.height],
              Contents: this.content,
              Resources: this.resources
            });
          } // Lazily create these dictionaries


          _createClass(PDFPage, [{
            key: "maxY",
            value: function maxY() {
              return this.height - this.margins.bottom;
            }
          }, {
            key: "write",
            value: function write(chunk) {
              return this.content.write(chunk);
            }
          }, {
            key: "end",
            value: function end() {
              this.dictionary.end();
              this.resources.end();
              return this.content.end();
            }
          }, {
            key: "fonts",
            get: function get() {
              var data = this.resources.data;
              return data.Font != null ? data.Font : data.Font = {};
            }
          }, {
            key: "xobjects",
            get: function get() {
              var data = this.resources.data;
              return data.XObject != null ? data.XObject : data.XObject = {};
            }
          }, {
            key: "ext_gstates",
            get: function get() {
              var data = this.resources.data;
              return data.ExtGState != null ? data.ExtGState : data.ExtGState = {};
            }
          }, {
            key: "patterns",
            get: function get() {
              var data = this.resources.data;
              return data.Pattern != null ? data.Pattern : data.Pattern = {};
            }
          }, {
            key: "annotations",
            get: function get() {
              var data = this.dictionary.data;
              return data.Annots != null ? data.Annots : data.Annots = [];
            }
          }]);

          return PDFPage;
        }();
        /**
         * Check if value is in a range group.
         * @param {number} value
         * @param {number[]} rangeGroup
         * @returns {boolean}
         */


        function inRange(value, rangeGroup) {
          if (value < rangeGroup[0]) return false;
          var startRange = 0;
          var endRange = rangeGroup.length / 2;

          while (startRange <= endRange) {
            var middleRange = Math.floor((startRange + endRange) / 2); // actual array index

            var arrayIndex = middleRange * 2; // Check if value is in range pointed by actual index

            if (value >= rangeGroup[arrayIndex] && value <= rangeGroup[arrayIndex + 1]) {
              return true;
            }

            if (value > rangeGroup[arrayIndex + 1]) {
              // Search Right Side Of Array
              startRange = middleRange + 1;
            } else {
              // Search Left Side Of Array
              endRange = middleRange - 1;
            }
          }

          return false;
        }
        /* eslint-disable prettier/prettier */

        /**
         * A.1 Unassigned code points in Unicode 3.2
         * @link https://tools.ietf.org/html/rfc3454#appendix-A.1
         */


        var unassigned_code_points = [0x0221, 0x0221, 0x0234, 0x024f, 0x02ae, 0x02af, 0x02ef, 0x02ff, 0x0350, 0x035f, 0x0370, 0x0373, 0x0376, 0x0379, 0x037b, 0x037d, 0x037f, 0x0383, 0x038b, 0x038b, 0x038d, 0x038d, 0x03a2, 0x03a2, 0x03cf, 0x03cf, 0x03f7, 0x03ff, 0x0487, 0x0487, 0x04cf, 0x04cf, 0x04f6, 0x04f7, 0x04fa, 0x04ff, 0x0510, 0x0530, 0x0557, 0x0558, 0x0560, 0x0560, 0x0588, 0x0588, 0x058b, 0x0590, 0x05a2, 0x05a2, 0x05ba, 0x05ba, 0x05c5, 0x05cf, 0x05eb, 0x05ef, 0x05f5, 0x060b, 0x060d, 0x061a, 0x061c, 0x061e, 0x0620, 0x0620, 0x063b, 0x063f, 0x0656, 0x065f, 0x06ee, 0x06ef, 0x06ff, 0x06ff, 0x070e, 0x070e, 0x072d, 0x072f, 0x074b, 0x077f, 0x07b2, 0x0900, 0x0904, 0x0904, 0x093a, 0x093b, 0x094e, 0x094f, 0x0955, 0x0957, 0x0971, 0x0980, 0x0984, 0x0984, 0x098d, 0x098e, 0x0991, 0x0992, 0x09a9, 0x09a9, 0x09b1, 0x09b1, 0x09b3, 0x09b5, 0x09ba, 0x09bb, 0x09bd, 0x09bd, 0x09c5, 0x09c6, 0x09c9, 0x09ca, 0x09ce, 0x09d6, 0x09d8, 0x09db, 0x09de, 0x09de, 0x09e4, 0x09e5, 0x09fb, 0x0a01, 0x0a03, 0x0a04, 0x0a0b, 0x0a0e, 0x0a11, 0x0a12, 0x0a29, 0x0a29, 0x0a31, 0x0a31, 0x0a34, 0x0a34, 0x0a37, 0x0a37, 0x0a3a, 0x0a3b, 0x0a3d, 0x0a3d, 0x0a43, 0x0a46, 0x0a49, 0x0a4a, 0x0a4e, 0x0a58, 0x0a5d, 0x0a5d, 0x0a5f, 0x0a65, 0x0a75, 0x0a80, 0x0a84, 0x0a84, 0x0a8c, 0x0a8c, 0x0a8e, 0x0a8e, 0x0a92, 0x0a92, 0x0aa9, 0x0aa9, 0x0ab1, 0x0ab1, 0x0ab4, 0x0ab4, 0x0aba, 0x0abb, 0x0ac6, 0x0ac6, 0x0aca, 0x0aca, 0x0ace, 0x0acf, 0x0ad1, 0x0adf, 0x0ae1, 0x0ae5, 0x0af0, 0x0b00, 0x0b04, 0x0b04, 0x0b0d, 0x0b0e, 0x0b11, 0x0b12, 0x0b29, 0x0b29, 0x0b31, 0x0b31, 0x0b34, 0x0b35, 0x0b3a, 0x0b3b, 0x0b44, 0x0b46, 0x0b49, 0x0b4a, 0x0b4e, 0x0b55, 0x0b58, 0x0b5b, 0x0b5e, 0x0b5e, 0x0b62, 0x0b65, 0x0b71, 0x0b81, 0x0b84, 0x0b84, 0x0b8b, 0x0b8d, 0x0b91, 0x0b91, 0x0b96, 0x0b98, 0x0b9b, 0x0b9b, 0x0b9d, 0x0b9d, 0x0ba0, 0x0ba2, 0x0ba5, 0x0ba7, 0x0bab, 0x0bad, 0x0bb6, 0x0bb6, 0x0bba, 0x0bbd, 0x0bc3, 0x0bc5, 0x0bc9, 0x0bc9, 0x0bce, 0x0bd6, 0x0bd8, 0x0be6, 0x0bf3, 0x0c00, 0x0c04, 0x0c04, 0x0c0d, 0x0c0d, 0x0c11, 0x0c11, 0x0c29, 0x0c29, 0x0c34, 0x0c34, 0x0c3a, 0x0c3d, 0x0c45, 0x0c45, 0x0c49, 0x0c49, 0x0c4e, 0x0c54, 0x0c57, 0x0c5f, 0x0c62, 0x0c65, 0x0c70, 0x0c81, 0x0c84, 0x0c84, 0x0c8d, 0x0c8d, 0x0c91, 0x0c91, 0x0ca9, 0x0ca9, 0x0cb4, 0x0cb4, 0x0cba, 0x0cbd, 0x0cc5, 0x0cc5, 0x0cc9, 0x0cc9, 0x0cce, 0x0cd4, 0x0cd7, 0x0cdd, 0x0cdf, 0x0cdf, 0x0ce2, 0x0ce5, 0x0cf0, 0x0d01, 0x0d04, 0x0d04, 0x0d0d, 0x0d0d, 0x0d11, 0x0d11, 0x0d29, 0x0d29, 0x0d3a, 0x0d3d, 0x0d44, 0x0d45, 0x0d49, 0x0d49, 0x0d4e, 0x0d56, 0x0d58, 0x0d5f, 0x0d62, 0x0d65, 0x0d70, 0x0d81, 0x0d84, 0x0d84, 0x0d97, 0x0d99, 0x0db2, 0x0db2, 0x0dbc, 0x0dbc, 0x0dbe, 0x0dbf, 0x0dc7, 0x0dc9, 0x0dcb, 0x0dce, 0x0dd5, 0x0dd5, 0x0dd7, 0x0dd7, 0x0de0, 0x0df1, 0x0df5, 0x0e00, 0x0e3b, 0x0e3e, 0x0e5c, 0x0e80, 0x0e83, 0x0e83, 0x0e85, 0x0e86, 0x0e89, 0x0e89, 0x0e8b, 0x0e8c, 0x0e8e, 0x0e93, 0x0e98, 0x0e98, 0x0ea0, 0x0ea0, 0x0ea4, 0x0ea4, 0x0ea6, 0x0ea6, 0x0ea8, 0x0ea9, 0x0eac, 0x0eac, 0x0eba, 0x0eba, 0x0ebe, 0x0ebf, 0x0ec5, 0x0ec5, 0x0ec7, 0x0ec7, 0x0ece, 0x0ecf, 0x0eda, 0x0edb, 0x0ede, 0x0eff, 0x0f48, 0x0f48, 0x0f6b, 0x0f70, 0x0f8c, 0x0f8f, 0x0f98, 0x0f98, 0x0fbd, 0x0fbd, 0x0fcd, 0x0fce, 0x0fd0, 0x0fff, 0x1022, 0x1022, 0x1028, 0x1028, 0x102b, 0x102b, 0x1033, 0x1035, 0x103a, 0x103f, 0x105a, 0x109f, 0x10c6, 0x10cf, 0x10f9, 0x10fa, 0x10fc, 0x10ff, 0x115a, 0x115e, 0x11a3, 0x11a7, 0x11fa, 0x11ff, 0x1207, 0x1207, 0x1247, 0x1247, 0x1249, 0x1249, 0x124e, 0x124f, 0x1257, 0x1257, 0x1259, 0x1259, 0x125e, 0x125f, 0x1287, 0x1287, 0x1289, 0x1289, 0x128e, 0x128f, 0x12af, 0x12af, 0x12b1, 0x12b1, 0x12b6, 0x12b7, 0x12bf, 0x12bf, 0x12c1, 0x12c1, 0x12c6, 0x12c7, 0x12cf, 0x12cf, 0x12d7, 0x12d7, 0x12ef, 0x12ef, 0x130f, 0x130f, 0x1311, 0x1311, 0x1316, 0x1317, 0x131f, 0x131f, 0x1347, 0x1347, 0x135b, 0x1360, 0x137d, 0x139f, 0x13f5, 0x1400, 0x1677, 0x167f, 0x169d, 0x169f, 0x16f1, 0x16ff, 0x170d, 0x170d, 0x1715, 0x171f, 0x1737, 0x173f, 0x1754, 0x175f, 0x176d, 0x176d, 0x1771, 0x1771, 0x1774, 0x177f, 0x17dd, 0x17df, 0x17ea, 0x17ff, 0x180f, 0x180f, 0x181a, 0x181f, 0x1878, 0x187f, 0x18aa, 0x1dff, 0x1e9c, 0x1e9f, 0x1efa, 0x1eff, 0x1f16, 0x1f17, 0x1f1e, 0x1f1f, 0x1f46, 0x1f47, 0x1f4e, 0x1f4f, 0x1f58, 0x1f58, 0x1f5a, 0x1f5a, 0x1f5c, 0x1f5c, 0x1f5e, 0x1f5e, 0x1f7e, 0x1f7f, 0x1fb5, 0x1fb5, 0x1fc5, 0x1fc5, 0x1fd4, 0x1fd5, 0x1fdc, 0x1fdc, 0x1ff0, 0x1ff1, 0x1ff5, 0x1ff5, 0x1fff, 0x1fff, 0x2053, 0x2056, 0x2058, 0x205e, 0x2064, 0x2069, 0x2072, 0x2073, 0x208f, 0x209f, 0x20b2, 0x20cf, 0x20eb, 0x20ff, 0x213b, 0x213c, 0x214c, 0x2152, 0x2184, 0x218f, 0x23cf, 0x23ff, 0x2427, 0x243f, 0x244b, 0x245f, 0x24ff, 0x24ff, 0x2614, 0x2615, 0x2618, 0x2618, 0x267e, 0x267f, 0x268a, 0x2700, 0x2705, 0x2705, 0x270a, 0x270b, 0x2728, 0x2728, 0x274c, 0x274c, 0x274e, 0x274e, 0x2753, 0x2755, 0x2757, 0x2757, 0x275f, 0x2760, 0x2795, 0x2797, 0x27b0, 0x27b0, 0x27bf, 0x27cf, 0x27ec, 0x27ef, 0x2b00, 0x2e7f, 0x2e9a, 0x2e9a, 0x2ef4, 0x2eff, 0x2fd6, 0x2fef, 0x2ffc, 0x2fff, 0x3040, 0x3040, 0x3097, 0x3098, 0x3100, 0x3104, 0x312d, 0x3130, 0x318f, 0x318f, 0x31b8, 0x31ef, 0x321d, 0x321f, 0x3244, 0x3250, 0x327c, 0x327e, 0x32cc, 0x32cf, 0x32ff, 0x32ff, 0x3377, 0x337a, 0x33de, 0x33df, 0x33ff, 0x33ff, 0x4db6, 0x4dff, 0x9fa6, 0x9fff, 0xa48d, 0xa48f, 0xa4c7, 0xabff, 0xd7a4, 0xd7ff, 0xfa2e, 0xfa2f, 0xfa6b, 0xfaff, 0xfb07, 0xfb12, 0xfb18, 0xfb1c, 0xfb37, 0xfb37, 0xfb3d, 0xfb3d, 0xfb3f, 0xfb3f, 0xfb42, 0xfb42, 0xfb45, 0xfb45, 0xfbb2, 0xfbd2, 0xfd40, 0xfd4f, 0xfd90, 0xfd91, 0xfdc8, 0xfdcf, 0xfdfd, 0xfdff, 0xfe10, 0xfe1f, 0xfe24, 0xfe2f, 0xfe47, 0xfe48, 0xfe53, 0xfe53, 0xfe67, 0xfe67, 0xfe6c, 0xfe6f, 0xfe75, 0xfe75, 0xfefd, 0xfefe, 0xff00, 0xff00, 0xffbf, 0xffc1, 0xffc8, 0xffc9, 0xffd0, 0xffd1, 0xffd8, 0xffd9, 0xffdd, 0xffdf, 0xffe7, 0xffe7, 0xffef, 0xfff8, 0x10000, 0x102ff, 0x1031f, 0x1031f, 0x10324, 0x1032f, 0x1034b, 0x103ff, 0x10426, 0x10427, 0x1044e, 0x1cfff, 0x1d0f6, 0x1d0ff, 0x1d127, 0x1d129, 0x1d1de, 0x1d3ff, 0x1d455, 0x1d455, 0x1d49d, 0x1d49d, 0x1d4a0, 0x1d4a1, 0x1d4a3, 0x1d4a4, 0x1d4a7, 0x1d4a8, 0x1d4ad, 0x1d4ad, 0x1d4ba, 0x1d4ba, 0x1d4bc, 0x1d4bc, 0x1d4c1, 0x1d4c1, 0x1d4c4, 0x1d4c4, 0x1d506, 0x1d506, 0x1d50b, 0x1d50c, 0x1d515, 0x1d515, 0x1d51d, 0x1d51d, 0x1d53a, 0x1d53a, 0x1d53f, 0x1d53f, 0x1d545, 0x1d545, 0x1d547, 0x1d549, 0x1d551, 0x1d551, 0x1d6a4, 0x1d6a7, 0x1d7ca, 0x1d7cd, 0x1d800, 0x1fffd, 0x2a6d7, 0x2f7ff, 0x2fa1e, 0x2fffd, 0x30000, 0x3fffd, 0x40000, 0x4fffd, 0x50000, 0x5fffd, 0x60000, 0x6fffd, 0x70000, 0x7fffd, 0x80000, 0x8fffd, 0x90000, 0x9fffd, 0xa0000, 0xafffd, 0xb0000, 0xbfffd, 0xc0000, 0xcfffd, 0xd0000, 0xdfffd, 0xe0000, 0xe0000, 0xe0002, 0xe001f, 0xe0080, 0xefffd];
        /* eslint-enable */

        var isUnassignedCodePoint = function isUnassignedCodePoint(character) {
          return inRange(character, unassigned_code_points);
        };
        /* eslint-disable prettier/prettier */

        /**
         * B.1 Commonly mapped to nothing
         * @link https://tools.ietf.org/html/rfc3454#appendix-B.1
         */


        var commonly_mapped_to_nothing = [0x00ad, 0x00ad, 0x034f, 0x034f, 0x1806, 0x1806, 0x180b, 0x180b, 0x180c, 0x180c, 0x180d, 0x180d, 0x200b, 0x200b, 0x200c, 0x200c, 0x200d, 0x200d, 0x2060, 0x2060, 0xfe00, 0xfe00, 0xfe01, 0xfe01, 0xfe02, 0xfe02, 0xfe03, 0xfe03, 0xfe04, 0xfe04, 0xfe05, 0xfe05, 0xfe06, 0xfe06, 0xfe07, 0xfe07, 0xfe08, 0xfe08, 0xfe09, 0xfe09, 0xfe0a, 0xfe0a, 0xfe0b, 0xfe0b, 0xfe0c, 0xfe0c, 0xfe0d, 0xfe0d, 0xfe0e, 0xfe0e, 0xfe0f, 0xfe0f, 0xfeff, 0xfeff];
        /* eslint-enable */

        var isCommonlyMappedToNothing = function isCommonlyMappedToNothing(character) {
          return inRange(character, commonly_mapped_to_nothing);
        };
        /* eslint-disable prettier/prettier */

        /**
         * C.1.2 Non-ASCII space characters
         * @link https://tools.ietf.org/html/rfc3454#appendix-C.1.2
         */


        var non_ASCII_space_characters = [0x00a0, 0x00a0
        /* NO-BREAK SPACE */
        , 0x1680, 0x1680
        /* OGHAM SPACE MARK */
        , 0x2000, 0x2000
        /* EN QUAD */
        , 0x2001, 0x2001
        /* EM QUAD */
        , 0x2002, 0x2002
        /* EN SPACE */
        , 0x2003, 0x2003
        /* EM SPACE */
        , 0x2004, 0x2004
        /* THREE-PER-EM SPACE */
        , 0x2005, 0x2005
        /* FOUR-PER-EM SPACE */
        , 0x2006, 0x2006
        /* SIX-PER-EM SPACE */
        , 0x2007, 0x2007
        /* FIGURE SPACE */
        , 0x2008, 0x2008
        /* PUNCTUATION SPACE */
        , 0x2009, 0x2009
        /* THIN SPACE */
        , 0x200a, 0x200a
        /* HAIR SPACE */
        , 0x200b, 0x200b
        /* ZERO WIDTH SPACE */
        , 0x202f, 0x202f
        /* NARROW NO-BREAK SPACE */
        , 0x205f, 0x205f
        /* MEDIUM MATHEMATICAL SPACE */
        , 0x3000, 0x3000
        /* IDEOGRAPHIC SPACE */
        ];
        /* eslint-enable */

        var isNonASCIISpaceCharacter = function isNonASCIISpaceCharacter(character) {
          return inRange(character, non_ASCII_space_characters);
        };
        /* eslint-disable prettier/prettier */


        var non_ASCII_controls_characters = [
        /**
         * C.2.2 Non-ASCII control characters
         * @link https://tools.ietf.org/html/rfc3454#appendix-C.2.2
         */
        0x0080, 0x009f
        /* [CONTROL CHARACTERS] */
        , 0x06dd, 0x06dd
        /* ARABIC END OF AYAH */
        , 0x070f, 0x070f
        /* SYRIAC ABBREVIATION MARK */
        , 0x180e, 0x180e
        /* MONGOLIAN VOWEL SEPARATOR */
        , 0x200c, 0x200c
        /* ZERO WIDTH NON-JOINER */
        , 0x200d, 0x200d
        /* ZERO WIDTH JOINER */
        , 0x2028, 0x2028
        /* LINE SEPARATOR */
        , 0x2029, 0x2029
        /* PARAGRAPH SEPARATOR */
        , 0x2060, 0x2060
        /* WORD JOINER */
        , 0x2061, 0x2061
        /* FUNCTION APPLICATION */
        , 0x2062, 0x2062
        /* INVISIBLE TIMES */
        , 0x2063, 0x2063
        /* INVISIBLE SEPARATOR */
        , 0x206a, 0x206f
        /* [CONTROL CHARACTERS] */
        , 0xfeff, 0xfeff
        /* ZERO WIDTH NO-BREAK SPACE */
        , 0xfff9, 0xfffc
        /* [CONTROL CHARACTERS] */
        , 0x1d173, 0x1d17a
        /* [MUSICAL CONTROL CHARACTERS] */
        ];
        var non_character_codepoints = [
        /**
         * C.4 Non-character code points
         * @link https://tools.ietf.org/html/rfc3454#appendix-C.4
         */
        0xfdd0, 0xfdef
        /* [NONCHARACTER CODE POINTS] */
        , 0xfffe, 0xffff
        /* [NONCHARACTER CODE POINTS] */
        , 0x1fffe, 0x1ffff
        /* [NONCHARACTER CODE POINTS] */
        , 0x2fffe, 0x2ffff
        /* [NONCHARACTER CODE POINTS] */
        , 0x3fffe, 0x3ffff
        /* [NONCHARACTER CODE POINTS] */
        , 0x4fffe, 0x4ffff
        /* [NONCHARACTER CODE POINTS] */
        , 0x5fffe, 0x5ffff
        /* [NONCHARACTER CODE POINTS] */
        , 0x6fffe, 0x6ffff
        /* [NONCHARACTER CODE POINTS] */
        , 0x7fffe, 0x7ffff
        /* [NONCHARACTER CODE POINTS] */
        , 0x8fffe, 0x8ffff
        /* [NONCHARACTER CODE POINTS] */
        , 0x9fffe, 0x9ffff
        /* [NONCHARACTER CODE POINTS] */
        , 0xafffe, 0xaffff
        /* [NONCHARACTER CODE POINTS] */
        , 0xbfffe, 0xbffff
        /* [NONCHARACTER CODE POINTS] */
        , 0xcfffe, 0xcffff
        /* [NONCHARACTER CODE POINTS] */
        , 0xdfffe, 0xdffff
        /* [NONCHARACTER CODE POINTS] */
        , 0xefffe, 0xeffff
        /* [NONCHARACTER CODE POINTS] */
        , 0x10fffe, 0x10ffff
        /* [NONCHARACTER CODE POINTS] */
        ];
        /**
         * 2.3.  Prohibited Output
         */

        var prohibited_characters = [
        /**
         * C.2.1 ASCII control characters
         * @link https://tools.ietf.org/html/rfc3454#appendix-C.2.1
         */
        0, 0x001f
        /* [CONTROL CHARACTERS] */
        , 0x007f, 0x007f
        /* DELETE */
        ,
        /**
         * C.8 Change display properties or are deprecated
         * @link https://tools.ietf.org/html/rfc3454#appendix-C.8
         */
        0x0340, 0x0340
        /* COMBINING GRAVE TONE MARK */
        , 0x0341, 0x0341
        /* COMBINING ACUTE TONE MARK */
        , 0x200e, 0x200e
        /* LEFT-TO-RIGHT MARK */
        , 0x200f, 0x200f
        /* RIGHT-TO-LEFT MARK */
        , 0x202a, 0x202a
        /* LEFT-TO-RIGHT EMBEDDING */
        , 0x202b, 0x202b
        /* RIGHT-TO-LEFT EMBEDDING */
        , 0x202c, 0x202c
        /* POP DIRECTIONAL FORMATTING */
        , 0x202d, 0x202d
        /* LEFT-TO-RIGHT OVERRIDE */
        , 0x202e, 0x202e
        /* RIGHT-TO-LEFT OVERRIDE */
        , 0x206a, 0x206a
        /* INHIBIT SYMMETRIC SWAPPING */
        , 0x206b, 0x206b
        /* ACTIVATE SYMMETRIC SWAPPING */
        , 0x206c, 0x206c
        /* INHIBIT ARABIC FORM SHAPING */
        , 0x206d, 0x206d
        /* ACTIVATE ARABIC FORM SHAPING */
        , 0x206e, 0x206e
        /* NATIONAL DIGIT SHAPES */
        , 0x206f, 0x206f
        /* NOMINAL DIGIT SHAPES */
        ,
        /**
         * C.7 Inappropriate for canonical representation
         * @link https://tools.ietf.org/html/rfc3454#appendix-C.7
         */
        0x2ff0, 0x2ffb
        /* [IDEOGRAPHIC DESCRIPTION CHARACTERS] */
        ,
        /**
         * C.5 Surrogate codes
         * @link https://tools.ietf.org/html/rfc3454#appendix-C.5
         */
        0xd800, 0xdfff,
        /**
         * C.3 Private use
         * @link https://tools.ietf.org/html/rfc3454#appendix-C.3
         */
        0xe000, 0xf8ff
        /* [PRIVATE USE, PLANE 0] */
        ,
        /**
         * C.6 Inappropriate for plain text
         * @link https://tools.ietf.org/html/rfc3454#appendix-C.6
         */
        0xfff9, 0xfff9
        /* INTERLINEAR ANNOTATION ANCHOR */
        , 0xfffa, 0xfffa
        /* INTERLINEAR ANNOTATION SEPARATOR */
        , 0xfffb, 0xfffb
        /* INTERLINEAR ANNOTATION TERMINATOR */
        , 0xfffc, 0xfffc
        /* OBJECT REPLACEMENT CHARACTER */
        , 0xfffd, 0xfffd
        /* REPLACEMENT CHARACTER */
        ,
        /**
         * C.9 Tagging characters
         * @link https://tools.ietf.org/html/rfc3454#appendix-C.9
         */
        0xe0001, 0xe0001
        /* LANGUAGE TAG */
        , 0xe0020, 0xe007f
        /* [TAGGING CHARACTERS] */
        ,
        /**
         * C.3 Private use
         * @link https://tools.ietf.org/html/rfc3454#appendix-C.3
         */
        0xf0000, 0xffffd
        /* [PRIVATE USE, PLANE 15] */
        , 0x100000, 0x10fffd
        /* [PRIVATE USE, PLANE 16] */
        ];
        /* eslint-enable */

        var isProhibitedCharacter = function isProhibitedCharacter(character) {
          return inRange(character, non_ASCII_space_characters) || inRange(character, prohibited_characters) || inRange(character, non_ASCII_controls_characters) || inRange(character, non_character_codepoints);
        };
        /* eslint-disable prettier/prettier */

        /**
         * D.1 Characters with bidirectional property "R" or "AL"
         * @link https://tools.ietf.org/html/rfc3454#appendix-D.1
         */


        var bidirectional_r_al = [0x05be, 0x05be, 0x05c0, 0x05c0, 0x05c3, 0x05c3, 0x05d0, 0x05ea, 0x05f0, 0x05f4, 0x061b, 0x061b, 0x061f, 0x061f, 0x0621, 0x063a, 0x0640, 0x064a, 0x066d, 0x066f, 0x0671, 0x06d5, 0x06dd, 0x06dd, 0x06e5, 0x06e6, 0x06fa, 0x06fe, 0x0700, 0x070d, 0x0710, 0x0710, 0x0712, 0x072c, 0x0780, 0x07a5, 0x07b1, 0x07b1, 0x200f, 0x200f, 0xfb1d, 0xfb1d, 0xfb1f, 0xfb28, 0xfb2a, 0xfb36, 0xfb38, 0xfb3c, 0xfb3e, 0xfb3e, 0xfb40, 0xfb41, 0xfb43, 0xfb44, 0xfb46, 0xfbb1, 0xfbd3, 0xfd3d, 0xfd50, 0xfd8f, 0xfd92, 0xfdc7, 0xfdf0, 0xfdfc, 0xfe70, 0xfe74, 0xfe76, 0xfefc];
        /* eslint-enable */

        var isBidirectionalRAL = function isBidirectionalRAL(character) {
          return inRange(character, bidirectional_r_al);
        };
        /* eslint-disable prettier/prettier */

        /**
         * D.2 Characters with bidirectional property "L"
         * @link https://tools.ietf.org/html/rfc3454#appendix-D.2
         */


        var bidirectional_l = [0x0041, 0x005a, 0x0061, 0x007a, 0x00aa, 0x00aa, 0x00b5, 0x00b5, 0x00ba, 0x00ba, 0x00c0, 0x00d6, 0x00d8, 0x00f6, 0x00f8, 0x0220, 0x0222, 0x0233, 0x0250, 0x02ad, 0x02b0, 0x02b8, 0x02bb, 0x02c1, 0x02d0, 0x02d1, 0x02e0, 0x02e4, 0x02ee, 0x02ee, 0x037a, 0x037a, 0x0386, 0x0386, 0x0388, 0x038a, 0x038c, 0x038c, 0x038e, 0x03a1, 0x03a3, 0x03ce, 0x03d0, 0x03f5, 0x0400, 0x0482, 0x048a, 0x04ce, 0x04d0, 0x04f5, 0x04f8, 0x04f9, 0x0500, 0x050f, 0x0531, 0x0556, 0x0559, 0x055f, 0x0561, 0x0587, 0x0589, 0x0589, 0x0903, 0x0903, 0x0905, 0x0939, 0x093d, 0x0940, 0x0949, 0x094c, 0x0950, 0x0950, 0x0958, 0x0961, 0x0964, 0x0970, 0x0982, 0x0983, 0x0985, 0x098c, 0x098f, 0x0990, 0x0993, 0x09a8, 0x09aa, 0x09b0, 0x09b2, 0x09b2, 0x09b6, 0x09b9, 0x09be, 0x09c0, 0x09c7, 0x09c8, 0x09cb, 0x09cc, 0x09d7, 0x09d7, 0x09dc, 0x09dd, 0x09df, 0x09e1, 0x09e6, 0x09f1, 0x09f4, 0x09fa, 0x0a05, 0x0a0a, 0x0a0f, 0x0a10, 0x0a13, 0x0a28, 0x0a2a, 0x0a30, 0x0a32, 0x0a33, 0x0a35, 0x0a36, 0x0a38, 0x0a39, 0x0a3e, 0x0a40, 0x0a59, 0x0a5c, 0x0a5e, 0x0a5e, 0x0a66, 0x0a6f, 0x0a72, 0x0a74, 0x0a83, 0x0a83, 0x0a85, 0x0a8b, 0x0a8d, 0x0a8d, 0x0a8f, 0x0a91, 0x0a93, 0x0aa8, 0x0aaa, 0x0ab0, 0x0ab2, 0x0ab3, 0x0ab5, 0x0ab9, 0x0abd, 0x0ac0, 0x0ac9, 0x0ac9, 0x0acb, 0x0acc, 0x0ad0, 0x0ad0, 0x0ae0, 0x0ae0, 0x0ae6, 0x0aef, 0x0b02, 0x0b03, 0x0b05, 0x0b0c, 0x0b0f, 0x0b10, 0x0b13, 0x0b28, 0x0b2a, 0x0b30, 0x0b32, 0x0b33, 0x0b36, 0x0b39, 0x0b3d, 0x0b3e, 0x0b40, 0x0b40, 0x0b47, 0x0b48, 0x0b4b, 0x0b4c, 0x0b57, 0x0b57, 0x0b5c, 0x0b5d, 0x0b5f, 0x0b61, 0x0b66, 0x0b70, 0x0b83, 0x0b83, 0x0b85, 0x0b8a, 0x0b8e, 0x0b90, 0x0b92, 0x0b95, 0x0b99, 0x0b9a, 0x0b9c, 0x0b9c, 0x0b9e, 0x0b9f, 0x0ba3, 0x0ba4, 0x0ba8, 0x0baa, 0x0bae, 0x0bb5, 0x0bb7, 0x0bb9, 0x0bbe, 0x0bbf, 0x0bc1, 0x0bc2, 0x0bc6, 0x0bc8, 0x0bca, 0x0bcc, 0x0bd7, 0x0bd7, 0x0be7, 0x0bf2, 0x0c01, 0x0c03, 0x0c05, 0x0c0c, 0x0c0e, 0x0c10, 0x0c12, 0x0c28, 0x0c2a, 0x0c33, 0x0c35, 0x0c39, 0x0c41, 0x0c44, 0x0c60, 0x0c61, 0x0c66, 0x0c6f, 0x0c82, 0x0c83, 0x0c85, 0x0c8c, 0x0c8e, 0x0c90, 0x0c92, 0x0ca8, 0x0caa, 0x0cb3, 0x0cb5, 0x0cb9, 0x0cbe, 0x0cbe, 0x0cc0, 0x0cc4, 0x0cc7, 0x0cc8, 0x0cca, 0x0ccb, 0x0cd5, 0x0cd6, 0x0cde, 0x0cde, 0x0ce0, 0x0ce1, 0x0ce6, 0x0cef, 0x0d02, 0x0d03, 0x0d05, 0x0d0c, 0x0d0e, 0x0d10, 0x0d12, 0x0d28, 0x0d2a, 0x0d39, 0x0d3e, 0x0d40, 0x0d46, 0x0d48, 0x0d4a, 0x0d4c, 0x0d57, 0x0d57, 0x0d60, 0x0d61, 0x0d66, 0x0d6f, 0x0d82, 0x0d83, 0x0d85, 0x0d96, 0x0d9a, 0x0db1, 0x0db3, 0x0dbb, 0x0dbd, 0x0dbd, 0x0dc0, 0x0dc6, 0x0dcf, 0x0dd1, 0x0dd8, 0x0ddf, 0x0df2, 0x0df4, 0x0e01, 0x0e30, 0x0e32, 0x0e33, 0x0e40, 0x0e46, 0x0e4f, 0x0e5b, 0x0e81, 0x0e82, 0x0e84, 0x0e84, 0x0e87, 0x0e88, 0x0e8a, 0x0e8a, 0x0e8d, 0x0e8d, 0x0e94, 0x0e97, 0x0e99, 0x0e9f, 0x0ea1, 0x0ea3, 0x0ea5, 0x0ea5, 0x0ea7, 0x0ea7, 0x0eaa, 0x0eab, 0x0ead, 0x0eb0, 0x0eb2, 0x0eb3, 0x0ebd, 0x0ebd, 0x0ec0, 0x0ec4, 0x0ec6, 0x0ec6, 0x0ed0, 0x0ed9, 0x0edc, 0x0edd, 0x0f00, 0x0f17, 0x0f1a, 0x0f34, 0x0f36, 0x0f36, 0x0f38, 0x0f38, 0x0f3e, 0x0f47, 0x0f49, 0x0f6a, 0x0f7f, 0x0f7f, 0x0f85, 0x0f85, 0x0f88, 0x0f8b, 0x0fbe, 0x0fc5, 0x0fc7, 0x0fcc, 0x0fcf, 0x0fcf, 0x1000, 0x1021, 0x1023, 0x1027, 0x1029, 0x102a, 0x102c, 0x102c, 0x1031, 0x1031, 0x1038, 0x1038, 0x1040, 0x1057, 0x10a0, 0x10c5, 0x10d0, 0x10f8, 0x10fb, 0x10fb, 0x1100, 0x1159, 0x115f, 0x11a2, 0x11a8, 0x11f9, 0x1200, 0x1206, 0x1208, 0x1246, 0x1248, 0x1248, 0x124a, 0x124d, 0x1250, 0x1256, 0x1258, 0x1258, 0x125a, 0x125d, 0x1260, 0x1286, 0x1288, 0x1288, 0x128a, 0x128d, 0x1290, 0x12ae, 0x12b0, 0x12b0, 0x12b2, 0x12b5, 0x12b8, 0x12be, 0x12c0, 0x12c0, 0x12c2, 0x12c5, 0x12c8, 0x12ce, 0x12d0, 0x12d6, 0x12d8, 0x12ee, 0x12f0, 0x130e, 0x1310, 0x1310, 0x1312, 0x1315, 0x1318, 0x131e, 0x1320, 0x1346, 0x1348, 0x135a, 0x1361, 0x137c, 0x13a0, 0x13f4, 0x1401, 0x1676, 0x1681, 0x169a, 0x16a0, 0x16f0, 0x1700, 0x170c, 0x170e, 0x1711, 0x1720, 0x1731, 0x1735, 0x1736, 0x1740, 0x1751, 0x1760, 0x176c, 0x176e, 0x1770, 0x1780, 0x17b6, 0x17be, 0x17c5, 0x17c7, 0x17c8, 0x17d4, 0x17da, 0x17dc, 0x17dc, 0x17e0, 0x17e9, 0x1810, 0x1819, 0x1820, 0x1877, 0x1880, 0x18a8, 0x1e00, 0x1e9b, 0x1ea0, 0x1ef9, 0x1f00, 0x1f15, 0x1f18, 0x1f1d, 0x1f20, 0x1f45, 0x1f48, 0x1f4d, 0x1f50, 0x1f57, 0x1f59, 0x1f59, 0x1f5b, 0x1f5b, 0x1f5d, 0x1f5d, 0x1f5f, 0x1f7d, 0x1f80, 0x1fb4, 0x1fb6, 0x1fbc, 0x1fbe, 0x1fbe, 0x1fc2, 0x1fc4, 0x1fc6, 0x1fcc, 0x1fd0, 0x1fd3, 0x1fd6, 0x1fdb, 0x1fe0, 0x1fec, 0x1ff2, 0x1ff4, 0x1ff6, 0x1ffc, 0x200e, 0x200e, 0x2071, 0x2071, 0x207f, 0x207f, 0x2102, 0x2102, 0x2107, 0x2107, 0x210a, 0x2113, 0x2115, 0x2115, 0x2119, 0x211d, 0x2124, 0x2124, 0x2126, 0x2126, 0x2128, 0x2128, 0x212a, 0x212d, 0x212f, 0x2131, 0x2133, 0x2139, 0x213d, 0x213f, 0x2145, 0x2149, 0x2160, 0x2183, 0x2336, 0x237a, 0x2395, 0x2395, 0x249c, 0x24e9, 0x3005, 0x3007, 0x3021, 0x3029, 0x3031, 0x3035, 0x3038, 0x303c, 0x3041, 0x3096, 0x309d, 0x309f, 0x30a1, 0x30fa, 0x30fc, 0x30ff, 0x3105, 0x312c, 0x3131, 0x318e, 0x3190, 0x31b7, 0x31f0, 0x321c, 0x3220, 0x3243, 0x3260, 0x327b, 0x327f, 0x32b0, 0x32c0, 0x32cb, 0x32d0, 0x32fe, 0x3300, 0x3376, 0x337b, 0x33dd, 0x33e0, 0x33fe, 0x3400, 0x4db5, 0x4e00, 0x9fa5, 0xa000, 0xa48c, 0xac00, 0xd7a3, 0xd800, 0xfa2d, 0xfa30, 0xfa6a, 0xfb00, 0xfb06, 0xfb13, 0xfb17, 0xff21, 0xff3a, 0xff41, 0xff5a, 0xff66, 0xffbe, 0xffc2, 0xffc7, 0xffca, 0xffcf, 0xffd2, 0xffd7, 0xffda, 0xffdc, 0x10300, 0x1031e, 0x10320, 0x10323, 0x10330, 0x1034a, 0x10400, 0x10425, 0x10428, 0x1044d, 0x1d000, 0x1d0f5, 0x1d100, 0x1d126, 0x1d12a, 0x1d166, 0x1d16a, 0x1d172, 0x1d183, 0x1d184, 0x1d18c, 0x1d1a9, 0x1d1ae, 0x1d1dd, 0x1d400, 0x1d454, 0x1d456, 0x1d49c, 0x1d49e, 0x1d49f, 0x1d4a2, 0x1d4a2, 0x1d4a5, 0x1d4a6, 0x1d4a9, 0x1d4ac, 0x1d4ae, 0x1d4b9, 0x1d4bb, 0x1d4bb, 0x1d4bd, 0x1d4c0, 0x1d4c2, 0x1d4c3, 0x1d4c5, 0x1d505, 0x1d507, 0x1d50a, 0x1d50d, 0x1d514, 0x1d516, 0x1d51c, 0x1d51e, 0x1d539, 0x1d53b, 0x1d53e, 0x1d540, 0x1d544, 0x1d546, 0x1d546, 0x1d54a, 0x1d550, 0x1d552, 0x1d6a3, 0x1d6a8, 0x1d7c9, 0x20000, 0x2a6d6, 0x2f800, 0x2fa1d, 0xf0000, 0xffffd, 0x100000, 0x10fffd];
        /* eslint-enable */

        var isBidirectionalL = function isBidirectionalL(character) {
          return inRange(character, bidirectional_l);
        };
        /**
         * non-ASCII space characters [StringPrep, C.1.2] that can be
         * mapped to SPACE (U+0020)
         */


        var mapping2space = isNonASCIISpaceCharacter;
        /**
         * the "commonly mapped to nothing" characters [StringPrep, B.1]
         * that can be mapped to nothing.
         */

        var mapping2nothing = isCommonlyMappedToNothing; // utils

        var getCodePoint = function getCodePoint(character) {
          return character.codePointAt(0);
        };

        var first = function first(x) {
          return x[0];
        };

        var last = function last(x) {
          return x[x.length - 1];
        };
        /**
         * Convert provided string into an array of Unicode Code Points.
         * Based on https://stackoverflow.com/a/21409165/1556249
         * and https://www.npmjs.com/package/code-point-at.
         * @param {string} input
         * @returns {number[]}
         */


        function toCodePoints(input) {
          var codepoints = [];
          var size = input.length;

          for (var i = 0; i < size; i += 1) {
            var before = input.charCodeAt(i);

            if (before >= 0xd800 && before <= 0xdbff && size > i + 1) {
              var next = input.charCodeAt(i + 1);

              if (next >= 0xdc00 && next <= 0xdfff) {
                codepoints.push((before - 0xd800) * 0x400 + next - 0xdc00 + 0x10000);
                i += 1;
                continue;
              }
            }

            codepoints.push(before);
          }

          return codepoints;
        }
        /**
         * SASLprep.
         * @param {string} input
         * @param {Object} opts
         * @param {boolean} opts.allowUnassigned
         * @returns {string}
         */


        function saslprep(input) {
          var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

          if (typeof input !== 'string') {
            throw new TypeError('Expected string.');
          }

          if (input.length === 0) {
            return '';
          } // 1. Map


          var mapped_input = toCodePoints(input) // 1.1 mapping to space
          .map(function (character) {
            return mapping2space(character) ? 0x20 : character;
          }) // 1.2 mapping to nothing
          .filter(function (character) {
            return !mapping2nothing(character);
          }); // 2. Normalize

          var normalized_input = String.fromCodePoint.apply(null, mapped_input).normalize('NFKC');
          var normalized_map = toCodePoints(normalized_input); // 3. Prohibit

          var hasProhibited = normalized_map.some(isProhibitedCharacter);

          if (hasProhibited) {
            throw new Error('Prohibited character, see https://tools.ietf.org/html/rfc4013#section-2.3');
          } // Unassigned Code Points


          if (opts.allowUnassigned !== true) {
            var hasUnassigned = normalized_map.some(isUnassignedCodePoint);

            if (hasUnassigned) {
              throw new Error('Unassigned code point, see https://tools.ietf.org/html/rfc4013#section-2.5');
            }
          } // 4. check bidi


          var hasBidiRAL = normalized_map.some(isBidirectionalRAL);
          var hasBidiL = normalized_map.some(isBidirectionalL); // 4.1 If a string contains any RandALCat character, the string MUST NOT
          // contain any LCat character.

          if (hasBidiRAL && hasBidiL) {
            throw new Error('String must not contain RandALCat and LCat at the same time,' + ' see https://tools.ietf.org/html/rfc3454#section-6');
          }
          /**
           * 4.2 If a string contains any RandALCat character, a RandALCat
           * character MUST be the first character of the string, and a
           * RandALCat character MUST be the last character of the string.
           */


          var isFirstBidiRAL = isBidirectionalRAL(getCodePoint(first(normalized_input)));
          var isLastBidiRAL = isBidirectionalRAL(getCodePoint(last(normalized_input)));

          if (hasBidiRAL && !(isFirstBidiRAL && isLastBidiRAL)) {
            throw new Error('Bidirectional RandALCat character must be the first and the last' + ' character of the string, see https://tools.ietf.org/html/rfc3454#section-6');
          }

          return normalized_input;
        }

        var PDFSecurity = /*#__PURE__*/function () {
          _createClass(PDFSecurity, null, [{
            key: "generateFileID",
            value: function generateFileID() {
              var info = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
              var infoStr = "".concat(info.CreationDate.getTime(), "\n");

              for (var key in info) {
                if (!info.hasOwnProperty(key)) {
                  continue;
                }

                infoStr += "".concat(key, ": ").concat(info[key], "\n");
              }

              return wordArrayToBuffer(_cryptoJs.default.MD5(infoStr));
            }
          }, {
            key: "generateRandomWordArray",
            value: function generateRandomWordArray(bytes) {
              return _cryptoJs.default.lib.WordArray.random(bytes);
            }
          }, {
            key: "create",
            value: function create(document) {
              var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

              if (!options.ownerPassword && !options.userPassword) {
                return null;
              }

              return new PDFSecurity(document, options);
            }
          }]);

          function PDFSecurity(document) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            _classCallCheck(this, PDFSecurity);

            if (!options.ownerPassword && !options.userPassword) {
              throw new Error('None of owner password and user password is defined.');
            }

            this.document = document;

            this._setupEncryption(options);
          }

          _createClass(PDFSecurity, [{
            key: "_setupEncryption",
            value: function _setupEncryption(options) {
              switch (options.pdfVersion) {
                case '1.4':
                case '1.5':
                  this.version = 2;
                  break;

                case '1.6':
                case '1.7':
                  this.version = 4;
                  break;

                case '1.7ext3':
                  this.version = 5;
                  break;

                default:
                  this.version = 1;
                  break;
              }

              var encDict = {
                Filter: 'Standard'
              };

              switch (this.version) {
                case 1:
                case 2:
                case 4:
                  this._setupEncryptionV1V2V4(this.version, encDict, options);

                  break;

                case 5:
                  this._setupEncryptionV5(encDict, options);

                  break;
              }

              this.dictionary = this.document.ref(encDict);
            }
          }, {
            key: "_setupEncryptionV1V2V4",
            value: function _setupEncryptionV1V2V4(v, encDict, options) {
              var r, permissions;

              switch (v) {
                case 1:
                  r = 2;
                  this.keyBits = 40;
                  permissions = getPermissionsR2(options.permissions);
                  break;

                case 2:
                  r = 3;
                  this.keyBits = 128;
                  permissions = getPermissionsR3(options.permissions);
                  break;

                case 4:
                  r = 4;
                  this.keyBits = 128;
                  permissions = getPermissionsR3(options.permissions);
                  break;
              }

              var paddedUserPassword = processPasswordR2R3R4(options.userPassword);
              var paddedOwnerPassword = options.ownerPassword ? processPasswordR2R3R4(options.ownerPassword) : paddedUserPassword;
              var ownerPasswordEntry = getOwnerPasswordR2R3R4(r, this.keyBits, paddedUserPassword, paddedOwnerPassword);
              this.encryptionKey = getEncryptionKeyR2R3R4(r, this.keyBits, this.document._id, paddedUserPassword, ownerPasswordEntry, permissions);
              var userPasswordEntry;

              if (r === 2) {
                userPasswordEntry = getUserPasswordR2(this.encryptionKey);
              } else {
                userPasswordEntry = getUserPasswordR3R4(this.document._id, this.encryptionKey);
              }

              encDict.V = v;

              if (v >= 2) {
                encDict.Length = this.keyBits;
              }

              if (v === 4) {
                encDict.CF = {
                  StdCF: {
                    AuthEvent: 'DocOpen',
                    CFM: 'AESV2',
                    Length: this.keyBits / 8
                  }
                };
                encDict.StmF = 'StdCF';
                encDict.StrF = 'StdCF';
              }

              encDict.R = r;
              encDict.O = wordArrayToBuffer(ownerPasswordEntry);
              encDict.U = wordArrayToBuffer(userPasswordEntry);
              encDict.P = permissions;
            }
          }, {
            key: "_setupEncryptionV5",
            value: function _setupEncryptionV5(encDict, options) {
              this.keyBits = 256;
              var permissions = getPermissionsR3(options);
              var processedUserPassword = processPasswordR5(options.userPassword);
              var processedOwnerPassword = options.ownerPassword ? processPasswordR5(options.ownerPassword) : processedUserPassword;
              this.encryptionKey = getEncryptionKeyR5(PDFSecurity.generateRandomWordArray);
              var userPasswordEntry = getUserPasswordR5(processedUserPassword, PDFSecurity.generateRandomWordArray);

              var userKeySalt = _cryptoJs.default.lib.WordArray.create(userPasswordEntry.words.slice(10, 12), 8);

              var userEncryptionKeyEntry = getUserEncryptionKeyR5(processedUserPassword, userKeySalt, this.encryptionKey);
              var ownerPasswordEntry = getOwnerPasswordR5(processedOwnerPassword, userPasswordEntry, PDFSecurity.generateRandomWordArray);

              var ownerKeySalt = _cryptoJs.default.lib.WordArray.create(ownerPasswordEntry.words.slice(10, 12), 8);

              var ownerEncryptionKeyEntry = getOwnerEncryptionKeyR5(processedOwnerPassword, ownerKeySalt, userPasswordEntry, this.encryptionKey);
              var permsEntry = getEncryptedPermissionsR5(permissions, this.encryptionKey, PDFSecurity.generateRandomWordArray);
              encDict.V = 5;
              encDict.Length = this.keyBits;
              encDict.CF = {
                StdCF: {
                  AuthEvent: 'DocOpen',
                  CFM: 'AESV3',
                  Length: this.keyBits / 8
                }
              };
              encDict.StmF = 'StdCF';
              encDict.StrF = 'StdCF';
              encDict.R = 5;
              encDict.O = wordArrayToBuffer(ownerPasswordEntry);
              encDict.OE = wordArrayToBuffer(ownerEncryptionKeyEntry);
              encDict.U = wordArrayToBuffer(userPasswordEntry);
              encDict.UE = wordArrayToBuffer(userEncryptionKeyEntry);
              encDict.P = permissions;
              encDict.Perms = wordArrayToBuffer(permsEntry);
            }
          }, {
            key: "getEncryptFn",
            value: function getEncryptFn(obj, gen) {
              var digest;

              if (this.version < 5) {
                digest = this.encryptionKey.clone().concat(_cryptoJs.default.lib.WordArray.create([(obj & 0xff) << 24 | (obj & 0xff00) << 8 | obj >> 8 & 0xff00 | gen & 0xff, (gen & 0xff00) << 16], 5));
              }

              if (this.version === 1 || this.version === 2) {
                var _key = _cryptoJs.default.MD5(digest);

                _key.sigBytes = Math.min(16, this.keyBits / 8 + 5);
                return function (buffer) {
                  return wordArrayToBuffer(_cryptoJs.default.RC4.encrypt(_cryptoJs.default.lib.WordArray.create(buffer), _key).ciphertext);
                };
              }

              var key;

              if (this.version === 4) {
                key = _cryptoJs.default.MD5(digest.concat(_cryptoJs.default.lib.WordArray.create([0x73416c54], 4)));
              } else {
                key = this.encryptionKey;
              }

              var iv = PDFSecurity.generateRandomWordArray(16);
              var options = {
                mode: _cryptoJs.default.mode.CBC,
                padding: _cryptoJs.default.pad.Pkcs7,
                iv: iv
              };
              return function (buffer) {
                return wordArrayToBuffer(iv.clone().concat(_cryptoJs.default.AES.encrypt(_cryptoJs.default.lib.WordArray.create(buffer), key, options).ciphertext));
              };
            }
          }, {
            key: "end",
            value: function end() {
              this.dictionary.end();
            }
          }]);

          return PDFSecurity;
        }();

        function getPermissionsR2() {
          var permissionObject = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
          var permissions = 0xffffffc0 >> 0;

          if (permissionObject.printing) {
            permissions |= 4;
          }

          if (permissionObject.modifying) {
            permissions |= 8;
          }

          if (permissionObject.copying) {
            permissions |= 16;
          }

          if (permissionObject.annotating) {
            permissions |= 32;
          }

          return permissions;
        }

        function getPermissionsR3() {
          var permissionObject = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
          var permissions = 0xfffff0c0 >> 0;

          if (permissionObject.printing === 'lowResolution') {
            permissions |= 4;
          }

          if (permissionObject.printing === 'highResolution') {
            permissions |= 2052;
          }

          if (permissionObject.modifying) {
            permissions |= 8;
          }

          if (permissionObject.copying) {
            permissions |= 16;
          }

          if (permissionObject.annotating) {
            permissions |= 32;
          }

          if (permissionObject.fillingForms) {
            permissions |= 256;
          }

          if (permissionObject.contentAccessibility) {
            permissions |= 512;
          }

          if (permissionObject.documentAssembly) {
            permissions |= 1024;
          }

          return permissions;
        }

        function getUserPasswordR2(encryptionKey) {
          return _cryptoJs.default.RC4.encrypt(processPasswordR2R3R4(), encryptionKey).ciphertext;
        }

        function getUserPasswordR3R4(documentId, encryptionKey) {
          var key = encryptionKey.clone();

          var cipher = _cryptoJs.default.MD5(processPasswordR2R3R4().concat(_cryptoJs.default.lib.WordArray.create(documentId)));

          for (var i = 0; i < 20; i++) {
            var xorRound = Math.ceil(key.sigBytes / 4);

            for (var j = 0; j < xorRound; j++) {
              key.words[j] = encryptionKey.words[j] ^ (i | i << 8 | i << 16 | i << 24);
            }

            cipher = _cryptoJs.default.RC4.encrypt(cipher, key).ciphertext;
          }

          return cipher.concat(_cryptoJs.default.lib.WordArray.create(null, 16));
        }

        function getOwnerPasswordR2R3R4(r, keyBits, paddedUserPassword, paddedOwnerPassword) {
          var digest = paddedOwnerPassword;
          var round = r >= 3 ? 51 : 1;

          for (var i = 0; i < round; i++) {
            digest = _cryptoJs.default.MD5(digest);
          }

          var key = digest.clone();
          key.sigBytes = keyBits / 8;
          var cipher = paddedUserPassword;
          round = r >= 3 ? 20 : 1;

          for (var _i = 0; _i < round; _i++) {
            var xorRound = Math.ceil(key.sigBytes / 4);

            for (var j = 0; j < xorRound; j++) {
              key.words[j] = digest.words[j] ^ (_i | _i << 8 | _i << 16 | _i << 24);
            }

            cipher = _cryptoJs.default.RC4.encrypt(cipher, key).ciphertext;
          }

          return cipher;
        }

        function getEncryptionKeyR2R3R4(r, keyBits, documentId, paddedUserPassword, ownerPasswordEntry, permissions) {
          var key = paddedUserPassword.clone().concat(ownerPasswordEntry).concat(_cryptoJs.default.lib.WordArray.create([lsbFirstWord(permissions)], 4)).concat(_cryptoJs.default.lib.WordArray.create(documentId));
          var round = r >= 3 ? 51 : 1;

          for (var i = 0; i < round; i++) {
            key = _cryptoJs.default.MD5(key);
            key.sigBytes = keyBits / 8;
          }

          return key;
        }

        function getUserPasswordR5(processedUserPassword, generateRandomWordArray) {
          var validationSalt = generateRandomWordArray(8);
          var keySalt = generateRandomWordArray(8);
          return _cryptoJs.default.SHA256(processedUserPassword.clone().concat(validationSalt)).concat(validationSalt).concat(keySalt);
        }

        function getUserEncryptionKeyR5(processedUserPassword, userKeySalt, encryptionKey) {
          var key = _cryptoJs.default.SHA256(processedUserPassword.clone().concat(userKeySalt));

          var options = {
            mode: _cryptoJs.default.mode.CBC,
            padding: _cryptoJs.default.pad.NoPadding,
            iv: _cryptoJs.default.lib.WordArray.create(null, 16)
          };
          return _cryptoJs.default.AES.encrypt(encryptionKey, key, options).ciphertext;
        }

        function getOwnerPasswordR5(processedOwnerPassword, userPasswordEntry, generateRandomWordArray) {
          var validationSalt = generateRandomWordArray(8);
          var keySalt = generateRandomWordArray(8);
          return _cryptoJs.default.SHA256(processedOwnerPassword.clone().concat(validationSalt).concat(userPasswordEntry)).concat(validationSalt).concat(keySalt);
        }

        function getOwnerEncryptionKeyR5(processedOwnerPassword, ownerKeySalt, userPasswordEntry, encryptionKey) {
          var key = _cryptoJs.default.SHA256(processedOwnerPassword.clone().concat(ownerKeySalt).concat(userPasswordEntry));

          var options = {
            mode: _cryptoJs.default.mode.CBC,
            padding: _cryptoJs.default.pad.NoPadding,
            iv: _cryptoJs.default.lib.WordArray.create(null, 16)
          };
          return _cryptoJs.default.AES.encrypt(encryptionKey, key, options).ciphertext;
        }

        function getEncryptionKeyR5(generateRandomWordArray) {
          return generateRandomWordArray(32);
        }

        function getEncryptedPermissionsR5(permissions, encryptionKey, generateRandomWordArray) {
          var cipher = _cryptoJs.default.lib.WordArray.create([lsbFirstWord(permissions), 0xffffffff, 0x54616462], 12).concat(generateRandomWordArray(4));

          var options = {
            mode: _cryptoJs.default.mode.ECB,
            padding: _cryptoJs.default.pad.NoPadding
          };
          return _cryptoJs.default.AES.encrypt(cipher, encryptionKey, options).ciphertext;
        }

        function processPasswordR2R3R4() {
          var password = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
          var out = new Buffer(32);
          var length = password.length;
          var index = 0;

          while (index < length && index < 32) {
            var code = password.charCodeAt(index);

            if (code > 0xff) {
              throw new Error('Password contains one or more invalid characters.');
            }

            out[index] = code;
            index++;
          }

          while (index < 32) {
            out[index] = PASSWORD_PADDING[index - length];
            index++;
          }

          return _cryptoJs.default.lib.WordArray.create(out);
        }

        function processPasswordR5() {
          var password = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
          password = unescape(encodeURIComponent(saslprep(password)));
          var length = Math.min(127, password.length);
          var out = new Buffer(length);

          for (var i = 0; i < length; i++) {
            out[i] = password.charCodeAt(i);
          }

          return _cryptoJs.default.lib.WordArray.create(out);
        }

        function lsbFirstWord(data) {
          return (data & 0xff) << 24 | (data & 0xff00) << 8 | data >> 8 & 0xff00 | data >> 24 & 0xff;
        }

        function wordArrayToBuffer(wordArray) {
          var byteArray = [];

          for (var i = 0; i < wordArray.sigBytes; i++) {
            byteArray.push(wordArray.words[Math.floor(i / 4)] >> 8 * (3 - i % 4) & 0xff);
          }

          return Buffer.from(byteArray);
        }

        var PASSWORD_PADDING = [0x28, 0xbf, 0x4e, 0x5e, 0x4e, 0x75, 0x8a, 0x41, 0x64, 0x00, 0x4e, 0x56, 0xff, 0xfa, 0x01, 0x08, 0x2e, 0x2e, 0x00, 0xb6, 0xd0, 0x68, 0x3e, 0x80, 0x2f, 0x0c, 0xa9, 0xfe, 0x64, 0x53, 0x69, 0x7a];
        var number = PDFObject.number;

        var PDFGradient = /*#__PURE__*/function () {
          function PDFGradient(doc) {
            _classCallCheck(this, PDFGradient);

            this.doc = doc;
            this.stops = [];
            this.embedded = false;
            this.transform = [1, 0, 0, 1, 0, 0];
          }

          _createClass(PDFGradient, [{
            key: "stop",
            value: function stop(pos, color, opacity) {
              if (opacity == null) {
                opacity = 1;
              }

              color = this.doc._normalizeColor(color);

              if (this.stops.length === 0) {
                if (color.length === 3) {
                  this._colorSpace = 'DeviceRGB';
                } else if (color.length === 4) {
                  this._colorSpace = 'DeviceCMYK';
                } else if (color.length === 1) {
                  this._colorSpace = 'DeviceGray';
                } else {
                  throw new Error('Unknown color space');
                }
              } else if (this._colorSpace === 'DeviceRGB' && color.length !== 3 || this._colorSpace === 'DeviceCMYK' && color.length !== 4 || this._colorSpace === 'DeviceGray' && color.length !== 1) {
                throw new Error('All gradient stops must use the same color space');
              }

              opacity = Math.max(0, Math.min(1, opacity));
              this.stops.push([pos, color, opacity]);
              return this;
            }
          }, {
            key: "setTransform",
            value: function setTransform(m11, m12, m21, m22, dx, dy) {
              this.transform = [m11, m12, m21, m22, dx, dy];
              return this;
            }
          }, {
            key: "embed",
            value: function embed(m) {
              var fn;
              var stopsLength = this.stops.length;

              if (stopsLength === 0) {
                return;
              }

              this.embedded = true;
              this.matrix = m; // if the last stop comes before 100%, add a copy at 100%

              var last = this.stops[stopsLength - 1];

              if (last[0] < 1) {
                this.stops.push([1, last[1], last[2]]);
              }

              var bounds = [];
              var encode = [];
              var stops = [];

              for (var i = 0; i < stopsLength - 1; i++) {
                encode.push(0, 1);

                if (i + 2 !== stopsLength) {
                  bounds.push(this.stops[i + 1][0]);
                }

                fn = this.doc.ref({
                  FunctionType: 2,
                  Domain: [0, 1],
                  C0: this.stops[i + 0][1],
                  C1: this.stops[i + 1][1],
                  N: 1
                });
                stops.push(fn);
                fn.end();
              } // if there are only two stops, we don't need a stitching function


              if (stopsLength === 1) {
                fn = stops[0];
              } else {
                fn = this.doc.ref({
                  FunctionType: 3,
                  // stitching function
                  Domain: [0, 1],
                  Functions: stops,
                  Bounds: bounds,
                  Encode: encode
                });
                fn.end();
              }

              this.id = "Sh".concat(++this.doc._gradCount);
              var shader = this.shader(fn);
              shader.end();
              var pattern = this.doc.ref({
                Type: 'Pattern',
                PatternType: 2,
                Shading: shader,
                Matrix: this.matrix.map(number)
              });
              pattern.end();

              if (this.stops.some(function (stop) {
                return stop[2] < 1;
              })) {
                var grad = this.opacityGradient();
                grad._colorSpace = 'DeviceGray';
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                  for (var _iterator = this.stops[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var stop = _step.value;
                    grad.stop(stop[0], [stop[2]]);
                  }
                } catch (err) {
                  _didIteratorError = true;
                  _iteratorError = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion && _iterator.return != null) {
                      _iterator.return();
                    }
                  } finally {
                    if (_didIteratorError) {
                      throw _iteratorError;
                    }
                  }
                }

                grad = grad.embed(this.matrix);
                var pageBBox = [0, 0, this.doc.page.width, this.doc.page.height];
                var form = this.doc.ref({
                  Type: 'XObject',
                  Subtype: 'Form',
                  FormType: 1,
                  BBox: pageBBox,
                  Group: {
                    Type: 'Group',
                    S: 'Transparency',
                    CS: 'DeviceGray'
                  },
                  Resources: {
                    ProcSet: ['PDF', 'Text', 'ImageB', 'ImageC', 'ImageI'],
                    Pattern: {
                      Sh1: grad
                    }
                  }
                });
                form.write('/Pattern cs /Sh1 scn');
                form.end("".concat(pageBBox.join(' '), " re f"));
                var gstate = this.doc.ref({
                  Type: 'ExtGState',
                  SMask: {
                    Type: 'Mask',
                    S: 'Luminosity',
                    G: form
                  }
                });
                gstate.end();
                var opacityPattern = this.doc.ref({
                  Type: 'Pattern',
                  PatternType: 1,
                  PaintType: 1,
                  TilingType: 2,
                  BBox: pageBBox,
                  XStep: pageBBox[2],
                  YStep: pageBBox[3],
                  Resources: {
                    ProcSet: ['PDF', 'Text', 'ImageB', 'ImageC', 'ImageI'],
                    Pattern: {
                      Sh1: pattern
                    },
                    ExtGState: {
                      Gs1: gstate
                    }
                  }
                });
                opacityPattern.write('/Gs1 gs /Pattern cs /Sh1 scn');
                opacityPattern.end("".concat(pageBBox.join(' '), " re f"));
                this.doc.page.patterns[this.id] = opacityPattern;
              } else {
                this.doc.page.patterns[this.id] = pattern;
              }

              return pattern;
            }
          }, {
            key: "apply",
            value: function apply(op) {
              // apply gradient transform to existing document ctm
              var _this$doc$_ctm = _slicedToArray(this.doc._ctm, 6),
                  m0 = _this$doc$_ctm[0],
                  m1 = _this$doc$_ctm[1],
                  m2 = _this$doc$_ctm[2],
                  m3 = _this$doc$_ctm[3],
                  m4 = _this$doc$_ctm[4],
                  m5 = _this$doc$_ctm[5];

              var _this$transform = _slicedToArray(this.transform, 6),
                  m11 = _this$transform[0],
                  m12 = _this$transform[1],
                  m21 = _this$transform[2],
                  m22 = _this$transform[3],
                  dx = _this$transform[4],
                  dy = _this$transform[5];

              var m = [m0 * m11 + m2 * m12, m1 * m11 + m3 * m12, m0 * m21 + m2 * m22, m1 * m21 + m3 * m22, m0 * dx + m2 * dy + m4, m1 * dx + m3 * dy + m5];

              if (!this.embedded || m.join(' ') !== this.matrix.join(' ')) {
                this.embed(m);
              }

              return this.doc.addContent("/".concat(this.id, " ").concat(op));
            }
          }]);

          return PDFGradient;
        }();

        var PDFLinearGradient = /*#__PURE__*/function (_PDFGradient) {
          _inherits(PDFLinearGradient, _PDFGradient);

          function PDFLinearGradient(doc, x1, y1, x2, y2) {
            var _this;

            _classCallCheck(this, PDFLinearGradient);

            _this = _possibleConstructorReturn(this, _getPrototypeOf(PDFLinearGradient).call(this, doc));
            _this.x1 = x1;
            _this.y1 = y1;
            _this.x2 = x2;
            _this.y2 = y2;
            return _this;
          }

          _createClass(PDFLinearGradient, [{
            key: "shader",
            value: function shader(fn) {
              return this.doc.ref({
                ShadingType: 2,
                ColorSpace: this._colorSpace,
                Coords: [this.x1, this.y1, this.x2, this.y2],
                Function: fn,
                Extend: [true, true]
              });
            }
          }, {
            key: "opacityGradient",
            value: function opacityGradient() {
              return new PDFLinearGradient(this.doc, this.x1, this.y1, this.x2, this.y2);
            }
          }]);

          return PDFLinearGradient;
        }(PDFGradient);

        var PDFRadialGradient = /*#__PURE__*/function (_PDFGradient2) {
          _inherits(PDFRadialGradient, _PDFGradient2);

          function PDFRadialGradient(doc, x1, y1, r1, x2, y2, r2) {
            var _this2;

            _classCallCheck(this, PDFRadialGradient);

            _this2 = _possibleConstructorReturn(this, _getPrototypeOf(PDFRadialGradient).call(this, doc));
            _this2.doc = doc;
            _this2.x1 = x1;
            _this2.y1 = y1;
            _this2.r1 = r1;
            _this2.x2 = x2;
            _this2.y2 = y2;
            _this2.r2 = r2;
            return _this2;
          }

          _createClass(PDFRadialGradient, [{
            key: "shader",
            value: function shader(fn) {
              return this.doc.ref({
                ShadingType: 3,
                ColorSpace: this._colorSpace,
                Coords: [this.x1, this.y1, this.r1, this.x2, this.y2, this.r2],
                Function: fn,
                Extend: [true, true]
              });
            }
          }, {
            key: "opacityGradient",
            value: function opacityGradient() {
              return new PDFRadialGradient(this.doc, this.x1, this.y1, this.r1, this.x2, this.y2, this.r2);
            }
          }]);

          return PDFRadialGradient;
        }(PDFGradient);

        var Gradient = {
          PDFGradient: PDFGradient,
          PDFLinearGradient: PDFLinearGradient,
          PDFRadialGradient: PDFRadialGradient
        };
        var PDFGradient$1 = Gradient.PDFGradient,
            PDFLinearGradient$1 = Gradient.PDFLinearGradient,
            PDFRadialGradient$1 = Gradient.PDFRadialGradient;
        var ColorMixin = {
          initColor: function initColor() {
            // The opacity dictionaries
            this._opacityRegistry = {};
            this._opacityCount = 0;
            return this._gradCount = 0;
          },
          _normalizeColor: function _normalizeColor(color) {
            if (color instanceof PDFGradient$1) {
              return color;
            }

            if (typeof color === 'string') {
              if (color.charAt(0) === '#') {
                if (color.length === 4) {
                  color = color.replace(/#([0-9A-F])([0-9A-F])([0-9A-F])/i, '#$1$1$2$2$3$3');
                }

                var hex = parseInt(color.slice(1), 16);
                color = [hex >> 16, hex >> 8 & 0xff, hex & 0xff];
              } else if (namedColors[color]) {
                color = namedColors[color];
              }
            }

            if (Array.isArray(color)) {
              // RGB
              if (color.length === 3) {
                color = color.map(function (part) {
                  return part / 255;
                }); // CMYK
              } else if (color.length === 4) {
                color = color.map(function (part) {
                  return part / 100;
                });
              }

              return color;
            }

            return null;
          },
          _setColor: function _setColor(color, stroke) {
            color = this._normalizeColor(color);

            if (!color) {
              return false;
            }

            var op = stroke ? 'SCN' : 'scn';

            if (color instanceof PDFGradient$1) {
              this._setColorSpace('Pattern', stroke);

              color.apply(op);
            } else {
              var space = color.length === 4 ? 'DeviceCMYK' : 'DeviceRGB';

              this._setColorSpace(space, stroke);

              color = color.join(' ');
              this.addContent("".concat(color, " ").concat(op));
            }

            return true;
          },
          _setColorSpace: function _setColorSpace(space, stroke) {
            var op = stroke ? 'CS' : 'cs';
            return this.addContent("/".concat(space, " ").concat(op));
          },
          fillColor: function fillColor(color, opacity) {
            var set = this._setColor(color, false);

            if (set) {
              this.fillOpacity(opacity);
            } // save this for text wrapper, which needs to reset
            // the fill color on new pages


            this._fillColor = [color, opacity];
            return this;
          },
          strokeColor: function strokeColor(color, opacity) {
            var set = this._setColor(color, true);

            if (set) {
              this.strokeOpacity(opacity);
            }

            return this;
          },
          opacity: function opacity(_opacity) {
            this._doOpacity(_opacity, _opacity);

            return this;
          },
          fillOpacity: function fillOpacity(opacity) {
            this._doOpacity(opacity, null);

            return this;
          },
          strokeOpacity: function strokeOpacity(opacity) {
            this._doOpacity(null, opacity);

            return this;
          },
          _doOpacity: function _doOpacity(fillOpacity, strokeOpacity) {
            var dictionary, name;

            if (fillOpacity == null && strokeOpacity == null) {
              return;
            }

            if (fillOpacity != null) {
              fillOpacity = Math.max(0, Math.min(1, fillOpacity));
            }

            if (strokeOpacity != null) {
              strokeOpacity = Math.max(0, Math.min(1, strokeOpacity));
            }

            var key = "".concat(fillOpacity, "_").concat(strokeOpacity);

            if (this._opacityRegistry[key]) {
              var _this$_opacityRegistr = _slicedToArray(this._opacityRegistry[key], 2);

              dictionary = _this$_opacityRegistr[0];
              name = _this$_opacityRegistr[1];
            } else {
              dictionary = {
                Type: 'ExtGState'
              };

              if (fillOpacity != null) {
                dictionary.ca = fillOpacity;
              }

              if (strokeOpacity != null) {
                dictionary.CA = strokeOpacity;
              }

              dictionary = this.ref(dictionary);
              dictionary.end();
              var id = ++this._opacityCount;
              name = "Gs".concat(id);
              this._opacityRegistry[key] = [dictionary, name];
            }

            this.page.ext_gstates[name] = dictionary;
            return this.addContent("/".concat(name, " gs"));
          },
          linearGradient: function linearGradient(x1, y1, x2, y2) {
            return new PDFLinearGradient$1(this, x1, y1, x2, y2);
          },
          radialGradient: function radialGradient(x1, y1, r1, x2, y2, r2) {
            return new PDFRadialGradient$1(this, x1, y1, r1, x2, y2, r2);
          }
        };
        var namedColors = {
          aliceblue: [240, 248, 255],
          antiquewhite: [250, 235, 215],
          aqua: [0, 255, 255],
          aquamarine: [127, 255, 212],
          azure: [240, 255, 255],
          beige: [245, 245, 220],
          bisque: [255, 228, 196],
          black: [0, 0, 0],
          blanchedalmond: [255, 235, 205],
          blue: [0, 0, 255],
          blueviolet: [138, 43, 226],
          brown: [165, 42, 42],
          burlywood: [222, 184, 135],
          cadetblue: [95, 158, 160],
          chartreuse: [127, 255, 0],
          chocolate: [210, 105, 30],
          coral: [255, 127, 80],
          cornflowerblue: [100, 149, 237],
          cornsilk: [255, 248, 220],
          crimson: [220, 20, 60],
          cyan: [0, 255, 255],
          darkblue: [0, 0, 139],
          darkcyan: [0, 139, 139],
          darkgoldenrod: [184, 134, 11],
          darkgray: [169, 169, 169],
          darkgreen: [0, 100, 0],
          darkgrey: [169, 169, 169],
          darkkhaki: [189, 183, 107],
          darkmagenta: [139, 0, 139],
          darkolivegreen: [85, 107, 47],
          darkorange: [255, 140, 0],
          darkorchid: [153, 50, 204],
          darkred: [139, 0, 0],
          darksalmon: [233, 150, 122],
          darkseagreen: [143, 188, 143],
          darkslateblue: [72, 61, 139],
          darkslategray: [47, 79, 79],
          darkslategrey: [47, 79, 79],
          darkturquoise: [0, 206, 209],
          darkviolet: [148, 0, 211],
          deeppink: [255, 20, 147],
          deepskyblue: [0, 191, 255],
          dimgray: [105, 105, 105],
          dimgrey: [105, 105, 105],
          dodgerblue: [30, 144, 255],
          firebrick: [178, 34, 34],
          floralwhite: [255, 250, 240],
          forestgreen: [34, 139, 34],
          fuchsia: [255, 0, 255],
          gainsboro: [220, 220, 220],
          ghostwhite: [248, 248, 255],
          gold: [255, 215, 0],
          goldenrod: [218, 165, 32],
          gray: [128, 128, 128],
          grey: [128, 128, 128],
          green: [0, 128, 0],
          greenyellow: [173, 255, 47],
          honeydew: [240, 255, 240],
          hotpink: [255, 105, 180],
          indianred: [205, 92, 92],
          indigo: [75, 0, 130],
          ivory: [255, 255, 240],
          khaki: [240, 230, 140],
          lavender: [230, 230, 250],
          lavenderblush: [255, 240, 245],
          lawngreen: [124, 252, 0],
          lemonchiffon: [255, 250, 205],
          lightblue: [173, 216, 230],
          lightcoral: [240, 128, 128],
          lightcyan: [224, 255, 255],
          lightgoldenrodyellow: [250, 250, 210],
          lightgray: [211, 211, 211],
          lightgreen: [144, 238, 144],
          lightgrey: [211, 211, 211],
          lightpink: [255, 182, 193],
          lightsalmon: [255, 160, 122],
          lightseagreen: [32, 178, 170],
          lightskyblue: [135, 206, 250],
          lightslategray: [119, 136, 153],
          lightslategrey: [119, 136, 153],
          lightsteelblue: [176, 196, 222],
          lightyellow: [255, 255, 224],
          lime: [0, 255, 0],
          limegreen: [50, 205, 50],
          linen: [250, 240, 230],
          magenta: [255, 0, 255],
          maroon: [128, 0, 0],
          mediumaquamarine: [102, 205, 170],
          mediumblue: [0, 0, 205],
          mediumorchid: [186, 85, 211],
          mediumpurple: [147, 112, 219],
          mediumseagreen: [60, 179, 113],
          mediumslateblue: [123, 104, 238],
          mediumspringgreen: [0, 250, 154],
          mediumturquoise: [72, 209, 204],
          mediumvioletred: [199, 21, 133],
          midnightblue: [25, 25, 112],
          mintcream: [245, 255, 250],
          mistyrose: [255, 228, 225],
          moccasin: [255, 228, 181],
          navajowhite: [255, 222, 173],
          navy: [0, 0, 128],
          oldlace: [253, 245, 230],
          olive: [128, 128, 0],
          olivedrab: [107, 142, 35],
          orange: [255, 165, 0],
          orangered: [255, 69, 0],
          orchid: [218, 112, 214],
          palegoldenrod: [238, 232, 170],
          palegreen: [152, 251, 152],
          paleturquoise: [175, 238, 238],
          palevioletred: [219, 112, 147],
          papayawhip: [255, 239, 213],
          peachpuff: [255, 218, 185],
          peru: [205, 133, 63],
          pink: [255, 192, 203],
          plum: [221, 160, 221],
          powderblue: [176, 224, 230],
          purple: [128, 0, 128],
          red: [255, 0, 0],
          rosybrown: [188, 143, 143],
          royalblue: [65, 105, 225],
          saddlebrown: [139, 69, 19],
          salmon: [250, 128, 114],
          sandybrown: [244, 164, 96],
          seagreen: [46, 139, 87],
          seashell: [255, 245, 238],
          sienna: [160, 82, 45],
          silver: [192, 192, 192],
          skyblue: [135, 206, 235],
          slateblue: [106, 90, 205],
          slategray: [112, 128, 144],
          slategrey: [112, 128, 144],
          snow: [255, 250, 250],
          springgreen: [0, 255, 127],
          steelblue: [70, 130, 180],
          tan: [210, 180, 140],
          teal: [0, 128, 128],
          thistle: [216, 191, 216],
          tomato: [255, 99, 71],
          turquoise: [64, 224, 208],
          violet: [238, 130, 238],
          wheat: [245, 222, 179],
          white: [255, 255, 255],
          whitesmoke: [245, 245, 245],
          yellow: [255, 255, 0],
          yellowgreen: [154, 205, 50]
        };
        var cx, cy, px, py, sx, sy;
        cx = cy = px = py = sx = sy = 0;
        var parameters = {
          A: 7,
          a: 7,
          C: 6,
          c: 6,
          H: 1,
          h: 1,
          L: 2,
          l: 2,
          M: 2,
          m: 2,
          Q: 4,
          q: 4,
          S: 4,
          s: 4,
          T: 2,
          t: 2,
          V: 1,
          v: 1,
          Z: 0,
          z: 0
        };

        var parse = function parse(path) {
          var cmd;
          var ret = [];
          var args = [];
          var curArg = '';
          var foundDecimal = false;
          var params = 0;
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = path[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var c = _step.value;

              if (parameters[c] != null) {
                params = parameters[c];

                if (cmd) {
                  // save existing command
                  if (curArg.length > 0) {
                    args[args.length] = +curArg;
                  }

                  ret[ret.length] = {
                    cmd: cmd,
                    args: args
                  };
                  args = [];
                  curArg = '';
                  foundDecimal = false;
                }

                cmd = c;
              } else if ([' ', ','].includes(c) || c === '-' && curArg.length > 0 && curArg[curArg.length - 1] !== 'e' || c === '.' && foundDecimal) {
                if (curArg.length === 0) {
                  continue;
                }

                if (args.length === params) {
                  // handle reused commands
                  ret[ret.length] = {
                    cmd: cmd,
                    args: args
                  };
                  args = [+curArg]; // handle assumed commands

                  if (cmd === 'M') {
                    cmd = 'L';
                  }

                  if (cmd === 'm') {
                    cmd = 'l';
                  }
                } else {
                  args[args.length] = +curArg;
                }

                foundDecimal = c === '.'; // fix for negative numbers or repeated decimals with no delimeter between commands

                curArg = ['-', '.'].includes(c) ? c : '';
              } else {
                curArg += c;

                if (c === '.') {
                  foundDecimal = true;
                }
              }
            } // add the last command

          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }

          if (curArg.length > 0) {
            if (args.length === params) {
              // handle reused commands
              ret[ret.length] = {
                cmd: cmd,
                args: args
              };
              args = [+curArg]; // handle assumed commands

              if (cmd === 'M') {
                cmd = 'L';
              }

              if (cmd === 'm') {
                cmd = 'l';
              }
            } else {
              args[args.length] = +curArg;
            }
          }

          ret[ret.length] = {
            cmd: cmd,
            args: args
          };
          return ret;
        };

        var _apply = function apply(commands, doc) {
          // current point, control point, and subpath starting point
          cx = cy = px = py = sx = sy = 0; // run the commands

          for (var i = 0; i < commands.length; i++) {
            var c = commands[i];

            if (typeof runners[c.cmd] === 'function') {
              runners[c.cmd](doc, c.args);
            }
          }
        };

        var runners = {
          M: function M(doc, a) {
            cx = a[0];
            cy = a[1];
            px = py = null;
            sx = cx;
            sy = cy;
            return doc.moveTo(cx, cy);
          },
          m: function m(doc, a) {
            cx += a[0];
            cy += a[1];
            px = py = null;
            sx = cx;
            sy = cy;
            return doc.moveTo(cx, cy);
          },
          C: function C(doc, a) {
            cx = a[4];
            cy = a[5];
            px = a[2];
            py = a[3];
            return doc.bezierCurveTo.apply(doc, _toConsumableArray(a));
          },
          c: function c(doc, a) {
            doc.bezierCurveTo(a[0] + cx, a[1] + cy, a[2] + cx, a[3] + cy, a[4] + cx, a[5] + cy);
            px = cx + a[2];
            py = cy + a[3];
            cx += a[4];
            return cy += a[5];
          },
          S: function S(doc, a) {
            if (px === null) {
              px = cx;
              py = cy;
            }

            doc.bezierCurveTo(cx - (px - cx), cy - (py - cy), a[0], a[1], a[2], a[3]);
            px = a[0];
            py = a[1];
            cx = a[2];
            return cy = a[3];
          },
          s: function s(doc, a) {
            if (px === null) {
              px = cx;
              py = cy;
            }

            doc.bezierCurveTo(cx - (px - cx), cy - (py - cy), cx + a[0], cy + a[1], cx + a[2], cy + a[3]);
            px = cx + a[0];
            py = cy + a[1];
            cx += a[2];
            return cy += a[3];
          },
          Q: function Q(doc, a) {
            px = a[0];
            py = a[1];
            cx = a[2];
            cy = a[3];
            return doc.quadraticCurveTo(a[0], a[1], cx, cy);
          },
          q: function q(doc, a) {
            doc.quadraticCurveTo(a[0] + cx, a[1] + cy, a[2] + cx, a[3] + cy);
            px = cx + a[0];
            py = cy + a[1];
            cx += a[2];
            return cy += a[3];
          },
          T: function T(doc, a) {
            if (px === null) {
              px = cx;
              py = cy;
            } else {
              px = cx - (px - cx);
              py = cy - (py - cy);
            }

            doc.quadraticCurveTo(px, py, a[0], a[1]);
            px = cx - (px - cx);
            py = cy - (py - cy);
            cx = a[0];
            return cy = a[1];
          },
          t: function t(doc, a) {
            if (px === null) {
              px = cx;
              py = cy;
            } else {
              px = cx - (px - cx);
              py = cy - (py - cy);
            }

            doc.quadraticCurveTo(px, py, cx + a[0], cy + a[1]);
            cx += a[0];
            return cy += a[1];
          },
          A: function A(doc, a) {
            solveArc(doc, cx, cy, a);
            cx = a[5];
            return cy = a[6];
          },
          a: function a(doc, _a) {
            _a[5] += cx;
            _a[6] += cy;
            solveArc(doc, cx, cy, _a);
            cx = _a[5];
            return cy = _a[6];
          },
          L: function L(doc, a) {
            cx = a[0];
            cy = a[1];
            px = py = null;
            return doc.lineTo(cx, cy);
          },
          l: function l(doc, a) {
            cx += a[0];
            cy += a[1];
            px = py = null;
            return doc.lineTo(cx, cy);
          },
          H: function H(doc, a) {
            cx = a[0];
            px = py = null;
            return doc.lineTo(cx, cy);
          },
          h: function h(doc, a) {
            cx += a[0];
            px = py = null;
            return doc.lineTo(cx, cy);
          },
          V: function V(doc, a) {
            cy = a[0];
            px = py = null;
            return doc.lineTo(cx, cy);
          },
          v: function v(doc, a) {
            cy += a[0];
            px = py = null;
            return doc.lineTo(cx, cy);
          },
          Z: function Z(doc) {
            doc.closePath();
            cx = sx;
            return cy = sy;
          },
          z: function z(doc) {
            doc.closePath();
            cx = sx;
            return cy = sy;
          }
        };

        var solveArc = function solveArc(doc, x, y, coords) {
          var _coords = _slicedToArray(coords, 7),
              rx = _coords[0],
              ry = _coords[1],
              rot = _coords[2],
              large = _coords[3],
              sweep = _coords[4],
              ex = _coords[5],
              ey = _coords[6];

          var segs = arcToSegments(ex, ey, rx, ry, large, sweep, rot, x, y);
          var _iteratorNormalCompletion2 = true;
          var _didIteratorError2 = false;
          var _iteratorError2 = undefined;

          try {
            for (var _iterator2 = segs[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              var seg = _step2.value;
              var bez = segmentToBezier.apply(void 0, _toConsumableArray(seg));
              doc.bezierCurveTo.apply(doc, _toConsumableArray(bez));
            }
          } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                _iterator2.return();
              }
            } finally {
              if (_didIteratorError2) {
                throw _iteratorError2;
              }
            }
          }
        }; // from Inkscape svgtopdf, thanks!


        var arcToSegments = function arcToSegments(x, y, rx, ry, large, sweep, rotateX, ox, oy) {
          var th = rotateX * (Math.PI / 180);
          var sin_th = Math.sin(th);
          var cos_th = Math.cos(th);
          rx = Math.abs(rx);
          ry = Math.abs(ry);
          px = cos_th * (ox - x) * 0.5 + sin_th * (oy - y) * 0.5;
          py = cos_th * (oy - y) * 0.5 - sin_th * (ox - x) * 0.5;
          var pl = px * px / (rx * rx) + py * py / (ry * ry);

          if (pl > 1) {
            pl = Math.sqrt(pl);
            rx *= pl;
            ry *= pl;
          }

          var a00 = cos_th / rx;
          var a01 = sin_th / rx;
          var a10 = -sin_th / ry;
          var a11 = cos_th / ry;
          var x0 = a00 * ox + a01 * oy;
          var y0 = a10 * ox + a11 * oy;
          var x1 = a00 * x + a01 * y;
          var y1 = a10 * x + a11 * y;
          var d = (x1 - x0) * (x1 - x0) + (y1 - y0) * (y1 - y0);
          var sfactor_sq = 1 / d - 0.25;

          if (sfactor_sq < 0) {
            sfactor_sq = 0;
          }

          var sfactor = Math.sqrt(sfactor_sq);

          if (sweep === large) {
            sfactor = -sfactor;
          }

          var xc = 0.5 * (x0 + x1) - sfactor * (y1 - y0);
          var yc = 0.5 * (y0 + y1) + sfactor * (x1 - x0);
          var th0 = Math.atan2(y0 - yc, x0 - xc);
          var th1 = Math.atan2(y1 - yc, x1 - xc);
          var th_arc = th1 - th0;

          if (th_arc < 0 && sweep === 1) {
            th_arc += 2 * Math.PI;
          } else if (th_arc > 0 && sweep === 0) {
            th_arc -= 2 * Math.PI;
          }

          var segments = Math.ceil(Math.abs(th_arc / (Math.PI * 0.5 + 0.001)));
          var result = [];

          for (var i = 0; i < segments; i++) {
            var th2 = th0 + i * th_arc / segments;
            var th3 = th0 + (i + 1) * th_arc / segments;
            result[i] = [xc, yc, th2, th3, rx, ry, sin_th, cos_th];
          }

          return result;
        };

        var segmentToBezier = function segmentToBezier(cx, cy, th0, th1, rx, ry, sin_th, cos_th) {
          var a00 = cos_th * rx;
          var a01 = -sin_th * ry;
          var a10 = sin_th * rx;
          var a11 = cos_th * ry;
          var th_half = 0.5 * (th1 - th0);
          var t = 8 / 3 * Math.sin(th_half * 0.5) * Math.sin(th_half * 0.5) / Math.sin(th_half);
          var x1 = cx + Math.cos(th0) - t * Math.sin(th0);
          var y1 = cy + Math.sin(th0) + t * Math.cos(th0);
          var x3 = cx + Math.cos(th1);
          var y3 = cy + Math.sin(th1);
          var x2 = x3 + t * Math.sin(th1);
          var y2 = y3 - t * Math.cos(th1);
          return [a00 * x1 + a01 * y1, a10 * x1 + a11 * y1, a00 * x2 + a01 * y2, a10 * x2 + a11 * y2, a00 * x3 + a01 * y3, a10 * x3 + a11 * y3];
        };

        var SVGPath = /*#__PURE__*/function () {
          function SVGPath() {
            _classCallCheck(this, SVGPath);
          }

          _createClass(SVGPath, null, [{
            key: "apply",
            value: function apply(doc, path) {
              var commands = parse(path);

              _apply(commands, doc);
            }
          }]);

          return SVGPath;
        }();

        var number$1 = PDFObject.number; // This constant is used to approximate a symmetrical arc using a cubic
        // Bezier curve.

        var KAPPA = 4.0 * ((Math.sqrt(2) - 1.0) / 3.0);
        var VectorMixin = {
          initVector: function initVector() {
            this._ctm = [1, 0, 0, 1, 0, 0]; // current transformation matrix

            return this._ctmStack = [];
          },
          save: function save() {
            this._ctmStack.push(this._ctm.slice()); // TODO: save/restore colorspace and styles so not setting it unnessesarily all the time?


            return this.addContent('q');
          },
          restore: function restore() {
            this._ctm = this._ctmStack.pop() || [1, 0, 0, 1, 0, 0];
            return this.addContent('Q');
          },
          closePath: function closePath() {
            return this.addContent('h');
          },
          lineWidth: function lineWidth(w) {
            return this.addContent("".concat(number$1(w), " w"));
          },
          _CAP_STYLES: {
            BUTT: 0,
            ROUND: 1,
            SQUARE: 2
          },
          lineCap: function lineCap(c) {
            if (typeof c === 'string') {
              c = this._CAP_STYLES[c.toUpperCase()];
            }

            return this.addContent("".concat(c, " J"));
          },
          _JOIN_STYLES: {
            MITER: 0,
            ROUND: 1,
            BEVEL: 2
          },
          lineJoin: function lineJoin(j) {
            if (typeof j === 'string') {
              j = this._JOIN_STYLES[j.toUpperCase()];
            }

            return this.addContent("".concat(j, " j"));
          },
          miterLimit: function miterLimit(m) {
            return this.addContent("".concat(number$1(m), " M"));
          },
          dash: function dash(length) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            var originalLength = length;

            if (!Array.isArray(length)) {
              length = [length, options.space || length];
            }

            var valid = length.every(function (x) {
              return Number.isFinite(x) && x > 0;
            });

            if (!valid) {
              throw new Error("dash(".concat(JSON.stringify(originalLength), ", ").concat(JSON.stringify(options), ") invalid, lengths must be numeric and greater than zero"));
            }

            length = length.map(number$1).join(' ');
            return this.addContent("[".concat(length, "] ").concat(number$1(options.phase || 0), " d"));
          },
          undash: function undash() {
            return this.addContent('[] 0 d');
          },
          moveTo: function moveTo(x, y) {
            return this.addContent("".concat(number$1(x), " ").concat(number$1(y), " m"));
          },
          lineTo: function lineTo(x, y) {
            return this.addContent("".concat(number$1(x), " ").concat(number$1(y), " l"));
          },
          bezierCurveTo: function bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y) {
            return this.addContent("".concat(number$1(cp1x), " ").concat(number$1(cp1y), " ").concat(number$1(cp2x), " ").concat(number$1(cp2y), " ").concat(number$1(x), " ").concat(number$1(y), " c"));
          },
          quadraticCurveTo: function quadraticCurveTo(cpx, cpy, x, y) {
            return this.addContent("".concat(number$1(cpx), " ").concat(number$1(cpy), " ").concat(number$1(x), " ").concat(number$1(y), " v"));
          },
          rect: function rect(x, y, w, h) {
            return this.addContent("".concat(number$1(x), " ").concat(number$1(y), " ").concat(number$1(w), " ").concat(number$1(h), " re"));
          },
          roundedRect: function roundedRect(x, y, w, h, r) {
            if (r == null) {
              r = 0;
            }

            r = Math.min(r, 0.5 * w, 0.5 * h); // amount to inset control points from corners (see `ellipse`)

            var c = r * (1.0 - KAPPA);
            this.moveTo(x + r, y);
            this.lineTo(x + w - r, y);
            this.bezierCurveTo(x + w - c, y, x + w, y + c, x + w, y + r);
            this.lineTo(x + w, y + h - r);
            this.bezierCurveTo(x + w, y + h - c, x + w - c, y + h, x + w - r, y + h);
            this.lineTo(x + r, y + h);
            this.bezierCurveTo(x + c, y + h, x, y + h - c, x, y + h - r);
            this.lineTo(x, y + r);
            this.bezierCurveTo(x, y + c, x + c, y, x + r, y);
            return this.closePath();
          },
          ellipse: function ellipse(x, y, r1, r2) {
            // based on http://stackoverflow.com/questions/2172798/how-to-draw-an-oval-in-html5-canvas/2173084#2173084
            if (r2 == null) {
              r2 = r1;
            }

            x -= r1;
            y -= r2;
            var ox = r1 * KAPPA;
            var oy = r2 * KAPPA;
            var xe = x + r1 * 2;
            var ye = y + r2 * 2;
            var xm = x + r1;
            var ym = y + r2;
            this.moveTo(x, ym);
            this.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);
            this.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);
            this.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);
            this.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);
            return this.closePath();
          },
          circle: function circle(x, y, radius) {
            return this.ellipse(x, y, radius);
          },
          arc: function arc(x, y, radius, startAngle, endAngle, anticlockwise) {
            if (anticlockwise == null) {
              anticlockwise = false;
            }

            var TWO_PI = 2.0 * Math.PI;
            var HALF_PI = 0.5 * Math.PI;
            var deltaAng = endAngle - startAngle;

            if (Math.abs(deltaAng) > TWO_PI) {
              // draw only full circle if more than that is specified
              deltaAng = TWO_PI;
            } else if (deltaAng !== 0 && anticlockwise !== deltaAng < 0) {
              // necessary to flip direction of rendering
              var dir = anticlockwise ? -1 : 1;
              deltaAng = dir * TWO_PI + deltaAng;
            }

            var numSegs = Math.ceil(Math.abs(deltaAng) / HALF_PI);
            var segAng = deltaAng / numSegs;
            var handleLen = segAng / HALF_PI * KAPPA * radius;
            var curAng = startAngle; // component distances between anchor point and control point

            var deltaCx = -Math.sin(curAng) * handleLen;
            var deltaCy = Math.cos(curAng) * handleLen; // anchor point

            var ax = x + Math.cos(curAng) * radius;
            var ay = y + Math.sin(curAng) * radius; // calculate and render segments

            this.moveTo(ax, ay);

            for (var segIdx = 0; segIdx < numSegs; segIdx++) {
              // starting control point
              var cp1x = ax + deltaCx;
              var cp1y = ay + deltaCy; // step angle

              curAng += segAng; // next anchor point

              ax = x + Math.cos(curAng) * radius;
              ay = y + Math.sin(curAng) * radius; // next control point delta

              deltaCx = -Math.sin(curAng) * handleLen;
              deltaCy = Math.cos(curAng) * handleLen; // ending control point

              var cp2x = ax - deltaCx;
              var cp2y = ay - deltaCy; // render segment

              this.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, ax, ay);
            }

            return this;
          },
          polygon: function polygon() {
            for (var _len = arguments.length, points = new Array(_len), _key = 0; _key < _len; _key++) {
              points[_key] = arguments[_key];
            }

            this.moveTo.apply(this, _toConsumableArray(points.shift() || []));

            for (var _i = 0, _points = points; _i < _points.length; _i++) {
              var point = _points[_i];
              this.lineTo.apply(this, _toConsumableArray(point || []));
            }

            return this.closePath();
          },
          path: function path(_path) {
            SVGPath.apply(this, _path);
            return this;
          },
          _windingRule: function _windingRule(rule) {
            if (/even-?odd/.test(rule)) {
              return '*';
            }

            return '';
          },
          fill: function fill(color, rule) {
            if (/(even-?odd)|(non-?zero)/.test(color)) {
              rule = color;
              color = null;
            }

            if (color) {
              this.fillColor(color);
            }

            return this.addContent("f".concat(this._windingRule(rule)));
          },
          stroke: function stroke(color) {
            if (color) {
              this.strokeColor(color);
            }

            return this.addContent('S');
          },
          fillAndStroke: function fillAndStroke(fillColor, strokeColor, rule) {
            if (strokeColor == null) {
              strokeColor = fillColor;
            }

            var isFillRule = /(even-?odd)|(non-?zero)/;

            if (isFillRule.test(fillColor)) {
              rule = fillColor;
              fillColor = null;
            }

            if (isFillRule.test(strokeColor)) {
              rule = strokeColor;
              strokeColor = fillColor;
            }

            if (fillColor) {
              this.fillColor(fillColor);
              this.strokeColor(strokeColor);
            }

            return this.addContent("B".concat(this._windingRule(rule)));
          },
          clip: function clip(rule) {
            return this.addContent("W".concat(this._windingRule(rule), " n"));
          },
          transform: function transform(m11, m12, m21, m22, dx, dy) {
            // keep track of the current transformation matrix
            var m = this._ctm;

            var _m = _slicedToArray(m, 6),
                m0 = _m[0],
                m1 = _m[1],
                m2 = _m[2],
                m3 = _m[3],
                m4 = _m[4],
                m5 = _m[5];

            m[0] = m0 * m11 + m2 * m12;
            m[1] = m1 * m11 + m3 * m12;
            m[2] = m0 * m21 + m2 * m22;
            m[3] = m1 * m21 + m3 * m22;
            m[4] = m0 * dx + m2 * dy + m4;
            m[5] = m1 * dx + m3 * dy + m5;
            var values = [m11, m12, m21, m22, dx, dy].map(function (v) {
              return number$1(v);
            }).join(' ');
            return this.addContent("".concat(values, " cm"));
          },
          translate: function translate(x, y) {
            return this.transform(1, 0, 0, 1, x, y);
          },
          rotate: function rotate(angle) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            var y;
            var rad = angle * Math.PI / 180;
            var cos = Math.cos(rad);
            var sin = Math.sin(rad);
            var x = y = 0;

            if (options.origin != null) {
              var _options$origin = _slicedToArray(options.origin, 2);

              x = _options$origin[0];
              y = _options$origin[1];
              var x1 = x * cos - y * sin;
              var y1 = x * sin + y * cos;
              x -= x1;
              y -= y1;
            }

            return this.transform(cos, sin, -sin, cos, x, y);
          },
          scale: function scale(xFactor, yFactor) {
            var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
            var y;

            if (yFactor == null) {
              yFactor = xFactor;
            }

            if (_typeof4(yFactor) === 'object') {
              options = yFactor;
              yFactor = xFactor;
            }

            var x = y = 0;

            if (options.origin != null) {
              var _options$origin2 = _slicedToArray(options.origin, 2);

              x = _options$origin2[0];
              y = _options$origin2[1];
              x -= xFactor * x;
              y -= yFactor * y;
            }

            return this.transform(xFactor, 0, 0, yFactor, x, y);
          }
        };
        var WIN_ANSI_MAP = {
          402: 131,
          8211: 150,
          8212: 151,
          8216: 145,
          8217: 146,
          8218: 130,
          8220: 147,
          8221: 148,
          8222: 132,
          8224: 134,
          8225: 135,
          8226: 149,
          8230: 133,
          8364: 128,
          8240: 137,
          8249: 139,
          8250: 155,
          710: 136,
          8482: 153,
          338: 140,
          339: 156,
          732: 152,
          352: 138,
          353: 154,
          376: 159,
          381: 142,
          382: 158
        };
        var characters = ".notdef       .notdef        .notdef        .notdef\n.notdef       .notdef        .notdef        .notdef\n.notdef       .notdef        .notdef        .notdef\n.notdef       .notdef        .notdef        .notdef\n.notdef       .notdef        .notdef        .notdef\n.notdef       .notdef        .notdef        .notdef\n.notdef       .notdef        .notdef        .notdef\n.notdef       .notdef        .notdef        .notdef\n  \nspace         exclam         quotedbl       numbersign\ndollar        percent        ampersand      quotesingle\nparenleft     parenright     asterisk       plus\ncomma         hyphen         period         slash\nzero          one            two            three\nfour          five           six            seven\neight         nine           colon          semicolon\nless          equal          greater        question\n  \nat            A              B              C\nD             E              F              G\nH             I              J              K\nL             M              N              O\nP             Q              R              S\nT             U              V              W\nX             Y              Z              bracketleft\nbackslash     bracketright   asciicircum    underscore\n  \ngrave         a              b              c\nd             e              f              g\nh             i              j              k\nl             m              n              o\np             q              r              s\nt             u              v              w\nx             y              z              braceleft\nbar           braceright     asciitilde     .notdef\n  \nEuro          .notdef        quotesinglbase florin\nquotedblbase  ellipsis       dagger         daggerdbl\ncircumflex    perthousand    Scaron         guilsinglleft\nOE            .notdef        Zcaron         .notdef\n.notdef       quoteleft      quoteright     quotedblleft\nquotedblright bullet         endash         emdash\ntilde         trademark      scaron         guilsinglright\noe            .notdef        zcaron         ydieresis\n  \nspace         exclamdown     cent           sterling\ncurrency      yen            brokenbar      section\ndieresis      copyright      ordfeminine    guillemotleft\nlogicalnot    hyphen         registered     macron\ndegree        plusminus      twosuperior    threesuperior\nacute         mu             paragraph      periodcentered\ncedilla       onesuperior    ordmasculine   guillemotright\nonequarter    onehalf        threequarters  questiondown\n  \nAgrave        Aacute         Acircumflex    Atilde\nAdieresis     Aring          AE             Ccedilla\nEgrave        Eacute         Ecircumflex    Edieresis\nIgrave        Iacute         Icircumflex    Idieresis\nEth           Ntilde         Ograve         Oacute\nOcircumflex   Otilde         Odieresis      multiply\nOslash        Ugrave         Uacute         Ucircumflex\nUdieresis     Yacute         Thorn          germandbls\n  \nagrave        aacute         acircumflex    atilde\nadieresis     aring          ae             ccedilla\negrave        eacute         ecircumflex    edieresis\nigrave        iacute         icircumflex    idieresis\neth           ntilde         ograve         oacute\nocircumflex   otilde         odieresis      divide\noslash        ugrave         uacute         ucircumflex\nudieresis     yacute         thorn          ydieresis".split(/\s+/);

        var AFMFont = /*#__PURE__*/function () {
          _createClass(AFMFont, null, [{
            key: "open",
            value: function open(filename) {
              return new AFMFont(fs.readFileSync(filename, 'utf8'));
            }
          }]);

          function AFMFont(contents) {
            _classCallCheck(this, AFMFont);

            this.contents = contents;
            this.attributes = {};
            this.glyphWidths = {};
            this.boundingBoxes = {};
            this.kernPairs = {};
            this.parse(); // todo: remove charWidths since appears to not be used

            this.charWidths = new Array(256);

            for (var char = 0; char <= 255; char++) {
              this.charWidths[char] = this.glyphWidths[characters[char]];
            }

            this.bbox = this.attributes['FontBBox'].split(/\s+/).map(function (e) {
              return +e;
            });
            this.ascender = +(this.attributes['Ascender'] || 0);
            this.descender = +(this.attributes['Descender'] || 0);
            this.xHeight = +(this.attributes['XHeight'] || 0);
            this.capHeight = +(this.attributes['CapHeight'] || 0);
            this.lineGap = this.bbox[3] - this.bbox[1] - (this.ascender - this.descender);
          }

          _createClass(AFMFont, [{
            key: "parse",
            value: function parse() {
              var section = '';
              var _iteratorNormalCompletion = true;
              var _didIteratorError = false;
              var _iteratorError = undefined;

              try {
                for (var _iterator = this.contents.split('\n')[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                  var line = _step.value;
                  var match;
                  var a;

                  if (match = line.match(/^Start(\w+)/)) {
                    section = match[1];
                    continue;
                  } else if (match = line.match(/^End(\w+)/)) {
                    section = '';
                    continue;
                  }

                  switch (section) {
                    case 'FontMetrics':
                      match = line.match(/(^\w+)\s+(.*)/);
                      var key = match[1];
                      var value = match[2];

                      if (a = this.attributes[key]) {
                        if (!Array.isArray(a)) {
                          a = this.attributes[key] = [a];
                        }

                        a.push(value);
                      } else {
                        this.attributes[key] = value;
                      }

                      break;

                    case 'CharMetrics':
                      if (!/^CH?\s/.test(line)) {
                        continue;
                      }

                      var name = line.match(/\bN\s+(\.?\w+)\s*;/)[1];
                      this.glyphWidths[name] = +line.match(/\bWX\s+(\d+)\s*;/)[1];
                      break;

                    case 'KernPairs':
                      match = line.match(/^KPX\s+(\.?\w+)\s+(\.?\w+)\s+(-?\d+)/);

                      if (match) {
                        this.kernPairs[match[1] + '\0' + match[2]] = parseInt(match[3]);
                      }

                      break;
                  }
                }
              } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                  }
                } finally {
                  if (_didIteratorError) {
                    throw _iteratorError;
                  }
                }
              }
            }
          }, {
            key: "encodeText",
            value: function encodeText(text) {
              var res = [];

              for (var i = 0, len = text.length; i < len; i++) {
                var char = text.charCodeAt(i);
                char = WIN_ANSI_MAP[char] || char;
                res.push(char.toString(16));
              }

              return res;
            }
          }, {
            key: "glyphsForString",
            value: function glyphsForString(string) {
              var glyphs = [];

              for (var i = 0, len = string.length; i < len; i++) {
                var charCode = string.charCodeAt(i);
                glyphs.push(this.characterToGlyph(charCode));
              }

              return glyphs;
            }
          }, {
            key: "characterToGlyph",
            value: function characterToGlyph(character) {
              return characters[WIN_ANSI_MAP[character] || character] || '.notdef';
            }
          }, {
            key: "widthOfGlyph",
            value: function widthOfGlyph(glyph) {
              return this.glyphWidths[glyph] || 0;
            }
          }, {
            key: "getKernPair",
            value: function getKernPair(left, right) {
              return this.kernPairs[left + '\0' + right] || 0;
            }
          }, {
            key: "advancesForGlyphs",
            value: function advancesForGlyphs(glyphs) {
              var advances = [];

              for (var index = 0; index < glyphs.length; index++) {
                var left = glyphs[index];
                var right = glyphs[index + 1];
                advances.push(this.widthOfGlyph(left) + this.getKernPair(left, right));
              }

              return advances;
            }
          }]);

          return AFMFont;
        }();

        var PDFFont = /*#__PURE__*/function () {
          function PDFFont() {
            _classCallCheck(this, PDFFont);
          }

          _createClass(PDFFont, [{
            key: "encode",
            value: function encode() {
              throw new Error('Must be implemented by subclasses');
            }
          }, {
            key: "widthOfString",
            value: function widthOfString() {
              throw new Error('Must be implemented by subclasses');
            }
          }, {
            key: "ref",
            value: function ref() {
              return this.dictionary != null ? this.dictionary : this.dictionary = this.document.ref();
            }
          }, {
            key: "finalize",
            value: function finalize() {
              if (this.embedded || this.dictionary == null) {
                return;
              }

              this.embed();
              return this.embedded = true;
            }
          }, {
            key: "embed",
            value: function embed() {
              throw new Error('Must be implemented by subclasses');
            }
          }, {
            key: "lineHeight",
            value: function lineHeight(size, includeGap) {
              if (includeGap == null) {
                includeGap = false;
              }

              var gap = includeGap ? this.lineGap : 0;
              return (this.ascender + gap - this.descender) / 1000 * size;
            }
          }]);

          return PDFFont;
        }();

        var STANDARD_FONTS = {
          Courier: function Courier() {
            return fs.readFileSync(__dirname + '/data/Courier.afm', 'utf8');
          },
          'Courier-Bold': function CourierBold() {
            return fs.readFileSync(__dirname + '/data/Courier-Bold.afm', 'utf8');
          },
          'Courier-Oblique': function CourierOblique() {
            return fs.readFileSync(__dirname + '/data/Courier-Oblique.afm', 'utf8');
          },
          'Courier-BoldOblique': function CourierBoldOblique() {
            return fs.readFileSync(__dirname + '/data/Courier-BoldOblique.afm', 'utf8');
          },
          Helvetica: function Helvetica() {
            return fs.readFileSync(__dirname + '/data/Helvetica.afm', 'utf8');
          },
          'Helvetica-Bold': function HelveticaBold() {
            return fs.readFileSync(__dirname + '/data/Helvetica-Bold.afm', 'utf8');
          },
          'Helvetica-Oblique': function HelveticaOblique() {
            return fs.readFileSync(__dirname + '/data/Helvetica-Oblique.afm', 'utf8');
          },
          'Helvetica-BoldOblique': function HelveticaBoldOblique() {
            return fs.readFileSync(__dirname + '/data/Helvetica-BoldOblique.afm', 'utf8');
          },
          'Times-Roman': function TimesRoman() {
            return fs.readFileSync(__dirname + '/data/Times-Roman.afm', 'utf8');
          },
          'Times-Bold': function TimesBold() {
            return fs.readFileSync(__dirname + '/data/Times-Bold.afm', 'utf8');
          },
          'Times-Italic': function TimesItalic() {
            return fs.readFileSync(__dirname + '/data/Times-Italic.afm', 'utf8');
          },
          'Times-BoldItalic': function TimesBoldItalic() {
            return fs.readFileSync(__dirname + '/data/Times-BoldItalic.afm', 'utf8');
          },
          Symbol: function _Symbol6() {
            return fs.readFileSync(__dirname + '/data/Symbol.afm', 'utf8');
          },
          ZapfDingbats: function ZapfDingbats() {
            return fs.readFileSync(__dirname + '/data/ZapfDingbats.afm', 'utf8');
          }
        };

        var StandardFont = /*#__PURE__*/function (_PDFFont) {
          _inherits(StandardFont, _PDFFont);

          function StandardFont(document, name, id) {
            var _this;

            _classCallCheck(this, StandardFont);

            _this = _possibleConstructorReturn(this, _getPrototypeOf(StandardFont).call(this));
            _this.document = document;
            _this.name = name;
            _this.id = id;
            _this.font = new AFMFont(STANDARD_FONTS[_this.name]());
            var _this$font = _this.font;
            _this.ascender = _this$font.ascender;
            _this.descender = _this$font.descender;
            _this.bbox = _this$font.bbox;
            _this.lineGap = _this$font.lineGap;
            _this.xHeight = _this$font.xHeight;
            _this.capHeight = _this$font.capHeight;
            return _this;
          }

          _createClass(StandardFont, [{
            key: "embed",
            value: function embed() {
              this.dictionary.data = {
                Type: 'Font',
                BaseFont: this.name,
                Subtype: 'Type1',
                Encoding: 'WinAnsiEncoding'
              };
              return this.dictionary.end();
            }
          }, {
            key: "encode",
            value: function encode(text) {
              var encoded = this.font.encodeText(text);
              var glyphs = this.font.glyphsForString("".concat(text));
              var advances = this.font.advancesForGlyphs(glyphs);
              var positions = [];

              for (var i = 0; i < glyphs.length; i++) {
                var glyph = glyphs[i];
                positions.push({
                  xAdvance: advances[i],
                  yAdvance: 0,
                  xOffset: 0,
                  yOffset: 0,
                  advanceWidth: this.font.widthOfGlyph(glyph)
                });
              }

              return [encoded, positions];
            }
          }, {
            key: "widthOfString",
            value: function widthOfString(string, size) {
              var glyphs = this.font.glyphsForString("".concat(string));
              var advances = this.font.advancesForGlyphs(glyphs);
              var width = 0;
              var _iteratorNormalCompletion = true;
              var _didIteratorError = false;
              var _iteratorError = undefined;

              try {
                for (var _iterator = advances[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                  var advance = _step.value;
                  width += advance;
                }
              } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                  }
                } finally {
                  if (_didIteratorError) {
                    throw _iteratorError;
                  }
                }
              }

              var scale = size / 1000;
              return width * scale;
            }
          }], [{
            key: "isStandardFont",
            value: function isStandardFont(name) {
              return name in STANDARD_FONTS;
            }
          }]);

          return StandardFont;
        }(PDFFont);

        var toHex = function toHex(num) {
          return "0000".concat(num.toString(16)).slice(-4);
        };

        var EmbeddedFont = /*#__PURE__*/function (_PDFFont) {
          _inherits(EmbeddedFont, _PDFFont);

          function EmbeddedFont(document, font, id) {
            var _this;

            _classCallCheck(this, EmbeddedFont);

            _this = _possibleConstructorReturn(this, _getPrototypeOf(EmbeddedFont).call(this));
            _this.document = document;
            _this.font = font;
            _this.id = id;
            _this.subset = _this.font.createSubset();
            _this.unicode = [[0]];
            _this.widths = [_this.font.getGlyph(0).advanceWidth];
            _this.name = _this.font.postscriptName;
            _this.scale = 1000 / _this.font.unitsPerEm;
            _this.ascender = _this.font.ascent * _this.scale;
            _this.descender = _this.font.descent * _this.scale;
            _this.xHeight = _this.font.xHeight * _this.scale;
            _this.capHeight = _this.font.capHeight * _this.scale;
            _this.lineGap = _this.font.lineGap * _this.scale;
            _this.bbox = _this.font.bbox;

            if (document.options.fontLayoutCache !== false) {
              _this.layoutCache = Object.create(null);
            }

            return _this;
          }

          _createClass(EmbeddedFont, [{
            key: "layoutRun",
            value: function layoutRun(text, features) {
              var run = this.font.layout(text, features); // Normalize position values

              for (var i = 0; i < run.positions.length; i++) {
                var position = run.positions[i];

                for (var key in position) {
                  position[key] *= this.scale;
                }

                position.advanceWidth = run.glyphs[i].advanceWidth * this.scale;
              }

              return run;
            }
          }, {
            key: "layoutCached",
            value: function layoutCached(text) {
              if (!this.layoutCache) {
                return this.layoutRun(text);
              }

              var cached;

              if (cached = this.layoutCache[text]) {
                return cached;
              }

              var run = this.layoutRun(text);
              this.layoutCache[text] = run;
              return run;
            }
          }, {
            key: "layout",
            value: function layout(text, features, onlyWidth) {
              // Skip the cache if any user defined features are applied
              if (features) {
                return this.layoutRun(text, features);
              }

              var glyphs = onlyWidth ? null : [];
              var positions = onlyWidth ? null : [];
              var advanceWidth = 0; // Split the string by words to increase cache efficiency.
              // For this purpose, spaces and tabs are a good enough delimeter.

              var last = 0;
              var index = 0;

              while (index <= text.length) {
                var needle;

                if (index === text.length && last < index || (needle = text.charAt(index), [' ', '\t'].includes(needle))) {
                  var run = this.layoutCached(text.slice(last, ++index));

                  if (!onlyWidth) {
                    glyphs = glyphs.concat(run.glyphs);
                    positions = positions.concat(run.positions);
                  }

                  advanceWidth += run.advanceWidth;
                  last = index;
                } else {
                  index++;
                }
              }

              return {
                glyphs: glyphs,
                positions: positions,
                advanceWidth: advanceWidth
              };
            }
          }, {
            key: "encode",
            value: function encode(text, features) {
              var _this$layout = this.layout(text, features),
                  glyphs = _this$layout.glyphs,
                  positions = _this$layout.positions;

              var res = [];

              for (var i = 0; i < glyphs.length; i++) {
                var glyph = glyphs[i];
                var gid = this.subset.includeGlyph(glyph.id);
                res.push("0000".concat(gid.toString(16)).slice(-4));

                if (this.widths[gid] == null) {
                  this.widths[gid] = glyph.advanceWidth * this.scale;
                }

                if (this.unicode[gid] == null) {
                  this.unicode[gid] = glyph.codePoints;
                }
              }

              return [res, positions];
            }
          }, {
            key: "widthOfString",
            value: function widthOfString(string, size, features) {
              var width = this.layout(string, features, true).advanceWidth;
              var scale = size / 1000;
              return width * scale;
            }
          }, {
            key: "embed",
            value: function embed() {
              var _this2 = this;

              var isCFF = this.subset.cff != null;
              var fontFile = this.document.ref();

              if (isCFF) {
                fontFile.data.Subtype = 'CIDFontType0C';
              }

              this.subset.encodeStream().on('data', function (data) {
                return fontFile.write(data);
              }).on('end', function () {
                return fontFile.end();
              });
              var familyClass = ((this.font['OS/2'] != null ? this.font['OS/2'].sFamilyClass : undefined) || 0) >> 8;
              var flags = 0;

              if (this.font.post.isFixedPitch) {
                flags |= 1 << 0;
              }

              if (1 <= familyClass && familyClass <= 7) {
                flags |= 1 << 1;
              }

              flags |= 1 << 2; // assume the font uses non-latin characters

              if (familyClass === 10) {
                flags |= 1 << 3;
              }

              if (this.font.head.macStyle.italic) {
                flags |= 1 << 6;
              } // generate a tag (6 uppercase letters. 16 is the char code offset from '1' to 'A'. 74 will map to 'Z')


              var tag = [1, 2, 3, 4, 5, 6].map(function (i) {
                return String.fromCharCode((_this2.id.charCodeAt(i) || 74) + 16);
              }).join('');
              var name = tag + '+' + this.font.postscriptName;
              var bbox = this.font.bbox;
              var descriptor = this.document.ref({
                Type: 'FontDescriptor',
                FontName: name,
                Flags: flags,
                FontBBox: [bbox.minX * this.scale, bbox.minY * this.scale, bbox.maxX * this.scale, bbox.maxY * this.scale],
                ItalicAngle: this.font.italicAngle,
                Ascent: this.ascender,
                Descent: this.descender,
                CapHeight: (this.font.capHeight || this.font.ascent) * this.scale,
                XHeight: (this.font.xHeight || 0) * this.scale,
                StemV: 0
              }); // not sure how to calculate this

              if (isCFF) {
                descriptor.data.FontFile3 = fontFile;
              } else {
                descriptor.data.FontFile2 = fontFile;
              }

              descriptor.end();
              var descendantFontData = {
                Type: 'Font',
                Subtype: 'CIDFontType0',
                BaseFont: name,
                CIDSystemInfo: {
                  Registry: new String('Adobe'),
                  Ordering: new String('Identity'),
                  Supplement: 0
                },
                FontDescriptor: descriptor,
                W: [0, this.widths]
              };

              if (!isCFF) {
                descendantFontData.Subtype = 'CIDFontType2';
                descendantFontData.CIDToGIDMap = 'Identity';
              }

              var descendantFont = this.document.ref(descendantFontData);
              descendantFont.end();
              this.dictionary.data = {
                Type: 'Font',
                Subtype: 'Type0',
                BaseFont: name,
                Encoding: 'Identity-H',
                DescendantFonts: [descendantFont],
                ToUnicode: this.toUnicodeCmap()
              };
              return this.dictionary.end();
            } // Maps the glyph ids encoded in the PDF back to unicode strings
            // Because of ligature substitutions and the like, there may be one or more
            // unicode characters represented by each glyph.

          }, {
            key: "toUnicodeCmap",
            value: function toUnicodeCmap() {
              var cmap = this.document.ref();
              var entries = [];
              var _iteratorNormalCompletion = true;
              var _didIteratorError = false;
              var _iteratorError = undefined;

              try {
                for (var _iterator = this.unicode[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                  var codePoints = _step.value;
                  var encoded = []; // encode codePoints to utf16

                  var _iteratorNormalCompletion2 = true;
                  var _didIteratorError2 = false;
                  var _iteratorError2 = undefined;

                  try {
                    for (var _iterator2 = codePoints[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                      var value = _step2.value;

                      if (value > 0xffff) {
                        value -= 0x10000;
                        encoded.push(toHex(value >>> 10 & 0x3ff | 0xd800));
                        value = 0xdc00 | value & 0x3ff;
                      }

                      encoded.push(toHex(value));
                    }
                  } catch (err) {
                    _didIteratorError2 = true;
                    _iteratorError2 = err;
                  } finally {
                    try {
                      if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                        _iterator2.return();
                      }
                    } finally {
                      if (_didIteratorError2) {
                        throw _iteratorError2;
                      }
                    }
                  }

                  entries.push("<".concat(encoded.join(' '), ">"));
                }
              } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                  }
                } finally {
                  if (_didIteratorError) {
                    throw _iteratorError;
                  }
                }
              }

              cmap.end("/CIDInit /ProcSet findresource begin\n12 dict begin\nbegincmap\n/CIDSystemInfo <<\n  /Registry (Adobe)\n  /Ordering (UCS)\n  /Supplement 0\n>> def\n/CMapName /Adobe-Identity-UCS def\n/CMapType 2 def\n1 begincodespacerange\n<0000><ffff>\nendcodespacerange\n1 beginbfrange\n<0000> <".concat(toHex(entries.length - 1), "> [").concat(entries.join(' '), "]\nendbfrange\nendcmap\nCMapName currentdict /CMap defineresource pop\nend\nend"));
              return cmap;
            }
          }]);

          return EmbeddedFont;
        }(PDFFont);

        var PDFFontFactory = /*#__PURE__*/function () {
          function PDFFontFactory() {
            _classCallCheck(this, PDFFontFactory);
          }

          _createClass(PDFFontFactory, null, [{
            key: "open",
            value: function open(document, src, family, id) {
              var font;

              if (typeof src === 'string') {
                if (StandardFont.isStandardFont(src)) {
                  return new StandardFont(document, src, id);
                }

                src = fs.readFileSync(src);
              }

              if (Buffer.isBuffer(src)) {
                font = _fontkit.default.create(src, family);
              } else if (src instanceof Uint8Array) {
                font = _fontkit.default.create(new Buffer(src), family);
              } else if (src instanceof ArrayBuffer) {
                font = _fontkit.default.create(new Buffer(new Uint8Array(src)), family);
              }

              if (font == null) {
                throw new Error('Not a supported font format or standard PDF font.');
              }

              return new EmbeddedFont(document, font, id);
            }
          }]);

          return PDFFontFactory;
        }();

        var FontsMixin = {
          initFonts: function initFonts() {
            var defaultFont = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Helvetica'; // Lookup table for embedded fonts

            this._fontFamilies = {};
            this._fontCount = 0; // Font state

            this._fontSize = 12;
            this._font = null;
            this._registeredFonts = {}; // Set the default font

            if (defaultFont) {
              this.font(defaultFont);
            }
          },
          font: function font(src, family, size) {
            var cacheKey, font;

            if (typeof family === 'number') {
              size = family;
              family = null;
            } // check registered fonts if src is a string


            if (typeof src === 'string' && this._registeredFonts[src]) {
              cacheKey = src;
              var _this$_registeredFont = this._registeredFonts[src];
              src = _this$_registeredFont.src;
              family = _this$_registeredFont.family;
            } else {
              cacheKey = family || src;

              if (typeof cacheKey !== 'string') {
                cacheKey = null;
              }
            }

            if (size != null) {
              this.fontSize(size);
            } // fast path: check if the font is already in the PDF


            if (font = this._fontFamilies[cacheKey]) {
              this._font = font;
              return this;
            } // load the font


            var id = "F".concat(++this._fontCount);
            this._font = PDFFontFactory.open(this, src, family, id); // check for existing font familes with the same name already in the PDF
            // useful if the font was passed as a buffer

            if (font = this._fontFamilies[this._font.name]) {
              this._font = font;
              return this;
            } // save the font for reuse later


            if (cacheKey) {
              this._fontFamilies[cacheKey] = this._font;
            }

            if (this._font.name) {
              this._fontFamilies[this._font.name] = this._font;
            }

            return this;
          },
          fontSize: function fontSize(_fontSize) {
            this._fontSize = _fontSize;
            return this;
          },
          currentLineHeight: function currentLineHeight(includeGap) {
            if (includeGap == null) {
              includeGap = false;
            }

            return this._font.lineHeight(this._fontSize, includeGap);
          },
          registerFont: function registerFont(name, src, family) {
            this._registeredFonts[name] = {
              src: src,
              family: family
            };
            return this;
          }
        };

        var LineWrapper = /*#__PURE__*/function (_EventEmitter) {
          _inherits(LineWrapper, _EventEmitter);

          function LineWrapper(document, options) {
            var _this;

            _classCallCheck(this, LineWrapper);

            _this = _possibleConstructorReturn(this, _getPrototypeOf(LineWrapper).call(this));
            _this.document = document;
            _this.indent = options.indent || 0;
            _this.characterSpacing = options.characterSpacing || 0;
            _this.wordSpacing = options.wordSpacing === 0;
            _this.columns = options.columns || 1;
            _this.columnGap = options.columnGap != null ? options.columnGap : 18; // 1/4 inch

            _this.lineWidth = (options.width - _this.columnGap * (_this.columns - 1)) / _this.columns;
            _this.spaceLeft = _this.lineWidth;
            _this.startX = _this.document.x;
            _this.startY = _this.document.y;
            _this.column = 1;
            _this.ellipsis = options.ellipsis;
            _this.continuedX = 0;
            _this.features = options.features; // calculate the maximum Y position the text can appear at

            if (options.height != null) {
              _this.height = options.height;
              _this.maxY = _this.startY + options.height;
            } else {
              _this.maxY = _this.document.page.maxY();
            } // handle paragraph indents


            _this.on('firstLine', function (options) {
              // if this is the first line of the text segment, and
              // we're continuing where we left off, indent that much
              // otherwise use the user specified indent option
              var indent = _this.continuedX || _this.indent;
              _this.document.x += indent;
              _this.lineWidth -= indent;
              return _this.once('line', function () {
                _this.document.x -= indent;
                _this.lineWidth += indent;

                if (options.continued && !_this.continuedX) {
                  _this.continuedX = _this.indent;
                }

                if (!options.continued) {
                  return _this.continuedX = 0;
                }
              });
            }); // handle left aligning last lines of paragraphs


            _this.on('lastLine', function (options) {
              var align = options.align;

              if (align === 'justify') {
                options.align = 'left';
              }

              _this.lastLine = true;
              return _this.once('line', function () {
                _this.document.y += options.paragraphGap || 0;
                options.align = align;
                return _this.lastLine = false;
              });
            });

            return _this;
          }

          _createClass(LineWrapper, [{
            key: "wordWidth",
            value: function wordWidth(word) {
              return this.document.widthOfString(word, this) + this.characterSpacing + this.wordSpacing;
            }
          }, {
            key: "eachWord",
            value: function eachWord(text, fn) {
              // setup a unicode line breaker
              var bk;
              var breaker = new _linebreak.default(text);
              var last = null;
              var wordWidths = Object.create(null);

              while (bk = breaker.nextBreak()) {
                var shouldContinue;
                var word = text.slice((last != null ? last.position : undefined) || 0, bk.position);
                var w = wordWidths[word] != null ? wordWidths[word] : wordWidths[word] = this.wordWidth(word); // if the word is longer than the whole line, chop it up
                // TODO: break by grapheme clusters, not JS string characters

                if (w > this.lineWidth + this.continuedX) {
                  // make some fake break objects
                  var lbk = last;
                  var fbk = {};

                  while (word.length) {
                    // fit as much of the word as possible into the space we have
                    var l, mightGrow;

                    if (w > this.spaceLeft) {
                      // start our check at the end of our available space - this method is faster than a loop of each character and it resolves
                      // an issue with long loops when processing massive words, such as a huge number of spaces
                      l = Math.ceil(this.spaceLeft / (w / word.length));
                      w = this.wordWidth(word.slice(0, l));
                      mightGrow = w <= this.spaceLeft && l < word.length;
                    } else {
                      l = word.length;
                    }

                    var mustShrink = w > this.spaceLeft && l > 0; // shrink or grow word as necessary after our near-guess above

                    while (mustShrink || mightGrow) {
                      if (mustShrink) {
                        w = this.wordWidth(word.slice(0, --l));
                        mustShrink = w > this.spaceLeft && l > 0;
                      } else {
                        w = this.wordWidth(word.slice(0, ++l));
                        mustShrink = w > this.spaceLeft && l > 0;
                        mightGrow = w <= this.spaceLeft && l < word.length;
                      }
                    } // check for the edge case where a single character cannot fit into a line.


                    if (l === 0 && this.spaceLeft === this.lineWidth) {
                      l = 1;
                    } // send a required break unless this is the last piece and a linebreak is not specified


                    fbk.required = bk.required || l < word.length;
                    shouldContinue = fn(word.slice(0, l), w, fbk, lbk);
                    lbk = {
                      required: false
                    }; // get the remaining piece of the word

                    word = word.slice(l);
                    w = this.wordWidth(word);

                    if (shouldContinue === false) {
                      break;
                    }
                  }
                } else {
                  // otherwise just emit the break as it was given to us
                  shouldContinue = fn(word, w, bk, last);
                }

                if (shouldContinue === false) {
                  break;
                }

                last = bk;
              }
            }
          }, {
            key: "wrap",
            value: function wrap(text, options) {
              var _this2 = this; // override options from previous continued fragments


              if (options.indent != null) {
                this.indent = options.indent;
              }

              if (options.characterSpacing != null) {
                this.characterSpacing = options.characterSpacing;
              }

              if (options.wordSpacing != null) {
                this.wordSpacing = options.wordSpacing;
              }

              if (options.ellipsis != null) {
                this.ellipsis = options.ellipsis;
              } // make sure we're actually on the page
              // and that the first line of is never by
              // itself at the bottom of a page (orphans)


              var nextY = this.document.y + this.document.currentLineHeight(true);

              if (this.document.y > this.maxY || nextY > this.maxY) {
                this.nextSection();
              }

              var buffer = '';
              var textWidth = 0;
              var wc = 0;
              var lc = 0;
              var y = this.document.y; // used to reset Y pos if options.continued (below)

              var emitLine = function emitLine() {
                options.textWidth = textWidth + _this2.wordSpacing * (wc - 1);
                options.wordCount = wc;
                options.lineWidth = _this2.lineWidth;
                y = _this2.document.y;

                _this2.emit('line', buffer, options, _this2);

                return lc++;
              };

              this.emit('sectionStart', options, this);
              this.eachWord(text, function (word, w, bk, last) {
                if (last == null || last.required) {
                  _this2.emit('firstLine', options, _this2);

                  _this2.spaceLeft = _this2.lineWidth;
                }

                if (w <= _this2.spaceLeft) {
                  buffer += word;
                  textWidth += w;
                  wc++;
                }

                if (bk.required || w > _this2.spaceLeft) {
                  // if the user specified a max height and an ellipsis, and is about to pass the
                  // max height and max columns after the next line, append the ellipsis
                  var lh = _this2.document.currentLineHeight(true);

                  if (_this2.height != null && _this2.ellipsis && _this2.document.y + lh * 2 > _this2.maxY && _this2.column >= _this2.columns) {
                    if (_this2.ellipsis === true) {
                      _this2.ellipsis = '…';
                    } // map default ellipsis character


                    buffer = buffer.replace(/\s+$/, '');
                    textWidth = _this2.wordWidth(buffer + _this2.ellipsis); // remove characters from the buffer until the ellipsis fits
                    // to avoid inifinite loop need to stop while-loop if buffer is empty string

                    while (buffer && textWidth > _this2.lineWidth) {
                      buffer = buffer.slice(0, -1).replace(/\s+$/, '');
                      textWidth = _this2.wordWidth(buffer + _this2.ellipsis);
                    } // need to add ellipsis only if there is enough space for it


                    if (textWidth <= _this2.lineWidth) {
                      buffer = buffer + _this2.ellipsis;
                    }

                    textWidth = _this2.wordWidth(buffer);
                  }

                  if (bk.required) {
                    if (w > _this2.spaceLeft) {
                      emitLine();
                      buffer = word;
                      textWidth = w;
                      wc = 1;
                    }

                    _this2.emit('lastLine', options, _this2);
                  }

                  emitLine(); // if we've reached the edge of the page,
                  // continue on a new page or column

                  if (_this2.document.y + lh > _this2.maxY) {
                    var shouldContinue = _this2.nextSection(); // stop if we reached the maximum height


                    if (!shouldContinue) {
                      wc = 0;
                      buffer = '';
                      return false;
                    }
                  } // reset the space left and buffer


                  if (bk.required) {
                    _this2.spaceLeft = _this2.lineWidth;
                    buffer = '';
                    textWidth = 0;
                    return wc = 0;
                  } else {
                    // reset the space left and buffer
                    _this2.spaceLeft = _this2.lineWidth - w;
                    buffer = word;
                    textWidth = w;
                    return wc = 1;
                  }
                } else {
                  return _this2.spaceLeft -= w;
                }
              });

              if (wc > 0) {
                this.emit('lastLine', options, this);
                emitLine();
              }

              this.emit('sectionEnd', options, this); // if the wrap is set to be continued, save the X position
              // to start the first line of the next segment at, and reset
              // the y position

              if (options.continued === true) {
                if (lc > 1) {
                  this.continuedX = 0;
                }

                this.continuedX += options.textWidth || 0;
                return this.document.y = y;
              } else {
                return this.document.x = this.startX;
              }
            }
          }, {
            key: "nextSection",
            value: function nextSection(options) {
              this.emit('sectionEnd', options, this);

              if (++this.column > this.columns) {
                // if a max height was specified by the user, we're done.
                // otherwise, the default is to make a new page at the bottom.
                if (this.height != null) {
                  return false;
                }

                this.document.addPage();
                this.column = 1;
                this.startY = this.document.page.margins.top;
                this.maxY = this.document.page.maxY();
                this.document.x = this.startX;

                if (this.document._fillColor) {
                  var _this$document;

                  (_this$document = this.document).fillColor.apply(_this$document, _toConsumableArray(this.document._fillColor));
                }

                this.emit('pageBreak', options, this);
              } else {
                this.document.x += this.lineWidth + this.columnGap;
                this.document.y = this.startY;
                this.emit('columnBreak', options, this);
              }

              this.emit('sectionStart', options, this);
              return true;
            }
          }]);

          return LineWrapper;
        }(_events.EventEmitter);

        var number$2 = PDFObject.number;
        var TextMixin = {
          initText: function initText() {
            this._line = this._line.bind(this); // Current coordinates

            this.x = 0;
            this.y = 0;
            return this._lineGap = 0;
          },
          lineGap: function lineGap(_lineGap) {
            this._lineGap = _lineGap;
            return this;
          },
          moveDown: function moveDown(lines) {
            if (lines == null) {
              lines = 1;
            }

            this.y += this.currentLineHeight(true) * lines + this._lineGap;
            return this;
          },
          moveUp: function moveUp(lines) {
            if (lines == null) {
              lines = 1;
            }

            this.y -= this.currentLineHeight(true) * lines + this._lineGap;
            return this;
          },
          _text: function _text(text, x, y, options, lineCallback) {
            options = this._initOptions(x, y, options); // Convert text to a string

            text = text == null ? '' : "".concat(text); // if the wordSpacing option is specified, remove multiple consecutive spaces

            if (options.wordSpacing) {
              text = text.replace(/\s{2,}/g, ' ');
            } // word wrapping


            if (options.width) {
              var wrapper = this._wrapper;

              if (!wrapper) {
                wrapper = new LineWrapper(this, options);
                wrapper.on('line', lineCallback);
              }

              this._wrapper = options.continued ? wrapper : null;
              this._textOptions = options.continued ? options : null;
              wrapper.wrap(text, options); // render paragraphs as single lines
            } else {
              var _iteratorNormalCompletion = true;
              var _didIteratorError = false;
              var _iteratorError = undefined;

              try {
                for (var _iterator = text.split('\n')[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                  var line = _step.value;
                  lineCallback(line, options);
                }
              } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                  }
                } finally {
                  if (_didIteratorError) {
                    throw _iteratorError;
                  }
                }
              }
            }

            return this;
          },
          text: function text(_text2, x, y, options) {
            return this._text(_text2, x, y, options, this._line);
          },
          widthOfString: function widthOfString(string) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            return this._font.widthOfString(string, this._fontSize, options.features) + (options.characterSpacing || 0) * (string.length - 1);
          },
          heightOfString: function heightOfString(text, options) {
            var _this = this;

            var x = this.x,
                y = this.y;
            options = this._initOptions(options);
            options.height = Infinity; // don't break pages

            var lineGap = options.lineGap || this._lineGap || 0;

            this._text(text, this.x, this.y, options, function () {
              return _this.y += _this.currentLineHeight(true) + lineGap;
            });

            var height = this.y - y;
            this.x = x;
            this.y = y;
            return height;
          },
          list: function list(_list, x, y, options, wrapper) {
            var _this2 = this;

            options = this._initOptions(x, y, options);
            var listType = options.listType || 'bullet';
            var unit = Math.round(this._font.ascender / 1000 * this._fontSize);
            var midLine = unit / 2;
            var r = options.bulletRadius || unit / 3;
            var indent = options.textIndent || (listType === 'bullet' ? r * 5 : unit * 2);
            var itemIndent = options.bulletIndent || (listType === 'bullet' ? r * 8 : unit * 2);
            var level = 1;
            var items = [];
            var levels = [];
            var numbers = [];

            var flatten = function flatten(list) {
              var n = 1;

              for (var _i = 0; _i < list.length; _i++) {
                var item = list[_i];

                if (Array.isArray(item)) {
                  level++;
                  flatten(item);
                  level--;
                } else {
                  items.push(item);
                  levels.push(level);

                  if (listType !== 'bullet') {
                    numbers.push(n++);
                  }
                }
              }
            };

            flatten(_list);

            var label = function label(n) {
              switch (listType) {
                case 'numbered':
                  return "".concat(n, ".");

                case 'lettered':
                  var letter = String.fromCharCode((n - 1) % 26 + 65);
                  var times = Math.floor((n - 1) / 26 + 1);
                  var text = Array(times + 1).join(letter);
                  return "".concat(text, ".");
              }
            };

            wrapper = new LineWrapper(this, options);
            wrapper.on('line', this._line);
            level = 1;
            var i = 0;
            wrapper.on('firstLine', function () {
              var l;

              if ((l = levels[i++]) !== level) {
                var diff = itemIndent * (l - level);
                _this2.x += diff;
                wrapper.lineWidth -= diff;
                level = l;
              }

              switch (listType) {
                case 'bullet':
                  _this2.circle(_this2.x - indent + r, _this2.y + midLine, r);

                  return _this2.fill();

                case 'numbered':
                case 'lettered':
                  var text = label(numbers[i - 1]);
                  return _this2._fragment(text, _this2.x - indent, _this2.y, options);
              }
            });
            wrapper.on('sectionStart', function () {
              var pos = indent + itemIndent * (level - 1);
              _this2.x += pos;
              return wrapper.lineWidth -= pos;
            });
            wrapper.on('sectionEnd', function () {
              var pos = indent + itemIndent * (level - 1);
              _this2.x -= pos;
              return wrapper.lineWidth += pos;
            });
            wrapper.wrap(items.join('\n'), options);
            return this;
          },
          _initOptions: function _initOptions() {
            var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            var y = arguments.length > 1 ? arguments[1] : undefined;
            var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

            if (_typeof4(x) === 'object') {
              options = x;
              x = null;
            } // clone options object


            var result = Object.assign({}, options); // extend options with previous values for continued text

            if (this._textOptions) {
              for (var key in this._textOptions) {
                var val = this._textOptions[key];

                if (key !== 'continued') {
                  if (result[key] === undefined) {
                    result[key] = val;
                  }
                }
              }
            } // Update the current position


            if (x != null) {
              this.x = x;
            }

            if (y != null) {
              this.y = y;
            } // wrap to margins if no x or y position passed


            if (result.lineBreak !== false) {
              if (result.width == null) {
                result.width = this.page.width - this.x - this.page.margins.right;
              }

              result.width = Math.max(result.width, 0);
            }

            if (!result.columns) {
              result.columns = 0;
            }

            if (result.columnGap == null) {
              result.columnGap = 18;
            } // 1/4 inch


            return result;
          },
          _line: function _line(text) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            var wrapper = arguments.length > 2 ? arguments[2] : undefined;

            this._fragment(text, this.x, this.y, options);

            var lineGap = options.lineGap || this._lineGap || 0;

            if (!wrapper) {
              return this.x += this.widthOfString(text);
            } else {
              return this.y += this.currentLineHeight(true) + lineGap;
            }
          },
          _fragment: function _fragment(text, x, y, options) {
            var _this3 = this;

            var dy, encoded, i, positions, textWidth, words;
            text = "".concat(text).replace(/\n/g, '');

            if (text.length === 0) {
              return;
            } // handle options


            var align = options.align || 'left';
            var wordSpacing = options.wordSpacing || 0;
            var characterSpacing = options.characterSpacing || 0; // text alignments

            if (options.width) {
              switch (align) {
                case 'right':
                  textWidth = this.widthOfString(text.replace(/\s+$/, ''), options);
                  x += options.lineWidth - textWidth;
                  break;

                case 'center':
                  x += options.lineWidth / 2 - options.textWidth / 2;
                  break;

                case 'justify':
                  // calculate the word spacing value
                  words = text.trim().split(/\s+/);
                  textWidth = this.widthOfString(text.replace(/\s+/g, ''), options);
                  var spaceWidth = this.widthOfString(' ') + characterSpacing;
                  wordSpacing = Math.max(0, (options.lineWidth - textWidth) / Math.max(1, words.length - 1) - spaceWidth);
                  break;
              }
            } // text baseline alignments based on http://wiki.apache.org/xmlgraphics-fop/LineLayout/AlignmentHandling


            if (typeof options.baseline === 'number') {
              dy = -options.baseline;
            } else {
              switch (options.baseline) {
                case 'svg-middle':
                  dy = 0.5 * this._font.xHeight;
                  break;

                case 'middle':
                case 'svg-central':
                  dy = 0.5 * (this._font.descender + this._font.ascender);
                  break;

                case 'bottom':
                case 'ideographic':
                  dy = this._font.descender;
                  break;

                case 'alphabetic':
                  dy = 0;
                  break;

                case 'mathematical':
                  dy = 0.5 * this._font.ascender;
                  break;

                case 'hanging':
                  dy = 0.8 * this._font.ascender;
                  break;

                case 'top':
                  dy = this._font.ascender;
                  break;

                default:
                  dy = this._font.ascender;
              }

              dy = dy / 1000 * this._fontSize;
            } // calculate the actual rendered width of the string after word and character spacing


            var renderedWidth = options.textWidth + wordSpacing * (options.wordCount - 1) + characterSpacing * (text.length - 1); // create link annotations if the link option is given

            if (options.link != null) {
              this.link(x, y, renderedWidth, this.currentLineHeight(), options.link);
            }

            if (options.goTo != null) {
              this.goTo(x, y, renderedWidth, this.currentLineHeight(), options.goTo);
            }

            if (options.destination != null) {
              this.addNamedDestination(options.destination, 'XYZ', x, y, null);
            } // create underline or strikethrough line


            if (options.underline || options.strike) {
              this.save();

              if (!options.stroke) {
                this.strokeColor.apply(this, _toConsumableArray(this._fillColor || []));
              }

              var lineWidth = this._fontSize < 10 ? 0.5 : Math.floor(this._fontSize / 10);
              this.lineWidth(lineWidth);
              var d = options.underline ? 1 : 2;
              var lineY = y + this.currentLineHeight() / d;

              if (options.underline) {
                lineY -= lineWidth;
              }

              this.moveTo(x, lineY);
              this.lineTo(x + renderedWidth, lineY);
              this.stroke();
              this.restore();
            }

            this.save(); // oblique (angle in degrees or boolean)

            if (options.oblique) {
              var skew;

              if (typeof options.oblique === 'number') {
                skew = -Math.tan(options.oblique * Math.PI / 180);
              } else {
                skew = -0.25;
              }

              this.transform(1, 0, 0, 1, x, y);
              this.transform(1, 0, skew, 1, -skew * dy, 0);
              this.transform(1, 0, 0, 1, -x, -y);
            } // flip coordinate system


            this.transform(1, 0, 0, -1, 0, this.page.height);
            y = this.page.height - y - dy; // add current font to page if necessary

            if (this.page.fonts[this._font.id] == null) {
              this.page.fonts[this._font.id] = this._font.ref();
            } // begin the text object


            this.addContent('BT'); // text position

            this.addContent("1 0 0 1 ".concat(number$2(x), " ").concat(number$2(y), " Tm")); // font and font size

            this.addContent("/".concat(this._font.id, " ").concat(number$2(this._fontSize), " Tf")); // rendering mode

            var mode = options.fill && options.stroke ? 2 : options.stroke ? 1 : 0;

            if (mode) {
              this.addContent("".concat(mode, " Tr"));
            } // Character spacing


            if (characterSpacing) {
              this.addContent("".concat(number$2(characterSpacing), " Tc"));
            } // Add the actual text
            // If we have a word spacing value, we need to encode each word separately
            // since the normal Tw operator only works on character code 32, which isn't
            // used for embedded fonts.


            if (wordSpacing) {
              words = text.trim().split(/\s+/);
              wordSpacing += this.widthOfString(' ') + characterSpacing;
              wordSpacing *= 1000 / this._fontSize;
              encoded = [];
              positions = [];
              var _iteratorNormalCompletion2 = true;
              var _didIteratorError2 = false;
              var _iteratorError2 = undefined;

              try {
                for (var _iterator2 = words[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                  var word = _step2.value;

                  var _this$_font$encode = this._font.encode(word, options.features),
                      _this$_font$encode2 = _slicedToArray(_this$_font$encode, 2),
                      encodedWord = _this$_font$encode2[0],
                      positionsWord = _this$_font$encode2[1];

                  encoded = encoded.concat(encodedWord);
                  positions = positions.concat(positionsWord); // add the word spacing to the end of the word
                  // clone object because of cache

                  var space = {};
                  var object = positions[positions.length - 1];

                  for (var key in object) {
                    var val = object[key];
                    space[key] = val;
                  }

                  space.xAdvance += wordSpacing;
                  positions[positions.length - 1] = space;
                }
              } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                    _iterator2.return();
                  }
                } finally {
                  if (_didIteratorError2) {
                    throw _iteratorError2;
                  }
                }
              }
            } else {
              var _this$_font$encode3 = this._font.encode(text, options.features);

              var _this$_font$encode4 = _slicedToArray(_this$_font$encode3, 2);

              encoded = _this$_font$encode4[0];
              positions = _this$_font$encode4[1];
            }

            var scale = this._fontSize / 1000;
            var commands = [];
            var last = 0;
            var hadOffset = false; // Adds a segment of text to the TJ command buffer

            var addSegment = function addSegment(cur) {
              if (last < cur) {
                var hex = encoded.slice(last, cur).join('');
                var advance = positions[cur - 1].xAdvance - positions[cur - 1].advanceWidth;
                commands.push("<".concat(hex, "> ").concat(number$2(-advance)));
              }

              return last = cur;
            }; // Flushes the current TJ commands to the output stream


            var flush = function flush(i) {
              addSegment(i);

              if (commands.length > 0) {
                _this3.addContent("[".concat(commands.join(' '), "] TJ"));

                return commands.length = 0;
              }
            };

            for (i = 0; i < positions.length; i++) {
              // If we have an x or y offset, we have to break out of the current TJ command
              // so we can move the text position.
              var pos = positions[i];

              if (pos.xOffset || pos.yOffset) {
                // Flush the current buffer
                flush(i); // Move the text position and flush just the current character

                this.addContent("1 0 0 1 ".concat(number$2(x + pos.xOffset * scale), " ").concat(number$2(y + pos.yOffset * scale), " Tm"));
                flush(i + 1);
                hadOffset = true;
              } else {
                // If the last character had an offset, reset the text position
                if (hadOffset) {
                  this.addContent("1 0 0 1 ".concat(number$2(x), " ").concat(number$2(y), " Tm"));
                  hadOffset = false;
                } // Group segments that don't have any advance adjustments


                if (pos.xAdvance - pos.advanceWidth !== 0) {
                  addSegment(i + 1);
                }
              }

              x += pos.xAdvance * scale;
            } // Flush any remaining commands


            flush(i); // end the text object

            this.addContent('ET'); // restore flipped coordinate system

            return this.restore();
          }
        };
        var MARKERS = [0xffc0, 0xffc1, 0xffc2, 0xffc3, 0xffc5, 0xffc6, 0xffc7, 0xffc8, 0xffc9, 0xffca, 0xffcb, 0xffcc, 0xffcd, 0xffce, 0xffcf];
        var COLOR_SPACE_MAP = {
          1: 'DeviceGray',
          3: 'DeviceRGB',
          4: 'DeviceCMYK'
        };

        var JPEG = /*#__PURE__*/function () {
          function JPEG(data, label) {
            _classCallCheck(this, JPEG);

            var marker;
            this.data = data;
            this.label = label;

            if (this.data.readUInt16BE(0) !== 0xffd8) {
              throw 'SOI not found in JPEG';
            }

            var pos = 2;

            while (pos < this.data.length) {
              marker = this.data.readUInt16BE(pos);
              pos += 2;

              if (MARKERS.includes(marker)) {
                break;
              }

              pos += this.data.readUInt16BE(pos);
            }

            if (!MARKERS.includes(marker)) {
              throw 'Invalid JPEG.';
            }

            pos += 2;
            this.bits = this.data[pos++];
            this.height = this.data.readUInt16BE(pos);
            pos += 2;
            this.width = this.data.readUInt16BE(pos);
            pos += 2;
            var channels = this.data[pos++];
            this.colorSpace = COLOR_SPACE_MAP[channels];
            this.obj = null;
          }

          _createClass(JPEG, [{
            key: "embed",
            value: function embed(document) {
              if (this.obj) {
                return;
              }

              this.obj = document.ref({
                Type: 'XObject',
                Subtype: 'Image',
                BitsPerComponent: this.bits,
                Width: this.width,
                Height: this.height,
                ColorSpace: this.colorSpace,
                Filter: 'DCTDecode'
              }); // add extra decode params for CMYK images. By swapping the
              // min and max values from the default, we invert the colors. See
              // section 4.8.4 of the spec.

              if (this.colorSpace === 'DeviceCMYK') {
                this.obj.data['Decode'] = [1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0];
              }

              this.obj.end(this.data); // free memory

              return this.data = null;
            }
          }]);

          return JPEG;
        }();

        var PNGImage = /*#__PURE__*/function () {
          function PNGImage(data, label) {
            _classCallCheck(this, PNGImage);

            this.label = label;
            this.image = new _pngJs.default(data);
            this.width = this.image.width;
            this.height = this.image.height;
            this.imgData = this.image.imgData;
            this.obj = null;
          }

          _createClass(PNGImage, [{
            key: "embed",
            value: function embed(document) {
              var dataDecoded = false;
              this.document = document;

              if (this.obj) {
                return;
              }

              var hasAlphaChannel = this.image.hasAlphaChannel;
              var isInterlaced = this.image.interlaceMethod === 1;
              this.obj = this.document.ref({
                Type: 'XObject',
                Subtype: 'Image',
                BitsPerComponent: hasAlphaChannel ? 8 : this.image.bits,
                Width: this.width,
                Height: this.height,
                Filter: 'FlateDecode'
              });

              if (!hasAlphaChannel) {
                var params = this.document.ref({
                  Predictor: isInterlaced ? 1 : 15,
                  Colors: this.image.colors,
                  BitsPerComponent: this.image.bits,
                  Columns: this.width
                });
                this.obj.data['DecodeParms'] = params;
                params.end();
              }

              if (this.image.palette.length === 0) {
                this.obj.data['ColorSpace'] = this.image.colorSpace;
              } else {
                // embed the color palette in the PDF as an object stream
                var palette = this.document.ref();
                palette.end(new Buffer(this.image.palette)); // build the color space array for the image

                this.obj.data['ColorSpace'] = ['Indexed', 'DeviceRGB', this.image.palette.length / 3 - 1, palette];
              } // For PNG color types 0, 2 and 3, the transparency data is stored in
              // a dedicated PNG chunk.


              if (this.image.transparency.grayscale != null) {
                // Use Color Key Masking (spec section 4.8.5)
                // An array with N elements, where N is two times the number of color components.
                var val = this.image.transparency.grayscale;
                this.obj.data['Mask'] = [val, val];
              } else if (this.image.transparency.rgb) {
                // Use Color Key Masking (spec section 4.8.5)
                // An array with N elements, where N is two times the number of color components.
                var rgb = this.image.transparency.rgb;
                var mask = [];
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                  for (var _iterator = rgb[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var x = _step.value;
                    mask.push(x, x);
                  }
                } catch (err) {
                  _didIteratorError = true;
                  _iteratorError = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion && _iterator.return != null) {
                      _iterator.return();
                    }
                  } finally {
                    if (_didIteratorError) {
                      throw _iteratorError;
                    }
                  }
                }

                this.obj.data['Mask'] = mask;
              } else if (this.image.transparency.indexed) {
                // Create a transparency SMask for the image based on the data
                // in the PLTE and tRNS sections. See below for details on SMasks.
                dataDecoded = true;
                return this.loadIndexedAlphaChannel();
              } else if (hasAlphaChannel) {
                // For PNG color types 4 and 6, the transparency data is stored as a alpha
                // channel mixed in with the main image data. Separate this data out into an
                // SMask object and store it separately in the PDF.
                dataDecoded = true;
                return this.splitAlphaChannel();
              }

              if (isInterlaced && !dataDecoded) {
                return this.decodeData();
              }

              this.finalize();
            }
          }, {
            key: "finalize",
            value: function finalize() {
              if (this.alphaChannel) {
                var sMask = this.document.ref({
                  Type: 'XObject',
                  Subtype: 'Image',
                  Height: this.height,
                  Width: this.width,
                  BitsPerComponent: 8,
                  Filter: 'FlateDecode',
                  ColorSpace: 'DeviceGray',
                  Decode: [0, 1]
                });
                sMask.end(this.alphaChannel);
                this.obj.data['SMask'] = sMask;
              } // add the actual image data


              this.obj.end(this.imgData); // free memory

              this.image = null;
              return this.imgData = null;
            }
          }, {
            key: "splitAlphaChannel",
            value: function splitAlphaChannel() {
              var _this = this;

              return this.image.decodePixels(function (pixels) {
                var a, p;
                var colorCount = _this.image.colors;
                var pixelCount = _this.width * _this.height;
                var imgData = new Buffer(pixelCount * colorCount);
                var alphaChannel = new Buffer(pixelCount);
                var i = p = a = 0;
                var len = pixels.length; // For 16bit images copy only most significant byte (MSB) - PNG data is always stored in network byte order (MSB first)

                var skipByteCount = _this.image.bits === 16 ? 1 : 0;

                while (i < len) {
                  for (var colorIndex = 0; colorIndex < colorCount; colorIndex++) {
                    imgData[p++] = pixels[i++];
                    i += skipByteCount;
                  }

                  alphaChannel[a++] = pixels[i++];
                  i += skipByteCount;
                }

                _this.imgData = _zlib.default.deflateSync(imgData);
                _this.alphaChannel = _zlib.default.deflateSync(alphaChannel);
                return _this.finalize();
              });
            }
          }, {
            key: "loadIndexedAlphaChannel",
            value: function loadIndexedAlphaChannel() {
              var _this2 = this;

              var transparency = this.image.transparency.indexed;
              return this.image.decodePixels(function (pixels) {
                var alphaChannel = new Buffer(_this2.width * _this2.height);
                var i = 0;

                for (var j = 0, end = pixels.length; j < end; j++) {
                  alphaChannel[i++] = transparency[pixels[j]];
                }

                _this2.alphaChannel = _zlib.default.deflateSync(alphaChannel);
                return _this2.finalize();
              });
            }
          }, {
            key: "decodeData",
            value: function decodeData() {
              var _this3 = this;

              this.image.decodePixels(function (pixels) {
                _this3.imgData = _zlib.default.deflateSync(pixels);

                _this3.finalize();
              });
            }
          }]);

          return PNGImage;
        }();

        var PDFImage = /*#__PURE__*/function () {
          function PDFImage() {
            _classCallCheck(this, PDFImage);
          }

          _createClass(PDFImage, null, [{
            key: "open",
            value: function open(src, label) {
              var data;

              if (Buffer.isBuffer(src)) {
                data = src;
              } else if (src instanceof ArrayBuffer) {
                data = new Buffer(new Uint8Array(src));
              } else {
                var match;

                if (match = /^data:.+;base64,(.*)$/.exec(src)) {
                  data = new Buffer(match[1], 'base64');
                } else {
                  data = fs.readFileSync(src);

                  if (!data) {
                    return;
                  }
                }
              }

              if (data[0] === 0xff && data[1] === 0xd8) {
                return new JPEG(data, label);
              } else if (data[0] === 0x89 && data.toString('ascii', 1, 4) === 'PNG') {
                return new PNGImage(data, label);
              } else {
                throw new Error('Unknown image format.');
              }
            }
          }]);

          return PDFImage;
        }();

        var ImagesMixin = {
          initImages: function initImages() {
            this._imageRegistry = {};
            return this._imageCount = 0;
          },
          image: function image(src, x, y) {
            var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var bh, bp, bw, image, ip, left, left1;

            if (_typeof4(x) === 'object') {
              options = x;
              x = null;
            }

            x = (left = x != null ? x : options.x) != null ? left : this.x;
            y = (left1 = y != null ? y : options.y) != null ? left1 : this.y;

            if (typeof src === 'string') {
              image = this._imageRegistry[src];
            }

            if (!image) {
              if (src.width && src.height) {
                image = src;
              } else {
                image = this.openImage(src);
              }
            }

            if (!image.obj) {
              image.embed(this);
            }

            if (this.page.xobjects[image.label] == null) {
              this.page.xobjects[image.label] = image.obj;
            }

            var w = options.width || image.width;
            var h = options.height || image.height;

            if (options.width && !options.height) {
              var wp = w / image.width;
              w = image.width * wp;
              h = image.height * wp;
            } else if (options.height && !options.width) {
              var hp = h / image.height;
              w = image.width * hp;
              h = image.height * hp;
            } else if (options.scale) {
              w = image.width * options.scale;
              h = image.height * options.scale;
            } else if (options.fit) {
              var _options$fit = _slicedToArray(options.fit, 2);

              bw = _options$fit[0];
              bh = _options$fit[1];
              bp = bw / bh;
              ip = image.width / image.height;

              if (ip > bp) {
                w = bw;
                h = bw / ip;
              } else {
                h = bh;
                w = bh * ip;
              }
            } else if (options.cover) {
              var _options$cover = _slicedToArray(options.cover, 2);

              bw = _options$cover[0];
              bh = _options$cover[1];
              bp = bw / bh;
              ip = image.width / image.height;

              if (ip > bp) {
                h = bh;
                w = bh * ip;
              } else {
                w = bw;
                h = bw / ip;
              }
            }

            if (options.fit || options.cover) {
              if (options.align === 'center') {
                x = x + bw / 2 - w / 2;
              } else if (options.align === 'right') {
                x = x + bw - w;
              }

              if (options.valign === 'center') {
                y = y + bh / 2 - h / 2;
              } else if (options.valign === 'bottom') {
                y = y + bh - h;
              }
            } // create link annotations if the link option is given


            if (options.link != null) {
              this.link(x, y, w, h, options.link);
            }

            if (options.goTo != null) {
              this.goTo(x, y, w, h, options.goTo);
            }

            if (options.destination != null) {
              this.addNamedDestination(options.destination, 'XYZ', x, y, null);
            } // Set the current y position to below the image if it is in the document flow


            if (this.y === y) {
              this.y += h;
            }

            this.save();
            this.transform(w, 0, 0, -h, x, y + h);
            this.addContent("/".concat(image.label, " Do"));
            this.restore();
            return this;
          },
          openImage: function openImage(src) {
            var image;

            if (typeof src === 'string') {
              image = this._imageRegistry[src];
            }

            if (!image) {
              image = PDFImage.open(src, "I".concat(++this._imageCount));

              if (typeof src === 'string') {
                this._imageRegistry[src] = image;
              }
            }

            return image;
          }
        };
        var AnnotationsMixin = {
          annotate: function annotate(x, y, w, h, options) {
            options.Type = 'Annot';
            options.Rect = this._convertRect(x, y, w, h);
            options.Border = [0, 0, 0];

            if (options.Subtype === 'Link' && typeof options.F === 'undefined') {
              options.F = 1 << 2; // Print Annotation Flag
            }

            if (options.Subtype !== 'Link') {
              if (options.C == null) {
                options.C = this._normalizeColor(options.color || [0, 0, 0]);
              }
            } // convert colors


            delete options.color;

            if (typeof options.Dest === 'string') {
              options.Dest = new String(options.Dest);
            } // Capitalize keys


            for (var key in options) {
              var val = options[key];
              options[key[0].toUpperCase() + key.slice(1)] = val;
            }

            var ref = this.ref(options);
            this.page.annotations.push(ref);
            ref.end();
            return this;
          },
          note: function note(x, y, w, h, contents) {
            var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};
            options.Subtype = 'Text';
            options.Contents = new String(contents);
            options.Name = 'Comment';

            if (options.color == null) {
              options.color = [243, 223, 92];
            }

            return this.annotate(x, y, w, h, options);
          },
          goTo: function goTo(x, y, w, h, name) {
            var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};
            options.Subtype = 'Link';
            options.A = this.ref({
              S: 'GoTo',
              D: new String(name)
            });
            options.A.end();
            return this.annotate(x, y, w, h, options);
          },
          link: function link(x, y, w, h, url) {
            var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};
            options.Subtype = 'Link';

            if (typeof url === 'number') {
              // Link to a page in the document (the page must already exist)
              var pages = this._root.data.Pages.data;

              if (url >= 0 && url < pages.Kids.length) {
                options.A = this.ref({
                  S: 'GoTo',
                  D: [pages.Kids[url], 'XYZ', null, null, null]
                });
                options.A.end();
              } else {
                throw new Error("The document has no page ".concat(url));
              }
            } else {
              // Link to an external url
              options.A = this.ref({
                S: 'URI',
                URI: new String(url)
              });
              options.A.end();
            }

            return this.annotate(x, y, w, h, options);
          },
          _markup: function _markup(x, y, w, h) {
            var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};

            var _this$_convertRect = this._convertRect(x, y, w, h),
                _this$_convertRect2 = _slicedToArray(_this$_convertRect, 4),
                x1 = _this$_convertRect2[0],
                y1 = _this$_convertRect2[1],
                x2 = _this$_convertRect2[2],
                y2 = _this$_convertRect2[3];

            options.QuadPoints = [x1, y2, x2, y2, x1, y1, x2, y1];
            options.Contents = new String();
            return this.annotate(x, y, w, h, options);
          },
          highlight: function highlight(x, y, w, h) {
            var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
            options.Subtype = 'Highlight';

            if (options.color == null) {
              options.color = [241, 238, 148];
            }

            return this._markup(x, y, w, h, options);
          },
          underline: function underline(x, y, w, h) {
            var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
            options.Subtype = 'Underline';
            return this._markup(x, y, w, h, options);
          },
          strike: function strike(x, y, w, h) {
            var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
            options.Subtype = 'StrikeOut';
            return this._markup(x, y, w, h, options);
          },
          lineAnnotation: function lineAnnotation(x1, y1, x2, y2) {
            var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
            options.Subtype = 'Line';
            options.Contents = new String();
            options.L = [x1, this.page.height - y1, x2, this.page.height - y2];
            return this.annotate(x1, y1, x2, y2, options);
          },
          rectAnnotation: function rectAnnotation(x, y, w, h) {
            var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
            options.Subtype = 'Square';
            options.Contents = new String();
            return this.annotate(x, y, w, h, options);
          },
          ellipseAnnotation: function ellipseAnnotation(x, y, w, h) {
            var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
            options.Subtype = 'Circle';
            options.Contents = new String();
            return this.annotate(x, y, w, h, options);
          },
          textAnnotation: function textAnnotation(x, y, w, h, text) {
            var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};
            options.Subtype = 'FreeText';
            options.Contents = new String(text);
            options.DA = new String();
            return this.annotate(x, y, w, h, options);
          },
          _convertRect: function _convertRect(x1, y1, w, h) {
            // flip y1 and y2
            var y2 = y1;
            y1 += h; // make x2

            var x2 = x1 + w; // apply current transformation matrix to points

            var _this$_ctm = _slicedToArray(this._ctm, 6),
                m0 = _this$_ctm[0],
                m1 = _this$_ctm[1],
                m2 = _this$_ctm[2],
                m3 = _this$_ctm[3],
                m4 = _this$_ctm[4],
                m5 = _this$_ctm[5];

            x1 = m0 * x1 + m2 * y1 + m4;
            y1 = m1 * x1 + m3 * y1 + m5;
            x2 = m0 * x2 + m2 * y2 + m4;
            y2 = m1 * x2 + m3 * y2 + m5;
            return [x1, y1, x2, y2];
          }
        };

        var PDFOutline = /*#__PURE__*/function () {
          function PDFOutline(document, parent, title, dest) {
            var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {
              expanded: false
            };

            _classCallCheck(this, PDFOutline);

            this.document = document;
            this.options = options;
            this.outlineData = {};

            if (dest !== null) {
              this.outlineData['Dest'] = [dest.dictionary, 'Fit'];
            }

            if (parent !== null) {
              this.outlineData['Parent'] = parent;
            }

            if (title !== null) {
              this.outlineData['Title'] = new String(title);
            }

            this.dictionary = this.document.ref(this.outlineData);
            this.children = [];
          }

          _createClass(PDFOutline, [{
            key: "addItem",
            value: function addItem(title) {
              var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
                expanded: false
              };
              var result = new PDFOutline(this.document, this.dictionary, title, this.document.page, options);
              this.children.push(result);
              return result;
            }
          }, {
            key: "endOutline",
            value: function endOutline() {
              if (this.children.length > 0) {
                if (this.options.expanded) {
                  this.outlineData.Count = this.children.length;
                }

                var first = this.children[0],
                    last = this.children[this.children.length - 1];
                this.outlineData.First = first.dictionary;
                this.outlineData.Last = last.dictionary;

                for (var i = 0, len = this.children.length; i < len; i++) {
                  var child = this.children[i];

                  if (i > 0) {
                    child.outlineData.Prev = this.children[i - 1].dictionary;
                  }

                  if (i < this.children.length - 1) {
                    child.outlineData.Next = this.children[i + 1].dictionary;
                  }

                  child.endOutline();
                }
              }

              return this.dictionary.end();
            }
          }]);

          return PDFOutline;
        }();

        var OutlineMixin = {
          initOutline: function initOutline() {
            return this.outline = new PDFOutline(this, null, null, null);
          },
          endOutline: function endOutline() {
            this.outline.endOutline();

            if (this.outline.children.length > 0) {
              this._root.data.Outlines = this.outline.dictionary;
              return this._root.data.PageMode = 'UseOutlines';
            }
          }
        };
        var FIELD_FLAGS = {
          readOnly: 1,
          required: 2,
          noExport: 4,
          multiline: 0x1000,
          password: 0x2000,
          toggleToOffButton: 0x4000,
          radioButton: 0x8000,
          pushButton: 0x10000,
          combo: 0x20000,
          edit: 0x40000,
          sort: 0x80000,
          multiSelect: 0x200000,
          noSpell: 0x400000
        };
        var FIELD_JUSTIFY = {
          left: 0,
          center: 1,
          right: 2
        };
        var VALUE_MAP = {
          value: 'V',
          defaultValue: 'DV'
        };
        var FORMAT_SPECIAL = {
          zip: '0',
          zipPlus4: '1',
          zip4: '1',
          phone: '2',
          ssn: '3'
        };
        var FORMAT_DEFAULT = {
          number: {
            nDec: 0,
            sepComma: false,
            negStyle: 'MinusBlack',
            currency: '',
            currencyPrepend: true
          },
          percent: {
            nDec: 0,
            sepComma: false
          }
        };
        var AcroFormMixin = {
          /**
           * Must call if adding AcroForms to a document. Must also call font() before
           * this method to set the default font.
           */
          initForm: function initForm() {
            if (!this._font) {
              throw new Error('Must set a font before calling initForm method');
            }

            this._acroform = {
              fonts: {},
              defaultFont: this._font.name
            };
            this._acroform.fonts[this._font.id] = this._font.ref();
            var data = {
              Fields: [],
              NeedAppearances: true,
              DA: new String("/".concat(this._font.id, " 0 Tf 0 g")),
              DR: {
                Font: {}
              }
            };
            data.DR.Font[this._font.id] = this._font.ref();
            var AcroForm = this.ref(data);
            this._root.data.AcroForm = AcroForm;
            return this;
          },

          /**
           * Called automatically by document.js
           */
          endAcroForm: function endAcroForm() {
            var _this = this;

            if (this._root.data.AcroForm) {
              if (!Object.keys(this._acroform.fonts).length && !this._acroform.defaultFont) {
                throw new Error('No fonts specified for PDF form');
              }

              var fontDict = this._root.data.AcroForm.data.DR.Font;
              Object.keys(this._acroform.fonts).forEach(function (name) {
                fontDict[name] = _this._acroform.fonts[name];
              });

              this._root.data.AcroForm.data.Fields.forEach(function (fieldRef) {
                _this._endChild(fieldRef);
              });

              this._root.data.AcroForm.end();
            }

            return this;
          },
          _endChild: function _endChild(ref) {
            var _this2 = this;

            if (Array.isArray(ref.data.Kids)) {
              ref.data.Kids.forEach(function (childRef) {
                _this2._endChild(childRef);
              });
              ref.end();
            }

            return this;
          },

          /**
           * Creates and adds a form field to the document. Form fields are intermediate
           * nodes in a PDF form that are used to specify form name heirarchy and form
           * value defaults.
           * @param {string} name - field name (T attribute in field dictionary)
           * @param {object} options  - other attributes to include in field dictionary
           */
          formField: function formField(name) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            var fieldDict = this._fieldDict(name, null, options);

            var fieldRef = this.ref(fieldDict);

            this._addToParent(fieldRef);

            return fieldRef;
          },

          /**
           * Creates and adds a Form Annotation to the document. Form annotations are
           * called Widget annotations internally within a PDF file.
           * @param {string} name - form field name (T attribute of widget annotation
           * dictionary)
           * @param {number} x
           * @param {number} y
           * @param {number} w
           * @param {number} h
           * @param {object} options
           */
          formAnnotation: function formAnnotation(name, type, x, y, w, h) {
            var options = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : {};

            var fieldDict = this._fieldDict(name, type, options);

            fieldDict.Subtype = 'Widget';

            if (fieldDict.F === undefined) {
              fieldDict.F = 4; // print the annotation
            } // Add Field annot to page, and get it's ref


            this.annotate(x, y, w, h, fieldDict);
            var annotRef = this.page.annotations[this.page.annotations.length - 1];
            return this._addToParent(annotRef);
          },
          formText: function formText(name, x, y, w, h) {
            var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};
            return this.formAnnotation(name, 'text', x, y, w, h, options);
          },
          formPushButton: function formPushButton(name, x, y, w, h) {
            var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};
            return this.formAnnotation(name, 'pushButton', x, y, w, h, options);
          },
          formCombo: function formCombo(name, x, y, w, h) {
            var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};
            return this.formAnnotation(name, 'combo', x, y, w, h, options);
          },
          formList: function formList(name, x, y, w, h) {
            var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};
            return this.formAnnotation(name, 'list', x, y, w, h, options);
          },
          formRadioButton: function formRadioButton(name, x, y, w, h) {
            var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};
            return this.formAnnotation(name, 'radioButton', x, y, w, h, options);
          },
          formCheckbox: function formCheckbox(name, x, y, w, h) {
            var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};
            return this.formAnnotation(name, 'checkbox', x, y, w, h, options);
          },
          _addToParent: function _addToParent(fieldRef) {
            var parent = fieldRef.data.Parent;

            if (parent) {
              if (!parent.data.Kids) {
                parent.data.Kids = [];
              }

              parent.data.Kids.push(fieldRef);
            } else {
              this._root.data.AcroForm.data.Fields.push(fieldRef);
            }

            return this;
          },
          _fieldDict: function _fieldDict(name, type) {
            var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

            if (!this._acroform) {
              throw new Error('Call document.initForms() method before adding form elements to document');
            }

            var opts = Object.assign({}, options);

            if (type !== null) {
              opts = this._resolveType(type, options);
            }

            opts = this._resolveFlags(opts);
            opts = this._resolveJustify(opts);
            opts = this._resolveFont(opts);
            opts = this._resolveStrings(opts);
            opts = this._resolveColors(opts);
            opts = this._resolveFormat(opts);
            opts.T = new String(name);

            if (opts.parent) {
              opts.Parent = opts.parent;
              delete opts.parent;
            }

            return opts;
          },
          _resolveType: function _resolveType(type, opts) {
            if (type === 'text') {
              opts.FT = 'Tx';
            } else if (type === 'pushButton') {
              opts.FT = 'Btn';
              opts.pushButton = true;
            } else if (type === 'radioButton') {
              opts.FT = 'Btn';
              opts.radioButton = true;
            } else if (type === 'checkbox') {
              opts.FT = 'Btn';
            } else if (type === 'combo') {
              opts.FT = 'Ch';
              opts.combo = true;
            } else if (type === 'list') {
              opts.FT = 'Ch';
            } else {
              throw new Error("Invalid form annotation type '".concat(type, "'"));
            }

            return opts;
          },
          _resolveFormat: function _resolveFormat(opts) {
            var f = opts.format;

            if (f && f.type) {
              var fnKeystroke;
              var fnFormat;
              var params = '';

              if (FORMAT_SPECIAL[f.type] !== undefined) {
                fnKeystroke = "AFSpecial_Keystroke";
                fnFormat = "AFSpecial_Format";
                params = FORMAT_SPECIAL[f.type];
              } else {
                var format = f.type.charAt(0).toUpperCase() + f.type.slice(1);
                fnKeystroke = "AF".concat(format, "_Keystroke");
                fnFormat = "AF".concat(format, "_Format");

                if (f.type === 'date') {
                  fnKeystroke += 'Ex';
                  params = String(f.param);
                } else if (f.type === 'time') {
                  params = String(f.param);
                } else if (f.type === 'number') {
                  var p = Object.assign({}, FORMAT_DEFAULT.number, f);
                  params = String([String(p.nDec), p.sepComma ? '0' : '1', '"' + p.negStyle + '"', 'null', '"' + p.currency + '"', String(p.currencyPrepend)].join(','));
                } else if (f.type === 'percent') {
                  var _p = Object.assign({}, FORMAT_DEFAULT.percent, f);

                  params = String([String(_p.nDec), _p.sepComma ? '0' : '1'].join(','));
                }
              }

              opts.AA = opts.AA ? opts.AA : {};
              opts.AA.K = {
                S: 'JavaScript',
                JS: new String("".concat(fnKeystroke, "(").concat(params, ");"))
              };
              opts.AA.F = {
                S: 'JavaScript',
                JS: new String("".concat(fnFormat, "(").concat(params, ");"))
              };
            }

            delete opts.format;
            return opts;
          },
          _resolveColors: function _resolveColors(opts) {
            var color = this._normalizeColor(opts.backgroundColor);

            if (color) {
              if (!opts.MK) {
                opts.MK = {};
              }

              opts.MK.BG = color;
            }

            color = this._normalizeColor(opts.borderColor);

            if (color) {
              if (!opts.MK) {
                opts.MK = {};
              }

              opts.MK.BC = color;
            }

            delete opts.backgroundColor;
            delete opts.borderColor;
            return opts;
          },
          _resolveFlags: function _resolveFlags(options) {
            var result = 0;
            Object.keys(options).forEach(function (key) {
              if (FIELD_FLAGS[key]) {
                result |= FIELD_FLAGS[key];
                delete options[key];
              }
            });

            if (result !== 0) {
              options.Ff = options.Ff ? options.Ff : 0;
              options.Ff |= result;
            }

            return options;
          },
          _resolveJustify: function _resolveJustify(options) {
            var result = 0;

            if (options.align !== undefined) {
              if (typeof FIELD_JUSTIFY[options.align] === 'number') {
                result = FIELD_JUSTIFY[options.align];
              }

              delete options.align;
            }

            if (result !== 0) {
              options.Q = result; // default
            }

            return options;
          },
          _resolveFont: function _resolveFont(options) {
            // add current font to document-level AcroForm dict if necessary
            if (this._acroform.fonts[this._font.id] === null) {
              this._acroform.fonts[this._font.id] = this._font.ref();
            } // add current font to field's resource dict (RD) if not the default acroform font


            if (this._acroform.defaultFont !== this._font.name) {
              options.DR = {
                Font: {}
              };
              options.DR.Font[this._font.id] = this._font.ref();
              options.DA = new String("/".concat(this._font.id, " 0 Tf 0 g"));
            }

            return options;
          },
          _resolveStrings: function _resolveStrings(options) {
            var select = [];

            function appendChoices(a) {
              if (Array.isArray(a)) {
                for (var idx = 0; idx < a.length; idx++) {
                  if (typeof a[idx] === 'string') {
                    select.push(new String(a[idx]));
                  } else {
                    select.push(a[idx]);
                  }
                }
              }
            }

            appendChoices(options.Opt);

            if (options.select) {
              appendChoices(options.select);
              delete options.select;
            }

            if (select.length) {
              options.Opt = select;
            }

            if (options.value || options.defaultValue) ;
            Object.keys(VALUE_MAP).forEach(function (key) {
              if (options[key] !== undefined) {
                options[VALUE_MAP[key]] = options[key];
                delete options[key];
              }
            });
            ['V', 'DV'].forEach(function (key) {
              if (typeof options[key] === 'string') {
                options[key] = new String(options[key]);
              }
            });

            if (options.MK && options.MK.CA) {
              options.MK.CA = new String(options.MK.CA);
            }

            if (options.label) {
              options.MK = options.MK ? options.MK : {};
              options.MK.CA = new String(options.label);
              delete options.label;
            }

            return options;
          }
        };

        var PDFDocument = /*#__PURE__*/function (_stream$Readable) {
          _inherits(PDFDocument, _stream$Readable);

          function PDFDocument() {
            var _this;

            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

            _classCallCheck(this, PDFDocument);

            _this = _possibleConstructorReturn(this, _getPrototypeOf(PDFDocument).call(this, options));
            _this.options = options; // PDF version

            switch (options.pdfVersion) {
              case '1.4':
                _this.version = 1.4;
                break;

              case '1.5':
                _this.version = 1.5;
                break;

              case '1.6':
                _this.version = 1.6;
                break;

              case '1.7':
              case '1.7ext3':
                _this.version = 1.7;
                break;

              default:
                _this.version = 1.3;
                break;
            } // Whether streams should be compressed


            _this.compress = _this.options.compress != null ? _this.options.compress : true;
            _this._pageBuffer = [];
            _this._pageBufferStart = 0; // The PDF object store

            _this._offsets = [];
            _this._waiting = 0;
            _this._ended = false;
            _this._offset = 0;

            var Pages = _this.ref({
              Type: 'Pages',
              Count: 0,
              Kids: []
            });

            var Names = _this.ref({
              Dests: new PDFNameTree()
            });

            _this._root = _this.ref({
              Type: 'Catalog',
              Pages: Pages,
              Names: Names
            }); // The current page

            _this.page = null; // Initialize mixins

            _this.initColor();

            _this.initVector();

            _this.initFonts(options.font);

            _this.initText();

            _this.initImages();

            _this.initOutline(); // Initialize the metadata


            _this.info = {
              Producer: 'PDFKit',
              Creator: 'PDFKit',
              CreationDate: new Date()
            };

            if (_this.options.info) {
              for (var key in _this.options.info) {
                var val = _this.options.info[key];
                _this.info[key] = val;
              }
            } // Generate file ID


            _this._id = PDFSecurity.generateFileID(_this.info); // Initialize security settings

            _this._security = PDFSecurity.create(_assertThisInitialized(_this), options); // Write the header
            // PDF version

            _this._write("%PDF-".concat(_this.version)); // 4 binary chars, as recommended by the spec


            _this._write('%\xFF\xFF\xFF\xFF'); // Add the first page


            if (_this.options.autoFirstPage !== false) {
              _this.addPage();
            }

            return _this;
          }

          _createClass(PDFDocument, [{
            key: "addPage",
            value: function addPage(options) {
              // end the current page if needed
              if (options == null) {
                options = this.options;
              }

              if (!this.options.bufferPages) {
                this.flushPages();
              } // create a page object


              this.page = new PDFPage(this, options);

              this._pageBuffer.push(this.page); // add the page to the object store


              var pages = this._root.data.Pages.data;
              pages.Kids.push(this.page.dictionary);
              pages.Count++; // reset x and y coordinates

              this.x = this.page.margins.left;
              this.y = this.page.margins.top; // flip PDF coordinate system so that the origin is in
              // the top left rather than the bottom left

              this._ctm = [1, 0, 0, 1, 0, 0];
              this.transform(1, 0, 0, -1, 0, this.page.height);
              this.emit('pageAdded');
              return this;
            }
          }, {
            key: "bufferedPageRange",
            value: function bufferedPageRange() {
              return {
                start: this._pageBufferStart,
                count: this._pageBuffer.length
              };
            }
          }, {
            key: "switchToPage",
            value: function switchToPage(n) {
              var page;

              if (!(page = this._pageBuffer[n - this._pageBufferStart])) {
                throw new Error("switchToPage(".concat(n, ") out of bounds, current buffer covers pages ").concat(this._pageBufferStart, " to ").concat(this._pageBufferStart + this._pageBuffer.length - 1));
              }

              return this.page = page;
            }
          }, {
            key: "flushPages",
            value: function flushPages() {
              // this local variable exists so we're future-proof against
              // reentrant calls to flushPages.
              var pages = this._pageBuffer;
              this._pageBuffer = [];
              this._pageBufferStart += pages.length;
              var _iteratorNormalCompletion = true;
              var _didIteratorError = false;
              var _iteratorError = undefined;

              try {
                for (var _iterator = pages[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                  var page = _step.value;
                  page.end();
                }
              } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                  }
                } finally {
                  if (_didIteratorError) {
                    throw _iteratorError;
                  }
                }
              }
            }
          }, {
            key: "addNamedDestination",
            value: function addNamedDestination(name) {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }

              if (args.length === 0) {
                args = ['XYZ', null, null, null];
              }

              if (args[0] === 'XYZ' && args[2] !== null) {
                args[2] = this.page.height - args[2];
              }

              args.unshift(this.page.dictionary);

              this._root.data.Names.data.Dests.add(name, args);
            }
          }, {
            key: "addNamedJavaScript",
            value: function addNamedJavaScript(name, js) {
              if (!this._root.data.Names.data.JavaScript) {
                this._root.data.Names.data.JavaScript = new PDFNameTree();
              }

              var data = {
                JS: new String(js),
                S: 'JavaScript'
              };

              this._root.data.Names.data.JavaScript.add(name, data);
            }
          }, {
            key: "ref",
            value: function ref(data) {
              var ref = new PDFReference(this, this._offsets.length + 1, data);

              this._offsets.push(null); // placeholder for this object's offset once it is finalized


              this._waiting++;
              return ref;
            }
          }, {
            key: "_read",
            value: function _read() {} // do nothing, but this method is required by node

          }, {
            key: "_write",
            value: function _write(data) {
              if (!Buffer.isBuffer(data)) {
                data = new Buffer(data + '\n', 'binary');
              }

              this.push(data);
              return this._offset += data.length;
            }
          }, {
            key: "addContent",
            value: function addContent(data) {
              this.page.write(data);
              return this;
            }
          }, {
            key: "_refEnd",
            value: function _refEnd(ref) {
              this._offsets[ref.id - 1] = ref.offset;

              if (--this._waiting === 0 && this._ended) {
                this._finalize();

                return this._ended = false;
              }
            }
          }, {
            key: "write",
            value: function write(filename, fn) {
              // print a deprecation warning with a stacktrace
              var err = new Error("PDFDocument#write is deprecated, and will be removed in a future version of PDFKit. Please pipe the document into a Node stream.");
              console.warn(err.stack);
              this.pipe(fs.createWriteStream(filename));
              this.end();
              return this.once('end', fn);
            }
          }, {
            key: "end",
            value: function end() {
              this.flushPages();
              this._info = this.ref();

              for (var key in this.info) {
                var val = this.info[key];

                if (typeof val === 'string') {
                  val = new String(val);
                }

                var entry = this.ref(val);
                entry.end();
                this._info.data[key] = entry;
              }

              this._info.end();

              for (var name in this._fontFamilies) {
                var font = this._fontFamilies[name];
                font.finalize();
              }

              this.endOutline();

              this._root.end();

              this._root.data.Pages.end();

              this._root.data.Names.end();

              this.endAcroForm();

              if (this._security) {
                this._security.end();
              }

              if (this._waiting === 0) {
                return this._finalize();
              } else {
                return this._ended = true;
              }
            }
          }, {
            key: "_finalize",
            value: function _finalize(fn) {
              // generate xref
              var xRefOffset = this._offset;

              this._write('xref');

              this._write("0 ".concat(this._offsets.length + 1));

              this._write('0000000000 65535 f ');

              var _iteratorNormalCompletion2 = true;
              var _didIteratorError2 = false;
              var _iteratorError2 = undefined;

              try {
                for (var _iterator2 = this._offsets[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                  var offset = _step2.value;
                  offset = "0000000000".concat(offset).slice(-10);

                  this._write(offset + ' 00000 n ');
                } // trailer

              } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                    _iterator2.return();
                  }
                } finally {
                  if (_didIteratorError2) {
                    throw _iteratorError2;
                  }
                }
              }

              var trailer = {
                Size: this._offsets.length + 1,
                Root: this._root,
                Info: this._info,
                ID: [this._id, this._id]
              };

              if (this._security) {
                trailer.Encrypt = this._security.dictionary;
              }

              this._write('trailer');

              this._write(PDFObject.convert(trailer));

              this._write('startxref');

              this._write("".concat(xRefOffset));

              this._write('%%EOF'); // end the stream


              return this.push(null);
            }
          }, {
            key: "toString",
            value: function toString() {
              return '[object PDFDocument]';
            }
          }]);

          return PDFDocument;
        }(_stream.default.Readable);

        var mixin = function mixin(methods) {
          Object.assign(PDFDocument.prototype, methods);
        };

        mixin(ColorMixin);
        mixin(VectorMixin);
        mixin(FontsMixin);
        mixin(TextMixin);
        mixin(ImagesMixin);
        mixin(AnnotationsMixin);
        mixin(OutlineMixin);
        mixin(AcroFormMixin);
        var _default = PDFDocument;
        exports.default = _default;
        /* WEBPACK VAR INJECTION */
      }).call(this, __webpack_require__(10).Buffer, "/");
      /***/
    },
    /* 308 */

    /***/
    function (module, exports, __webpack_require__) {
      var global = __webpack_require__(3);

      var inspectSource = __webpack_require__(140);

      var WeakMap = global.WeakMap;
      module.exports = typeof WeakMap === 'function' && /native code/.test(inspectSource(WeakMap));
      /***/
    },
    /* 309 */

    /***/
    function (module, exports, __webpack_require__) {
      var getBuiltIn = __webpack_require__(36);

      var getOwnPropertyNamesModule = __webpack_require__(57);

      var getOwnPropertySymbolsModule = __webpack_require__(143);

      var anObject = __webpack_require__(16); // all object keys, includes non-enumerable and symbols


      module.exports = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {
        var keys = getOwnPropertyNamesModule.f(anObject(it));
        var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
        return getOwnPropertySymbols ? keys.concat(getOwnPropertySymbols(it)) : keys;
      };
      /***/

    },
    /* 310 */

    /***/
    function (module, exports, __webpack_require__) {
      var DESCRIPTORS = __webpack_require__(11);

      var definePropertyModule = __webpack_require__(15);

      var anObject = __webpack_require__(16);

      var objectKeys = __webpack_require__(94); // `Object.defineProperties` method
      // https://tc39.github.io/ecma262/#sec-object.defineproperties


      module.exports = DESCRIPTORS ? Object.defineProperties : function defineProperties(O, Properties) {
        anObject(O);
        var keys = objectKeys(Properties);
        var length = keys.length;
        var index = 0;
        var key;

        while (length > index) {
          definePropertyModule.f(O, key = keys[index++], Properties[key]);
        }

        return O;
      };
      /***/
    },
    /* 311 */

    /***/
    function (module, exports, __webpack_require__) {
      var toIndexedObject = __webpack_require__(27);

      var nativeGetOwnPropertyNames = __webpack_require__(57).f;

      var toString = {}.toString;
      var windowNames = (typeof window === "undefined" ? "undefined" : _typeof4(window)) == 'object' && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];

      var getWindowNames = function getWindowNames(it) {
        try {
          return nativeGetOwnPropertyNames(it);
        } catch (error) {
          return windowNames.slice();
        }
      }; // fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window


      module.exports.f = function getOwnPropertyNames(it) {
        return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : nativeGetOwnPropertyNames(toIndexedObject(it));
      };
      /***/

    },
    /* 312 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var $ = __webpack_require__(1);

      var $every = __webpack_require__(20).every;

      var arrayMethodIsStrict = __webpack_require__(59);

      var arrayMethodUsesToLength = __webpack_require__(31);

      var STRICT_METHOD = arrayMethodIsStrict('every');
      var USES_TO_LENGTH = arrayMethodUsesToLength('every'); // `Array.prototype.every` method
      // https://tc39.github.io/ecma262/#sec-array.prototype.every

      $({
        target: 'Array',
        proto: true,
        forced: !STRICT_METHOD || !USES_TO_LENGTH
      }, {
        every: function every(callbackfn
        /* , thisArg */
        ) {
          return $every(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
        }
      });
      /***/
    },
    /* 313 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var $ = __webpack_require__(1);

      var $filter = __webpack_require__(20).filter;

      var arrayMethodHasSpeciesSupport = __webpack_require__(116);

      var arrayMethodUsesToLength = __webpack_require__(31);

      var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('filter'); // Edge 14- issue

      var USES_TO_LENGTH = arrayMethodUsesToLength('filter'); // `Array.prototype.filter` method
      // https://tc39.github.io/ecma262/#sec-array.prototype.filter
      // with adding support of @@species

      $({
        target: 'Array',
        proto: true,
        forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH
      }, {
        filter: function filter(callbackfn
        /* , thisArg */
        ) {
          return $filter(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
        }
      });
      /***/
    },
    /* 314 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var $ = __webpack_require__(1);

      var forEach = __webpack_require__(212); // `Array.prototype.forEach` method
      // https://tc39.github.io/ecma262/#sec-array.prototype.foreach


      $({
        target: 'Array',
        proto: true,
        forced: [].forEach != forEach
      }, {
        forEach: forEach
      });
      /***/
    },
    /* 315 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var bind = __webpack_require__(96);

      var toObject = __webpack_require__(19);

      var callWithSafeIterationClosing = __webpack_require__(214);

      var isArrayIteratorMethod = __webpack_require__(150);

      var toLength = __webpack_require__(8);

      var createProperty = __webpack_require__(146);

      var getIteratorMethod = __webpack_require__(151); // `Array.from` method implementation
      // https://tc39.github.io/ecma262/#sec-array.from


      module.exports = function from(arrayLike
      /* , mapfn = undefined, thisArg = undefined */
      ) {
        var O = toObject(arrayLike);
        var C = typeof this == 'function' ? this : Array;
        var argumentsLength = arguments.length;
        var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
        var mapping = mapfn !== undefined;
        var iteratorMethod = getIteratorMethod(O);
        var index = 0;
        var length, result, step, iterator, next, value;
        if (mapping) mapfn = bind(mapfn, argumentsLength > 2 ? arguments[2] : undefined, 2); // if the target is not iterable or it's an array with the default iterator - use a simple case

        if (iteratorMethod != undefined && !(C == Array && isArrayIteratorMethod(iteratorMethod))) {
          iterator = iteratorMethod.call(O);
          next = iterator.next;
          result = new C();

          for (; !(step = next.call(iterator)).done; index++) {
            value = mapping ? callWithSafeIterationClosing(iterator, mapfn, [step.value, index], true) : step.value;
            createProperty(result, index, value);
          }
        } else {
          length = toLength(O.length);
          result = new C(length);

          for (; length > index; index++) {
            value = mapping ? mapfn(O[index], index) : O[index];
            createProperty(result, index, value);
          }
        }

        result.length = index;
        return result;
      };
      /***/

    },
    /* 316 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var IteratorPrototype = __webpack_require__(217).IteratorPrototype;

      var create = __webpack_require__(58);

      var createPropertyDescriptor = __webpack_require__(42);

      var setToStringTag = __webpack_require__(95);

      var Iterators = __webpack_require__(97);

      var returnThis = function returnThis() {
        return this;
      };

      module.exports = function (IteratorConstructor, NAME, next) {
        var TO_STRING_TAG = NAME + ' Iterator';
        IteratorConstructor.prototype = create(IteratorPrototype, {
          next: createPropertyDescriptor(1, next)
        });
        setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);
        Iterators[TO_STRING_TAG] = returnThis;
        return IteratorConstructor;
      };
      /***/

    },
    /* 317 */

    /***/
    function (module, exports, __webpack_require__) {
      var isObject = __webpack_require__(13);

      module.exports = function (it) {
        if (!isObject(it) && it !== null) {
          throw TypeError("Can't set " + String(it) + ' as a prototype');
        }

        return it;
      };
      /***/

    },
    /* 318 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var $ = __webpack_require__(1);

      var $map = __webpack_require__(20).map;

      var arrayMethodHasSpeciesSupport = __webpack_require__(116);

      var arrayMethodUsesToLength = __webpack_require__(31);

      var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('map'); // FF49- issue

      var USES_TO_LENGTH = arrayMethodUsesToLength('map'); // `Array.prototype.map` method
      // https://tc39.github.io/ecma262/#sec-array.prototype.map
      // with adding support of @@species

      $({
        target: 'Array',
        proto: true,
        forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH
      }, {
        map: function map(callbackfn
        /* , thisArg */
        ) {
          return $map(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
        }
      });
      /***/
    },
    /* 319 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var $ = __webpack_require__(1);

      var $some = __webpack_require__(20).some;

      var arrayMethodIsStrict = __webpack_require__(59);

      var arrayMethodUsesToLength = __webpack_require__(31);

      var STRICT_METHOD = arrayMethodIsStrict('some');
      var USES_TO_LENGTH = arrayMethodUsesToLength('some'); // `Array.prototype.some` method
      // https://tc39.github.io/ecma262/#sec-array.prototype.some

      $({
        target: 'Array',
        proto: true,
        forced: !STRICT_METHOD || !USES_TO_LENGTH
      }, {
        some: function some(callbackfn
        /* , thisArg */
        ) {
          return $some(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
        }
      });
      /***/
    },
    /* 320 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var $ = __webpack_require__(1);

      var global = __webpack_require__(3);

      var arrayBufferModule = __webpack_require__(154);

      var setSpecies = __webpack_require__(156);

      var ARRAY_BUFFER = 'ArrayBuffer';
      var ArrayBuffer = arrayBufferModule[ARRAY_BUFFER];
      var NativeArrayBuffer = global[ARRAY_BUFFER]; // `ArrayBuffer` constructor
      // https://tc39.github.io/ecma262/#sec-arraybuffer-constructor

      $({
        global: true,
        forced: NativeArrayBuffer !== ArrayBuffer
      }, {
        ArrayBuffer: ArrayBuffer
      });
      setSpecies(ARRAY_BUFFER);
      /***/
    },
    /* 321 */

    /***/
    function (module, exports) {
      // IEEE754 conversions based on https://github.com/feross/ieee754
      // eslint-disable-next-line no-shadow-restricted-names
      var Infinity = 1 / 0;
      var abs = Math.abs;
      var pow = Math.pow;
      var floor = Math.floor;
      var log = Math.log;
      var LN2 = Math.LN2;

      var pack = function pack(number, mantissaLength, bytes) {
        var buffer = new Array(bytes);
        var exponentLength = bytes * 8 - mantissaLength - 1;
        var eMax = (1 << exponentLength) - 1;
        var eBias = eMax >> 1;
        var rt = mantissaLength === 23 ? pow(2, -24) - pow(2, -77) : 0;
        var sign = number < 0 || number === 0 && 1 / number < 0 ? 1 : 0;
        var index = 0;
        var exponent, mantissa, c;
        number = abs(number); // eslint-disable-next-line no-self-compare

        if (number != number || number === Infinity) {
          // eslint-disable-next-line no-self-compare
          mantissa = number != number ? 1 : 0;
          exponent = eMax;
        } else {
          exponent = floor(log(number) / LN2);

          if (number * (c = pow(2, -exponent)) < 1) {
            exponent--;
            c *= 2;
          }

          if (exponent + eBias >= 1) {
            number += rt / c;
          } else {
            number += rt * pow(2, 1 - eBias);
          }

          if (number * c >= 2) {
            exponent++;
            c /= 2;
          }

          if (exponent + eBias >= eMax) {
            mantissa = 0;
            exponent = eMax;
          } else if (exponent + eBias >= 1) {
            mantissa = (number * c - 1) * pow(2, mantissaLength);
            exponent = exponent + eBias;
          } else {
            mantissa = number * pow(2, eBias - 1) * pow(2, mantissaLength);
            exponent = 0;
          }
        }

        for (; mantissaLength >= 8; buffer[index++] = mantissa & 255, mantissa /= 256, mantissaLength -= 8) {
          ;
        }

        exponent = exponent << mantissaLength | mantissa;
        exponentLength += mantissaLength;

        for (; exponentLength > 0; buffer[index++] = exponent & 255, exponent /= 256, exponentLength -= 8) {
          ;
        }

        buffer[--index] |= sign * 128;
        return buffer;
      };

      var unpack = function unpack(buffer, mantissaLength) {
        var bytes = buffer.length;
        var exponentLength = bytes * 8 - mantissaLength - 1;
        var eMax = (1 << exponentLength) - 1;
        var eBias = eMax >> 1;
        var nBits = exponentLength - 7;
        var index = bytes - 1;
        var sign = buffer[index--];
        var exponent = sign & 127;
        var mantissa;
        sign >>= 7;

        for (; nBits > 0; exponent = exponent * 256 + buffer[index], index--, nBits -= 8) {
          ;
        }

        mantissa = exponent & (1 << -nBits) - 1;
        exponent >>= -nBits;
        nBits += mantissaLength;

        for (; nBits > 0; mantissa = mantissa * 256 + buffer[index], index--, nBits -= 8) {
          ;
        }

        if (exponent === 0) {
          exponent = 1 - eBias;
        } else if (exponent === eMax) {
          return mantissa ? NaN : sign ? -Infinity : Infinity;
        } else {
          mantissa = mantissa + pow(2, mantissaLength);
          exponent = exponent - eBias;
        }

        return (sign ? -1 : 1) * mantissa * pow(2, exponent - mantissaLength);
      };

      module.exports = {
        pack: pack,
        unpack: unpack
      };
      /***/
    },
    /* 322 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(1);

      var numberIsFinite = __webpack_require__(323); // `Number.isFinite` method
      // https://tc39.github.io/ecma262/#sec-number.isfinite


      $({
        target: 'Number',
        stat: true
      }, {
        isFinite: numberIsFinite
      });
      /***/
    },
    /* 323 */

    /***/
    function (module, exports, __webpack_require__) {
      var global = __webpack_require__(3);

      var globalIsFinite = global.isFinite; // `Number.isFinite` method
      // https://tc39.github.io/ecma262/#sec-number.isfinite

      module.exports = Number.isFinite || function isFinite(it) {
        return typeof it == 'number' && globalIsFinite(it);
      };
      /***/

    },
    /* 324 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(1);

      var assign = __webpack_require__(325); // `Object.assign` method
      // https://tc39.github.io/ecma262/#sec-object.assign


      $({
        target: 'Object',
        stat: true,
        forced: Object.assign !== assign
      }, {
        assign: assign
      });
      /***/
    },
    /* 325 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var DESCRIPTORS = __webpack_require__(11);

      var fails = __webpack_require__(4);

      var objectKeys = __webpack_require__(94);

      var getOwnPropertySymbolsModule = __webpack_require__(143);

      var propertyIsEnumerableModule = __webpack_require__(110);

      var toObject = __webpack_require__(19);

      var IndexedObject = __webpack_require__(92);

      var nativeAssign = Object.assign;
      var defineProperty = Object.defineProperty; // `Object.assign` method
      // https://tc39.github.io/ecma262/#sec-object.assign

      module.exports = !nativeAssign || fails(function () {
        // should have correct order of operations (Edge bug)
        if (DESCRIPTORS && nativeAssign({
          b: 1
        }, nativeAssign(defineProperty({}, 'a', {
          enumerable: true,
          get: function get() {
            defineProperty(this, 'b', {
              value: 3,
              enumerable: false
            });
          }
        }), {
          b: 2
        })).b !== 1) return true; // should work with symbols and should have deterministic property order (V8 bug)

        var A = {};
        var B = {}; // eslint-disable-next-line no-undef

        var symbol = Symbol();
        var alphabet = 'abcdefghijklmnopqrst';
        A[symbol] = 7;
        alphabet.split('').forEach(function (chr) {
          B[chr] = chr;
        });
        return nativeAssign({}, A)[symbol] != 7 || objectKeys(nativeAssign({}, B)).join('') != alphabet;
      }) ? function assign(target, source) {
        // eslint-disable-line no-unused-vars
        var T = toObject(target);
        var argumentsLength = arguments.length;
        var index = 1;
        var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
        var propertyIsEnumerable = propertyIsEnumerableModule.f;

        while (argumentsLength > index) {
          var S = IndexedObject(arguments[index++]);
          var keys = getOwnPropertySymbols ? objectKeys(S).concat(getOwnPropertySymbols(S)) : objectKeys(S);
          var length = keys.length;
          var j = 0;
          var key;

          while (length > j) {
            key = keys[j++];
            if (!DESCRIPTORS || propertyIsEnumerable.call(S, key)) T[key] = S[key];
          }
        }

        return T;
      } : nativeAssign;
      /***/
    },
    /* 326 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(1);

      var fails = __webpack_require__(4);

      var toObject = __webpack_require__(19);

      var nativeGetPrototypeOf = __webpack_require__(60);

      var CORRECT_PROTOTYPE_GETTER = __webpack_require__(218);

      var FAILS_ON_PRIMITIVES = fails(function () {
        nativeGetPrototypeOf(1);
      }); // `Object.getPrototypeOf` method
      // https://tc39.github.io/ecma262/#sec-object.getprototypeof

      $({
        target: 'Object',
        stat: true,
        forced: FAILS_ON_PRIMITIVES,
        sham: !CORRECT_PROTOTYPE_GETTER
      }, {
        getPrototypeOf: function getPrototypeOf(it) {
          return nativeGetPrototypeOf(toObject(it));
        }
      });
      /***/
    },
    /* 327 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(1);

      var setPrototypeOf = __webpack_require__(45); // `Object.setPrototypeOf` method
      // https://tc39.github.io/ecma262/#sec-object.setprototypeof


      $({
        target: 'Object',
        stat: true
      }, {
        setPrototypeOf: setPrototypeOf
      });
      /***/
    },
    /* 328 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var TO_STRING_TAG_SUPPORT = __webpack_require__(152);

      var classof = __webpack_require__(117); // `Object.prototype.toString` method implementation
      // https://tc39.github.io/ecma262/#sec-object.prototype.tostring


      module.exports = TO_STRING_TAG_SUPPORT ? {}.toString : function toString() {
        return '[object ' + classof(this) + ']';
      };
      /***/
    },
    /* 329 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var fails = __webpack_require__(4); // babel-minify transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError,
      // so we use an intermediate function.


      function RE(s, f) {
        return RegExp(s, f);
      }

      exports.UNSUPPORTED_Y = fails(function () {
        // babel-minify transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError
        var re = RE('a', 'y');
        re.lastIndex = 2;
        return re.exec('abcd') != null;
      });
      exports.BROKEN_CARET = fails(function () {
        // https://bugzilla.mozilla.org/show_bug.cgi?id=773687
        var re = RE('^r', 'gy');
        re.lastIndex = 2;
        return re.exec('str') != null;
      });
      /***/
    },
    /* 330 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var $ = __webpack_require__(1);

      var codeAt = __webpack_require__(158).codeAt; // `String.prototype.codePointAt` method
      // https://tc39.github.io/ecma262/#sec-string.prototype.codepointat


      $({
        target: 'String',
        proto: true
      }, {
        codePointAt: function codePointAt(pos) {
          return codeAt(this, pos);
        }
      });
      /***/
    },
    /* 331 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(1);

      var toAbsoluteIndex = __webpack_require__(43);

      var fromCharCode = String.fromCharCode;
      var nativeFromCodePoint = String.fromCodePoint; // length should be 1, old FF problem

      var INCORRECT_LENGTH = !!nativeFromCodePoint && nativeFromCodePoint.length != 1; // `String.fromCodePoint` method
      // https://tc39.github.io/ecma262/#sec-string.fromcodepoint

      $({
        target: 'String',
        stat: true,
        forced: INCORRECT_LENGTH
      }, {
        fromCodePoint: function fromCodePoint(x) {
          // eslint-disable-line no-unused-vars
          var elements = [];
          var length = arguments.length;
          var i = 0;
          var code;

          while (length > i) {
            code = +arguments[i++];
            if (toAbsoluteIndex(code, 0x10FFFF) !== code) throw RangeError(code + ' is not a valid code point');
            elements.push(code < 0x10000 ? fromCharCode(code) : fromCharCode(((code -= 0x10000) >> 10) + 0xD800, code % 0x400 + 0xDC00));
          }

          return elements.join('');
        }
      });
      /***/
    },
    /* 332 */

    /***/
    function (module, exports, __webpack_require__) {
      var isObject = __webpack_require__(13);

      var classof = __webpack_require__(30);

      var wellKnownSymbol = __webpack_require__(6);

      var MATCH = wellKnownSymbol('match'); // `IsRegExp` abstract operation
      // https://tc39.github.io/ecma262/#sec-isregexp

      module.exports = function (it) {
        var isRegExp;
        return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : classof(it) == 'RegExp');
      };
      /***/

    },
    /* 333 */

    /***/
    function (module, exports, __webpack_require__) {
      var fails = __webpack_require__(4);

      var whitespaces = __webpack_require__(226);

      var non = "\u200B\x85\u180E"; // check that a method works with the correct list
      // of whitespaces and has a correct name

      module.exports = function (METHOD_NAME) {
        return fails(function () {
          return !!whitespaces[METHOD_NAME]() || non[METHOD_NAME]() != non || whitespaces[METHOD_NAME].name !== METHOD_NAME;
        });
      };
      /***/

    },
    /* 334 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var $ = __webpack_require__(1);

      var createHTML = __webpack_require__(234);

      var forcedStringHTMLMethod = __webpack_require__(235); // `String.prototype.strike` method
      // https://tc39.github.io/ecma262/#sec-string.prototype.strike


      $({
        target: 'String',
        proto: true,
        forced: forcedStringHTMLMethod('strike')
      }, {
        strike: function strike() {
          return createHTML(this, 'strike', '', '');
        }
      });
      /***/
    },
    /* 335 */

    /***/
    function (module, exports, __webpack_require__) {
      /* eslint-disable no-new */
      var global = __webpack_require__(3);

      var fails = __webpack_require__(4);

      var checkCorrectnessOfIteration = __webpack_require__(153);

      var NATIVE_ARRAY_BUFFER_VIEWS = __webpack_require__(5).NATIVE_ARRAY_BUFFER_VIEWS;

      var ArrayBuffer = global.ArrayBuffer;
      var Int8Array = global.Int8Array;
      module.exports = !NATIVE_ARRAY_BUFFER_VIEWS || !fails(function () {
        Int8Array(1);
      }) || !fails(function () {
        new Int8Array(-1);
      }) || !checkCorrectnessOfIteration(function (iterable) {
        new Int8Array();
        new Int8Array(null);
        new Int8Array(1.5);
        new Int8Array(iterable);
      }, true) || fails(function () {
        // Safari (11+) bug - a reason why even Safari 13 should load a typed array polyfill
        return new Int8Array(new ArrayBuffer(2), 1, undefined).length !== 1;
      });
      /***/
    },
    /* 336 */

    /***/
    function (module, exports, __webpack_require__) {
      var toInteger = __webpack_require__(37);

      module.exports = function (it) {
        var result = toInteger(it);
        if (result < 0) throw RangeError("The argument can't be less than 0");
        return result;
      };
      /***/

    },
    /* 337 */

    /***/
    function (module, exports, __webpack_require__) {
      var toObject = __webpack_require__(19);

      var toLength = __webpack_require__(8);

      var getIteratorMethod = __webpack_require__(151);

      var isArrayIteratorMethod = __webpack_require__(150);

      var bind = __webpack_require__(96);

      var aTypedArrayConstructor = __webpack_require__(5).aTypedArrayConstructor;

      module.exports = function from(source
      /* , mapfn, thisArg */
      ) {
        var O = toObject(source);
        var argumentsLength = arguments.length;
        var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
        var mapping = mapfn !== undefined;
        var iteratorMethod = getIteratorMethod(O);
        var i, length, result, step, iterator, next;

        if (iteratorMethod != undefined && !isArrayIteratorMethod(iteratorMethod)) {
          iterator = iteratorMethod.call(O);
          next = iterator.next;
          O = [];

          while (!(step = next.call(iterator)).done) {
            O.push(step.value);
          }
        }

        if (mapping && argumentsLength > 2) {
          mapfn = bind(mapfn, arguments[2], 2);
        }

        length = toLength(O.length);
        result = new (aTypedArrayConstructor(this))(length);

        for (i = 0; length > i; i++) {
          result[i] = mapping ? mapfn(O[i], i) : O[i];
        }

        return result;
      };
      /***/

    },
    /* 338 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var toObject = __webpack_require__(19);

      var toAbsoluteIndex = __webpack_require__(43);

      var toLength = __webpack_require__(8);

      var min = Math.min; // `Array.prototype.copyWithin` method implementation
      // https://tc39.github.io/ecma262/#sec-array.prototype.copywithin

      module.exports = [].copyWithin || function copyWithin(target
      /* = 0 */
      , start
      /* = 0, end = @length */
      ) {
        var O = toObject(this);
        var len = toLength(O.length);
        var to = toAbsoluteIndex(target, len);
        var from = toAbsoluteIndex(start, len);
        var end = arguments.length > 2 ? arguments[2] : undefined;
        var count = min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);
        var inc = 1;

        if (from < to && to < from + count) {
          inc = -1;
          from += count - 1;
          to += count - 1;
        }

        while (count-- > 0) {
          if (from in O) O[to] = O[from];else delete O[to];
          to += inc;
          from += inc;
        }

        return O;
      };
      /***/

    },
    /* 339 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var toIndexedObject = __webpack_require__(27);

      var toInteger = __webpack_require__(37);

      var toLength = __webpack_require__(8);

      var arrayMethodIsStrict = __webpack_require__(59);

      var arrayMethodUsesToLength = __webpack_require__(31);

      var min = Math.min;
      var nativeLastIndexOf = [].lastIndexOf;
      var NEGATIVE_ZERO = !!nativeLastIndexOf && 1 / [1].lastIndexOf(1, -0) < 0;
      var STRICT_METHOD = arrayMethodIsStrict('lastIndexOf'); // For preventing possible almost infinite loop in non-standard implementations, test the forward version of the method

      var USES_TO_LENGTH = arrayMethodUsesToLength('indexOf', {
        ACCESSORS: true,
        1: 0
      });
      var FORCED = NEGATIVE_ZERO || !STRICT_METHOD || !USES_TO_LENGTH; // `Array.prototype.lastIndexOf` method implementation
      // https://tc39.github.io/ecma262/#sec-array.prototype.lastindexof

      module.exports = FORCED ? function lastIndexOf(searchElement
      /* , fromIndex = @[*-1] */
      ) {
        // convert -0 to +0
        if (NEGATIVE_ZERO) return nativeLastIndexOf.apply(this, arguments) || 0;
        var O = toIndexedObject(this);
        var length = toLength(O.length);
        var index = length - 1;
        if (arguments.length > 1) index = min(index, toInteger(arguments[1]));
        if (index < 0) index = length + index;

        for (; index >= 0; index--) {
          if (index in O && O[index] === searchElement) return index || 0;
        }

        return -1;
      } : nativeLastIndexOf;
      /***/
    },
    /* 340 */

    /***/
    function (module, exports, __webpack_require__) {
      var global = __webpack_require__(3);

      var DOMIterables = __webpack_require__(239);

      var forEach = __webpack_require__(212);

      var createNonEnumerableProperty = __webpack_require__(18);

      for (var COLLECTION_NAME in DOMIterables) {
        var Collection = global[COLLECTION_NAME];
        var CollectionPrototype = Collection && Collection.prototype; // some Chrome versions have non-configurable methods on DOMTokenList

        if (CollectionPrototype && CollectionPrototype.forEach !== forEach) try {
          createNonEnumerableProperty(CollectionPrototype, 'forEach', forEach);
        } catch (error) {
          CollectionPrototype.forEach = forEach;
        }
      }
      /***/

    },
    /* 341 */

    /***/
    function (module, exports) {
      /* (ignored) */

      /***/
    },
    /* 342 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      var Buffer = __webpack_require__(124).Buffer;

      var util = __webpack_require__(343);

      function copyBuffer(src, target, offset) {
        src.copy(target, offset);
      }

      module.exports = function () {
        function BufferList() {
          _classCallCheck(this, BufferList);

          this.head = null;
          this.tail = null;
          this.length = 0;
        }

        BufferList.prototype.push = function push(v) {
          var entry = {
            data: v,
            next: null
          };
          if (this.length > 0) this.tail.next = entry;else this.head = entry;
          this.tail = entry;
          ++this.length;
        };

        BufferList.prototype.unshift = function unshift(v) {
          var entry = {
            data: v,
            next: this.head
          };
          if (this.length === 0) this.tail = entry;
          this.head = entry;
          ++this.length;
        };

        BufferList.prototype.shift = function shift() {
          if (this.length === 0) return;
          var ret = this.head.data;
          if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
          --this.length;
          return ret;
        };

        BufferList.prototype.clear = function clear() {
          this.head = this.tail = null;
          this.length = 0;
        };

        BufferList.prototype.join = function join(s) {
          if (this.length === 0) return '';
          var p = this.head;
          var ret = '' + p.data;

          while (p = p.next) {
            ret += s + p.data;
          }

          return ret;
        };

        BufferList.prototype.concat = function concat(n) {
          if (this.length === 0) return Buffer.alloc(0);
          if (this.length === 1) return this.head.data;
          var ret = Buffer.allocUnsafe(n >>> 0);
          var p = this.head;
          var i = 0;

          while (p) {
            copyBuffer(p.data, ret, i);
            i += p.data.length;
            p = p.next;
          }

          return ret;
        };

        return BufferList;
      }();

      if (util && util.inspect && util.inspect.custom) {
        module.exports.prototype[util.inspect.custom] = function () {
          var obj = util.inspect({
            length: this.length
          });
          return this.constructor.name + ' ' + obj;
        };
      }
      /***/

    },
    /* 343 */

    /***/
    function (module, exports) {
      /* (ignored) */

      /***/
    },
    /* 344 */

    /***/
    function (module, exports, __webpack_require__) {
      /* WEBPACK VAR INJECTION */
      (function (global) {
        /**
         * Module exports.
         */
        module.exports = deprecate;
        /**
         * Mark that a method should not be used.
         * Returns a modified function which warns once by default.
         *
         * If `localStorage.noDeprecation = true` is set, then it is a no-op.
         *
         * If `localStorage.throwDeprecation = true` is set, then deprecated functions
         * will throw an Error when invoked.
         *
         * If `localStorage.traceDeprecation = true` is set, then deprecated functions
         * will invoke `console.trace()` instead of `console.error()`.
         *
         * @param {Function} fn - the function to deprecate
         * @param {String} msg - the string to print to the console when `fn` is invoked
         * @returns {Function} a new "deprecated" version of `fn`
         * @api public
         */

        function deprecate(fn, msg) {
          if (config('noDeprecation')) {
            return fn;
          }

          var warned = false;

          function deprecated() {
            if (!warned) {
              if (config('throwDeprecation')) {
                throw new Error(msg);
              } else if (config('traceDeprecation')) {
                console.trace(msg);
              } else {
                console.warn(msg);
              }

              warned = true;
            }

            return fn.apply(this, arguments);
          }

          return deprecated;
        }
        /**
         * Checks `localStorage` for boolean values for the given `name`.
         *
         * @param {String} name
         * @returns {Boolean}
         * @api private
         */


        function config(name) {
          // accessing global.localStorage can trigger a DOMException in sandboxed iframes
          try {
            if (!global.localStorage) return false;
          } catch (_) {
            return false;
          }

          var val = global.localStorage[name];
          if (null == val) return false;
          return String(val).toLowerCase() === 'true';
        }
        /* WEBPACK VAR INJECTION */

      }).call(this, __webpack_require__(24));
      /***/
    },
    /* 345 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict"; // Copyright Joyent, Inc. and other Node contributors.
      //
      // Permission is hereby granted, free of charge, to any person obtaining a
      // copy of this software and associated documentation files (the
      // "Software"), to deal in the Software without restriction, including
      // without limitation the rights to use, copy, modify, merge, publish,
      // distribute, sublicense, and/or sell copies of the Software, and to permit
      // persons to whom the Software is furnished to do so, subject to the
      // following conditions:
      //
      // The above copyright notice and this permission notice shall be included
      // in all copies or substantial portions of the Software.
      //
      // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
      // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
      // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
      // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
      // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
      // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
      // USE OR OTHER DEALINGS IN THE SOFTWARE.
      // a passthrough stream.
      // basically just the most minimal sort of Transform stream.
      // Every written chunk gets output as-is.

      module.exports = PassThrough;

      var Transform = __webpack_require__(243);
      /*<replacement>*/


      var util = Object.create(__webpack_require__(98));
      util.inherits = __webpack_require__(86);
      /*</replacement>*/

      util.inherits(PassThrough, Transform);

      function PassThrough(options) {
        if (!(this instanceof PassThrough)) return new PassThrough(options);
        Transform.call(this, options);
      }

      PassThrough.prototype._transform = function (chunk, encoding, cb) {
        cb(null, chunk);
      };
      /***/

    },
    /* 346 */

    /***/
    function (module, exports, __webpack_require__) {
      module.exports = __webpack_require__(165);
      /***/
    },
    /* 347 */

    /***/
    function (module, exports, __webpack_require__) {
      module.exports = __webpack_require__(48);
      /***/
    },
    /* 348 */

    /***/
    function (module, exports, __webpack_require__) {
      module.exports = __webpack_require__(164).Transform;
      /***/
    },
    /* 349 */

    /***/
    function (module, exports, __webpack_require__) {
      module.exports = __webpack_require__(164).PassThrough;
      /***/
    },
    /* 350 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";
      /* WEBPACK VAR INJECTION */

      (function (Buffer, process) {
        /* eslint camelcase: "off" */
        var assert = __webpack_require__(245);

        var Zstream = __webpack_require__(354);

        var zlib_deflate = __webpack_require__(355);

        var zlib_inflate = __webpack_require__(358);

        var constants = __webpack_require__(361);

        for (var key in constants) {
          exports[key] = constants[key];
        } // zlib modes


        exports.NONE = 0;
        exports.DEFLATE = 1;
        exports.INFLATE = 2;
        exports.GZIP = 3;
        exports.GUNZIP = 4;
        exports.DEFLATERAW = 5;
        exports.INFLATERAW = 6;
        exports.UNZIP = 7;
        var GZIP_HEADER_ID1 = 0x1f;
        var GZIP_HEADER_ID2 = 0x8b;
        /**
         * Emulate Node's zlib C++ layer for use by the JS layer in index.js
         */

        function Zlib(mode) {
          if (typeof mode !== 'number' || mode < exports.DEFLATE || mode > exports.UNZIP) {
            throw new TypeError('Bad argument');
          }

          this.dictionary = null;
          this.err = 0;
          this.flush = 0;
          this.init_done = false;
          this.level = 0;
          this.memLevel = 0;
          this.mode = mode;
          this.strategy = 0;
          this.windowBits = 0;
          this.write_in_progress = false;
          this.pending_close = false;
          this.gzip_id_bytes_read = 0;
        }

        Zlib.prototype.close = function () {
          if (this.write_in_progress) {
            this.pending_close = true;
            return;
          }

          this.pending_close = false;
          assert(this.init_done, 'close before init');
          assert(this.mode <= exports.UNZIP);

          if (this.mode === exports.DEFLATE || this.mode === exports.GZIP || this.mode === exports.DEFLATERAW) {
            zlib_deflate.deflateEnd(this.strm);
          } else if (this.mode === exports.INFLATE || this.mode === exports.GUNZIP || this.mode === exports.INFLATERAW || this.mode === exports.UNZIP) {
            zlib_inflate.inflateEnd(this.strm);
          }

          this.mode = exports.NONE;
          this.dictionary = null;
        };

        Zlib.prototype.write = function (flush, input, in_off, in_len, out, out_off, out_len) {
          return this._write(true, flush, input, in_off, in_len, out, out_off, out_len);
        };

        Zlib.prototype.writeSync = function (flush, input, in_off, in_len, out, out_off, out_len) {
          return this._write(false, flush, input, in_off, in_len, out, out_off, out_len);
        };

        Zlib.prototype._write = function (async, flush, input, in_off, in_len, out, out_off, out_len) {
          assert.equal(arguments.length, 8);
          assert(this.init_done, 'write before init');
          assert(this.mode !== exports.NONE, 'already finalized');
          assert.equal(false, this.write_in_progress, 'write already in progress');
          assert.equal(false, this.pending_close, 'close is pending');
          this.write_in_progress = true;
          assert.equal(false, flush === undefined, 'must provide flush value');
          this.write_in_progress = true;

          if (flush !== exports.Z_NO_FLUSH && flush !== exports.Z_PARTIAL_FLUSH && flush !== exports.Z_SYNC_FLUSH && flush !== exports.Z_FULL_FLUSH && flush !== exports.Z_FINISH && flush !== exports.Z_BLOCK) {
            throw new Error('Invalid flush value');
          }

          if (input == null) {
            input = Buffer.alloc(0);
            in_len = 0;
            in_off = 0;
          }

          this.strm.avail_in = in_len;
          this.strm.input = input;
          this.strm.next_in = in_off;
          this.strm.avail_out = out_len;
          this.strm.output = out;
          this.strm.next_out = out_off;
          this.flush = flush;

          if (!async) {
            // sync version
            this._process();

            if (this._checkError()) {
              return this._afterSync();
            }

            return;
          } // async version


          var self = this;
          process.nextTick(function () {
            self._process();

            self._after();
          });
          return this;
        };

        Zlib.prototype._afterSync = function () {
          var avail_out = this.strm.avail_out;
          var avail_in = this.strm.avail_in;
          this.write_in_progress = false;
          return [avail_in, avail_out];
        };

        Zlib.prototype._process = function () {
          var next_expected_header_byte = null; // If the avail_out is left at 0, then it means that it ran out
          // of room.  If there was avail_out left over, then it means
          // that all of the input was consumed.

          switch (this.mode) {
            case exports.DEFLATE:
            case exports.GZIP:
            case exports.DEFLATERAW:
              this.err = zlib_deflate.deflate(this.strm, this.flush);
              break;

            case exports.UNZIP:
              if (this.strm.avail_in > 0) {
                next_expected_header_byte = this.strm.next_in;
              }

              switch (this.gzip_id_bytes_read) {
                case 0:
                  if (next_expected_header_byte === null) {
                    break;
                  }

                  if (this.strm.input[next_expected_header_byte] === GZIP_HEADER_ID1) {
                    this.gzip_id_bytes_read = 1;
                    next_expected_header_byte++;

                    if (this.strm.avail_in === 1) {
                      // The only available byte was already read.
                      break;
                    }
                  } else {
                    this.mode = exports.INFLATE;
                    break;
                  }

                // fallthrough

                case 1:
                  if (next_expected_header_byte === null) {
                    break;
                  }

                  if (this.strm.input[next_expected_header_byte] === GZIP_HEADER_ID2) {
                    this.gzip_id_bytes_read = 2;
                    this.mode = exports.GUNZIP;
                  } else {
                    // There is no actual difference between INFLATE and INFLATERAW
                    // (after initialization).
                    this.mode = exports.INFLATE;
                  }

                  break;

                default:
                  throw new Error('invalid number of gzip magic number bytes read');
              }

            // fallthrough

            case exports.INFLATE:
            case exports.GUNZIP:
            case exports.INFLATERAW:
              this.err = zlib_inflate.inflate(this.strm, this.flush // If data was encoded with dictionary
              );

              if (this.err === exports.Z_NEED_DICT && this.dictionary) {
                // Load it
                this.err = zlib_inflate.inflateSetDictionary(this.strm, this.dictionary);

                if (this.err === exports.Z_OK) {
                  // And try to decode again
                  this.err = zlib_inflate.inflate(this.strm, this.flush);
                } else if (this.err === exports.Z_DATA_ERROR) {
                  // Both inflateSetDictionary() and inflate() return Z_DATA_ERROR.
                  // Make it possible for After() to tell a bad dictionary from bad
                  // input.
                  this.err = exports.Z_NEED_DICT;
                }
              }

              while (this.strm.avail_in > 0 && this.mode === exports.GUNZIP && this.err === exports.Z_STREAM_END && this.strm.next_in[0] !== 0x00) {
                // Bytes remain in input buffer. Perhaps this is another compressed
                // member in the same archive, or just trailing garbage.
                // Trailing zero bytes are okay, though, since they are frequently
                // used for padding.
                this.reset();
                this.err = zlib_inflate.inflate(this.strm, this.flush);
              }

              break;

            default:
              throw new Error('Unknown mode ' + this.mode);
          }
        };

        Zlib.prototype._checkError = function () {
          // Acceptable error states depend on the type of zlib stream.
          switch (this.err) {
            case exports.Z_OK:
            case exports.Z_BUF_ERROR:
              if (this.strm.avail_out !== 0 && this.flush === exports.Z_FINISH) {
                this._error('unexpected end of file');

                return false;
              }

              break;

            case exports.Z_STREAM_END:
              // normal statuses, not fatal
              break;

            case exports.Z_NEED_DICT:
              if (this.dictionary == null) {
                this._error('Missing dictionary');
              } else {
                this._error('Bad dictionary');
              }

              return false;

            default:
              // something else.
              this._error('Zlib error');

              return false;
          }

          return true;
        };

        Zlib.prototype._after = function () {
          if (!this._checkError()) {
            return;
          }

          var avail_out = this.strm.avail_out;
          var avail_in = this.strm.avail_in;
          this.write_in_progress = false; // call the write() cb

          this.callback(avail_in, avail_out);

          if (this.pending_close) {
            this.close();
          }
        };

        Zlib.prototype._error = function (message) {
          if (this.strm.msg) {
            message = this.strm.msg;
          }

          this.onerror(message, this.err // no hope of rescue.
          );
          this.write_in_progress = false;

          if (this.pending_close) {
            this.close();
          }
        };

        Zlib.prototype.init = function (windowBits, level, memLevel, strategy, dictionary) {
          assert(arguments.length === 4 || arguments.length === 5, 'init(windowBits, level, memLevel, strategy, [dictionary])');
          assert(windowBits >= 8 && windowBits <= 15, 'invalid windowBits');
          assert(level >= -1 && level <= 9, 'invalid compression level');
          assert(memLevel >= 1 && memLevel <= 9, 'invalid memlevel');
          assert(strategy === exports.Z_FILTERED || strategy === exports.Z_HUFFMAN_ONLY || strategy === exports.Z_RLE || strategy === exports.Z_FIXED || strategy === exports.Z_DEFAULT_STRATEGY, 'invalid strategy');

          this._init(level, windowBits, memLevel, strategy, dictionary);

          this._setDictionary();
        };

        Zlib.prototype.params = function () {
          throw new Error('deflateParams Not supported');
        };

        Zlib.prototype.reset = function () {
          this._reset();

          this._setDictionary();
        };

        Zlib.prototype._init = function (level, windowBits, memLevel, strategy, dictionary) {
          this.level = level;
          this.windowBits = windowBits;
          this.memLevel = memLevel;
          this.strategy = strategy;
          this.flush = exports.Z_NO_FLUSH;
          this.err = exports.Z_OK;

          if (this.mode === exports.GZIP || this.mode === exports.GUNZIP) {
            this.windowBits += 16;
          }

          if (this.mode === exports.UNZIP) {
            this.windowBits += 32;
          }

          if (this.mode === exports.DEFLATERAW || this.mode === exports.INFLATERAW) {
            this.windowBits = -1 * this.windowBits;
          }

          this.strm = new Zstream();

          switch (this.mode) {
            case exports.DEFLATE:
            case exports.GZIP:
            case exports.DEFLATERAW:
              this.err = zlib_deflate.deflateInit2(this.strm, this.level, exports.Z_DEFLATED, this.windowBits, this.memLevel, this.strategy);
              break;

            case exports.INFLATE:
            case exports.GUNZIP:
            case exports.INFLATERAW:
            case exports.UNZIP:
              this.err = zlib_inflate.inflateInit2(this.strm, this.windowBits);
              break;

            default:
              throw new Error('Unknown mode ' + this.mode);
          }

          if (this.err !== exports.Z_OK) {
            this._error('Init error');
          }

          this.dictionary = dictionary;
          this.write_in_progress = false;
          this.init_done = true;
        };

        Zlib.prototype._setDictionary = function () {
          if (this.dictionary == null) {
            return;
          }

          this.err = exports.Z_OK;

          switch (this.mode) {
            case exports.DEFLATE:
            case exports.DEFLATERAW:
              this.err = zlib_deflate.deflateSetDictionary(this.strm, this.dictionary);
              break;

            default:
              break;
          }

          if (this.err !== exports.Z_OK) {
            this._error('Failed to set dictionary');
          }
        };

        Zlib.prototype._reset = function () {
          this.err = exports.Z_OK;

          switch (this.mode) {
            case exports.DEFLATE:
            case exports.DEFLATERAW:
            case exports.GZIP:
              this.err = zlib_deflate.deflateReset(this.strm);
              break;

            case exports.INFLATE:
            case exports.INFLATERAW:
            case exports.GUNZIP:
              this.err = zlib_inflate.inflateReset(this.strm);
              break;

            default:
              break;
          }

          if (this.err !== exports.Z_OK) {
            this._error('Failed to reset stream');
          }
        };

        exports.Zlib = Zlib;
        /* WEBPACK VAR INJECTION */
      }).call(this, __webpack_require__(10).Buffer, __webpack_require__(47));
      /***/
    },
    /* 351 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";
      /*
      object-assign
      (c) Sindre Sorhus
      @license MIT
      */

      /* eslint-disable no-unused-vars */

      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      var propIsEnumerable = Object.prototype.propertyIsEnumerable;

      function toObject(val) {
        if (val === null || val === undefined) {
          throw new TypeError('Object.assign cannot be called with null or undefined');
        }

        return Object(val);
      }

      function shouldUseNative() {
        try {
          if (!Object.assign) {
            return false;
          } // Detect buggy property enumeration order in older V8 versions.
          // https://bugs.chromium.org/p/v8/issues/detail?id=4118


          var test1 = new String('abc'); // eslint-disable-line no-new-wrappers

          test1[5] = 'de';

          if (Object.getOwnPropertyNames(test1)[0] === '5') {
            return false;
          } // https://bugs.chromium.org/p/v8/issues/detail?id=3056


          var test2 = {};

          for (var i = 0; i < 10; i++) {
            test2['_' + String.fromCharCode(i)] = i;
          }

          var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
            return test2[n];
          });

          if (order2.join('') !== '0123456789') {
            return false;
          } // https://bugs.chromium.org/p/v8/issues/detail?id=3056


          var test3 = {};
          'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
            test3[letter] = letter;
          });

          if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
            return false;
          }

          return true;
        } catch (err) {
          // We don't expect any of the above to throw, but better to be safe.
          return false;
        }
      }

      module.exports = shouldUseNative() ? Object.assign : function (target, source) {
        var from;
        var to = toObject(target);
        var symbols;

        for (var s = 1; s < arguments.length; s++) {
          from = Object(arguments[s]);

          for (var key in from) {
            if (hasOwnProperty.call(from, key)) {
              to[key] = from[key];
            }
          }

          if (getOwnPropertySymbols) {
            symbols = getOwnPropertySymbols(from);

            for (var i = 0; i < symbols.length; i++) {
              if (propIsEnumerable.call(from, symbols[i])) {
                to[symbols[i]] = from[symbols[i]];
              }
            }
          }
        }

        return to;
      };
      /***/
    },
    /* 352 */

    /***/
    function (module, exports) {
      module.exports = function isBuffer(arg) {
        return arg && _typeof4(arg) === 'object' && typeof arg.copy === 'function' && typeof arg.fill === 'function' && typeof arg.readUInt8 === 'function';
      };
      /***/

    },
    /* 353 */

    /***/
    function (module, exports) {
      if (typeof Object.create === 'function') {
        // implementation from standard node.js 'util' module
        module.exports = function inherits(ctor, superCtor) {
          ctor.super_ = superCtor;
          ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
              value: ctor,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
        };
      } else {
        // old school shim for old browsers
        module.exports = function inherits(ctor, superCtor) {
          ctor.super_ = superCtor;

          var TempCtor = function TempCtor() {};

          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        };
      }
      /***/

    },
    /* 354 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict"; // (C) 1995-2013 Jean-loup Gailly and Mark Adler
      // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
      //
      // This software is provided 'as-is', without any express or implied
      // warranty. In no event will the authors be held liable for any damages
      // arising from the use of this software.
      //
      // Permission is granted to anyone to use this software for any purpose,
      // including commercial applications, and to alter it and redistribute it
      // freely, subject to the following restrictions:
      //
      // 1. The origin of this software must not be misrepresented; you must not
      //   claim that you wrote the original software. If you use this software
      //   in a product, an acknowledgment in the product documentation would be
      //   appreciated but is not required.
      // 2. Altered source versions must be plainly marked as such, and must not be
      //   misrepresented as being the original software.
      // 3. This notice may not be removed or altered from any source distribution.

      function ZStream() {
        /* next input byte */
        this.input = null; // JS specific, because we have no pointers

        this.next_in = 0;
        /* number of bytes available at input */

        this.avail_in = 0;
        /* total number of input bytes read so far */

        this.total_in = 0;
        /* next output byte should be put there */

        this.output = null; // JS specific, because we have no pointers

        this.next_out = 0;
        /* remaining free space at output */

        this.avail_out = 0;
        /* total number of bytes output so far */

        this.total_out = 0;
        /* last error message, NULL if no error */

        this.msg = ''
        /*Z_NULL*/
        ;
        /* not visible by applications */

        this.state = null;
        /* best guess about the data type: binary or text */

        this.data_type = 2
        /*Z_UNKNOWN*/
        ;
        /* adler32 value of the uncompressed data */

        this.adler = 0;
      }

      module.exports = ZStream;
      /***/
    },
    /* 355 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict"; // (C) 1995-2013 Jean-loup Gailly and Mark Adler
      // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
      //
      // This software is provided 'as-is', without any express or implied
      // warranty. In no event will the authors be held liable for any damages
      // arising from the use of this software.
      //
      // Permission is granted to anyone to use this software for any purpose,
      // including commercial applications, and to alter it and redistribute it
      // freely, subject to the following restrictions:
      //
      // 1. The origin of this software must not be misrepresented; you must not
      //   claim that you wrote the original software. If you use this software
      //   in a product, an acknowledgment in the product documentation would be
      //   appreciated but is not required.
      // 2. Altered source versions must be plainly marked as such, and must not be
      //   misrepresented as being the original software.
      // 3. This notice may not be removed or altered from any source distribution.

      var utils = __webpack_require__(126);

      var trees = __webpack_require__(356);

      var adler32 = __webpack_require__(246);

      var crc32 = __webpack_require__(247);

      var msg = __webpack_require__(357);
      /* Public constants ==========================================================*/

      /* ===========================================================================*/

      /* Allowed flush values; see deflate() and inflate() below for details */


      var Z_NO_FLUSH = 0;
      var Z_PARTIAL_FLUSH = 1; //var Z_SYNC_FLUSH    = 2;

      var Z_FULL_FLUSH = 3;
      var Z_FINISH = 4;
      var Z_BLOCK = 5; //var Z_TREES         = 6;

      /* Return codes for the compression/decompression functions. Negative values
       * are errors, positive values are used for special but normal events.
       */

      var Z_OK = 0;
      var Z_STREAM_END = 1; //var Z_NEED_DICT     = 2;
      //var Z_ERRNO         = -1;

      var Z_STREAM_ERROR = -2;
      var Z_DATA_ERROR = -3; //var Z_MEM_ERROR     = -4;

      var Z_BUF_ERROR = -5; //var Z_VERSION_ERROR = -6;

      /* compression levels */
      //var Z_NO_COMPRESSION      = 0;
      //var Z_BEST_SPEED          = 1;
      //var Z_BEST_COMPRESSION    = 9;

      var Z_DEFAULT_COMPRESSION = -1;
      var Z_FILTERED = 1;
      var Z_HUFFMAN_ONLY = 2;
      var Z_RLE = 3;
      var Z_FIXED = 4;
      var Z_DEFAULT_STRATEGY = 0;
      /* Possible values of the data_type field (though see inflate()) */
      //var Z_BINARY              = 0;
      //var Z_TEXT                = 1;
      //var Z_ASCII               = 1; // = Z_TEXT

      var Z_UNKNOWN = 2;
      /* The deflate compression method */

      var Z_DEFLATED = 8;
      /*============================================================================*/

      var MAX_MEM_LEVEL = 9;
      /* Maximum value for memLevel in deflateInit2 */

      var MAX_WBITS = 15;
      /* 32K LZ77 window */

      var DEF_MEM_LEVEL = 8;
      var LENGTH_CODES = 29;
      /* number of length codes, not counting the special END_BLOCK code */

      var LITERALS = 256;
      /* number of literal bytes 0..255 */

      var L_CODES = LITERALS + 1 + LENGTH_CODES;
      /* number of Literal or Length codes, including the END_BLOCK code */

      var D_CODES = 30;
      /* number of distance codes */

      var BL_CODES = 19;
      /* number of codes used to transfer the bit lengths */

      var HEAP_SIZE = 2 * L_CODES + 1;
      /* maximum heap size */

      var MAX_BITS = 15;
      /* All codes must not exceed MAX_BITS bits */

      var MIN_MATCH = 3;
      var MAX_MATCH = 258;
      var MIN_LOOKAHEAD = MAX_MATCH + MIN_MATCH + 1;
      var PRESET_DICT = 0x20;
      var INIT_STATE = 42;
      var EXTRA_STATE = 69;
      var NAME_STATE = 73;
      var COMMENT_STATE = 91;
      var HCRC_STATE = 103;
      var BUSY_STATE = 113;
      var FINISH_STATE = 666;
      var BS_NEED_MORE = 1;
      /* block not completed, need more input or more output */

      var BS_BLOCK_DONE = 2;
      /* block flush performed */

      var BS_FINISH_STARTED = 3;
      /* finish started, need only more output at next deflate */

      var BS_FINISH_DONE = 4;
      /* finish done, accept no more input or output */

      var OS_CODE = 0x03; // Unix :) . Don't detect, use this default.

      function err(strm, errorCode) {
        strm.msg = msg[errorCode];
        return errorCode;
      }

      function rank(f) {
        return (f << 1) - (f > 4 ? 9 : 0);
      }

      function zero(buf) {
        var len = buf.length;

        while (--len >= 0) {
          buf[len] = 0;
        }
      }
      /* =========================================================================
       * Flush as much pending output as possible. All deflate() output goes
       * through this function so some applications may wish to modify it
       * to avoid allocating a large strm->output buffer and copying into it.
       * (See also read_buf()).
       */


      function flush_pending(strm) {
        var s = strm.state; //_tr_flush_bits(s);

        var len = s.pending;

        if (len > strm.avail_out) {
          len = strm.avail_out;
        }

        if (len === 0) {
          return;
        }

        utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);
        strm.next_out += len;
        s.pending_out += len;
        strm.total_out += len;
        strm.avail_out -= len;
        s.pending -= len;

        if (s.pending === 0) {
          s.pending_out = 0;
        }
      }

      function flush_block_only(s, last) {
        trees._tr_flush_block(s, s.block_start >= 0 ? s.block_start : -1, s.strstart - s.block_start, last);

        s.block_start = s.strstart;
        flush_pending(s.strm);
      }

      function put_byte(s, b) {
        s.pending_buf[s.pending++] = b;
      }
      /* =========================================================================
       * Put a short in the pending buffer. The 16-bit value is put in MSB order.
       * IN assertion: the stream state is correct and there is enough room in
       * pending_buf.
       */


      function putShortMSB(s, b) {
        //  put_byte(s, (Byte)(b >> 8));
        //  put_byte(s, (Byte)(b & 0xff));
        s.pending_buf[s.pending++] = b >>> 8 & 0xff;
        s.pending_buf[s.pending++] = b & 0xff;
      }
      /* ===========================================================================
       * Read a new buffer from the current input stream, update the adler32
       * and total number of bytes read.  All deflate() input goes through
       * this function so some applications may wish to modify it to avoid
       * allocating a large strm->input buffer and copying from it.
       * (See also flush_pending()).
       */


      function read_buf(strm, buf, start, size) {
        var len = strm.avail_in;

        if (len > size) {
          len = size;
        }

        if (len === 0) {
          return 0;
        }

        strm.avail_in -= len; // zmemcpy(buf, strm->next_in, len);

        utils.arraySet(buf, strm.input, strm.next_in, len, start);

        if (strm.state.wrap === 1) {
          strm.adler = adler32(strm.adler, buf, len, start);
        } else if (strm.state.wrap === 2) {
          strm.adler = crc32(strm.adler, buf, len, start);
        }

        strm.next_in += len;
        strm.total_in += len;
        return len;
      }
      /* ===========================================================================
       * Set match_start to the longest match starting at the given string and
       * return its length. Matches shorter or equal to prev_length are discarded,
       * in which case the result is equal to prev_length and match_start is
       * garbage.
       * IN assertions: cur_match is the head of the hash chain for the current
       *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
       * OUT assertion: the match length is not greater than s->lookahead.
       */


      function longest_match(s, cur_match) {
        var chain_length = s.max_chain_length;
        /* max hash chain length */

        var scan = s.strstart;
        /* current string */

        var match;
        /* matched string */

        var len;
        /* length of current match */

        var best_len = s.prev_length;
        /* best match length so far */

        var nice_match = s.nice_match;
        /* stop if match long enough */

        var limit = s.strstart > s.w_size - MIN_LOOKAHEAD ? s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0
        /*NIL*/
        ;
        var _win = s.window; // shortcut

        var wmask = s.w_mask;
        var prev = s.prev;
        /* Stop when cur_match becomes <= limit. To simplify the code,
         * we prevent matches with the string of window index 0.
         */

        var strend = s.strstart + MAX_MATCH;
        var scan_end1 = _win[scan + best_len - 1];
        var scan_end = _win[scan + best_len];
        /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
         * It is easy to get rid of this optimization if necessary.
         */
        // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");

        /* Do not waste too much time if we already have a good match: */

        if (s.prev_length >= s.good_match) {
          chain_length >>= 2;
        }
        /* Do not look for matches beyond the end of the input. This is necessary
         * to make deflate deterministic.
         */


        if (nice_match > s.lookahead) {
          nice_match = s.lookahead;
        } // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");


        do {
          // Assert(cur_match < s->strstart, "no future");
          match = cur_match;
          /* Skip to next match if the match length cannot increase
           * or if the match length is less than 2.  Note that the checks below
           * for insufficient lookahead only occur occasionally for performance
           * reasons.  Therefore uninitialized memory will be accessed, and
           * conditional jumps will be made that depend on those values.
           * However the length of the match is limited to the lookahead, so
           * the output of deflate is not affected by the uninitialized values.
           */

          if (_win[match + best_len] !== scan_end || _win[match + best_len - 1] !== scan_end1 || _win[match] !== _win[scan] || _win[++match] !== _win[scan + 1]) {
            continue;
          }
          /* The check at best_len-1 can be removed because it will be made
           * again later. (This heuristic is not always a win.)
           * It is not necessary to compare scan[2] and match[2] since they
           * are always equal when the other bytes match, given that
           * the hash keys are equal and that HASH_BITS >= 8.
           */


          scan += 2;
          match++; // Assert(*scan == *match, "match[2]?");

          /* We check for insufficient lookahead only every 8th comparison;
           * the 256th check will be made at strstart+258.
           */

          do {
            /*jshint noempty:false*/
          } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && scan < strend); // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");


          len = MAX_MATCH - (strend - scan);
          scan = strend - MAX_MATCH;

          if (len > best_len) {
            s.match_start = cur_match;
            best_len = len;

            if (len >= nice_match) {
              break;
            }

            scan_end1 = _win[scan + best_len - 1];
            scan_end = _win[scan + best_len];
          }
        } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);

        if (best_len <= s.lookahead) {
          return best_len;
        }

        return s.lookahead;
      }
      /* ===========================================================================
       * Fill the window when the lookahead becomes insufficient.
       * Updates strstart and lookahead.
       *
       * IN assertion: lookahead < MIN_LOOKAHEAD
       * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
       *    At least one byte has been read, or avail_in == 0; reads are
       *    performed for at least two bytes (required for the zip translate_eol
       *    option -- not supported here).
       */


      function fill_window(s) {
        var _w_size = s.w_size;
        var p, n, m, more, str; //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");

        do {
          more = s.window_size - s.lookahead - s.strstart; // JS ints have 32 bit, block below not needed

          /* Deal with !@#$% 64K limit: */
          //if (sizeof(int) <= 2) {
          //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
          //        more = wsize;
          //
          //  } else if (more == (unsigned)(-1)) {
          //        /* Very unlikely, but possible on 16 bit machine if
          //         * strstart == 0 && lookahead == 1 (input done a byte at time)
          //         */
          //        more--;
          //    }
          //}

          /* If the window is almost full and there is insufficient lookahead,
           * move the upper half to the lower one to make room in the upper half.
           */

          if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {
            utils.arraySet(s.window, s.window, _w_size, _w_size, 0);
            s.match_start -= _w_size;
            s.strstart -= _w_size;
            /* we now have strstart >= MAX_DIST */

            s.block_start -= _w_size;
            /* Slide the hash table (could be avoided with 32 bit values
             at the expense of memory usage). We slide even when level == 0
             to keep the hash table consistent if we switch back to level > 0
             later. (Using level 0 permanently is not an optimal usage of
             zlib, so we don't care about this pathological case.)
             */

            n = s.hash_size;
            p = n;

            do {
              m = s.head[--p];
              s.head[p] = m >= _w_size ? m - _w_size : 0;
            } while (--n);

            n = _w_size;
            p = n;

            do {
              m = s.prev[--p];
              s.prev[p] = m >= _w_size ? m - _w_size : 0;
              /* If n is not on any hash chain, prev[n] is garbage but
               * its value will never be used.
               */
            } while (--n);

            more += _w_size;
          }

          if (s.strm.avail_in === 0) {
            break;
          }
          /* If there was no sliding:
           *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
           *    more == window_size - lookahead - strstart
           * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
           * => more >= window_size - 2*WSIZE + 2
           * In the BIG_MEM or MMAP case (not yet supported),
           *   window_size == input_size + MIN_LOOKAHEAD  &&
           *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
           * Otherwise, window_size == 2*WSIZE so more >= 2.
           * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
           */
          //Assert(more >= 2, "more < 2");


          n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
          s.lookahead += n;
          /* Initialize the hash value now that we have some input: */

          if (s.lookahead + s.insert >= MIN_MATCH) {
            str = s.strstart - s.insert;
            s.ins_h = s.window[str];
            /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */

            s.ins_h = (s.ins_h << s.hash_shift ^ s.window[str + 1]) & s.hash_mask; //#if MIN_MATCH != 3
            //        Call update_hash() MIN_MATCH-3 more times
            //#endif

            while (s.insert) {
              /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
              s.ins_h = (s.ins_h << s.hash_shift ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;
              s.prev[str & s.w_mask] = s.head[s.ins_h];
              s.head[s.ins_h] = str;
              str++;
              s.insert--;

              if (s.lookahead + s.insert < MIN_MATCH) {
                break;
              }
            }
          }
          /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
           * but this is not important since only literal bytes will be emitted.
           */

        } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);
        /* If the WIN_INIT bytes after the end of the current data have never been
         * written, then zero those bytes in order to avoid memory check reports of
         * the use of uninitialized (or uninitialised as Julian writes) bytes by
         * the longest match routines.  Update the high water mark for the next
         * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
         * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
         */
        //  if (s.high_water < s.window_size) {
        //    var curr = s.strstart + s.lookahead;
        //    var init = 0;
        //
        //    if (s.high_water < curr) {
        //      /* Previous high water mark below current data -- zero WIN_INIT
        //       * bytes or up to end of window, whichever is less.
        //       */
        //      init = s.window_size - curr;
        //      if (init > WIN_INIT)
        //        init = WIN_INIT;
        //      zmemzero(s->window + curr, (unsigned)init);
        //      s->high_water = curr + init;
        //    }
        //    else if (s->high_water < (ulg)curr + WIN_INIT) {
        //      /* High water mark at or above current data, but below current data
        //       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
        //       * to end of window, whichever is less.
        //       */
        //      init = (ulg)curr + WIN_INIT - s->high_water;
        //      if (init > s->window_size - s->high_water)
        //        init = s->window_size - s->high_water;
        //      zmemzero(s->window + s->high_water, (unsigned)init);
        //      s->high_water += init;
        //    }
        //  }
        //
        //  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
        //    "not enough room for search");

      }
      /* ===========================================================================
       * Copy without compression as much as possible from the input stream, return
       * the current block state.
       * This function does not insert new strings in the dictionary since
       * uncompressible data is probably not useful. This function is used
       * only for the level=0 compression option.
       * NOTE: this function should be optimized to avoid extra copying from
       * window to pending_buf.
       */


      function deflate_stored(s, flush) {
        /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
         * to pending_buf_size, and each stored block has a 5 byte header:
         */
        var max_block_size = 0xffff;

        if (max_block_size > s.pending_buf_size - 5) {
          max_block_size = s.pending_buf_size - 5;
        }
        /* Copy as much as possible from input to output: */


        for (;;) {
          /* Fill the window as much as possible: */
          if (s.lookahead <= 1) {
            //Assert(s->strstart < s->w_size+MAX_DIST(s) ||
            //  s->block_start >= (long)s->w_size, "slide too late");
            //      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||
            //        s.block_start >= s.w_size)) {
            //        throw  new Error("slide too late");
            //      }
            fill_window(s);

            if (s.lookahead === 0 && flush === Z_NO_FLUSH) {
              return BS_NEED_MORE;
            }

            if (s.lookahead === 0) {
              break;
            }
            /* flush the current block */

          } //Assert(s->block_start >= 0L, "block gone");
          //    if (s.block_start < 0) throw new Error("block gone");


          s.strstart += s.lookahead;
          s.lookahead = 0;
          /* Emit a stored block if pending_buf will be full: */

          var max_start = s.block_start + max_block_size;

          if (s.strstart === 0 || s.strstart >= max_start) {
            /* strstart == 0 is possible when wraparound on 16-bit machine */
            s.lookahead = s.strstart - max_start;
            s.strstart = max_start;
            /*** FLUSH_BLOCK(s, 0); ***/

            flush_block_only(s, false);

            if (s.strm.avail_out === 0) {
              return BS_NEED_MORE;
            }
            /***/

          }
          /* Flush if we may have to slide, otherwise block_start may become
           * negative and the data will be gone:
           */


          if (s.strstart - s.block_start >= s.w_size - MIN_LOOKAHEAD) {
            /*** FLUSH_BLOCK(s, 0); ***/
            flush_block_only(s, false);

            if (s.strm.avail_out === 0) {
              return BS_NEED_MORE;
            }
            /***/

          }
        }

        s.insert = 0;

        if (flush === Z_FINISH) {
          /*** FLUSH_BLOCK(s, 1); ***/
          flush_block_only(s, true);

          if (s.strm.avail_out === 0) {
            return BS_FINISH_STARTED;
          }
          /***/


          return BS_FINISH_DONE;
        }

        if (s.strstart > s.block_start) {
          /*** FLUSH_BLOCK(s, 0); ***/
          flush_block_only(s, false);

          if (s.strm.avail_out === 0) {
            return BS_NEED_MORE;
          }
          /***/

        }

        return BS_NEED_MORE;
      }
      /* ===========================================================================
       * Compress as much as possible from the input stream, return the current
       * block state.
       * This function does not perform lazy evaluation of matches and inserts
       * new strings in the dictionary only for unmatched strings or for short
       * matches. It is used only for the fast compression options.
       */


      function deflate_fast(s, flush) {
        var hash_head;
        /* head of the hash chain */

        var bflush;
        /* set if current block must be flushed */

        for (;;) {
          /* Make sure that we always have enough lookahead, except
           * at the end of the input file. We need MAX_MATCH bytes
           * for the next match, plus MIN_MATCH bytes to insert the
           * string following the next match.
           */
          if (s.lookahead < MIN_LOOKAHEAD) {
            fill_window(s);

            if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
              return BS_NEED_MORE;
            }

            if (s.lookahead === 0) {
              break;
              /* flush the current block */
            }
          }
          /* Insert the string window[strstart .. strstart+2] in the
           * dictionary, and set hash_head to the head of the hash chain:
           */


          hash_head = 0
          /*NIL*/
          ;

          if (s.lookahead >= MIN_MATCH) {
            /*** INSERT_STRING(s, s.strstart, hash_head); ***/
            s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
            hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
            s.head[s.ins_h] = s.strstart;
            /***/
          }
          /* Find the longest match, discarding those <= prev_length.
           * At this point we have always match_length < MIN_MATCH
           */


          if (hash_head !== 0
          /*NIL*/
          && s.strstart - hash_head <= s.w_size - MIN_LOOKAHEAD) {
            /* To simplify the code, we prevent matches with the string
             * of window index 0 (in particular we have to avoid a match
             * of the string with itself at the start of the input file).
             */
            s.match_length = longest_match(s, hash_head);
            /* longest_match() sets match_start */
          }

          if (s.match_length >= MIN_MATCH) {
            // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only

            /*** _tr_tally_dist(s, s.strstart - s.match_start,
                           s.match_length - MIN_MATCH, bflush); ***/
            bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);
            s.lookahead -= s.match_length;
            /* Insert new strings in the hash table only if the match length
             * is not too large. This saves time but degrades compression.
             */

            if (s.match_length <= s.max_lazy_match
            /*max_insert_length*/
            && s.lookahead >= MIN_MATCH) {
              s.match_length--;
              /* string at strstart already in table */

              do {
                s.strstart++;
                /*** INSERT_STRING(s, s.strstart, hash_head); ***/

                s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
                hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
                s.head[s.ins_h] = s.strstart;
                /***/

                /* strstart never exceeds WSIZE-MAX_MATCH, so there are
                 * always MIN_MATCH bytes ahead.
                 */
              } while (--s.match_length !== 0);

              s.strstart++;
            } else {
              s.strstart += s.match_length;
              s.match_length = 0;
              s.ins_h = s.window[s.strstart];
              /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */

              s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + 1]) & s.hash_mask; //#if MIN_MATCH != 3
              //                Call UPDATE_HASH() MIN_MATCH-3 more times
              //#endif

              /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
               * matter since it will be recomputed at next deflate call.
               */
            }
          } else {
            /* No match, output a literal byte */
            //Tracevv((stderr,"%c", s.window[s.strstart]));

            /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
            bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
            s.lookahead--;
            s.strstart++;
          }

          if (bflush) {
            /*** FLUSH_BLOCK(s, 0); ***/
            flush_block_only(s, false);

            if (s.strm.avail_out === 0) {
              return BS_NEED_MORE;
            }
            /***/

          }
        }

        s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;

        if (flush === Z_FINISH) {
          /*** FLUSH_BLOCK(s, 1); ***/
          flush_block_only(s, true);

          if (s.strm.avail_out === 0) {
            return BS_FINISH_STARTED;
          }
          /***/


          return BS_FINISH_DONE;
        }

        if (s.last_lit) {
          /*** FLUSH_BLOCK(s, 0); ***/
          flush_block_only(s, false);

          if (s.strm.avail_out === 0) {
            return BS_NEED_MORE;
          }
          /***/

        }

        return BS_BLOCK_DONE;
      }
      /* ===========================================================================
       * Same as above, but achieves better compression. We use a lazy
       * evaluation for matches: a match is finally adopted only if there is
       * no better match at the next window position.
       */


      function deflate_slow(s, flush) {
        var hash_head;
        /* head of hash chain */

        var bflush;
        /* set if current block must be flushed */

        var max_insert;
        /* Process the input block. */

        for (;;) {
          /* Make sure that we always have enough lookahead, except
           * at the end of the input file. We need MAX_MATCH bytes
           * for the next match, plus MIN_MATCH bytes to insert the
           * string following the next match.
           */
          if (s.lookahead < MIN_LOOKAHEAD) {
            fill_window(s);

            if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
              return BS_NEED_MORE;
            }

            if (s.lookahead === 0) {
              break;
            }
            /* flush the current block */

          }
          /* Insert the string window[strstart .. strstart+2] in the
           * dictionary, and set hash_head to the head of the hash chain:
           */


          hash_head = 0
          /*NIL*/
          ;

          if (s.lookahead >= MIN_MATCH) {
            /*** INSERT_STRING(s, s.strstart, hash_head); ***/
            s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
            hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
            s.head[s.ins_h] = s.strstart;
            /***/
          }
          /* Find the longest match, discarding those <= prev_length.
           */


          s.prev_length = s.match_length;
          s.prev_match = s.match_start;
          s.match_length = MIN_MATCH - 1;

          if (hash_head !== 0
          /*NIL*/
          && s.prev_length < s.max_lazy_match && s.strstart - hash_head <= s.w_size - MIN_LOOKAHEAD
          /*MAX_DIST(s)*/
          ) {
              /* To simplify the code, we prevent matches with the string
               * of window index 0 (in particular we have to avoid a match
               * of the string with itself at the start of the input file).
               */
              s.match_length = longest_match(s, hash_head);
              /* longest_match() sets match_start */

              if (s.match_length <= 5 && (s.strategy === Z_FILTERED || s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096
              /*TOO_FAR*/
              )) {
                /* If prev_match is also MIN_MATCH, match_start is garbage
                 * but we will ignore the current match anyway.
                 */
                s.match_length = MIN_MATCH - 1;
              }
            }
          /* If there was a match at the previous step and the current
           * match is not better, output the previous match:
           */


          if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
            max_insert = s.strstart + s.lookahead - MIN_MATCH;
            /* Do not insert strings in hash table beyond this. */
            //check_match(s, s.strstart-1, s.prev_match, s.prev_length);

            /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
                           s.prev_length - MIN_MATCH, bflush);***/

            bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);
            /* Insert in hash table all strings up to the end of the match.
             * strstart-1 and strstart are already inserted. If there is not
             * enough lookahead, the last two strings are not inserted in
             * the hash table.
             */

            s.lookahead -= s.prev_length - 1;
            s.prev_length -= 2;

            do {
              if (++s.strstart <= max_insert) {
                /*** INSERT_STRING(s, s.strstart, hash_head); ***/
                s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
                hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
                s.head[s.ins_h] = s.strstart;
                /***/
              }
            } while (--s.prev_length !== 0);

            s.match_available = 0;
            s.match_length = MIN_MATCH - 1;
            s.strstart++;

            if (bflush) {
              /*** FLUSH_BLOCK(s, 0); ***/
              flush_block_only(s, false);

              if (s.strm.avail_out === 0) {
                return BS_NEED_MORE;
              }
              /***/

            }
          } else if (s.match_available) {
            /* If there was no match at the previous position, output a
             * single literal. If there was a match but the current match
             * is longer, truncate the previous match to a single literal.
             */
            //Tracevv((stderr,"%c", s->window[s->strstart-1]));

            /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
            bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);

            if (bflush) {
              /*** FLUSH_BLOCK_ONLY(s, 0) ***/
              flush_block_only(s, false);
              /***/
            }

            s.strstart++;
            s.lookahead--;

            if (s.strm.avail_out === 0) {
              return BS_NEED_MORE;
            }
          } else {
            /* There is no previous match to compare with, wait for
             * the next step to decide.
             */
            s.match_available = 1;
            s.strstart++;
            s.lookahead--;
          }
        } //Assert (flush != Z_NO_FLUSH, "no flush?");


        if (s.match_available) {
          //Tracevv((stderr,"%c", s->window[s->strstart-1]));

          /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
          bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);
          s.match_available = 0;
        }

        s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;

        if (flush === Z_FINISH) {
          /*** FLUSH_BLOCK(s, 1); ***/
          flush_block_only(s, true);

          if (s.strm.avail_out === 0) {
            return BS_FINISH_STARTED;
          }
          /***/


          return BS_FINISH_DONE;
        }

        if (s.last_lit) {
          /*** FLUSH_BLOCK(s, 0); ***/
          flush_block_only(s, false);

          if (s.strm.avail_out === 0) {
            return BS_NEED_MORE;
          }
          /***/

        }

        return BS_BLOCK_DONE;
      }
      /* ===========================================================================
       * For Z_RLE, simply look for runs of bytes, generate matches only of distance
       * one.  Do not maintain a hash table.  (It will be regenerated if this run of
       * deflate switches away from Z_RLE.)
       */


      function deflate_rle(s, flush) {
        var bflush;
        /* set if current block must be flushed */

        var prev;
        /* byte at distance one to match */

        var scan, strend;
        /* scan goes up to strend for length of run */

        var _win = s.window;

        for (;;) {
          /* Make sure that we always have enough lookahead, except
           * at the end of the input file. We need MAX_MATCH bytes
           * for the longest run, plus one for the unrolled loop.
           */
          if (s.lookahead <= MAX_MATCH) {
            fill_window(s);

            if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {
              return BS_NEED_MORE;
            }

            if (s.lookahead === 0) {
              break;
            }
            /* flush the current block */

          }
          /* See how many times the previous byte repeats */


          s.match_length = 0;

          if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
            scan = s.strstart - 1;
            prev = _win[scan];

            if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
              strend = s.strstart + MAX_MATCH;

              do {
                /*jshint noempty:false*/
              } while (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && scan < strend);

              s.match_length = MAX_MATCH - (strend - scan);

              if (s.match_length > s.lookahead) {
                s.match_length = s.lookahead;
              }
            } //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");

          }
          /* Emit match if have run of MIN_MATCH or longer, else emit literal */


          if (s.match_length >= MIN_MATCH) {
            //check_match(s, s.strstart, s.strstart - 1, s.match_length);

            /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
            bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);
            s.lookahead -= s.match_length;
            s.strstart += s.match_length;
            s.match_length = 0;
          } else {
            /* No match, output a literal byte */
            //Tracevv((stderr,"%c", s->window[s->strstart]));

            /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
            bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
            s.lookahead--;
            s.strstart++;
          }

          if (bflush) {
            /*** FLUSH_BLOCK(s, 0); ***/
            flush_block_only(s, false);

            if (s.strm.avail_out === 0) {
              return BS_NEED_MORE;
            }
            /***/

          }
        }

        s.insert = 0;

        if (flush === Z_FINISH) {
          /*** FLUSH_BLOCK(s, 1); ***/
          flush_block_only(s, true);

          if (s.strm.avail_out === 0) {
            return BS_FINISH_STARTED;
          }
          /***/


          return BS_FINISH_DONE;
        }

        if (s.last_lit) {
          /*** FLUSH_BLOCK(s, 0); ***/
          flush_block_only(s, false);

          if (s.strm.avail_out === 0) {
            return BS_NEED_MORE;
          }
          /***/

        }

        return BS_BLOCK_DONE;
      }
      /* ===========================================================================
       * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
       * (It will be regenerated if this run of deflate switches away from Huffman.)
       */


      function deflate_huff(s, flush) {
        var bflush;
        /* set if current block must be flushed */

        for (;;) {
          /* Make sure that we have a literal to write. */
          if (s.lookahead === 0) {
            fill_window(s);

            if (s.lookahead === 0) {
              if (flush === Z_NO_FLUSH) {
                return BS_NEED_MORE;
              }

              break;
              /* flush the current block */
            }
          }
          /* Output a literal byte */


          s.match_length = 0; //Tracevv((stderr,"%c", s->window[s->strstart]));

          /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/

          bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
          s.lookahead--;
          s.strstart++;

          if (bflush) {
            /*** FLUSH_BLOCK(s, 0); ***/
            flush_block_only(s, false);

            if (s.strm.avail_out === 0) {
              return BS_NEED_MORE;
            }
            /***/

          }
        }

        s.insert = 0;

        if (flush === Z_FINISH) {
          /*** FLUSH_BLOCK(s, 1); ***/
          flush_block_only(s, true);

          if (s.strm.avail_out === 0) {
            return BS_FINISH_STARTED;
          }
          /***/


          return BS_FINISH_DONE;
        }

        if (s.last_lit) {
          /*** FLUSH_BLOCK(s, 0); ***/
          flush_block_only(s, false);

          if (s.strm.avail_out === 0) {
            return BS_NEED_MORE;
          }
          /***/

        }

        return BS_BLOCK_DONE;
      }
      /* Values for max_lazy_match, good_match and max_chain_length, depending on
       * the desired pack level (0..9). The values given below have been tuned to
       * exclude worst case performance for pathological files. Better values may be
       * found for specific files.
       */


      function Config(good_length, max_lazy, nice_length, max_chain, func) {
        this.good_length = good_length;
        this.max_lazy = max_lazy;
        this.nice_length = nice_length;
        this.max_chain = max_chain;
        this.func = func;
      }

      var configuration_table;
      configuration_table = [
      /*      good lazy nice chain */
      new Config(0, 0, 0, 0, deflate_stored),
      /* 0 store only */
      new Config(4, 4, 8, 4, deflate_fast),
      /* 1 max speed, no lazy matches */
      new Config(4, 5, 16, 8, deflate_fast),
      /* 2 */
      new Config(4, 6, 32, 32, deflate_fast),
      /* 3 */
      new Config(4, 4, 16, 16, deflate_slow),
      /* 4 lazy matches */
      new Config(8, 16, 32, 32, deflate_slow),
      /* 5 */
      new Config(8, 16, 128, 128, deflate_slow),
      /* 6 */
      new Config(8, 32, 128, 256, deflate_slow),
      /* 7 */
      new Config(32, 128, 258, 1024, deflate_slow),
      /* 8 */
      new Config(32, 258, 258, 4096, deflate_slow)
      /* 9 max compression */
      ];
      /* ===========================================================================
       * Initialize the "longest match" routines for a new zlib stream
       */

      function lm_init(s) {
        s.window_size = 2 * s.w_size;
        /*** CLEAR_HASH(s); ***/

        zero(s.head); // Fill with NIL (= 0);

        /* Set the default configuration parameters:
         */

        s.max_lazy_match = configuration_table[s.level].max_lazy;
        s.good_match = configuration_table[s.level].good_length;
        s.nice_match = configuration_table[s.level].nice_length;
        s.max_chain_length = configuration_table[s.level].max_chain;
        s.strstart = 0;
        s.block_start = 0;
        s.lookahead = 0;
        s.insert = 0;
        s.match_length = s.prev_length = MIN_MATCH - 1;
        s.match_available = 0;
        s.ins_h = 0;
      }

      function DeflateState() {
        this.strm = null;
        /* pointer back to this zlib stream */

        this.status = 0;
        /* as the name implies */

        this.pending_buf = null;
        /* output still pending */

        this.pending_buf_size = 0;
        /* size of pending_buf */

        this.pending_out = 0;
        /* next pending byte to output to the stream */

        this.pending = 0;
        /* nb of bytes in the pending buffer */

        this.wrap = 0;
        /* bit 0 true for zlib, bit 1 true for gzip */

        this.gzhead = null;
        /* gzip header information to write */

        this.gzindex = 0;
        /* where in extra, name, or comment */

        this.method = Z_DEFLATED;
        /* can only be DEFLATED */

        this.last_flush = -1;
        /* value of flush param for previous deflate call */

        this.w_size = 0;
        /* LZ77 window size (32K by default) */

        this.w_bits = 0;
        /* log2(w_size)  (8..16) */

        this.w_mask = 0;
        /* w_size - 1 */

        this.window = null;
        /* Sliding window. Input bytes are read into the second half of the window,
         * and move to the first half later to keep a dictionary of at least wSize
         * bytes. With this organization, matches are limited to a distance of
         * wSize-MAX_MATCH bytes, but this ensures that IO is always
         * performed with a length multiple of the block size.
         */

        this.window_size = 0;
        /* Actual size of window: 2*wSize, except when the user input buffer
         * is directly used as sliding window.
         */

        this.prev = null;
        /* Link to older string with same hash index. To limit the size of this
         * array to 64K, this link is maintained only for the last 32K strings.
         * An index in this array is thus a window index modulo 32K.
         */

        this.head = null;
        /* Heads of the hash chains or NIL. */

        this.ins_h = 0;
        /* hash index of string to be inserted */

        this.hash_size = 0;
        /* number of elements in hash table */

        this.hash_bits = 0;
        /* log2(hash_size) */

        this.hash_mask = 0;
        /* hash_size-1 */

        this.hash_shift = 0;
        /* Number of bits by which ins_h must be shifted at each input
         * step. It must be such that after MIN_MATCH steps, the oldest
         * byte no longer takes part in the hash key, that is:
         *   hash_shift * MIN_MATCH >= hash_bits
         */

        this.block_start = 0;
        /* Window position at the beginning of the current output block. Gets
         * negative when the window is moved backwards.
         */

        this.match_length = 0;
        /* length of best match */

        this.prev_match = 0;
        /* previous match */

        this.match_available = 0;
        /* set if previous match exists */

        this.strstart = 0;
        /* start of string to insert */

        this.match_start = 0;
        /* start of matching string */

        this.lookahead = 0;
        /* number of valid bytes ahead in window */

        this.prev_length = 0;
        /* Length of the best match at previous step. Matches not greater than this
         * are discarded. This is used in the lazy match evaluation.
         */

        this.max_chain_length = 0;
        /* To speed up deflation, hash chains are never searched beyond this
         * length.  A higher limit improves compression ratio but degrades the
         * speed.
         */

        this.max_lazy_match = 0;
        /* Attempt to find a better match only when the current match is strictly
         * smaller than this value. This mechanism is used only for compression
         * levels >= 4.
         */
        // That's alias to max_lazy_match, don't use directly
        //this.max_insert_length = 0;

        /* Insert new strings in the hash table only if the match length is not
         * greater than this length. This saves time but degrades compression.
         * max_insert_length is used only for compression levels <= 3.
         */

        this.level = 0;
        /* compression level (1..9) */

        this.strategy = 0;
        /* favor or force Huffman coding*/

        this.good_match = 0;
        /* Use a faster search when the previous match is longer than this */

        this.nice_match = 0;
        /* Stop searching when current match exceeds this */

        /* used by trees.c: */

        /* Didn't use ct_data typedef below to suppress compiler warning */
        // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
        // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
        // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */
        // Use flat array of DOUBLE size, with interleaved fata,
        // because JS does not support effective

        this.dyn_ltree = new utils.Buf16(HEAP_SIZE * 2);
        this.dyn_dtree = new utils.Buf16((2 * D_CODES + 1) * 2);
        this.bl_tree = new utils.Buf16((2 * BL_CODES + 1) * 2);
        zero(this.dyn_ltree);
        zero(this.dyn_dtree);
        zero(this.bl_tree);
        this.l_desc = null;
        /* desc. for literal tree */

        this.d_desc = null;
        /* desc. for distance tree */

        this.bl_desc = null;
        /* desc. for bit length tree */
        //ush bl_count[MAX_BITS+1];

        this.bl_count = new utils.Buf16(MAX_BITS + 1);
        /* number of codes at each bit length for an optimal tree */
        //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */

        this.heap = new utils.Buf16(2 * L_CODES + 1);
        /* heap used to build the Huffman trees */

        zero(this.heap);
        this.heap_len = 0;
        /* number of elements in the heap */

        this.heap_max = 0;
        /* element of largest frequency */

        /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
         * The same heap array is used to build all trees.
         */

        this.depth = new utils.Buf16(2 * L_CODES + 1); //uch depth[2*L_CODES+1];

        zero(this.depth);
        /* Depth of each subtree used as tie breaker for trees of equal frequency
         */

        this.l_buf = 0;
        /* buffer index for literals or lengths */

        this.lit_bufsize = 0;
        /* Size of match buffer for literals/lengths.  There are 4 reasons for
         * limiting lit_bufsize to 64K:
         *   - frequencies can be kept in 16 bit counters
         *   - if compression is not successful for the first block, all input
         *     data is still in the window so we can still emit a stored block even
         *     when input comes from standard input.  (This can also be done for
         *     all blocks if lit_bufsize is not greater than 32K.)
         *   - if compression is not successful for a file smaller than 64K, we can
         *     even emit a stored file instead of a stored block (saving 5 bytes).
         *     This is applicable only for zip (not gzip or zlib).
         *   - creating new Huffman trees less frequently may not provide fast
         *     adaptation to changes in the input data statistics. (Take for
         *     example a binary file with poorly compressible code followed by
         *     a highly compressible string table.) Smaller buffer sizes give
         *     fast adaptation but have of course the overhead of transmitting
         *     trees more frequently.
         *   - I can't count above 4
         */

        this.last_lit = 0;
        /* running index in l_buf */

        this.d_buf = 0;
        /* Buffer index for distances. To simplify the code, d_buf and l_buf have
         * the same number of elements. To use different lengths, an extra flag
         * array would be necessary.
         */

        this.opt_len = 0;
        /* bit length of current block with optimal trees */

        this.static_len = 0;
        /* bit length of current block with static trees */

        this.matches = 0;
        /* number of string matches in current block */

        this.insert = 0;
        /* bytes at end of window left to insert */

        this.bi_buf = 0;
        /* Output buffer. bits are inserted starting at the bottom (least
         * significant bits).
         */

        this.bi_valid = 0;
        /* Number of valid bits in bi_buf.  All bits above the last valid bit
         * are always zero.
         */
        // Used for window memory init. We safely ignore it for JS. That makes
        // sense only for pointers and memory check tools.
        //this.high_water = 0;

        /* High water mark offset in window for initialized bytes -- bytes above
         * this are set to zero in order to avoid memory check warnings when
         * longest match routines access bytes past the input.  This is then
         * updated to the new high water mark.
         */
      }

      function deflateResetKeep(strm) {
        var s;

        if (!strm || !strm.state) {
          return err(strm, Z_STREAM_ERROR);
        }

        strm.total_in = strm.total_out = 0;
        strm.data_type = Z_UNKNOWN;
        s = strm.state;
        s.pending = 0;
        s.pending_out = 0;

        if (s.wrap < 0) {
          s.wrap = -s.wrap;
          /* was made negative by deflate(..., Z_FINISH); */
        }

        s.status = s.wrap ? INIT_STATE : BUSY_STATE;
        strm.adler = s.wrap === 2 ? 0 // crc32(0, Z_NULL, 0)
        : 1; // adler32(0, Z_NULL, 0)

        s.last_flush = Z_NO_FLUSH;

        trees._tr_init(s);

        return Z_OK;
      }

      function deflateReset(strm) {
        var ret = deflateResetKeep(strm);

        if (ret === Z_OK) {
          lm_init(strm.state);
        }

        return ret;
      }

      function deflateSetHeader(strm, head) {
        if (!strm || !strm.state) {
          return Z_STREAM_ERROR;
        }

        if (strm.state.wrap !== 2) {
          return Z_STREAM_ERROR;
        }

        strm.state.gzhead = head;
        return Z_OK;
      }

      function deflateInit2(strm, level, method, windowBits, memLevel, strategy) {
        if (!strm) {
          // === Z_NULL
          return Z_STREAM_ERROR;
        }

        var wrap = 1;

        if (level === Z_DEFAULT_COMPRESSION) {
          level = 6;
        }

        if (windowBits < 0) {
          /* suppress zlib wrapper */
          wrap = 0;
          windowBits = -windowBits;
        } else if (windowBits > 15) {
          wrap = 2;
          /* write gzip wrapper instead */

          windowBits -= 16;
        }

        if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED || windowBits < 8 || windowBits > 15 || level < 0 || level > 9 || strategy < 0 || strategy > Z_FIXED) {
          return err(strm, Z_STREAM_ERROR);
        }

        if (windowBits === 8) {
          windowBits = 9;
        }
        /* until 256-byte window bug fixed */


        var s = new DeflateState();
        strm.state = s;
        s.strm = strm;
        s.wrap = wrap;
        s.gzhead = null;
        s.w_bits = windowBits;
        s.w_size = 1 << s.w_bits;
        s.w_mask = s.w_size - 1;
        s.hash_bits = memLevel + 7;
        s.hash_size = 1 << s.hash_bits;
        s.hash_mask = s.hash_size - 1;
        s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);
        s.window = new utils.Buf8(s.w_size * 2);
        s.head = new utils.Buf16(s.hash_size);
        s.prev = new utils.Buf16(s.w_size); // Don't need mem init magic for JS.
        //s.high_water = 0;  /* nothing written to s->window yet */

        s.lit_bufsize = 1 << memLevel + 6;
        /* 16K elements by default */

        s.pending_buf_size = s.lit_bufsize * 4; //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);
        //s->pending_buf = (uchf *) overlay;

        s.pending_buf = new utils.Buf8(s.pending_buf_size); // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)
        //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);

        s.d_buf = 1 * s.lit_bufsize; //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;

        s.l_buf = (1 + 2) * s.lit_bufsize;
        s.level = level;
        s.strategy = strategy;
        s.method = method;
        return deflateReset(strm);
      }

      function deflateInit(strm, level) {
        return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);
      }

      function deflate(strm, flush) {
        var old_flush, s;
        var beg, val; // for gzip header write only

        if (!strm || !strm.state || flush > Z_BLOCK || flush < 0) {
          return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;
        }

        s = strm.state;

        if (!strm.output || !strm.input && strm.avail_in !== 0 || s.status === FINISH_STATE && flush !== Z_FINISH) {
          return err(strm, strm.avail_out === 0 ? Z_BUF_ERROR : Z_STREAM_ERROR);
        }

        s.strm = strm;
        /* just in case */

        old_flush = s.last_flush;
        s.last_flush = flush;
        /* Write the header */

        if (s.status === INIT_STATE) {
          if (s.wrap === 2) {
            // GZIP header
            strm.adler = 0; //crc32(0L, Z_NULL, 0);

            put_byte(s, 31);
            put_byte(s, 139);
            put_byte(s, 8);

            if (!s.gzhead) {
              // s->gzhead == Z_NULL
              put_byte(s, 0);
              put_byte(s, 0);
              put_byte(s, 0);
              put_byte(s, 0);
              put_byte(s, 0);
              put_byte(s, s.level === 9 ? 2 : s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ? 4 : 0);
              put_byte(s, OS_CODE);
              s.status = BUSY_STATE;
            } else {
              put_byte(s, (s.gzhead.text ? 1 : 0) + (s.gzhead.hcrc ? 2 : 0) + (!s.gzhead.extra ? 0 : 4) + (!s.gzhead.name ? 0 : 8) + (!s.gzhead.comment ? 0 : 16));
              put_byte(s, s.gzhead.time & 0xff);
              put_byte(s, s.gzhead.time >> 8 & 0xff);
              put_byte(s, s.gzhead.time >> 16 & 0xff);
              put_byte(s, s.gzhead.time >> 24 & 0xff);
              put_byte(s, s.level === 9 ? 2 : s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ? 4 : 0);
              put_byte(s, s.gzhead.os & 0xff);

              if (s.gzhead.extra && s.gzhead.extra.length) {
                put_byte(s, s.gzhead.extra.length & 0xff);
                put_byte(s, s.gzhead.extra.length >> 8 & 0xff);
              }

              if (s.gzhead.hcrc) {
                strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);
              }

              s.gzindex = 0;
              s.status = EXTRA_STATE;
            }
          } else // DEFLATE header
            {
              var header = Z_DEFLATED + (s.w_bits - 8 << 4) << 8;
              var level_flags = -1;

              if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
                level_flags = 0;
              } else if (s.level < 6) {
                level_flags = 1;
              } else if (s.level === 6) {
                level_flags = 2;
              } else {
                level_flags = 3;
              }

              header |= level_flags << 6;

              if (s.strstart !== 0) {
                header |= PRESET_DICT;
              }

              header += 31 - header % 31;
              s.status = BUSY_STATE;
              putShortMSB(s, header);
              /* Save the adler32 of the preset dictionary: */

              if (s.strstart !== 0) {
                putShortMSB(s, strm.adler >>> 16);
                putShortMSB(s, strm.adler & 0xffff);
              }

              strm.adler = 1; // adler32(0L, Z_NULL, 0);
            }
        } //#ifdef GZIP


        if (s.status === EXTRA_STATE) {
          if (s.gzhead.extra
          /* != Z_NULL*/
          ) {
              beg = s.pending;
              /* start of bytes to update crc */

              while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {
                if (s.pending === s.pending_buf_size) {
                  if (s.gzhead.hcrc && s.pending > beg) {
                    strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
                  }

                  flush_pending(strm);
                  beg = s.pending;

                  if (s.pending === s.pending_buf_size) {
                    break;
                  }
                }

                put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);
                s.gzindex++;
              }

              if (s.gzhead.hcrc && s.pending > beg) {
                strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
              }

              if (s.gzindex === s.gzhead.extra.length) {
                s.gzindex = 0;
                s.status = NAME_STATE;
              }
            } else {
            s.status = NAME_STATE;
          }
        }

        if (s.status === NAME_STATE) {
          if (s.gzhead.name
          /* != Z_NULL*/
          ) {
              beg = s.pending;
              /* start of bytes to update crc */
              //int val;

              do {
                if (s.pending === s.pending_buf_size) {
                  if (s.gzhead.hcrc && s.pending > beg) {
                    strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
                  }

                  flush_pending(strm);
                  beg = s.pending;

                  if (s.pending === s.pending_buf_size) {
                    val = 1;
                    break;
                  }
                } // JS specific: little magic to add zero terminator to end of string


                if (s.gzindex < s.gzhead.name.length) {
                  val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
                } else {
                  val = 0;
                }

                put_byte(s, val);
              } while (val !== 0);

              if (s.gzhead.hcrc && s.pending > beg) {
                strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
              }

              if (val === 0) {
                s.gzindex = 0;
                s.status = COMMENT_STATE;
              }
            } else {
            s.status = COMMENT_STATE;
          }
        }

        if (s.status === COMMENT_STATE) {
          if (s.gzhead.comment
          /* != Z_NULL*/
          ) {
              beg = s.pending;
              /* start of bytes to update crc */
              //int val;

              do {
                if (s.pending === s.pending_buf_size) {
                  if (s.gzhead.hcrc && s.pending > beg) {
                    strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
                  }

                  flush_pending(strm);
                  beg = s.pending;

                  if (s.pending === s.pending_buf_size) {
                    val = 1;
                    break;
                  }
                } // JS specific: little magic to add zero terminator to end of string


                if (s.gzindex < s.gzhead.comment.length) {
                  val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
                } else {
                  val = 0;
                }

                put_byte(s, val);
              } while (val !== 0);

              if (s.gzhead.hcrc && s.pending > beg) {
                strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
              }

              if (val === 0) {
                s.status = HCRC_STATE;
              }
            } else {
            s.status = HCRC_STATE;
          }
        }

        if (s.status === HCRC_STATE) {
          if (s.gzhead.hcrc) {
            if (s.pending + 2 > s.pending_buf_size) {
              flush_pending(strm);
            }

            if (s.pending + 2 <= s.pending_buf_size) {
              put_byte(s, strm.adler & 0xff);
              put_byte(s, strm.adler >> 8 & 0xff);
              strm.adler = 0; //crc32(0L, Z_NULL, 0);

              s.status = BUSY_STATE;
            }
          } else {
            s.status = BUSY_STATE;
          }
        } //#endif

        /* Flush as much pending output as possible */


        if (s.pending !== 0) {
          flush_pending(strm);

          if (strm.avail_out === 0) {
            /* Since avail_out is 0, deflate will be called again with
             * more output space, but possibly with both pending and
             * avail_in equal to zero. There won't be anything to do,
             * but this is not an error situation so make sure we
             * return OK instead of BUF_ERROR at next call of deflate:
             */
            s.last_flush = -1;
            return Z_OK;
          }
          /* Make sure there is something to do and avoid duplicate consecutive
           * flushes. For repeated and useless calls with Z_FINISH, we keep
           * returning Z_STREAM_END instead of Z_BUF_ERROR.
           */

        } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) && flush !== Z_FINISH) {
          return err(strm, Z_BUF_ERROR);
        }
        /* User must not provide more input after the first FINISH: */


        if (s.status === FINISH_STATE && strm.avail_in !== 0) {
          return err(strm, Z_BUF_ERROR);
        }
        /* Start a new block or continue the current one.
         */


        if (strm.avail_in !== 0 || s.lookahead !== 0 || flush !== Z_NO_FLUSH && s.status !== FINISH_STATE) {
          var bstate = s.strategy === Z_HUFFMAN_ONLY ? deflate_huff(s, flush) : s.strategy === Z_RLE ? deflate_rle(s, flush) : configuration_table[s.level].func(s, flush);

          if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
            s.status = FINISH_STATE;
          }

          if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
            if (strm.avail_out === 0) {
              s.last_flush = -1;
              /* avoid BUF_ERROR next call, see above */
            }

            return Z_OK;
            /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
             * of deflate should use the same flush parameter to make sure
             * that the flush is complete. So we don't have to output an
             * empty block here, this will be done at next call. This also
             * ensures that for a very small output buffer, we emit at most
             * one empty block.
             */
          }

          if (bstate === BS_BLOCK_DONE) {
            if (flush === Z_PARTIAL_FLUSH) {
              trees._tr_align(s);
            } else if (flush !== Z_BLOCK) {
              /* FULL_FLUSH or SYNC_FLUSH */
              trees._tr_stored_block(s, 0, 0, false);
              /* For a full flush, this empty block will be recognized
               * as a special marker by inflate_sync().
               */


              if (flush === Z_FULL_FLUSH) {
                /*** CLEAR_HASH(s); ***/

                /* forget history */
                zero(s.head); // Fill with NIL (= 0);

                if (s.lookahead === 0) {
                  s.strstart = 0;
                  s.block_start = 0;
                  s.insert = 0;
                }
              }
            }

            flush_pending(strm);

            if (strm.avail_out === 0) {
              s.last_flush = -1;
              /* avoid BUF_ERROR at next call, see above */

              return Z_OK;
            }
          }
        } //Assert(strm->avail_out > 0, "bug2");
        //if (strm.avail_out <= 0) { throw new Error("bug2");}


        if (flush !== Z_FINISH) {
          return Z_OK;
        }

        if (s.wrap <= 0) {
          return Z_STREAM_END;
        }
        /* Write the trailer */


        if (s.wrap === 2) {
          put_byte(s, strm.adler & 0xff);
          put_byte(s, strm.adler >> 8 & 0xff);
          put_byte(s, strm.adler >> 16 & 0xff);
          put_byte(s, strm.adler >> 24 & 0xff);
          put_byte(s, strm.total_in & 0xff);
          put_byte(s, strm.total_in >> 8 & 0xff);
          put_byte(s, strm.total_in >> 16 & 0xff);
          put_byte(s, strm.total_in >> 24 & 0xff);
        } else {
          putShortMSB(s, strm.adler >>> 16);
          putShortMSB(s, strm.adler & 0xffff);
        }

        flush_pending(strm);
        /* If avail_out is zero, the application will call deflate again
         * to flush the rest.
         */

        if (s.wrap > 0) {
          s.wrap = -s.wrap;
        }
        /* write the trailer only once! */


        return s.pending !== 0 ? Z_OK : Z_STREAM_END;
      }

      function deflateEnd(strm) {
        var status;

        if (!strm
        /*== Z_NULL*/
        || !strm.state
        /*== Z_NULL*/
        ) {
            return Z_STREAM_ERROR;
          }

        status = strm.state.status;

        if (status !== INIT_STATE && status !== EXTRA_STATE && status !== NAME_STATE && status !== COMMENT_STATE && status !== HCRC_STATE && status !== BUSY_STATE && status !== FINISH_STATE) {
          return err(strm, Z_STREAM_ERROR);
        }

        strm.state = null;
        return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;
      }
      /* =========================================================================
       * Initializes the compression dictionary from the given byte
       * sequence without producing any compressed output.
       */


      function deflateSetDictionary(strm, dictionary) {
        var dictLength = dictionary.length;
        var s;
        var str, n;
        var wrap;
        var avail;
        var next;
        var input;
        var tmpDict;

        if (!strm
        /*== Z_NULL*/
        || !strm.state
        /*== Z_NULL*/
        ) {
            return Z_STREAM_ERROR;
          }

        s = strm.state;
        wrap = s.wrap;

        if (wrap === 2 || wrap === 1 && s.status !== INIT_STATE || s.lookahead) {
          return Z_STREAM_ERROR;
        }
        /* when using zlib wrappers, compute Adler-32 for provided dictionary */


        if (wrap === 1) {
          /* adler32(strm->adler, dictionary, dictLength); */
          strm.adler = adler32(strm.adler, dictionary, dictLength, 0);
        }

        s.wrap = 0;
        /* avoid computing Adler-32 in read_buf */

        /* if dictionary would fill window, just replace the history */

        if (dictLength >= s.w_size) {
          if (wrap === 0) {
            /* already empty otherwise */

            /*** CLEAR_HASH(s); ***/
            zero(s.head); // Fill with NIL (= 0);

            s.strstart = 0;
            s.block_start = 0;
            s.insert = 0;
          }
          /* use the tail */
          // dictionary = dictionary.slice(dictLength - s.w_size);


          tmpDict = new utils.Buf8(s.w_size);
          utils.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);
          dictionary = tmpDict;
          dictLength = s.w_size;
        }
        /* insert dictionary into window and hash */


        avail = strm.avail_in;
        next = strm.next_in;
        input = strm.input;
        strm.avail_in = dictLength;
        strm.next_in = 0;
        strm.input = dictionary;
        fill_window(s);

        while (s.lookahead >= MIN_MATCH) {
          str = s.strstart;
          n = s.lookahead - (MIN_MATCH - 1);

          do {
            /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
            s.ins_h = (s.ins_h << s.hash_shift ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;
            s.prev[str & s.w_mask] = s.head[s.ins_h];
            s.head[s.ins_h] = str;
            str++;
          } while (--n);

          s.strstart = str;
          s.lookahead = MIN_MATCH - 1;
          fill_window(s);
        }

        s.strstart += s.lookahead;
        s.block_start = s.strstart;
        s.insert = s.lookahead;
        s.lookahead = 0;
        s.match_length = s.prev_length = MIN_MATCH - 1;
        s.match_available = 0;
        strm.next_in = next;
        strm.input = input;
        strm.avail_in = avail;
        s.wrap = wrap;
        return Z_OK;
      }

      exports.deflateInit = deflateInit;
      exports.deflateInit2 = deflateInit2;
      exports.deflateReset = deflateReset;
      exports.deflateResetKeep = deflateResetKeep;
      exports.deflateSetHeader = deflateSetHeader;
      exports.deflate = deflate;
      exports.deflateEnd = deflateEnd;
      exports.deflateSetDictionary = deflateSetDictionary;
      exports.deflateInfo = 'pako deflate (from Nodeca project)';
      /* Not implemented
      exports.deflateBound = deflateBound;
      exports.deflateCopy = deflateCopy;
      exports.deflateParams = deflateParams;
      exports.deflatePending = deflatePending;
      exports.deflatePrime = deflatePrime;
      exports.deflateTune = deflateTune;
      */

      /***/
    },
    /* 356 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict"; // (C) 1995-2013 Jean-loup Gailly and Mark Adler
      // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
      //
      // This software is provided 'as-is', without any express or implied
      // warranty. In no event will the authors be held liable for any damages
      // arising from the use of this software.
      //
      // Permission is granted to anyone to use this software for any purpose,
      // including commercial applications, and to alter it and redistribute it
      // freely, subject to the following restrictions:
      //
      // 1. The origin of this software must not be misrepresented; you must not
      //   claim that you wrote the original software. If you use this software
      //   in a product, an acknowledgment in the product documentation would be
      //   appreciated but is not required.
      // 2. Altered source versions must be plainly marked as such, and must not be
      //   misrepresented as being the original software.
      // 3. This notice may not be removed or altered from any source distribution.

      /* eslint-disable space-unary-ops */

      var utils = __webpack_require__(126);
      /* Public constants ==========================================================*/

      /* ===========================================================================*/
      //var Z_FILTERED          = 1;
      //var Z_HUFFMAN_ONLY      = 2;
      //var Z_RLE               = 3;


      var Z_FIXED = 4; //var Z_DEFAULT_STRATEGY  = 0;

      /* Possible values of the data_type field (though see inflate()) */

      var Z_BINARY = 0;
      var Z_TEXT = 1; //var Z_ASCII             = 1; // = Z_TEXT

      var Z_UNKNOWN = 2;
      /*============================================================================*/

      function zero(buf) {
        var len = buf.length;

        while (--len >= 0) {
          buf[len] = 0;
        }
      } // From zutil.h


      var STORED_BLOCK = 0;
      var STATIC_TREES = 1;
      var DYN_TREES = 2;
      /* The three kinds of block type */

      var MIN_MATCH = 3;
      var MAX_MATCH = 258;
      /* The minimum and maximum match lengths */
      // From deflate.h

      /* ===========================================================================
       * Internal compression state.
       */

      var LENGTH_CODES = 29;
      /* number of length codes, not counting the special END_BLOCK code */

      var LITERALS = 256;
      /* number of literal bytes 0..255 */

      var L_CODES = LITERALS + 1 + LENGTH_CODES;
      /* number of Literal or Length codes, including the END_BLOCK code */

      var D_CODES = 30;
      /* number of distance codes */

      var BL_CODES = 19;
      /* number of codes used to transfer the bit lengths */

      var HEAP_SIZE = 2 * L_CODES + 1;
      /* maximum heap size */

      var MAX_BITS = 15;
      /* All codes must not exceed MAX_BITS bits */

      var Buf_size = 16;
      /* size of bit buffer in bi_buf */

      /* ===========================================================================
       * Constants
       */

      var MAX_BL_BITS = 7;
      /* Bit length codes must not exceed MAX_BL_BITS bits */

      var END_BLOCK = 256;
      /* end of block literal code */

      var REP_3_6 = 16;
      /* repeat previous bit length 3-6 times (2 bits of repeat count) */

      var REPZ_3_10 = 17;
      /* repeat a zero length 3-10 times  (3 bits of repeat count) */

      var REPZ_11_138 = 18;
      /* repeat a zero length 11-138 times  (7 bits of repeat count) */

      /* eslint-disable comma-spacing,array-bracket-spacing */

      var extra_lbits =
      /* extra bits for each length code */
      [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0];
      var extra_dbits =
      /* extra bits for each distance code */
      [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13];
      var extra_blbits =
      /* extra bits for each bit length code */
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7];
      var bl_order = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
      /* eslint-enable comma-spacing,array-bracket-spacing */

      /* The lengths of the bit length codes are sent in order of decreasing
       * probability, to avoid transmitting the lengths for unused bit length codes.
       */

      /* ===========================================================================
       * Local data. These are initialized only once.
       */
      // We pre-fill arrays with 0 to avoid uninitialized gaps

      var DIST_CODE_LEN = 512;
      /* see definition of array dist_code below */
      // !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1

      var static_ltree = new Array((L_CODES + 2) * 2);
      zero(static_ltree);
      /* The static literal tree. Since the bit lengths are imposed, there is no
       * need for the L_CODES extra codes used during heap construction. However
       * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
       * below).
       */

      var static_dtree = new Array(D_CODES * 2);
      zero(static_dtree);
      /* The static distance tree. (Actually a trivial tree since all codes use
       * 5 bits.)
       */

      var _dist_code = new Array(DIST_CODE_LEN);

      zero(_dist_code);
      /* Distance codes. The first 256 values correspond to the distances
       * 3 .. 258, the last 256 values correspond to the top 8 bits of
       * the 15 bit distances.
       */

      var _length_code = new Array(MAX_MATCH - MIN_MATCH + 1);

      zero(_length_code);
      /* length code for each normalized match length (0 == MIN_MATCH) */

      var base_length = new Array(LENGTH_CODES);
      zero(base_length);
      /* First normalized length for each code (0 = MIN_MATCH) */

      var base_dist = new Array(D_CODES);
      zero(base_dist);
      /* First normalized distance for each code (0 = distance of 1) */

      function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {
        this.static_tree = static_tree;
        /* static tree or NULL */

        this.extra_bits = extra_bits;
        /* extra bits for each code or NULL */

        this.extra_base = extra_base;
        /* base index for extra_bits */

        this.elems = elems;
        /* max number of elements in the tree */

        this.max_length = max_length;
        /* max bit length for the codes */
        // show if `static_tree` has data or dummy - needed for monomorphic objects

        this.has_stree = static_tree && static_tree.length;
      }

      var static_l_desc;
      var static_d_desc;
      var static_bl_desc;

      function TreeDesc(dyn_tree, stat_desc) {
        this.dyn_tree = dyn_tree;
        /* the dynamic tree */

        this.max_code = 0;
        /* largest code with non zero frequency */

        this.stat_desc = stat_desc;
        /* the corresponding static tree */
      }

      function d_code(dist) {
        return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
      }
      /* ===========================================================================
       * Output a short LSB first on the stream.
       * IN assertion: there is enough room in pendingBuf.
       */


      function put_short(s, w) {
        //    put_byte(s, (uch)((w) & 0xff));
        //    put_byte(s, (uch)((ush)(w) >> 8));
        s.pending_buf[s.pending++] = w & 0xff;
        s.pending_buf[s.pending++] = w >>> 8 & 0xff;
      }
      /* ===========================================================================
       * Send a value on a given number of bits.
       * IN assertion: length <= 16 and value fits in length bits.
       */


      function send_bits(s, value, length) {
        if (s.bi_valid > Buf_size - length) {
          s.bi_buf |= value << s.bi_valid & 0xffff;
          put_short(s, s.bi_buf);
          s.bi_buf = value >> Buf_size - s.bi_valid;
          s.bi_valid += length - Buf_size;
        } else {
          s.bi_buf |= value << s.bi_valid & 0xffff;
          s.bi_valid += length;
        }
      }

      function send_code(s, c, tree) {
        send_bits(s, tree[c * 2]
        /*.Code*/
        , tree[c * 2 + 1]
        /*.Len*/
        );
      }
      /* ===========================================================================
       * Reverse the first len bits of a code, using straightforward code (a faster
       * method would use a table)
       * IN assertion: 1 <= len <= 15
       */


      function bi_reverse(code, len) {
        var res = 0;

        do {
          res |= code & 1;
          code >>>= 1;
          res <<= 1;
        } while (--len > 0);

        return res >>> 1;
      }
      /* ===========================================================================
       * Flush the bit buffer, keeping at most 7 bits in it.
       */


      function bi_flush(s) {
        if (s.bi_valid === 16) {
          put_short(s, s.bi_buf);
          s.bi_buf = 0;
          s.bi_valid = 0;
        } else if (s.bi_valid >= 8) {
          s.pending_buf[s.pending++] = s.bi_buf & 0xff;
          s.bi_buf >>= 8;
          s.bi_valid -= 8;
        }
      }
      /* ===========================================================================
       * Compute the optimal bit lengths for a tree and update the total bit length
       * for the current block.
       * IN assertion: the fields freq and dad are set, heap[heap_max] and
       *    above are the tree nodes sorted by increasing frequency.
       * OUT assertions: the field len is set to the optimal bit length, the
       *     array bl_count contains the frequencies for each bit length.
       *     The length opt_len is updated; static_len is also updated if stree is
       *     not null.
       */


      function gen_bitlen(s, desc) //    deflate_state *s;
      //    tree_desc *desc;    /* the tree descriptor */
      {
        var tree = desc.dyn_tree;
        var max_code = desc.max_code;
        var stree = desc.stat_desc.static_tree;
        var has_stree = desc.stat_desc.has_stree;
        var extra = desc.stat_desc.extra_bits;
        var base = desc.stat_desc.extra_base;
        var max_length = desc.stat_desc.max_length;
        var h;
        /* heap index */

        var n, m;
        /* iterate over the tree elements */

        var bits;
        /* bit length */

        var xbits;
        /* extra bits */

        var f;
        /* frequency */

        var overflow = 0;
        /* number of elements with bit length too large */

        for (bits = 0; bits <= MAX_BITS; bits++) {
          s.bl_count[bits] = 0;
        }
        /* In a first pass, compute the optimal bit lengths (which may
         * overflow in the case of the bit length tree).
         */


        tree[s.heap[s.heap_max] * 2 + 1]
        /*.Len*/
        = 0;
        /* root of the heap */

        for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {
          n = s.heap[h];
          bits = tree[tree[n * 2 + 1]
          /*.Dad*/
          * 2 + 1]
          /*.Len*/
          + 1;

          if (bits > max_length) {
            bits = max_length;
            overflow++;
          }

          tree[n * 2 + 1]
          /*.Len*/
          = bits;
          /* We overwrite tree[n].Dad which is no longer needed */

          if (n > max_code) {
            continue;
          }
          /* not a leaf node */


          s.bl_count[bits]++;
          xbits = 0;

          if (n >= base) {
            xbits = extra[n - base];
          }

          f = tree[n * 2]
          /*.Freq*/
          ;
          s.opt_len += f * (bits + xbits);

          if (has_stree) {
            s.static_len += f * (stree[n * 2 + 1]
            /*.Len*/
            + xbits);
          }
        }

        if (overflow === 0) {
          return;
        } // Trace((stderr,"\nbit length overflow\n"));

        /* This happens for example on obj2 and pic of the Calgary corpus */

        /* Find the first bit length which could increase: */


        do {
          bits = max_length - 1;

          while (s.bl_count[bits] === 0) {
            bits--;
          }

          s.bl_count[bits]--;
          /* move one leaf down the tree */

          s.bl_count[bits + 1] += 2;
          /* move one overflow item as its brother */

          s.bl_count[max_length]--;
          /* The brother of the overflow item also moves one step up,
           * but this does not affect bl_count[max_length]
           */

          overflow -= 2;
        } while (overflow > 0);
        /* Now recompute all bit lengths, scanning in increasing frequency.
         * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
         * lengths instead of fixing only the wrong ones. This idea is taken
         * from 'ar' written by Haruhiko Okumura.)
         */


        for (bits = max_length; bits !== 0; bits--) {
          n = s.bl_count[bits];

          while (n !== 0) {
            m = s.heap[--h];

            if (m > max_code) {
              continue;
            }

            if (tree[m * 2 + 1]
            /*.Len*/
            !== bits) {
              // Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
              s.opt_len += (bits - tree[m * 2 + 1]
              /*.Len*/
              ) * tree[m * 2]
              /*.Freq*/
              ;
              tree[m * 2 + 1]
              /*.Len*/
              = bits;
            }

            n--;
          }
        }
      }
      /* ===========================================================================
       * Generate the codes for a given tree and bit counts (which need not be
       * optimal).
       * IN assertion: the array bl_count contains the bit length statistics for
       * the given tree and the field len is set for all tree elements.
       * OUT assertion: the field code is set for all tree elements of non
       *     zero code length.
       */


      function gen_codes(tree, max_code, bl_count) //    ct_data *tree;             /* the tree to decorate */
      //    int max_code;              /* largest code with non zero frequency */
      //    ushf *bl_count;            /* number of codes at each bit length */
      {
        var next_code = new Array(MAX_BITS + 1);
        /* next code value for each bit length */

        var code = 0;
        /* running code value */

        var bits;
        /* bit index */

        var n;
        /* code index */

        /* The distribution counts are first used to generate the code values
         * without bit reversal.
         */

        for (bits = 1; bits <= MAX_BITS; bits++) {
          next_code[bits] = code = code + bl_count[bits - 1] << 1;
        }
        /* Check that the bit counts in bl_count are consistent. The last code
         * must be all ones.
         */
        //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
        //        "inconsistent bit counts");
        //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));


        for (n = 0; n <= max_code; n++) {
          var len = tree[n * 2 + 1]
          /*.Len*/
          ;

          if (len === 0) {
            continue;
          }
          /* Now reverse the bits */


          tree[n * 2]
          /*.Code*/
          = bi_reverse(next_code[len]++, len); //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
          //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
        }
      }
      /* ===========================================================================
       * Initialize the various 'constant' tables.
       */


      function tr_static_init() {
        var n;
        /* iterates over tree elements */

        var bits;
        /* bit counter */

        var length;
        /* length value */

        var code;
        /* code value */

        var dist;
        /* distance index */

        var bl_count = new Array(MAX_BITS + 1);
        /* number of codes at each bit length for an optimal tree */
        // do check in _tr_init()
        //if (static_init_done) return;

        /* For some embedded targets, global variables are not initialized: */

        /*#ifdef NO_INIT_GLOBAL_POINTERS
          static_l_desc.static_tree = static_ltree;
          static_l_desc.extra_bits = extra_lbits;
          static_d_desc.static_tree = static_dtree;
          static_d_desc.extra_bits = extra_dbits;
          static_bl_desc.extra_bits = extra_blbits;
        #endif*/

        /* Initialize the mapping length (0..255) -> length code (0..28) */

        length = 0;

        for (code = 0; code < LENGTH_CODES - 1; code++) {
          base_length[code] = length;

          for (n = 0; n < 1 << extra_lbits[code]; n++) {
            _length_code[length++] = code;
          }
        } //Assert (length == 256, "tr_static_init: length != 256");

        /* Note that the length 255 (match length 258) can be represented
         * in two different ways: code 284 + 5 bits or code 285, so we
         * overwrite length_code[255] to use the best encoding:
         */


        _length_code[length - 1] = code;
        /* Initialize the mapping dist (0..32K) -> dist code (0..29) */

        dist = 0;

        for (code = 0; code < 16; code++) {
          base_dist[code] = dist;

          for (n = 0; n < 1 << extra_dbits[code]; n++) {
            _dist_code[dist++] = code;
          }
        } //Assert (dist == 256, "tr_static_init: dist != 256");


        dist >>= 7;
        /* from now on, all distances are divided by 128 */

        for (; code < D_CODES; code++) {
          base_dist[code] = dist << 7;

          for (n = 0; n < 1 << extra_dbits[code] - 7; n++) {
            _dist_code[256 + dist++] = code;
          }
        } //Assert (dist == 256, "tr_static_init: 256+dist != 512");

        /* Construct the codes of the static literal tree */


        for (bits = 0; bits <= MAX_BITS; bits++) {
          bl_count[bits] = 0;
        }

        n = 0;

        while (n <= 143) {
          static_ltree[n * 2 + 1]
          /*.Len*/
          = 8;
          n++;
          bl_count[8]++;
        }

        while (n <= 255) {
          static_ltree[n * 2 + 1]
          /*.Len*/
          = 9;
          n++;
          bl_count[9]++;
        }

        while (n <= 279) {
          static_ltree[n * 2 + 1]
          /*.Len*/
          = 7;
          n++;
          bl_count[7]++;
        }

        while (n <= 287) {
          static_ltree[n * 2 + 1]
          /*.Len*/
          = 8;
          n++;
          bl_count[8]++;
        }
        /* Codes 286 and 287 do not exist, but we must include them in the
         * tree construction to get a canonical Huffman tree (longest code
         * all ones)
         */


        gen_codes(static_ltree, L_CODES + 1, bl_count);
        /* The static distance tree is trivial: */

        for (n = 0; n < D_CODES; n++) {
          static_dtree[n * 2 + 1]
          /*.Len*/
          = 5;
          static_dtree[n * 2]
          /*.Code*/
          = bi_reverse(n, 5);
        } // Now data ready and we can init static trees


        static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);
        static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0, D_CODES, MAX_BITS);
        static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0, BL_CODES, MAX_BL_BITS); //static_init_done = true;
      }
      /* ===========================================================================
       * Initialize a new block.
       */


      function init_block(s) {
        var n;
        /* iterates over tree elements */

        /* Initialize the trees. */

        for (n = 0; n < L_CODES; n++) {
          s.dyn_ltree[n * 2]
          /*.Freq*/
          = 0;
        }

        for (n = 0; n < D_CODES; n++) {
          s.dyn_dtree[n * 2]
          /*.Freq*/
          = 0;
        }

        for (n = 0; n < BL_CODES; n++) {
          s.bl_tree[n * 2]
          /*.Freq*/
          = 0;
        }

        s.dyn_ltree[END_BLOCK * 2]
        /*.Freq*/
        = 1;
        s.opt_len = s.static_len = 0;
        s.last_lit = s.matches = 0;
      }
      /* ===========================================================================
       * Flush the bit buffer and align the output on a byte boundary
       */


      function bi_windup(s) {
        if (s.bi_valid > 8) {
          put_short(s, s.bi_buf);
        } else if (s.bi_valid > 0) {
          //put_byte(s, (Byte)s->bi_buf);
          s.pending_buf[s.pending++] = s.bi_buf;
        }

        s.bi_buf = 0;
        s.bi_valid = 0;
      }
      /* ===========================================================================
       * Copy a stored block, storing first the length and its
       * one's complement if requested.
       */


      function copy_block(s, buf, len, header) //DeflateState *s;
      //charf    *buf;    /* the input data */
      //unsigned len;     /* its length */
      //int      header;  /* true if block header must be written */
      {
        bi_windup(s);
        /* align on byte boundary */

        if (header) {
          put_short(s, len);
          put_short(s, ~len);
        } //  while (len--) {
        //    put_byte(s, *buf++);
        //  }


        utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);
        s.pending += len;
      }
      /* ===========================================================================
       * Compares to subtrees, using the tree depth as tie breaker when
       * the subtrees have equal frequency. This minimizes the worst case length.
       */


      function smaller(tree, n, m, depth) {
        var _n2 = n * 2;

        var _m2 = m * 2;

        return tree[_n2]
        /*.Freq*/
        < tree[_m2]
        /*.Freq*/
        || tree[_n2]
        /*.Freq*/
        === tree[_m2]
        /*.Freq*/
        && depth[n] <= depth[m];
      }
      /* ===========================================================================
       * Restore the heap property by moving down the tree starting at node k,
       * exchanging a node with the smallest of its two sons if necessary, stopping
       * when the heap property is re-established (each father smaller than its
       * two sons).
       */


      function pqdownheap(s, tree, k) //    deflate_state *s;
      //    ct_data *tree;  /* the tree to restore */
      //    int k;               /* node to move down */
      {
        var v = s.heap[k];
        var j = k << 1;
        /* left son of k */

        while (j <= s.heap_len) {
          /* Set j to the smallest of the two sons: */
          if (j < s.heap_len && smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
            j++;
          }
          /* Exit if v is smaller than both sons */


          if (smaller(tree, v, s.heap[j], s.depth)) {
            break;
          }
          /* Exchange v with the smallest son */


          s.heap[k] = s.heap[j];
          k = j;
          /* And continue down the tree, setting j to the left son of k */

          j <<= 1;
        }

        s.heap[k] = v;
      } // inlined manually
      // var SMALLEST = 1;

      /* ===========================================================================
       * Send the block data compressed using the given Huffman trees
       */


      function compress_block(s, ltree, dtree) //    deflate_state *s;
      //    const ct_data *ltree; /* literal tree */
      //    const ct_data *dtree; /* distance tree */
      {
        var dist;
        /* distance of matched string */

        var lc;
        /* match length or unmatched char (if dist == 0) */

        var lx = 0;
        /* running index in l_buf */

        var code;
        /* the code to send */

        var extra;
        /* number of extra bits to send */

        if (s.last_lit !== 0) {
          do {
            dist = s.pending_buf[s.d_buf + lx * 2] << 8 | s.pending_buf[s.d_buf + lx * 2 + 1];
            lc = s.pending_buf[s.l_buf + lx];
            lx++;

            if (dist === 0) {
              send_code(s, lc, ltree);
              /* send a literal byte */
              //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
            } else {
              /* Here, lc is the match length - MIN_MATCH */
              code = _length_code[lc];
              send_code(s, code + LITERALS + 1, ltree);
              /* send the length code */

              extra = extra_lbits[code];

              if (extra !== 0) {
                lc -= base_length[code];
                send_bits(s, lc, extra);
                /* send the extra length bits */
              }

              dist--;
              /* dist is now the match distance - 1 */

              code = d_code(dist); //Assert (code < D_CODES, "bad d_code");

              send_code(s, code, dtree);
              /* send the distance code */

              extra = extra_dbits[code];

              if (extra !== 0) {
                dist -= base_dist[code];
                send_bits(s, dist, extra);
                /* send the extra distance bits */
              }
            }
            /* literal or match pair ? */

            /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
            //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
            //       "pendingBuf overflow");

          } while (lx < s.last_lit);
        }

        send_code(s, END_BLOCK, ltree);
      }
      /* ===========================================================================
       * Construct one Huffman tree and assigns the code bit strings and lengths.
       * Update the total bit length for the current block.
       * IN assertion: the field freq is set for all tree elements.
       * OUT assertions: the fields len and code are set to the optimal bit length
       *     and corresponding code. The length opt_len is updated; static_len is
       *     also updated if stree is not null. The field max_code is set.
       */


      function build_tree(s, desc) //    deflate_state *s;
      //    tree_desc *desc; /* the tree descriptor */
      {
        var tree = desc.dyn_tree;
        var stree = desc.stat_desc.static_tree;
        var has_stree = desc.stat_desc.has_stree;
        var elems = desc.stat_desc.elems;
        var n, m;
        /* iterate over heap elements */

        var max_code = -1;
        /* largest code with non zero frequency */

        var node;
        /* new node being created */

        /* Construct the initial heap, with least frequent element in
         * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
         * heap[0] is not used.
         */

        s.heap_len = 0;
        s.heap_max = HEAP_SIZE;

        for (n = 0; n < elems; n++) {
          if (tree[n * 2]
          /*.Freq*/
          !== 0) {
            s.heap[++s.heap_len] = max_code = n;
            s.depth[n] = 0;
          } else {
            tree[n * 2 + 1]
            /*.Len*/
            = 0;
          }
        }
        /* The pkzip format requires that at least one distance code exists,
         * and that at least one bit should be sent even if there is only one
         * possible code. So to avoid special checks later on we force at least
         * two codes of non zero frequency.
         */


        while (s.heap_len < 2) {
          node = s.heap[++s.heap_len] = max_code < 2 ? ++max_code : 0;
          tree[node * 2]
          /*.Freq*/
          = 1;
          s.depth[node] = 0;
          s.opt_len--;

          if (has_stree) {
            s.static_len -= stree[node * 2 + 1]
            /*.Len*/
            ;
          }
          /* node is 0 or 1 so it does not have extra bits */

        }

        desc.max_code = max_code;
        /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
         * establish sub-heaps of increasing lengths:
         */

        for (n = s.heap_len >> 1
        /*int /2*/
        ; n >= 1; n--) {
          pqdownheap(s, tree, n);
        }
        /* Construct the Huffman tree by repeatedly combining the least two
         * frequent nodes.
         */


        node = elems;
        /* next internal node of the tree */

        do {
          //pqremove(s, tree, n);  /* n = node of least frequency */

          /*** pqremove ***/
          n = s.heap[1
          /*SMALLEST*/
          ];
          s.heap[1
          /*SMALLEST*/
          ] = s.heap[s.heap_len--];
          pqdownheap(s, tree, 1
          /*SMALLEST*/
          );
          /***/

          m = s.heap[1
          /*SMALLEST*/
          ];
          /* m = node of next least frequency */

          s.heap[--s.heap_max] = n;
          /* keep the nodes sorted by frequency */

          s.heap[--s.heap_max] = m;
          /* Create a new node father of n and m */

          tree[node * 2]
          /*.Freq*/
          = tree[n * 2]
          /*.Freq*/
          + tree[m * 2]
          /*.Freq*/
          ;
          s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
          tree[n * 2 + 1]
          /*.Dad*/
          = tree[m * 2 + 1]
          /*.Dad*/
          = node;
          /* and insert the new node in the heap */

          s.heap[1
          /*SMALLEST*/
          ] = node++;
          pqdownheap(s, tree, 1
          /*SMALLEST*/
          );
        } while (s.heap_len >= 2);

        s.heap[--s.heap_max] = s.heap[1
        /*SMALLEST*/
        ];
        /* At this point, the fields freq and dad are set. We can now
         * generate the bit lengths.
         */

        gen_bitlen(s, desc);
        /* The field len is now set, we can generate the bit codes */

        gen_codes(tree, max_code, s.bl_count);
      }
      /* ===========================================================================
       * Scan a literal or distance tree to determine the frequencies of the codes
       * in the bit length tree.
       */


      function scan_tree(s, tree, max_code) //    deflate_state *s;
      //    ct_data *tree;   /* the tree to be scanned */
      //    int max_code;    /* and its largest code of non zero frequency */
      {
        var n;
        /* iterates over all tree elements */

        var prevlen = -1;
        /* last emitted length */

        var curlen;
        /* length of current code */

        var nextlen = tree[0 * 2 + 1]
        /*.Len*/
        ;
        /* length of next code */

        var count = 0;
        /* repeat count of the current code */

        var max_count = 7;
        /* max repeat count */

        var min_count = 4;
        /* min repeat count */

        if (nextlen === 0) {
          max_count = 138;
          min_count = 3;
        }

        tree[(max_code + 1) * 2 + 1]
        /*.Len*/
        = 0xffff;
        /* guard */

        for (n = 0; n <= max_code; n++) {
          curlen = nextlen;
          nextlen = tree[(n + 1) * 2 + 1]
          /*.Len*/
          ;

          if (++count < max_count && curlen === nextlen) {
            continue;
          } else if (count < min_count) {
            s.bl_tree[curlen * 2]
            /*.Freq*/
            += count;
          } else if (curlen !== 0) {
            if (curlen !== prevlen) {
              s.bl_tree[curlen * 2] /*.Freq*/++;
            }

            s.bl_tree[REP_3_6 * 2] /*.Freq*/++;
          } else if (count <= 10) {
            s.bl_tree[REPZ_3_10 * 2] /*.Freq*/++;
          } else {
            s.bl_tree[REPZ_11_138 * 2] /*.Freq*/++;
          }

          count = 0;
          prevlen = curlen;

          if (nextlen === 0) {
            max_count = 138;
            min_count = 3;
          } else if (curlen === nextlen) {
            max_count = 6;
            min_count = 3;
          } else {
            max_count = 7;
            min_count = 4;
          }
        }
      }
      /* ===========================================================================
       * Send a literal or distance tree in compressed form, using the codes in
       * bl_tree.
       */


      function send_tree(s, tree, max_code) //    deflate_state *s;
      //    ct_data *tree; /* the tree to be scanned */
      //    int max_code;       /* and its largest code of non zero frequency */
      {
        var n;
        /* iterates over all tree elements */

        var prevlen = -1;
        /* last emitted length */

        var curlen;
        /* length of current code */

        var nextlen = tree[0 * 2 + 1]
        /*.Len*/
        ;
        /* length of next code */

        var count = 0;
        /* repeat count of the current code */

        var max_count = 7;
        /* max repeat count */

        var min_count = 4;
        /* min repeat count */

        /* tree[max_code+1].Len = -1; */

        /* guard already set */

        if (nextlen === 0) {
          max_count = 138;
          min_count = 3;
        }

        for (n = 0; n <= max_code; n++) {
          curlen = nextlen;
          nextlen = tree[(n + 1) * 2 + 1]
          /*.Len*/
          ;

          if (++count < max_count && curlen === nextlen) {
            continue;
          } else if (count < min_count) {
            do {
              send_code(s, curlen, s.bl_tree);
            } while (--count !== 0);
          } else if (curlen !== 0) {
            if (curlen !== prevlen) {
              send_code(s, curlen, s.bl_tree);
              count--;
            } //Assert(count >= 3 && count <= 6, " 3_6?");


            send_code(s, REP_3_6, s.bl_tree);
            send_bits(s, count - 3, 2);
          } else if (count <= 10) {
            send_code(s, REPZ_3_10, s.bl_tree);
            send_bits(s, count - 3, 3);
          } else {
            send_code(s, REPZ_11_138, s.bl_tree);
            send_bits(s, count - 11, 7);
          }

          count = 0;
          prevlen = curlen;

          if (nextlen === 0) {
            max_count = 138;
            min_count = 3;
          } else if (curlen === nextlen) {
            max_count = 6;
            min_count = 3;
          } else {
            max_count = 7;
            min_count = 4;
          }
        }
      }
      /* ===========================================================================
       * Construct the Huffman tree for the bit lengths and return the index in
       * bl_order of the last bit length code to send.
       */


      function build_bl_tree(s) {
        var max_blindex;
        /* index of last bit length code of non zero freq */

        /* Determine the bit length frequencies for literal and distance trees */

        scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
        scan_tree(s, s.dyn_dtree, s.d_desc.max_code);
        /* Build the bit length tree: */

        build_tree(s, s.bl_desc);
        /* opt_len now includes the length of the tree representations, except
         * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
         */

        /* Determine the number of bit length codes to send. The pkzip format
         * requires that at least 4 bit length codes be sent. (appnote.txt says
         * 3 but the actual value used is 4.)
         */

        for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {
          if (s.bl_tree[bl_order[max_blindex] * 2 + 1]
          /*.Len*/
          !== 0) {
            break;
          }
        }
        /* Update opt_len to include the bit length tree and counts */


        s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4; //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
        //        s->opt_len, s->static_len));

        return max_blindex;
      }
      /* ===========================================================================
       * Send the header for a block using dynamic Huffman trees: the counts, the
       * lengths of the bit length codes, the literal tree and the distance tree.
       * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
       */


      function send_all_trees(s, lcodes, dcodes, blcodes) //    deflate_state *s;
      //    int lcodes, dcodes, blcodes; /* number of codes for each tree */
      {
        var rank;
        /* index in bl_order */
        //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
        //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
        //        "too many codes");
        //Tracev((stderr, "\nbl counts: "));

        send_bits(s, lcodes - 257, 5);
        /* not +255 as stated in appnote.txt */

        send_bits(s, dcodes - 1, 5);
        send_bits(s, blcodes - 4, 4);
        /* not -3 as stated in appnote.txt */

        for (rank = 0; rank < blcodes; rank++) {
          //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
          send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]
          /*.Len*/
          , 3);
        } //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));


        send_tree(s, s.dyn_ltree, lcodes - 1);
        /* literal tree */
        //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));

        send_tree(s, s.dyn_dtree, dcodes - 1);
        /* distance tree */
        //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
      }
      /* ===========================================================================
       * Check if the data type is TEXT or BINARY, using the following algorithm:
       * - TEXT if the two conditions below are satisfied:
       *    a) There are no non-portable control characters belonging to the
       *       "black list" (0..6, 14..25, 28..31).
       *    b) There is at least one printable character belonging to the
       *       "white list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
       * - BINARY otherwise.
       * - The following partially-portable control characters form a
       *   "gray list" that is ignored in this detection algorithm:
       *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
       * IN assertion: the fields Freq of dyn_ltree are set.
       */


      function detect_data_type(s) {
        /* black_mask is the bit mask of black-listed bytes
         * set bits 0..6, 14..25, and 28..31
         * 0xf3ffc07f = binary 11110011111111111100000001111111
         */
        var black_mask = 0xf3ffc07f;
        var n;
        /* Check for non-textual ("black-listed") bytes. */

        for (n = 0; n <= 31; n++, black_mask >>>= 1) {
          if (black_mask & 1 && s.dyn_ltree[n * 2]
          /*.Freq*/
          !== 0) {
            return Z_BINARY;
          }
        }
        /* Check for textual ("white-listed") bytes. */


        if (s.dyn_ltree[9 * 2]
        /*.Freq*/
        !== 0 || s.dyn_ltree[10 * 2]
        /*.Freq*/
        !== 0 || s.dyn_ltree[13 * 2]
        /*.Freq*/
        !== 0) {
          return Z_TEXT;
        }

        for (n = 32; n < LITERALS; n++) {
          if (s.dyn_ltree[n * 2]
          /*.Freq*/
          !== 0) {
            return Z_TEXT;
          }
        }
        /* There are no "black-listed" or "white-listed" bytes:
         * this stream either is empty or has tolerated ("gray-listed") bytes only.
         */


        return Z_BINARY;
      }

      var static_init_done = false;
      /* ===========================================================================
       * Initialize the tree data structures for a new zlib stream.
       */

      function _tr_init(s) {
        if (!static_init_done) {
          tr_static_init();
          static_init_done = true;
        }

        s.l_desc = new TreeDesc(s.dyn_ltree, static_l_desc);
        s.d_desc = new TreeDesc(s.dyn_dtree, static_d_desc);
        s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);
        s.bi_buf = 0;
        s.bi_valid = 0;
        /* Initialize the first block of the first file: */

        init_block(s);
      }
      /* ===========================================================================
       * Send a stored block
       */


      function _tr_stored_block(s, buf, stored_len, last) //DeflateState *s;
      //charf *buf;       /* input block */
      //ulg stored_len;   /* length of input block */
      //int last;         /* one if this is the last block for a file */
      {
        send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);
        /* send block type */

        copy_block(s, buf, stored_len, true);
        /* with header */
      }
      /* ===========================================================================
       * Send one empty static block to give enough lookahead for inflate.
       * This takes 10 bits, of which 7 may remain in the bit buffer.
       */


      function _tr_align(s) {
        send_bits(s, STATIC_TREES << 1, 3);
        send_code(s, END_BLOCK, static_ltree);
        bi_flush(s);
      }
      /* ===========================================================================
       * Determine the best encoding for the current block: dynamic trees, static
       * trees or store, and output the encoded block to the zip file.
       */


      function _tr_flush_block(s, buf, stored_len, last) //DeflateState *s;
      //charf *buf;       /* input block, or NULL if too old */
      //ulg stored_len;   /* length of input block */
      //int last;         /* one if this is the last block for a file */
      {
        var opt_lenb, static_lenb;
        /* opt_len and static_len in bytes */

        var max_blindex = 0;
        /* index of last bit length code of non zero freq */

        /* Build the Huffman trees unless a stored block is forced */

        if (s.level > 0) {
          /* Check if the file is binary or text */
          if (s.strm.data_type === Z_UNKNOWN) {
            s.strm.data_type = detect_data_type(s);
          }
          /* Construct the literal and distance trees */


          build_tree(s, s.l_desc); // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
          //        s->static_len));

          build_tree(s, s.d_desc); // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
          //        s->static_len));

          /* At this point, opt_len and static_len are the total bit lengths of
           * the compressed block data, excluding the tree representations.
           */

          /* Build the bit length tree for the above two trees, and get the index
           * in bl_order of the last bit length code to send.
           */

          max_blindex = build_bl_tree(s);
          /* Determine the best encoding. Compute the block lengths in bytes. */

          opt_lenb = s.opt_len + 3 + 7 >>> 3;
          static_lenb = s.static_len + 3 + 7 >>> 3; // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
          //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
          //        s->last_lit));

          if (static_lenb <= opt_lenb) {
            opt_lenb = static_lenb;
          }
        } else {
          // Assert(buf != (char*)0, "lost buf");
          opt_lenb = static_lenb = stored_len + 5;
          /* force a stored block */
        }

        if (stored_len + 4 <= opt_lenb && buf !== -1) {
          /* 4: two words for the lengths */

          /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
           * Otherwise we can't have processed more than WSIZE input bytes since
           * the last block flush, because compression would have been
           * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
           * transform a block into a stored block.
           */
          _tr_stored_block(s, buf, stored_len, last);
        } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {
          send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
          compress_block(s, static_ltree, static_dtree);
        } else {
          send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
          send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
          compress_block(s, s.dyn_ltree, s.dyn_dtree);
        } // Assert (s->compressed_len == s->bits_sent, "bad compressed size");

        /* The above check is made mod 2^32, for files larger than 512 MB
         * and uLong implemented on 32 bits.
         */


        init_block(s);

        if (last) {
          bi_windup(s);
        } // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
        //       s->compressed_len-7*last));

      }
      /* ===========================================================================
       * Save the match info and tally the frequency counts. Return true if
       * the current block must be flushed.
       */


      function _tr_tally(s, dist, lc) //    deflate_state *s;
      //    unsigned dist;  /* distance of matched string */
      //    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
      {
        //var out_length, in_length, dcode;
        s.pending_buf[s.d_buf + s.last_lit * 2] = dist >>> 8 & 0xff;
        s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;
        s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;
        s.last_lit++;

        if (dist === 0) {
          /* lc is the unmatched char */
          s.dyn_ltree[lc * 2] /*.Freq*/++;
        } else {
          s.matches++;
          /* Here, lc is the match length - MIN_MATCH */

          dist--;
          /* dist = match distance - 1 */
          //Assert((ush)dist < (ush)MAX_DIST(s) &&
          //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
          //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");

          s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2] /*.Freq*/++;
          s.dyn_dtree[d_code(dist) * 2] /*.Freq*/++;
        } // (!) This block is disabled in zlib defaults,
        // don't enable it for binary compatibility
        //#ifdef TRUNCATE_BLOCK
        //  /* Try to guess if it is profitable to stop the current block here */
        //  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {
        //    /* Compute an upper bound for the compressed length */
        //    out_length = s.last_lit*8;
        //    in_length = s.strstart - s.block_start;
        //
        //    for (dcode = 0; dcode < D_CODES; dcode++) {
        //      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);
        //    }
        //    out_length >>>= 3;
        //    //Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
        //    //       s->last_lit, in_length, out_length,
        //    //       100L - out_length*100L/in_length));
        //    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {
        //      return true;
        //    }
        //  }
        //#endif


        return s.last_lit === s.lit_bufsize - 1;
        /* We avoid equality with lit_bufsize because of wraparound at 64K
         * on 16 bit machines and because stored blocks are restricted to
         * 64K-1 bytes.
         */
      }

      exports._tr_init = _tr_init;
      exports._tr_stored_block = _tr_stored_block;
      exports._tr_flush_block = _tr_flush_block;
      exports._tr_tally = _tr_tally;
      exports._tr_align = _tr_align;
      /***/
    },
    /* 357 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict"; // (C) 1995-2013 Jean-loup Gailly and Mark Adler
      // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
      //
      // This software is provided 'as-is', without any express or implied
      // warranty. In no event will the authors be held liable for any damages
      // arising from the use of this software.
      //
      // Permission is granted to anyone to use this software for any purpose,
      // including commercial applications, and to alter it and redistribute it
      // freely, subject to the following restrictions:
      //
      // 1. The origin of this software must not be misrepresented; you must not
      //   claim that you wrote the original software. If you use this software
      //   in a product, an acknowledgment in the product documentation would be
      //   appreciated but is not required.
      // 2. Altered source versions must be plainly marked as such, and must not be
      //   misrepresented as being the original software.
      // 3. This notice may not be removed or altered from any source distribution.

      module.exports = {
        2: 'need dictionary',

        /* Z_NEED_DICT       2  */
        1: 'stream end',

        /* Z_STREAM_END      1  */
        0: '',

        /* Z_OK              0  */
        '-1': 'file error',

        /* Z_ERRNO         (-1) */
        '-2': 'stream error',

        /* Z_STREAM_ERROR  (-2) */
        '-3': 'data error',

        /* Z_DATA_ERROR    (-3) */
        '-4': 'insufficient memory',

        /* Z_MEM_ERROR     (-4) */
        '-5': 'buffer error',

        /* Z_BUF_ERROR     (-5) */
        '-6': 'incompatible version'
        /* Z_VERSION_ERROR (-6) */

      };
      /***/
    },
    /* 358 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict"; // (C) 1995-2013 Jean-loup Gailly and Mark Adler
      // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
      //
      // This software is provided 'as-is', without any express or implied
      // warranty. In no event will the authors be held liable for any damages
      // arising from the use of this software.
      //
      // Permission is granted to anyone to use this software for any purpose,
      // including commercial applications, and to alter it and redistribute it
      // freely, subject to the following restrictions:
      //
      // 1. The origin of this software must not be misrepresented; you must not
      //   claim that you wrote the original software. If you use this software
      //   in a product, an acknowledgment in the product documentation would be
      //   appreciated but is not required.
      // 2. Altered source versions must be plainly marked as such, and must not be
      //   misrepresented as being the original software.
      // 3. This notice may not be removed or altered from any source distribution.

      var utils = __webpack_require__(126);

      var adler32 = __webpack_require__(246);

      var crc32 = __webpack_require__(247);

      var inflate_fast = __webpack_require__(359);

      var inflate_table = __webpack_require__(360);

      var CODES = 0;
      var LENS = 1;
      var DISTS = 2;
      /* Public constants ==========================================================*/

      /* ===========================================================================*/

      /* Allowed flush values; see deflate() and inflate() below for details */
      //var Z_NO_FLUSH      = 0;
      //var Z_PARTIAL_FLUSH = 1;
      //var Z_SYNC_FLUSH    = 2;
      //var Z_FULL_FLUSH    = 3;

      var Z_FINISH = 4;
      var Z_BLOCK = 5;
      var Z_TREES = 6;
      /* Return codes for the compression/decompression functions. Negative values
       * are errors, positive values are used for special but normal events.
       */

      var Z_OK = 0;
      var Z_STREAM_END = 1;
      var Z_NEED_DICT = 2; //var Z_ERRNO         = -1;

      var Z_STREAM_ERROR = -2;
      var Z_DATA_ERROR = -3;
      var Z_MEM_ERROR = -4;
      var Z_BUF_ERROR = -5; //var Z_VERSION_ERROR = -6;

      /* The deflate compression method */

      var Z_DEFLATED = 8;
      /* STATES ====================================================================*/

      /* ===========================================================================*/

      var HEAD = 1;
      /* i: waiting for magic header */

      var FLAGS = 2;
      /* i: waiting for method and flags (gzip) */

      var TIME = 3;
      /* i: waiting for modification time (gzip) */

      var OS = 4;
      /* i: waiting for extra flags and operating system (gzip) */

      var EXLEN = 5;
      /* i: waiting for extra length (gzip) */

      var EXTRA = 6;
      /* i: waiting for extra bytes (gzip) */

      var NAME = 7;
      /* i: waiting for end of file name (gzip) */

      var COMMENT = 8;
      /* i: waiting for end of comment (gzip) */

      var HCRC = 9;
      /* i: waiting for header crc (gzip) */

      var DICTID = 10;
      /* i: waiting for dictionary check value */

      var DICT = 11;
      /* waiting for inflateSetDictionary() call */

      var TYPE = 12;
      /* i: waiting for type bits, including last-flag bit */

      var TYPEDO = 13;
      /* i: same, but skip check to exit inflate on new block */

      var STORED = 14;
      /* i: waiting for stored size (length and complement) */

      var COPY_ = 15;
      /* i/o: same as COPY below, but only first time in */

      var COPY = 16;
      /* i/o: waiting for input or output to copy stored block */

      var TABLE = 17;
      /* i: waiting for dynamic block table lengths */

      var LENLENS = 18;
      /* i: waiting for code length code lengths */

      var CODELENS = 19;
      /* i: waiting for length/lit and distance code lengths */

      var LEN_ = 20;
      /* i: same as LEN below, but only first time in */

      var LEN = 21;
      /* i: waiting for length/lit/eob code */

      var LENEXT = 22;
      /* i: waiting for length extra bits */

      var DIST = 23;
      /* i: waiting for distance code */

      var DISTEXT = 24;
      /* i: waiting for distance extra bits */

      var MATCH = 25;
      /* o: waiting for output space to copy string */

      var LIT = 26;
      /* o: waiting for output space to write literal */

      var CHECK = 27;
      /* i: waiting for 32-bit check value */

      var LENGTH = 28;
      /* i: waiting for 32-bit length (gzip) */

      var DONE = 29;
      /* finished check, done -- remain here until reset */

      var BAD = 30;
      /* got a data error -- remain here until reset */

      var MEM = 31;
      /* got an inflate() memory error -- remain here until reset */

      var SYNC = 32;
      /* looking for synchronization bytes to restart inflate() */

      /* ===========================================================================*/

      var ENOUGH_LENS = 852;
      var ENOUGH_DISTS = 592; //var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);

      var MAX_WBITS = 15;
      /* 32K LZ77 window */

      var DEF_WBITS = MAX_WBITS;

      function zswap32(q) {
        return (q >>> 24 & 0xff) + (q >>> 8 & 0xff00) + ((q & 0xff00) << 8) + ((q & 0xff) << 24);
      }

      function InflateState() {
        this.mode = 0;
        /* current inflate mode */

        this.last = false;
        /* true if processing last block */

        this.wrap = 0;
        /* bit 0 true for zlib, bit 1 true for gzip */

        this.havedict = false;
        /* true if dictionary provided */

        this.flags = 0;
        /* gzip header method and flags (0 if zlib) */

        this.dmax = 0;
        /* zlib header max distance (INFLATE_STRICT) */

        this.check = 0;
        /* protected copy of check value */

        this.total = 0;
        /* protected copy of output count */
        // TODO: may be {}

        this.head = null;
        /* where to save gzip header information */

        /* sliding window */

        this.wbits = 0;
        /* log base 2 of requested window size */

        this.wsize = 0;
        /* window size or zero if not using window */

        this.whave = 0;
        /* valid bytes in the window */

        this.wnext = 0;
        /* window write index */

        this.window = null;
        /* allocated sliding window, if needed */

        /* bit accumulator */

        this.hold = 0;
        /* input bit accumulator */

        this.bits = 0;
        /* number of bits in "in" */

        /* for string and stored block copying */

        this.length = 0;
        /* literal or length of data to copy */

        this.offset = 0;
        /* distance back to copy string from */

        /* for table and code decoding */

        this.extra = 0;
        /* extra bits needed */

        /* fixed and dynamic code tables */

        this.lencode = null;
        /* starting table for length/literal codes */

        this.distcode = null;
        /* starting table for distance codes */

        this.lenbits = 0;
        /* index bits for lencode */

        this.distbits = 0;
        /* index bits for distcode */

        /* dynamic table building */

        this.ncode = 0;
        /* number of code length code lengths */

        this.nlen = 0;
        /* number of length code lengths */

        this.ndist = 0;
        /* number of distance code lengths */

        this.have = 0;
        /* number of code lengths in lens[] */

        this.next = null;
        /* next available space in codes[] */

        this.lens = new utils.Buf16(320);
        /* temporary storage for code lengths */

        this.work = new utils.Buf16(288);
        /* work area for code table building */

        /*
         because we don't have pointers in js, we use lencode and distcode directly
         as buffers so we don't need codes
        */
        //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */

        this.lendyn = null;
        /* dynamic table for length/literal codes (JS specific) */

        this.distdyn = null;
        /* dynamic table for distance codes (JS specific) */

        this.sane = 0;
        /* if false, allow invalid distance too far */

        this.back = 0;
        /* bits back of last unprocessed length/lit */

        this.was = 0;
        /* initial length of match */
      }

      function inflateResetKeep(strm) {
        var state;

        if (!strm || !strm.state) {
          return Z_STREAM_ERROR;
        }

        state = strm.state;
        strm.total_in = strm.total_out = state.total = 0;
        strm.msg = '';
        /*Z_NULL*/

        if (state.wrap) {
          /* to support ill-conceived Java test suite */
          strm.adler = state.wrap & 1;
        }

        state.mode = HEAD;
        state.last = 0;
        state.havedict = 0;
        state.dmax = 32768;
        state.head = null
        /*Z_NULL*/
        ;
        state.hold = 0;
        state.bits = 0; //state.lencode = state.distcode = state.next = state.codes;

        state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);
        state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);
        state.sane = 1;
        state.back = -1; //Tracev((stderr, "inflate: reset\n"));

        return Z_OK;
      }

      function inflateReset(strm) {
        var state;

        if (!strm || !strm.state) {
          return Z_STREAM_ERROR;
        }

        state = strm.state;
        state.wsize = 0;
        state.whave = 0;
        state.wnext = 0;
        return inflateResetKeep(strm);
      }

      function inflateReset2(strm, windowBits) {
        var wrap;
        var state;
        /* get the state */

        if (!strm || !strm.state) {
          return Z_STREAM_ERROR;
        }

        state = strm.state;
        /* extract wrap request from windowBits parameter */

        if (windowBits < 0) {
          wrap = 0;
          windowBits = -windowBits;
        } else {
          wrap = (windowBits >> 4) + 1;

          if (windowBits < 48) {
            windowBits &= 15;
          }
        }
        /* set number of window bits, free window if different */


        if (windowBits && (windowBits < 8 || windowBits > 15)) {
          return Z_STREAM_ERROR;
        }

        if (state.window !== null && state.wbits !== windowBits) {
          state.window = null;
        }
        /* update state and reset the rest of it */


        state.wrap = wrap;
        state.wbits = windowBits;
        return inflateReset(strm);
      }

      function inflateInit2(strm, windowBits) {
        var ret;
        var state;

        if (!strm) {
          return Z_STREAM_ERROR;
        } //strm.msg = Z_NULL;                 /* in case we return an error */


        state = new InflateState(); //if (state === Z_NULL) return Z_MEM_ERROR;
        //Tracev((stderr, "inflate: allocated\n"));

        strm.state = state;
        state.window = null
        /*Z_NULL*/
        ;
        ret = inflateReset2(strm, windowBits);

        if (ret !== Z_OK) {
          strm.state = null
          /*Z_NULL*/
          ;
        }

        return ret;
      }

      function inflateInit(strm) {
        return inflateInit2(strm, DEF_WBITS);
      }
      /*
       Return state with length and distance decoding tables and index sizes set to
       fixed code decoding.  Normally this returns fixed tables from inffixed.h.
       If BUILDFIXED is defined, then instead this routine builds the tables the
       first time it's called, and returns those tables the first time and
       thereafter.  This reduces the size of the code by about 2K bytes, in
       exchange for a little execution time.  However, BUILDFIXED should not be
       used for threaded applications, since the rewriting of the tables and virgin
       may not be thread-safe.
       */


      var virgin = true;
      var lenfix, distfix; // We have no pointers in JS, so keep tables separate

      function fixedtables(state) {
        /* build fixed huffman tables if first call (may not be thread safe) */
        if (virgin) {
          var sym;
          lenfix = new utils.Buf32(512);
          distfix = new utils.Buf32(32);
          /* literal/length table */

          sym = 0;

          while (sym < 144) {
            state.lens[sym++] = 8;
          }

          while (sym < 256) {
            state.lens[sym++] = 9;
          }

          while (sym < 280) {
            state.lens[sym++] = 7;
          }

          while (sym < 288) {
            state.lens[sym++] = 8;
          }

          inflate_table(LENS, state.lens, 0, 288, lenfix, 0, state.work, {
            bits: 9
          });
          /* distance table */

          sym = 0;

          while (sym < 32) {
            state.lens[sym++] = 5;
          }

          inflate_table(DISTS, state.lens, 0, 32, distfix, 0, state.work, {
            bits: 5
          });
          /* do this just once */

          virgin = false;
        }

        state.lencode = lenfix;
        state.lenbits = 9;
        state.distcode = distfix;
        state.distbits = 5;
      }
      /*
       Update the window with the last wsize (normally 32K) bytes written before
       returning.  If window does not exist yet, create it.  This is only called
       when a window is already in use, or when output has been written during this
       inflate call, but the end of the deflate stream has not been reached yet.
       It is also called to create a window for dictionary data when a dictionary
       is loaded.
      
       Providing output buffers larger than 32K to inflate() should provide a speed
       advantage, since only the last 32K of output is copied to the sliding window
       upon return from inflate(), and since all distances after the first 32K of
       output will fall in the output data, making match copies simpler and faster.
       The advantage may be dependent on the size of the processor's data caches.
       */


      function updatewindow(strm, src, end, copy) {
        var dist;
        var state = strm.state;
        /* if it hasn't been done already, allocate space for the window */

        if (state.window === null) {
          state.wsize = 1 << state.wbits;
          state.wnext = 0;
          state.whave = 0;
          state.window = new utils.Buf8(state.wsize);
        }
        /* copy state->wsize or less output bytes into the circular window */


        if (copy >= state.wsize) {
          utils.arraySet(state.window, src, end - state.wsize, state.wsize, 0);
          state.wnext = 0;
          state.whave = state.wsize;
        } else {
          dist = state.wsize - state.wnext;

          if (dist > copy) {
            dist = copy;
          } //zmemcpy(state->window + state->wnext, end - copy, dist);


          utils.arraySet(state.window, src, end - copy, dist, state.wnext);
          copy -= dist;

          if (copy) {
            //zmemcpy(state->window, end - copy, copy);
            utils.arraySet(state.window, src, end - copy, copy, 0);
            state.wnext = copy;
            state.whave = state.wsize;
          } else {
            state.wnext += dist;

            if (state.wnext === state.wsize) {
              state.wnext = 0;
            }

            if (state.whave < state.wsize) {
              state.whave += dist;
            }
          }
        }

        return 0;
      }

      function inflate(strm, flush) {
        var state;
        var input, output; // input/output buffers

        var next;
        /* next input INDEX */

        var put;
        /* next output INDEX */

        var have, left;
        /* available input and output */

        var hold;
        /* bit buffer */

        var bits;
        /* bits in bit buffer */

        var _in, _out;
        /* save starting available input and output */


        var copy;
        /* number of stored or match bytes to copy */

        var from;
        /* where to copy match bytes from */

        var from_source;
        var here = 0;
        /* current decoding table entry */

        var here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
        //var last;                   /* parent table entry */

        var last_bits, last_op, last_val; // paked "last" denormalized (JS specific)

        var len;
        /* length to copy for repeats, bits to drop */

        var ret;
        /* return code */

        var hbuf = new utils.Buf8(4);
        /* buffer for gzip header crc calculation */

        var opts;
        var n; // temporary var for NEED_BITS

        var order =
        /* permutation of code lengths */
        [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];

        if (!strm || !strm.state || !strm.output || !strm.input && strm.avail_in !== 0) {
          return Z_STREAM_ERROR;
        }

        state = strm.state;

        if (state.mode === TYPE) {
          state.mode = TYPEDO;
        }
        /* skip check */
        //--- LOAD() ---


        put = strm.next_out;
        output = strm.output;
        left = strm.avail_out;
        next = strm.next_in;
        input = strm.input;
        have = strm.avail_in;
        hold = state.hold;
        bits = state.bits; //---

        _in = have;
        _out = left;
        ret = Z_OK;

        inf_leave: // goto emulation
        for (;;) {
          switch (state.mode) {
            case HEAD:
              if (state.wrap === 0) {
                state.mode = TYPEDO;
                break;
              } //=== NEEDBITS(16);


              while (bits < 16) {
                if (have === 0) {
                  break inf_leave;
                }

                have--;
                hold += input[next++] << bits;
                bits += 8;
              } //===//


              if (state.wrap & 2 && hold === 0x8b1f) {
                /* gzip header */
                state.check = 0
                /*crc32(0L, Z_NULL, 0)*/
                ; //=== CRC2(state.check, hold);

                hbuf[0] = hold & 0xff;
                hbuf[1] = hold >>> 8 & 0xff;
                state.check = crc32(state.check, hbuf, 2, 0); //===//
                //=== INITBITS();

                hold = 0;
                bits = 0; //===//

                state.mode = FLAGS;
                break;
              }

              state.flags = 0;
              /* expect zlib header */

              if (state.head) {
                state.head.done = false;
              }

              if (!(state.wrap & 1) ||
              /* check if zlib header allowed */
              (((hold & 0xff) <<
              /*BITS(8)*/
              8) + (hold >> 8)) % 31) {
                strm.msg = 'incorrect header check';
                state.mode = BAD;
                break;
              }

              if ((hold & 0x0f) !==
              /*BITS(4)*/
              Z_DEFLATED) {
                strm.msg = 'unknown compression method';
                state.mode = BAD;
                break;
              } //--- DROPBITS(4) ---//


              hold >>>= 4;
              bits -= 4; //---//

              len = (hold & 0x0f) +
              /*BITS(4)*/
              8;

              if (state.wbits === 0) {
                state.wbits = len;
              } else if (len > state.wbits) {
                strm.msg = 'invalid window size';
                state.mode = BAD;
                break;
              }

              state.dmax = 1 << len; //Tracev((stderr, "inflate:   zlib header ok\n"));

              strm.adler = state.check = 1
              /*adler32(0L, Z_NULL, 0)*/
              ;
              state.mode = hold & 0x200 ? DICTID : TYPE; //=== INITBITS();

              hold = 0;
              bits = 0; //===//

              break;

            case FLAGS:
              //=== NEEDBITS(16); */
              while (bits < 16) {
                if (have === 0) {
                  break inf_leave;
                }

                have--;
                hold += input[next++] << bits;
                bits += 8;
              } //===//


              state.flags = hold;

              if ((state.flags & 0xff) !== Z_DEFLATED) {
                strm.msg = 'unknown compression method';
                state.mode = BAD;
                break;
              }

              if (state.flags & 0xe000) {
                strm.msg = 'unknown header flags set';
                state.mode = BAD;
                break;
              }

              if (state.head) {
                state.head.text = hold >> 8 & 1;
              }

              if (state.flags & 0x0200) {
                //=== CRC2(state.check, hold);
                hbuf[0] = hold & 0xff;
                hbuf[1] = hold >>> 8 & 0xff;
                state.check = crc32(state.check, hbuf, 2, 0); //===//
              } //=== INITBITS();


              hold = 0;
              bits = 0; //===//

              state.mode = TIME;

            /* falls through */

            case TIME:
              //=== NEEDBITS(32); */
              while (bits < 32) {
                if (have === 0) {
                  break inf_leave;
                }

                have--;
                hold += input[next++] << bits;
                bits += 8;
              } //===//


              if (state.head) {
                state.head.time = hold;
              }

              if (state.flags & 0x0200) {
                //=== CRC4(state.check, hold)
                hbuf[0] = hold & 0xff;
                hbuf[1] = hold >>> 8 & 0xff;
                hbuf[2] = hold >>> 16 & 0xff;
                hbuf[3] = hold >>> 24 & 0xff;
                state.check = crc32(state.check, hbuf, 4, 0); //===
              } //=== INITBITS();


              hold = 0;
              bits = 0; //===//

              state.mode = OS;

            /* falls through */

            case OS:
              //=== NEEDBITS(16); */
              while (bits < 16) {
                if (have === 0) {
                  break inf_leave;
                }

                have--;
                hold += input[next++] << bits;
                bits += 8;
              } //===//


              if (state.head) {
                state.head.xflags = hold & 0xff;
                state.head.os = hold >> 8;
              }

              if (state.flags & 0x0200) {
                //=== CRC2(state.check, hold);
                hbuf[0] = hold & 0xff;
                hbuf[1] = hold >>> 8 & 0xff;
                state.check = crc32(state.check, hbuf, 2, 0); //===//
              } //=== INITBITS();


              hold = 0;
              bits = 0; //===//

              state.mode = EXLEN;

            /* falls through */

            case EXLEN:
              if (state.flags & 0x0400) {
                //=== NEEDBITS(16); */
                while (bits < 16) {
                  if (have === 0) {
                    break inf_leave;
                  }

                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                } //===//


                state.length = hold;

                if (state.head) {
                  state.head.extra_len = hold;
                }

                if (state.flags & 0x0200) {
                  //=== CRC2(state.check, hold);
                  hbuf[0] = hold & 0xff;
                  hbuf[1] = hold >>> 8 & 0xff;
                  state.check = crc32(state.check, hbuf, 2, 0); //===//
                } //=== INITBITS();


                hold = 0;
                bits = 0; //===//
              } else if (state.head) {
                state.head.extra = null
                /*Z_NULL*/
                ;
              }

              state.mode = EXTRA;

            /* falls through */

            case EXTRA:
              if (state.flags & 0x0400) {
                copy = state.length;

                if (copy > have) {
                  copy = have;
                }

                if (copy) {
                  if (state.head) {
                    len = state.head.extra_len - state.length;

                    if (!state.head.extra) {
                      // Use untyped array for more convenient processing later
                      state.head.extra = new Array(state.head.extra_len);
                    }

                    utils.arraySet(state.head.extra, input, next, // extra field is limited to 65536 bytes
                    // - no need for additional size check
                    copy,
                    /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
                    len); //zmemcpy(state.head.extra + len, next,
                    //        len + copy > state.head.extra_max ?
                    //        state.head.extra_max - len : copy);
                  }

                  if (state.flags & 0x0200) {
                    state.check = crc32(state.check, input, copy, next);
                  }

                  have -= copy;
                  next += copy;
                  state.length -= copy;
                }

                if (state.length) {
                  break inf_leave;
                }
              }

              state.length = 0;
              state.mode = NAME;

            /* falls through */

            case NAME:
              if (state.flags & 0x0800) {
                if (have === 0) {
                  break inf_leave;
                }

                copy = 0;

                do {
                  // TODO: 2 or 1 bytes?
                  len = input[next + copy++];
                  /* use constant limit because in js we should not preallocate memory */

                  if (state.head && len && state.length < 65536
                  /*state.head.name_max*/
                  ) {
                    state.head.name += String.fromCharCode(len);
                  }
                } while (len && copy < have);

                if (state.flags & 0x0200) {
                  state.check = crc32(state.check, input, copy, next);
                }

                have -= copy;
                next += copy;

                if (len) {
                  break inf_leave;
                }
              } else if (state.head) {
                state.head.name = null;
              }

              state.length = 0;
              state.mode = COMMENT;

            /* falls through */

            case COMMENT:
              if (state.flags & 0x1000) {
                if (have === 0) {
                  break inf_leave;
                }

                copy = 0;

                do {
                  len = input[next + copy++];
                  /* use constant limit because in js we should not preallocate memory */

                  if (state.head && len && state.length < 65536
                  /*state.head.comm_max*/
                  ) {
                    state.head.comment += String.fromCharCode(len);
                  }
                } while (len && copy < have);

                if (state.flags & 0x0200) {
                  state.check = crc32(state.check, input, copy, next);
                }

                have -= copy;
                next += copy;

                if (len) {
                  break inf_leave;
                }
              } else if (state.head) {
                state.head.comment = null;
              }

              state.mode = HCRC;

            /* falls through */

            case HCRC:
              if (state.flags & 0x0200) {
                //=== NEEDBITS(16); */
                while (bits < 16) {
                  if (have === 0) {
                    break inf_leave;
                  }

                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                } //===//


                if (hold !== (state.check & 0xffff)) {
                  strm.msg = 'header crc mismatch';
                  state.mode = BAD;
                  break;
                } //=== INITBITS();


                hold = 0;
                bits = 0; //===//
              }

              if (state.head) {
                state.head.hcrc = state.flags >> 9 & 1;
                state.head.done = true;
              }

              strm.adler = state.check = 0;
              state.mode = TYPE;
              break;

            case DICTID:
              //=== NEEDBITS(32); */
              while (bits < 32) {
                if (have === 0) {
                  break inf_leave;
                }

                have--;
                hold += input[next++] << bits;
                bits += 8;
              } //===//


              strm.adler = state.check = zswap32(hold); //=== INITBITS();

              hold = 0;
              bits = 0; //===//

              state.mode = DICT;

            /* falls through */

            case DICT:
              if (state.havedict === 0) {
                //--- RESTORE() ---
                strm.next_out = put;
                strm.avail_out = left;
                strm.next_in = next;
                strm.avail_in = have;
                state.hold = hold;
                state.bits = bits; //---

                return Z_NEED_DICT;
              }

              strm.adler = state.check = 1
              /*adler32(0L, Z_NULL, 0)*/
              ;
              state.mode = TYPE;

            /* falls through */

            case TYPE:
              if (flush === Z_BLOCK || flush === Z_TREES) {
                break inf_leave;
              }

            /* falls through */

            case TYPEDO:
              if (state.last) {
                //--- BYTEBITS() ---//
                hold >>>= bits & 7;
                bits -= bits & 7; //---//

                state.mode = CHECK;
                break;
              } //=== NEEDBITS(3); */


              while (bits < 3) {
                if (have === 0) {
                  break inf_leave;
                }

                have--;
                hold += input[next++] << bits;
                bits += 8;
              } //===//


              state.last = hold & 0x01
              /*BITS(1)*/
              ; //--- DROPBITS(1) ---//

              hold >>>= 1;
              bits -= 1; //---//

              switch (hold & 0x03) {
                /*BITS(2)*/
                case 0:
                  /* stored block */
                  //Tracev((stderr, "inflate:     stored block%s\n",
                  //        state.last ? " (last)" : ""));
                  state.mode = STORED;
                  break;

                case 1:
                  /* fixed block */
                  fixedtables(state); //Tracev((stderr, "inflate:     fixed codes block%s\n",
                  //        state.last ? " (last)" : ""));

                  state.mode = LEN_;
                  /* decode codes */

                  if (flush === Z_TREES) {
                    //--- DROPBITS(2) ---//
                    hold >>>= 2;
                    bits -= 2; //---//

                    break inf_leave;
                  }

                  break;

                case 2:
                  /* dynamic block */
                  //Tracev((stderr, "inflate:     dynamic codes block%s\n",
                  //        state.last ? " (last)" : ""));
                  state.mode = TABLE;
                  break;

                case 3:
                  strm.msg = 'invalid block type';
                  state.mode = BAD;
              } //--- DROPBITS(2) ---//


              hold >>>= 2;
              bits -= 2; //---//

              break;

            case STORED:
              //--- BYTEBITS() ---// /* go to byte boundary */
              hold >>>= bits & 7;
              bits -= bits & 7; //---//
              //=== NEEDBITS(32); */

              while (bits < 32) {
                if (have === 0) {
                  break inf_leave;
                }

                have--;
                hold += input[next++] << bits;
                bits += 8;
              } //===//


              if ((hold & 0xffff) !== (hold >>> 16 ^ 0xffff)) {
                strm.msg = 'invalid stored block lengths';
                state.mode = BAD;
                break;
              }

              state.length = hold & 0xffff; //Tracev((stderr, "inflate:       stored length %u\n",
              //        state.length));
              //=== INITBITS();

              hold = 0;
              bits = 0; //===//

              state.mode = COPY_;

              if (flush === Z_TREES) {
                break inf_leave;
              }

            /* falls through */

            case COPY_:
              state.mode = COPY;

            /* falls through */

            case COPY:
              copy = state.length;

              if (copy) {
                if (copy > have) {
                  copy = have;
                }

                if (copy > left) {
                  copy = left;
                }

                if (copy === 0) {
                  break inf_leave;
                } //--- zmemcpy(put, next, copy); ---


                utils.arraySet(output, input, next, copy, put); //---//

                have -= copy;
                next += copy;
                left -= copy;
                put += copy;
                state.length -= copy;
                break;
              } //Tracev((stderr, "inflate:       stored end\n"));


              state.mode = TYPE;
              break;

            case TABLE:
              //=== NEEDBITS(14); */
              while (bits < 14) {
                if (have === 0) {
                  break inf_leave;
                }

                have--;
                hold += input[next++] << bits;
                bits += 8;
              } //===//


              state.nlen = (hold & 0x1f) +
              /*BITS(5)*/
              257; //--- DROPBITS(5) ---//

              hold >>>= 5;
              bits -= 5; //---//

              state.ndist = (hold & 0x1f) +
              /*BITS(5)*/
              1; //--- DROPBITS(5) ---//

              hold >>>= 5;
              bits -= 5; //---//

              state.ncode = (hold & 0x0f) +
              /*BITS(4)*/
              4; //--- DROPBITS(4) ---//

              hold >>>= 4;
              bits -= 4; //---//
              //#ifndef PKZIP_BUG_WORKAROUND

              if (state.nlen > 286 || state.ndist > 30) {
                strm.msg = 'too many length or distance symbols';
                state.mode = BAD;
                break;
              } //#endif
              //Tracev((stderr, "inflate:       table sizes ok\n"));


              state.have = 0;
              state.mode = LENLENS;

            /* falls through */

            case LENLENS:
              while (state.have < state.ncode) {
                //=== NEEDBITS(3);
                while (bits < 3) {
                  if (have === 0) {
                    break inf_leave;
                  }

                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                } //===//


                state.lens[order[state.have++]] = hold & 0x07; //BITS(3);
                //--- DROPBITS(3) ---//

                hold >>>= 3;
                bits -= 3; //---//
              }

              while (state.have < 19) {
                state.lens[order[state.have++]] = 0;
              } // We have separate tables & no pointers. 2 commented lines below not needed.
              //state.next = state.codes;
              //state.lencode = state.next;
              // Switch to use dynamic table


              state.lencode = state.lendyn;
              state.lenbits = 7;
              opts = {
                bits: state.lenbits
              };
              ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
              state.lenbits = opts.bits;

              if (ret) {
                strm.msg = 'invalid code lengths set';
                state.mode = BAD;
                break;
              } //Tracev((stderr, "inflate:       code lengths ok\n"));


              state.have = 0;
              state.mode = CODELENS;

            /* falls through */

            case CODELENS:
              while (state.have < state.nlen + state.ndist) {
                for (;;) {
                  here = state.lencode[hold & (1 << state.lenbits) - 1];
                  /*BITS(state.lenbits)*/

                  here_bits = here >>> 24;
                  here_op = here >>> 16 & 0xff;
                  here_val = here & 0xffff;

                  if (here_bits <= bits) {
                    break;
                  } //--- PULLBYTE() ---//


                  if (have === 0) {
                    break inf_leave;
                  }

                  have--;
                  hold += input[next++] << bits;
                  bits += 8; //---//
                }

                if (here_val < 16) {
                  //--- DROPBITS(here.bits) ---//
                  hold >>>= here_bits;
                  bits -= here_bits; //---//

                  state.lens[state.have++] = here_val;
                } else {
                  if (here_val === 16) {
                    //=== NEEDBITS(here.bits + 2);
                    n = here_bits + 2;

                    while (bits < n) {
                      if (have === 0) {
                        break inf_leave;
                      }

                      have--;
                      hold += input[next++] << bits;
                      bits += 8;
                    } //===//
                    //--- DROPBITS(here.bits) ---//


                    hold >>>= here_bits;
                    bits -= here_bits; //---//

                    if (state.have === 0) {
                      strm.msg = 'invalid bit length repeat';
                      state.mode = BAD;
                      break;
                    }

                    len = state.lens[state.have - 1];
                    copy = 3 + (hold & 0x03); //BITS(2);
                    //--- DROPBITS(2) ---//

                    hold >>>= 2;
                    bits -= 2; //---//
                  } else if (here_val === 17) {
                    //=== NEEDBITS(here.bits + 3);
                    n = here_bits + 3;

                    while (bits < n) {
                      if (have === 0) {
                        break inf_leave;
                      }

                      have--;
                      hold += input[next++] << bits;
                      bits += 8;
                    } //===//
                    //--- DROPBITS(here.bits) ---//


                    hold >>>= here_bits;
                    bits -= here_bits; //---//

                    len = 0;
                    copy = 3 + (hold & 0x07); //BITS(3);
                    //--- DROPBITS(3) ---//

                    hold >>>= 3;
                    bits -= 3; //---//
                  } else {
                    //=== NEEDBITS(here.bits + 7);
                    n = here_bits + 7;

                    while (bits < n) {
                      if (have === 0) {
                        break inf_leave;
                      }

                      have--;
                      hold += input[next++] << bits;
                      bits += 8;
                    } //===//
                    //--- DROPBITS(here.bits) ---//


                    hold >>>= here_bits;
                    bits -= here_bits; //---//

                    len = 0;
                    copy = 11 + (hold & 0x7f); //BITS(7);
                    //--- DROPBITS(7) ---//

                    hold >>>= 7;
                    bits -= 7; //---//
                  }

                  if (state.have + copy > state.nlen + state.ndist) {
                    strm.msg = 'invalid bit length repeat';
                    state.mode = BAD;
                    break;
                  }

                  while (copy--) {
                    state.lens[state.have++] = len;
                  }
                }
              }
              /* handle error breaks in while */


              if (state.mode === BAD) {
                break;
              }
              /* check for end-of-block code (better have one) */


              if (state.lens[256] === 0) {
                strm.msg = 'invalid code -- missing end-of-block';
                state.mode = BAD;
                break;
              }
              /* build code tables -- note: do not change the lenbits or distbits
                 values here (9 and 6) without reading the comments in inftrees.h
                 concerning the ENOUGH constants, which depend on those values */


              state.lenbits = 9;
              opts = {
                bits: state.lenbits
              };
              ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts); // We have separate tables & no pointers. 2 commented lines below not needed.
              // state.next_index = opts.table_index;

              state.lenbits = opts.bits; // state.lencode = state.next;

              if (ret) {
                strm.msg = 'invalid literal/lengths set';
                state.mode = BAD;
                break;
              }

              state.distbits = 6; //state.distcode.copy(state.codes);
              // Switch to use dynamic table

              state.distcode = state.distdyn;
              opts = {
                bits: state.distbits
              };
              ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts); // We have separate tables & no pointers. 2 commented lines below not needed.
              // state.next_index = opts.table_index;

              state.distbits = opts.bits; // state.distcode = state.next;

              if (ret) {
                strm.msg = 'invalid distances set';
                state.mode = BAD;
                break;
              } //Tracev((stderr, 'inflate:       codes ok\n'));


              state.mode = LEN_;

              if (flush === Z_TREES) {
                break inf_leave;
              }

            /* falls through */

            case LEN_:
              state.mode = LEN;

            /* falls through */

            case LEN:
              if (have >= 6 && left >= 258) {
                //--- RESTORE() ---
                strm.next_out = put;
                strm.avail_out = left;
                strm.next_in = next;
                strm.avail_in = have;
                state.hold = hold;
                state.bits = bits; //---

                inflate_fast(strm, _out); //--- LOAD() ---

                put = strm.next_out;
                output = strm.output;
                left = strm.avail_out;
                next = strm.next_in;
                input = strm.input;
                have = strm.avail_in;
                hold = state.hold;
                bits = state.bits; //---

                if (state.mode === TYPE) {
                  state.back = -1;
                }

                break;
              }

              state.back = 0;

              for (;;) {
                here = state.lencode[hold & (1 << state.lenbits) - 1];
                /*BITS(state.lenbits)*/

                here_bits = here >>> 24;
                here_op = here >>> 16 & 0xff;
                here_val = here & 0xffff;

                if (here_bits <= bits) {
                  break;
                } //--- PULLBYTE() ---//


                if (have === 0) {
                  break inf_leave;
                }

                have--;
                hold += input[next++] << bits;
                bits += 8; //---//
              }

              if (here_op && (here_op & 0xf0) === 0) {
                last_bits = here_bits;
                last_op = here_op;
                last_val = here_val;

                for (;;) {
                  here = state.lencode[last_val + ((hold & (1 << last_bits + last_op) - 1) >>
                  /*BITS(last.bits + last.op)*/
                  last_bits)];
                  here_bits = here >>> 24;
                  here_op = here >>> 16 & 0xff;
                  here_val = here & 0xffff;

                  if (last_bits + here_bits <= bits) {
                    break;
                  } //--- PULLBYTE() ---//


                  if (have === 0) {
                    break inf_leave;
                  }

                  have--;
                  hold += input[next++] << bits;
                  bits += 8; //---//
                } //--- DROPBITS(last.bits) ---//


                hold >>>= last_bits;
                bits -= last_bits; //---//

                state.back += last_bits;
              } //--- DROPBITS(here.bits) ---//


              hold >>>= here_bits;
              bits -= here_bits; //---//

              state.back += here_bits;
              state.length = here_val;

              if (here_op === 0) {
                //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
                //        "inflate:         literal '%c'\n" :
                //        "inflate:         literal 0x%02x\n", here.val));
                state.mode = LIT;
                break;
              }

              if (here_op & 32) {
                //Tracevv((stderr, "inflate:         end of block\n"));
                state.back = -1;
                state.mode = TYPE;
                break;
              }

              if (here_op & 64) {
                strm.msg = 'invalid literal/length code';
                state.mode = BAD;
                break;
              }

              state.extra = here_op & 15;
              state.mode = LENEXT;

            /* falls through */

            case LENEXT:
              if (state.extra) {
                //=== NEEDBITS(state.extra);
                n = state.extra;

                while (bits < n) {
                  if (have === 0) {
                    break inf_leave;
                  }

                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                } //===//


                state.length += hold & (1 << state.extra) - 1
                /*BITS(state.extra)*/
                ; //--- DROPBITS(state.extra) ---//

                hold >>>= state.extra;
                bits -= state.extra; //---//

                state.back += state.extra;
              } //Tracevv((stderr, "inflate:         length %u\n", state.length));


              state.was = state.length;
              state.mode = DIST;

            /* falls through */

            case DIST:
              for (;;) {
                here = state.distcode[hold & (1 << state.distbits) - 1];
                /*BITS(state.distbits)*/

                here_bits = here >>> 24;
                here_op = here >>> 16 & 0xff;
                here_val = here & 0xffff;

                if (here_bits <= bits) {
                  break;
                } //--- PULLBYTE() ---//


                if (have === 0) {
                  break inf_leave;
                }

                have--;
                hold += input[next++] << bits;
                bits += 8; //---//
              }

              if ((here_op & 0xf0) === 0) {
                last_bits = here_bits;
                last_op = here_op;
                last_val = here_val;

                for (;;) {
                  here = state.distcode[last_val + ((hold & (1 << last_bits + last_op) - 1) >>
                  /*BITS(last.bits + last.op)*/
                  last_bits)];
                  here_bits = here >>> 24;
                  here_op = here >>> 16 & 0xff;
                  here_val = here & 0xffff;

                  if (last_bits + here_bits <= bits) {
                    break;
                  } //--- PULLBYTE() ---//


                  if (have === 0) {
                    break inf_leave;
                  }

                  have--;
                  hold += input[next++] << bits;
                  bits += 8; //---//
                } //--- DROPBITS(last.bits) ---//


                hold >>>= last_bits;
                bits -= last_bits; //---//

                state.back += last_bits;
              } //--- DROPBITS(here.bits) ---//


              hold >>>= here_bits;
              bits -= here_bits; //---//

              state.back += here_bits;

              if (here_op & 64) {
                strm.msg = 'invalid distance code';
                state.mode = BAD;
                break;
              }

              state.offset = here_val;
              state.extra = here_op & 15;
              state.mode = DISTEXT;

            /* falls through */

            case DISTEXT:
              if (state.extra) {
                //=== NEEDBITS(state.extra);
                n = state.extra;

                while (bits < n) {
                  if (have === 0) {
                    break inf_leave;
                  }

                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                } //===//


                state.offset += hold & (1 << state.extra) - 1
                /*BITS(state.extra)*/
                ; //--- DROPBITS(state.extra) ---//

                hold >>>= state.extra;
                bits -= state.extra; //---//

                state.back += state.extra;
              } //#ifdef INFLATE_STRICT


              if (state.offset > state.dmax) {
                strm.msg = 'invalid distance too far back';
                state.mode = BAD;
                break;
              } //#endif
              //Tracevv((stderr, "inflate:         distance %u\n", state.offset));


              state.mode = MATCH;

            /* falls through */

            case MATCH:
              if (left === 0) {
                break inf_leave;
              }

              copy = _out - left;

              if (state.offset > copy) {
                /* copy from window */
                copy = state.offset - copy;

                if (copy > state.whave) {
                  if (state.sane) {
                    strm.msg = 'invalid distance too far back';
                    state.mode = BAD;
                    break;
                  } // (!) This block is disabled in zlib defaults,
                  // don't enable it for binary compatibility
                  //#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
                  //          Trace((stderr, "inflate.c too far\n"));
                  //          copy -= state.whave;
                  //          if (copy > state.length) { copy = state.length; }
                  //          if (copy > left) { copy = left; }
                  //          left -= copy;
                  //          state.length -= copy;
                  //          do {
                  //            output[put++] = 0;
                  //          } while (--copy);
                  //          if (state.length === 0) { state.mode = LEN; }
                  //          break;
                  //#endif

                }

                if (copy > state.wnext) {
                  copy -= state.wnext;
                  from = state.wsize - copy;
                } else {
                  from = state.wnext - copy;
                }

                if (copy > state.length) {
                  copy = state.length;
                }

                from_source = state.window;
              } else {
                /* copy from output */
                from_source = output;
                from = put - state.offset;
                copy = state.length;
              }

              if (copy > left) {
                copy = left;
              }

              left -= copy;
              state.length -= copy;

              do {
                output[put++] = from_source[from++];
              } while (--copy);

              if (state.length === 0) {
                state.mode = LEN;
              }

              break;

            case LIT:
              if (left === 0) {
                break inf_leave;
              }

              output[put++] = state.length;
              left--;
              state.mode = LEN;
              break;

            case CHECK:
              if (state.wrap) {
                //=== NEEDBITS(32);
                while (bits < 32) {
                  if (have === 0) {
                    break inf_leave;
                  }

                  have--; // Use '|' instead of '+' to make sure that result is signed

                  hold |= input[next++] << bits;
                  bits += 8;
                } //===//


                _out -= left;
                strm.total_out += _out;
                state.total += _out;

                if (_out) {
                  strm.adler = state.check =
                  /*UPDATE(state.check, put - _out, _out);*/
                  state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out);
                }

                _out = left; // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too

                if ((state.flags ? hold : zswap32(hold)) !== state.check) {
                  strm.msg = 'incorrect data check';
                  state.mode = BAD;
                  break;
                } //=== INITBITS();


                hold = 0;
                bits = 0; //===//
                //Tracev((stderr, "inflate:   check matches trailer\n"));
              }

              state.mode = LENGTH;

            /* falls through */

            case LENGTH:
              if (state.wrap && state.flags) {
                //=== NEEDBITS(32);
                while (bits < 32) {
                  if (have === 0) {
                    break inf_leave;
                  }

                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                } //===//


                if (hold !== (state.total & 0xffffffff)) {
                  strm.msg = 'incorrect length check';
                  state.mode = BAD;
                  break;
                } //=== INITBITS();


                hold = 0;
                bits = 0; //===//
                //Tracev((stderr, "inflate:   length matches trailer\n"));
              }

              state.mode = DONE;

            /* falls through */

            case DONE:
              ret = Z_STREAM_END;
              break inf_leave;

            case BAD:
              ret = Z_DATA_ERROR;
              break inf_leave;

            case MEM:
              return Z_MEM_ERROR;

            case SYNC:
            /* falls through */

            default:
              return Z_STREAM_ERROR;
          }
        } // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

        /*
           Return from inflate(), updating the total counts and the check value.
           If there was no progress during the inflate() call, return a buffer
           error.  Call updatewindow() to create and/or update the window state.
           Note: a memory error from inflate() is non-recoverable.
         */
        //--- RESTORE() ---


        strm.next_out = put;
        strm.avail_out = left;
        strm.next_in = next;
        strm.avail_in = have;
        state.hold = hold;
        state.bits = bits; //---

        if (state.wsize || _out !== strm.avail_out && state.mode < BAD && (state.mode < CHECK || flush !== Z_FINISH)) {
          if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {
            state.mode = MEM;
            return Z_MEM_ERROR;
          }
        }

        _in -= strm.avail_in;
        _out -= strm.avail_out;
        strm.total_in += _in;
        strm.total_out += _out;
        state.total += _out;

        if (state.wrap && _out) {
          strm.adler = state.check =
          /*UPDATE(state.check, strm.next_out - _out, _out);*/
          state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out);
        }

        strm.data_type = state.bits + (state.last ? 64 : 0) + (state.mode === TYPE ? 128 : 0) + (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);

        if ((_in === 0 && _out === 0 || flush === Z_FINISH) && ret === Z_OK) {
          ret = Z_BUF_ERROR;
        }

        return ret;
      }

      function inflateEnd(strm) {
        if (!strm || !strm.state
        /*|| strm->zfree == (free_func)0*/
        ) {
            return Z_STREAM_ERROR;
          }

        var state = strm.state;

        if (state.window) {
          state.window = null;
        }

        strm.state = null;
        return Z_OK;
      }

      function inflateGetHeader(strm, head) {
        var state;
        /* check state */

        if (!strm || !strm.state) {
          return Z_STREAM_ERROR;
        }

        state = strm.state;

        if ((state.wrap & 2) === 0) {
          return Z_STREAM_ERROR;
        }
        /* save header structure */


        state.head = head;
        head.done = false;
        return Z_OK;
      }

      function inflateSetDictionary(strm, dictionary) {
        var dictLength = dictionary.length;
        var state;
        var dictid;
        var ret;
        /* check state */

        if (!strm
        /* == Z_NULL */
        || !strm.state
        /* == Z_NULL */
        ) {
            return Z_STREAM_ERROR;
          }

        state = strm.state;

        if (state.wrap !== 0 && state.mode !== DICT) {
          return Z_STREAM_ERROR;
        }
        /* check for correct dictionary identifier */


        if (state.mode === DICT) {
          dictid = 1;
          /* adler32(0, null, 0)*/

          /* dictid = adler32(dictid, dictionary, dictLength); */

          dictid = adler32(dictid, dictionary, dictLength, 0);

          if (dictid !== state.check) {
            return Z_DATA_ERROR;
          }
        }
        /* copy dictionary to window using updatewindow(), which will amend the
         existing dictionary if appropriate */


        ret = updatewindow(strm, dictionary, dictLength, dictLength);

        if (ret) {
          state.mode = MEM;
          return Z_MEM_ERROR;
        }

        state.havedict = 1; // Tracev((stderr, "inflate:   dictionary set\n"));

        return Z_OK;
      }

      exports.inflateReset = inflateReset;
      exports.inflateReset2 = inflateReset2;
      exports.inflateResetKeep = inflateResetKeep;
      exports.inflateInit = inflateInit;
      exports.inflateInit2 = inflateInit2;
      exports.inflate = inflate;
      exports.inflateEnd = inflateEnd;
      exports.inflateGetHeader = inflateGetHeader;
      exports.inflateSetDictionary = inflateSetDictionary;
      exports.inflateInfo = 'pako inflate (from Nodeca project)';
      /* Not implemented
      exports.inflateCopy = inflateCopy;
      exports.inflateGetDictionary = inflateGetDictionary;
      exports.inflateMark = inflateMark;
      exports.inflatePrime = inflatePrime;
      exports.inflateSync = inflateSync;
      exports.inflateSyncPoint = inflateSyncPoint;
      exports.inflateUndermine = inflateUndermine;
      */

      /***/
    },
    /* 359 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict"; // (C) 1995-2013 Jean-loup Gailly and Mark Adler
      // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
      //
      // This software is provided 'as-is', without any express or implied
      // warranty. In no event will the authors be held liable for any damages
      // arising from the use of this software.
      //
      // Permission is granted to anyone to use this software for any purpose,
      // including commercial applications, and to alter it and redistribute it
      // freely, subject to the following restrictions:
      //
      // 1. The origin of this software must not be misrepresented; you must not
      //   claim that you wrote the original software. If you use this software
      //   in a product, an acknowledgment in the product documentation would be
      //   appreciated but is not required.
      // 2. Altered source versions must be plainly marked as such, and must not be
      //   misrepresented as being the original software.
      // 3. This notice may not be removed or altered from any source distribution.
      // See state defs from inflate.js

      var BAD = 30;
      /* got a data error -- remain here until reset */

      var TYPE = 12;
      /* i: waiting for type bits, including last-flag bit */

      /*
         Decode literal, length, and distance codes and write out the resulting
         literal and match bytes until either not enough input or output is
         available, an end-of-block is encountered, or a data error is encountered.
         When large enough input and output buffers are supplied to inflate(), for
         example, a 16K input buffer and a 64K output buffer, more than 95% of the
         inflate execution time is spent in this routine.
      
         Entry assumptions:
      
              state.mode === LEN
              strm.avail_in >= 6
              strm.avail_out >= 258
              start >= strm.avail_out
              state.bits < 8
      
         On return, state.mode is one of:
      
              LEN -- ran out of enough output space or enough available input
              TYPE -- reached end of block code, inflate() to interpret next block
              BAD -- error in block data
      
         Notes:
      
          - The maximum input bits used by a length/distance pair is 15 bits for the
            length code, 5 bits for the length extra, 15 bits for the distance code,
            and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
            Therefore if strm.avail_in >= 6, then there is enough input to avoid
            checking for available input while decoding.
      
          - The maximum bytes that a single length/distance pair can output is 258
            bytes, which is the maximum length that can be coded.  inflate_fast()
            requires strm.avail_out >= 258 for each loop to avoid checking for
            output space.
       */

      module.exports = function inflate_fast(strm, start) {
        var state;

        var _in;
        /* local strm.input */


        var last;
        /* have enough input while in < last */

        var _out;
        /* local strm.output */


        var beg;
        /* inflate()'s initial strm.output */

        var end;
        /* while out < end, enough space available */
        //#ifdef INFLATE_STRICT

        var dmax;
        /* maximum distance from zlib header */
        //#endif

        var wsize;
        /* window size or zero if not using window */

        var whave;
        /* valid bytes in the window */

        var wnext;
        /* window write index */
        // Use `s_window` instead `window`, avoid conflict with instrumentation tools

        var s_window;
        /* allocated sliding window, if wsize != 0 */

        var hold;
        /* local strm.hold */

        var bits;
        /* local strm.bits */

        var lcode;
        /* local strm.lencode */

        var dcode;
        /* local strm.distcode */

        var lmask;
        /* mask for first level of length codes */

        var dmask;
        /* mask for first level of distance codes */

        var here;
        /* retrieved table entry */

        var op;
        /* code bits, operation, extra bits, or */

        /*  window position, window bytes to copy */

        var len;
        /* match length, unused bytes */

        var dist;
        /* match distance */

        var from;
        /* where to copy match from */

        var from_source;
        var input, output; // JS specific, because we have no pointers

        /* copy state to local variables */

        state = strm.state; //here = state.here;

        _in = strm.next_in;
        input = strm.input;
        last = _in + (strm.avail_in - 5);
        _out = strm.next_out;
        output = strm.output;
        beg = _out - (start - strm.avail_out);
        end = _out + (strm.avail_out - 257); //#ifdef INFLATE_STRICT

        dmax = state.dmax; //#endif

        wsize = state.wsize;
        whave = state.whave;
        wnext = state.wnext;
        s_window = state.window;
        hold = state.hold;
        bits = state.bits;
        lcode = state.lencode;
        dcode = state.distcode;
        lmask = (1 << state.lenbits) - 1;
        dmask = (1 << state.distbits) - 1;
        /* decode literals and length/distances until end-of-block or not enough
           input data or output space */

        top: do {
          if (bits < 15) {
            hold += input[_in++] << bits;
            bits += 8;
            hold += input[_in++] << bits;
            bits += 8;
          }

          here = lcode[hold & lmask];

          dolen: for (;;) {
            // Goto emulation
            op = here >>> 24
            /*here.bits*/
            ;
            hold >>>= op;
            bits -= op;
            op = here >>> 16 & 0xff
            /*here.op*/
            ;

            if (op === 0) {
              /* literal */
              //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
              //        "inflate:         literal '%c'\n" :
              //        "inflate:         literal 0x%02x\n", here.val));
              output[_out++] = here & 0xffff
              /*here.val*/
              ;
            } else if (op & 16) {
              /* length base */
              len = here & 0xffff
              /*here.val*/
              ;
              op &= 15;
              /* number of extra bits */

              if (op) {
                if (bits < op) {
                  hold += input[_in++] << bits;
                  bits += 8;
                }

                len += hold & (1 << op) - 1;
                hold >>>= op;
                bits -= op;
              } //Tracevv((stderr, "inflate:         length %u\n", len));


              if (bits < 15) {
                hold += input[_in++] << bits;
                bits += 8;
                hold += input[_in++] << bits;
                bits += 8;
              }

              here = dcode[hold & dmask];

              dodist: for (;;) {
                // goto emulation
                op = here >>> 24
                /*here.bits*/
                ;
                hold >>>= op;
                bits -= op;
                op = here >>> 16 & 0xff
                /*here.op*/
                ;

                if (op & 16) {
                  /* distance base */
                  dist = here & 0xffff
                  /*here.val*/
                  ;
                  op &= 15;
                  /* number of extra bits */

                  if (bits < op) {
                    hold += input[_in++] << bits;
                    bits += 8;

                    if (bits < op) {
                      hold += input[_in++] << bits;
                      bits += 8;
                    }
                  }

                  dist += hold & (1 << op) - 1; //#ifdef INFLATE_STRICT

                  if (dist > dmax) {
                    strm.msg = 'invalid distance too far back';
                    state.mode = BAD;
                    break top;
                  } //#endif


                  hold >>>= op;
                  bits -= op; //Tracevv((stderr, "inflate:         distance %u\n", dist));

                  op = _out - beg;
                  /* max distance in output */

                  if (dist > op) {
                    /* see if copy from window */
                    op = dist - op;
                    /* distance back in window */

                    if (op > whave) {
                      if (state.sane) {
                        strm.msg = 'invalid distance too far back';
                        state.mode = BAD;
                        break top;
                      } // (!) This block is disabled in zlib defaults,
                      // don't enable it for binary compatibility
                      //#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
                      //                if (len <= op - whave) {
                      //                  do {
                      //                    output[_out++] = 0;
                      //                  } while (--len);
                      //                  continue top;
                      //                }
                      //                len -= op - whave;
                      //                do {
                      //                  output[_out++] = 0;
                      //                } while (--op > whave);
                      //                if (op === 0) {
                      //                  from = _out - dist;
                      //                  do {
                      //                    output[_out++] = output[from++];
                      //                  } while (--len);
                      //                  continue top;
                      //                }
                      //#endif

                    }

                    from = 0; // window index

                    from_source = s_window;

                    if (wnext === 0) {
                      /* very common case */
                      from += wsize - op;

                      if (op < len) {
                        /* some from window */
                        len -= op;

                        do {
                          output[_out++] = s_window[from++];
                        } while (--op);

                        from = _out - dist;
                        /* rest from output */

                        from_source = output;
                      }
                    } else if (wnext < op) {
                      /* wrap around window */
                      from += wsize + wnext - op;
                      op -= wnext;

                      if (op < len) {
                        /* some from end of window */
                        len -= op;

                        do {
                          output[_out++] = s_window[from++];
                        } while (--op);

                        from = 0;

                        if (wnext < len) {
                          /* some from start of window */
                          op = wnext;
                          len -= op;

                          do {
                            output[_out++] = s_window[from++];
                          } while (--op);

                          from = _out - dist;
                          /* rest from output */

                          from_source = output;
                        }
                      }
                    } else {
                      /* contiguous in window */
                      from += wnext - op;

                      if (op < len) {
                        /* some from window */
                        len -= op;

                        do {
                          output[_out++] = s_window[from++];
                        } while (--op);

                        from = _out - dist;
                        /* rest from output */

                        from_source = output;
                      }
                    }

                    while (len > 2) {
                      output[_out++] = from_source[from++];
                      output[_out++] = from_source[from++];
                      output[_out++] = from_source[from++];
                      len -= 3;
                    }

                    if (len) {
                      output[_out++] = from_source[from++];

                      if (len > 1) {
                        output[_out++] = from_source[from++];
                      }
                    }
                  } else {
                    from = _out - dist;
                    /* copy direct from output */

                    do {
                      /* minimum length is three */
                      output[_out++] = output[from++];
                      output[_out++] = output[from++];
                      output[_out++] = output[from++];
                      len -= 3;
                    } while (len > 2);

                    if (len) {
                      output[_out++] = output[from++];

                      if (len > 1) {
                        output[_out++] = output[from++];
                      }
                    }
                  }
                } else if ((op & 64) === 0) {
                  /* 2nd level distance code */
                  here = dcode[(here & 0xffff) + (
                  /*here.val*/
                  hold & (1 << op) - 1)];
                  continue dodist;
                } else {
                  strm.msg = 'invalid distance code';
                  state.mode = BAD;
                  break top;
                }

                break; // need to emulate goto via "continue"
              }
            } else if ((op & 64) === 0) {
              /* 2nd level length code */
              here = lcode[(here & 0xffff) + (
              /*here.val*/
              hold & (1 << op) - 1)];
              continue dolen;
            } else if (op & 32) {
              /* end-of-block */
              //Tracevv((stderr, "inflate:         end of block\n"));
              state.mode = TYPE;
              break top;
            } else {
              strm.msg = 'invalid literal/length code';
              state.mode = BAD;
              break top;
            }

            break; // need to emulate goto via "continue"
          }
        } while (_in < last && _out < end);
        /* return unused bytes (on entry, bits < 8, so in won't go too far back) */


        len = bits >> 3;
        _in -= len;
        bits -= len << 3;
        hold &= (1 << bits) - 1;
        /* update state and return */

        strm.next_in = _in;
        strm.next_out = _out;
        strm.avail_in = _in < last ? 5 + (last - _in) : 5 - (_in - last);
        strm.avail_out = _out < end ? 257 + (end - _out) : 257 - (_out - end);
        state.hold = hold;
        state.bits = bits;
        return;
      };
      /***/

    },
    /* 360 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict"; // (C) 1995-2013 Jean-loup Gailly and Mark Adler
      // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
      //
      // This software is provided 'as-is', without any express or implied
      // warranty. In no event will the authors be held liable for any damages
      // arising from the use of this software.
      //
      // Permission is granted to anyone to use this software for any purpose,
      // including commercial applications, and to alter it and redistribute it
      // freely, subject to the following restrictions:
      //
      // 1. The origin of this software must not be misrepresented; you must not
      //   claim that you wrote the original software. If you use this software
      //   in a product, an acknowledgment in the product documentation would be
      //   appreciated but is not required.
      // 2. Altered source versions must be plainly marked as such, and must not be
      //   misrepresented as being the original software.
      // 3. This notice may not be removed or altered from any source distribution.

      var utils = __webpack_require__(126);

      var MAXBITS = 15;
      var ENOUGH_LENS = 852;
      var ENOUGH_DISTS = 592; //var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

      var CODES = 0;
      var LENS = 1;
      var DISTS = 2;
      var lbase = [
      /* Length codes 257..285 base */
      3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0];
      var lext = [
      /* Length codes 257..285 extra */
      16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78];
      var dbase = [
      /* Distance codes 0..29 base */
      1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577, 0, 0];
      var dext = [
      /* Distance codes 0..29 extra */
      16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 64, 64];

      module.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts) {
        var bits = opts.bits; //here = opts.here; /* table entry for duplication */

        var len = 0;
        /* a code's length in bits */

        var sym = 0;
        /* index of code symbols */

        var min = 0,
            max = 0;
        /* minimum and maximum code lengths */

        var root = 0;
        /* number of index bits for root table */

        var curr = 0;
        /* number of index bits for current table */

        var drop = 0;
        /* code bits to drop for sub-table */

        var left = 0;
        /* number of prefix codes available */

        var used = 0;
        /* code entries in table used */

        var huff = 0;
        /* Huffman code */

        var incr;
        /* for incrementing code, index */

        var fill;
        /* index for replicating entries */

        var low;
        /* low bits for current root entry */

        var mask;
        /* mask for low root bits */

        var next;
        /* next available space in table */

        var base = null;
        /* base value table to use */

        var base_index = 0; //  var shoextra;    /* extra bits table to use */

        var end;
        /* use base and extra for symbol > end */

        var count = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */

        var offs = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */

        var extra = null;
        var extra_index = 0;
        var here_bits, here_op, here_val;
        /*
         Process a set of code lengths to create a canonical Huffman code.  The
         code lengths are lens[0..codes-1].  Each length corresponds to the
         symbols 0..codes-1.  The Huffman code is generated by first sorting the
         symbols by length from short to long, and retaining the symbol order
         for codes with equal lengths.  Then the code starts with all zero bits
         for the first code of the shortest length, and the codes are integer
         increments for the same length, and zeros are appended as the length
         increases.  For the deflate format, these bits are stored backwards
         from their more natural integer increment ordering, and so when the
         decoding tables are built in the large loop below, the integer codes
         are incremented backwards.
           This routine assumes, but does not check, that all of the entries in
         lens[] are in the range 0..MAXBITS.  The caller must assure this.
         1..MAXBITS is interpreted as that code length.  zero means that that
         symbol does not occur in this code.
           The codes are sorted by computing a count of codes for each length,
         creating from that a table of starting indices for each length in the
         sorted table, and then entering the symbols in order in the sorted
         table.  The sorted table is work[], with that space being provided by
         the caller.
           The length counts are used for other purposes as well, i.e. finding
         the minimum and maximum length codes, determining if there are any
         codes at all, checking for a valid set of lengths, and looking ahead
         at length counts to determine sub-table sizes when building the
         decoding tables.
         */

        /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */

        for (len = 0; len <= MAXBITS; len++) {
          count[len] = 0;
        }

        for (sym = 0; sym < codes; sym++) {
          count[lens[lens_index + sym]]++;
        }
        /* bound code lengths, force root to be within code lengths */


        root = bits;

        for (max = MAXBITS; max >= 1; max--) {
          if (count[max] !== 0) {
            break;
          }
        }

        if (root > max) {
          root = max;
        }

        if (max === 0) {
          /* no symbols to code at all */
          //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
          //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
          //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
          table[table_index++] = 1 << 24 | 64 << 16 | 0; //table.op[opts.table_index] = 64;
          //table.bits[opts.table_index] = 1;
          //table.val[opts.table_index++] = 0;

          table[table_index++] = 1 << 24 | 64 << 16 | 0;
          opts.bits = 1;
          return 0;
          /* no symbols, but wait for decoding to report error */
        }

        for (min = 1; min < max; min++) {
          if (count[min] !== 0) {
            break;
          }
        }

        if (root < min) {
          root = min;
        }
        /* check for an over-subscribed or incomplete set of lengths */


        left = 1;

        for (len = 1; len <= MAXBITS; len++) {
          left <<= 1;
          left -= count[len];

          if (left < 0) {
            return -1;
          }
          /* over-subscribed */

        }

        if (left > 0 && (type === CODES || max !== 1)) {
          return -1;
          /* incomplete set */
        }
        /* generate offsets into symbol table for each length for sorting */


        offs[1] = 0;

        for (len = 1; len < MAXBITS; len++) {
          offs[len + 1] = offs[len] + count[len];
        }
        /* sort symbols by length, by symbol order within each length */


        for (sym = 0; sym < codes; sym++) {
          if (lens[lens_index + sym] !== 0) {
            work[offs[lens[lens_index + sym]]++] = sym;
          }
        }
        /*
         Create and fill in decoding tables.  In this loop, the table being
         filled is at next and has curr index bits.  The code being used is huff
         with length len.  That code is converted to an index by dropping drop
         bits off of the bottom.  For codes where len is less than drop + curr,
         those top drop + curr - len bits are incremented through all values to
         fill the table with replicated entries.
           root is the number of index bits for the root table.  When len exceeds
         root, sub-tables are created pointed to by the root entry with an index
         of the low root bits of huff.  This is saved in low to check for when a
         new sub-table should be started.  drop is zero when the root table is
         being filled, and drop is root when sub-tables are being filled.
           When a new sub-table is needed, it is necessary to look ahead in the
         code lengths to determine what size sub-table is needed.  The length
         counts are used for this, and so count[] is decremented as codes are
         entered in the tables.
           used keeps track of how many table entries have been allocated from the
         provided *table space.  It is checked for LENS and DIST tables against
         the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
         the initial root table size constants.  See the comments in inftrees.h
         for more information.
           sym increments through all symbols, and the loop terminates when
         all codes of length max, i.e. all codes, have been processed.  This
         routine permits incomplete codes, so another loop after this one fills
         in the rest of the decoding tables with invalid code markers.
         */

        /* set up for code type */
        // poor man optimization - use if-else instead of switch,
        // to avoid deopts in old v8


        if (type === CODES) {
          base = extra = work;
          /* dummy value--not used */

          end = 19;
        } else if (type === LENS) {
          base = lbase;
          base_index -= 257;
          extra = lext;
          extra_index -= 257;
          end = 256;
        } else {
          /* DISTS */
          base = dbase;
          extra = dext;
          end = -1;
        }
        /* initialize opts for loop */


        huff = 0;
        /* starting code */

        sym = 0;
        /* starting code symbol */

        len = min;
        /* starting code length */

        next = table_index;
        /* current table to fill in */

        curr = root;
        /* current table index bits */

        drop = 0;
        /* current bits to drop from code for index */

        low = -1;
        /* trigger new sub-table when len > root */

        used = 1 << root;
        /* use root table entries */

        mask = used - 1;
        /* mask for comparing low */

        /* check available table space */

        if (type === LENS && used > ENOUGH_LENS || type === DISTS && used > ENOUGH_DISTS) {
          return 1;
        }
        /* process all codes and make table entries */


        for (;;) {
          /* create table entry */
          here_bits = len - drop;

          if (work[sym] < end) {
            here_op = 0;
            here_val = work[sym];
          } else if (work[sym] > end) {
            here_op = extra[extra_index + work[sym]];
            here_val = base[base_index + work[sym]];
          } else {
            here_op = 32 + 64;
            /* end of block */

            here_val = 0;
          }
          /* replicate for those indices with low len bits equal to huff */


          incr = 1 << len - drop;
          fill = 1 << curr;
          min = fill;
          /* save offset to next table */

          do {
            fill -= incr;
            table[next + (huff >> drop) + fill] = here_bits << 24 | here_op << 16 | here_val | 0;
          } while (fill !== 0);
          /* backwards increment the len-bit code huff */


          incr = 1 << len - 1;

          while (huff & incr) {
            incr >>= 1;
          }

          if (incr !== 0) {
            huff &= incr - 1;
            huff += incr;
          } else {
            huff = 0;
          }
          /* go to next symbol, update count, len */


          sym++;

          if (--count[len] === 0) {
            if (len === max) {
              break;
            }

            len = lens[lens_index + work[sym]];
          }
          /* create new sub-table if needed */


          if (len > root && (huff & mask) !== low) {
            /* if first time, transition to sub-tables */
            if (drop === 0) {
              drop = root;
            }
            /* increment past last table */


            next += min;
            /* here min is 1 << curr */

            /* determine length of next table */

            curr = len - drop;
            left = 1 << curr;

            while (curr + drop < max) {
              left -= count[curr + drop];

              if (left <= 0) {
                break;
              }

              curr++;
              left <<= 1;
            }
            /* check for enough space */


            used += 1 << curr;

            if (type === LENS && used > ENOUGH_LENS || type === DISTS && used > ENOUGH_DISTS) {
              return 1;
            }
            /* point entry in root table to sub-table */


            low = huff & mask;
            /*table.op[low] = curr;
            table.bits[low] = root;
            table.val[low] = next - opts.table_index;*/

            table[low] = root << 24 | curr << 16 | next - table_index | 0;
          }
        }
        /* fill in remaining table entry if code is incomplete (guaranteed to have
         at most one remaining entry, since if the code is incomplete, the
         maximum code length that was allowed to get this far is one bit) */


        if (huff !== 0) {
          //table.op[next + huff] = 64;            /* invalid code marker */
          //table.bits[next + huff] = len - drop;
          //table.val[next + huff] = 0;
          table[next + huff] = len - drop << 24 | 64 << 16 | 0;
        }
        /* set return parameters */
        //opts.table_index += used;


        opts.bits = root;
        return 0;
      };
      /***/

    },
    /* 361 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict"; // (C) 1995-2013 Jean-loup Gailly and Mark Adler
      // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
      //
      // This software is provided 'as-is', without any express or implied
      // warranty. In no event will the authors be held liable for any damages
      // arising from the use of this software.
      //
      // Permission is granted to anyone to use this software for any purpose,
      // including commercial applications, and to alter it and redistribute it
      // freely, subject to the following restrictions:
      //
      // 1. The origin of this software must not be misrepresented; you must not
      //   claim that you wrote the original software. If you use this software
      //   in a product, an acknowledgment in the product documentation would be
      //   appreciated but is not required.
      // 2. Altered source versions must be plainly marked as such, and must not be
      //   misrepresented as being the original software.
      // 3. This notice may not be removed or altered from any source distribution.

      module.exports = {
        /* Allowed flush values; see deflate() and inflate() below for details */
        Z_NO_FLUSH: 0,
        Z_PARTIAL_FLUSH: 1,
        Z_SYNC_FLUSH: 2,
        Z_FULL_FLUSH: 3,
        Z_FINISH: 4,
        Z_BLOCK: 5,
        Z_TREES: 6,

        /* Return codes for the compression/decompression functions. Negative values
        * are errors, positive values are used for special but normal events.
        */
        Z_OK: 0,
        Z_STREAM_END: 1,
        Z_NEED_DICT: 2,
        Z_ERRNO: -1,
        Z_STREAM_ERROR: -2,
        Z_DATA_ERROR: -3,
        //Z_MEM_ERROR:     -4,
        Z_BUF_ERROR: -5,
        //Z_VERSION_ERROR: -6,

        /* compression levels */
        Z_NO_COMPRESSION: 0,
        Z_BEST_SPEED: 1,
        Z_BEST_COMPRESSION: 9,
        Z_DEFAULT_COMPRESSION: -1,
        Z_FILTERED: 1,
        Z_HUFFMAN_ONLY: 2,
        Z_RLE: 3,
        Z_FIXED: 4,
        Z_DEFAULT_STRATEGY: 0,

        /* Possible values of the data_type field (though see inflate()) */
        Z_BINARY: 0,
        Z_TEXT: 1,
        //Z_ASCII:                1, // = Z_TEXT (deprecated)
        Z_UNKNOWN: 2,

        /* The deflate compression method */
        Z_DEFLATED: 8 //Z_NULL:                 null // Use -1 or null inline, depending on var type

      };
      /***/
    },
    /* 362 */

    /***/
    function (module, exports, __webpack_require__) {
      ;

      (function (root, factory, undef) {
        if (true) {
          // CommonJS
          module.exports = exports = factory(__webpack_require__(2), __webpack_require__(127), __webpack_require__(363), __webpack_require__(364), __webpack_require__(87), __webpack_require__(88), __webpack_require__(167), __webpack_require__(248), __webpack_require__(365), __webpack_require__(249), __webpack_require__(366), __webpack_require__(367), __webpack_require__(368), __webpack_require__(168), __webpack_require__(369), __webpack_require__(49), __webpack_require__(12), __webpack_require__(370), __webpack_require__(371), __webpack_require__(372), __webpack_require__(373), __webpack_require__(374), __webpack_require__(375), __webpack_require__(376), __webpack_require__(377), __webpack_require__(378), __webpack_require__(379), __webpack_require__(380), __webpack_require__(381), __webpack_require__(382), __webpack_require__(383), __webpack_require__(384), __webpack_require__(385));
        } else {}
      })(this, function (CryptoJS) {
        return CryptoJS;
      });
      /***/

    },
    /* 363 */

    /***/
    function (module, exports, __webpack_require__) {
      ;

      (function (root, factory) {
        if (true) {
          // CommonJS
          module.exports = exports = factory(__webpack_require__(2));
        } else {}
      })(this, function (CryptoJS) {
        (function () {
          // Check if typed arrays are supported
          if (typeof ArrayBuffer != 'function') {
            return;
          } // Shortcuts


          var C = CryptoJS;
          var C_lib = C.lib;
          var WordArray = C_lib.WordArray; // Reference original init

          var superInit = WordArray.init; // Augment WordArray.init to handle typed arrays

          var subInit = WordArray.init = function (typedArray) {
            // Convert buffers to uint8
            if (typedArray instanceof ArrayBuffer) {
              typedArray = new Uint8Array(typedArray);
            } // Convert other array views to uint8


            if (typedArray instanceof Int8Array || typeof Uint8ClampedArray !== "undefined" && typedArray instanceof Uint8ClampedArray || typedArray instanceof Int16Array || typedArray instanceof Uint16Array || typedArray instanceof Int32Array || typedArray instanceof Uint32Array || typedArray instanceof Float32Array || typedArray instanceof Float64Array) {
              typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);
            } // Handle Uint8Array


            if (typedArray instanceof Uint8Array) {
              // Shortcut
              var typedArrayByteLength = typedArray.byteLength; // Extract bytes

              var words = [];

              for (var i = 0; i < typedArrayByteLength; i++) {
                words[i >>> 2] |= typedArray[i] << 24 - i % 4 * 8;
              } // Initialize this word array


              superInit.call(this, words, typedArrayByteLength);
            } else {
              // Else call normal init
              superInit.apply(this, arguments);
            }
          };

          subInit.prototype = WordArray;
        })();

        return CryptoJS.lib.WordArray;
      });
      /***/

    },
    /* 364 */

    /***/
    function (module, exports, __webpack_require__) {
      ;

      (function (root, factory) {
        if (true) {
          // CommonJS
          module.exports = exports = factory(__webpack_require__(2));
        } else {}
      })(this, function (CryptoJS) {
        (function () {
          // Shortcuts
          var C = CryptoJS;
          var C_lib = C.lib;
          var WordArray = C_lib.WordArray;
          var C_enc = C.enc;
          /**
           * UTF-16 BE encoding strategy.
           */

          var Utf16BE = C_enc.Utf16 = C_enc.Utf16BE = {
            /**
             * Converts a word array to a UTF-16 BE string.
             *
             * @param {WordArray} wordArray The word array.
             *
             * @return {string} The UTF-16 BE string.
             *
             * @static
             *
             * @example
             *
             *     var utf16String = CryptoJS.enc.Utf16.stringify(wordArray);
             */
            stringify: function stringify(wordArray) {
              // Shortcuts
              var words = wordArray.words;
              var sigBytes = wordArray.sigBytes; // Convert

              var utf16Chars = [];

              for (var i = 0; i < sigBytes; i += 2) {
                var codePoint = words[i >>> 2] >>> 16 - i % 4 * 8 & 0xffff;
                utf16Chars.push(String.fromCharCode(codePoint));
              }

              return utf16Chars.join('');
            },

            /**
             * Converts a UTF-16 BE string to a word array.
             *
             * @param {string} utf16Str The UTF-16 BE string.
             *
             * @return {WordArray} The word array.
             *
             * @static
             *
             * @example
             *
             *     var wordArray = CryptoJS.enc.Utf16.parse(utf16String);
             */
            parse: function parse(utf16Str) {
              // Shortcut
              var utf16StrLength = utf16Str.length; // Convert

              var words = [];

              for (var i = 0; i < utf16StrLength; i++) {
                words[i >>> 1] |= utf16Str.charCodeAt(i) << 16 - i % 2 * 16;
              }

              return WordArray.create(words, utf16StrLength * 2);
            }
          };
          /**
           * UTF-16 LE encoding strategy.
           */

          C_enc.Utf16LE = {
            /**
             * Converts a word array to a UTF-16 LE string.
             *
             * @param {WordArray} wordArray The word array.
             *
             * @return {string} The UTF-16 LE string.
             *
             * @static
             *
             * @example
             *
             *     var utf16Str = CryptoJS.enc.Utf16LE.stringify(wordArray);
             */
            stringify: function stringify(wordArray) {
              // Shortcuts
              var words = wordArray.words;
              var sigBytes = wordArray.sigBytes; // Convert

              var utf16Chars = [];

              for (var i = 0; i < sigBytes; i += 2) {
                var codePoint = swapEndian(words[i >>> 2] >>> 16 - i % 4 * 8 & 0xffff);
                utf16Chars.push(String.fromCharCode(codePoint));
              }

              return utf16Chars.join('');
            },

            /**
             * Converts a UTF-16 LE string to a word array.
             *
             * @param {string} utf16Str The UTF-16 LE string.
             *
             * @return {WordArray} The word array.
             *
             * @static
             *
             * @example
             *
             *     var wordArray = CryptoJS.enc.Utf16LE.parse(utf16Str);
             */
            parse: function parse(utf16Str) {
              // Shortcut
              var utf16StrLength = utf16Str.length; // Convert

              var words = [];

              for (var i = 0; i < utf16StrLength; i++) {
                words[i >>> 1] |= swapEndian(utf16Str.charCodeAt(i) << 16 - i % 2 * 16);
              }

              return WordArray.create(words, utf16StrLength * 2);
            }
          };

          function swapEndian(word) {
            return word << 8 & 0xff00ff00 | word >>> 8 & 0x00ff00ff;
          }
        })();

        return CryptoJS.enc.Utf16;
      });
      /***/

    },
    /* 365 */

    /***/
    function (module, exports, __webpack_require__) {
      ;

      (function (root, factory, undef) {
        if (true) {
          // CommonJS
          module.exports = exports = factory(__webpack_require__(2), __webpack_require__(248));
        } else {}
      })(this, function (CryptoJS) {
        (function () {
          // Shortcuts
          var C = CryptoJS;
          var C_lib = C.lib;
          var WordArray = C_lib.WordArray;
          var C_algo = C.algo;
          var SHA256 = C_algo.SHA256;
          /**
           * SHA-224 hash algorithm.
           */

          var SHA224 = C_algo.SHA224 = SHA256.extend({
            _doReset: function _doReset() {
              this._hash = new WordArray.init([0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939, 0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4]);
            },
            _doFinalize: function _doFinalize() {
              var hash = SHA256._doFinalize.call(this);

              hash.sigBytes -= 4;
              return hash;
            }
          });
          /**
           * Shortcut function to the hasher's object interface.
           *
           * @param {WordArray|string} message The message to hash.
           *
           * @return {WordArray} The hash.
           *
           * @static
           *
           * @example
           *
           *     var hash = CryptoJS.SHA224('message');
           *     var hash = CryptoJS.SHA224(wordArray);
           */

          C.SHA224 = SHA256._createHelper(SHA224);
          /**
           * Shortcut function to the HMAC's object interface.
           *
           * @param {WordArray|string} message The message to hash.
           * @param {WordArray|string} key The secret key.
           *
           * @return {WordArray} The HMAC.
           *
           * @static
           *
           * @example
           *
           *     var hmac = CryptoJS.HmacSHA224(message, key);
           */

          C.HmacSHA224 = SHA256._createHmacHelper(SHA224);
        })();

        return CryptoJS.SHA224;
      });
      /***/

    },
    /* 366 */

    /***/
    function (module, exports, __webpack_require__) {
      ;

      (function (root, factory, undef) {
        if (true) {
          // CommonJS
          module.exports = exports = factory(__webpack_require__(2), __webpack_require__(127), __webpack_require__(249));
        } else {}
      })(this, function (CryptoJS) {
        (function () {
          // Shortcuts
          var C = CryptoJS;
          var C_x64 = C.x64;
          var X64Word = C_x64.Word;
          var X64WordArray = C_x64.WordArray;
          var C_algo = C.algo;
          var SHA512 = C_algo.SHA512;
          /**
           * SHA-384 hash algorithm.
           */

          var SHA384 = C_algo.SHA384 = SHA512.extend({
            _doReset: function _doReset() {
              this._hash = new X64WordArray.init([new X64Word.init(0xcbbb9d5d, 0xc1059ed8), new X64Word.init(0x629a292a, 0x367cd507), new X64Word.init(0x9159015a, 0x3070dd17), new X64Word.init(0x152fecd8, 0xf70e5939), new X64Word.init(0x67332667, 0xffc00b31), new X64Word.init(0x8eb44a87, 0x68581511), new X64Word.init(0xdb0c2e0d, 0x64f98fa7), new X64Word.init(0x47b5481d, 0xbefa4fa4)]);
            },
            _doFinalize: function _doFinalize() {
              var hash = SHA512._doFinalize.call(this);

              hash.sigBytes -= 16;
              return hash;
            }
          });
          /**
           * Shortcut function to the hasher's object interface.
           *
           * @param {WordArray|string} message The message to hash.
           *
           * @return {WordArray} The hash.
           *
           * @static
           *
           * @example
           *
           *     var hash = CryptoJS.SHA384('message');
           *     var hash = CryptoJS.SHA384(wordArray);
           */

          C.SHA384 = SHA512._createHelper(SHA384);
          /**
           * Shortcut function to the HMAC's object interface.
           *
           * @param {WordArray|string} message The message to hash.
           * @param {WordArray|string} key The secret key.
           *
           * @return {WordArray} The HMAC.
           *
           * @static
           *
           * @example
           *
           *     var hmac = CryptoJS.HmacSHA384(message, key);
           */

          C.HmacSHA384 = SHA512._createHmacHelper(SHA384);
        })();

        return CryptoJS.SHA384;
      });
      /***/

    },
    /* 367 */

    /***/
    function (module, exports, __webpack_require__) {
      ;

      (function (root, factory, undef) {
        if (true) {
          // CommonJS
          module.exports = exports = factory(__webpack_require__(2), __webpack_require__(127));
        } else {}
      })(this, function (CryptoJS) {
        (function (Math) {
          // Shortcuts
          var C = CryptoJS;
          var C_lib = C.lib;
          var WordArray = C_lib.WordArray;
          var Hasher = C_lib.Hasher;
          var C_x64 = C.x64;
          var X64Word = C_x64.Word;
          var C_algo = C.algo; // Constants tables

          var RHO_OFFSETS = [];
          var PI_INDEXES = [];
          var ROUND_CONSTANTS = []; // Compute Constants

          (function () {
            // Compute rho offset constants
            var x = 1,
                y = 0;

            for (var t = 0; t < 24; t++) {
              RHO_OFFSETS[x + 5 * y] = (t + 1) * (t + 2) / 2 % 64;
              var newX = y % 5;
              var newY = (2 * x + 3 * y) % 5;
              x = newX;
              y = newY;
            } // Compute pi index constants


            for (var x = 0; x < 5; x++) {
              for (var y = 0; y < 5; y++) {
                PI_INDEXES[x + 5 * y] = y + (2 * x + 3 * y) % 5 * 5;
              }
            } // Compute round constants


            var LFSR = 0x01;

            for (var i = 0; i < 24; i++) {
              var roundConstantMsw = 0;
              var roundConstantLsw = 0;

              for (var j = 0; j < 7; j++) {
                if (LFSR & 0x01) {
                  var bitPosition = (1 << j) - 1;

                  if (bitPosition < 32) {
                    roundConstantLsw ^= 1 << bitPosition;
                  } else
                    /* if (bitPosition >= 32) */
                    {
                      roundConstantMsw ^= 1 << bitPosition - 32;
                    }
                } // Compute next LFSR


                if (LFSR & 0x80) {
                  // Primitive polynomial over GF(2): x^8 + x^6 + x^5 + x^4 + 1
                  LFSR = LFSR << 1 ^ 0x71;
                } else {
                  LFSR <<= 1;
                }
              }

              ROUND_CONSTANTS[i] = X64Word.create(roundConstantMsw, roundConstantLsw);
            }
          })(); // Reusable objects for temporary values


          var T = [];

          (function () {
            for (var i = 0; i < 25; i++) {
              T[i] = X64Word.create();
            }
          })();
          /**
           * SHA-3 hash algorithm.
           */


          var SHA3 = C_algo.SHA3 = Hasher.extend({
            /**
             * Configuration options.
             *
             * @property {number} outputLength
             *   The desired number of bits in the output hash.
             *   Only values permitted are: 224, 256, 384, 512.
             *   Default: 512
             */
            cfg: Hasher.cfg.extend({
              outputLength: 512
            }),
            _doReset: function _doReset() {
              var state = this._state = [];

              for (var i = 0; i < 25; i++) {
                state[i] = new X64Word.init();
              }

              this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;
            },
            _doProcessBlock: function _doProcessBlock(M, offset) {
              // Shortcuts
              var state = this._state;
              var nBlockSizeLanes = this.blockSize / 2; // Absorb

              for (var i = 0; i < nBlockSizeLanes; i++) {
                // Shortcuts
                var M2i = M[offset + 2 * i];
                var M2i1 = M[offset + 2 * i + 1]; // Swap endian

                M2i = (M2i << 8 | M2i >>> 24) & 0x00ff00ff | (M2i << 24 | M2i >>> 8) & 0xff00ff00;
                M2i1 = (M2i1 << 8 | M2i1 >>> 24) & 0x00ff00ff | (M2i1 << 24 | M2i1 >>> 8) & 0xff00ff00; // Absorb message into state

                var lane = state[i];
                lane.high ^= M2i1;
                lane.low ^= M2i;
              } // Rounds


              for (var round = 0; round < 24; round++) {
                // Theta
                for (var x = 0; x < 5; x++) {
                  // Mix column lanes
                  var tMsw = 0,
                      tLsw = 0;

                  for (var y = 0; y < 5; y++) {
                    var lane = state[x + 5 * y];
                    tMsw ^= lane.high;
                    tLsw ^= lane.low;
                  } // Temporary values


                  var Tx = T[x];
                  Tx.high = tMsw;
                  Tx.low = tLsw;
                }

                for (var x = 0; x < 5; x++) {
                  // Shortcuts
                  var Tx4 = T[(x + 4) % 5];
                  var Tx1 = T[(x + 1) % 5];
                  var Tx1Msw = Tx1.high;
                  var Tx1Lsw = Tx1.low; // Mix surrounding columns

                  var tMsw = Tx4.high ^ (Tx1Msw << 1 | Tx1Lsw >>> 31);
                  var tLsw = Tx4.low ^ (Tx1Lsw << 1 | Tx1Msw >>> 31);

                  for (var y = 0; y < 5; y++) {
                    var lane = state[x + 5 * y];
                    lane.high ^= tMsw;
                    lane.low ^= tLsw;
                  }
                } // Rho Pi


                for (var laneIndex = 1; laneIndex < 25; laneIndex++) {
                  // Shortcuts
                  var lane = state[laneIndex];
                  var laneMsw = lane.high;
                  var laneLsw = lane.low;
                  var rhoOffset = RHO_OFFSETS[laneIndex]; // Rotate lanes

                  if (rhoOffset < 32) {
                    var tMsw = laneMsw << rhoOffset | laneLsw >>> 32 - rhoOffset;
                    var tLsw = laneLsw << rhoOffset | laneMsw >>> 32 - rhoOffset;
                  } else
                    /* if (rhoOffset >= 32) */
                    {
                      var tMsw = laneLsw << rhoOffset - 32 | laneMsw >>> 64 - rhoOffset;
                      var tLsw = laneMsw << rhoOffset - 32 | laneLsw >>> 64 - rhoOffset;
                    } // Transpose lanes


                  var TPiLane = T[PI_INDEXES[laneIndex]];
                  TPiLane.high = tMsw;
                  TPiLane.low = tLsw;
                } // Rho pi at x = y = 0


                var T0 = T[0];
                var state0 = state[0];
                T0.high = state0.high;
                T0.low = state0.low; // Chi

                for (var x = 0; x < 5; x++) {
                  for (var y = 0; y < 5; y++) {
                    // Shortcuts
                    var laneIndex = x + 5 * y;
                    var lane = state[laneIndex];
                    var TLane = T[laneIndex];
                    var Tx1Lane = T[(x + 1) % 5 + 5 * y];
                    var Tx2Lane = T[(x + 2) % 5 + 5 * y]; // Mix rows

                    lane.high = TLane.high ^ ~Tx1Lane.high & Tx2Lane.high;
                    lane.low = TLane.low ^ ~Tx1Lane.low & Tx2Lane.low;
                  }
                } // Iota


                var lane = state[0];
                var roundConstant = ROUND_CONSTANTS[round];
                lane.high ^= roundConstant.high;
                lane.low ^= roundConstant.low;
                ;
              }
            },
            _doFinalize: function _doFinalize() {
              // Shortcuts
              var data = this._data;
              var dataWords = data.words;
              var nBitsTotal = this._nDataBytes * 8;
              var nBitsLeft = data.sigBytes * 8;
              var blockSizeBits = this.blockSize * 32; // Add padding

              dataWords[nBitsLeft >>> 5] |= 0x1 << 24 - nBitsLeft % 32;
              dataWords[(Math.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits >>> 5) - 1] |= 0x80;
              data.sigBytes = dataWords.length * 4; // Hash final blocks

              this._process(); // Shortcuts


              var state = this._state;
              var outputLengthBytes = this.cfg.outputLength / 8;
              var outputLengthLanes = outputLengthBytes / 8; // Squeeze

              var hashWords = [];

              for (var i = 0; i < outputLengthLanes; i++) {
                // Shortcuts
                var lane = state[i];
                var laneMsw = lane.high;
                var laneLsw = lane.low; // Swap endian

                laneMsw = (laneMsw << 8 | laneMsw >>> 24) & 0x00ff00ff | (laneMsw << 24 | laneMsw >>> 8) & 0xff00ff00;
                laneLsw = (laneLsw << 8 | laneLsw >>> 24) & 0x00ff00ff | (laneLsw << 24 | laneLsw >>> 8) & 0xff00ff00; // Squeeze state to retrieve hash

                hashWords.push(laneLsw);
                hashWords.push(laneMsw);
              } // Return final computed hash


              return new WordArray.init(hashWords, outputLengthBytes);
            },
            clone: function clone() {
              var clone = Hasher.clone.call(this);

              var state = clone._state = this._state.slice(0);

              for (var i = 0; i < 25; i++) {
                state[i] = state[i].clone();
              }

              return clone;
            }
          });
          /**
           * Shortcut function to the hasher's object interface.
           *
           * @param {WordArray|string} message The message to hash.
           *
           * @return {WordArray} The hash.
           *
           * @static
           *
           * @example
           *
           *     var hash = CryptoJS.SHA3('message');
           *     var hash = CryptoJS.SHA3(wordArray);
           */

          C.SHA3 = Hasher._createHelper(SHA3);
          /**
           * Shortcut function to the HMAC's object interface.
           *
           * @param {WordArray|string} message The message to hash.
           * @param {WordArray|string} key The secret key.
           *
           * @return {WordArray} The HMAC.
           *
           * @static
           *
           * @example
           *
           *     var hmac = CryptoJS.HmacSHA3(message, key);
           */

          C.HmacSHA3 = Hasher._createHmacHelper(SHA3);
        })(Math);

        return CryptoJS.SHA3;
      });
      /***/

    },
    /* 368 */

    /***/
    function (module, exports, __webpack_require__) {
      ;

      (function (root, factory) {
        if (true) {
          // CommonJS
          module.exports = exports = factory(__webpack_require__(2));
        } else {}
      })(this, function (CryptoJS) {
        /** @preserve
        (c) 2012 by Cédric Mesnil. All rights reserved.
        
        Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
        
            - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
            - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
        
        THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        */
        (function (Math) {
          // Shortcuts
          var C = CryptoJS;
          var C_lib = C.lib;
          var WordArray = C_lib.WordArray;
          var Hasher = C_lib.Hasher;
          var C_algo = C.algo; // Constants table

          var _zl = WordArray.create([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13]);

          var _zr = WordArray.create([5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11]);

          var _sl = WordArray.create([11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6]);

          var _sr = WordArray.create([8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11]);

          var _hl = WordArray.create([0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E]);

          var _hr = WordArray.create([0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000]);
          /**
           * RIPEMD160 hash algorithm.
           */


          var RIPEMD160 = C_algo.RIPEMD160 = Hasher.extend({
            _doReset: function _doReset() {
              this._hash = WordArray.create([0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0]);
            },
            _doProcessBlock: function _doProcessBlock(M, offset) {
              // Swap endian
              for (var i = 0; i < 16; i++) {
                // Shortcuts
                var offset_i = offset + i;
                var M_offset_i = M[offset_i]; // Swap

                M[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 0x00ff00ff | (M_offset_i << 24 | M_offset_i >>> 8) & 0xff00ff00;
              } // Shortcut


              var H = this._hash.words;
              var hl = _hl.words;
              var hr = _hr.words;
              var zl = _zl.words;
              var zr = _zr.words;
              var sl = _sl.words;
              var sr = _sr.words; // Working variables

              var al, bl, cl, dl, el;
              var ar, br, cr, dr, er;
              ar = al = H[0];
              br = bl = H[1];
              cr = cl = H[2];
              dr = dl = H[3];
              er = el = H[4]; // Computation

              var t;

              for (var i = 0; i < 80; i += 1) {
                t = al + M[offset + zl[i]] | 0;

                if (i < 16) {
                  t += f1(bl, cl, dl) + hl[0];
                } else if (i < 32) {
                  t += f2(bl, cl, dl) + hl[1];
                } else if (i < 48) {
                  t += f3(bl, cl, dl) + hl[2];
                } else if (i < 64) {
                  t += f4(bl, cl, dl) + hl[3];
                } else {
                  // if (i<80) {
                  t += f5(bl, cl, dl) + hl[4];
                }

                t = t | 0;
                t = rotl(t, sl[i]);
                t = t + el | 0;
                al = el;
                el = dl;
                dl = rotl(cl, 10);
                cl = bl;
                bl = t;
                t = ar + M[offset + zr[i]] | 0;

                if (i < 16) {
                  t += f5(br, cr, dr) + hr[0];
                } else if (i < 32) {
                  t += f4(br, cr, dr) + hr[1];
                } else if (i < 48) {
                  t += f3(br, cr, dr) + hr[2];
                } else if (i < 64) {
                  t += f2(br, cr, dr) + hr[3];
                } else {
                  // if (i<80) {
                  t += f1(br, cr, dr) + hr[4];
                }

                t = t | 0;
                t = rotl(t, sr[i]);
                t = t + er | 0;
                ar = er;
                er = dr;
                dr = rotl(cr, 10);
                cr = br;
                br = t;
              } // Intermediate hash value


              t = H[1] + cl + dr | 0;
              H[1] = H[2] + dl + er | 0;
              H[2] = H[3] + el + ar | 0;
              H[3] = H[4] + al + br | 0;
              H[4] = H[0] + bl + cr | 0;
              H[0] = t;
            },
            _doFinalize: function _doFinalize() {
              // Shortcuts
              var data = this._data;
              var dataWords = data.words;
              var nBitsTotal = this._nDataBytes * 8;
              var nBitsLeft = data.sigBytes * 8; // Add padding

              dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;
              dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotal << 8 | nBitsTotal >>> 24) & 0x00ff00ff | (nBitsTotal << 24 | nBitsTotal >>> 8) & 0xff00ff00;
              data.sigBytes = (dataWords.length + 1) * 4; // Hash final blocks

              this._process(); // Shortcuts


              var hash = this._hash;
              var H = hash.words; // Swap endian

              for (var i = 0; i < 5; i++) {
                // Shortcut
                var H_i = H[i]; // Swap

                H[i] = (H_i << 8 | H_i >>> 24) & 0x00ff00ff | (H_i << 24 | H_i >>> 8) & 0xff00ff00;
              } // Return final computed hash


              return hash;
            },
            clone: function clone() {
              var clone = Hasher.clone.call(this);
              clone._hash = this._hash.clone();
              return clone;
            }
          });

          function f1(x, y, z) {
            return x ^ y ^ z;
          }

          function f2(x, y, z) {
            return x & y | ~x & z;
          }

          function f3(x, y, z) {
            return (x | ~y) ^ z;
          }

          function f4(x, y, z) {
            return x & z | y & ~z;
          }

          function f5(x, y, z) {
            return x ^ (y | ~z);
          }

          function rotl(x, n) {
            return x << n | x >>> 32 - n;
          }
          /**
           * Shortcut function to the hasher's object interface.
           *
           * @param {WordArray|string} message The message to hash.
           *
           * @return {WordArray} The hash.
           *
           * @static
           *
           * @example
           *
           *     var hash = CryptoJS.RIPEMD160('message');
           *     var hash = CryptoJS.RIPEMD160(wordArray);
           */


          C.RIPEMD160 = Hasher._createHelper(RIPEMD160);
          /**
           * Shortcut function to the HMAC's object interface.
           *
           * @param {WordArray|string} message The message to hash.
           * @param {WordArray|string} key The secret key.
           *
           * @return {WordArray} The HMAC.
           *
           * @static
           *
           * @example
           *
           *     var hmac = CryptoJS.HmacRIPEMD160(message, key);
           */

          C.HmacRIPEMD160 = Hasher._createHmacHelper(RIPEMD160);
        })(Math);

        return CryptoJS.RIPEMD160;
      });
      /***/

    },
    /* 369 */

    /***/
    function (module, exports, __webpack_require__) {
      ;

      (function (root, factory, undef) {
        if (true) {
          // CommonJS
          module.exports = exports = factory(__webpack_require__(2), __webpack_require__(167), __webpack_require__(168));
        } else {}
      })(this, function (CryptoJS) {
        (function () {
          // Shortcuts
          var C = CryptoJS;
          var C_lib = C.lib;
          var Base = C_lib.Base;
          var WordArray = C_lib.WordArray;
          var C_algo = C.algo;
          var SHA1 = C_algo.SHA1;
          var HMAC = C_algo.HMAC;
          /**
           * Password-Based Key Derivation Function 2 algorithm.
           */

          var PBKDF2 = C_algo.PBKDF2 = Base.extend({
            /**
             * Configuration options.
             *
             * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
             * @property {Hasher} hasher The hasher to use. Default: SHA1
             * @property {number} iterations The number of iterations to perform. Default: 1
             */
            cfg: Base.extend({
              keySize: 128 / 32,
              hasher: SHA1,
              iterations: 1
            }),

            /**
             * Initializes a newly created key derivation function.
             *
             * @param {Object} cfg (Optional) The configuration options to use for the derivation.
             *
             * @example
             *
             *     var kdf = CryptoJS.algo.PBKDF2.create();
             *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });
             *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });
             */
            init: function init(cfg) {
              this.cfg = this.cfg.extend(cfg);
            },

            /**
             * Computes the Password-Based Key Derivation Function 2.
             *
             * @param {WordArray|string} password The password.
             * @param {WordArray|string} salt A salt.
             *
             * @return {WordArray} The derived key.
             *
             * @example
             *
             *     var key = kdf.compute(password, salt);
             */
            compute: function compute(password, salt) {
              // Shortcut
              var cfg = this.cfg; // Init HMAC

              var hmac = HMAC.create(cfg.hasher, password); // Initial values

              var derivedKey = WordArray.create();
              var blockIndex = WordArray.create([0x00000001]); // Shortcuts

              var derivedKeyWords = derivedKey.words;
              var blockIndexWords = blockIndex.words;
              var keySize = cfg.keySize;
              var iterations = cfg.iterations; // Generate key

              while (derivedKeyWords.length < keySize) {
                var block = hmac.update(salt).finalize(blockIndex);
                hmac.reset(); // Shortcuts

                var blockWords = block.words;
                var blockWordsLength = blockWords.length; // Iterations

                var intermediate = block;

                for (var i = 1; i < iterations; i++) {
                  intermediate = hmac.finalize(intermediate);
                  hmac.reset(); // Shortcut

                  var intermediateWords = intermediate.words; // XOR intermediate with block

                  for (var j = 0; j < blockWordsLength; j++) {
                    blockWords[j] ^= intermediateWords[j];
                  }
                }

                derivedKey.concat(block);
                blockIndexWords[0]++;
              }

              derivedKey.sigBytes = keySize * 4;
              return derivedKey;
            }
          });
          /**
           * Computes the Password-Based Key Derivation Function 2.
           *
           * @param {WordArray|string} password The password.
           * @param {WordArray|string} salt A salt.
           * @param {Object} cfg (Optional) The configuration options to use for this computation.
           *
           * @return {WordArray} The derived key.
           *
           * @static
           *
           * @example
           *
           *     var key = CryptoJS.PBKDF2(password, salt);
           *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8 });
           *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8, iterations: 1000 });
           */

          C.PBKDF2 = function (password, salt, cfg) {
            return PBKDF2.create(cfg).compute(password, salt);
          };
        })();

        return CryptoJS.PBKDF2;
      });
      /***/

    },
    /* 370 */

    /***/
    function (module, exports, __webpack_require__) {
      ;

      (function (root, factory, undef) {
        if (true) {
          // CommonJS
          module.exports = exports = factory(__webpack_require__(2), __webpack_require__(12));
        } else {}
      })(this, function (CryptoJS) {
        /**
         * Cipher Feedback block mode.
         */
        CryptoJS.mode.CFB = function () {
          var CFB = CryptoJS.lib.BlockCipherMode.extend();
          CFB.Encryptor = CFB.extend({
            processBlock: function processBlock(words, offset) {
              // Shortcuts
              var cipher = this._cipher;
              var blockSize = cipher.blockSize;
              generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher); // Remember this block to use with next block

              this._prevBlock = words.slice(offset, offset + blockSize);
            }
          });
          CFB.Decryptor = CFB.extend({
            processBlock: function processBlock(words, offset) {
              // Shortcuts
              var cipher = this._cipher;
              var blockSize = cipher.blockSize; // Remember this block to use with next block

              var thisBlock = words.slice(offset, offset + blockSize);
              generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher); // This block becomes the previous block

              this._prevBlock = thisBlock;
            }
          });

          function generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {
            // Shortcut
            var iv = this._iv; // Generate keystream

            if (iv) {
              var keystream = iv.slice(0); // Remove IV for subsequent blocks

              this._iv = undefined;
            } else {
              var keystream = this._prevBlock;
            }

            cipher.encryptBlock(keystream, 0); // Encrypt

            for (var i = 0; i < blockSize; i++) {
              words[offset + i] ^= keystream[i];
            }
          }

          return CFB;
        }();

        return CryptoJS.mode.CFB;
      });
      /***/

    },
    /* 371 */

    /***/
    function (module, exports, __webpack_require__) {
      ;

      (function (root, factory, undef) {
        if (true) {
          // CommonJS
          module.exports = exports = factory(__webpack_require__(2), __webpack_require__(12));
        } else {}
      })(this, function (CryptoJS) {
        /**
         * Counter block mode.
         */
        CryptoJS.mode.CTR = function () {
          var CTR = CryptoJS.lib.BlockCipherMode.extend();
          var Encryptor = CTR.Encryptor = CTR.extend({
            processBlock: function processBlock(words, offset) {
              // Shortcuts
              var cipher = this._cipher;
              var blockSize = cipher.blockSize;
              var iv = this._iv;
              var counter = this._counter; // Generate keystream

              if (iv) {
                counter = this._counter = iv.slice(0); // Remove IV for subsequent blocks

                this._iv = undefined;
              }

              var keystream = counter.slice(0);
              cipher.encryptBlock(keystream, 0); // Increment counter

              counter[blockSize - 1] = counter[blockSize - 1] + 1 | 0; // Encrypt

              for (var i = 0; i < blockSize; i++) {
                words[offset + i] ^= keystream[i];
              }
            }
          });
          CTR.Decryptor = Encryptor;
          return CTR;
        }();

        return CryptoJS.mode.CTR;
      });
      /***/

    },
    /* 372 */

    /***/
    function (module, exports, __webpack_require__) {
      ;

      (function (root, factory, undef) {
        if (true) {
          // CommonJS
          module.exports = exports = factory(__webpack_require__(2), __webpack_require__(12));
        } else {}
      })(this, function (CryptoJS) {
        /** @preserve
         * Counter block mode compatible with  Dr Brian Gladman fileenc.c
         * derived from CryptoJS.mode.CTR
         * Jan Hruby jhruby.web@gmail.com
         */
        CryptoJS.mode.CTRGladman = function () {
          var CTRGladman = CryptoJS.lib.BlockCipherMode.extend();

          function incWord(word) {
            if ((word >> 24 & 0xff) === 0xff) {
              //overflow
              var b1 = word >> 16 & 0xff;
              var b2 = word >> 8 & 0xff;
              var b3 = word & 0xff;

              if (b1 === 0xff) // overflow b1
                {
                  b1 = 0;

                  if (b2 === 0xff) {
                    b2 = 0;

                    if (b3 === 0xff) {
                      b3 = 0;
                    } else {
                      ++b3;
                    }
                  } else {
                    ++b2;
                  }
                } else {
                ++b1;
              }

              word = 0;
              word += b1 << 16;
              word += b2 << 8;
              word += b3;
            } else {
              word += 0x01 << 24;
            }

            return word;
          }

          function incCounter(counter) {
            if ((counter[0] = incWord(counter[0])) === 0) {
              // encr_data in fileenc.c from  Dr Brian Gladman's counts only with DWORD j < 8
              counter[1] = incWord(counter[1]);
            }

            return counter;
          }

          var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({
            processBlock: function processBlock(words, offset) {
              // Shortcuts
              var cipher = this._cipher;
              var blockSize = cipher.blockSize;
              var iv = this._iv;
              var counter = this._counter; // Generate keystream

              if (iv) {
                counter = this._counter = iv.slice(0); // Remove IV for subsequent blocks

                this._iv = undefined;
              }

              incCounter(counter);
              var keystream = counter.slice(0);
              cipher.encryptBlock(keystream, 0); // Encrypt

              for (var i = 0; i < blockSize; i++) {
                words[offset + i] ^= keystream[i];
              }
            }
          });
          CTRGladman.Decryptor = Encryptor;
          return CTRGladman;
        }();

        return CryptoJS.mode.CTRGladman;
      });
      /***/

    },
    /* 373 */

    /***/
    function (module, exports, __webpack_require__) {
      ;

      (function (root, factory, undef) {
        if (true) {
          // CommonJS
          module.exports = exports = factory(__webpack_require__(2), __webpack_require__(12));
        } else {}
      })(this, function (CryptoJS) {
        /**
         * Output Feedback block mode.
         */
        CryptoJS.mode.OFB = function () {
          var OFB = CryptoJS.lib.BlockCipherMode.extend();
          var Encryptor = OFB.Encryptor = OFB.extend({
            processBlock: function processBlock(words, offset) {
              // Shortcuts
              var cipher = this._cipher;
              var blockSize = cipher.blockSize;
              var iv = this._iv;
              var keystream = this._keystream; // Generate keystream

              if (iv) {
                keystream = this._keystream = iv.slice(0); // Remove IV for subsequent blocks

                this._iv = undefined;
              }

              cipher.encryptBlock(keystream, 0); // Encrypt

              for (var i = 0; i < blockSize; i++) {
                words[offset + i] ^= keystream[i];
              }
            }
          });
          OFB.Decryptor = Encryptor;
          return OFB;
        }();

        return CryptoJS.mode.OFB;
      });
      /***/

    },
    /* 374 */

    /***/
    function (module, exports, __webpack_require__) {
      ;

      (function (root, factory, undef) {
        if (true) {
          // CommonJS
          module.exports = exports = factory(__webpack_require__(2), __webpack_require__(12));
        } else {}
      })(this, function (CryptoJS) {
        /**
         * Electronic Codebook block mode.
         */
        CryptoJS.mode.ECB = function () {
          var ECB = CryptoJS.lib.BlockCipherMode.extend();
          ECB.Encryptor = ECB.extend({
            processBlock: function processBlock(words, offset) {
              this._cipher.encryptBlock(words, offset);
            }
          });
          ECB.Decryptor = ECB.extend({
            processBlock: function processBlock(words, offset) {
              this._cipher.decryptBlock(words, offset);
            }
          });
          return ECB;
        }();

        return CryptoJS.mode.ECB;
      });
      /***/

    },
    /* 375 */

    /***/
    function (module, exports, __webpack_require__) {
      ;

      (function (root, factory, undef) {
        if (true) {
          // CommonJS
          module.exports = exports = factory(__webpack_require__(2), __webpack_require__(12));
        } else {}
      })(this, function (CryptoJS) {
        /**
         * ANSI X.923 padding strategy.
         */
        CryptoJS.pad.AnsiX923 = {
          pad: function pad(data, blockSize) {
            // Shortcuts
            var dataSigBytes = data.sigBytes;
            var blockSizeBytes = blockSize * 4; // Count padding bytes

            var nPaddingBytes = blockSizeBytes - dataSigBytes % blockSizeBytes; // Compute last byte position

            var lastBytePos = dataSigBytes + nPaddingBytes - 1; // Pad

            data.clamp();
            data.words[lastBytePos >>> 2] |= nPaddingBytes << 24 - lastBytePos % 4 * 8;
            data.sigBytes += nPaddingBytes;
          },
          unpad: function unpad(data) {
            // Get number of padding bytes from last byte
            var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 0xff; // Remove padding

            data.sigBytes -= nPaddingBytes;
          }
        };
        return CryptoJS.pad.Ansix923;
      });
      /***/

    },
    /* 376 */

    /***/
    function (module, exports, __webpack_require__) {
      ;

      (function (root, factory, undef) {
        if (true) {
          // CommonJS
          module.exports = exports = factory(__webpack_require__(2), __webpack_require__(12));
        } else {}
      })(this, function (CryptoJS) {
        /**
         * ISO 10126 padding strategy.
         */
        CryptoJS.pad.Iso10126 = {
          pad: function pad(data, blockSize) {
            // Shortcut
            var blockSizeBytes = blockSize * 4; // Count padding bytes

            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes; // Pad

            data.concat(CryptoJS.lib.WordArray.random(nPaddingBytes - 1)).concat(CryptoJS.lib.WordArray.create([nPaddingBytes << 24], 1));
          },
          unpad: function unpad(data) {
            // Get number of padding bytes from last byte
            var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 0xff; // Remove padding

            data.sigBytes -= nPaddingBytes;
          }
        };
        return CryptoJS.pad.Iso10126;
      });
      /***/

    },
    /* 377 */

    /***/
    function (module, exports, __webpack_require__) {
      ;

      (function (root, factory, undef) {
        if (true) {
          // CommonJS
          module.exports = exports = factory(__webpack_require__(2), __webpack_require__(12));
        } else {}
      })(this, function (CryptoJS) {
        /**
         * ISO/IEC 9797-1 Padding Method 2.
         */
        CryptoJS.pad.Iso97971 = {
          pad: function pad(data, blockSize) {
            // Add 0x80 byte
            data.concat(CryptoJS.lib.WordArray.create([0x80000000], 1)); // Zero pad the rest

            CryptoJS.pad.ZeroPadding.pad(data, blockSize);
          },
          unpad: function unpad(data) {
            // Remove zero padding
            CryptoJS.pad.ZeroPadding.unpad(data); // Remove one more byte -- the 0x80 byte

            data.sigBytes--;
          }
        };
        return CryptoJS.pad.Iso97971;
      });
      /***/

    },
    /* 378 */

    /***/
    function (module, exports, __webpack_require__) {
      ;

      (function (root, factory, undef) {
        if (true) {
          // CommonJS
          module.exports = exports = factory(__webpack_require__(2), __webpack_require__(12));
        } else {}
      })(this, function (CryptoJS) {
        /**
         * Zero padding strategy.
         */
        CryptoJS.pad.ZeroPadding = {
          pad: function pad(data, blockSize) {
            // Shortcut
            var blockSizeBytes = blockSize * 4; // Pad

            data.clamp();
            data.sigBytes += blockSizeBytes - (data.sigBytes % blockSizeBytes || blockSizeBytes);
          },
          unpad: function unpad(data) {
            // Shortcut
            var dataWords = data.words; // Unpad

            var i = data.sigBytes - 1;

            while (!(dataWords[i >>> 2] >>> 24 - i % 4 * 8 & 0xff)) {
              i--;
            }

            data.sigBytes = i + 1;
          }
        };
        return CryptoJS.pad.ZeroPadding;
      });
      /***/

    },
    /* 379 */

    /***/
    function (module, exports, __webpack_require__) {
      ;

      (function (root, factory, undef) {
        if (true) {
          // CommonJS
          module.exports = exports = factory(__webpack_require__(2), __webpack_require__(12));
        } else {}
      })(this, function (CryptoJS) {
        /**
         * A noop padding strategy.
         */
        CryptoJS.pad.NoPadding = {
          pad: function pad() {},
          unpad: function unpad() {}
        };
        return CryptoJS.pad.NoPadding;
      });
      /***/

    },
    /* 380 */

    /***/
    function (module, exports, __webpack_require__) {
      ;

      (function (root, factory, undef) {
        if (true) {
          // CommonJS
          module.exports = exports = factory(__webpack_require__(2), __webpack_require__(12));
        } else {}
      })(this, function (CryptoJS) {
        (function (undefined) {
          // Shortcuts
          var C = CryptoJS;
          var C_lib = C.lib;
          var CipherParams = C_lib.CipherParams;
          var C_enc = C.enc;
          var Hex = C_enc.Hex;
          var C_format = C.format;
          var HexFormatter = C_format.Hex = {
            /**
             * Converts the ciphertext of a cipher params object to a hexadecimally encoded string.
             *
             * @param {CipherParams} cipherParams The cipher params object.
             *
             * @return {string} The hexadecimally encoded string.
             *
             * @static
             *
             * @example
             *
             *     var hexString = CryptoJS.format.Hex.stringify(cipherParams);
             */
            stringify: function stringify(cipherParams) {
              return cipherParams.ciphertext.toString(Hex);
            },

            /**
             * Converts a hexadecimally encoded ciphertext string to a cipher params object.
             *
             * @param {string} input The hexadecimally encoded string.
             *
             * @return {CipherParams} The cipher params object.
             *
             * @static
             *
             * @example
             *
             *     var cipherParams = CryptoJS.format.Hex.parse(hexString);
             */
            parse: function parse(input) {
              var ciphertext = Hex.parse(input);
              return CipherParams.create({
                ciphertext: ciphertext
              });
            }
          };
        })();

        return CryptoJS.format.Hex;
      });
      /***/

    },
    /* 381 */

    /***/
    function (module, exports, __webpack_require__) {
      ;

      (function (root, factory, undef) {
        if (true) {
          // CommonJS
          module.exports = exports = factory(__webpack_require__(2), __webpack_require__(87), __webpack_require__(88), __webpack_require__(49), __webpack_require__(12));
        } else {}
      })(this, function (CryptoJS) {
        (function () {
          // Shortcuts
          var C = CryptoJS;
          var C_lib = C.lib;
          var BlockCipher = C_lib.BlockCipher;
          var C_algo = C.algo; // Lookup tables

          var SBOX = [];
          var INV_SBOX = [];
          var SUB_MIX_0 = [];
          var SUB_MIX_1 = [];
          var SUB_MIX_2 = [];
          var SUB_MIX_3 = [];
          var INV_SUB_MIX_0 = [];
          var INV_SUB_MIX_1 = [];
          var INV_SUB_MIX_2 = [];
          var INV_SUB_MIX_3 = []; // Compute lookup tables

          (function () {
            // Compute double table
            var d = [];

            for (var i = 0; i < 256; i++) {
              if (i < 128) {
                d[i] = i << 1;
              } else {
                d[i] = i << 1 ^ 0x11b;
              }
            } // Walk GF(2^8)


            var x = 0;
            var xi = 0;

            for (var i = 0; i < 256; i++) {
              // Compute sbox
              var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;
              sx = sx >>> 8 ^ sx & 0xff ^ 0x63;
              SBOX[x] = sx;
              INV_SBOX[sx] = x; // Compute multiplication

              var x2 = d[x];
              var x4 = d[x2];
              var x8 = d[x4]; // Compute sub bytes, mix columns tables

              var t = d[sx] * 0x101 ^ sx * 0x1010100;
              SUB_MIX_0[x] = t << 24 | t >>> 8;
              SUB_MIX_1[x] = t << 16 | t >>> 16;
              SUB_MIX_2[x] = t << 8 | t >>> 24;
              SUB_MIX_3[x] = t; // Compute inv sub bytes, inv mix columns tables

              var t = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;
              INV_SUB_MIX_0[sx] = t << 24 | t >>> 8;
              INV_SUB_MIX_1[sx] = t << 16 | t >>> 16;
              INV_SUB_MIX_2[sx] = t << 8 | t >>> 24;
              INV_SUB_MIX_3[sx] = t; // Compute next counter

              if (!x) {
                x = xi = 1;
              } else {
                x = x2 ^ d[d[d[x8 ^ x2]]];
                xi ^= d[d[xi]];
              }
            }
          })(); // Precomputed Rcon lookup


          var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];
          /**
           * AES block cipher algorithm.
           */

          var AES = C_algo.AES = BlockCipher.extend({
            _doReset: function _doReset() {
              // Skip reset of nRounds has been set before and key did not change
              if (this._nRounds && this._keyPriorReset === this._key) {
                return;
              } // Shortcuts


              var key = this._keyPriorReset = this._key;
              var keyWords = key.words;
              var keySize = key.sigBytes / 4; // Compute number of rounds

              var nRounds = this._nRounds = keySize + 6; // Compute number of key schedule rows

              var ksRows = (nRounds + 1) * 4; // Compute key schedule

              var keySchedule = this._keySchedule = [];

              for (var ksRow = 0; ksRow < ksRows; ksRow++) {
                if (ksRow < keySize) {
                  keySchedule[ksRow] = keyWords[ksRow];
                } else {
                  var t = keySchedule[ksRow - 1];

                  if (!(ksRow % keySize)) {
                    // Rot word
                    t = t << 8 | t >>> 24; // Sub word

                    t = SBOX[t >>> 24] << 24 | SBOX[t >>> 16 & 0xff] << 16 | SBOX[t >>> 8 & 0xff] << 8 | SBOX[t & 0xff]; // Mix Rcon

                    t ^= RCON[ksRow / keySize | 0] << 24;
                  } else if (keySize > 6 && ksRow % keySize == 4) {
                    // Sub word
                    t = SBOX[t >>> 24] << 24 | SBOX[t >>> 16 & 0xff] << 16 | SBOX[t >>> 8 & 0xff] << 8 | SBOX[t & 0xff];
                  }

                  keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;
                }
              } // Compute inv key schedule


              var invKeySchedule = this._invKeySchedule = [];

              for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {
                var ksRow = ksRows - invKsRow;

                if (invKsRow % 4) {
                  var t = keySchedule[ksRow];
                } else {
                  var t = keySchedule[ksRow - 4];
                }

                if (invKsRow < 4 || ksRow <= 4) {
                  invKeySchedule[invKsRow] = t;
                } else {
                  invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[t >>> 16 & 0xff]] ^ INV_SUB_MIX_2[SBOX[t >>> 8 & 0xff]] ^ INV_SUB_MIX_3[SBOX[t & 0xff]];
                }
              }
            },
            encryptBlock: function encryptBlock(M, offset) {
              this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);
            },
            decryptBlock: function decryptBlock(M, offset) {
              // Swap 2nd and 4th rows
              var t = M[offset + 1];
              M[offset + 1] = M[offset + 3];
              M[offset + 3] = t;

              this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX); // Inv swap 2nd and 4th rows


              var t = M[offset + 1];
              M[offset + 1] = M[offset + 3];
              M[offset + 3] = t;
            },
            _doCryptBlock: function _doCryptBlock(M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX) {
              // Shortcut
              var nRounds = this._nRounds; // Get input, add round key

              var s0 = M[offset] ^ keySchedule[0];
              var s1 = M[offset + 1] ^ keySchedule[1];
              var s2 = M[offset + 2] ^ keySchedule[2];
              var s3 = M[offset + 3] ^ keySchedule[3]; // Key schedule row counter

              var ksRow = 4; // Rounds

              for (var round = 1; round < nRounds; round++) {
                // Shift rows, sub bytes, mix columns, add round key
                var t0 = SUB_MIX_0[s0 >>> 24] ^ SUB_MIX_1[s1 >>> 16 & 0xff] ^ SUB_MIX_2[s2 >>> 8 & 0xff] ^ SUB_MIX_3[s3 & 0xff] ^ keySchedule[ksRow++];
                var t1 = SUB_MIX_0[s1 >>> 24] ^ SUB_MIX_1[s2 >>> 16 & 0xff] ^ SUB_MIX_2[s3 >>> 8 & 0xff] ^ SUB_MIX_3[s0 & 0xff] ^ keySchedule[ksRow++];
                var t2 = SUB_MIX_0[s2 >>> 24] ^ SUB_MIX_1[s3 >>> 16 & 0xff] ^ SUB_MIX_2[s0 >>> 8 & 0xff] ^ SUB_MIX_3[s1 & 0xff] ^ keySchedule[ksRow++];
                var t3 = SUB_MIX_0[s3 >>> 24] ^ SUB_MIX_1[s0 >>> 16 & 0xff] ^ SUB_MIX_2[s1 >>> 8 & 0xff] ^ SUB_MIX_3[s2 & 0xff] ^ keySchedule[ksRow++]; // Update state

                s0 = t0;
                s1 = t1;
                s2 = t2;
                s3 = t3;
              } // Shift rows, sub bytes, add round key


              var t0 = (SBOX[s0 >>> 24] << 24 | SBOX[s1 >>> 16 & 0xff] << 16 | SBOX[s2 >>> 8 & 0xff] << 8 | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];
              var t1 = (SBOX[s1 >>> 24] << 24 | SBOX[s2 >>> 16 & 0xff] << 16 | SBOX[s3 >>> 8 & 0xff] << 8 | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];
              var t2 = (SBOX[s2 >>> 24] << 24 | SBOX[s3 >>> 16 & 0xff] << 16 | SBOX[s0 >>> 8 & 0xff] << 8 | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];
              var t3 = (SBOX[s3 >>> 24] << 24 | SBOX[s0 >>> 16 & 0xff] << 16 | SBOX[s1 >>> 8 & 0xff] << 8 | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++]; // Set output

              M[offset] = t0;
              M[offset + 1] = t1;
              M[offset + 2] = t2;
              M[offset + 3] = t3;
            },
            keySize: 256 / 32
          });
          /**
           * Shortcut functions to the cipher's object interface.
           *
           * @example
           *
           *     var ciphertext = CryptoJS.AES.encrypt(message, key, cfg);
           *     var plaintext  = CryptoJS.AES.decrypt(ciphertext, key, cfg);
           */

          C.AES = BlockCipher._createHelper(AES);
        })();

        return CryptoJS.AES;
      });
      /***/

    },
    /* 382 */

    /***/
    function (module, exports, __webpack_require__) {
      ;

      (function (root, factory, undef) {
        if (true) {
          // CommonJS
          module.exports = exports = factory(__webpack_require__(2), __webpack_require__(87), __webpack_require__(88), __webpack_require__(49), __webpack_require__(12));
        } else {}
      })(this, function (CryptoJS) {
        (function () {
          // Shortcuts
          var C = CryptoJS;
          var C_lib = C.lib;
          var WordArray = C_lib.WordArray;
          var BlockCipher = C_lib.BlockCipher;
          var C_algo = C.algo; // Permuted Choice 1 constants

          var PC1 = [57, 49, 41, 33, 25, 17, 9, 1, 58, 50, 42, 34, 26, 18, 10, 2, 59, 51, 43, 35, 27, 19, 11, 3, 60, 52, 44, 36, 63, 55, 47, 39, 31, 23, 15, 7, 62, 54, 46, 38, 30, 22, 14, 6, 61, 53, 45, 37, 29, 21, 13, 5, 28, 20, 12, 4]; // Permuted Choice 2 constants

          var PC2 = [14, 17, 11, 24, 1, 5, 3, 28, 15, 6, 21, 10, 23, 19, 12, 4, 26, 8, 16, 7, 27, 20, 13, 2, 41, 52, 31, 37, 47, 55, 30, 40, 51, 45, 33, 48, 44, 49, 39, 56, 34, 53, 46, 42, 50, 36, 29, 32]; // Cumulative bit shift constants

          var BIT_SHIFTS = [1, 2, 4, 6, 8, 10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28]; // SBOXes and round permutation constants

          var SBOX_P = [{
            0x0: 0x808200,
            0x10000000: 0x8000,
            0x20000000: 0x808002,
            0x30000000: 0x2,
            0x40000000: 0x200,
            0x50000000: 0x808202,
            0x60000000: 0x800202,
            0x70000000: 0x800000,
            0x80000000: 0x202,
            0x90000000: 0x800200,
            0xa0000000: 0x8200,
            0xb0000000: 0x808000,
            0xc0000000: 0x8002,
            0xd0000000: 0x800002,
            0xe0000000: 0x0,
            0xf0000000: 0x8202,
            0x8000000: 0x0,
            0x18000000: 0x808202,
            0x28000000: 0x8202,
            0x38000000: 0x8000,
            0x48000000: 0x808200,
            0x58000000: 0x200,
            0x68000000: 0x808002,
            0x78000000: 0x2,
            0x88000000: 0x800200,
            0x98000000: 0x8200,
            0xa8000000: 0x808000,
            0xb8000000: 0x800202,
            0xc8000000: 0x800002,
            0xd8000000: 0x8002,
            0xe8000000: 0x202,
            0xf8000000: 0x800000,
            0x1: 0x8000,
            0x10000001: 0x2,
            0x20000001: 0x808200,
            0x30000001: 0x800000,
            0x40000001: 0x808002,
            0x50000001: 0x8200,
            0x60000001: 0x200,
            0x70000001: 0x800202,
            0x80000001: 0x808202,
            0x90000001: 0x808000,
            0xa0000001: 0x800002,
            0xb0000001: 0x8202,
            0xc0000001: 0x202,
            0xd0000001: 0x800200,
            0xe0000001: 0x8002,
            0xf0000001: 0x0,
            0x8000001: 0x808202,
            0x18000001: 0x808000,
            0x28000001: 0x800000,
            0x38000001: 0x200,
            0x48000001: 0x8000,
            0x58000001: 0x800002,
            0x68000001: 0x2,
            0x78000001: 0x8202,
            0x88000001: 0x8002,
            0x98000001: 0x800202,
            0xa8000001: 0x202,
            0xb8000001: 0x808200,
            0xc8000001: 0x800200,
            0xd8000001: 0x0,
            0xe8000001: 0x8200,
            0xf8000001: 0x808002
          }, {
            0x0: 0x40084010,
            0x1000000: 0x4000,
            0x2000000: 0x80000,
            0x3000000: 0x40080010,
            0x4000000: 0x40000010,
            0x5000000: 0x40084000,
            0x6000000: 0x40004000,
            0x7000000: 0x10,
            0x8000000: 0x84000,
            0x9000000: 0x40004010,
            0xa000000: 0x40000000,
            0xb000000: 0x84010,
            0xc000000: 0x80010,
            0xd000000: 0x0,
            0xe000000: 0x4010,
            0xf000000: 0x40080000,
            0x800000: 0x40004000,
            0x1800000: 0x84010,
            0x2800000: 0x10,
            0x3800000: 0x40004010,
            0x4800000: 0x40084010,
            0x5800000: 0x40000000,
            0x6800000: 0x80000,
            0x7800000: 0x40080010,
            0x8800000: 0x80010,
            0x9800000: 0x0,
            0xa800000: 0x4000,
            0xb800000: 0x40080000,
            0xc800000: 0x40000010,
            0xd800000: 0x84000,
            0xe800000: 0x40084000,
            0xf800000: 0x4010,
            0x10000000: 0x0,
            0x11000000: 0x40080010,
            0x12000000: 0x40004010,
            0x13000000: 0x40084000,
            0x14000000: 0x40080000,
            0x15000000: 0x10,
            0x16000000: 0x84010,
            0x17000000: 0x4000,
            0x18000000: 0x4010,
            0x19000000: 0x80000,
            0x1a000000: 0x80010,
            0x1b000000: 0x40000010,
            0x1c000000: 0x84000,
            0x1d000000: 0x40004000,
            0x1e000000: 0x40000000,
            0x1f000000: 0x40084010,
            0x10800000: 0x84010,
            0x11800000: 0x80000,
            0x12800000: 0x40080000,
            0x13800000: 0x4000,
            0x14800000: 0x40004000,
            0x15800000: 0x40084010,
            0x16800000: 0x10,
            0x17800000: 0x40000000,
            0x18800000: 0x40084000,
            0x19800000: 0x40000010,
            0x1a800000: 0x40004010,
            0x1b800000: 0x80010,
            0x1c800000: 0x0,
            0x1d800000: 0x4010,
            0x1e800000: 0x40080010,
            0x1f800000: 0x84000
          }, {
            0x0: 0x104,
            0x100000: 0x0,
            0x200000: 0x4000100,
            0x300000: 0x10104,
            0x400000: 0x10004,
            0x500000: 0x4000004,
            0x600000: 0x4010104,
            0x700000: 0x4010000,
            0x800000: 0x4000000,
            0x900000: 0x4010100,
            0xa00000: 0x10100,
            0xb00000: 0x4010004,
            0xc00000: 0x4000104,
            0xd00000: 0x10000,
            0xe00000: 0x4,
            0xf00000: 0x100,
            0x80000: 0x4010100,
            0x180000: 0x4010004,
            0x280000: 0x0,
            0x380000: 0x4000100,
            0x480000: 0x4000004,
            0x580000: 0x10000,
            0x680000: 0x10004,
            0x780000: 0x104,
            0x880000: 0x4,
            0x980000: 0x100,
            0xa80000: 0x4010000,
            0xb80000: 0x10104,
            0xc80000: 0x10100,
            0xd80000: 0x4000104,
            0xe80000: 0x4010104,
            0xf80000: 0x4000000,
            0x1000000: 0x4010100,
            0x1100000: 0x10004,
            0x1200000: 0x10000,
            0x1300000: 0x4000100,
            0x1400000: 0x100,
            0x1500000: 0x4010104,
            0x1600000: 0x4000004,
            0x1700000: 0x0,
            0x1800000: 0x4000104,
            0x1900000: 0x4000000,
            0x1a00000: 0x4,
            0x1b00000: 0x10100,
            0x1c00000: 0x4010000,
            0x1d00000: 0x104,
            0x1e00000: 0x10104,
            0x1f00000: 0x4010004,
            0x1080000: 0x4000000,
            0x1180000: 0x104,
            0x1280000: 0x4010100,
            0x1380000: 0x0,
            0x1480000: 0x10004,
            0x1580000: 0x4000100,
            0x1680000: 0x100,
            0x1780000: 0x4010004,
            0x1880000: 0x10000,
            0x1980000: 0x4010104,
            0x1a80000: 0x10104,
            0x1b80000: 0x4000004,
            0x1c80000: 0x4000104,
            0x1d80000: 0x4010000,
            0x1e80000: 0x4,
            0x1f80000: 0x10100
          }, {
            0x0: 0x80401000,
            0x10000: 0x80001040,
            0x20000: 0x401040,
            0x30000: 0x80400000,
            0x40000: 0x0,
            0x50000: 0x401000,
            0x60000: 0x80000040,
            0x70000: 0x400040,
            0x80000: 0x80000000,
            0x90000: 0x400000,
            0xa0000: 0x40,
            0xb0000: 0x80001000,
            0xc0000: 0x80400040,
            0xd0000: 0x1040,
            0xe0000: 0x1000,
            0xf0000: 0x80401040,
            0x8000: 0x80001040,
            0x18000: 0x40,
            0x28000: 0x80400040,
            0x38000: 0x80001000,
            0x48000: 0x401000,
            0x58000: 0x80401040,
            0x68000: 0x0,
            0x78000: 0x80400000,
            0x88000: 0x1000,
            0x98000: 0x80401000,
            0xa8000: 0x400000,
            0xb8000: 0x1040,
            0xc8000: 0x80000000,
            0xd8000: 0x400040,
            0xe8000: 0x401040,
            0xf8000: 0x80000040,
            0x100000: 0x400040,
            0x110000: 0x401000,
            0x120000: 0x80000040,
            0x130000: 0x0,
            0x140000: 0x1040,
            0x150000: 0x80400040,
            0x160000: 0x80401000,
            0x170000: 0x80001040,
            0x180000: 0x80401040,
            0x190000: 0x80000000,
            0x1a0000: 0x80400000,
            0x1b0000: 0x401040,
            0x1c0000: 0x80001000,
            0x1d0000: 0x400000,
            0x1e0000: 0x40,
            0x1f0000: 0x1000,
            0x108000: 0x80400000,
            0x118000: 0x80401040,
            0x128000: 0x0,
            0x138000: 0x401000,
            0x148000: 0x400040,
            0x158000: 0x80000000,
            0x168000: 0x80001040,
            0x178000: 0x40,
            0x188000: 0x80000040,
            0x198000: 0x1000,
            0x1a8000: 0x80001000,
            0x1b8000: 0x80400040,
            0x1c8000: 0x1040,
            0x1d8000: 0x80401000,
            0x1e8000: 0x400000,
            0x1f8000: 0x401040
          }, {
            0x0: 0x80,
            0x1000: 0x1040000,
            0x2000: 0x40000,
            0x3000: 0x20000000,
            0x4000: 0x20040080,
            0x5000: 0x1000080,
            0x6000: 0x21000080,
            0x7000: 0x40080,
            0x8000: 0x1000000,
            0x9000: 0x20040000,
            0xa000: 0x20000080,
            0xb000: 0x21040080,
            0xc000: 0x21040000,
            0xd000: 0x0,
            0xe000: 0x1040080,
            0xf000: 0x21000000,
            0x800: 0x1040080,
            0x1800: 0x21000080,
            0x2800: 0x80,
            0x3800: 0x1040000,
            0x4800: 0x40000,
            0x5800: 0x20040080,
            0x6800: 0x21040000,
            0x7800: 0x20000000,
            0x8800: 0x20040000,
            0x9800: 0x0,
            0xa800: 0x21040080,
            0xb800: 0x1000080,
            0xc800: 0x20000080,
            0xd800: 0x21000000,
            0xe800: 0x1000000,
            0xf800: 0x40080,
            0x10000: 0x40000,
            0x11000: 0x80,
            0x12000: 0x20000000,
            0x13000: 0x21000080,
            0x14000: 0x1000080,
            0x15000: 0x21040000,
            0x16000: 0x20040080,
            0x17000: 0x1000000,
            0x18000: 0x21040080,
            0x19000: 0x21000000,
            0x1a000: 0x1040000,
            0x1b000: 0x20040000,
            0x1c000: 0x40080,
            0x1d000: 0x20000080,
            0x1e000: 0x0,
            0x1f000: 0x1040080,
            0x10800: 0x21000080,
            0x11800: 0x1000000,
            0x12800: 0x1040000,
            0x13800: 0x20040080,
            0x14800: 0x20000000,
            0x15800: 0x1040080,
            0x16800: 0x80,
            0x17800: 0x21040000,
            0x18800: 0x40080,
            0x19800: 0x21040080,
            0x1a800: 0x0,
            0x1b800: 0x21000000,
            0x1c800: 0x1000080,
            0x1d800: 0x40000,
            0x1e800: 0x20040000,
            0x1f800: 0x20000080
          }, {
            0x0: 0x10000008,
            0x100: 0x2000,
            0x200: 0x10200000,
            0x300: 0x10202008,
            0x400: 0x10002000,
            0x500: 0x200000,
            0x600: 0x200008,
            0x700: 0x10000000,
            0x800: 0x0,
            0x900: 0x10002008,
            0xa00: 0x202000,
            0xb00: 0x8,
            0xc00: 0x10200008,
            0xd00: 0x202008,
            0xe00: 0x2008,
            0xf00: 0x10202000,
            0x80: 0x10200000,
            0x180: 0x10202008,
            0x280: 0x8,
            0x380: 0x200000,
            0x480: 0x202008,
            0x580: 0x10000008,
            0x680: 0x10002000,
            0x780: 0x2008,
            0x880: 0x200008,
            0x980: 0x2000,
            0xa80: 0x10002008,
            0xb80: 0x10200008,
            0xc80: 0x0,
            0xd80: 0x10202000,
            0xe80: 0x202000,
            0xf80: 0x10000000,
            0x1000: 0x10002000,
            0x1100: 0x10200008,
            0x1200: 0x10202008,
            0x1300: 0x2008,
            0x1400: 0x200000,
            0x1500: 0x10000000,
            0x1600: 0x10000008,
            0x1700: 0x202000,
            0x1800: 0x202008,
            0x1900: 0x0,
            0x1a00: 0x8,
            0x1b00: 0x10200000,
            0x1c00: 0x2000,
            0x1d00: 0x10002008,
            0x1e00: 0x10202000,
            0x1f00: 0x200008,
            0x1080: 0x8,
            0x1180: 0x202000,
            0x1280: 0x200000,
            0x1380: 0x10000008,
            0x1480: 0x10002000,
            0x1580: 0x2008,
            0x1680: 0x10202008,
            0x1780: 0x10200000,
            0x1880: 0x10202000,
            0x1980: 0x10200008,
            0x1a80: 0x2000,
            0x1b80: 0x202008,
            0x1c80: 0x200008,
            0x1d80: 0x0,
            0x1e80: 0x10000000,
            0x1f80: 0x10002008
          }, {
            0x0: 0x100000,
            0x10: 0x2000401,
            0x20: 0x400,
            0x30: 0x100401,
            0x40: 0x2100401,
            0x50: 0x0,
            0x60: 0x1,
            0x70: 0x2100001,
            0x80: 0x2000400,
            0x90: 0x100001,
            0xa0: 0x2000001,
            0xb0: 0x2100400,
            0xc0: 0x2100000,
            0xd0: 0x401,
            0xe0: 0x100400,
            0xf0: 0x2000000,
            0x8: 0x2100001,
            0x18: 0x0,
            0x28: 0x2000401,
            0x38: 0x2100400,
            0x48: 0x100000,
            0x58: 0x2000001,
            0x68: 0x2000000,
            0x78: 0x401,
            0x88: 0x100401,
            0x98: 0x2000400,
            0xa8: 0x2100000,
            0xb8: 0x100001,
            0xc8: 0x400,
            0xd8: 0x2100401,
            0xe8: 0x1,
            0xf8: 0x100400,
            0x100: 0x2000000,
            0x110: 0x100000,
            0x120: 0x2000401,
            0x130: 0x2100001,
            0x140: 0x100001,
            0x150: 0x2000400,
            0x160: 0x2100400,
            0x170: 0x100401,
            0x180: 0x401,
            0x190: 0x2100401,
            0x1a0: 0x100400,
            0x1b0: 0x1,
            0x1c0: 0x0,
            0x1d0: 0x2100000,
            0x1e0: 0x2000001,
            0x1f0: 0x400,
            0x108: 0x100400,
            0x118: 0x2000401,
            0x128: 0x2100001,
            0x138: 0x1,
            0x148: 0x2000000,
            0x158: 0x100000,
            0x168: 0x401,
            0x178: 0x2100400,
            0x188: 0x2000001,
            0x198: 0x2100000,
            0x1a8: 0x0,
            0x1b8: 0x2100401,
            0x1c8: 0x100401,
            0x1d8: 0x400,
            0x1e8: 0x2000400,
            0x1f8: 0x100001
          }, {
            0x0: 0x8000820,
            0x1: 0x20000,
            0x2: 0x8000000,
            0x3: 0x20,
            0x4: 0x20020,
            0x5: 0x8020820,
            0x6: 0x8020800,
            0x7: 0x800,
            0x8: 0x8020000,
            0x9: 0x8000800,
            0xa: 0x20800,
            0xb: 0x8020020,
            0xc: 0x820,
            0xd: 0x0,
            0xe: 0x8000020,
            0xf: 0x20820,
            0x80000000: 0x800,
            0x80000001: 0x8020820,
            0x80000002: 0x8000820,
            0x80000003: 0x8000000,
            0x80000004: 0x8020000,
            0x80000005: 0x20800,
            0x80000006: 0x20820,
            0x80000007: 0x20,
            0x80000008: 0x8000020,
            0x80000009: 0x820,
            0x8000000a: 0x20020,
            0x8000000b: 0x8020800,
            0x8000000c: 0x0,
            0x8000000d: 0x8020020,
            0x8000000e: 0x8000800,
            0x8000000f: 0x20000,
            0x10: 0x20820,
            0x11: 0x8020800,
            0x12: 0x20,
            0x13: 0x800,
            0x14: 0x8000800,
            0x15: 0x8000020,
            0x16: 0x8020020,
            0x17: 0x20000,
            0x18: 0x0,
            0x19: 0x20020,
            0x1a: 0x8020000,
            0x1b: 0x8000820,
            0x1c: 0x8020820,
            0x1d: 0x20800,
            0x1e: 0x820,
            0x1f: 0x8000000,
            0x80000010: 0x20000,
            0x80000011: 0x800,
            0x80000012: 0x8020020,
            0x80000013: 0x20820,
            0x80000014: 0x20,
            0x80000015: 0x8020000,
            0x80000016: 0x8000000,
            0x80000017: 0x8000820,
            0x80000018: 0x8020820,
            0x80000019: 0x8000020,
            0x8000001a: 0x8000800,
            0x8000001b: 0x0,
            0x8000001c: 0x20800,
            0x8000001d: 0x820,
            0x8000001e: 0x20020,
            0x8000001f: 0x8020800
          }]; // Masks that select the SBOX input

          var SBOX_MASK = [0xf8000001, 0x1f800000, 0x01f80000, 0x001f8000, 0x0001f800, 0x00001f80, 0x000001f8, 0x8000001f];
          /**
           * DES block cipher algorithm.
           */

          var DES = C_algo.DES = BlockCipher.extend({
            _doReset: function _doReset() {
              // Shortcuts
              var key = this._key;
              var keyWords = key.words; // Select 56 bits according to PC1

              var keyBits = [];

              for (var i = 0; i < 56; i++) {
                var keyBitPos = PC1[i] - 1;
                keyBits[i] = keyWords[keyBitPos >>> 5] >>> 31 - keyBitPos % 32 & 1;
              } // Assemble 16 subkeys


              var subKeys = this._subKeys = [];

              for (var nSubKey = 0; nSubKey < 16; nSubKey++) {
                // Create subkey
                var subKey = subKeys[nSubKey] = []; // Shortcut

                var bitShift = BIT_SHIFTS[nSubKey]; // Select 48 bits according to PC2

                for (var i = 0; i < 24; i++) {
                  // Select from the left 28 key bits
                  subKey[i / 6 | 0] |= keyBits[(PC2[i] - 1 + bitShift) % 28] << 31 - i % 6; // Select from the right 28 key bits

                  subKey[4 + (i / 6 | 0)] |= keyBits[28 + (PC2[i + 24] - 1 + bitShift) % 28] << 31 - i % 6;
                } // Since each subkey is applied to an expanded 32-bit input,
                // the subkey can be broken into 8 values scaled to 32-bits,
                // which allows the key to be used without expansion


                subKey[0] = subKey[0] << 1 | subKey[0] >>> 31;

                for (var i = 1; i < 7; i++) {
                  subKey[i] = subKey[i] >>> (i - 1) * 4 + 3;
                }

                subKey[7] = subKey[7] << 5 | subKey[7] >>> 27;
              } // Compute inverse subkeys


              var invSubKeys = this._invSubKeys = [];

              for (var i = 0; i < 16; i++) {
                invSubKeys[i] = subKeys[15 - i];
              }
            },
            encryptBlock: function encryptBlock(M, offset) {
              this._doCryptBlock(M, offset, this._subKeys);
            },
            decryptBlock: function decryptBlock(M, offset) {
              this._doCryptBlock(M, offset, this._invSubKeys);
            },
            _doCryptBlock: function _doCryptBlock(M, offset, subKeys) {
              // Get input
              this._lBlock = M[offset];
              this._rBlock = M[offset + 1]; // Initial permutation

              exchangeLR.call(this, 4, 0x0f0f0f0f);
              exchangeLR.call(this, 16, 0x0000ffff);
              exchangeRL.call(this, 2, 0x33333333);
              exchangeRL.call(this, 8, 0x00ff00ff);
              exchangeLR.call(this, 1, 0x55555555); // Rounds

              for (var round = 0; round < 16; round++) {
                // Shortcuts
                var subKey = subKeys[round];
                var lBlock = this._lBlock;
                var rBlock = this._rBlock; // Feistel function

                var f = 0;

                for (var i = 0; i < 8; i++) {
                  f |= SBOX_P[i][((rBlock ^ subKey[i]) & SBOX_MASK[i]) >>> 0];
                }

                this._lBlock = rBlock;
                this._rBlock = lBlock ^ f;
              } // Undo swap from last round


              var t = this._lBlock;
              this._lBlock = this._rBlock;
              this._rBlock = t; // Final permutation

              exchangeLR.call(this, 1, 0x55555555);
              exchangeRL.call(this, 8, 0x00ff00ff);
              exchangeRL.call(this, 2, 0x33333333);
              exchangeLR.call(this, 16, 0x0000ffff);
              exchangeLR.call(this, 4, 0x0f0f0f0f); // Set output

              M[offset] = this._lBlock;
              M[offset + 1] = this._rBlock;
            },
            keySize: 64 / 32,
            ivSize: 64 / 32,
            blockSize: 64 / 32
          }); // Swap bits across the left and right words

          function exchangeLR(offset, mask) {
            var t = (this._lBlock >>> offset ^ this._rBlock) & mask;
            this._rBlock ^= t;
            this._lBlock ^= t << offset;
          }

          function exchangeRL(offset, mask) {
            var t = (this._rBlock >>> offset ^ this._lBlock) & mask;
            this._lBlock ^= t;
            this._rBlock ^= t << offset;
          }
          /**
           * Shortcut functions to the cipher's object interface.
           *
           * @example
           *
           *     var ciphertext = CryptoJS.DES.encrypt(message, key, cfg);
           *     var plaintext  = CryptoJS.DES.decrypt(ciphertext, key, cfg);
           */


          C.DES = BlockCipher._createHelper(DES);
          /**
           * Triple-DES block cipher algorithm.
           */

          var TripleDES = C_algo.TripleDES = BlockCipher.extend({
            _doReset: function _doReset() {
              // Shortcuts
              var key = this._key;
              var keyWords = key.words; // Create DES instances

              this._des1 = DES.createEncryptor(WordArray.create(keyWords.slice(0, 2)));
              this._des2 = DES.createEncryptor(WordArray.create(keyWords.slice(2, 4)));
              this._des3 = DES.createEncryptor(WordArray.create(keyWords.slice(4, 6)));
            },
            encryptBlock: function encryptBlock(M, offset) {
              this._des1.encryptBlock(M, offset);

              this._des2.decryptBlock(M, offset);

              this._des3.encryptBlock(M, offset);
            },
            decryptBlock: function decryptBlock(M, offset) {
              this._des3.decryptBlock(M, offset);

              this._des2.encryptBlock(M, offset);

              this._des1.decryptBlock(M, offset);
            },
            keySize: 192 / 32,
            ivSize: 64 / 32,
            blockSize: 64 / 32
          });
          /**
           * Shortcut functions to the cipher's object interface.
           *
           * @example
           *
           *     var ciphertext = CryptoJS.TripleDES.encrypt(message, key, cfg);
           *     var plaintext  = CryptoJS.TripleDES.decrypt(ciphertext, key, cfg);
           */

          C.TripleDES = BlockCipher._createHelper(TripleDES);
        })();

        return CryptoJS.TripleDES;
      });
      /***/

    },
    /* 383 */

    /***/
    function (module, exports, __webpack_require__) {
      ;

      (function (root, factory, undef) {
        if (true) {
          // CommonJS
          module.exports = exports = factory(__webpack_require__(2), __webpack_require__(87), __webpack_require__(88), __webpack_require__(49), __webpack_require__(12));
        } else {}
      })(this, function (CryptoJS) {
        (function () {
          // Shortcuts
          var C = CryptoJS;
          var C_lib = C.lib;
          var StreamCipher = C_lib.StreamCipher;
          var C_algo = C.algo;
          /**
           * RC4 stream cipher algorithm.
           */

          var RC4 = C_algo.RC4 = StreamCipher.extend({
            _doReset: function _doReset() {
              // Shortcuts
              var key = this._key;
              var keyWords = key.words;
              var keySigBytes = key.sigBytes; // Init sbox

              var S = this._S = [];

              for (var i = 0; i < 256; i++) {
                S[i] = i;
              } // Key setup


              for (var i = 0, j = 0; i < 256; i++) {
                var keyByteIndex = i % keySigBytes;
                var keyByte = keyWords[keyByteIndex >>> 2] >>> 24 - keyByteIndex % 4 * 8 & 0xff;
                j = (j + S[i] + keyByte) % 256; // Swap

                var t = S[i];
                S[i] = S[j];
                S[j] = t;
              } // Counters


              this._i = this._j = 0;
            },
            _doProcessBlock: function _doProcessBlock(M, offset) {
              M[offset] ^= generateKeystreamWord.call(this);
            },
            keySize: 256 / 32,
            ivSize: 0
          });

          function generateKeystreamWord() {
            // Shortcuts
            var S = this._S;
            var i = this._i;
            var j = this._j; // Generate keystream word

            var keystreamWord = 0;

            for (var n = 0; n < 4; n++) {
              i = (i + 1) % 256;
              j = (j + S[i]) % 256; // Swap

              var t = S[i];
              S[i] = S[j];
              S[j] = t;
              keystreamWord |= S[(S[i] + S[j]) % 256] << 24 - n * 8;
            } // Update counters


            this._i = i;
            this._j = j;
            return keystreamWord;
          }
          /**
           * Shortcut functions to the cipher's object interface.
           *
           * @example
           *
           *     var ciphertext = CryptoJS.RC4.encrypt(message, key, cfg);
           *     var plaintext  = CryptoJS.RC4.decrypt(ciphertext, key, cfg);
           */


          C.RC4 = StreamCipher._createHelper(RC4);
          /**
           * Modified RC4 stream cipher algorithm.
           */

          var RC4Drop = C_algo.RC4Drop = RC4.extend({
            /**
             * Configuration options.
             *
             * @property {number} drop The number of keystream words to drop. Default 192
             */
            cfg: RC4.cfg.extend({
              drop: 192
            }),
            _doReset: function _doReset() {
              RC4._doReset.call(this); // Drop


              for (var i = this.cfg.drop; i > 0; i--) {
                generateKeystreamWord.call(this);
              }
            }
          });
          /**
           * Shortcut functions to the cipher's object interface.
           *
           * @example
           *
           *     var ciphertext = CryptoJS.RC4Drop.encrypt(message, key, cfg);
           *     var plaintext  = CryptoJS.RC4Drop.decrypt(ciphertext, key, cfg);
           */

          C.RC4Drop = StreamCipher._createHelper(RC4Drop);
        })();

        return CryptoJS.RC4;
      });
      /***/

    },
    /* 384 */

    /***/
    function (module, exports, __webpack_require__) {
      ;

      (function (root, factory, undef) {
        if (true) {
          // CommonJS
          module.exports = exports = factory(__webpack_require__(2), __webpack_require__(87), __webpack_require__(88), __webpack_require__(49), __webpack_require__(12));
        } else {}
      })(this, function (CryptoJS) {
        (function () {
          // Shortcuts
          var C = CryptoJS;
          var C_lib = C.lib;
          var StreamCipher = C_lib.StreamCipher;
          var C_algo = C.algo; // Reusable objects

          var S = [];
          var C_ = [];
          var G = [];
          /**
           * Rabbit stream cipher algorithm
           */

          var Rabbit = C_algo.Rabbit = StreamCipher.extend({
            _doReset: function _doReset() {
              // Shortcuts
              var K = this._key.words;
              var iv = this.cfg.iv; // Swap endian

              for (var i = 0; i < 4; i++) {
                K[i] = (K[i] << 8 | K[i] >>> 24) & 0x00ff00ff | (K[i] << 24 | K[i] >>> 8) & 0xff00ff00;
              } // Generate initial state values


              var X = this._X = [K[0], K[3] << 16 | K[2] >>> 16, K[1], K[0] << 16 | K[3] >>> 16, K[2], K[1] << 16 | K[0] >>> 16, K[3], K[2] << 16 | K[1] >>> 16]; // Generate initial counter values

              var C = this._C = [K[2] << 16 | K[2] >>> 16, K[0] & 0xffff0000 | K[1] & 0x0000ffff, K[3] << 16 | K[3] >>> 16, K[1] & 0xffff0000 | K[2] & 0x0000ffff, K[0] << 16 | K[0] >>> 16, K[2] & 0xffff0000 | K[3] & 0x0000ffff, K[1] << 16 | K[1] >>> 16, K[3] & 0xffff0000 | K[0] & 0x0000ffff]; // Carry bit

              this._b = 0; // Iterate the system four times

              for (var i = 0; i < 4; i++) {
                nextState.call(this);
              } // Modify the counters


              for (var i = 0; i < 8; i++) {
                C[i] ^= X[i + 4 & 7];
              } // IV setup


              if (iv) {
                // Shortcuts
                var IV = iv.words;
                var IV_0 = IV[0];
                var IV_1 = IV[1]; // Generate four subvectors

                var i0 = (IV_0 << 8 | IV_0 >>> 24) & 0x00ff00ff | (IV_0 << 24 | IV_0 >>> 8) & 0xff00ff00;
                var i2 = (IV_1 << 8 | IV_1 >>> 24) & 0x00ff00ff | (IV_1 << 24 | IV_1 >>> 8) & 0xff00ff00;
                var i1 = i0 >>> 16 | i2 & 0xffff0000;
                var i3 = i2 << 16 | i0 & 0x0000ffff; // Modify counter values

                C[0] ^= i0;
                C[1] ^= i1;
                C[2] ^= i2;
                C[3] ^= i3;
                C[4] ^= i0;
                C[5] ^= i1;
                C[6] ^= i2;
                C[7] ^= i3; // Iterate the system four times

                for (var i = 0; i < 4; i++) {
                  nextState.call(this);
                }
              }
            },
            _doProcessBlock: function _doProcessBlock(M, offset) {
              // Shortcut
              var X = this._X; // Iterate the system

              nextState.call(this); // Generate four keystream words

              S[0] = X[0] ^ X[5] >>> 16 ^ X[3] << 16;
              S[1] = X[2] ^ X[7] >>> 16 ^ X[5] << 16;
              S[2] = X[4] ^ X[1] >>> 16 ^ X[7] << 16;
              S[3] = X[6] ^ X[3] >>> 16 ^ X[1] << 16;

              for (var i = 0; i < 4; i++) {
                // Swap endian
                S[i] = (S[i] << 8 | S[i] >>> 24) & 0x00ff00ff | (S[i] << 24 | S[i] >>> 8) & 0xff00ff00; // Encrypt

                M[offset + i] ^= S[i];
              }
            },
            blockSize: 128 / 32,
            ivSize: 64 / 32
          });

          function nextState() {
            // Shortcuts
            var X = this._X;
            var C = this._C; // Save old counter values

            for (var i = 0; i < 8; i++) {
              C_[i] = C[i];
            } // Calculate new counter values


            C[0] = C[0] + 0x4d34d34d + this._b | 0;
            C[1] = C[1] + 0xd34d34d3 + (C[0] >>> 0 < C_[0] >>> 0 ? 1 : 0) | 0;
            C[2] = C[2] + 0x34d34d34 + (C[1] >>> 0 < C_[1] >>> 0 ? 1 : 0) | 0;
            C[3] = C[3] + 0x4d34d34d + (C[2] >>> 0 < C_[2] >>> 0 ? 1 : 0) | 0;
            C[4] = C[4] + 0xd34d34d3 + (C[3] >>> 0 < C_[3] >>> 0 ? 1 : 0) | 0;
            C[5] = C[5] + 0x34d34d34 + (C[4] >>> 0 < C_[4] >>> 0 ? 1 : 0) | 0;
            C[6] = C[6] + 0x4d34d34d + (C[5] >>> 0 < C_[5] >>> 0 ? 1 : 0) | 0;
            C[7] = C[7] + 0xd34d34d3 + (C[6] >>> 0 < C_[6] >>> 0 ? 1 : 0) | 0;
            this._b = C[7] >>> 0 < C_[7] >>> 0 ? 1 : 0; // Calculate the g-values

            for (var i = 0; i < 8; i++) {
              var gx = X[i] + C[i]; // Construct high and low argument for squaring

              var ga = gx & 0xffff;
              var gb = gx >>> 16; // Calculate high and low result of squaring

              var gh = ((ga * ga >>> 17) + ga * gb >>> 15) + gb * gb;
              var gl = ((gx & 0xffff0000) * gx | 0) + ((gx & 0x0000ffff) * gx | 0); // High XOR low

              G[i] = gh ^ gl;
            } // Calculate new state values


            X[0] = G[0] + (G[7] << 16 | G[7] >>> 16) + (G[6] << 16 | G[6] >>> 16) | 0;
            X[1] = G[1] + (G[0] << 8 | G[0] >>> 24) + G[7] | 0;
            X[2] = G[2] + (G[1] << 16 | G[1] >>> 16) + (G[0] << 16 | G[0] >>> 16) | 0;
            X[3] = G[3] + (G[2] << 8 | G[2] >>> 24) + G[1] | 0;
            X[4] = G[4] + (G[3] << 16 | G[3] >>> 16) + (G[2] << 16 | G[2] >>> 16) | 0;
            X[5] = G[5] + (G[4] << 8 | G[4] >>> 24) + G[3] | 0;
            X[6] = G[6] + (G[5] << 16 | G[5] >>> 16) + (G[4] << 16 | G[4] >>> 16) | 0;
            X[7] = G[7] + (G[6] << 8 | G[6] >>> 24) + G[5] | 0;
          }
          /**
           * Shortcut functions to the cipher's object interface.
           *
           * @example
           *
           *     var ciphertext = CryptoJS.Rabbit.encrypt(message, key, cfg);
           *     var plaintext  = CryptoJS.Rabbit.decrypt(ciphertext, key, cfg);
           */


          C.Rabbit = StreamCipher._createHelper(Rabbit);
        })();

        return CryptoJS.Rabbit;
      });
      /***/

    },
    /* 385 */

    /***/
    function (module, exports, __webpack_require__) {
      ;

      (function (root, factory, undef) {
        if (true) {
          // CommonJS
          module.exports = exports = factory(__webpack_require__(2), __webpack_require__(87), __webpack_require__(88), __webpack_require__(49), __webpack_require__(12));
        } else {}
      })(this, function (CryptoJS) {
        (function () {
          // Shortcuts
          var C = CryptoJS;
          var C_lib = C.lib;
          var StreamCipher = C_lib.StreamCipher;
          var C_algo = C.algo; // Reusable objects

          var S = [];
          var C_ = [];
          var G = [];
          /**
           * Rabbit stream cipher algorithm.
           *
           * This is a legacy version that neglected to convert the key to little-endian.
           * This error doesn't affect the cipher's security,
           * but it does affect its compatibility with other implementations.
           */

          var RabbitLegacy = C_algo.RabbitLegacy = StreamCipher.extend({
            _doReset: function _doReset() {
              // Shortcuts
              var K = this._key.words;
              var iv = this.cfg.iv; // Generate initial state values

              var X = this._X = [K[0], K[3] << 16 | K[2] >>> 16, K[1], K[0] << 16 | K[3] >>> 16, K[2], K[1] << 16 | K[0] >>> 16, K[3], K[2] << 16 | K[1] >>> 16]; // Generate initial counter values

              var C = this._C = [K[2] << 16 | K[2] >>> 16, K[0] & 0xffff0000 | K[1] & 0x0000ffff, K[3] << 16 | K[3] >>> 16, K[1] & 0xffff0000 | K[2] & 0x0000ffff, K[0] << 16 | K[0] >>> 16, K[2] & 0xffff0000 | K[3] & 0x0000ffff, K[1] << 16 | K[1] >>> 16, K[3] & 0xffff0000 | K[0] & 0x0000ffff]; // Carry bit

              this._b = 0; // Iterate the system four times

              for (var i = 0; i < 4; i++) {
                nextState.call(this);
              } // Modify the counters


              for (var i = 0; i < 8; i++) {
                C[i] ^= X[i + 4 & 7];
              } // IV setup


              if (iv) {
                // Shortcuts
                var IV = iv.words;
                var IV_0 = IV[0];
                var IV_1 = IV[1]; // Generate four subvectors

                var i0 = (IV_0 << 8 | IV_0 >>> 24) & 0x00ff00ff | (IV_0 << 24 | IV_0 >>> 8) & 0xff00ff00;
                var i2 = (IV_1 << 8 | IV_1 >>> 24) & 0x00ff00ff | (IV_1 << 24 | IV_1 >>> 8) & 0xff00ff00;
                var i1 = i0 >>> 16 | i2 & 0xffff0000;
                var i3 = i2 << 16 | i0 & 0x0000ffff; // Modify counter values

                C[0] ^= i0;
                C[1] ^= i1;
                C[2] ^= i2;
                C[3] ^= i3;
                C[4] ^= i0;
                C[5] ^= i1;
                C[6] ^= i2;
                C[7] ^= i3; // Iterate the system four times

                for (var i = 0; i < 4; i++) {
                  nextState.call(this);
                }
              }
            },
            _doProcessBlock: function _doProcessBlock(M, offset) {
              // Shortcut
              var X = this._X; // Iterate the system

              nextState.call(this); // Generate four keystream words

              S[0] = X[0] ^ X[5] >>> 16 ^ X[3] << 16;
              S[1] = X[2] ^ X[7] >>> 16 ^ X[5] << 16;
              S[2] = X[4] ^ X[1] >>> 16 ^ X[7] << 16;
              S[3] = X[6] ^ X[3] >>> 16 ^ X[1] << 16;

              for (var i = 0; i < 4; i++) {
                // Swap endian
                S[i] = (S[i] << 8 | S[i] >>> 24) & 0x00ff00ff | (S[i] << 24 | S[i] >>> 8) & 0xff00ff00; // Encrypt

                M[offset + i] ^= S[i];
              }
            },
            blockSize: 128 / 32,
            ivSize: 64 / 32
          });

          function nextState() {
            // Shortcuts
            var X = this._X;
            var C = this._C; // Save old counter values

            for (var i = 0; i < 8; i++) {
              C_[i] = C[i];
            } // Calculate new counter values


            C[0] = C[0] + 0x4d34d34d + this._b | 0;
            C[1] = C[1] + 0xd34d34d3 + (C[0] >>> 0 < C_[0] >>> 0 ? 1 : 0) | 0;
            C[2] = C[2] + 0x34d34d34 + (C[1] >>> 0 < C_[1] >>> 0 ? 1 : 0) | 0;
            C[3] = C[3] + 0x4d34d34d + (C[2] >>> 0 < C_[2] >>> 0 ? 1 : 0) | 0;
            C[4] = C[4] + 0xd34d34d3 + (C[3] >>> 0 < C_[3] >>> 0 ? 1 : 0) | 0;
            C[5] = C[5] + 0x34d34d34 + (C[4] >>> 0 < C_[4] >>> 0 ? 1 : 0) | 0;
            C[6] = C[6] + 0x4d34d34d + (C[5] >>> 0 < C_[5] >>> 0 ? 1 : 0) | 0;
            C[7] = C[7] + 0xd34d34d3 + (C[6] >>> 0 < C_[6] >>> 0 ? 1 : 0) | 0;
            this._b = C[7] >>> 0 < C_[7] >>> 0 ? 1 : 0; // Calculate the g-values

            for (var i = 0; i < 8; i++) {
              var gx = X[i] + C[i]; // Construct high and low argument for squaring

              var ga = gx & 0xffff;
              var gb = gx >>> 16; // Calculate high and low result of squaring

              var gh = ((ga * ga >>> 17) + ga * gb >>> 15) + gb * gb;
              var gl = ((gx & 0xffff0000) * gx | 0) + ((gx & 0x0000ffff) * gx | 0); // High XOR low

              G[i] = gh ^ gl;
            } // Calculate new state values


            X[0] = G[0] + (G[7] << 16 | G[7] >>> 16) + (G[6] << 16 | G[6] >>> 16) | 0;
            X[1] = G[1] + (G[0] << 8 | G[0] >>> 24) + G[7] | 0;
            X[2] = G[2] + (G[1] << 16 | G[1] >>> 16) + (G[0] << 16 | G[0] >>> 16) | 0;
            X[3] = G[3] + (G[2] << 8 | G[2] >>> 24) + G[1] | 0;
            X[4] = G[4] + (G[3] << 16 | G[3] >>> 16) + (G[2] << 16 | G[2] >>> 16) | 0;
            X[5] = G[5] + (G[4] << 8 | G[4] >>> 24) + G[3] | 0;
            X[6] = G[6] + (G[5] << 16 | G[5] >>> 16) + (G[4] << 16 | G[4] >>> 16) | 0;
            X[7] = G[7] + (G[6] << 8 | G[6] >>> 24) + G[5] | 0;
          }
          /**
           * Shortcut functions to the cipher's object interface.
           *
           * @example
           *
           *     var ciphertext = CryptoJS.RabbitLegacy.encrypt(message, key, cfg);
           *     var plaintext  = CryptoJS.RabbitLegacy.decrypt(ciphertext, key, cfg);
           */


          C.RabbitLegacy = StreamCipher._createHelper(RabbitLegacy);
        })();

        return CryptoJS.RabbitLegacy;
      });
      /***/

    },
    /* 386 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";
      /* WEBPACK VAR INJECTION */

      (function (Buffer) {
        function _interopDefault(ex) {
          return ex && _typeof4(ex) === 'object' && 'default' in ex ? ex['default'] : ex;
        }

        var r = _interopDefault(__webpack_require__(387));

        var _Object$getOwnPropertyDescriptor = _interopDefault(__webpack_require__(417));

        var _getIterator = _interopDefault(__webpack_require__(420));

        var _Object$freeze = _interopDefault(__webpack_require__(429));

        var _typeof = _interopDefault(__webpack_require__(185));

        var _Object$keys = _interopDefault(__webpack_require__(441));

        var _Object$defineProperty = _interopDefault(__webpack_require__(263));

        var _classCallCheck = _interopDefault(__webpack_require__(446));

        var _createClass = _interopDefault(__webpack_require__(447));

        var _Map = _interopDefault(__webpack_require__(448));

        var _possibleConstructorReturn = _interopDefault(__webpack_require__(458));

        var _inherits = _interopDefault(__webpack_require__(459));

        var restructure_src_utils = __webpack_require__(40);

        var _Object$defineProperties = _interopDefault(__webpack_require__(467));

        var isEqual = _interopDefault(__webpack_require__(470));

        var _Object$assign = _interopDefault(__webpack_require__(482));

        var _String$fromCodePoint = _interopDefault(__webpack_require__(486));

        var _Array$from = _interopDefault(__webpack_require__(489));

        var _Set = _interopDefault(__webpack_require__(493));

        var unicode = _interopDefault(__webpack_require__(499));

        var UnicodeTrie = _interopDefault(__webpack_require__(504));

        var StateMachine = _interopDefault(__webpack_require__(505));

        var _Number$EPSILON = _interopDefault(__webpack_require__(507));

        var cloneDeep = _interopDefault(__webpack_require__(510));

        var _Promise = _interopDefault(__webpack_require__(511));

        var inflate = _interopDefault(__webpack_require__(135));

        var brotli = _interopDefault(__webpack_require__(519));

        var fs = __webpack_require__(53);

        var fontkit = {};
        fontkit.logErrors = false;
        var formats = [];

        fontkit.registerFormat = function (format) {
          formats.push(format);
        };

        fontkit.openSync = function (filename, postscriptName) {
          var buffer = fs.readFileSync(filename);
          return fontkit.create(buffer, postscriptName);
        };

        fontkit.open = function (filename, postscriptName, callback) {
          if (typeof postscriptName === 'function') {
            callback = postscriptName;
            postscriptName = null;
          }

          fs.readFile(filename, function (err, buffer) {
            if (err) {
              return callback(err);
            }

            try {
              var font = fontkit.create(buffer, postscriptName);
            } catch (e) {
              return callback(e);
            }

            return callback(null, font);
          });
          return;
        };

        fontkit.create = function (buffer, postscriptName) {
          for (var i = 0; i < formats.length; i++) {
            var format = formats[i];

            if (format.probe(buffer)) {
              var font = new format(new r.DecodeStream(buffer));

              if (postscriptName) {
                return font.getFont(postscriptName);
              }

              return font;
            }
          }

          throw new Error('Unknown font format');
        };

        fontkit.defaultLanguage = 'en';

        fontkit.setDefaultLanguage = function () {
          var lang = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'en';
          fontkit.defaultLanguage = lang;
        };
        /**
         * This decorator caches the results of a getter or method such that
         * the results are lazily computed once, and then cached.
         * @private
         */


        function cache(target, key, descriptor) {
          if (descriptor.get) {
            var get = descriptor.get;

            descriptor.get = function () {
              var value = get.call(this);

              _Object$defineProperty(this, key, {
                value: value
              });

              return value;
            };
          } else if (typeof descriptor.value === 'function') {
            var fn = descriptor.value;
            return {
              get: function get() {
                var cache = new _Map();

                function memoized() {
                  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                    args[_key] = arguments[_key];
                  }

                  var key = args.length > 0 ? args[0] : 'value';

                  if (cache.has(key)) {
                    return cache.get(key);
                  }

                  var result = fn.apply(this, args);
                  cache.set(key, result);
                  return result;
                }

                ;

                _Object$defineProperty(this, key, {
                  value: memoized
                });

                return memoized;
              }
            };
          }
        }

        var SubHeader = new r.Struct({
          firstCode: r.uint16,
          entryCount: r.uint16,
          idDelta: r.int16,
          idRangeOffset: r.uint16
        });
        var CmapGroup = new r.Struct({
          startCharCode: r.uint32,
          endCharCode: r.uint32,
          glyphID: r.uint32
        });
        var UnicodeValueRange = new r.Struct({
          startUnicodeValue: r.uint24,
          additionalCount: r.uint8
        });
        var UVSMapping = new r.Struct({
          unicodeValue: r.uint24,
          glyphID: r.uint16
        });
        var DefaultUVS = new r.Array(UnicodeValueRange, r.uint32);
        var NonDefaultUVS = new r.Array(UVSMapping, r.uint32);
        var VarSelectorRecord = new r.Struct({
          varSelector: r.uint24,
          defaultUVS: new r.Pointer(r.uint32, DefaultUVS, {
            type: 'parent'
          }),
          nonDefaultUVS: new r.Pointer(r.uint32, NonDefaultUVS, {
            type: 'parent'
          })
        });
        var CmapSubtable = new r.VersionedStruct(r.uint16, {
          0: {
            // Byte encoding
            length: r.uint16,
            // Total table length in bytes (set to 262 for format 0)
            language: r.uint16,
            // Language code for this encoding subtable, or zero if language-independent
            codeMap: new r.LazyArray(r.uint8, 256)
          },
          2: {
            // High-byte mapping (CJK)
            length: r.uint16,
            language: r.uint16,
            subHeaderKeys: new r.Array(r.uint16, 256),
            subHeaderCount: function subHeaderCount(t) {
              return Math.max.apply(Math, t.subHeaderKeys);
            },
            subHeaders: new r.LazyArray(SubHeader, 'subHeaderCount'),
            glyphIndexArray: new r.LazyArray(r.uint16, 'subHeaderCount')
          },
          4: {
            // Segment mapping to delta values
            length: r.uint16,
            // Total table length in bytes
            language: r.uint16,
            // Language code
            segCountX2: r.uint16,
            segCount: function segCount(t) {
              return t.segCountX2 >> 1;
            },
            searchRange: r.uint16,
            entrySelector: r.uint16,
            rangeShift: r.uint16,
            endCode: new r.LazyArray(r.uint16, 'segCount'),
            reservedPad: new r.Reserved(r.uint16),
            // This value should be zero
            startCode: new r.LazyArray(r.uint16, 'segCount'),
            idDelta: new r.LazyArray(r.int16, 'segCount'),
            idRangeOffset: new r.LazyArray(r.uint16, 'segCount'),
            glyphIndexArray: new r.LazyArray(r.uint16, function (t) {
              return (t.length - t._currentOffset) / 2;
            })
          },
          6: {
            // Trimmed table
            length: r.uint16,
            language: r.uint16,
            firstCode: r.uint16,
            entryCount: r.uint16,
            glyphIndices: new r.LazyArray(r.uint16, 'entryCount')
          },
          8: {
            // mixed 16-bit and 32-bit coverage
            reserved: new r.Reserved(r.uint16),
            length: r.uint32,
            language: r.uint16,
            is32: new r.LazyArray(r.uint8, 8192),
            nGroups: r.uint32,
            groups: new r.LazyArray(CmapGroup, 'nGroups')
          },
          10: {
            // Trimmed Array
            reserved: new r.Reserved(r.uint16),
            length: r.uint32,
            language: r.uint32,
            firstCode: r.uint32,
            entryCount: r.uint32,
            glyphIndices: new r.LazyArray(r.uint16, 'numChars')
          },
          12: {
            // Segmented coverage
            reserved: new r.Reserved(r.uint16),
            length: r.uint32,
            language: r.uint32,
            nGroups: r.uint32,
            groups: new r.LazyArray(CmapGroup, 'nGroups')
          },
          13: {
            // Many-to-one range mappings (same as 12 except for group.startGlyphID)
            reserved: new r.Reserved(r.uint16),
            length: r.uint32,
            language: r.uint32,
            nGroups: r.uint32,
            groups: new r.LazyArray(CmapGroup, 'nGroups')
          },
          14: {
            // Unicode Variation Sequences
            length: r.uint32,
            numRecords: r.uint32,
            varSelectors: new r.LazyArray(VarSelectorRecord, 'numRecords')
          }
        });
        var CmapEntry = new r.Struct({
          platformID: r.uint16,
          // Platform identifier
          encodingID: r.uint16,
          // Platform-specific encoding identifier
          table: new r.Pointer(r.uint32, CmapSubtable, {
            type: 'parent',
            lazy: true
          })
        }); // character to glyph mapping

        var cmap = new r.Struct({
          version: r.uint16,
          numSubtables: r.uint16,
          tables: new r.Array(CmapEntry, 'numSubtables')
        }); // font header

        var head = new r.Struct({
          version: r.int32,
          // 0x00010000 (version 1.0)
          revision: r.int32,
          // set by font manufacturer
          checkSumAdjustment: r.uint32,
          magicNumber: r.uint32,
          // set to 0x5F0F3CF5
          flags: r.uint16,
          unitsPerEm: r.uint16,
          // range from 64 to 16384
          created: new r.Array(r.int32, 2),
          modified: new r.Array(r.int32, 2),
          xMin: r.int16,
          // for all glyph bounding boxes
          yMin: r.int16,
          // for all glyph bounding boxes
          xMax: r.int16,
          // for all glyph bounding boxes
          yMax: r.int16,
          // for all glyph bounding boxes
          macStyle: new r.Bitfield(r.uint16, ['bold', 'italic', 'underline', 'outline', 'shadow', 'condensed', 'extended']),
          lowestRecPPEM: r.uint16,
          // smallest readable size in pixels
          fontDirectionHint: r.int16,
          indexToLocFormat: r.int16,
          // 0 for short offsets, 1 for long
          glyphDataFormat: r.int16 // 0 for current format

        }); // horizontal header

        var hhea = new r.Struct({
          version: r.int32,
          ascent: r.int16,
          // Distance from baseline of highest ascender
          descent: r.int16,
          // Distance from baseline of lowest descender
          lineGap: r.int16,
          // Typographic line gap
          advanceWidthMax: r.uint16,
          // Maximum advance width value in 'hmtx' table
          minLeftSideBearing: r.int16,
          // Maximum advance width value in 'hmtx' table
          minRightSideBearing: r.int16,
          // Minimum right sidebearing value
          xMaxExtent: r.int16,
          caretSlopeRise: r.int16,
          // Used to calculate the slope of the cursor (rise/run); 1 for vertical
          caretSlopeRun: r.int16,
          // 0 for vertical
          caretOffset: r.int16,
          // Set to 0 for non-slanted fonts
          reserved: new r.Reserved(r.int16, 4),
          metricDataFormat: r.int16,
          // 0 for current format
          numberOfMetrics: r.uint16 // Number of advance widths in 'hmtx' table

        });
        var HmtxEntry = new r.Struct({
          advance: r.uint16,
          bearing: r.int16
        });
        var hmtx = new r.Struct({
          metrics: new r.LazyArray(HmtxEntry, function (t) {
            return t.parent.hhea.numberOfMetrics;
          }),
          bearings: new r.LazyArray(r.int16, function (t) {
            return t.parent.maxp.numGlyphs - t.parent.hhea.numberOfMetrics;
          })
        }); // maxiumum profile

        var maxp = new r.Struct({
          version: r.int32,
          numGlyphs: r.uint16,
          // The number of glyphs in the font
          maxPoints: r.uint16,
          // Maximum points in a non-composite glyph
          maxContours: r.uint16,
          // Maximum contours in a non-composite glyph
          maxComponentPoints: r.uint16,
          // Maximum points in a composite glyph
          maxComponentContours: r.uint16,
          // Maximum contours in a composite glyph
          maxZones: r.uint16,
          // 1 if instructions do not use the twilight zone, 2 otherwise
          maxTwilightPoints: r.uint16,
          // Maximum points used in Z0
          maxStorage: r.uint16,
          // Number of Storage Area locations
          maxFunctionDefs: r.uint16,
          // Number of FDEFs
          maxInstructionDefs: r.uint16,
          // Number of IDEFs
          maxStackElements: r.uint16,
          // Maximum stack depth
          maxSizeOfInstructions: r.uint16,
          // Maximum byte count for glyph instructions
          maxComponentElements: r.uint16,
          // Maximum number of components referenced at “top level” for any composite glyph
          maxComponentDepth: r.uint16 // Maximum levels of recursion; 1 for simple components

        });
        /**
         * Gets an encoding name from platform, encoding, and language ids.
         * Returned encoding names can be used in iconv-lite to decode text.
         */

        function getEncoding(platformID, encodingID) {
          var languageID = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

          if (platformID === 1 && MAC_LANGUAGE_ENCODINGS[languageID]) {
            return MAC_LANGUAGE_ENCODINGS[languageID];
          }

          return ENCODINGS[platformID][encodingID];
        } // Map of platform ids to encoding ids.


        var ENCODINGS = [// unicode
        ['utf16be', 'utf16be', 'utf16be', 'utf16be', 'utf16be', 'utf16be'], // macintosh
        // Mappings available at http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/
        // 0	Roman                 17	Malayalam
        // 1	Japanese	            18	Sinhalese
        // 2	Traditional Chinese	  19	Burmese
        // 3	Korean	              20	Khmer
        // 4	Arabic	              21	Thai
        // 5	Hebrew	              22	Laotian
        // 6	Greek	                23	Georgian
        // 7	Russian	              24	Armenian
        // 8	RSymbol	              25	Simplified Chinese
        // 9	Devanagari	          26	Tibetan
        // 10	Gurmukhi	            27	Mongolian
        // 11	Gujarati	            28	Geez
        // 12	Oriya	                29	Slavic
        // 13	Bengali	              30	Vietnamese
        // 14	Tamil	                31	Sindhi
        // 15	Telugu	              32	(Uninterpreted)
        // 16	Kannada
        ['macroman', 'shift-jis', 'big5', 'euc-kr', 'iso-8859-6', 'iso-8859-8', 'macgreek', 'maccyrillic', 'symbol', 'Devanagari', 'Gurmukhi', 'Gujarati', 'Oriya', 'Bengali', 'Tamil', 'Telugu', 'Kannada', 'Malayalam', 'Sinhalese', 'Burmese', 'Khmer', 'macthai', 'Laotian', 'Georgian', 'Armenian', 'gb-2312-80', 'Tibetan', 'Mongolian', 'Geez', 'maccenteuro', 'Vietnamese', 'Sindhi'], // ISO (deprecated)
        ['ascii'], // windows
        // Docs here: http://msdn.microsoft.com/en-us/library/system.text.encoding(v=vs.110).aspx
        ['symbol', 'utf16be', 'shift-jis', 'gb18030', 'big5', 'wansung', 'johab', null, null, null, 'utf16be']]; // Overrides for Mac scripts by language id.
        // See http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/Readme.txt

        var MAC_LANGUAGE_ENCODINGS = {
          15: 'maciceland',
          17: 'macturkish',
          18: 'maccroatian',
          24: 'maccenteuro',
          25: 'maccenteuro',
          26: 'maccenteuro',
          27: 'maccenteuro',
          28: 'maccenteuro',
          30: 'maciceland',
          37: 'macromania',
          38: 'maccenteuro',
          39: 'maccenteuro',
          40: 'maccenteuro',
          143: 'macinuit',
          // Unsupported by iconv-lite
          146: 'macgaelic' // Unsupported by iconv-lite

        }; // Map of platform ids to BCP-47 language codes.

        var LANGUAGES = [// unicode
        [], {
          // macintosh
          0: 'en',
          30: 'fo',
          60: 'ks',
          90: 'rw',
          1: 'fr',
          31: 'fa',
          61: 'ku',
          91: 'rn',
          2: 'de',
          32: 'ru',
          62: 'sd',
          92: 'ny',
          3: 'it',
          33: 'zh',
          63: 'bo',
          93: 'mg',
          4: 'nl',
          34: 'nl-BE',
          64: 'ne',
          94: 'eo',
          5: 'sv',
          35: 'ga',
          65: 'sa',
          128: 'cy',
          6: 'es',
          36: 'sq',
          66: 'mr',
          129: 'eu',
          7: 'da',
          37: 'ro',
          67: 'bn',
          130: 'ca',
          8: 'pt',
          38: 'cz',
          68: 'as',
          131: 'la',
          9: 'no',
          39: 'sk',
          69: 'gu',
          132: 'qu',
          10: 'he',
          40: 'si',
          70: 'pa',
          133: 'gn',
          11: 'ja',
          41: 'yi',
          71: 'or',
          134: 'ay',
          12: 'ar',
          42: 'sr',
          72: 'ml',
          135: 'tt',
          13: 'fi',
          43: 'mk',
          73: 'kn',
          136: 'ug',
          14: 'el',
          44: 'bg',
          74: 'ta',
          137: 'dz',
          15: 'is',
          45: 'uk',
          75: 'te',
          138: 'jv',
          16: 'mt',
          46: 'be',
          76: 'si',
          139: 'su',
          17: 'tr',
          47: 'uz',
          77: 'my',
          140: 'gl',
          18: 'hr',
          48: 'kk',
          78: 'km',
          141: 'af',
          19: 'zh-Hant',
          49: 'az-Cyrl',
          79: 'lo',
          142: 'br',
          20: 'ur',
          50: 'az-Arab',
          80: 'vi',
          143: 'iu',
          21: 'hi',
          51: 'hy',
          81: 'id',
          144: 'gd',
          22: 'th',
          52: 'ka',
          82: 'tl',
          145: 'gv',
          23: 'ko',
          53: 'mo',
          83: 'ms',
          146: 'ga',
          24: 'lt',
          54: 'ky',
          84: 'ms-Arab',
          147: 'to',
          25: 'pl',
          55: 'tg',
          85: 'am',
          148: 'el-polyton',
          26: 'hu',
          56: 'tk',
          86: 'ti',
          149: 'kl',
          27: 'es',
          57: 'mn-CN',
          87: 'om',
          150: 'az',
          28: 'lv',
          58: 'mn',
          88: 'so',
          151: 'nn',
          29: 'se',
          59: 'ps',
          89: 'sw'
        }, // ISO (deprecated)
        [], {
          // windows                                        
          0x0436: 'af',
          0x4009: 'en-IN',
          0x0487: 'rw',
          0x0432: 'tn',
          0x041C: 'sq',
          0x1809: 'en-IE',
          0x0441: 'sw',
          0x045B: 'si',
          0x0484: 'gsw',
          0x2009: 'en-JM',
          0x0457: 'kok',
          0x041B: 'sk',
          0x045E: 'am',
          0x4409: 'en-MY',
          0x0412: 'ko',
          0x0424: 'sl',
          0x1401: 'ar-DZ',
          0x1409: 'en-NZ',
          0x0440: 'ky',
          0x2C0A: 'es-AR',
          0x3C01: 'ar-BH',
          0x3409: 'en-PH',
          0x0454: 'lo',
          0x400A: 'es-BO',
          0x0C01: 'ar',
          0x4809: 'en-SG',
          0x0426: 'lv',
          0x340A: 'es-CL',
          0x0801: 'ar-IQ',
          0x1C09: 'en-ZA',
          0x0427: 'lt',
          0x240A: 'es-CO',
          0x2C01: 'ar-JO',
          0x2C09: 'en-TT',
          0x082E: 'dsb',
          0x140A: 'es-CR',
          0x3401: 'ar-KW',
          0x0809: 'en-GB',
          0x046E: 'lb',
          0x1C0A: 'es-DO',
          0x3001: 'ar-LB',
          0x0409: 'en',
          0x042F: 'mk',
          0x300A: 'es-EC',
          0x1001: 'ar-LY',
          0x3009: 'en-ZW',
          0x083E: 'ms-BN',
          0x440A: 'es-SV',
          0x1801: 'ary',
          0x0425: 'et',
          0x043E: 'ms',
          0x100A: 'es-GT',
          0x2001: 'ar-OM',
          0x0438: 'fo',
          0x044C: 'ml',
          0x480A: 'es-HN',
          0x4001: 'ar-QA',
          0x0464: 'fil',
          0x043A: 'mt',
          0x080A: 'es-MX',
          0x0401: 'ar-SA',
          0x040B: 'fi',
          0x0481: 'mi',
          0x4C0A: 'es-NI',
          0x2801: 'ar-SY',
          0x080C: 'fr-BE',
          0x047A: 'arn',
          0x180A: 'es-PA',
          0x1C01: 'aeb',
          0x0C0C: 'fr-CA',
          0x044E: 'mr',
          0x3C0A: 'es-PY',
          0x3801: 'ar-AE',
          0x040C: 'fr',
          0x047C: 'moh',
          0x280A: 'es-PE',
          0x2401: 'ar-YE',
          0x140C: 'fr-LU',
          0x0450: 'mn',
          0x500A: 'es-PR',
          0x042B: 'hy',
          0x180C: 'fr-MC',
          0x0850: 'mn-CN',
          0x0C0A: 'es',
          0x044D: 'as',
          0x100C: 'fr-CH',
          0x0461: 'ne',
          0x040A: 'es',
          0x082C: 'az-Cyrl',
          0x0462: 'fy',
          0x0414: 'nb',
          0x540A: 'es-US',
          0x042C: 'az',
          0x0456: 'gl',
          0x0814: 'nn',
          0x380A: 'es-UY',
          0x046D: 'ba',
          0x0437: 'ka',
          0x0482: 'oc',
          0x200A: 'es-VE',
          0x042D: 'eu',
          0x0C07: 'de-AT',
          0x0448: 'or',
          0x081D: 'sv-FI',
          0x0423: 'be',
          0x0407: 'de',
          0x0463: 'ps',
          0x041D: 'sv',
          0x0845: 'bn',
          0x1407: 'de-LI',
          0x0415: 'pl',
          0x045A: 'syr',
          0x0445: 'bn-IN',
          0x1007: 'de-LU',
          0x0416: 'pt',
          0x0428: 'tg',
          0x201A: 'bs-Cyrl',
          0x0807: 'de-CH',
          0x0816: 'pt-PT',
          0x085F: 'tzm',
          0x141A: 'bs',
          0x0408: 'el',
          0x0446: 'pa',
          0x0449: 'ta',
          0x047E: 'br',
          0x046F: 'kl',
          0x046B: 'qu-BO',
          0x0444: 'tt',
          0x0402: 'bg',
          0x0447: 'gu',
          0x086B: 'qu-EC',
          0x044A: 'te',
          0x0403: 'ca',
          0x0468: 'ha',
          0x0C6B: 'qu',
          0x041E: 'th',
          0x0C04: 'zh-HK',
          0x040D: 'he',
          0x0418: 'ro',
          0x0451: 'bo',
          0x1404: 'zh-MO',
          0x0439: 'hi',
          0x0417: 'rm',
          0x041F: 'tr',
          0x0804: 'zh',
          0x040E: 'hu',
          0x0419: 'ru',
          0x0442: 'tk',
          0x1004: 'zh-SG',
          0x040F: 'is',
          0x243B: 'smn',
          0x0480: 'ug',
          0x0404: 'zh-TW',
          0x0470: 'ig',
          0x103B: 'smj-NO',
          0x0422: 'uk',
          0x0483: 'co',
          0x0421: 'id',
          0x143B: 'smj',
          0x042E: 'hsb',
          0x041A: 'hr',
          0x045D: 'iu',
          0x0C3B: 'se-FI',
          0x0420: 'ur',
          0x101A: 'hr-BA',
          0x085D: 'iu-Latn',
          0x043B: 'se',
          0x0843: 'uz-Cyrl',
          0x0405: 'cs',
          0x083C: 'ga',
          0x083B: 'se-SE',
          0x0443: 'uz',
          0x0406: 'da',
          0x0434: 'xh',
          0x203B: 'sms',
          0x042A: 'vi',
          0x048C: 'prs',
          0x0435: 'zu',
          0x183B: 'sma-NO',
          0x0452: 'cy',
          0x0465: 'dv',
          0x0410: 'it',
          0x1C3B: 'sms',
          0x0488: 'wo',
          0x0813: 'nl-BE',
          0x0810: 'it-CH',
          0x044F: 'sa',
          0x0485: 'sah',
          0x0413: 'nl',
          0x0411: 'ja',
          0x1C1A: 'sr-Cyrl-BA',
          0x0478: 'ii',
          0x0C09: 'en-AU',
          0x044B: 'kn',
          0x0C1A: 'sr',
          0x046A: 'yo',
          0x2809: 'en-BZ',
          0x043F: 'kk',
          0x181A: 'sr-Latn-BA',
          0x1009: 'en-CA',
          0x0453: 'km',
          0x081A: 'sr-Latn',
          0x2409: 'en-029',
          0x0486: 'quc',
          0x046C: 'nso'
        }];
        var NameRecord = new r.Struct({
          platformID: r.uint16,
          encodingID: r.uint16,
          languageID: r.uint16,
          nameID: r.uint16,
          length: r.uint16,
          string: new r.Pointer(r.uint16, new r.String('length', function (t) {
            return getEncoding(t.platformID, t.encodingID, t.languageID);
          }), {
            type: 'parent',
            relativeTo: 'parent.stringOffset',
            allowNull: false
          })
        });
        var LangTagRecord = new r.Struct({
          length: r.uint16,
          tag: new r.Pointer(r.uint16, new r.String('length', 'utf16be'), {
            type: 'parent',
            relativeTo: 'stringOffset'
          })
        });
        var NameTable = new r.VersionedStruct(r.uint16, {
          0: {
            count: r.uint16,
            stringOffset: r.uint16,
            records: new r.Array(NameRecord, 'count')
          },
          1: {
            count: r.uint16,
            stringOffset: r.uint16,
            records: new r.Array(NameRecord, 'count'),
            langTagCount: r.uint16,
            langTags: new r.Array(LangTagRecord, 'langTagCount')
          }
        });
        var NAMES = ['copyright', 'fontFamily', 'fontSubfamily', 'uniqueSubfamily', 'fullName', 'version', 'postscriptName', // Note: A font may have only one PostScript name and that name must be ASCII.
        'trademark', 'manufacturer', 'designer', 'description', 'vendorURL', 'designerURL', 'license', 'licenseURL', null, // reserved
        'preferredFamily', 'preferredSubfamily', 'compatibleFull', 'sampleText', 'postscriptCIDFontName', 'wwsFamilyName', 'wwsSubfamilyName'];

        NameTable.process = function (stream) {
          var records = {};

          for (var _iterator = this.records, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
            var _ref;

            if (_isArray) {
              if (_i >= _iterator.length) break;
              _ref = _iterator[_i++];
            } else {
              _i = _iterator.next();
              if (_i.done) break;
              _ref = _i.value;
            }

            var record = _ref; // find out what language this is for

            var language = LANGUAGES[record.platformID][record.languageID];

            if (language == null && this.langTags != null && record.languageID >= 0x8000) {
              language = this.langTags[record.languageID - 0x8000].tag;
            }

            if (language == null) {
              language = record.platformID + '-' + record.languageID;
            } // if the nameID is >= 256, it is a font feature record (AAT)


            var key = record.nameID >= 256 ? 'fontFeatures' : NAMES[record.nameID] || record.nameID;

            if (records[key] == null) {
              records[key] = {};
            }

            var obj = records[key];

            if (record.nameID >= 256) {
              obj = obj[record.nameID] || (obj[record.nameID] = {});
            }

            if (typeof record.string === 'string' || typeof obj[language] !== 'string') {
              obj[language] = record.string;
            }
          }

          this.records = records;
        };

        NameTable.preEncode = function () {
          if (Array.isArray(this.records)) return;
          this.version = 0;
          var records = [];

          for (var key in this.records) {
            var val = this.records[key];
            if (key === 'fontFeatures') continue;
            records.push({
              platformID: 3,
              encodingID: 1,
              languageID: 0x409,
              nameID: NAMES.indexOf(key),
              length: Buffer.byteLength(val.en, 'utf16le'),
              string: val.en
            });

            if (key === 'postscriptName') {
              records.push({
                platformID: 1,
                encodingID: 0,
                languageID: 0,
                nameID: NAMES.indexOf(key),
                length: val.en.length,
                string: val.en
              });
            }
          }

          this.records = records;
          this.count = records.length;
          this.stringOffset = NameTable.size(this, null, false);
        };

        var OS2 = new r.VersionedStruct(r.uint16, {
          header: {
            xAvgCharWidth: r.int16,
            // average weighted advance width of lower case letters and space
            usWeightClass: r.uint16,
            // visual weight of stroke in glyphs
            usWidthClass: r.uint16,
            // relative change from the normal aspect ratio (width to height ratio)
            fsType: new r.Bitfield(r.uint16, [// Indicates font embedding licensing rights
            null, 'noEmbedding', 'viewOnly', 'editable', null, null, null, null, 'noSubsetting', 'bitmapOnly']),
            ySubscriptXSize: r.int16,
            // recommended horizontal size in pixels for subscripts
            ySubscriptYSize: r.int16,
            // recommended vertical size in pixels for subscripts
            ySubscriptXOffset: r.int16,
            // recommended horizontal offset for subscripts
            ySubscriptYOffset: r.int16,
            // recommended vertical offset form the baseline for subscripts
            ySuperscriptXSize: r.int16,
            // recommended horizontal size in pixels for superscripts
            ySuperscriptYSize: r.int16,
            // recommended vertical size in pixels for superscripts
            ySuperscriptXOffset: r.int16,
            // recommended horizontal offset for superscripts
            ySuperscriptYOffset: r.int16,
            // recommended vertical offset from the baseline for superscripts
            yStrikeoutSize: r.int16,
            // width of the strikeout stroke
            yStrikeoutPosition: r.int16,
            // position of the strikeout stroke relative to the baseline
            sFamilyClass: r.int16,
            // classification of font-family design
            panose: new r.Array(r.uint8, 10),
            // describe the visual characteristics of a given typeface
            ulCharRange: new r.Array(r.uint32, 4),
            vendorID: new r.String(4),
            // four character identifier for the font vendor
            fsSelection: new r.Bitfield(r.uint16, [// bit field containing information about the font
            'italic', 'underscore', 'negative', 'outlined', 'strikeout', 'bold', 'regular', 'useTypoMetrics', 'wws', 'oblique']),
            usFirstCharIndex: r.uint16,
            // The minimum Unicode index in this font
            usLastCharIndex: r.uint16 // The maximum Unicode index in this font

          },
          // The Apple version of this table ends here, but the Microsoft one continues on...
          0: {},
          1: {
            typoAscender: r.int16,
            typoDescender: r.int16,
            typoLineGap: r.int16,
            winAscent: r.uint16,
            winDescent: r.uint16,
            codePageRange: new r.Array(r.uint32, 2)
          },
          2: {
            // these should be common with version 1 somehow
            typoAscender: r.int16,
            typoDescender: r.int16,
            typoLineGap: r.int16,
            winAscent: r.uint16,
            winDescent: r.uint16,
            codePageRange: new r.Array(r.uint32, 2),
            xHeight: r.int16,
            capHeight: r.int16,
            defaultChar: r.uint16,
            breakChar: r.uint16,
            maxContent: r.uint16
          },
          5: {
            typoAscender: r.int16,
            typoDescender: r.int16,
            typoLineGap: r.int16,
            winAscent: r.uint16,
            winDescent: r.uint16,
            codePageRange: new r.Array(r.uint32, 2),
            xHeight: r.int16,
            capHeight: r.int16,
            defaultChar: r.uint16,
            breakChar: r.uint16,
            maxContent: r.uint16,
            usLowerOpticalPointSize: r.uint16,
            usUpperOpticalPointSize: r.uint16
          }
        });
        var versions = OS2.versions;
        versions[3] = versions[4] = versions[2]; // PostScript information

        var post = new r.VersionedStruct(r.fixed32, {
          header: {
            // these fields exist at the top of all versions
            italicAngle: r.fixed32,
            // Italic angle in counter-clockwise degrees from the vertical.
            underlinePosition: r.int16,
            // Suggested distance of the top of the underline from the baseline
            underlineThickness: r.int16,
            // Suggested values for the underline thickness
            isFixedPitch: r.uint32,
            // Whether the font is monospaced
            minMemType42: r.uint32,
            // Minimum memory usage when a TrueType font is downloaded as a Type 42 font
            maxMemType42: r.uint32,
            // Maximum memory usage when a TrueType font is downloaded as a Type 42 font
            minMemType1: r.uint32,
            // Minimum memory usage when a TrueType font is downloaded as a Type 1 font
            maxMemType1: r.uint32 // Maximum memory usage when a TrueType font is downloaded as a Type 1 font

          },
          1: {},
          // version 1 has no additional fields
          2: {
            numberOfGlyphs: r.uint16,
            glyphNameIndex: new r.Array(r.uint16, 'numberOfGlyphs'),
            names: new r.Array(new r.String(r.uint8))
          },
          2.5: {
            numberOfGlyphs: r.uint16,
            offsets: new r.Array(r.uint8, 'numberOfGlyphs')
          },
          3: {},
          // version 3 has no additional fields
          4: {
            map: new r.Array(r.uint32, function (t) {
              return t.parent.maxp.numGlyphs;
            })
          }
        }); // An array of predefined values accessible by instructions

        var cvt = new r.Struct({
          controlValues: new r.Array(r.int16)
        }); // A list of instructions that are executed once when a font is first used.
        // These instructions are known as the font program. The main use of this table
        // is for the definition of functions that are used in many different glyph programs.

        var fpgm = new r.Struct({
          instructions: new r.Array(r.uint8)
        });
        var loca = new r.VersionedStruct('head.indexToLocFormat', {
          0: {
            offsets: new r.Array(r.uint16)
          },
          1: {
            offsets: new r.Array(r.uint32)
          }
        });

        loca.process = function () {
          if (this.version === 0) {
            for (var i = 0; i < this.offsets.length; i++) {
              this.offsets[i] <<= 1;
            }
          }
        };

        loca.preEncode = function () {
          if (this.version === 0) {
            for (var i = 0; i < this.offsets.length; i++) {
              this.offsets[i] >>>= 1;
            }
          }
        }; // Set of instructions executed whenever the point size or font transformation change


        var prep = new r.Struct({
          controlValueProgram: new r.Array(r.uint8)
        }); // only used for encoding

        var glyf = new r.Array(new r.Buffer());

        var CFFIndex = function () {
          function CFFIndex(type) {
            _classCallCheck(this, CFFIndex);

            this.type = type;
          }

          CFFIndex.prototype.getCFFVersion = function getCFFVersion(ctx) {
            while (ctx && !ctx.hdrSize) {
              ctx = ctx.parent;
            }

            return ctx ? ctx.version : -1;
          };

          CFFIndex.prototype.decode = function decode(stream, parent) {
            var version = this.getCFFVersion(parent);
            var count = version >= 2 ? stream.readUInt32BE() : stream.readUInt16BE();

            if (count === 0) {
              return [];
            }

            var offSize = stream.readUInt8();
            var offsetType = void 0;

            if (offSize === 1) {
              offsetType = r.uint8;
            } else if (offSize === 2) {
              offsetType = r.uint16;
            } else if (offSize === 3) {
              offsetType = r.uint24;
            } else if (offSize === 4) {
              offsetType = r.uint32;
            } else {
              throw new Error("Bad offset size in CFFIndex: " + offSize + " " + stream.pos);
            }

            var ret = [];
            var startPos = stream.pos + (count + 1) * offSize - 1;
            var start = offsetType.decode(stream);

            for (var i = 0; i < count; i++) {
              var end = offsetType.decode(stream);

              if (this.type != null) {
                var pos = stream.pos;
                stream.pos = startPos + start;
                parent.length = end - start;
                ret.push(this.type.decode(stream, parent));
                stream.pos = pos;
              } else {
                ret.push({
                  offset: startPos + start,
                  length: end - start
                });
              }

              start = end;
            }

            stream.pos = startPos + start;
            return ret;
          };

          CFFIndex.prototype.size = function size(arr, parent) {
            var size = 2;

            if (arr.length === 0) {
              return size;
            }

            var type = this.type || new r.Buffer(); // find maximum offset to detminine offset type

            var offset = 1;

            for (var i = 0; i < arr.length; i++) {
              var item = arr[i];
              offset += type.size(item, parent);
            }

            var offsetType = void 0;

            if (offset <= 0xff) {
              offsetType = r.uint8;
            } else if (offset <= 0xffff) {
              offsetType = r.uint16;
            } else if (offset <= 0xffffff) {
              offsetType = r.uint24;
            } else if (offset <= 0xffffffff) {
              offsetType = r.uint32;
            } else {
              throw new Error("Bad offset in CFFIndex");
            }

            size += 1 + offsetType.size() * (arr.length + 1);
            size += offset - 1;
            return size;
          };

          CFFIndex.prototype.encode = function encode(stream, arr, parent) {
            stream.writeUInt16BE(arr.length);

            if (arr.length === 0) {
              return;
            }

            var type = this.type || new r.Buffer(); // find maximum offset to detminine offset type

            var sizes = [];
            var offset = 1;

            for (var _iterator = arr, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
              var _ref;

              if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref = _iterator[_i++];
              } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref = _i.value;
              }

              var item = _ref;
              var s = type.size(item, parent);
              sizes.push(s);
              offset += s;
            }

            var offsetType = void 0;

            if (offset <= 0xff) {
              offsetType = r.uint8;
            } else if (offset <= 0xffff) {
              offsetType = r.uint16;
            } else if (offset <= 0xffffff) {
              offsetType = r.uint24;
            } else if (offset <= 0xffffffff) {
              offsetType = r.uint32;
            } else {
              throw new Error("Bad offset in CFFIndex");
            } // write offset size


            stream.writeUInt8(offsetType.size()); // write elements

            offset = 1;
            offsetType.encode(stream, offset);

            for (var _iterator2 = sizes, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
              var _ref2;

              if (_isArray2) {
                if (_i2 >= _iterator2.length) break;
                _ref2 = _iterator2[_i2++];
              } else {
                _i2 = _iterator2.next();
                if (_i2.done) break;
                _ref2 = _i2.value;
              }

              var size = _ref2;
              offset += size;
              offsetType.encode(stream, offset);
            }

            for (var _iterator3 = arr, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
              var _ref3;

              if (_isArray3) {
                if (_i3 >= _iterator3.length) break;
                _ref3 = _iterator3[_i3++];
              } else {
                _i3 = _iterator3.next();
                if (_i3.done) break;
                _ref3 = _i3.value;
              }

              var _item = _ref3;
              type.encode(stream, _item, parent);
            }

            return;
          };

          return CFFIndex;
        }();

        var FLOAT_EOF = 0xf;
        var FLOAT_LOOKUP = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.', 'E', 'E-', null, '-'];
        var FLOAT_ENCODE_LOOKUP = {
          '.': 10,
          'E': 11,
          'E-': 12,
          '-': 14
        };

        var CFFOperand = function () {
          function CFFOperand() {
            _classCallCheck(this, CFFOperand);
          }

          CFFOperand.decode = function decode(stream, value) {
            if (32 <= value && value <= 246) {
              return value - 139;
            }

            if (247 <= value && value <= 250) {
              return (value - 247) * 256 + stream.readUInt8() + 108;
            }

            if (251 <= value && value <= 254) {
              return -(value - 251) * 256 - stream.readUInt8() - 108;
            }

            if (value === 28) {
              return stream.readInt16BE();
            }

            if (value === 29) {
              return stream.readInt32BE();
            }

            if (value === 30) {
              var str = '';

              while (true) {
                var b = stream.readUInt8();
                var n1 = b >> 4;

                if (n1 === FLOAT_EOF) {
                  break;
                }

                str += FLOAT_LOOKUP[n1];
                var n2 = b & 15;

                if (n2 === FLOAT_EOF) {
                  break;
                }

                str += FLOAT_LOOKUP[n2];
              }

              return parseFloat(str);
            }

            return null;
          };

          CFFOperand.size = function size(value) {
            // if the value needs to be forced to the largest size (32 bit)
            // e.g. for unknown pointers, set to 32768
            if (value.forceLarge) {
              value = 32768;
            }

            if ((value | 0) !== value) {
              // floating point
              var str = '' + value;
              return 1 + Math.ceil((str.length + 1) / 2);
            } else if (-107 <= value && value <= 107) {
              return 1;
            } else if (108 <= value && value <= 1131 || -1131 <= value && value <= -108) {
              return 2;
            } else if (-32768 <= value && value <= 32767) {
              return 3;
            } else {
              return 5;
            }
          };

          CFFOperand.encode = function encode(stream, value) {
            // if the value needs to be forced to the largest size (32 bit)
            // e.g. for unknown pointers, save the old value and set to 32768
            var val = Number(value);

            if (value.forceLarge) {
              stream.writeUInt8(29);
              return stream.writeInt32BE(val);
            } else if ((val | 0) !== val) {
              // floating point
              stream.writeUInt8(30);
              var str = '' + val;

              for (var i = 0; i < str.length; i += 2) {
                var c1 = str[i];
                var n1 = FLOAT_ENCODE_LOOKUP[c1] || +c1;

                if (i === str.length - 1) {
                  var n2 = FLOAT_EOF;
                } else {
                  var c2 = str[i + 1];
                  var n2 = FLOAT_ENCODE_LOOKUP[c2] || +c2;
                }

                stream.writeUInt8(n1 << 4 | n2 & 15);
              }

              if (n2 !== FLOAT_EOF) {
                return stream.writeUInt8(FLOAT_EOF << 4);
              }
            } else if (-107 <= val && val <= 107) {
              return stream.writeUInt8(val + 139);
            } else if (108 <= val && val <= 1131) {
              val -= 108;
              stream.writeUInt8((val >> 8) + 247);
              return stream.writeUInt8(val & 0xff);
            } else if (-1131 <= val && val <= -108) {
              val = -val - 108;
              stream.writeUInt8((val >> 8) + 251);
              return stream.writeUInt8(val & 0xff);
            } else if (-32768 <= val && val <= 32767) {
              stream.writeUInt8(28);
              return stream.writeInt16BE(val);
            } else {
              stream.writeUInt8(29);
              return stream.writeInt32BE(val);
            }
          };

          return CFFOperand;
        }();

        var CFFDict = function () {
          function CFFDict() {
            var ops = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

            _classCallCheck(this, CFFDict);

            this.ops = ops;
            this.fields = {};

            for (var _iterator = ops, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
              var _ref;

              if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref = _iterator[_i++];
              } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref = _i.value;
              }

              var field = _ref;
              var key = Array.isArray(field[0]) ? field[0][0] << 8 | field[0][1] : field[0];
              this.fields[key] = field;
            }
          }

          CFFDict.prototype.decodeOperands = function decodeOperands(type, stream, ret, operands) {
            var _this = this;

            if (Array.isArray(type)) {
              return operands.map(function (op, i) {
                return _this.decodeOperands(type[i], stream, ret, [op]);
              });
            } else if (type.decode != null) {
              return type.decode(stream, ret, operands);
            } else {
              switch (type) {
                case 'number':
                case 'offset':
                case 'sid':
                  return operands[0];

                case 'boolean':
                  return !!operands[0];

                default:
                  return operands;
              }
            }
          };

          CFFDict.prototype.encodeOperands = function encodeOperands(type, stream, ctx, operands) {
            var _this2 = this;

            if (Array.isArray(type)) {
              return operands.map(function (op, i) {
                return _this2.encodeOperands(type[i], stream, ctx, op)[0];
              });
            } else if (type.encode != null) {
              return type.encode(stream, operands, ctx);
            } else if (typeof operands === 'number') {
              return [operands];
            } else if (typeof operands === 'boolean') {
              return [+operands];
            } else if (Array.isArray(operands)) {
              return operands;
            } else {
              return [operands];
            }
          };

          CFFDict.prototype.decode = function decode(stream, parent) {
            var end = stream.pos + parent.length;
            var ret = {};
            var operands = []; // define hidden properties

            _Object$defineProperties(ret, {
              parent: {
                value: parent
              },
              _startOffset: {
                value: stream.pos
              }
            }); // fill in defaults


            for (var key in this.fields) {
              var field = this.fields[key];
              ret[field[1]] = field[3];
            }

            while (stream.pos < end) {
              var b = stream.readUInt8();

              if (b < 28) {
                if (b === 12) {
                  b = b << 8 | stream.readUInt8();
                }

                var _field = this.fields[b];

                if (!_field) {
                  throw new Error('Unknown operator ' + b);
                }

                var val = this.decodeOperands(_field[2], stream, ret, operands);

                if (val != null) {
                  if (val instanceof restructure_src_utils.PropertyDescriptor) {
                    _Object$defineProperty(ret, _field[1], val);
                  } else {
                    ret[_field[1]] = val;
                  }
                }

                operands = [];
              } else {
                operands.push(CFFOperand.decode(stream, b));
              }
            }

            return ret;
          };

          CFFDict.prototype.size = function size(dict, parent) {
            var includePointers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
            var ctx = {
              parent: parent,
              val: dict,
              pointerSize: 0,
              startOffset: parent.startOffset || 0
            };
            var len = 0;

            for (var k in this.fields) {
              var field = this.fields[k];
              var val = dict[field[1]];

              if (val == null || isEqual(val, field[3])) {
                continue;
              }

              var operands = this.encodeOperands(field[2], null, ctx, val);

              for (var _iterator2 = operands, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
                var _ref2;

                if (_isArray2) {
                  if (_i2 >= _iterator2.length) break;
                  _ref2 = _iterator2[_i2++];
                } else {
                  _i2 = _iterator2.next();
                  if (_i2.done) break;
                  _ref2 = _i2.value;
                }

                var op = _ref2;
                len += CFFOperand.size(op);
              }

              var key = Array.isArray(field[0]) ? field[0] : [field[0]];
              len += key.length;
            }

            if (includePointers) {
              len += ctx.pointerSize;
            }

            return len;
          };

          CFFDict.prototype.encode = function encode(stream, dict, parent) {
            var ctx = {
              pointers: [],
              startOffset: stream.pos,
              parent: parent,
              val: dict,
              pointerSize: 0
            };
            ctx.pointerOffset = stream.pos + this.size(dict, ctx, false);

            for (var _iterator3 = this.ops, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
              var _ref3;

              if (_isArray3) {
                if (_i3 >= _iterator3.length) break;
                _ref3 = _iterator3[_i3++];
              } else {
                _i3 = _iterator3.next();
                if (_i3.done) break;
                _ref3 = _i3.value;
              }

              var field = _ref3;
              var val = dict[field[1]];

              if (val == null || isEqual(val, field[3])) {
                continue;
              }

              var operands = this.encodeOperands(field[2], stream, ctx, val);

              for (var _iterator4 = operands, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _getIterator(_iterator4);;) {
                var _ref4;

                if (_isArray4) {
                  if (_i4 >= _iterator4.length) break;
                  _ref4 = _iterator4[_i4++];
                } else {
                  _i4 = _iterator4.next();
                  if (_i4.done) break;
                  _ref4 = _i4.value;
                }

                var op = _ref4;
                CFFOperand.encode(stream, op);
              }

              var key = Array.isArray(field[0]) ? field[0] : [field[0]];

              for (var _iterator5 = key, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _getIterator(_iterator5);;) {
                var _ref5;

                if (_isArray5) {
                  if (_i5 >= _iterator5.length) break;
                  _ref5 = _iterator5[_i5++];
                } else {
                  _i5 = _iterator5.next();
                  if (_i5.done) break;
                  _ref5 = _i5.value;
                }

                var _op = _ref5;
                stream.writeUInt8(_op);
              }
            }

            var i = 0;

            while (i < ctx.pointers.length) {
              var ptr = ctx.pointers[i++];
              ptr.type.encode(stream, ptr.val, ptr.parent);
            }

            return;
          };

          return CFFDict;
        }();

        var CFFPointer = function (_r$Pointer) {
          _inherits(CFFPointer, _r$Pointer);

          function CFFPointer(type) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            _classCallCheck(this, CFFPointer);

            if (options.type == null) {
              options.type = 'global';
            }

            return _possibleConstructorReturn(this, _r$Pointer.call(this, null, type, options));
          }

          CFFPointer.prototype.decode = function decode(stream, parent, operands) {
            this.offsetType = {
              decode: function decode() {
                return operands[0];
              }
            };
            return _r$Pointer.prototype.decode.call(this, stream, parent, operands);
          };

          CFFPointer.prototype.encode = function encode(stream, value, ctx) {
            if (!stream) {
              // compute the size (so ctx.pointerSize is correct)
              this.offsetType = {
                size: function size() {
                  return 0;
                }
              };
              this.size(value, ctx);
              return [new Ptr(0)];
            }

            var ptr = null;
            this.offsetType = {
              encode: function encode(stream, val) {
                return ptr = val;
              }
            };

            _r$Pointer.prototype.encode.call(this, stream, value, ctx);

            return [new Ptr(ptr)];
          };

          return CFFPointer;
        }(r.Pointer);

        var Ptr = function () {
          function Ptr(val) {
            _classCallCheck(this, Ptr);

            this.val = val;
            this.forceLarge = true;
          }

          Ptr.prototype.valueOf = function valueOf() {
            return this.val;
          };

          return Ptr;
        }();

        var CFFBlendOp = function () {
          function CFFBlendOp() {
            _classCallCheck(this, CFFBlendOp);
          }

          CFFBlendOp.decode = function decode(stream, parent, operands) {
            var numBlends = operands.pop(); // TODO: actually blend. For now just consume the deltas
            // since we don't use any of the values anyway.

            while (operands.length > numBlends) {
              operands.pop();
            }
          };

          return CFFBlendOp;
        }();

        var CFFPrivateDict = new CFFDict([// key       name                    type                                          default
        [6, 'BlueValues', 'delta', null], [7, 'OtherBlues', 'delta', null], [8, 'FamilyBlues', 'delta', null], [9, 'FamilyOtherBlues', 'delta', null], [[12, 9], 'BlueScale', 'number', 0.039625], [[12, 10], 'BlueShift', 'number', 7], [[12, 11], 'BlueFuzz', 'number', 1], [10, 'StdHW', 'number', null], [11, 'StdVW', 'number', null], [[12, 12], 'StemSnapH', 'delta', null], [[12, 13], 'StemSnapV', 'delta', null], [[12, 14], 'ForceBold', 'boolean', false], [[12, 17], 'LanguageGroup', 'number', 0], [[12, 18], 'ExpansionFactor', 'number', 0.06], [[12, 19], 'initialRandomSeed', 'number', 0], [20, 'defaultWidthX', 'number', 0], [21, 'nominalWidthX', 'number', 0], [22, 'vsindex', 'number', 0], [23, 'blend', CFFBlendOp, null], [19, 'Subrs', new CFFPointer(new CFFIndex(), {
          type: 'local'
        }), null]]); // Automatically generated from Appendix A of the CFF specification; do
        // not edit. Length should be 391.

        var standardStrings = [".notdef", "space", "exclam", "quotedbl", "numbersign", "dollar", "percent", "ampersand", "quoteright", "parenleft", "parenright", "asterisk", "plus", "comma", "hyphen", "period", "slash", "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "colon", "semicolon", "less", "equal", "greater", "question", "at", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "bracketleft", "backslash", "bracketright", "asciicircum", "underscore", "quoteleft", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "braceleft", "bar", "braceright", "asciitilde", "exclamdown", "cent", "sterling", "fraction", "yen", "florin", "section", "currency", "quotesingle", "quotedblleft", "guillemotleft", "guilsinglleft", "guilsinglright", "fi", "fl", "endash", "dagger", "daggerdbl", "periodcentered", "paragraph", "bullet", "quotesinglbase", "quotedblbase", "quotedblright", "guillemotright", "ellipsis", "perthousand", "questiondown", "grave", "acute", "circumflex", "tilde", "macron", "breve", "dotaccent", "dieresis", "ring", "cedilla", "hungarumlaut", "ogonek", "caron", "emdash", "AE", "ordfeminine", "Lslash", "Oslash", "OE", "ordmasculine", "ae", "dotlessi", "lslash", "oslash", "oe", "germandbls", "onesuperior", "logicalnot", "mu", "trademark", "Eth", "onehalf", "plusminus", "Thorn", "onequarter", "divide", "brokenbar", "degree", "thorn", "threequarters", "twosuperior", "registered", "minus", "eth", "multiply", "threesuperior", "copyright", "Aacute", "Acircumflex", "Adieresis", "Agrave", "Aring", "Atilde", "Ccedilla", "Eacute", "Ecircumflex", "Edieresis", "Egrave", "Iacute", "Icircumflex", "Idieresis", "Igrave", "Ntilde", "Oacute", "Ocircumflex", "Odieresis", "Ograve", "Otilde", "Scaron", "Uacute", "Ucircumflex", "Udieresis", "Ugrave", "Yacute", "Ydieresis", "Zcaron", "aacute", "acircumflex", "adieresis", "agrave", "aring", "atilde", "ccedilla", "eacute", "ecircumflex", "edieresis", "egrave", "iacute", "icircumflex", "idieresis", "igrave", "ntilde", "oacute", "ocircumflex", "odieresis", "ograve", "otilde", "scaron", "uacute", "ucircumflex", "udieresis", "ugrave", "yacute", "ydieresis", "zcaron", "exclamsmall", "Hungarumlautsmall", "dollaroldstyle", "dollarsuperior", "ampersandsmall", "Acutesmall", "parenleftsuperior", "parenrightsuperior", "twodotenleader", "onedotenleader", "zerooldstyle", "oneoldstyle", "twooldstyle", "threeoldstyle", "fouroldstyle", "fiveoldstyle", "sixoldstyle", "sevenoldstyle", "eightoldstyle", "nineoldstyle", "commasuperior", "threequartersemdash", "periodsuperior", "questionsmall", "asuperior", "bsuperior", "centsuperior", "dsuperior", "esuperior", "isuperior", "lsuperior", "msuperior", "nsuperior", "osuperior", "rsuperior", "ssuperior", "tsuperior", "ff", "ffi", "ffl", "parenleftinferior", "parenrightinferior", "Circumflexsmall", "hyphensuperior", "Gravesmall", "Asmall", "Bsmall", "Csmall", "Dsmall", "Esmall", "Fsmall", "Gsmall", "Hsmall", "Ismall", "Jsmall", "Ksmall", "Lsmall", "Msmall", "Nsmall", "Osmall", "Psmall", "Qsmall", "Rsmall", "Ssmall", "Tsmall", "Usmall", "Vsmall", "Wsmall", "Xsmall", "Ysmall", "Zsmall", "colonmonetary", "onefitted", "rupiah", "Tildesmall", "exclamdownsmall", "centoldstyle", "Lslashsmall", "Scaronsmall", "Zcaronsmall", "Dieresissmall", "Brevesmall", "Caronsmall", "Dotaccentsmall", "Macronsmall", "figuredash", "hypheninferior", "Ogoneksmall", "Ringsmall", "Cedillasmall", "questiondownsmall", "oneeighth", "threeeighths", "fiveeighths", "seveneighths", "onethird", "twothirds", "zerosuperior", "foursuperior", "fivesuperior", "sixsuperior", "sevensuperior", "eightsuperior", "ninesuperior", "zeroinferior", "oneinferior", "twoinferior", "threeinferior", "fourinferior", "fiveinferior", "sixinferior", "seveninferior", "eightinferior", "nineinferior", "centinferior", "dollarinferior", "periodinferior", "commainferior", "Agravesmall", "Aacutesmall", "Acircumflexsmall", "Atildesmall", "Adieresissmall", "Aringsmall", "AEsmall", "Ccedillasmall", "Egravesmall", "Eacutesmall", "Ecircumflexsmall", "Edieresissmall", "Igravesmall", "Iacutesmall", "Icircumflexsmall", "Idieresissmall", "Ethsmall", "Ntildesmall", "Ogravesmall", "Oacutesmall", "Ocircumflexsmall", "Otildesmall", "Odieresissmall", "OEsmall", "Oslashsmall", "Ugravesmall", "Uacutesmall", "Ucircumflexsmall", "Udieresissmall", "Yacutesmall", "Thornsmall", "Ydieresissmall", "001.000", "001.001", "001.002", "001.003", "Black", "Bold", "Book", "Light", "Medium", "Regular", "Roman", "Semibold"];
        var StandardEncoding = ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quoteright', 'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater', 'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore', 'quoteleft', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'exclamdown', 'cent', 'sterling', 'fraction', 'yen', 'florin', 'section', 'currency', 'quotesingle', 'quotedblleft', 'guillemotleft', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', '', 'endash', 'dagger', 'daggerdbl', 'periodcentered', '', 'paragraph', 'bullet', 'quotesinglbase', 'quotedblbase', 'quotedblright', 'guillemotright', 'ellipsis', 'perthousand', '', 'questiondown', '', 'grave', 'acute', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'dieresis', '', 'ring', 'cedilla', '', 'hungarumlaut', 'ogonek', 'caron', 'emdash', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'AE', '', 'ordfeminine', '', '', '', '', 'Lslash', 'Oslash', 'OE', 'ordmasculine', '', '', '', '', '', 'ae', '', '', '', 'dotlessi', '', '', 'lslash', 'oslash', 'oe', 'germandbls'];
        var ExpertEncoding = ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'space', 'exclamsmall', 'Hungarumlautsmall', '', 'dollaroldstyle', 'dollarsuperior', 'ampersandsmall', 'Acutesmall', 'parenleftsuperior', 'parenrightsuperior', 'twodotenleader', 'onedotenleader', 'comma', 'hyphen', 'period', 'fraction', 'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle', 'fouroldstyle', 'fiveoldstyle', 'sixoldstyle', 'sevenoldstyle', 'eightoldstyle', 'nineoldstyle', 'colon', 'semicolon', 'commasuperior', 'threequartersemdash', 'periodsuperior', 'questionsmall', '', 'asuperior', 'bsuperior', 'centsuperior', 'dsuperior', 'esuperior', '', '', 'isuperior', '', '', 'lsuperior', 'msuperior', 'nsuperior', 'osuperior', '', '', 'rsuperior', 'ssuperior', 'tsuperior', '', 'ff', 'fi', 'fl', 'ffi', 'ffl', 'parenleftinferior', '', 'parenrightinferior', 'Circumflexsmall', 'hyphensuperior', 'Gravesmall', 'Asmall', 'Bsmall', 'Csmall', 'Dsmall', 'Esmall', 'Fsmall', 'Gsmall', 'Hsmall', 'Ismall', 'Jsmall', 'Ksmall', 'Lsmall', 'Msmall', 'Nsmall', 'Osmall', 'Psmall', 'Qsmall', 'Rsmall', 'Ssmall', 'Tsmall', 'Usmall', 'Vsmall', 'Wsmall', 'Xsmall', 'Ysmall', 'Zsmall', 'colonmonetary', 'onefitted', 'rupiah', 'Tildesmall', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'exclamdownsmall', 'centoldstyle', 'Lslashsmall', '', '', 'Scaronsmall', 'Zcaronsmall', 'Dieresissmall', 'Brevesmall', 'Caronsmall', '', 'Dotaccentsmall', '', '', 'Macronsmall', '', '', 'figuredash', 'hypheninferior', '', '', 'Ogoneksmall', 'Ringsmall', 'Cedillasmall', '', '', '', 'onequarter', 'onehalf', 'threequarters', 'questiondownsmall', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'onethird', 'twothirds', '', '', 'zerosuperior', 'onesuperior', 'twosuperior', 'threesuperior', 'foursuperior', 'fivesuperior', 'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior', 'zeroinferior', 'oneinferior', 'twoinferior', 'threeinferior', 'fourinferior', 'fiveinferior', 'sixinferior', 'seveninferior', 'eightinferior', 'nineinferior', 'centinferior', 'dollarinferior', 'periodinferior', 'commainferior', 'Agravesmall', 'Aacutesmall', 'Acircumflexsmall', 'Atildesmall', 'Adieresissmall', 'Aringsmall', 'AEsmall', 'Ccedillasmall', 'Egravesmall', 'Eacutesmall', 'Ecircumflexsmall', 'Edieresissmall', 'Igravesmall', 'Iacutesmall', 'Icircumflexsmall', 'Idieresissmall', 'Ethsmall', 'Ntildesmall', 'Ogravesmall', 'Oacutesmall', 'Ocircumflexsmall', 'Otildesmall', 'Odieresissmall', 'OEsmall', 'Oslashsmall', 'Ugravesmall', 'Uacutesmall', 'Ucircumflexsmall', 'Udieresissmall', 'Yacutesmall', 'Thornsmall', 'Ydieresissmall'];
        var ISOAdobeCharset = ['.notdef', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quoteright', 'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater', 'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore', 'quoteleft', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', 'exclamdown', 'cent', 'sterling', 'fraction', 'yen', 'florin', 'section', 'currency', 'quotesingle', 'quotedblleft', 'guillemotleft', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', 'endash', 'dagger', 'daggerdbl', 'periodcentered', 'paragraph', 'bullet', 'quotesinglbase', 'quotedblbase', 'quotedblright', 'guillemotright', 'ellipsis', 'perthousand', 'questiondown', 'grave', 'acute', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'dieresis', 'ring', 'cedilla', 'hungarumlaut', 'ogonek', 'caron', 'emdash', 'AE', 'ordfeminine', 'Lslash', 'Oslash', 'OE', 'ordmasculine', 'ae', 'dotlessi', 'lslash', 'oslash', 'oe', 'germandbls', 'onesuperior', 'logicalnot', 'mu', 'trademark', 'Eth', 'onehalf', 'plusminus', 'Thorn', 'onequarter', 'divide', 'brokenbar', 'degree', 'thorn', 'threequarters', 'twosuperior', 'registered', 'minus', 'eth', 'multiply', 'threesuperior', 'copyright', 'Aacute', 'Acircumflex', 'Adieresis', 'Agrave', 'Aring', 'Atilde', 'Ccedilla', 'Eacute', 'Ecircumflex', 'Edieresis', 'Egrave', 'Iacute', 'Icircumflex', 'Idieresis', 'Igrave', 'Ntilde', 'Oacute', 'Ocircumflex', 'Odieresis', 'Ograve', 'Otilde', 'Scaron', 'Uacute', 'Ucircumflex', 'Udieresis', 'Ugrave', 'Yacute', 'Ydieresis', 'Zcaron', 'aacute', 'acircumflex', 'adieresis', 'agrave', 'aring', 'atilde', 'ccedilla', 'eacute', 'ecircumflex', 'edieresis', 'egrave', 'iacute', 'icircumflex', 'idieresis', 'igrave', 'ntilde', 'oacute', 'ocircumflex', 'odieresis', 'ograve', 'otilde', 'scaron', 'uacute', 'ucircumflex', 'udieresis', 'ugrave', 'yacute', 'ydieresis', 'zcaron'];
        var ExpertCharset = ['.notdef', 'space', 'exclamsmall', 'Hungarumlautsmall', 'dollaroldstyle', 'dollarsuperior', 'ampersandsmall', 'Acutesmall', 'parenleftsuperior', 'parenrightsuperior', 'twodotenleader', 'onedotenleader', 'comma', 'hyphen', 'period', 'fraction', 'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle', 'fouroldstyle', 'fiveoldstyle', 'sixoldstyle', 'sevenoldstyle', 'eightoldstyle', 'nineoldstyle', 'colon', 'semicolon', 'commasuperior', 'threequartersemdash', 'periodsuperior', 'questionsmall', 'asuperior', 'bsuperior', 'centsuperior', 'dsuperior', 'esuperior', 'isuperior', 'lsuperior', 'msuperior', 'nsuperior', 'osuperior', 'rsuperior', 'ssuperior', 'tsuperior', 'ff', 'fi', 'fl', 'ffi', 'ffl', 'parenleftinferior', 'parenrightinferior', 'Circumflexsmall', 'hyphensuperior', 'Gravesmall', 'Asmall', 'Bsmall', 'Csmall', 'Dsmall', 'Esmall', 'Fsmall', 'Gsmall', 'Hsmall', 'Ismall', 'Jsmall', 'Ksmall', 'Lsmall', 'Msmall', 'Nsmall', 'Osmall', 'Psmall', 'Qsmall', 'Rsmall', 'Ssmall', 'Tsmall', 'Usmall', 'Vsmall', 'Wsmall', 'Xsmall', 'Ysmall', 'Zsmall', 'colonmonetary', 'onefitted', 'rupiah', 'Tildesmall', 'exclamdownsmall', 'centoldstyle', 'Lslashsmall', 'Scaronsmall', 'Zcaronsmall', 'Dieresissmall', 'Brevesmall', 'Caronsmall', 'Dotaccentsmall', 'Macronsmall', 'figuredash', 'hypheninferior', 'Ogoneksmall', 'Ringsmall', 'Cedillasmall', 'onequarter', 'onehalf', 'threequarters', 'questiondownsmall', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'onethird', 'twothirds', 'zerosuperior', 'onesuperior', 'twosuperior', 'threesuperior', 'foursuperior', 'fivesuperior', 'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior', 'zeroinferior', 'oneinferior', 'twoinferior', 'threeinferior', 'fourinferior', 'fiveinferior', 'sixinferior', 'seveninferior', 'eightinferior', 'nineinferior', 'centinferior', 'dollarinferior', 'periodinferior', 'commainferior', 'Agravesmall', 'Aacutesmall', 'Acircumflexsmall', 'Atildesmall', 'Adieresissmall', 'Aringsmall', 'AEsmall', 'Ccedillasmall', 'Egravesmall', 'Eacutesmall', 'Ecircumflexsmall', 'Edieresissmall', 'Igravesmall', 'Iacutesmall', 'Icircumflexsmall', 'Idieresissmall', 'Ethsmall', 'Ntildesmall', 'Ogravesmall', 'Oacutesmall', 'Ocircumflexsmall', 'Otildesmall', 'Odieresissmall', 'OEsmall', 'Oslashsmall', 'Ugravesmall', 'Uacutesmall', 'Ucircumflexsmall', 'Udieresissmall', 'Yacutesmall', 'Thornsmall', 'Ydieresissmall'];
        var ExpertSubsetCharset = ['.notdef', 'space', 'dollaroldstyle', 'dollarsuperior', 'parenleftsuperior', 'parenrightsuperior', 'twodotenleader', 'onedotenleader', 'comma', 'hyphen', 'period', 'fraction', 'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle', 'fouroldstyle', 'fiveoldstyle', 'sixoldstyle', 'sevenoldstyle', 'eightoldstyle', 'nineoldstyle', 'colon', 'semicolon', 'commasuperior', 'threequartersemdash', 'periodsuperior', 'asuperior', 'bsuperior', 'centsuperior', 'dsuperior', 'esuperior', 'isuperior', 'lsuperior', 'msuperior', 'nsuperior', 'osuperior', 'rsuperior', 'ssuperior', 'tsuperior', 'ff', 'fi', 'fl', 'ffi', 'ffl', 'parenleftinferior', 'parenrightinferior', 'hyphensuperior', 'colonmonetary', 'onefitted', 'rupiah', 'centoldstyle', 'figuredash', 'hypheninferior', 'onequarter', 'onehalf', 'threequarters', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'onethird', 'twothirds', 'zerosuperior', 'onesuperior', 'twosuperior', 'threesuperior', 'foursuperior', 'fivesuperior', 'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior', 'zeroinferior', 'oneinferior', 'twoinferior', 'threeinferior', 'fourinferior', 'fiveinferior', 'sixinferior', 'seveninferior', 'eightinferior', 'nineinferior', 'centinferior', 'dollarinferior', 'periodinferior', 'commainferior']; //########################
        // Scripts and Languages #
        //########################

        var LangSysTable = new r.Struct({
          reserved: new r.Reserved(r.uint16),
          reqFeatureIndex: r.uint16,
          featureCount: r.uint16,
          featureIndexes: new r.Array(r.uint16, 'featureCount')
        });
        var LangSysRecord = new r.Struct({
          tag: new r.String(4),
          langSys: new r.Pointer(r.uint16, LangSysTable, {
            type: 'parent'
          })
        });
        var Script = new r.Struct({
          defaultLangSys: new r.Pointer(r.uint16, LangSysTable),
          count: r.uint16,
          langSysRecords: new r.Array(LangSysRecord, 'count')
        });
        var ScriptRecord = new r.Struct({
          tag: new r.String(4),
          script: new r.Pointer(r.uint16, Script, {
            type: 'parent'
          })
        });
        var ScriptList = new r.Array(ScriptRecord, r.uint16); //#######################
        // Features and Lookups #
        //#######################

        var Feature = new r.Struct({
          featureParams: r.uint16,
          // pointer
          lookupCount: r.uint16,
          lookupListIndexes: new r.Array(r.uint16, 'lookupCount')
        });
        var FeatureRecord = new r.Struct({
          tag: new r.String(4),
          feature: new r.Pointer(r.uint16, Feature, {
            type: 'parent'
          })
        });
        var FeatureList = new r.Array(FeatureRecord, r.uint16);
        var LookupFlags = new r.Struct({
          markAttachmentType: r.uint8,
          flags: new r.Bitfield(r.uint8, ['rightToLeft', 'ignoreBaseGlyphs', 'ignoreLigatures', 'ignoreMarks', 'useMarkFilteringSet'])
        });

        function LookupList(SubTable) {
          var Lookup = new r.Struct({
            lookupType: r.uint16,
            flags: LookupFlags,
            subTableCount: r.uint16,
            subTables: new r.Array(new r.Pointer(r.uint16, SubTable), 'subTableCount'),
            markFilteringSet: new r.Optional(r.uint16, function (t) {
              return t.flags.flags.useMarkFilteringSet;
            })
          });
          return new r.LazyArray(new r.Pointer(r.uint16, Lookup), r.uint16);
        } //#################
        // Coverage Table #
        //#################


        var RangeRecord = new r.Struct({
          start: r.uint16,
          end: r.uint16,
          startCoverageIndex: r.uint16
        });
        var Coverage = new r.VersionedStruct(r.uint16, {
          1: {
            glyphCount: r.uint16,
            glyphs: new r.Array(r.uint16, 'glyphCount')
          },
          2: {
            rangeCount: r.uint16,
            rangeRecords: new r.Array(RangeRecord, 'rangeCount')
          }
        }); //#########################
        // Class Definition Table #
        //#########################

        var ClassRangeRecord = new r.Struct({
          start: r.uint16,
          end: r.uint16,
          class: r.uint16
        });
        var ClassDef = new r.VersionedStruct(r.uint16, {
          1: {
            // Class array
            startGlyph: r.uint16,
            glyphCount: r.uint16,
            classValueArray: new r.Array(r.uint16, 'glyphCount')
          },
          2: {
            // Class ranges
            classRangeCount: r.uint16,
            classRangeRecord: new r.Array(ClassRangeRecord, 'classRangeCount')
          }
        }); //###############
        // Device Table #
        //###############

        var Device = new r.Struct({
          a: r.uint16,
          // startSize for hinting Device, outerIndex for VariationIndex
          b: r.uint16,
          // endSize for Device, innerIndex for VariationIndex
          deltaFormat: r.uint16
        }); //#############################################
        // Contextual Substitution/Positioning Tables #
        //#############################################

        var LookupRecord = new r.Struct({
          sequenceIndex: r.uint16,
          lookupListIndex: r.uint16
        });
        var Rule = new r.Struct({
          glyphCount: r.uint16,
          lookupCount: r.uint16,
          input: new r.Array(r.uint16, function (t) {
            return t.glyphCount - 1;
          }),
          lookupRecords: new r.Array(LookupRecord, 'lookupCount')
        });
        var RuleSet = new r.Array(new r.Pointer(r.uint16, Rule), r.uint16);
        var ClassRule = new r.Struct({
          glyphCount: r.uint16,
          lookupCount: r.uint16,
          classes: new r.Array(r.uint16, function (t) {
            return t.glyphCount - 1;
          }),
          lookupRecords: new r.Array(LookupRecord, 'lookupCount')
        });
        var ClassSet = new r.Array(new r.Pointer(r.uint16, ClassRule), r.uint16);
        var Context = new r.VersionedStruct(r.uint16, {
          1: {
            // Simple context
            coverage: new r.Pointer(r.uint16, Coverage),
            ruleSetCount: r.uint16,
            ruleSets: new r.Array(new r.Pointer(r.uint16, RuleSet), 'ruleSetCount')
          },
          2: {
            // Class-based context
            coverage: new r.Pointer(r.uint16, Coverage),
            classDef: new r.Pointer(r.uint16, ClassDef),
            classSetCnt: r.uint16,
            classSet: new r.Array(new r.Pointer(r.uint16, ClassSet), 'classSetCnt')
          },
          3: {
            glyphCount: r.uint16,
            lookupCount: r.uint16,
            coverages: new r.Array(new r.Pointer(r.uint16, Coverage), 'glyphCount'),
            lookupRecords: new r.Array(LookupRecord, 'lookupCount')
          }
        }); //######################################################
        // Chaining Contextual Substitution/Positioning Tables #
        //######################################################

        var ChainRule = new r.Struct({
          backtrackGlyphCount: r.uint16,
          backtrack: new r.Array(r.uint16, 'backtrackGlyphCount'),
          inputGlyphCount: r.uint16,
          input: new r.Array(r.uint16, function (t) {
            return t.inputGlyphCount - 1;
          }),
          lookaheadGlyphCount: r.uint16,
          lookahead: new r.Array(r.uint16, 'lookaheadGlyphCount'),
          lookupCount: r.uint16,
          lookupRecords: new r.Array(LookupRecord, 'lookupCount')
        });
        var ChainRuleSet = new r.Array(new r.Pointer(r.uint16, ChainRule), r.uint16);
        var ChainingContext = new r.VersionedStruct(r.uint16, {
          1: {
            // Simple context glyph substitution
            coverage: new r.Pointer(r.uint16, Coverage),
            chainCount: r.uint16,
            chainRuleSets: new r.Array(new r.Pointer(r.uint16, ChainRuleSet), 'chainCount')
          },
          2: {
            // Class-based chaining context
            coverage: new r.Pointer(r.uint16, Coverage),
            backtrackClassDef: new r.Pointer(r.uint16, ClassDef),
            inputClassDef: new r.Pointer(r.uint16, ClassDef),
            lookaheadClassDef: new r.Pointer(r.uint16, ClassDef),
            chainCount: r.uint16,
            chainClassSet: new r.Array(new r.Pointer(r.uint16, ChainRuleSet), 'chainCount')
          },
          3: {
            // Coverage-based chaining context
            backtrackGlyphCount: r.uint16,
            backtrackCoverage: new r.Array(new r.Pointer(r.uint16, Coverage), 'backtrackGlyphCount'),
            inputGlyphCount: r.uint16,
            inputCoverage: new r.Array(new r.Pointer(r.uint16, Coverage), 'inputGlyphCount'),
            lookaheadGlyphCount: r.uint16,
            lookaheadCoverage: new r.Array(new r.Pointer(r.uint16, Coverage), 'lookaheadGlyphCount'),
            lookupCount: r.uint16,
            lookupRecords: new r.Array(LookupRecord, 'lookupCount')
          }
        });

        var _;
        /*******************
         * Variation Store *
         *******************/


        var F2DOT14 = new r.Fixed(16, 'BE', 14);
        var RegionAxisCoordinates = new r.Struct({
          startCoord: F2DOT14,
          peakCoord: F2DOT14,
          endCoord: F2DOT14
        });
        var VariationRegionList = new r.Struct({
          axisCount: r.uint16,
          regionCount: r.uint16,
          variationRegions: new r.Array(new r.Array(RegionAxisCoordinates, 'axisCount'), 'regionCount')
        });
        var DeltaSet = new r.Struct({
          shortDeltas: new r.Array(r.int16, function (t) {
            return t.parent.shortDeltaCount;
          }),
          regionDeltas: new r.Array(r.int8, function (t) {
            return t.parent.regionIndexCount - t.parent.shortDeltaCount;
          }),
          deltas: function deltas(t) {
            return t.shortDeltas.concat(t.regionDeltas);
          }
        });
        var ItemVariationData = new r.Struct({
          itemCount: r.uint16,
          shortDeltaCount: r.uint16,
          regionIndexCount: r.uint16,
          regionIndexes: new r.Array(r.uint16, 'regionIndexCount'),
          deltaSets: new r.Array(DeltaSet, 'itemCount')
        });
        var ItemVariationStore = new r.Struct({
          format: r.uint16,
          variationRegionList: new r.Pointer(r.uint32, VariationRegionList),
          variationDataCount: r.uint16,
          itemVariationData: new r.Array(new r.Pointer(r.uint32, ItemVariationData), 'variationDataCount')
        });
        /**********************
         * Feature Variations *
         **********************/

        var ConditionTable = new r.VersionedStruct(r.uint16, {
          1: (_ = {
            axisIndex: r.uint16
          }, _['axisIndex'] = r.uint16, _.filterRangeMinValue = F2DOT14, _.filterRangeMaxValue = F2DOT14, _)
        });
        var ConditionSet = new r.Struct({
          conditionCount: r.uint16,
          conditionTable: new r.Array(new r.Pointer(r.uint32, ConditionTable), 'conditionCount')
        });
        var FeatureTableSubstitutionRecord = new r.Struct({
          featureIndex: r.uint16,
          alternateFeatureTable: new r.Pointer(r.uint32, Feature, {
            type: 'parent'
          })
        });
        var FeatureTableSubstitution = new r.Struct({
          version: r.fixed32,
          substitutionCount: r.uint16,
          substitutions: new r.Array(FeatureTableSubstitutionRecord, 'substitutionCount')
        });
        var FeatureVariationRecord = new r.Struct({
          conditionSet: new r.Pointer(r.uint32, ConditionSet, {
            type: 'parent'
          }),
          featureTableSubstitution: new r.Pointer(r.uint32, FeatureTableSubstitution, {
            type: 'parent'
          })
        });
        var FeatureVariations = new r.Struct({
          majorVersion: r.uint16,
          minorVersion: r.uint16,
          featureVariationRecordCount: r.uint32,
          featureVariationRecords: new r.Array(FeatureVariationRecord, 'featureVariationRecordCount')
        }); // Checks if an operand is an index of a predefined value,
        // otherwise delegates to the provided type.

        var PredefinedOp = function () {
          function PredefinedOp(predefinedOps, type) {
            _classCallCheck(this, PredefinedOp);

            this.predefinedOps = predefinedOps;
            this.type = type;
          }

          PredefinedOp.prototype.decode = function decode(stream, parent, operands) {
            if (this.predefinedOps[operands[0]]) {
              return this.predefinedOps[operands[0]];
            }

            return this.type.decode(stream, parent, operands);
          };

          PredefinedOp.prototype.size = function size(value, ctx) {
            return this.type.size(value, ctx);
          };

          PredefinedOp.prototype.encode = function encode(stream, value, ctx) {
            var index = this.predefinedOps.indexOf(value);

            if (index !== -1) {
              return index;
            }

            return this.type.encode(stream, value, ctx);
          };

          return PredefinedOp;
        }();

        var CFFEncodingVersion = function (_r$Number) {
          _inherits(CFFEncodingVersion, _r$Number);

          function CFFEncodingVersion() {
            _classCallCheck(this, CFFEncodingVersion);

            return _possibleConstructorReturn(this, _r$Number.call(this, 'UInt8'));
          }

          CFFEncodingVersion.prototype.decode = function decode(stream) {
            return r.uint8.decode(stream) & 0x7f;
          };

          return CFFEncodingVersion;
        }(r.Number);

        var Range1 = new r.Struct({
          first: r.uint16,
          nLeft: r.uint8
        });
        var Range2 = new r.Struct({
          first: r.uint16,
          nLeft: r.uint16
        });
        var CFFCustomEncoding = new r.VersionedStruct(new CFFEncodingVersion(), {
          0: {
            nCodes: r.uint8,
            codes: new r.Array(r.uint8, 'nCodes')
          },
          1: {
            nRanges: r.uint8,
            ranges: new r.Array(Range1, 'nRanges') // TODO: supplement?

          }
        });
        var CFFEncoding = new PredefinedOp([StandardEncoding, ExpertEncoding], new CFFPointer(CFFCustomEncoding, {
          lazy: true
        })); // Decodes an array of ranges until the total
        // length is equal to the provided length.

        var RangeArray = function (_r$Array) {
          _inherits(RangeArray, _r$Array);

          function RangeArray() {
            _classCallCheck(this, RangeArray);

            return _possibleConstructorReturn(this, _r$Array.apply(this, arguments));
          }

          RangeArray.prototype.decode = function decode(stream, parent) {
            var length = restructure_src_utils.resolveLength(this.length, stream, parent);
            var count = 0;
            var res = [];

            while (count < length) {
              var range = this.type.decode(stream, parent);
              range.offset = count;
              count += range.nLeft + 1;
              res.push(range);
            }

            return res;
          };

          return RangeArray;
        }(r.Array);

        var CFFCustomCharset = new r.VersionedStruct(r.uint8, {
          0: {
            glyphs: new r.Array(r.uint16, function (t) {
              return t.parent.CharStrings.length - 1;
            })
          },
          1: {
            ranges: new RangeArray(Range1, function (t) {
              return t.parent.CharStrings.length - 1;
            })
          },
          2: {
            ranges: new RangeArray(Range2, function (t) {
              return t.parent.CharStrings.length - 1;
            })
          }
        });
        var CFFCharset = new PredefinedOp([ISOAdobeCharset, ExpertCharset, ExpertSubsetCharset], new CFFPointer(CFFCustomCharset, {
          lazy: true
        }));
        var FDRange3 = new r.Struct({
          first: r.uint16,
          fd: r.uint8
        });
        var FDRange4 = new r.Struct({
          first: r.uint32,
          fd: r.uint16
        });
        var FDSelect = new r.VersionedStruct(r.uint8, {
          0: {
            fds: new r.Array(r.uint8, function (t) {
              return t.parent.CharStrings.length;
            })
          },
          3: {
            nRanges: r.uint16,
            ranges: new r.Array(FDRange3, 'nRanges'),
            sentinel: r.uint16
          },
          4: {
            nRanges: r.uint32,
            ranges: new r.Array(FDRange4, 'nRanges'),
            sentinel: r.uint32
          }
        });
        var ptr = new CFFPointer(CFFPrivateDict);

        var CFFPrivateOp = function () {
          function CFFPrivateOp() {
            _classCallCheck(this, CFFPrivateOp);
          }

          CFFPrivateOp.prototype.decode = function decode(stream, parent, operands) {
            parent.length = operands[0];
            return ptr.decode(stream, parent, [operands[1]]);
          };

          CFFPrivateOp.prototype.size = function size(dict, ctx) {
            return [CFFPrivateDict.size(dict, ctx, false), ptr.size(dict, ctx)[0]];
          };

          CFFPrivateOp.prototype.encode = function encode(stream, dict, ctx) {
            return [CFFPrivateDict.size(dict, ctx, false), ptr.encode(stream, dict, ctx)[0]];
          };

          return CFFPrivateOp;
        }();

        var FontDict = new CFFDict([// key       name                   type(s)                                 default
        [18, 'Private', new CFFPrivateOp(), null], [[12, 38], 'FontName', 'sid', null], [[12, 7], 'FontMatrix', 'array', [0.001, 0, 0, 0.001, 0, 0]], [[12, 5], 'PaintType', 'number', 0]]);
        var CFFTopDict = new CFFDict([// key       name                   type(s)                                 default
        [[12, 30], 'ROS', ['sid', 'sid', 'number'], null], [0, 'version', 'sid', null], [1, 'Notice', 'sid', null], [[12, 0], 'Copyright', 'sid', null], [2, 'FullName', 'sid', null], [3, 'FamilyName', 'sid', null], [4, 'Weight', 'sid', null], [[12, 1], 'isFixedPitch', 'boolean', false], [[12, 2], 'ItalicAngle', 'number', 0], [[12, 3], 'UnderlinePosition', 'number', -100], [[12, 4], 'UnderlineThickness', 'number', 50], [[12, 5], 'PaintType', 'number', 0], [[12, 6], 'CharstringType', 'number', 2], [[12, 7], 'FontMatrix', 'array', [0.001, 0, 0, 0.001, 0, 0]], [13, 'UniqueID', 'number', null], [5, 'FontBBox', 'array', [0, 0, 0, 0]], [[12, 8], 'StrokeWidth', 'number', 0], [14, 'XUID', 'array', null], [15, 'charset', CFFCharset, ISOAdobeCharset], [16, 'Encoding', CFFEncoding, StandardEncoding], [17, 'CharStrings', new CFFPointer(new CFFIndex()), null], [18, 'Private', new CFFPrivateOp(), null], [[12, 20], 'SyntheticBase', 'number', null], [[12, 21], 'PostScript', 'sid', null], [[12, 22], 'BaseFontName', 'sid', null], [[12, 23], 'BaseFontBlend', 'delta', null], // CID font specific
        [[12, 31], 'CIDFontVersion', 'number', 0], [[12, 32], 'CIDFontRevision', 'number', 0], [[12, 33], 'CIDFontType', 'number', 0], [[12, 34], 'CIDCount', 'number', 8720], [[12, 35], 'UIDBase', 'number', null], [[12, 37], 'FDSelect', new CFFPointer(FDSelect), null], [[12, 36], 'FDArray', new CFFPointer(new CFFIndex(FontDict)), null], [[12, 38], 'FontName', 'sid', null]]);
        var VariationStore = new r.Struct({
          length: r.uint16,
          itemVariationStore: ItemVariationStore
        });
        var CFF2TopDict = new CFFDict([[[12, 7], 'FontMatrix', 'array', [0.001, 0, 0, 0.001, 0, 0]], [17, 'CharStrings', new CFFPointer(new CFFIndex()), null], [[12, 37], 'FDSelect', new CFFPointer(FDSelect), null], [[12, 36], 'FDArray', new CFFPointer(new CFFIndex(FontDict)), null], [24, 'vstore', new CFFPointer(VariationStore), null], [25, 'maxstack', 'number', 193]]);
        var CFFTop = new r.VersionedStruct(r.fixed16, {
          1: {
            hdrSize: r.uint8,
            offSize: r.uint8,
            nameIndex: new CFFIndex(new r.String('length')),
            topDictIndex: new CFFIndex(CFFTopDict),
            stringIndex: new CFFIndex(new r.String('length')),
            globalSubrIndex: new CFFIndex()
          },
          2: {
            hdrSize: r.uint8,
            length: r.uint16,
            topDict: CFF2TopDict,
            globalSubrIndex: new CFFIndex()
          }
        });

        var CFFFont = function () {
          function CFFFont(stream) {
            _classCallCheck(this, CFFFont);

            this.stream = stream;
            this.decode();
          }

          CFFFont.decode = function decode(stream) {
            return new CFFFont(stream);
          };

          CFFFont.prototype.decode = function decode() {
            var start = this.stream.pos;
            var top = CFFTop.decode(this.stream);

            for (var key in top) {
              var val = top[key];
              this[key] = val;
            }

            if (this.version < 2) {
              if (this.topDictIndex.length !== 1) {
                throw new Error("Only a single font is allowed in CFF");
              }

              this.topDict = this.topDictIndex[0];
            }

            this.isCIDFont = this.topDict.ROS != null;
            return this;
          };

          CFFFont.prototype.string = function string(sid) {
            if (this.version >= 2) {
              return null;
            }

            if (sid < standardStrings.length) {
              return standardStrings[sid];
            }

            return this.stringIndex[sid - standardStrings.length];
          };

          CFFFont.prototype.getCharString = function getCharString(glyph) {
            this.stream.pos = this.topDict.CharStrings[glyph].offset;
            return this.stream.readBuffer(this.topDict.CharStrings[glyph].length);
          };

          CFFFont.prototype.getGlyphName = function getGlyphName(gid) {
            // CFF2 glyph names are in the post table.
            if (this.version >= 2) {
              return null;
            } // CID-keyed fonts don't have glyph names


            if (this.isCIDFont) {
              return null;
            }

            var charset = this.topDict.charset;

            if (Array.isArray(charset)) {
              return charset[gid];
            }

            if (gid === 0) {
              return '.notdef';
            }

            gid -= 1;

            switch (charset.version) {
              case 0:
                return this.string(charset.glyphs[gid]);

              case 1:
              case 2:
                for (var i = 0; i < charset.ranges.length; i++) {
                  var range = charset.ranges[i];

                  if (range.offset <= gid && gid <= range.offset + range.nLeft) {
                    return this.string(range.first + (gid - range.offset));
                  }
                }

                break;
            }

            return null;
          };

          CFFFont.prototype.fdForGlyph = function fdForGlyph(gid) {
            if (!this.topDict.FDSelect) {
              return null;
            }

            switch (this.topDict.FDSelect.version) {
              case 0:
                return this.topDict.FDSelect.fds[gid];

              case 3:
              case 4:
                var ranges = this.topDict.FDSelect.ranges;
                var low = 0;
                var high = ranges.length - 1;

                while (low <= high) {
                  var mid = low + high >> 1;

                  if (gid < ranges[mid].first) {
                    high = mid - 1;
                  } else if (mid < high && gid >= ranges[mid + 1].first) {
                    low = mid + 1;
                  } else {
                    return ranges[mid].fd;
                  }
                }

              default:
                throw new Error('Unknown FDSelect version: ' + this.topDict.FDSelect.version);
            }
          };

          CFFFont.prototype.privateDictForGlyph = function privateDictForGlyph(gid) {
            if (this.topDict.FDSelect) {
              var fd = this.fdForGlyph(gid);

              if (this.topDict.FDArray[fd]) {
                return this.topDict.FDArray[fd].Private;
              }

              return null;
            }

            if (this.version < 2) {
              return this.topDict.Private;
            }

            return this.topDict.FDArray[0].Private;
          };

          _createClass(CFFFont, [{
            key: 'postscriptName',
            get: function get() {
              if (this.version < 2) {
                return this.nameIndex[0];
              }

              return null;
            }
          }, {
            key: 'fullName',
            get: function get() {
              return this.string(this.topDict.FullName);
            }
          }, {
            key: 'familyName',
            get: function get() {
              return this.string(this.topDict.FamilyName);
            }
          }]);

          return CFFFont;
        }();

        var VerticalOrigin = new r.Struct({
          glyphIndex: r.uint16,
          vertOriginY: r.int16
        });
        var VORG = new r.Struct({
          majorVersion: r.uint16,
          minorVersion: r.uint16,
          defaultVertOriginY: r.int16,
          numVertOriginYMetrics: r.uint16,
          metrics: new r.Array(VerticalOrigin, 'numVertOriginYMetrics')
        });
        var BigMetrics = new r.Struct({
          height: r.uint8,
          width: r.uint8,
          horiBearingX: r.int8,
          horiBearingY: r.int8,
          horiAdvance: r.uint8,
          vertBearingX: r.int8,
          vertBearingY: r.int8,
          vertAdvance: r.uint8
        });
        var SmallMetrics = new r.Struct({
          height: r.uint8,
          width: r.uint8,
          bearingX: r.int8,
          bearingY: r.int8,
          advance: r.uint8
        });
        var EBDTComponent = new r.Struct({
          glyph: r.uint16,
          xOffset: r.int8,
          yOffset: r.int8
        });

        var ByteAligned = function ByteAligned() {
          _classCallCheck(this, ByteAligned);
        };

        var BitAligned = function BitAligned() {
          _classCallCheck(this, BitAligned);
        };

        var glyph = new r.VersionedStruct('version', {
          1: {
            metrics: SmallMetrics,
            data: ByteAligned
          },
          2: {
            metrics: SmallMetrics,
            data: BitAligned
          },
          // format 3 is deprecated
          // format 4 is not supported by Microsoft
          5: {
            data: BitAligned
          },
          6: {
            metrics: BigMetrics,
            data: ByteAligned
          },
          7: {
            metrics: BigMetrics,
            data: BitAligned
          },
          8: {
            metrics: SmallMetrics,
            pad: new r.Reserved(r.uint8),
            numComponents: r.uint16,
            components: new r.Array(EBDTComponent, 'numComponents')
          },
          9: {
            metrics: BigMetrics,
            pad: new r.Reserved(r.uint8),
            numComponents: r.uint16,
            components: new r.Array(EBDTComponent, 'numComponents')
          },
          17: {
            metrics: SmallMetrics,
            dataLen: r.uint32,
            data: new r.Buffer('dataLen')
          },
          18: {
            metrics: BigMetrics,
            dataLen: r.uint32,
            data: new r.Buffer('dataLen')
          },
          19: {
            dataLen: r.uint32,
            data: new r.Buffer('dataLen')
          }
        });
        var SBitLineMetrics = new r.Struct({
          ascender: r.int8,
          descender: r.int8,
          widthMax: r.uint8,
          caretSlopeNumerator: r.int8,
          caretSlopeDenominator: r.int8,
          caretOffset: r.int8,
          minOriginSB: r.int8,
          minAdvanceSB: r.int8,
          maxBeforeBL: r.int8,
          minAfterBL: r.int8,
          pad: new r.Reserved(r.int8, 2)
        });
        var CodeOffsetPair = new r.Struct({
          glyphCode: r.uint16,
          offset: r.uint16
        });
        var IndexSubtable = new r.VersionedStruct(r.uint16, {
          header: {
            imageFormat: r.uint16,
            imageDataOffset: r.uint32
          },
          1: {
            offsetArray: new r.Array(r.uint32, function (t) {
              return t.parent.lastGlyphIndex - t.parent.firstGlyphIndex + 1;
            })
          },
          2: {
            imageSize: r.uint32,
            bigMetrics: BigMetrics
          },
          3: {
            offsetArray: new r.Array(r.uint16, function (t) {
              return t.parent.lastGlyphIndex - t.parent.firstGlyphIndex + 1;
            })
          },
          4: {
            numGlyphs: r.uint32,
            glyphArray: new r.Array(CodeOffsetPair, function (t) {
              return t.numGlyphs + 1;
            })
          },
          5: {
            imageSize: r.uint32,
            bigMetrics: BigMetrics,
            numGlyphs: r.uint32,
            glyphCodeArray: new r.Array(r.uint16, 'numGlyphs')
          }
        });
        var IndexSubtableArray = new r.Struct({
          firstGlyphIndex: r.uint16,
          lastGlyphIndex: r.uint16,
          subtable: new r.Pointer(r.uint32, IndexSubtable)
        });
        var BitmapSizeTable = new r.Struct({
          indexSubTableArray: new r.Pointer(r.uint32, new r.Array(IndexSubtableArray, 1), {
            type: 'parent'
          }),
          indexTablesSize: r.uint32,
          numberOfIndexSubTables: r.uint32,
          colorRef: r.uint32,
          hori: SBitLineMetrics,
          vert: SBitLineMetrics,
          startGlyphIndex: r.uint16,
          endGlyphIndex: r.uint16,
          ppemX: r.uint8,
          ppemY: r.uint8,
          bitDepth: r.uint8,
          flags: new r.Bitfield(r.uint8, ['horizontal', 'vertical'])
        });
        var EBLC = new r.Struct({
          version: r.uint32,
          // 0x00020000
          numSizes: r.uint32,
          sizes: new r.Array(BitmapSizeTable, 'numSizes')
        });
        var ImageTable = new r.Struct({
          ppem: r.uint16,
          resolution: r.uint16,
          imageOffsets: new r.Array(new r.Pointer(r.uint32, 'void'), function (t) {
            return t.parent.parent.maxp.numGlyphs + 1;
          })
        }); // This is the Apple sbix table, used by the "Apple Color Emoji" font.
        // It includes several image tables with images for each bitmap glyph
        // of several different sizes.

        var sbix = new r.Struct({
          version: r.uint16,
          flags: new r.Bitfield(r.uint16, ['renderOutlines']),
          numImgTables: r.uint32,
          imageTables: new r.Array(new r.Pointer(r.uint32, ImageTable), 'numImgTables')
        });
        var LayerRecord = new r.Struct({
          gid: r.uint16,
          // Glyph ID of layer glyph (must be in z-order from bottom to top).
          paletteIndex: r.uint16 // Index value to use in the appropriate palette. This value must

        }); // be less than numPaletteEntries in the CPAL table, except for
        // the special case noted below. Each palette entry is 16 bits.
        // A palette index of 0xFFFF is a special case indicating that
        // the text foreground color should be used.

        var BaseGlyphRecord = new r.Struct({
          gid: r.uint16,
          // Glyph ID of reference glyph. This glyph is for reference only
          // and is not rendered for color.
          firstLayerIndex: r.uint16,
          // Index (from beginning of the Layer Records) to the layer record.
          // There will be numLayers consecutive entries for this base glyph.
          numLayers: r.uint16
        });
        var COLR = new r.Struct({
          version: r.uint16,
          numBaseGlyphRecords: r.uint16,
          baseGlyphRecord: new r.Pointer(r.uint32, new r.Array(BaseGlyphRecord, 'numBaseGlyphRecords')),
          layerRecords: new r.Pointer(r.uint32, new r.Array(LayerRecord, 'numLayerRecords'), {
            lazy: true
          }),
          numLayerRecords: r.uint16
        });
        var ColorRecord = new r.Struct({
          blue: r.uint8,
          green: r.uint8,
          red: r.uint8,
          alpha: r.uint8
        });
        var CPAL = new r.VersionedStruct(r.uint16, {
          header: {
            numPaletteEntries: r.uint16,
            numPalettes: r.uint16,
            numColorRecords: r.uint16,
            colorRecords: new r.Pointer(r.uint32, new r.Array(ColorRecord, 'numColorRecords')),
            colorRecordIndices: new r.Array(r.uint16, 'numPalettes')
          },
          0: {},
          1: {
            offsetPaletteTypeArray: new r.Pointer(r.uint32, new r.Array(r.uint32, 'numPalettes')),
            offsetPaletteLabelArray: new r.Pointer(r.uint32, new r.Array(r.uint16, 'numPalettes')),
            offsetPaletteEntryLabelArray: new r.Pointer(r.uint32, new r.Array(r.uint16, 'numPaletteEntries'))
          }
        });
        var BaseCoord = new r.VersionedStruct(r.uint16, {
          1: {
            // Design units only
            coordinate: r.int16 // X or Y value, in design units

          },
          2: {
            // Design units plus contour point
            coordinate: r.int16,
            // X or Y value, in design units
            referenceGlyph: r.uint16,
            // GlyphID of control glyph
            baseCoordPoint: r.uint16 // Index of contour point on the referenceGlyph

          },
          3: {
            // Design units plus Device table
            coordinate: r.int16,
            // X or Y value, in design units
            deviceTable: new r.Pointer(r.uint16, Device) // Device table for X or Y value

          }
        });
        var BaseValues = new r.Struct({
          defaultIndex: r.uint16,
          // Index of default baseline for this script-same index in the BaseTagList
          baseCoordCount: r.uint16,
          baseCoords: new r.Array(new r.Pointer(r.uint16, BaseCoord), 'baseCoordCount')
        });
        var FeatMinMaxRecord = new r.Struct({
          tag: new r.String(4),
          // 4-byte feature identification tag-must match FeatureTag in FeatureList
          minCoord: new r.Pointer(r.uint16, BaseCoord, {
            type: 'parent'
          }),
          // May be NULL
          maxCoord: new r.Pointer(r.uint16, BaseCoord, {
            type: 'parent'
          }) // May be NULL

        });
        var MinMax = new r.Struct({
          minCoord: new r.Pointer(r.uint16, BaseCoord),
          // May be NULL
          maxCoord: new r.Pointer(r.uint16, BaseCoord),
          // May be NULL
          featMinMaxCount: r.uint16,
          // May be 0
          featMinMaxRecords: new r.Array(FeatMinMaxRecord, 'featMinMaxCount') // In alphabetical order

        });
        var BaseLangSysRecord = new r.Struct({
          tag: new r.String(4),
          // 4-byte language system identification tag
          minMax: new r.Pointer(r.uint16, MinMax, {
            type: 'parent'
          })
        });
        var BaseScript = new r.Struct({
          baseValues: new r.Pointer(r.uint16, BaseValues),
          // May be NULL
          defaultMinMax: new r.Pointer(r.uint16, MinMax),
          // May be NULL
          baseLangSysCount: r.uint16,
          // May be 0
          baseLangSysRecords: new r.Array(BaseLangSysRecord, 'baseLangSysCount') // in alphabetical order by BaseLangSysTag

        });
        var BaseScriptRecord = new r.Struct({
          tag: new r.String(4),
          // 4-byte script identification tag
          script: new r.Pointer(r.uint16, BaseScript, {
            type: 'parent'
          })
        });
        var BaseScriptList = new r.Array(BaseScriptRecord, r.uint16); // Array of 4-byte baseline identification tags-must be in alphabetical order

        var BaseTagList = new r.Array(new r.String(4), r.uint16);
        var Axis = new r.Struct({
          baseTagList: new r.Pointer(r.uint16, BaseTagList),
          // May be NULL
          baseScriptList: new r.Pointer(r.uint16, BaseScriptList)
        });
        var BASE = new r.VersionedStruct(r.uint32, {
          header: {
            horizAxis: new r.Pointer(r.uint16, Axis),
            // May be NULL
            vertAxis: new r.Pointer(r.uint16, Axis) // May be NULL

          },
          0x00010000: {},
          0x00010001: {
            itemVariationStore: new r.Pointer(r.uint32, ItemVariationStore)
          }
        });
        var AttachPoint = new r.Array(r.uint16, r.uint16);
        var AttachList = new r.Struct({
          coverage: new r.Pointer(r.uint16, Coverage),
          glyphCount: r.uint16,
          attachPoints: new r.Array(new r.Pointer(r.uint16, AttachPoint), 'glyphCount')
        });
        var CaretValue = new r.VersionedStruct(r.uint16, {
          1: {
            // Design units only
            coordinate: r.int16
          },
          2: {
            // Contour point
            caretValuePoint: r.uint16
          },
          3: {
            // Design units plus Device table
            coordinate: r.int16,
            deviceTable: new r.Pointer(r.uint16, Device)
          }
        });
        var LigGlyph = new r.Array(new r.Pointer(r.uint16, CaretValue), r.uint16);
        var LigCaretList = new r.Struct({
          coverage: new r.Pointer(r.uint16, Coverage),
          ligGlyphCount: r.uint16,
          ligGlyphs: new r.Array(new r.Pointer(r.uint16, LigGlyph), 'ligGlyphCount')
        });
        var MarkGlyphSetsDef = new r.Struct({
          markSetTableFormat: r.uint16,
          markSetCount: r.uint16,
          coverage: new r.Array(new r.Pointer(r.uint32, Coverage), 'markSetCount')
        });
        var GDEF = new r.VersionedStruct(r.uint32, {
          header: {
            glyphClassDef: new r.Pointer(r.uint16, ClassDef),
            attachList: new r.Pointer(r.uint16, AttachList),
            ligCaretList: new r.Pointer(r.uint16, LigCaretList),
            markAttachClassDef: new r.Pointer(r.uint16, ClassDef)
          },
          0x00010000: {},
          0x00010002: {
            markGlyphSetsDef: new r.Pointer(r.uint16, MarkGlyphSetsDef)
          },
          0x00010003: {
            markGlyphSetsDef: new r.Pointer(r.uint16, MarkGlyphSetsDef),
            itemVariationStore: new r.Pointer(r.uint32, ItemVariationStore)
          }
        });
        var ValueFormat = new r.Bitfield(r.uint16, ['xPlacement', 'yPlacement', 'xAdvance', 'yAdvance', 'xPlaDevice', 'yPlaDevice', 'xAdvDevice', 'yAdvDevice']);
        var types = {
          xPlacement: r.int16,
          yPlacement: r.int16,
          xAdvance: r.int16,
          yAdvance: r.int16,
          xPlaDevice: new r.Pointer(r.uint16, Device, {
            type: 'global',
            relativeTo: 'rel'
          }),
          yPlaDevice: new r.Pointer(r.uint16, Device, {
            type: 'global',
            relativeTo: 'rel'
          }),
          xAdvDevice: new r.Pointer(r.uint16, Device, {
            type: 'global',
            relativeTo: 'rel'
          }),
          yAdvDevice: new r.Pointer(r.uint16, Device, {
            type: 'global',
            relativeTo: 'rel'
          })
        };

        var ValueRecord = function () {
          function ValueRecord() {
            var key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'valueFormat';

            _classCallCheck(this, ValueRecord);

            this.key = key;
          }

          ValueRecord.prototype.buildStruct = function buildStruct(parent) {
            var struct = parent;

            while (!struct[this.key] && struct.parent) {
              struct = struct.parent;
            }

            if (!struct[this.key]) return;
            var fields = {};

            fields.rel = function () {
              return struct._startOffset;
            };

            var format = struct[this.key];

            for (var key in format) {
              if (format[key]) {
                fields[key] = types[key];
              }
            }

            return new r.Struct(fields);
          };

          ValueRecord.prototype.size = function size(val, ctx) {
            return this.buildStruct(ctx).size(val, ctx);
          };

          ValueRecord.prototype.decode = function decode(stream, parent) {
            var res = this.buildStruct(parent).decode(stream, parent);
            delete res.rel;
            return res;
          };

          return ValueRecord;
        }();

        var PairValueRecord = new r.Struct({
          secondGlyph: r.uint16,
          value1: new ValueRecord('valueFormat1'),
          value2: new ValueRecord('valueFormat2')
        });
        var PairSet = new r.Array(PairValueRecord, r.uint16);
        var Class2Record = new r.Struct({
          value1: new ValueRecord('valueFormat1'),
          value2: new ValueRecord('valueFormat2')
        });
        var Anchor = new r.VersionedStruct(r.uint16, {
          1: {
            // Design units only
            xCoordinate: r.int16,
            yCoordinate: r.int16
          },
          2: {
            // Design units plus contour point
            xCoordinate: r.int16,
            yCoordinate: r.int16,
            anchorPoint: r.uint16
          },
          3: {
            // Design units plus Device tables
            xCoordinate: r.int16,
            yCoordinate: r.int16,
            xDeviceTable: new r.Pointer(r.uint16, Device),
            yDeviceTable: new r.Pointer(r.uint16, Device)
          }
        });
        var EntryExitRecord = new r.Struct({
          entryAnchor: new r.Pointer(r.uint16, Anchor, {
            type: 'parent'
          }),
          exitAnchor: new r.Pointer(r.uint16, Anchor, {
            type: 'parent'
          })
        });
        var MarkRecord = new r.Struct({
          class: r.uint16,
          markAnchor: new r.Pointer(r.uint16, Anchor, {
            type: 'parent'
          })
        });
        var MarkArray = new r.Array(MarkRecord, r.uint16);
        var BaseRecord = new r.Array(new r.Pointer(r.uint16, Anchor), function (t) {
          return t.parent.classCount;
        });
        var BaseArray = new r.Array(BaseRecord, r.uint16);
        var ComponentRecord = new r.Array(new r.Pointer(r.uint16, Anchor), function (t) {
          return t.parent.parent.classCount;
        });
        var LigatureAttach = new r.Array(ComponentRecord, r.uint16);
        var LigatureArray = new r.Array(new r.Pointer(r.uint16, LigatureAttach), r.uint16);
        var GPOSLookup = new r.VersionedStruct('lookupType', {
          1: new r.VersionedStruct(r.uint16, {
            // Single Adjustment
            1: {
              // Single positioning value
              coverage: new r.Pointer(r.uint16, Coverage),
              valueFormat: ValueFormat,
              value: new ValueRecord()
            },
            2: {
              coverage: new r.Pointer(r.uint16, Coverage),
              valueFormat: ValueFormat,
              valueCount: r.uint16,
              values: new r.LazyArray(new ValueRecord(), 'valueCount')
            }
          }),
          2: new r.VersionedStruct(r.uint16, {
            // Pair Adjustment Positioning
            1: {
              // Adjustments for glyph pairs
              coverage: new r.Pointer(r.uint16, Coverage),
              valueFormat1: ValueFormat,
              valueFormat2: ValueFormat,
              pairSetCount: r.uint16,
              pairSets: new r.LazyArray(new r.Pointer(r.uint16, PairSet), 'pairSetCount')
            },
            2: {
              // Class pair adjustment
              coverage: new r.Pointer(r.uint16, Coverage),
              valueFormat1: ValueFormat,
              valueFormat2: ValueFormat,
              classDef1: new r.Pointer(r.uint16, ClassDef),
              classDef2: new r.Pointer(r.uint16, ClassDef),
              class1Count: r.uint16,
              class2Count: r.uint16,
              classRecords: new r.LazyArray(new r.LazyArray(Class2Record, 'class2Count'), 'class1Count')
            }
          }),
          3: {
            // Cursive Attachment Positioning
            format: r.uint16,
            coverage: new r.Pointer(r.uint16, Coverage),
            entryExitCount: r.uint16,
            entryExitRecords: new r.Array(EntryExitRecord, 'entryExitCount')
          },
          4: {
            // MarkToBase Attachment Positioning
            format: r.uint16,
            markCoverage: new r.Pointer(r.uint16, Coverage),
            baseCoverage: new r.Pointer(r.uint16, Coverage),
            classCount: r.uint16,
            markArray: new r.Pointer(r.uint16, MarkArray),
            baseArray: new r.Pointer(r.uint16, BaseArray)
          },
          5: {
            // MarkToLigature Attachment Positioning
            format: r.uint16,
            markCoverage: new r.Pointer(r.uint16, Coverage),
            ligatureCoverage: new r.Pointer(r.uint16, Coverage),
            classCount: r.uint16,
            markArray: new r.Pointer(r.uint16, MarkArray),
            ligatureArray: new r.Pointer(r.uint16, LigatureArray)
          },
          6: {
            // MarkToMark Attachment Positioning
            format: r.uint16,
            mark1Coverage: new r.Pointer(r.uint16, Coverage),
            mark2Coverage: new r.Pointer(r.uint16, Coverage),
            classCount: r.uint16,
            mark1Array: new r.Pointer(r.uint16, MarkArray),
            mark2Array: new r.Pointer(r.uint16, BaseArray)
          },
          7: Context,
          // Contextual positioning
          8: ChainingContext,
          // Chaining contextual positioning
          9: {
            // Extension Positioning
            posFormat: r.uint16,
            lookupType: r.uint16,
            // cannot also be 9
            extension: new r.Pointer(r.uint32, GPOSLookup)
          }
        }); // Fix circular reference

        GPOSLookup.versions[9].extension.type = GPOSLookup;
        var GPOS = new r.VersionedStruct(r.uint32, {
          header: {
            scriptList: new r.Pointer(r.uint16, ScriptList),
            featureList: new r.Pointer(r.uint16, FeatureList),
            lookupList: new r.Pointer(r.uint16, new LookupList(GPOSLookup))
          },
          0x00010000: {},
          0x00010001: {
            featureVariations: new r.Pointer(r.uint32, FeatureVariations)
          }
        });
        var Sequence = new r.Array(r.uint16, r.uint16);
        var AlternateSet = Sequence;
        var Ligature = new r.Struct({
          glyph: r.uint16,
          compCount: r.uint16,
          components: new r.Array(r.uint16, function (t) {
            return t.compCount - 1;
          })
        });
        var LigatureSet = new r.Array(new r.Pointer(r.uint16, Ligature), r.uint16);
        var GSUBLookup = new r.VersionedStruct('lookupType', {
          1: new r.VersionedStruct(r.uint16, {
            // Single Substitution
            1: {
              coverage: new r.Pointer(r.uint16, Coverage),
              deltaGlyphID: r.int16
            },
            2: {
              coverage: new r.Pointer(r.uint16, Coverage),
              glyphCount: r.uint16,
              substitute: new r.LazyArray(r.uint16, 'glyphCount')
            }
          }),
          2: {
            // Multiple Substitution
            substFormat: r.uint16,
            coverage: new r.Pointer(r.uint16, Coverage),
            count: r.uint16,
            sequences: new r.LazyArray(new r.Pointer(r.uint16, Sequence), 'count')
          },
          3: {
            // Alternate Substitution
            substFormat: r.uint16,
            coverage: new r.Pointer(r.uint16, Coverage),
            count: r.uint16,
            alternateSet: new r.LazyArray(new r.Pointer(r.uint16, AlternateSet), 'count')
          },
          4: {
            // Ligature Substitution
            substFormat: r.uint16,
            coverage: new r.Pointer(r.uint16, Coverage),
            count: r.uint16,
            ligatureSets: new r.LazyArray(new r.Pointer(r.uint16, LigatureSet), 'count')
          },
          5: Context,
          // Contextual Substitution
          6: ChainingContext,
          // Chaining Contextual Substitution
          7: {
            // Extension Substitution
            substFormat: r.uint16,
            lookupType: r.uint16,
            // cannot also be 7
            extension: new r.Pointer(r.uint32, GSUBLookup)
          },
          8: {
            // Reverse Chaining Contextual Single Substitution
            substFormat: r.uint16,
            coverage: new r.Pointer(r.uint16, Coverage),
            backtrackCoverage: new r.Array(new r.Pointer(r.uint16, Coverage), 'backtrackGlyphCount'),
            lookaheadGlyphCount: r.uint16,
            lookaheadCoverage: new r.Array(new r.Pointer(r.uint16, Coverage), 'lookaheadGlyphCount'),
            glyphCount: r.uint16,
            substitutes: new r.Array(r.uint16, 'glyphCount')
          }
        }); // Fix circular reference

        GSUBLookup.versions[7].extension.type = GSUBLookup;
        var GSUB = new r.VersionedStruct(r.uint32, {
          header: {
            scriptList: new r.Pointer(r.uint16, ScriptList),
            featureList: new r.Pointer(r.uint16, FeatureList),
            lookupList: new r.Pointer(r.uint16, new LookupList(GSUBLookup))
          },
          0x00010000: {},
          0x00010001: {
            featureVariations: new r.Pointer(r.uint32, FeatureVariations)
          }
        });
        var JstfGSUBModList = new r.Array(r.uint16, r.uint16);
        var JstfPriority = new r.Struct({
          shrinkageEnableGSUB: new r.Pointer(r.uint16, JstfGSUBModList),
          shrinkageDisableGSUB: new r.Pointer(r.uint16, JstfGSUBModList),
          shrinkageEnableGPOS: new r.Pointer(r.uint16, JstfGSUBModList),
          shrinkageDisableGPOS: new r.Pointer(r.uint16, JstfGSUBModList),
          shrinkageJstfMax: new r.Pointer(r.uint16, new LookupList(GPOSLookup)),
          extensionEnableGSUB: new r.Pointer(r.uint16, JstfGSUBModList),
          extensionDisableGSUB: new r.Pointer(r.uint16, JstfGSUBModList),
          extensionEnableGPOS: new r.Pointer(r.uint16, JstfGSUBModList),
          extensionDisableGPOS: new r.Pointer(r.uint16, JstfGSUBModList),
          extensionJstfMax: new r.Pointer(r.uint16, new LookupList(GPOSLookup))
        });
        var JstfLangSys = new r.Array(new r.Pointer(r.uint16, JstfPriority), r.uint16);
        var JstfLangSysRecord = new r.Struct({
          tag: new r.String(4),
          jstfLangSys: new r.Pointer(r.uint16, JstfLangSys)
        });
        var JstfScript = new r.Struct({
          extenderGlyphs: new r.Pointer(r.uint16, new r.Array(r.uint16, r.uint16)),
          // array of glyphs to extend line length
          defaultLangSys: new r.Pointer(r.uint16, JstfLangSys),
          langSysCount: r.uint16,
          langSysRecords: new r.Array(JstfLangSysRecord, 'langSysCount')
        });
        var JstfScriptRecord = new r.Struct({
          tag: new r.String(4),
          script: new r.Pointer(r.uint16, JstfScript, {
            type: 'parent'
          })
        });
        var JSTF = new r.Struct({
          version: r.uint32,
          // should be 0x00010000
          scriptCount: r.uint16,
          scriptList: new r.Array(JstfScriptRecord, 'scriptCount')
        }); // TODO: add this to restructure

        var VariableSizeNumber = function () {
          function VariableSizeNumber(size) {
            _classCallCheck(this, VariableSizeNumber);

            this._size = size;
          }

          VariableSizeNumber.prototype.decode = function decode(stream, parent) {
            switch (this.size(0, parent)) {
              case 1:
                return stream.readUInt8();

              case 2:
                return stream.readUInt16BE();

              case 3:
                return stream.readUInt24BE();

              case 4:
                return stream.readUInt32BE();
            }
          };

          VariableSizeNumber.prototype.size = function size(val, parent) {
            return restructure_src_utils.resolveLength(this._size, null, parent);
          };

          return VariableSizeNumber;
        }();

        var MapDataEntry = new r.Struct({
          entry: new VariableSizeNumber(function (t) {
            return ((t.parent.entryFormat & 0x0030) >> 4) + 1;
          }),
          outerIndex: function outerIndex(t) {
            return t.entry >> (t.parent.entryFormat & 0x000F) + 1;
          },
          innerIndex: function innerIndex(t) {
            return t.entry & (1 << (t.parent.entryFormat & 0x000F) + 1) - 1;
          }
        });
        var DeltaSetIndexMap = new r.Struct({
          entryFormat: r.uint16,
          mapCount: r.uint16,
          mapData: new r.Array(MapDataEntry, 'mapCount')
        });
        var HVAR = new r.Struct({
          majorVersion: r.uint16,
          minorVersion: r.uint16,
          itemVariationStore: new r.Pointer(r.uint32, ItemVariationStore),
          advanceWidthMapping: new r.Pointer(r.uint32, DeltaSetIndexMap),
          LSBMapping: new r.Pointer(r.uint32, DeltaSetIndexMap),
          RSBMapping: new r.Pointer(r.uint32, DeltaSetIndexMap)
        });
        var Signature = new r.Struct({
          format: r.uint32,
          length: r.uint32,
          offset: r.uint32
        });
        var SignatureBlock = new r.Struct({
          reserved: new r.Reserved(r.uint16, 2),
          cbSignature: r.uint32,
          // Length (in bytes) of the PKCS#7 packet in pbSignature
          signature: new r.Buffer('cbSignature')
        });
        var DSIG = new r.Struct({
          ulVersion: r.uint32,
          // Version number of the DSIG table (0x00000001)
          usNumSigs: r.uint16,
          // Number of signatures in the table
          usFlag: r.uint16,
          // Permission flags
          signatures: new r.Array(Signature, 'usNumSigs'),
          signatureBlocks: new r.Array(SignatureBlock, 'usNumSigs')
        });
        var GaspRange = new r.Struct({
          rangeMaxPPEM: r.uint16,
          // Upper limit of range, in ppem
          rangeGaspBehavior: new r.Bitfield(r.uint16, [// Flags describing desired rasterizer behavior
          'grayscale', 'gridfit', 'symmetricSmoothing', 'symmetricGridfit' // only in version 1, for ClearType
          ])
        });
        var gasp = new r.Struct({
          version: r.uint16,
          // set to 0
          numRanges: r.uint16,
          gaspRanges: new r.Array(GaspRange, 'numRanges') // Sorted by ppem

        });
        var DeviceRecord = new r.Struct({
          pixelSize: r.uint8,
          maximumWidth: r.uint8,
          widths: new r.Array(r.uint8, function (t) {
            return t.parent.parent.maxp.numGlyphs;
          })
        }); // The Horizontal Device Metrics table stores integer advance widths scaled to particular pixel sizes

        var hdmx = new r.Struct({
          version: r.uint16,
          numRecords: r.int16,
          sizeDeviceRecord: r.int32,
          records: new r.Array(DeviceRecord, 'numRecords')
        });
        var KernPair = new r.Struct({
          left: r.uint16,
          right: r.uint16,
          value: r.int16
        });
        var ClassTable = new r.Struct({
          firstGlyph: r.uint16,
          nGlyphs: r.uint16,
          offsets: new r.Array(r.uint16, 'nGlyphs'),
          max: function max(t) {
            return t.offsets.length && Math.max.apply(Math, t.offsets);
          }
        });
        var Kern2Array = new r.Struct({
          off: function off(t) {
            return t._startOffset - t.parent.parent._startOffset;
          },
          len: function len(t) {
            return ((t.parent.leftTable.max - t.off) / t.parent.rowWidth + 1) * (t.parent.rowWidth / 2);
          },
          values: new r.LazyArray(r.int16, 'len')
        });
        var KernSubtable = new r.VersionedStruct('format', {
          0: {
            nPairs: r.uint16,
            searchRange: r.uint16,
            entrySelector: r.uint16,
            rangeShift: r.uint16,
            pairs: new r.Array(KernPair, 'nPairs')
          },
          2: {
            rowWidth: r.uint16,
            leftTable: new r.Pointer(r.uint16, ClassTable, {
              type: 'parent'
            }),
            rightTable: new r.Pointer(r.uint16, ClassTable, {
              type: 'parent'
            }),
            array: new r.Pointer(r.uint16, Kern2Array, {
              type: 'parent'
            })
          },
          3: {
            glyphCount: r.uint16,
            kernValueCount: r.uint8,
            leftClassCount: r.uint8,
            rightClassCount: r.uint8,
            flags: r.uint8,
            kernValue: new r.Array(r.int16, 'kernValueCount'),
            leftClass: new r.Array(r.uint8, 'glyphCount'),
            rightClass: new r.Array(r.uint8, 'glyphCount'),
            kernIndex: new r.Array(r.uint8, function (t) {
              return t.leftClassCount * t.rightClassCount;
            })
          }
        });
        var KernTable = new r.VersionedStruct('version', {
          0: {
            // Microsoft uses this format
            subVersion: r.uint16,
            // Microsoft has an extra sub-table version number
            length: r.uint16,
            // Length of the subtable, in bytes
            format: r.uint8,
            // Format of subtable
            coverage: new r.Bitfield(r.uint8, ['horizontal', // 1 if table has horizontal data, 0 if vertical
            'minimum', // If set to 1, the table has minimum values. If set to 0, the table has kerning values.
            'crossStream', // If set to 1, kerning is perpendicular to the flow of the text
            'override' // If set to 1 the value in this table replaces the accumulated value
            ]),
            subtable: KernSubtable,
            padding: new r.Reserved(r.uint8, function (t) {
              return t.length - t._currentOffset;
            })
          },
          1: {
            // Apple uses this format
            length: r.uint32,
            coverage: new r.Bitfield(r.uint8, [null, null, null, null, null, 'variation', // Set if table has variation kerning values
            'crossStream', // Set if table has cross-stream kerning values
            'vertical' // Set if table has vertical kerning values
            ]),
            format: r.uint8,
            tupleIndex: r.uint16,
            subtable: KernSubtable,
            padding: new r.Reserved(r.uint8, function (t) {
              return t.length - t._currentOffset;
            })
          }
        });
        var kern = new r.VersionedStruct(r.uint16, {
          0: {
            // Microsoft Version
            nTables: r.uint16,
            tables: new r.Array(KernTable, 'nTables')
          },
          1: {
            // Apple Version
            reserved: new r.Reserved(r.uint16),
            // the other half of the version number
            nTables: r.uint32,
            tables: new r.Array(KernTable, 'nTables')
          }
        }); // Linear Threshold table
        // Records the ppem for each glyph at which the scaling becomes linear again,
        // despite instructions effecting the advance width

        var LTSH = new r.Struct({
          version: r.uint16,
          numGlyphs: r.uint16,
          yPels: new r.Array(r.uint8, 'numGlyphs')
        }); // PCL 5 Table
        // NOTE: The PCLT table is strongly discouraged for OpenType fonts with TrueType outlines

        var PCLT = new r.Struct({
          version: r.uint16,
          fontNumber: r.uint32,
          pitch: r.uint16,
          xHeight: r.uint16,
          style: r.uint16,
          typeFamily: r.uint16,
          capHeight: r.uint16,
          symbolSet: r.uint16,
          typeface: new r.String(16),
          characterComplement: new r.String(8),
          fileName: new r.String(6),
          strokeWeight: new r.String(1),
          widthType: new r.String(1),
          serifStyle: r.uint8,
          reserved: new r.Reserved(r.uint8)
        }); // VDMX tables contain ascender/descender overrides for certain (usually small)
        // sizes. This is needed in order to match font metrics on Windows.

        var Ratio = new r.Struct({
          bCharSet: r.uint8,
          // Character set
          xRatio: r.uint8,
          // Value to use for x-Ratio
          yStartRatio: r.uint8,
          // Starting y-Ratio value
          yEndRatio: r.uint8 // Ending y-Ratio value

        });
        var vTable = new r.Struct({
          yPelHeight: r.uint16,
          // yPelHeight to which values apply
          yMax: r.int16,
          // Maximum value (in pels) for this yPelHeight
          yMin: r.int16 // Minimum value (in pels) for this yPelHeight

        });
        var VdmxGroup = new r.Struct({
          recs: r.uint16,
          // Number of height records in this group
          startsz: r.uint8,
          // Starting yPelHeight
          endsz: r.uint8,
          // Ending yPelHeight
          entries: new r.Array(vTable, 'recs') // The VDMX records

        });
        var VDMX = new r.Struct({
          version: r.uint16,
          // Version number (0 or 1)
          numRecs: r.uint16,
          // Number of VDMX groups present
          numRatios: r.uint16,
          // Number of aspect ratio groupings
          ratioRanges: new r.Array(Ratio, 'numRatios'),
          // Ratio ranges
          offsets: new r.Array(r.uint16, 'numRatios'),
          // Offset to the VDMX group for this ratio range
          groups: new r.Array(VdmxGroup, 'numRecs') // The actual VDMX groupings

        }); // Vertical Header Table

        var vhea = new r.Struct({
          version: r.uint16,
          // Version number of the Vertical Header Table
          ascent: r.int16,
          // The vertical typographic ascender for this font
          descent: r.int16,
          // The vertical typographic descender for this font
          lineGap: r.int16,
          // The vertical typographic line gap for this font
          advanceHeightMax: r.int16,
          // The maximum advance height measurement found in the font
          minTopSideBearing: r.int16,
          // The minimum top side bearing measurement found in the font
          minBottomSideBearing: r.int16,
          // The minimum bottom side bearing measurement found in the font
          yMaxExtent: r.int16,
          caretSlopeRise: r.int16,
          // Caret slope (rise/run)
          caretSlopeRun: r.int16,
          caretOffset: r.int16,
          // Set value equal to 0 for nonslanted fonts
          reserved: new r.Reserved(r.int16, 4),
          metricDataFormat: r.int16,
          // Set to 0
          numberOfMetrics: r.uint16 // Number of advance heights in the Vertical Metrics table

        });
        var VmtxEntry = new r.Struct({
          advance: r.uint16,
          // The advance height of the glyph
          bearing: r.int16 // The top sidebearing of the glyph

        }); // Vertical Metrics Table

        var vmtx = new r.Struct({
          metrics: new r.LazyArray(VmtxEntry, function (t) {
            return t.parent.vhea.numberOfMetrics;
          }),
          bearings: new r.LazyArray(r.int16, function (t) {
            return t.parent.maxp.numGlyphs - t.parent.vhea.numberOfMetrics;
          })
        });
        var shortFrac = new r.Fixed(16, 'BE', 14);
        var Correspondence = new r.Struct({
          fromCoord: shortFrac,
          toCoord: shortFrac
        });
        var Segment = new r.Struct({
          pairCount: r.uint16,
          correspondence: new r.Array(Correspondence, 'pairCount')
        });
        var avar = new r.Struct({
          version: r.fixed32,
          axisCount: r.uint32,
          segment: new r.Array(Segment, 'axisCount')
        });

        var UnboundedArrayAccessor = function () {
          function UnboundedArrayAccessor(type, stream, parent) {
            _classCallCheck(this, UnboundedArrayAccessor);

            this.type = type;
            this.stream = stream;
            this.parent = parent;
            this.base = this.stream.pos;
            this._items = [];
          }

          UnboundedArrayAccessor.prototype.getItem = function getItem(index) {
            if (this._items[index] == null) {
              var pos = this.stream.pos;
              this.stream.pos = this.base + this.type.size(null, this.parent) * index;
              this._items[index] = this.type.decode(this.stream, this.parent);
              this.stream.pos = pos;
            }

            return this._items[index];
          };

          UnboundedArrayAccessor.prototype.inspect = function inspect() {
            return '[UnboundedArray ' + this.type.constructor.name + ']';
          };

          return UnboundedArrayAccessor;
        }();

        var UnboundedArray = function (_r$Array) {
          _inherits(UnboundedArray, _r$Array);

          function UnboundedArray(type) {
            _classCallCheck(this, UnboundedArray);

            return _possibleConstructorReturn(this, _r$Array.call(this, type, 0));
          }

          UnboundedArray.prototype.decode = function decode(stream, parent) {
            return new UnboundedArrayAccessor(this.type, stream, parent);
          };

          return UnboundedArray;
        }(r.Array);

        var LookupTable = function LookupTable() {
          var ValueType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : r.uint16; // Helper class that makes internal structures invisible to pointers

          var Shadow = function () {
            function Shadow(type) {
              _classCallCheck(this, Shadow);

              this.type = type;
            }

            Shadow.prototype.decode = function decode(stream, ctx) {
              ctx = ctx.parent.parent;
              return this.type.decode(stream, ctx);
            };

            Shadow.prototype.size = function size(val, ctx) {
              ctx = ctx.parent.parent;
              return this.type.size(val, ctx);
            };

            Shadow.prototype.encode = function encode(stream, val, ctx) {
              ctx = ctx.parent.parent;
              return this.type.encode(stream, val, ctx);
            };

            return Shadow;
          }();

          ValueType = new Shadow(ValueType);
          var BinarySearchHeader = new r.Struct({
            unitSize: r.uint16,
            nUnits: r.uint16,
            searchRange: r.uint16,
            entrySelector: r.uint16,
            rangeShift: r.uint16
          });
          var LookupSegmentSingle = new r.Struct({
            lastGlyph: r.uint16,
            firstGlyph: r.uint16,
            value: ValueType
          });
          var LookupSegmentArray = new r.Struct({
            lastGlyph: r.uint16,
            firstGlyph: r.uint16,
            values: new r.Pointer(r.uint16, new r.Array(ValueType, function (t) {
              return t.lastGlyph - t.firstGlyph + 1;
            }), {
              type: 'parent'
            })
          });
          var LookupSingle = new r.Struct({
            glyph: r.uint16,
            value: ValueType
          });
          return new r.VersionedStruct(r.uint16, {
            0: {
              values: new UnboundedArray(ValueType) // length == number of glyphs maybe?

            },
            2: {
              binarySearchHeader: BinarySearchHeader,
              segments: new r.Array(LookupSegmentSingle, function (t) {
                return t.binarySearchHeader.nUnits;
              })
            },
            4: {
              binarySearchHeader: BinarySearchHeader,
              segments: new r.Array(LookupSegmentArray, function (t) {
                return t.binarySearchHeader.nUnits;
              })
            },
            6: {
              binarySearchHeader: BinarySearchHeader,
              segments: new r.Array(LookupSingle, function (t) {
                return t.binarySearchHeader.nUnits;
              })
            },
            8: {
              firstGlyph: r.uint16,
              count: r.uint16,
              values: new r.Array(ValueType, 'count')
            }
          });
        };

        function StateTable() {
          var entryData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
          var lookupType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : r.uint16;

          var entry = _Object$assign({
            newState: r.uint16,
            flags: r.uint16
          }, entryData);

          var Entry = new r.Struct(entry);
          var StateArray = new UnboundedArray(new r.Array(r.uint16, function (t) {
            return t.nClasses;
          }));
          var StateHeader = new r.Struct({
            nClasses: r.uint32,
            classTable: new r.Pointer(r.uint32, new LookupTable(lookupType)),
            stateArray: new r.Pointer(r.uint32, StateArray),
            entryTable: new r.Pointer(r.uint32, new UnboundedArray(Entry))
          });
          return StateHeader;
        } // This is the old version of the StateTable structure


        function StateTable1() {
          var entryData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
          var lookupType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : r.uint16;
          var ClassLookupTable = new r.Struct({
            version: function version() {
              return 8;
            },
            // simulate LookupTable
            firstGlyph: r.uint16,
            values: new r.Array(r.uint8, r.uint16)
          });

          var entry = _Object$assign({
            newStateOffset: r.uint16,
            // convert offset to stateArray index
            newState: function newState(t) {
              return (t.newStateOffset - (t.parent.stateArray.base - t.parent._startOffset)) / t.parent.nClasses;
            },
            flags: r.uint16
          }, entryData);

          var Entry = new r.Struct(entry);
          var StateArray = new UnboundedArray(new r.Array(r.uint8, function (t) {
            return t.nClasses;
          }));
          var StateHeader1 = new r.Struct({
            nClasses: r.uint16,
            classTable: new r.Pointer(r.uint16, ClassLookupTable),
            stateArray: new r.Pointer(r.uint16, StateArray),
            entryTable: new r.Pointer(r.uint16, new UnboundedArray(Entry))
          });
          return StateHeader1;
        }

        var BslnSubtable = new r.VersionedStruct('format', {
          0: {
            // Distance-based, no mapping
            deltas: new r.Array(r.int16, 32)
          },
          1: {
            // Distance-based, with mapping
            deltas: new r.Array(r.int16, 32),
            mappingData: new LookupTable(r.uint16)
          },
          2: {
            // Control point-based, no mapping
            standardGlyph: r.uint16,
            controlPoints: new r.Array(r.uint16, 32)
          },
          3: {
            // Control point-based, with mapping
            standardGlyph: r.uint16,
            controlPoints: new r.Array(r.uint16, 32),
            mappingData: new LookupTable(r.uint16)
          }
        });
        var bsln = new r.Struct({
          version: r.fixed32,
          format: r.uint16,
          defaultBaseline: r.uint16,
          subtable: BslnSubtable
        });
        var Setting = new r.Struct({
          setting: r.uint16,
          nameIndex: r.int16,
          name: function name(t) {
            return t.parent.parent.parent.name.records.fontFeatures[t.nameIndex];
          }
        });
        var FeatureName = new r.Struct({
          feature: r.uint16,
          nSettings: r.uint16,
          settingTable: new r.Pointer(r.uint32, new r.Array(Setting, 'nSettings'), {
            type: 'parent'
          }),
          featureFlags: new r.Bitfield(r.uint8, [null, null, null, null, null, null, 'hasDefault', 'exclusive']),
          defaultSetting: r.uint8,
          nameIndex: r.int16,
          name: function name(t) {
            return t.parent.parent.name.records.fontFeatures[t.nameIndex];
          }
        });
        var feat = new r.Struct({
          version: r.fixed32,
          featureNameCount: r.uint16,
          reserved1: new r.Reserved(r.uint16),
          reserved2: new r.Reserved(r.uint32),
          featureNames: new r.Array(FeatureName, 'featureNameCount')
        });
        var Axis$1 = new r.Struct({
          axisTag: new r.String(4),
          minValue: r.fixed32,
          defaultValue: r.fixed32,
          maxValue: r.fixed32,
          flags: r.uint16,
          nameID: r.uint16,
          name: function name(t) {
            return t.parent.parent.name.records.fontFeatures[t.nameID];
          }
        });
        var Instance = new r.Struct({
          nameID: r.uint16,
          name: function name(t) {
            return t.parent.parent.name.records.fontFeatures[t.nameID];
          },
          flags: r.uint16,
          coord: new r.Array(r.fixed32, function (t) {
            return t.parent.axisCount;
          }),
          postscriptNameID: new r.Optional(r.uint16, function (t) {
            return t.parent.instanceSize - t._currentOffset > 0;
          })
        });
        var fvar = new r.Struct({
          version: r.fixed32,
          offsetToData: r.uint16,
          countSizePairs: r.uint16,
          axisCount: r.uint16,
          axisSize: r.uint16,
          instanceCount: r.uint16,
          instanceSize: r.uint16,
          axis: new r.Array(Axis$1, 'axisCount'),
          instance: new r.Array(Instance, 'instanceCount')
        });
        var shortFrac$1 = new r.Fixed(16, 'BE', 14);

        var Offset = function () {
          function Offset() {
            _classCallCheck(this, Offset);
          }

          Offset.decode = function decode(stream, parent) {
            // In short format, offsets are multiplied by 2.
            // This doesn't seem to be documented by Apple, but it
            // is implemented this way in Freetype.
            return parent.flags ? stream.readUInt32BE() : stream.readUInt16BE() * 2;
          };

          return Offset;
        }();

        var gvar = new r.Struct({
          version: r.uint16,
          reserved: new r.Reserved(r.uint16),
          axisCount: r.uint16,
          globalCoordCount: r.uint16,
          globalCoords: new r.Pointer(r.uint32, new r.Array(new r.Array(shortFrac$1, 'axisCount'), 'globalCoordCount')),
          glyphCount: r.uint16,
          flags: r.uint16,
          offsetToData: r.uint32,
          offsets: new r.Array(new r.Pointer(Offset, 'void', {
            relativeTo: 'offsetToData',
            allowNull: false
          }), function (t) {
            return t.glyphCount + 1;
          })
        });
        var ClassTable$1 = new r.Struct({
          length: r.uint16,
          coverage: r.uint16,
          subFeatureFlags: r.uint32,
          stateTable: new StateTable1()
        });
        var WidthDeltaRecord = new r.Struct({
          justClass: r.uint32,
          beforeGrowLimit: r.fixed32,
          beforeShrinkLimit: r.fixed32,
          afterGrowLimit: r.fixed32,
          afterShrinkLimit: r.fixed32,
          growFlags: r.uint16,
          shrinkFlags: r.uint16
        });
        var WidthDeltaCluster = new r.Array(WidthDeltaRecord, r.uint32);
        var ActionData = new r.VersionedStruct('actionType', {
          0: {
            // Decomposition action
            lowerLimit: r.fixed32,
            upperLimit: r.fixed32,
            order: r.uint16,
            glyphs: new r.Array(r.uint16, r.uint16)
          },
          1: {
            // Unconditional add glyph action
            addGlyph: r.uint16
          },
          2: {
            // Conditional add glyph action
            substThreshold: r.fixed32,
            addGlyph: r.uint16,
            substGlyph: r.uint16
          },
          3: {},
          // Stretch glyph action (no data, not supported by CoreText)
          4: {
            // Ductile glyph action (not supported by CoreText)
            variationAxis: r.uint32,
            minimumLimit: r.fixed32,
            noStretchValue: r.fixed32,
            maximumLimit: r.fixed32
          },
          5: {
            // Repeated add glyph action
            flags: r.uint16,
            glyph: r.uint16
          }
        });
        var Action = new r.Struct({
          actionClass: r.uint16,
          actionType: r.uint16,
          actionLength: r.uint32,
          actionData: ActionData,
          padding: new r.Reserved(r.uint8, function (t) {
            return t.actionLength - t._currentOffset;
          })
        });
        var PostcompensationAction = new r.Array(Action, r.uint32);
        var PostCompensationTable = new r.Struct({
          lookupTable: new LookupTable(new r.Pointer(r.uint16, PostcompensationAction))
        });
        var JustificationTable = new r.Struct({
          classTable: new r.Pointer(r.uint16, ClassTable$1, {
            type: 'parent'
          }),
          wdcOffset: r.uint16,
          postCompensationTable: new r.Pointer(r.uint16, PostCompensationTable, {
            type: 'parent'
          }),
          widthDeltaClusters: new LookupTable(new r.Pointer(r.uint16, WidthDeltaCluster, {
            type: 'parent',
            relativeTo: 'wdcOffset'
          }))
        });
        var just = new r.Struct({
          version: r.uint32,
          format: r.uint16,
          horizontal: new r.Pointer(r.uint16, JustificationTable),
          vertical: new r.Pointer(r.uint16, JustificationTable)
        });
        var LigatureData = {
          action: r.uint16
        };
        var ContextualData = {
          markIndex: r.uint16,
          currentIndex: r.uint16
        };
        var InsertionData = {
          currentInsertIndex: r.uint16,
          markedInsertIndex: r.uint16
        };
        var SubstitutionTable = new r.Struct({
          items: new UnboundedArray(new r.Pointer(r.uint32, new LookupTable()))
        });
        var SubtableData = new r.VersionedStruct('type', {
          0: {
            // Indic Rearrangement Subtable
            stateTable: new StateTable()
          },
          1: {
            // Contextual Glyph Substitution Subtable
            stateTable: new StateTable(ContextualData),
            substitutionTable: new r.Pointer(r.uint32, SubstitutionTable)
          },
          2: {
            // Ligature subtable
            stateTable: new StateTable(LigatureData),
            ligatureActions: new r.Pointer(r.uint32, new UnboundedArray(r.uint32)),
            components: new r.Pointer(r.uint32, new UnboundedArray(r.uint16)),
            ligatureList: new r.Pointer(r.uint32, new UnboundedArray(r.uint16))
          },
          4: {
            // Non-contextual Glyph Substitution Subtable
            lookupTable: new LookupTable()
          },
          5: {
            // Glyph Insertion Subtable
            stateTable: new StateTable(InsertionData),
            insertionActions: new r.Pointer(r.uint32, new UnboundedArray(r.uint16))
          }
        });
        var Subtable = new r.Struct({
          length: r.uint32,
          coverage: r.uint24,
          type: r.uint8,
          subFeatureFlags: r.uint32,
          table: SubtableData,
          padding: new r.Reserved(r.uint8, function (t) {
            return t.length - t._currentOffset;
          })
        });
        var FeatureEntry = new r.Struct({
          featureType: r.uint16,
          featureSetting: r.uint16,
          enableFlags: r.uint32,
          disableFlags: r.uint32
        });
        var MorxChain = new r.Struct({
          defaultFlags: r.uint32,
          chainLength: r.uint32,
          nFeatureEntries: r.uint32,
          nSubtables: r.uint32,
          features: new r.Array(FeatureEntry, 'nFeatureEntries'),
          subtables: new r.Array(Subtable, 'nSubtables')
        });
        var morx = new r.Struct({
          version: r.uint16,
          unused: new r.Reserved(r.uint16),
          nChains: r.uint32,
          chains: new r.Array(MorxChain, 'nChains')
        });
        var OpticalBounds = new r.Struct({
          left: r.int16,
          top: r.int16,
          right: r.int16,
          bottom: r.int16
        });
        var opbd = new r.Struct({
          version: r.fixed32,
          format: r.uint16,
          lookupTable: new LookupTable(OpticalBounds)
        });
        var tables = {}; // Required Tables

        tables.cmap = cmap;
        tables.head = head;
        tables.hhea = hhea;
        tables.hmtx = hmtx;
        tables.maxp = maxp;
        tables.name = NameTable;
        tables['OS/2'] = OS2;
        tables.post = post; // TrueType Outlines

        tables.fpgm = fpgm;
        tables.loca = loca;
        tables.prep = prep;
        tables['cvt '] = cvt;
        tables.glyf = glyf; // PostScript Outlines

        tables['CFF '] = CFFFont;
        tables['CFF2'] = CFFFont;
        tables.VORG = VORG; // Bitmap Glyphs

        tables.EBLC = EBLC;
        tables.CBLC = tables.EBLC;
        tables.sbix = sbix;
        tables.COLR = COLR;
        tables.CPAL = CPAL; // Advanced OpenType Tables

        tables.BASE = BASE;
        tables.GDEF = GDEF;
        tables.GPOS = GPOS;
        tables.GSUB = GSUB;
        tables.JSTF = JSTF; // OpenType variations tables

        tables.HVAR = HVAR; // Other OpenType Tables

        tables.DSIG = DSIG;
        tables.gasp = gasp;
        tables.hdmx = hdmx;
        tables.kern = kern;
        tables.LTSH = LTSH;
        tables.PCLT = PCLT;
        tables.VDMX = VDMX;
        tables.vhea = vhea;
        tables.vmtx = vmtx; // Apple Advanced Typography Tables

        tables.avar = avar;
        tables.bsln = bsln;
        tables.feat = feat;
        tables.fvar = fvar;
        tables.gvar = gvar;
        tables.just = just;
        tables.morx = morx;
        tables.opbd = opbd;
        var TableEntry = new r.Struct({
          tag: new r.String(4),
          checkSum: r.uint32,
          offset: new r.Pointer(r.uint32, 'void', {
            type: 'global'
          }),
          length: r.uint32
        });
        var Directory = new r.Struct({
          tag: new r.String(4),
          numTables: r.uint16,
          searchRange: r.uint16,
          entrySelector: r.uint16,
          rangeShift: r.uint16,
          tables: new r.Array(TableEntry, 'numTables')
        });

        Directory.process = function () {
          var tables = {};

          for (var _iterator = this.tables, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
            var _ref;

            if (_isArray) {
              if (_i >= _iterator.length) break;
              _ref = _iterator[_i++];
            } else {
              _i = _iterator.next();
              if (_i.done) break;
              _ref = _i.value;
            }

            var table = _ref;
            tables[table.tag] = table;
          }

          this.tables = tables;
        };

        Directory.preEncode = function (stream) {
          var tables$$ = [];

          for (var tag in this.tables) {
            var table = this.tables[tag];

            if (table) {
              tables$$.push({
                tag: tag,
                checkSum: 0,
                offset: new r.VoidPointer(tables[tag], table),
                length: tables[tag].size(table)
              });
            }
          }

          this.tag = 'true';
          this.numTables = tables$$.length;
          this.tables = tables$$;
          var maxExponentFor2 = Math.floor(Math.log(this.numTables) / Math.LN2);
          var maxPowerOf2 = Math.pow(2, maxExponentFor2);
          this.searchRange = maxPowerOf2 * 16;
          this.entrySelector = Math.log(maxPowerOf2) / Math.LN2;
          this.rangeShift = this.numTables * 16 - this.searchRange;
        };

        function binarySearch(arr, cmp) {
          var min = 0;
          var max = arr.length - 1;

          while (min <= max) {
            var mid = min + max >> 1;
            var res = cmp(arr[mid]);

            if (res < 0) {
              max = mid - 1;
            } else if (res > 0) {
              min = mid + 1;
            } else {
              return mid;
            }
          }

          return -1;
        }

        function range(index, end) {
          var range = [];

          while (index < end) {
            range.push(index++);
          }

          return range;
        }

        var _class$1;

        function _applyDecoratedDescriptor$1(target, property, decorators, descriptor, context) {
          var desc = {};
          Object['ke' + 'ys'](descriptor).forEach(function (key) {
            desc[key] = descriptor[key];
          });
          desc.enumerable = !!desc.enumerable;
          desc.configurable = !!desc.configurable;

          if ('value' in desc || desc.initializer) {
            desc.writable = true;
          }

          desc = decorators.slice().reverse().reduce(function (desc, decorator) {
            return decorator(target, property, desc) || desc;
          }, desc);

          if (context && desc.initializer !== void 0) {
            desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
            desc.initializer = undefined;
          }

          if (desc.initializer === void 0) {
            Object['define' + 'Property'](target, property, desc);
            desc = null;
          }

          return desc;
        } // iconv-lite is an optional dependency.


        try {
          var iconv = __webpack_require__(170);
        } catch (err) {}

        var CmapProcessor = (_class$1 = function () {
          function CmapProcessor(cmapTable) {
            _classCallCheck(this, CmapProcessor); // Attempt to find a Unicode cmap first


            this.encoding = null;
            this.cmap = this.findSubtable(cmapTable, [// 32-bit subtables
            [3, 10], [0, 6], [0, 4], // 16-bit subtables
            [3, 1], [0, 3], [0, 2], [0, 1], [0, 0]]); // If not unicode cmap was found, and iconv-lite is installed,
            // take the first table with a supported encoding.

            if (!this.cmap && iconv) {
              for (var _iterator = cmapTable.tables, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
                var _ref;

                if (_isArray) {
                  if (_i >= _iterator.length) break;
                  _ref = _iterator[_i++];
                } else {
                  _i = _iterator.next();
                  if (_i.done) break;
                  _ref = _i.value;
                }

                var cmap = _ref;
                var encoding = getEncoding(cmap.platformID, cmap.encodingID, cmap.table.language - 1);

                if (iconv.encodingExists(encoding)) {
                  this.cmap = cmap.table;
                  this.encoding = encoding;
                }
              }
            }

            if (!this.cmap) {
              throw new Error("Could not find a supported cmap table");
            }

            this.uvs = this.findSubtable(cmapTable, [[0, 5]]);

            if (this.uvs && this.uvs.version !== 14) {
              this.uvs = null;
            }
          }

          CmapProcessor.prototype.findSubtable = function findSubtable(cmapTable, pairs) {
            for (var _iterator2 = pairs, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
              var _ref2;

              if (_isArray2) {
                if (_i2 >= _iterator2.length) break;
                _ref2 = _iterator2[_i2++];
              } else {
                _i2 = _iterator2.next();
                if (_i2.done) break;
                _ref2 = _i2.value;
              }

              var _ref3 = _ref2,
                  platformID = _ref3[0],
                  encodingID = _ref3[1];

              for (var _iterator3 = cmapTable.tables, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
                var _ref4;

                if (_isArray3) {
                  if (_i3 >= _iterator3.length) break;
                  _ref4 = _iterator3[_i3++];
                } else {
                  _i3 = _iterator3.next();
                  if (_i3.done) break;
                  _ref4 = _i3.value;
                }

                var cmap = _ref4;

                if (cmap.platformID === platformID && cmap.encodingID === encodingID) {
                  return cmap.table;
                }
              }
            }

            return null;
          };

          CmapProcessor.prototype.lookup = function lookup(codepoint, variationSelector) {
            // If there is no Unicode cmap in this font, we need to re-encode
            // the codepoint in the encoding that the cmap supports.
            if (this.encoding) {
              var buf = iconv.encode(_String$fromCodePoint(codepoint), this.encoding);
              codepoint = 0;

              for (var i = 0; i < buf.length; i++) {
                codepoint = codepoint << 8 | buf[i];
              } // Otherwise, try to get a Unicode variation selector for this codepoint if one is provided.

            } else if (variationSelector) {
              var gid = this.getVariationSelector(codepoint, variationSelector);

              if (gid) {
                return gid;
              }
            }

            var cmap = this.cmap;

            switch (cmap.version) {
              case 0:
                return cmap.codeMap.get(codepoint) || 0;

              case 4:
                {
                  var min = 0;
                  var max = cmap.segCount - 1;

                  while (min <= max) {
                    var mid = min + max >> 1;

                    if (codepoint < cmap.startCode.get(mid)) {
                      max = mid - 1;
                    } else if (codepoint > cmap.endCode.get(mid)) {
                      min = mid + 1;
                    } else {
                      var rangeOffset = cmap.idRangeOffset.get(mid);

                      var _gid = void 0;

                      if (rangeOffset === 0) {
                        _gid = codepoint + cmap.idDelta.get(mid);
                      } else {
                        var index = rangeOffset / 2 + (codepoint - cmap.startCode.get(mid)) - (cmap.segCount - mid);
                        _gid = cmap.glyphIndexArray.get(index) || 0;

                        if (_gid !== 0) {
                          _gid += cmap.idDelta.get(mid);
                        }
                      }

                      return _gid & 0xffff;
                    }
                  }

                  return 0;
                }

              case 8:
                throw new Error('TODO: cmap format 8');

              case 6:
              case 10:
                return cmap.glyphIndices.get(codepoint - cmap.firstCode) || 0;

              case 12:
              case 13:
                {
                  var _min = 0;

                  var _max = cmap.nGroups - 1;

                  while (_min <= _max) {
                    var _mid = _min + _max >> 1;

                    var group = cmap.groups.get(_mid);

                    if (codepoint < group.startCharCode) {
                      _max = _mid - 1;
                    } else if (codepoint > group.endCharCode) {
                      _min = _mid + 1;
                    } else {
                      if (cmap.version === 12) {
                        return group.glyphID + (codepoint - group.startCharCode);
                      } else {
                        return group.glyphID;
                      }
                    }
                  }

                  return 0;
                }

              case 14:
                throw new Error('TODO: cmap format 14');

              default:
                throw new Error('Unknown cmap format ' + cmap.version);
            }
          };

          CmapProcessor.prototype.getVariationSelector = function getVariationSelector(codepoint, variationSelector) {
            if (!this.uvs) {
              return 0;
            }

            var selectors = this.uvs.varSelectors.toArray();
            var i = binarySearch(selectors, function (x) {
              return variationSelector - x.varSelector;
            });
            var sel = selectors[i];

            if (i !== -1 && sel.defaultUVS) {
              i = binarySearch(sel.defaultUVS, function (x) {
                return codepoint < x.startUnicodeValue ? -1 : codepoint > x.startUnicodeValue + x.additionalCount ? +1 : 0;
              });
            }

            if (i !== -1 && sel.nonDefaultUVS) {
              i = binarySearch(sel.nonDefaultUVS, function (x) {
                return codepoint - x.unicodeValue;
              });

              if (i !== -1) {
                return sel.nonDefaultUVS[i].glyphID;
              }
            }

            return 0;
          };

          CmapProcessor.prototype.getCharacterSet = function getCharacterSet() {
            var cmap = this.cmap;

            switch (cmap.version) {
              case 0:
                return range(0, cmap.codeMap.length);

              case 4:
                {
                  var res = [];
                  var endCodes = cmap.endCode.toArray();

                  for (var i = 0; i < endCodes.length; i++) {
                    var tail = endCodes[i] + 1;
                    var start = cmap.startCode.get(i);
                    res.push.apply(res, range(start, tail));
                  }

                  return res;
                }

              case 8:
                throw new Error('TODO: cmap format 8');

              case 6:
              case 10:
                return range(cmap.firstCode, cmap.firstCode + cmap.glyphIndices.length);

              case 12:
              case 13:
                {
                  var _res = [];

                  for (var _iterator4 = cmap.groups.toArray(), _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _getIterator(_iterator4);;) {
                    var _ref5;

                    if (_isArray4) {
                      if (_i4 >= _iterator4.length) break;
                      _ref5 = _iterator4[_i4++];
                    } else {
                      _i4 = _iterator4.next();
                      if (_i4.done) break;
                      _ref5 = _i4.value;
                    }

                    var group = _ref5;

                    _res.push.apply(_res, range(group.startCharCode, group.endCharCode + 1));
                  }

                  return _res;
                }

              case 14:
                throw new Error('TODO: cmap format 14');

              default:
                throw new Error('Unknown cmap format ' + cmap.version);
            }
          };

          CmapProcessor.prototype.codePointsForGlyph = function codePointsForGlyph(gid) {
            var cmap = this.cmap;

            switch (cmap.version) {
              case 0:
                {
                  var res = [];

                  for (var i = 0; i < 256; i++) {
                    if (cmap.codeMap.get(i) === gid) {
                      res.push(i);
                    }
                  }

                  return res;
                }

              case 4:
                {
                  var _res2 = [];

                  for (var _i5 = 0; _i5 < cmap.segCount; _i5++) {
                    var end = cmap.endCode.get(_i5);
                    var start = cmap.startCode.get(_i5);
                    var rangeOffset = cmap.idRangeOffset.get(_i5);
                    var delta = cmap.idDelta.get(_i5);

                    for (var c = start; c <= end; c++) {
                      var g = 0;

                      if (rangeOffset === 0) {
                        g = c + delta;
                      } else {
                        var index = rangeOffset / 2 + (c - start) - (cmap.segCount - _i5);
                        g = cmap.glyphIndexArray.get(index) || 0;

                        if (g !== 0) {
                          g += delta;
                        }
                      }

                      if (g === gid) {
                        _res2.push(c);
                      }
                    }
                  }

                  return _res2;
                }

              case 12:
                {
                  var _res3 = [];

                  for (var _iterator5 = cmap.groups.toArray(), _isArray5 = Array.isArray(_iterator5), _i6 = 0, _iterator5 = _isArray5 ? _iterator5 : _getIterator(_iterator5);;) {
                    var _ref6;

                    if (_isArray5) {
                      if (_i6 >= _iterator5.length) break;
                      _ref6 = _iterator5[_i6++];
                    } else {
                      _i6 = _iterator5.next();
                      if (_i6.done) break;
                      _ref6 = _i6.value;
                    }

                    var group = _ref6;

                    if (gid >= group.glyphID && gid <= group.glyphID + (group.endCharCode - group.startCharCode)) {
                      _res3.push(group.startCharCode + (gid - group.glyphID));
                    }
                  }

                  return _res3;
                }

              case 13:
                {
                  var _res4 = [];

                  for (var _iterator6 = cmap.groups.toArray(), _isArray6 = Array.isArray(_iterator6), _i7 = 0, _iterator6 = _isArray6 ? _iterator6 : _getIterator(_iterator6);;) {
                    var _ref7;

                    if (_isArray6) {
                      if (_i7 >= _iterator6.length) break;
                      _ref7 = _iterator6[_i7++];
                    } else {
                      _i7 = _iterator6.next();
                      if (_i7.done) break;
                      _ref7 = _i7.value;
                    }

                    var _group = _ref7;

                    if (gid === _group.glyphID) {
                      _res4.push.apply(_res4, range(_group.startCharCode, _group.endCharCode + 1));
                    }
                  }

                  return _res4;
                }

              default:
                throw new Error('Unknown cmap format ' + cmap.version);
            }
          };

          return CmapProcessor;
        }(), (_applyDecoratedDescriptor$1(_class$1.prototype, 'getCharacterSet', [cache], _Object$getOwnPropertyDescriptor(_class$1.prototype, 'getCharacterSet'), _class$1.prototype), _applyDecoratedDescriptor$1(_class$1.prototype, 'codePointsForGlyph', [cache], _Object$getOwnPropertyDescriptor(_class$1.prototype, 'codePointsForGlyph'), _class$1.prototype)), _class$1);

        var KernProcessor = function () {
          function KernProcessor(font) {
            _classCallCheck(this, KernProcessor);

            this.kern = font.kern;
          }

          KernProcessor.prototype.process = function process(glyphs, positions) {
            for (var glyphIndex = 0; glyphIndex < glyphs.length - 1; glyphIndex++) {
              var left = glyphs[glyphIndex].id;
              var right = glyphs[glyphIndex + 1].id;
              positions[glyphIndex].xAdvance += this.getKerning(left, right);
            }
          };

          KernProcessor.prototype.getKerning = function getKerning(left, right) {
            var res = 0;

            for (var _iterator = this.kern.tables, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
              var _ref;

              if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref = _iterator[_i++];
              } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref = _i.value;
              }

              var table = _ref;

              if (table.coverage.crossStream) {
                continue;
              }

              switch (table.version) {
                case 0:
                  if (!table.coverage.horizontal) {
                    continue;
                  }

                  break;

                case 1:
                  if (table.coverage.vertical || table.coverage.variation) {
                    continue;
                  }

                  break;

                default:
                  throw new Error('Unsupported kerning table version ' + table.version);
              }

              var val = 0;
              var s = table.subtable;

              switch (table.format) {
                case 0:
                  var pairIdx = binarySearch(s.pairs, function (pair) {
                    return left - pair.left || right - pair.right;
                  });

                  if (pairIdx >= 0) {
                    val = s.pairs[pairIdx].value;
                  }

                  break;

                case 2:
                  var leftOffset = 0,
                      rightOffset = 0;

                  if (left >= s.leftTable.firstGlyph && left < s.leftTable.firstGlyph + s.leftTable.nGlyphs) {
                    leftOffset = s.leftTable.offsets[left - s.leftTable.firstGlyph];
                  } else {
                    leftOffset = s.array.off;
                  }

                  if (right >= s.rightTable.firstGlyph && right < s.rightTable.firstGlyph + s.rightTable.nGlyphs) {
                    rightOffset = s.rightTable.offsets[right - s.rightTable.firstGlyph];
                  }

                  var index = (leftOffset + rightOffset - s.array.off) / 2;
                  val = s.array.values.get(index);
                  break;

                case 3:
                  if (left >= s.glyphCount || right >= s.glyphCount) {
                    return 0;
                  }

                  val = s.kernValue[s.kernIndex[s.leftClass[left] * s.rightClassCount + s.rightClass[right]]];
                  break;

                default:
                  throw new Error('Unsupported kerning sub-table format ' + table.format);
              } // Microsoft supports the override flag, which resets the result
              // Otherwise, the sum of the results from all subtables is returned


              if (table.coverage.override) {
                res = val;
              } else {
                res += val;
              }
            }

            return res;
          };

          return KernProcessor;
        }();
        /**
         * This class is used when GPOS does not define 'mark' or 'mkmk' features
         * for positioning marks relative to base glyphs. It uses the unicode
         * combining class property to position marks.
         *
         * Based on code from Harfbuzz, thanks!
         * https://github.com/behdad/harfbuzz/blob/master/src/hb-ot-shape-fallback.cc
         */


        var UnicodeLayoutEngine = function () {
          function UnicodeLayoutEngine(font) {
            _classCallCheck(this, UnicodeLayoutEngine);

            this.font = font;
          }

          UnicodeLayoutEngine.prototype.positionGlyphs = function positionGlyphs(glyphs, positions) {
            // find each base + mark cluster, and position the marks relative to the base
            var clusterStart = 0;
            var clusterEnd = 0;

            for (var index = 0; index < glyphs.length; index++) {
              var glyph = glyphs[index];

              if (glyph.isMark) {
                // TODO: handle ligatures
                clusterEnd = index;
              } else {
                if (clusterStart !== clusterEnd) {
                  this.positionCluster(glyphs, positions, clusterStart, clusterEnd);
                }

                clusterStart = clusterEnd = index;
              }
            }

            if (clusterStart !== clusterEnd) {
              this.positionCluster(glyphs, positions, clusterStart, clusterEnd);
            }

            return positions;
          };

          UnicodeLayoutEngine.prototype.positionCluster = function positionCluster(glyphs, positions, clusterStart, clusterEnd) {
            var base = glyphs[clusterStart];
            var baseBox = base.cbox.copy(); // adjust bounding box for ligature glyphs

            if (base.codePoints.length > 1) {
              // LTR. TODO: RTL support.
              baseBox.minX += (base.codePoints.length - 1) * baseBox.width / base.codePoints.length;
            }

            var xOffset = -positions[clusterStart].xAdvance;
            var yOffset = 0;
            var yGap = this.font.unitsPerEm / 16; // position each of the mark glyphs relative to the base glyph

            for (var index = clusterStart + 1; index <= clusterEnd; index++) {
              var mark = glyphs[index];
              var markBox = mark.cbox;
              var position = positions[index];
              var combiningClass = this.getCombiningClass(mark.codePoints[0]);

              if (combiningClass !== 'Not_Reordered') {
                position.xOffset = position.yOffset = 0; // x positioning

                switch (combiningClass) {
                  case 'Double_Above':
                  case 'Double_Below':
                    // LTR. TODO: RTL support.
                    position.xOffset += baseBox.minX - markBox.width / 2 - markBox.minX;
                    break;

                  case 'Attached_Below_Left':
                  case 'Below_Left':
                  case 'Above_Left':
                    // left align
                    position.xOffset += baseBox.minX - markBox.minX;
                    break;

                  case 'Attached_Above_Right':
                  case 'Below_Right':
                  case 'Above_Right':
                    // right align
                    position.xOffset += baseBox.maxX - markBox.width - markBox.minX;
                    break;

                  default:
                    // Attached_Below, Attached_Above, Below, Above, other
                    // center align
                    position.xOffset += baseBox.minX + (baseBox.width - markBox.width) / 2 - markBox.minX;
                } // y positioning


                switch (combiningClass) {
                  case 'Double_Below':
                  case 'Below_Left':
                  case 'Below':
                  case 'Below_Right':
                  case 'Attached_Below_Left':
                  case 'Attached_Below':
                    // add a small gap between the glyphs if they are not attached
                    if (combiningClass === 'Attached_Below_Left' || combiningClass === 'Attached_Below') {
                      baseBox.minY += yGap;
                    }

                    position.yOffset = -baseBox.minY - markBox.maxY;
                    baseBox.minY += markBox.height;
                    break;

                  case 'Double_Above':
                  case 'Above_Left':
                  case 'Above':
                  case 'Above_Right':
                  case 'Attached_Above':
                  case 'Attached_Above_Right':
                    // add a small gap between the glyphs if they are not attached
                    if (combiningClass === 'Attached_Above' || combiningClass === 'Attached_Above_Right') {
                      baseBox.maxY += yGap;
                    }

                    position.yOffset = baseBox.maxY - markBox.minY;
                    baseBox.maxY += markBox.height;
                    break;
                }

                position.xAdvance = position.yAdvance = 0;
                position.xOffset += xOffset;
                position.yOffset += yOffset;
              } else {
                xOffset -= position.xAdvance;
                yOffset -= position.yAdvance;
              }
            }

            return;
          };

          UnicodeLayoutEngine.prototype.getCombiningClass = function getCombiningClass(codePoint) {
            var combiningClass = unicode.getCombiningClass(codePoint); // Thai / Lao need some per-character work

            if ((codePoint & ~0xff) === 0x0e00) {
              if (combiningClass === 'Not_Reordered') {
                switch (codePoint) {
                  case 0x0e31:
                  case 0x0e34:
                  case 0x0e35:
                  case 0x0e36:
                  case 0x0e37:
                  case 0x0e47:
                  case 0x0e4c:
                  case 0x0e3d:
                  case 0x0e4e:
                    return 'Above_Right';

                  case 0x0eb1:
                  case 0x0eb4:
                  case 0x0eb5:
                  case 0x0eb6:
                  case 0x0eb7:
                  case 0x0ebb:
                  case 0x0ecc:
                  case 0x0ecd:
                    return 'Above';

                  case 0x0ebc:
                    return 'Below';
                }
              } else if (codePoint === 0x0e3a) {
                // virama
                return 'Below_Right';
              }
            }

            switch (combiningClass) {
              // Hebrew
              case 'CCC10': // sheva

              case 'CCC11': // hataf segol

              case 'CCC12': // hataf patah

              case 'CCC13': // hataf qamats

              case 'CCC14': // hiriq

              case 'CCC15': // tsere

              case 'CCC16': // segol

              case 'CCC17': // patah

              case 'CCC18': // qamats

              case 'CCC20': // qubuts

              case 'CCC22':
                // meteg
                return 'Below';

              case 'CCC23':
                // rafe
                return 'Attached_Above';

              case 'CCC24':
                // shin dot
                return 'Above_Right';

              case 'CCC25': // sin dot

              case 'CCC19':
                // holam
                return 'Above_Left';

              case 'CCC26':
                // point varika
                return 'Above';

              case 'CCC21':
                // dagesh
                break;
              // Arabic and Syriac

              case 'CCC27': // fathatan

              case 'CCC28': // dammatan

              case 'CCC30': // fatha

              case 'CCC31': // damma

              case 'CCC33': // shadda

              case 'CCC34': // sukun

              case 'CCC35': // superscript alef

              case 'CCC36':
                // superscript alaph
                return 'Above';

              case 'CCC29': // kasratan

              case 'CCC32':
                // kasra
                return 'Below';
              // Thai

              case 'CCC103':
                // sara u / sara uu
                return 'Below_Right';

              case 'CCC107':
                // mai
                return 'Above_Right';
              // Lao

              case 'CCC118':
                // sign u / sign uu
                return 'Below';

              case 'CCC122':
                // mai
                return 'Above';
              // Tibetan

              case 'CCC129': // sign aa

              case 'CCC132':
                // sign u
                return 'Below';

              case 'CCC130':
                // sign i
                return 'Above';
            }

            return combiningClass;
          };

          return UnicodeLayoutEngine;
        }();
        /**
         * Represents a glyph bounding box
         */


        var BBox = function () {
          function BBox() {
            var minX = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Infinity;
            var minY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Infinity;
            var maxX = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -Infinity;
            var maxY = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : -Infinity;

            _classCallCheck(this, BBox);
            /**
             * The minimum X position in the bounding box
             * @type {number}
             */


            this.minX = minX;
            /**
             * The minimum Y position in the bounding box
             * @type {number}
             */

            this.minY = minY;
            /**
             * The maxmimum X position in the bounding box
             * @type {number}
             */

            this.maxX = maxX;
            /**
             * The maxmimum Y position in the bounding box
             * @type {number}
             */

            this.maxY = maxY;
          }
          /**
           * The width of the bounding box
           * @type {number}
           */


          BBox.prototype.addPoint = function addPoint(x, y) {
            if (Math.abs(x) !== Infinity) {
              if (x < this.minX) {
                this.minX = x;
              }

              if (x > this.maxX) {
                this.maxX = x;
              }
            }

            if (Math.abs(y) !== Infinity) {
              if (y < this.minY) {
                this.minY = y;
              }

              if (y > this.maxY) {
                this.maxY = y;
              }
            }
          };

          BBox.prototype.copy = function copy() {
            return new BBox(this.minX, this.minY, this.maxX, this.maxY);
          };

          _createClass(BBox, [{
            key: "width",
            get: function get() {
              return this.maxX - this.minX;
            }
            /**
             * The height of the bounding box
             * @type {number}
             */

          }, {
            key: "height",
            get: function get() {
              return this.maxY - this.minY;
            }
          }]);

          return BBox;
        }(); // This maps the Unicode Script property to an OpenType script tag
        // Data from http://www.microsoft.com/typography/otspec/scripttags.htm
        // and http://www.unicode.org/Public/UNIDATA/PropertyValueAliases.txt.


        var UNICODE_SCRIPTS = {
          Caucasian_Albanian: 'aghb',
          Arabic: 'arab',
          Imperial_Aramaic: 'armi',
          Armenian: 'armn',
          Avestan: 'avst',
          Balinese: 'bali',
          Bamum: 'bamu',
          Bassa_Vah: 'bass',
          Batak: 'batk',
          Bengali: ['bng2', 'beng'],
          Bopomofo: 'bopo',
          Brahmi: 'brah',
          Braille: 'brai',
          Buginese: 'bugi',
          Buhid: 'buhd',
          Chakma: 'cakm',
          Canadian_Aboriginal: 'cans',
          Carian: 'cari',
          Cham: 'cham',
          Cherokee: 'cher',
          Coptic: 'copt',
          Cypriot: 'cprt',
          Cyrillic: 'cyrl',
          Devanagari: ['dev2', 'deva'],
          Deseret: 'dsrt',
          Duployan: 'dupl',
          Egyptian_Hieroglyphs: 'egyp',
          Elbasan: 'elba',
          Ethiopic: 'ethi',
          Georgian: 'geor',
          Glagolitic: 'glag',
          Gothic: 'goth',
          Grantha: 'gran',
          Greek: 'grek',
          Gujarati: ['gjr2', 'gujr'],
          Gurmukhi: ['gur2', 'guru'],
          Hangul: 'hang',
          Han: 'hani',
          Hanunoo: 'hano',
          Hebrew: 'hebr',
          Hiragana: 'hira',
          Pahawh_Hmong: 'hmng',
          Katakana_Or_Hiragana: 'hrkt',
          Old_Italic: 'ital',
          Javanese: 'java',
          Kayah_Li: 'kali',
          Katakana: 'kana',
          Kharoshthi: 'khar',
          Khmer: 'khmr',
          Khojki: 'khoj',
          Kannada: ['knd2', 'knda'],
          Kaithi: 'kthi',
          Tai_Tham: 'lana',
          Lao: 'lao ',
          Latin: 'latn',
          Lepcha: 'lepc',
          Limbu: 'limb',
          Linear_A: 'lina',
          Linear_B: 'linb',
          Lisu: 'lisu',
          Lycian: 'lyci',
          Lydian: 'lydi',
          Mahajani: 'mahj',
          Mandaic: 'mand',
          Manichaean: 'mani',
          Mende_Kikakui: 'mend',
          Meroitic_Cursive: 'merc',
          Meroitic_Hieroglyphs: 'mero',
          Malayalam: ['mlm2', 'mlym'],
          Modi: 'modi',
          Mongolian: 'mong',
          Mro: 'mroo',
          Meetei_Mayek: 'mtei',
          Myanmar: ['mym2', 'mymr'],
          Old_North_Arabian: 'narb',
          Nabataean: 'nbat',
          Nko: 'nko ',
          Ogham: 'ogam',
          Ol_Chiki: 'olck',
          Old_Turkic: 'orkh',
          Oriya: ['ory2', 'orya'],
          Osmanya: 'osma',
          Palmyrene: 'palm',
          Pau_Cin_Hau: 'pauc',
          Old_Permic: 'perm',
          Phags_Pa: 'phag',
          Inscriptional_Pahlavi: 'phli',
          Psalter_Pahlavi: 'phlp',
          Phoenician: 'phnx',
          Miao: 'plrd',
          Inscriptional_Parthian: 'prti',
          Rejang: 'rjng',
          Runic: 'runr',
          Samaritan: 'samr',
          Old_South_Arabian: 'sarb',
          Saurashtra: 'saur',
          Shavian: 'shaw',
          Sharada: 'shrd',
          Siddham: 'sidd',
          Khudawadi: 'sind',
          Sinhala: 'sinh',
          Sora_Sompeng: 'sora',
          Sundanese: 'sund',
          Syloti_Nagri: 'sylo',
          Syriac: 'syrc',
          Tagbanwa: 'tagb',
          Takri: 'takr',
          Tai_Le: 'tale',
          New_Tai_Lue: 'talu',
          Tamil: ['tml2', 'taml'],
          Tai_Viet: 'tavt',
          Telugu: ['tel2', 'telu'],
          Tifinagh: 'tfng',
          Tagalog: 'tglg',
          Thaana: 'thaa',
          Thai: 'thai',
          Tibetan: 'tibt',
          Tirhuta: 'tirh',
          Ugaritic: 'ugar',
          Vai: 'vai ',
          Warang_Citi: 'wara',
          Old_Persian: 'xpeo',
          Cuneiform: 'xsux',
          Yi: 'yi  ',
          Inherited: 'zinh',
          Common: 'zyyy',
          Unknown: 'zzzz'
        };
        var OPENTYPE_SCRIPTS = {};

        for (var script in UNICODE_SCRIPTS) {
          var tag = UNICODE_SCRIPTS[script];

          if (Array.isArray(tag)) {
            for (var _iterator = tag, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
              var _ref;

              if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref = _iterator[_i++];
              } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref = _i.value;
              }

              var t = _ref;
              OPENTYPE_SCRIPTS[t] = script;
            }
          } else {
            OPENTYPE_SCRIPTS[tag] = script;
          }
        }

        function fromOpenType(tag) {
          return OPENTYPE_SCRIPTS[tag];
        }

        function forString(string) {
          var len = string.length;
          var idx = 0;

          while (idx < len) {
            var code = string.charCodeAt(idx++); // Check if this is a high surrogate

            if (0xd800 <= code && code <= 0xdbff && idx < len) {
              var next = string.charCodeAt(idx); // Check if this is a low surrogate

              if (0xdc00 <= next && next <= 0xdfff) {
                idx++;
                code = ((code & 0x3FF) << 10) + (next & 0x3FF) + 0x10000;
              }
            }

            var _script = unicode.getScript(code);

            if (_script !== 'Common' && _script !== 'Inherited' && _script !== 'Unknown') {
              return UNICODE_SCRIPTS[_script];
            }
          }

          return UNICODE_SCRIPTS.Unknown;
        }

        function forCodePoints(codePoints) {
          for (var i = 0; i < codePoints.length; i++) {
            var codePoint = codePoints[i];

            var _script2 = unicode.getScript(codePoint);

            if (_script2 !== 'Common' && _script2 !== 'Inherited' && _script2 !== 'Unknown') {
              return UNICODE_SCRIPTS[_script2];
            }
          }

          return UNICODE_SCRIPTS.Unknown;
        } // The scripts in this map are written from right to left


        var RTL = {
          arab: true,
          // Arabic
          hebr: true,
          // Hebrew
          syrc: true,
          // Syriac
          thaa: true,
          // Thaana
          cprt: true,
          // Cypriot Syllabary
          khar: true,
          // Kharosthi
          phnx: true,
          // Phoenician
          'nko ': true,
          // N'Ko
          lydi: true,
          // Lydian
          avst: true,
          // Avestan
          armi: true,
          // Imperial Aramaic
          phli: true,
          // Inscriptional Pahlavi
          prti: true,
          // Inscriptional Parthian
          sarb: true,
          // Old South Arabian
          orkh: true,
          // Old Turkic, Orkhon Runic
          samr: true,
          // Samaritan
          mand: true,
          // Mandaic, Mandaean
          merc: true,
          // Meroitic Cursive
          mero: true,
          // Meroitic Hieroglyphs
          // Unicode 7.0 (not listed on http://www.microsoft.com/typography/otspec/scripttags.htm)
          mani: true,
          // Manichaean
          mend: true,
          // Mende Kikakui
          nbat: true,
          // Nabataean
          narb: true,
          // Old North Arabian
          palm: true,
          // Palmyrene
          phlp: true // Psalter Pahlavi

        };

        function direction(script) {
          if (RTL[script]) {
            return 'rtl';
          }

          return 'ltr';
        }
        /**
         * Represents a run of Glyph and GlyphPosition objects.
         * Returned by the font layout method.
         */


        var GlyphRun = function () {
          function GlyphRun(glyphs, features, script, language, direction$$) {
            _classCallCheck(this, GlyphRun);
            /**
             * An array of Glyph objects in the run
             * @type {Glyph[]}
             */


            this.glyphs = glyphs;
            /**
             * An array of GlyphPosition objects for each glyph in the run
             * @type {GlyphPosition[]}
             */

            this.positions = null;
            /**
             * The script that was requested for shaping. This was either passed in or detected automatically.
             * @type {string}
             */

            this.script = script;
            /**
             * The language requested for shaping, as passed in. If `null`, the default language for the
             * script was used.
             * @type {string}
             */

            this.language = language || null;
            /**
             * The direction requested for shaping, as passed in (either ltr or rtl).
             * If `null`, the default direction of the script is used.
             * @type {string}
             */

            this.direction = direction$$ || direction(script);
            /**
             * The features requested during shaping. This is a combination of user
             * specified features and features chosen by the shaper.
             * @type {object}
             */

            this.features = {}; // Convert features to an object

            if (Array.isArray(features)) {
              for (var _iterator = features, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
                var _ref;

                if (_isArray) {
                  if (_i >= _iterator.length) break;
                  _ref = _iterator[_i++];
                } else {
                  _i = _iterator.next();
                  if (_i.done) break;
                  _ref = _i.value;
                }

                var tag = _ref;
                this.features[tag] = true;
              }
            } else if ((typeof features === 'undefined' ? 'undefined' : _typeof(features)) === 'object') {
              this.features = features;
            }
          }
          /**
           * The total advance width of the run.
           * @type {number}
           */


          _createClass(GlyphRun, [{
            key: 'advanceWidth',
            get: function get() {
              var width = 0;

              for (var _iterator2 = this.positions, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
                var _ref2;

                if (_isArray2) {
                  if (_i2 >= _iterator2.length) break;
                  _ref2 = _iterator2[_i2++];
                } else {
                  _i2 = _iterator2.next();
                  if (_i2.done) break;
                  _ref2 = _i2.value;
                }

                var position = _ref2;
                width += position.xAdvance;
              }

              return width;
            }
            /**
             * The total advance height of the run.
             * @type {number}
             */

          }, {
            key: 'advanceHeight',
            get: function get() {
              var height = 0;

              for (var _iterator3 = this.positions, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
                var _ref3;

                if (_isArray3) {
                  if (_i3 >= _iterator3.length) break;
                  _ref3 = _iterator3[_i3++];
                } else {
                  _i3 = _iterator3.next();
                  if (_i3.done) break;
                  _ref3 = _i3.value;
                }

                var position = _ref3;
                height += position.yAdvance;
              }

              return height;
            }
            /**
             * The bounding box containing all glyphs in the run.
             * @type {BBox}
             */

          }, {
            key: 'bbox',
            get: function get() {
              var bbox = new BBox();
              var x = 0;
              var y = 0;

              for (var index = 0; index < this.glyphs.length; index++) {
                var glyph = this.glyphs[index];
                var p = this.positions[index];
                var b = glyph.bbox;
                bbox.addPoint(b.minX + x + p.xOffset, b.minY + y + p.yOffset);
                bbox.addPoint(b.maxX + x + p.xOffset, b.maxY + y + p.yOffset);
                x += p.xAdvance;
                y += p.yAdvance;
              }

              return bbox;
            }
          }]);

          return GlyphRun;
        }();
        /**
         * Represents positioning information for a glyph in a GlyphRun.
         */


        var GlyphPosition = function GlyphPosition() {
          var xAdvance = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
          var yAdvance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
          var xOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
          var yOffset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

          _classCallCheck(this, GlyphPosition);
          /**
           * The amount to move the virtual pen in the X direction after rendering this glyph.
           * @type {number}
           */


          this.xAdvance = xAdvance;
          /**
           * The amount to move the virtual pen in the Y direction after rendering this glyph.
           * @type {number}
           */

          this.yAdvance = yAdvance;
          /**
           * The offset from the pen position in the X direction at which to render this glyph.
           * @type {number}
           */

          this.xOffset = xOffset;
          /**
           * The offset from the pen position in the Y direction at which to render this glyph.
           * @type {number}
           */

          this.yOffset = yOffset;
        }; // see https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html
        // and /System/Library/Frameworks/CoreText.framework/Versions/A/Headers/SFNTLayoutTypes.h on a Mac


        var features = {
          allTypographicFeatures: {
            code: 0,
            exclusive: false,
            allTypeFeatures: 0
          },
          ligatures: {
            code: 1,
            exclusive: false,
            requiredLigatures: 0,
            commonLigatures: 2,
            rareLigatures: 4,
            // logos: 6
            rebusPictures: 8,
            diphthongLigatures: 10,
            squaredLigatures: 12,
            abbrevSquaredLigatures: 14,
            symbolLigatures: 16,
            contextualLigatures: 18,
            historicalLigatures: 20
          },
          cursiveConnection: {
            code: 2,
            exclusive: true,
            unconnected: 0,
            partiallyConnected: 1,
            cursive: 2
          },
          letterCase: {
            code: 3,
            exclusive: true
          },
          // upperAndLowerCase: 0          # deprecated
          // allCaps: 1                    # deprecated
          // allLowerCase: 2               # deprecated
          // smallCaps: 3                  # deprecated
          // initialCaps: 4                # deprecated
          // initialCapsAndSmallCaps: 5    # deprecated
          verticalSubstitution: {
            code: 4,
            exclusive: false,
            substituteVerticalForms: 0
          },
          linguisticRearrangement: {
            code: 5,
            exclusive: false,
            linguisticRearrangement: 0
          },
          numberSpacing: {
            code: 6,
            exclusive: true,
            monospacedNumbers: 0,
            proportionalNumbers: 1,
            thirdWidthNumbers: 2,
            quarterWidthNumbers: 3
          },
          smartSwash: {
            code: 8,
            exclusive: false,
            wordInitialSwashes: 0,
            wordFinalSwashes: 2,
            // lineInitialSwashes: 4
            // lineFinalSwashes: 6
            nonFinalSwashes: 8
          },
          diacritics: {
            code: 9,
            exclusive: true,
            showDiacritics: 0,
            hideDiacritics: 1,
            decomposeDiacritics: 2
          },
          verticalPosition: {
            code: 10,
            exclusive: true,
            normalPosition: 0,
            superiors: 1,
            inferiors: 2,
            ordinals: 3,
            scientificInferiors: 4
          },
          fractions: {
            code: 11,
            exclusive: true,
            noFractions: 0,
            verticalFractions: 1,
            diagonalFractions: 2
          },
          overlappingCharacters: {
            code: 13,
            exclusive: false,
            preventOverlap: 0
          },
          typographicExtras: {
            code: 14,
            exclusive: false,
            // hyphensToEmDash: 0
            // hyphenToEnDash: 2
            slashedZero: 4
          },
          // formInterrobang: 6
          // smartQuotes: 8
          // periodsToEllipsis: 10
          mathematicalExtras: {
            code: 15,
            exclusive: false,
            // hyphenToMinus: 0
            // asteristoMultiply: 2
            // slashToDivide: 4
            // inequalityLigatures: 6
            // exponents: 8
            mathematicalGreek: 10
          },
          ornamentSets: {
            code: 16,
            exclusive: true,
            noOrnaments: 0,
            dingbats: 1,
            piCharacters: 2,
            fleurons: 3,
            decorativeBorders: 4,
            internationalSymbols: 5,
            mathSymbols: 6
          },
          characterAlternatives: {
            code: 17,
            exclusive: true,
            noAlternates: 0
          },
          // user defined options
          designComplexity: {
            code: 18,
            exclusive: true,
            designLevel1: 0,
            designLevel2: 1,
            designLevel3: 2,
            designLevel4: 3,
            designLevel5: 4
          },
          styleOptions: {
            code: 19,
            exclusive: true,
            noStyleOptions: 0,
            displayText: 1,
            engravedText: 2,
            illuminatedCaps: 3,
            titlingCaps: 4,
            tallCaps: 5
          },
          characterShape: {
            code: 20,
            exclusive: true,
            traditionalCharacters: 0,
            simplifiedCharacters: 1,
            JIS1978Characters: 2,
            JIS1983Characters: 3,
            JIS1990Characters: 4,
            traditionalAltOne: 5,
            traditionalAltTwo: 6,
            traditionalAltThree: 7,
            traditionalAltFour: 8,
            traditionalAltFive: 9,
            expertCharacters: 10,
            JIS2004Characters: 11,
            hojoCharacters: 12,
            NLCCharacters: 13,
            traditionalNamesCharacters: 14
          },
          numberCase: {
            code: 21,
            exclusive: true,
            lowerCaseNumbers: 0,
            upperCaseNumbers: 1
          },
          textSpacing: {
            code: 22,
            exclusive: true,
            proportionalText: 0,
            monospacedText: 1,
            halfWidthText: 2,
            thirdWidthText: 3,
            quarterWidthText: 4,
            altProportionalText: 5,
            altHalfWidthText: 6
          },
          transliteration: {
            code: 23,
            exclusive: true,
            noTransliteration: 0
          },
          // hanjaToHangul: 1
          // hiraganaToKatakana: 2
          // katakanaToHiragana: 3
          // kanaToRomanization: 4
          // romanizationToHiragana: 5
          // romanizationToKatakana: 6
          // hanjaToHangulAltOne: 7
          // hanjaToHangulAltTwo: 8
          // hanjaToHangulAltThree: 9
          annotation: {
            code: 24,
            exclusive: true,
            noAnnotation: 0,
            boxAnnotation: 1,
            roundedBoxAnnotation: 2,
            circleAnnotation: 3,
            invertedCircleAnnotation: 4,
            parenthesisAnnotation: 5,
            periodAnnotation: 6,
            romanNumeralAnnotation: 7,
            diamondAnnotation: 8,
            invertedBoxAnnotation: 9,
            invertedRoundedBoxAnnotation: 10
          },
          kanaSpacing: {
            code: 25,
            exclusive: true,
            fullWidthKana: 0,
            proportionalKana: 1
          },
          ideographicSpacing: {
            code: 26,
            exclusive: true,
            fullWidthIdeographs: 0,
            proportionalIdeographs: 1,
            halfWidthIdeographs: 2
          },
          unicodeDecomposition: {
            code: 27,
            exclusive: false,
            canonicalComposition: 0,
            compatibilityComposition: 2,
            transcodingComposition: 4
          },
          rubyKana: {
            code: 28,
            exclusive: false,
            // noRubyKana: 0     # deprecated - use rubyKanaOff instead
            // rubyKana: 1     # deprecated - use rubyKanaOn instead
            rubyKana: 2
          },
          CJKSymbolAlternatives: {
            code: 29,
            exclusive: true,
            noCJKSymbolAlternatives: 0,
            CJKSymbolAltOne: 1,
            CJKSymbolAltTwo: 2,
            CJKSymbolAltThree: 3,
            CJKSymbolAltFour: 4,
            CJKSymbolAltFive: 5
          },
          ideographicAlternatives: {
            code: 30,
            exclusive: true,
            noIdeographicAlternatives: 0,
            ideographicAltOne: 1,
            ideographicAltTwo: 2,
            ideographicAltThree: 3,
            ideographicAltFour: 4,
            ideographicAltFive: 5
          },
          CJKVerticalRomanPlacement: {
            code: 31,
            exclusive: true,
            CJKVerticalRomanCentered: 0,
            CJKVerticalRomanHBaseline: 1
          },
          italicCJKRoman: {
            code: 32,
            exclusive: false,
            // noCJKItalicRoman: 0     # deprecated - use CJKItalicRomanOff instead
            // CJKItalicRoman: 1     # deprecated - use CJKItalicRomanOn instead
            CJKItalicRoman: 2
          },
          caseSensitiveLayout: {
            code: 33,
            exclusive: false,
            caseSensitiveLayout: 0,
            caseSensitiveSpacing: 2
          },
          alternateKana: {
            code: 34,
            exclusive: false,
            alternateHorizKana: 0,
            alternateVertKana: 2
          },
          stylisticAlternatives: {
            code: 35,
            exclusive: false,
            noStylisticAlternates: 0,
            stylisticAltOne: 2,
            stylisticAltTwo: 4,
            stylisticAltThree: 6,
            stylisticAltFour: 8,
            stylisticAltFive: 10,
            stylisticAltSix: 12,
            stylisticAltSeven: 14,
            stylisticAltEight: 16,
            stylisticAltNine: 18,
            stylisticAltTen: 20,
            stylisticAltEleven: 22,
            stylisticAltTwelve: 24,
            stylisticAltThirteen: 26,
            stylisticAltFourteen: 28,
            stylisticAltFifteen: 30,
            stylisticAltSixteen: 32,
            stylisticAltSeventeen: 34,
            stylisticAltEighteen: 36,
            stylisticAltNineteen: 38,
            stylisticAltTwenty: 40
          },
          contextualAlternates: {
            code: 36,
            exclusive: false,
            contextualAlternates: 0,
            swashAlternates: 2,
            contextualSwashAlternates: 4
          },
          lowerCase: {
            code: 37,
            exclusive: true,
            defaultLowerCase: 0,
            lowerCaseSmallCaps: 1,
            lowerCasePetiteCaps: 2
          },
          upperCase: {
            code: 38,
            exclusive: true,
            defaultUpperCase: 0,
            upperCaseSmallCaps: 1,
            upperCasePetiteCaps: 2
          },
          languageTag: {
            // indices into ltag table
            code: 39,
            exclusive: true
          },
          CJKRomanSpacing: {
            code: 103,
            exclusive: true,
            halfWidthCJKRoman: 0,
            proportionalCJKRoman: 1,
            defaultCJKRoman: 2,
            fullWidthCJKRoman: 3
          }
        };

        var feature = function feature(name, selector) {
          return [features[name].code, features[name][selector]];
        };

        var OTMapping = {
          rlig: feature('ligatures', 'requiredLigatures'),
          clig: feature('ligatures', 'contextualLigatures'),
          dlig: feature('ligatures', 'rareLigatures'),
          hlig: feature('ligatures', 'historicalLigatures'),
          liga: feature('ligatures', 'commonLigatures'),
          hist: feature('ligatures', 'historicalLigatures'),
          // ??
          smcp: feature('lowerCase', 'lowerCaseSmallCaps'),
          pcap: feature('lowerCase', 'lowerCasePetiteCaps'),
          frac: feature('fractions', 'diagonalFractions'),
          dnom: feature('fractions', 'diagonalFractions'),
          // ??
          numr: feature('fractions', 'diagonalFractions'),
          // ??
          afrc: feature('fractions', 'verticalFractions'),
          // aalt
          // abvf, abvm, abvs, akhn, blwf, blwm, blws, cfar, cjct, cpsp, falt, isol, jalt, ljmo, mset?
          // ltra, ltrm, nukt, pref, pres, pstf, psts, rand, rkrf, rphf, rtla, rtlm, size, tjmo, tnum?
          // unic, vatu, vhal, vjmo, vpal, vrt2
          // dist -> trak table?
          // kern, vkrn -> kern table
          // lfbd + opbd + rtbd -> opbd table?
          // mark, mkmk -> acnt table?
          // locl -> languageTag + ltag table
          case: feature('caseSensitiveLayout', 'caseSensitiveLayout'),
          // also caseSensitiveSpacing
          ccmp: feature('unicodeDecomposition', 'canonicalComposition'),
          // compatibilityComposition?
          cpct: feature('CJKVerticalRomanPlacement', 'CJKVerticalRomanCentered'),
          // guess..., probably not given below
          valt: feature('CJKVerticalRomanPlacement', 'CJKVerticalRomanCentered'),
          swsh: feature('contextualAlternates', 'swashAlternates'),
          cswh: feature('contextualAlternates', 'contextualSwashAlternates'),
          curs: feature('cursiveConnection', 'cursive'),
          // ??
          c2pc: feature('upperCase', 'upperCasePetiteCaps'),
          c2sc: feature('upperCase', 'upperCaseSmallCaps'),
          init: feature('smartSwash', 'wordInitialSwashes'),
          // ??
          fin2: feature('smartSwash', 'wordFinalSwashes'),
          // ??
          medi: feature('smartSwash', 'nonFinalSwashes'),
          // ??
          med2: feature('smartSwash', 'nonFinalSwashes'),
          // ??
          fin3: feature('smartSwash', 'wordFinalSwashes'),
          // ??
          fina: feature('smartSwash', 'wordFinalSwashes'),
          // ??
          pkna: feature('kanaSpacing', 'proportionalKana'),
          half: feature('textSpacing', 'halfWidthText'),
          // also HalfWidthCJKRoman, HalfWidthIdeographs?
          halt: feature('textSpacing', 'altHalfWidthText'),
          hkna: feature('alternateKana', 'alternateHorizKana'),
          vkna: feature('alternateKana', 'alternateVertKana'),
          // hngl: feature 'transliteration', 'hanjaToHangulSelector' # deprecated
          ital: feature('italicCJKRoman', 'CJKItalicRoman'),
          lnum: feature('numberCase', 'upperCaseNumbers'),
          onum: feature('numberCase', 'lowerCaseNumbers'),
          mgrk: feature('mathematicalExtras', 'mathematicalGreek'),
          // nalt: not enough info. what type of annotation?
          // ornm: ditto, which ornament style?
          calt: feature('contextualAlternates', 'contextualAlternates'),
          // or more?
          vrt2: feature('verticalSubstitution', 'substituteVerticalForms'),
          // oh... below?
          vert: feature('verticalSubstitution', 'substituteVerticalForms'),
          tnum: feature('numberSpacing', 'monospacedNumbers'),
          pnum: feature('numberSpacing', 'proportionalNumbers'),
          sups: feature('verticalPosition', 'superiors'),
          subs: feature('verticalPosition', 'inferiors'),
          ordn: feature('verticalPosition', 'ordinals'),
          pwid: feature('textSpacing', 'proportionalText'),
          hwid: feature('textSpacing', 'halfWidthText'),
          qwid: feature('textSpacing', 'quarterWidthText'),
          // also QuarterWidthNumbers?
          twid: feature('textSpacing', 'thirdWidthText'),
          // also ThirdWidthNumbers?
          fwid: feature('textSpacing', 'proportionalText'),
          //??
          palt: feature('textSpacing', 'altProportionalText'),
          trad: feature('characterShape', 'traditionalCharacters'),
          smpl: feature('characterShape', 'simplifiedCharacters'),
          jp78: feature('characterShape', 'JIS1978Characters'),
          jp83: feature('characterShape', 'JIS1983Characters'),
          jp90: feature('characterShape', 'JIS1990Characters'),
          jp04: feature('characterShape', 'JIS2004Characters'),
          expt: feature('characterShape', 'expertCharacters'),
          hojo: feature('characterShape', 'hojoCharacters'),
          nlck: feature('characterShape', 'NLCCharacters'),
          tnam: feature('characterShape', 'traditionalNamesCharacters'),
          ruby: feature('rubyKana', 'rubyKana'),
          titl: feature('styleOptions', 'titlingCaps'),
          zero: feature('typographicExtras', 'slashedZero'),
          ss01: feature('stylisticAlternatives', 'stylisticAltOne'),
          ss02: feature('stylisticAlternatives', 'stylisticAltTwo'),
          ss03: feature('stylisticAlternatives', 'stylisticAltThree'),
          ss04: feature('stylisticAlternatives', 'stylisticAltFour'),
          ss05: feature('stylisticAlternatives', 'stylisticAltFive'),
          ss06: feature('stylisticAlternatives', 'stylisticAltSix'),
          ss07: feature('stylisticAlternatives', 'stylisticAltSeven'),
          ss08: feature('stylisticAlternatives', 'stylisticAltEight'),
          ss09: feature('stylisticAlternatives', 'stylisticAltNine'),
          ss10: feature('stylisticAlternatives', 'stylisticAltTen'),
          ss11: feature('stylisticAlternatives', 'stylisticAltEleven'),
          ss12: feature('stylisticAlternatives', 'stylisticAltTwelve'),
          ss13: feature('stylisticAlternatives', 'stylisticAltThirteen'),
          ss14: feature('stylisticAlternatives', 'stylisticAltFourteen'),
          ss15: feature('stylisticAlternatives', 'stylisticAltFifteen'),
          ss16: feature('stylisticAlternatives', 'stylisticAltSixteen'),
          ss17: feature('stylisticAlternatives', 'stylisticAltSeventeen'),
          ss18: feature('stylisticAlternatives', 'stylisticAltEighteen'),
          ss19: feature('stylisticAlternatives', 'stylisticAltNineteen'),
          ss20: feature('stylisticAlternatives', 'stylisticAltTwenty')
        }; // salt: feature 'stylisticAlternatives', 'stylisticAltOne' # hmm, which one to choose
        // Add cv01-cv99 features

        for (var i = 1; i <= 99; i++) {
          OTMapping['cv' + ('00' + i).slice(-2)] = [features.characterAlternatives.code, i];
        } // create inverse mapping


        var AATMapping = {};

        for (var ot in OTMapping) {
          var aat = OTMapping[ot];

          if (AATMapping[aat[0]] == null) {
            AATMapping[aat[0]] = {};
          }

          AATMapping[aat[0]][aat[1]] = ot;
        } // Maps an array of OpenType features to AAT features
        // in the form of {featureType:{featureSetting:true}}


        function mapOTToAAT(features) {
          var res = {};

          for (var k in features) {
            var r = void 0;

            if (r = OTMapping[k]) {
              if (res[r[0]] == null) {
                res[r[0]] = {};
              }

              res[r[0]][r[1]] = features[k];
            }
          }

          return res;
        } // Maps strings in a [featureType, featureSetting]
        // to their equivalent number codes


        function mapFeatureStrings(f) {
          var type = f[0],
              setting = f[1];

          if (isNaN(type)) {
            var typeCode = features[type] && features[type].code;
          } else {
            var typeCode = type;
          }

          if (isNaN(setting)) {
            var settingCode = features[type] && features[type][setting];
          } else {
            var settingCode = setting;
          }

          return [typeCode, settingCode];
        } // Maps AAT features to an array of OpenType features
        // Supports both arrays in the form of [[featureType, featureSetting]]
        // and objects in the form of {featureType:{featureSetting:true}}
        // featureTypes and featureSettings can be either strings or number codes


        function mapAATToOT(features) {
          var res = {};

          if (Array.isArray(features)) {
            for (var k = 0; k < features.length; k++) {
              var r = void 0;
              var f = mapFeatureStrings(features[k]);

              if (r = AATMapping[f[0]] && AATMapping[f[0]][f[1]]) {
                res[r] = true;
              }
            }
          } else if ((typeof features === 'undefined' ? 'undefined' : _typeof(features)) === 'object') {
            for (var type in features) {
              var _feature = features[type];

              for (var setting in _feature) {
                var _r = void 0;

                var _f = mapFeatureStrings([type, setting]);

                if (_feature[setting] && (_r = AATMapping[_f[0]] && AATMapping[_f[0]][_f[1]])) {
                  res[_r] = true;
                }
              }
            }
          }

          return _Object$keys(res);
        }

        var _class$3;

        function _applyDecoratedDescriptor$3(target, property, decorators, descriptor, context) {
          var desc = {};
          Object['ke' + 'ys'](descriptor).forEach(function (key) {
            desc[key] = descriptor[key];
          });
          desc.enumerable = !!desc.enumerable;
          desc.configurable = !!desc.configurable;

          if ('value' in desc || desc.initializer) {
            desc.writable = true;
          }

          desc = decorators.slice().reverse().reduce(function (desc, decorator) {
            return decorator(target, property, desc) || desc;
          }, desc);

          if (context && desc.initializer !== void 0) {
            desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
            desc.initializer = undefined;
          }

          if (desc.initializer === void 0) {
            Object['define' + 'Property'](target, property, desc);
            desc = null;
          }

          return desc;
        }

        var AATLookupTable = (_class$3 = function () {
          function AATLookupTable(table) {
            _classCallCheck(this, AATLookupTable);

            this.table = table;
          }

          AATLookupTable.prototype.lookup = function lookup(glyph) {
            switch (this.table.version) {
              case 0:
                // simple array format
                return this.table.values.getItem(glyph);

              case 2: // segment format

              case 4:
                {
                  var min = 0;
                  var max = this.table.binarySearchHeader.nUnits - 1;

                  while (min <= max) {
                    var mid = min + max >> 1;
                    var seg = this.table.segments[mid]; // special end of search value

                    if (seg.firstGlyph === 0xffff) {
                      return null;
                    }

                    if (glyph < seg.firstGlyph) {
                      max = mid - 1;
                    } else if (glyph > seg.lastGlyph) {
                      min = mid + 1;
                    } else {
                      if (this.table.version === 2) {
                        return seg.value;
                      } else {
                        return seg.values[glyph - seg.firstGlyph];
                      }
                    }
                  }

                  return null;
                }

              case 6:
                {
                  // lookup single
                  var _min = 0;

                  var _max = this.table.binarySearchHeader.nUnits - 1;

                  while (_min <= _max) {
                    var mid = _min + _max >> 1;
                    var seg = this.table.segments[mid]; // special end of search value

                    if (seg.glyph === 0xffff) {
                      return null;
                    }

                    if (glyph < seg.glyph) {
                      _max = mid - 1;
                    } else if (glyph > seg.glyph) {
                      _min = mid + 1;
                    } else {
                      return seg.value;
                    }
                  }

                  return null;
                }

              case 8:
                // lookup trimmed
                return this.table.values[glyph - this.table.firstGlyph];

              default:
                throw new Error('Unknown lookup table format: ' + this.table.version);
            }
          };

          AATLookupTable.prototype.glyphsForValue = function glyphsForValue(classValue) {
            var res = [];

            switch (this.table.version) {
              case 2: // segment format

              case 4:
                {
                  for (var _iterator = this.table.segments, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
                    var _ref;

                    if (_isArray) {
                      if (_i >= _iterator.length) break;
                      _ref = _iterator[_i++];
                    } else {
                      _i = _iterator.next();
                      if (_i.done) break;
                      _ref = _i.value;
                    }

                    var segment = _ref;

                    if (this.table.version === 2 && segment.value === classValue) {
                      res.push.apply(res, range(segment.firstGlyph, segment.lastGlyph + 1));
                    } else {
                      for (var index = 0; index < segment.values.length; index++) {
                        if (segment.values[index] === classValue) {
                          res.push(segment.firstGlyph + index);
                        }
                      }
                    }
                  }

                  break;
                }

              case 6:
                {
                  // lookup single
                  for (var _iterator2 = this.table.segments, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
                    var _ref2;

                    if (_isArray2) {
                      if (_i2 >= _iterator2.length) break;
                      _ref2 = _iterator2[_i2++];
                    } else {
                      _i2 = _iterator2.next();
                      if (_i2.done) break;
                      _ref2 = _i2.value;
                    }

                    var _segment = _ref2;

                    if (_segment.value === classValue) {
                      res.push(_segment.glyph);
                    }
                  }

                  break;
                }

              case 8:
                {
                  // lookup trimmed
                  for (var i = 0; i < this.table.values.length; i++) {
                    if (this.table.values[i] === classValue) {
                      res.push(this.table.firstGlyph + i);
                    }
                  }

                  break;
                }

              default:
                throw new Error('Unknown lookup table format: ' + this.table.version);
            }

            return res;
          };

          return AATLookupTable;
        }(), _applyDecoratedDescriptor$3(_class$3.prototype, 'glyphsForValue', [cache], _Object$getOwnPropertyDescriptor(_class$3.prototype, 'glyphsForValue'), _class$3.prototype), _class$3);
        var START_OF_TEXT_STATE = 0;
        var END_OF_TEXT_CLASS = 0;
        var OUT_OF_BOUNDS_CLASS = 1;
        var DELETED_GLYPH_CLASS = 2;
        var DONT_ADVANCE = 0x4000;

        var AATStateMachine = function () {
          function AATStateMachine(stateTable) {
            _classCallCheck(this, AATStateMachine);

            this.stateTable = stateTable;
            this.lookupTable = new AATLookupTable(stateTable.classTable);
          }

          AATStateMachine.prototype.process = function process(glyphs, reverse, processEntry) {
            var currentState = START_OF_TEXT_STATE; // START_OF_LINE_STATE is used for kashida glyph insertions sometimes I think?

            var index = reverse ? glyphs.length - 1 : 0;
            var dir = reverse ? -1 : 1;

            while (dir === 1 && index <= glyphs.length || dir === -1 && index >= -1) {
              var glyph = null;
              var classCode = OUT_OF_BOUNDS_CLASS;
              var shouldAdvance = true;

              if (index === glyphs.length || index === -1) {
                classCode = END_OF_TEXT_CLASS;
              } else {
                glyph = glyphs[index];

                if (glyph.id === 0xffff) {
                  // deleted glyph
                  classCode = DELETED_GLYPH_CLASS;
                } else {
                  classCode = this.lookupTable.lookup(glyph.id);

                  if (classCode == null) {
                    classCode = OUT_OF_BOUNDS_CLASS;
                  }
                }
              }

              var row = this.stateTable.stateArray.getItem(currentState);
              var entryIndex = row[classCode];
              var entry = this.stateTable.entryTable.getItem(entryIndex);

              if (classCode !== END_OF_TEXT_CLASS && classCode !== DELETED_GLYPH_CLASS) {
                processEntry(glyph, entry, index);
                shouldAdvance = !(entry.flags & DONT_ADVANCE);
              }

              currentState = entry.newState;

              if (shouldAdvance) {
                index += dir;
              }
            }

            return glyphs;
          };
          /**
           * Performs a depth-first traversal of the glyph strings
           * represented by the state machine.
           */


          AATStateMachine.prototype.traverse = function traverse(opts) {
            var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
            var visited = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new _Set();

            if (visited.has(state)) {
              return;
            }

            visited.add(state);
            var _stateTable = this.stateTable,
                nClasses = _stateTable.nClasses,
                stateArray = _stateTable.stateArray,
                entryTable = _stateTable.entryTable;
            var row = stateArray.getItem(state); // Skip predefined classes

            for (var classCode = 4; classCode < nClasses; classCode++) {
              var entryIndex = row[classCode];
              var entry = entryTable.getItem(entryIndex); // Try all glyphs in the class

              for (var _iterator = this.lookupTable.glyphsForValue(classCode), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
                var _ref;

                if (_isArray) {
                  if (_i >= _iterator.length) break;
                  _ref = _iterator[_i++];
                } else {
                  _i = _iterator.next();
                  if (_i.done) break;
                  _ref = _i.value;
                }

                var glyph = _ref;

                if (opts.enter) {
                  opts.enter(glyph, entry);
                }

                if (entry.newState !== 0) {
                  this.traverse(opts, entry.newState, visited);
                }

                if (opts.exit) {
                  opts.exit(glyph, entry);
                }
              }
            }
          };

          return AATStateMachine;
        }();

        var _class$2;

        function _applyDecoratedDescriptor$2(target, property, decorators, descriptor, context) {
          var desc = {};
          Object['ke' + 'ys'](descriptor).forEach(function (key) {
            desc[key] = descriptor[key];
          });
          desc.enumerable = !!desc.enumerable;
          desc.configurable = !!desc.configurable;

          if ('value' in desc || desc.initializer) {
            desc.writable = true;
          }

          desc = decorators.slice().reverse().reduce(function (desc, decorator) {
            return decorator(target, property, desc) || desc;
          }, desc);

          if (context && desc.initializer !== void 0) {
            desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
            desc.initializer = undefined;
          }

          if (desc.initializer === void 0) {
            Object['define' + 'Property'](target, property, desc);
            desc = null;
          }

          return desc;
        } // indic replacement flags


        var MARK_FIRST = 0x8000;
        var MARK_LAST = 0x2000;
        var VERB = 0x000F; // contextual substitution and glyph insertion flag

        var SET_MARK = 0x8000; // ligature entry flags

        var SET_COMPONENT = 0x8000;
        var PERFORM_ACTION = 0x2000; // ligature action masks

        var LAST_MASK = 0x80000000;
        var STORE_MASK = 0x40000000;
        var OFFSET_MASK = 0x3FFFFFFF;
        var REVERSE_DIRECTION = 0x400000;
        var CURRENT_INSERT_BEFORE = 0x0800;
        var MARKED_INSERT_BEFORE = 0x0400;
        var CURRENT_INSERT_COUNT = 0x03E0;
        var MARKED_INSERT_COUNT = 0x001F;
        var AATMorxProcessor = (_class$2 = function () {
          function AATMorxProcessor(font) {
            _classCallCheck(this, AATMorxProcessor);

            this.processIndicRearragement = this.processIndicRearragement.bind(this);
            this.processContextualSubstitution = this.processContextualSubstitution.bind(this);
            this.processLigature = this.processLigature.bind(this);
            this.processNoncontextualSubstitutions = this.processNoncontextualSubstitutions.bind(this);
            this.processGlyphInsertion = this.processGlyphInsertion.bind(this);
            this.font = font;
            this.morx = font.morx;
            this.inputCache = null;
          } // Processes an array of glyphs and applies the specified features
          // Features should be in the form of {featureType:{featureSetting:boolean}}


          AATMorxProcessor.prototype.process = function process(glyphs) {
            var features = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            for (var _iterator = this.morx.chains, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
              var _ref;

              if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref = _iterator[_i++];
              } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref = _i.value;
              }

              var chain = _ref;
              var flags = chain.defaultFlags; // enable/disable the requested features

              for (var _iterator2 = chain.features, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
                var _ref2;

                if (_isArray2) {
                  if (_i2 >= _iterator2.length) break;
                  _ref2 = _iterator2[_i2++];
                } else {
                  _i2 = _iterator2.next();
                  if (_i2.done) break;
                  _ref2 = _i2.value;
                }

                var feature = _ref2;
                var f = void 0;

                if (f = features[feature.featureType]) {
                  if (f[feature.featureSetting]) {
                    flags &= feature.disableFlags;
                    flags |= feature.enableFlags;
                  } else if (f[feature.featureSetting] === false) {
                    flags |= ~feature.disableFlags;
                    flags &= ~feature.enableFlags;
                  }
                }
              }

              for (var _iterator3 = chain.subtables, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
                var _ref3;

                if (_isArray3) {
                  if (_i3 >= _iterator3.length) break;
                  _ref3 = _iterator3[_i3++];
                } else {
                  _i3 = _iterator3.next();
                  if (_i3.done) break;
                  _ref3 = _i3.value;
                }

                var subtable = _ref3;

                if (subtable.subFeatureFlags & flags) {
                  this.processSubtable(subtable, glyphs);
                }
              }
            } // remove deleted glyphs


            var index = glyphs.length - 1;

            while (index >= 0) {
              if (glyphs[index].id === 0xffff) {
                glyphs.splice(index, 1);
              }

              index--;
            }

            return glyphs;
          };

          AATMorxProcessor.prototype.processSubtable = function processSubtable(subtable, glyphs) {
            this.subtable = subtable;
            this.glyphs = glyphs;

            if (this.subtable.type === 4) {
              this.processNoncontextualSubstitutions(this.subtable, this.glyphs);
              return;
            }

            this.ligatureStack = [];
            this.markedGlyph = null;
            this.firstGlyph = null;
            this.lastGlyph = null;
            this.markedIndex = null;
            var stateMachine = this.getStateMachine(subtable);
            var process = this.getProcessor();
            var reverse = !!(this.subtable.coverage & REVERSE_DIRECTION);
            return stateMachine.process(this.glyphs, reverse, process);
          };

          AATMorxProcessor.prototype.getStateMachine = function getStateMachine(subtable) {
            return new AATStateMachine(subtable.table.stateTable);
          };

          AATMorxProcessor.prototype.getProcessor = function getProcessor() {
            switch (this.subtable.type) {
              case 0:
                return this.processIndicRearragement;

              case 1:
                return this.processContextualSubstitution;

              case 2:
                return this.processLigature;

              case 4:
                return this.processNoncontextualSubstitutions;

              case 5:
                return this.processGlyphInsertion;

              default:
                throw new Error('Invalid morx subtable type: ' + this.subtable.type);
            }
          };

          AATMorxProcessor.prototype.processIndicRearragement = function processIndicRearragement(glyph, entry, index) {
            if (entry.flags & MARK_FIRST) {
              this.firstGlyph = index;
            }

            if (entry.flags & MARK_LAST) {
              this.lastGlyph = index;
            }

            reorderGlyphs(this.glyphs, entry.flags & VERB, this.firstGlyph, this.lastGlyph);
          };

          AATMorxProcessor.prototype.processContextualSubstitution = function processContextualSubstitution(glyph, entry, index) {
            var subsitutions = this.subtable.table.substitutionTable.items;

            if (entry.markIndex !== 0xffff) {
              var lookup = subsitutions.getItem(entry.markIndex);
              var lookupTable = new AATLookupTable(lookup);
              glyph = this.glyphs[this.markedGlyph];
              var gid = lookupTable.lookup(glyph.id);

              if (gid) {
                this.glyphs[this.markedGlyph] = this.font.getGlyph(gid, glyph.codePoints);
              }
            }

            if (entry.currentIndex !== 0xffff) {
              var _lookup = subsitutions.getItem(entry.currentIndex);

              var _lookupTable = new AATLookupTable(_lookup);

              glyph = this.glyphs[index];

              var gid = _lookupTable.lookup(glyph.id);

              if (gid) {
                this.glyphs[index] = this.font.getGlyph(gid, glyph.codePoints);
              }
            }

            if (entry.flags & SET_MARK) {
              this.markedGlyph = index;
            }
          };

          AATMorxProcessor.prototype.processLigature = function processLigature(glyph, entry, index) {
            if (entry.flags & SET_COMPONENT) {
              this.ligatureStack.push(index);
            }

            if (entry.flags & PERFORM_ACTION) {
              var _ligatureStack;

              var actions = this.subtable.table.ligatureActions;
              var components = this.subtable.table.components;
              var ligatureList = this.subtable.table.ligatureList;
              var actionIndex = entry.action;
              var last = false;
              var ligatureIndex = 0;
              var codePoints = [];
              var ligatureGlyphs = [];

              while (!last) {
                var _codePoints;

                var componentGlyph = this.ligatureStack.pop();

                (_codePoints = codePoints).unshift.apply(_codePoints, this.glyphs[componentGlyph].codePoints);

                var action = actions.getItem(actionIndex++);
                last = !!(action & LAST_MASK);
                var store = !!(action & STORE_MASK);
                var offset = (action & OFFSET_MASK) << 2 >> 2; // sign extend 30 to 32 bits

                offset += this.glyphs[componentGlyph].id;
                var component = components.getItem(offset);
                ligatureIndex += component;

                if (last || store) {
                  var ligatureEntry = ligatureList.getItem(ligatureIndex);
                  this.glyphs[componentGlyph] = this.font.getGlyph(ligatureEntry, codePoints);
                  ligatureGlyphs.push(componentGlyph);
                  ligatureIndex = 0;
                  codePoints = [];
                } else {
                  this.glyphs[componentGlyph] = this.font.getGlyph(0xffff);
                }
              } // Put ligature glyph indexes back on the stack


              (_ligatureStack = this.ligatureStack).push.apply(_ligatureStack, ligatureGlyphs);
            }
          };

          AATMorxProcessor.prototype.processNoncontextualSubstitutions = function processNoncontextualSubstitutions(subtable, glyphs, index) {
            var lookupTable = new AATLookupTable(subtable.table.lookupTable);

            for (index = 0; index < glyphs.length; index++) {
              var glyph = glyphs[index];

              if (glyph.id !== 0xffff) {
                var gid = lookupTable.lookup(glyph.id);

                if (gid) {
                  // 0 means do nothing
                  glyphs[index] = this.font.getGlyph(gid, glyph.codePoints);
                }
              }
            }
          };

          AATMorxProcessor.prototype._insertGlyphs = function _insertGlyphs(glyphIndex, insertionActionIndex, count, isBefore) {
            var _glyphs;

            var insertions = [];

            while (count--) {
              var gid = this.subtable.table.insertionActions.getItem(insertionActionIndex++);
              insertions.push(this.font.getGlyph(gid));
            }

            if (!isBefore) {
              glyphIndex++;
            }

            (_glyphs = this.glyphs).splice.apply(_glyphs, [glyphIndex, 0].concat(insertions));
          };

          AATMorxProcessor.prototype.processGlyphInsertion = function processGlyphInsertion(glyph, entry, index) {
            if (entry.flags & SET_MARK) {
              this.markedIndex = index;
            }

            if (entry.markedInsertIndex !== 0xffff) {
              var count = (entry.flags & MARKED_INSERT_COUNT) >>> 5;
              var isBefore = !!(entry.flags & MARKED_INSERT_BEFORE);

              this._insertGlyphs(this.markedIndex, entry.markedInsertIndex, count, isBefore);
            }

            if (entry.currentInsertIndex !== 0xffff) {
              var _count = (entry.flags & CURRENT_INSERT_COUNT) >>> 5;

              var _isBefore = !!(entry.flags & CURRENT_INSERT_BEFORE);

              this._insertGlyphs(index, entry.currentInsertIndex, _count, _isBefore);
            }
          };

          AATMorxProcessor.prototype.getSupportedFeatures = function getSupportedFeatures() {
            var features = [];

            for (var _iterator4 = this.morx.chains, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _getIterator(_iterator4);;) {
              var _ref4;

              if (_isArray4) {
                if (_i4 >= _iterator4.length) break;
                _ref4 = _iterator4[_i4++];
              } else {
                _i4 = _iterator4.next();
                if (_i4.done) break;
                _ref4 = _i4.value;
              }

              var chain = _ref4;

              for (var _iterator5 = chain.features, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _getIterator(_iterator5);;) {
                var _ref5;

                if (_isArray5) {
                  if (_i5 >= _iterator5.length) break;
                  _ref5 = _iterator5[_i5++];
                } else {
                  _i5 = _iterator5.next();
                  if (_i5.done) break;
                  _ref5 = _i5.value;
                }

                var feature = _ref5;
                features.push([feature.featureType, feature.featureSetting]);
              }
            }

            return features;
          };

          AATMorxProcessor.prototype.generateInputs = function generateInputs(gid) {
            if (!this.inputCache) {
              this.generateInputCache();
            }

            return this.inputCache[gid] || [];
          };

          AATMorxProcessor.prototype.generateInputCache = function generateInputCache() {
            this.inputCache = {};

            for (var _iterator6 = this.morx.chains, _isArray6 = Array.isArray(_iterator6), _i6 = 0, _iterator6 = _isArray6 ? _iterator6 : _getIterator(_iterator6);;) {
              var _ref6;

              if (_isArray6) {
                if (_i6 >= _iterator6.length) break;
                _ref6 = _iterator6[_i6++];
              } else {
                _i6 = _iterator6.next();
                if (_i6.done) break;
                _ref6 = _i6.value;
              }

              var chain = _ref6;
              var flags = chain.defaultFlags;

              for (var _iterator7 = chain.subtables, _isArray7 = Array.isArray(_iterator7), _i7 = 0, _iterator7 = _isArray7 ? _iterator7 : _getIterator(_iterator7);;) {
                var _ref7;

                if (_isArray7) {
                  if (_i7 >= _iterator7.length) break;
                  _ref7 = _iterator7[_i7++];
                } else {
                  _i7 = _iterator7.next();
                  if (_i7.done) break;
                  _ref7 = _i7.value;
                }

                var subtable = _ref7;

                if (subtable.subFeatureFlags & flags) {
                  this.generateInputsForSubtable(subtable);
                }
              }
            }
          };

          AATMorxProcessor.prototype.generateInputsForSubtable = function generateInputsForSubtable(subtable) {
            var _this = this; // Currently, only supporting ligature subtables.


            if (subtable.type !== 2) {
              return;
            }

            var reverse = !!(subtable.coverage & REVERSE_DIRECTION);

            if (reverse) {
              throw new Error('Reverse subtable, not supported.');
            }

            this.subtable = subtable;
            this.ligatureStack = [];
            var stateMachine = this.getStateMachine(subtable);
            var process = this.getProcessor();
            var input = [];
            var stack = [];
            this.glyphs = [];
            stateMachine.traverse({
              enter: function enter(glyph, entry) {
                var glyphs = _this.glyphs;
                stack.push({
                  glyphs: glyphs.slice(),
                  ligatureStack: _this.ligatureStack.slice()
                }); // Add glyph to input and glyphs to process.

                var g = _this.font.getGlyph(glyph);

                input.push(g);
                glyphs.push(input[input.length - 1]); // Process ligature substitution

                process(glyphs[glyphs.length - 1], entry, glyphs.length - 1); // Add input to result if only one matching (non-deleted) glyph remains.

                var count = 0;
                var found = 0;

                for (var i = 0; i < glyphs.length && count <= 1; i++) {
                  if (glyphs[i].id !== 0xffff) {
                    count++;
                    found = glyphs[i].id;
                  }
                }

                if (count === 1) {
                  var result = input.map(function (g) {
                    return g.id;
                  });
                  var _cache = _this.inputCache[found];

                  if (_cache) {
                    _cache.push(result);
                  } else {
                    _this.inputCache[found] = [result];
                  }
                }
              },
              exit: function exit() {
                var _stack$pop = stack.pop();

                _this.glyphs = _stack$pop.glyphs;
                _this.ligatureStack = _stack$pop.ligatureStack;
                input.pop();
              }
            });
          };

          return AATMorxProcessor;
        }(), _applyDecoratedDescriptor$2(_class$2.prototype, 'getStateMachine', [cache], _Object$getOwnPropertyDescriptor(_class$2.prototype, 'getStateMachine'), _class$2.prototype), _class$2);

        function swap(glyphs, rangeA, rangeB) {
          var reverseA = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
          var reverseB = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
          var end = glyphs.splice(rangeB[0] - (rangeB[1] - 1), rangeB[1]);

          if (reverseB) {
            end.reverse();
          }

          var start = glyphs.splice.apply(glyphs, [rangeA[0], rangeA[1]].concat(end));

          if (reverseA) {
            start.reverse();
          }

          glyphs.splice.apply(glyphs, [rangeB[0] - (rangeA[1] - 1), 0].concat(start));
          return glyphs;
        }

        function reorderGlyphs(glyphs, verb, firstGlyph, lastGlyph) {
          var length = lastGlyph - firstGlyph + 1;

          switch (verb) {
            case 0:
              // no change
              return glyphs;

            case 1:
              // Ax => xA
              return swap(glyphs, [firstGlyph, 1], [lastGlyph, 0]);

            case 2:
              // xD => Dx
              return swap(glyphs, [firstGlyph, 0], [lastGlyph, 1]);

            case 3:
              // AxD => DxA
              return swap(glyphs, [firstGlyph, 1], [lastGlyph, 1]);

            case 4:
              // ABx => xAB
              return swap(glyphs, [firstGlyph, 2], [lastGlyph, 0]);

            case 5:
              // ABx => xBA
              return swap(glyphs, [firstGlyph, 2], [lastGlyph, 0], true, false);

            case 6:
              // xCD => CDx
              return swap(glyphs, [firstGlyph, 0], [lastGlyph, 2]);

            case 7:
              // xCD => DCx
              return swap(glyphs, [firstGlyph, 0], [lastGlyph, 2], false, true);

            case 8:
              // AxCD => CDxA
              return swap(glyphs, [firstGlyph, 1], [lastGlyph, 2]);

            case 9:
              // AxCD => DCxA
              return swap(glyphs, [firstGlyph, 1], [lastGlyph, 2], false, true);

            case 10:
              // ABxD => DxAB
              return swap(glyphs, [firstGlyph, 2], [lastGlyph, 1]);

            case 11:
              // ABxD => DxBA
              return swap(glyphs, [firstGlyph, 2], [lastGlyph, 1], true, false);

            case 12:
              // ABxCD => CDxAB
              return swap(glyphs, [firstGlyph, 2], [lastGlyph, 2]);

            case 13:
              // ABxCD => CDxBA
              return swap(glyphs, [firstGlyph, 2], [lastGlyph, 2], true, false);

            case 14:
              // ABxCD => DCxAB
              return swap(glyphs, [firstGlyph, 2], [lastGlyph, 2], false, true);

            case 15:
              // ABxCD => DCxBA
              return swap(glyphs, [firstGlyph, 2], [lastGlyph, 2], true, true);

            default:
              throw new Error('Unknown verb: ' + verb);
          }
        }

        var AATLayoutEngine = function () {
          function AATLayoutEngine(font) {
            _classCallCheck(this, AATLayoutEngine);

            this.font = font;
            this.morxProcessor = new AATMorxProcessor(font);
            this.fallbackPosition = false;
          }

          AATLayoutEngine.prototype.substitute = function substitute(glyphRun) {
            // AAT expects the glyphs to be in visual order prior to morx processing,
            // so reverse the glyphs if the script is right-to-left.
            if (glyphRun.direction === 'rtl') {
              glyphRun.glyphs.reverse();
            }

            this.morxProcessor.process(glyphRun.glyphs, mapOTToAAT(glyphRun.features));
          };

          AATLayoutEngine.prototype.getAvailableFeatures = function getAvailableFeatures(script, language) {
            return mapAATToOT(this.morxProcessor.getSupportedFeatures());
          };

          AATLayoutEngine.prototype.stringsForGlyph = function stringsForGlyph(gid) {
            var glyphStrings = this.morxProcessor.generateInputs(gid);
            var result = new _Set();

            for (var _iterator = glyphStrings, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
              var _ref;

              if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref = _iterator[_i++];
              } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref = _i.value;
              }

              var glyphs = _ref;

              this._addStrings(glyphs, 0, result, '');
            }

            return result;
          };

          AATLayoutEngine.prototype._addStrings = function _addStrings(glyphs, index, strings, string) {
            var codePoints = this.font._cmapProcessor.codePointsForGlyph(glyphs[index]);

            for (var _iterator2 = codePoints, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
              var _ref2;

              if (_isArray2) {
                if (_i2 >= _iterator2.length) break;
                _ref2 = _iterator2[_i2++];
              } else {
                _i2 = _iterator2.next();
                if (_i2.done) break;
                _ref2 = _i2.value;
              }

              var codePoint = _ref2;

              var s = string + _String$fromCodePoint(codePoint);

              if (index < glyphs.length - 1) {
                this._addStrings(glyphs, index + 1, strings, s);
              } else {
                strings.add(s);
              }
            }
          };

          return AATLayoutEngine;
        }();
        /**
         * ShapingPlans are used by the OpenType shapers to store which
         * features should by applied, and in what order to apply them.
         * The features are applied in groups called stages. A feature
         * can be applied globally to all glyphs, or locally to only
         * specific glyphs.
         *
         * @private
         */


        var ShapingPlan = function () {
          function ShapingPlan(font, script, direction) {
            _classCallCheck(this, ShapingPlan);

            this.font = font;
            this.script = script;
            this.direction = direction;
            this.stages = [];
            this.globalFeatures = {};
            this.allFeatures = {};
          }
          /**
           * Adds the given features to the last stage.
           * Ignores features that have already been applied.
           */


          ShapingPlan.prototype._addFeatures = function _addFeatures(features, global) {
            var stageIndex = this.stages.length - 1;
            var stage = this.stages[stageIndex];

            for (var _iterator = features, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
              var _ref;

              if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref = _iterator[_i++];
              } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref = _i.value;
              }

              var feature = _ref;

              if (this.allFeatures[feature] == null) {
                stage.push(feature);
                this.allFeatures[feature] = stageIndex;

                if (global) {
                  this.globalFeatures[feature] = true;
                }
              }
            }
          };
          /**
           * Add features to the last stage
           */


          ShapingPlan.prototype.add = function add(arg) {
            var global = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

            if (this.stages.length === 0) {
              this.stages.push([]);
            }

            if (typeof arg === 'string') {
              arg = [arg];
            }

            if (Array.isArray(arg)) {
              this._addFeatures(arg, global);
            } else if ((typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) === 'object') {
              this._addFeatures(arg.global || [], true);

              this._addFeatures(arg.local || [], false);
            } else {
              throw new Error("Unsupported argument to ShapingPlan#add");
            }
          };
          /**
           * Add a new stage
           */


          ShapingPlan.prototype.addStage = function addStage(arg, global) {
            if (typeof arg === 'function') {
              this.stages.push(arg, []);
            } else {
              this.stages.push([]);
              this.add(arg, global);
            }
          };

          ShapingPlan.prototype.setFeatureOverrides = function setFeatureOverrides(features) {
            if (Array.isArray(features)) {
              this.add(features);
            } else if ((typeof features === 'undefined' ? 'undefined' : _typeof(features)) === 'object') {
              for (var tag in features) {
                if (features[tag]) {
                  this.add(tag);
                } else if (this.allFeatures[tag] != null) {
                  var stage = this.stages[this.allFeatures[tag]];
                  stage.splice(stage.indexOf(tag), 1);
                  delete this.allFeatures[tag];
                  delete this.globalFeatures[tag];
                }
              }
            }
          };
          /**
           * Assigns the global features to the given glyphs
           */


          ShapingPlan.prototype.assignGlobalFeatures = function assignGlobalFeatures(glyphs) {
            for (var _iterator2 = glyphs, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
              var _ref2;

              if (_isArray2) {
                if (_i2 >= _iterator2.length) break;
                _ref2 = _iterator2[_i2++];
              } else {
                _i2 = _iterator2.next();
                if (_i2.done) break;
                _ref2 = _i2.value;
              }

              var glyph = _ref2;

              for (var feature in this.globalFeatures) {
                glyph.features[feature] = true;
              }
            }
          };
          /**
           * Executes the planned stages using the given OTProcessor
           */


          ShapingPlan.prototype.process = function process(processor, glyphs, positions) {
            for (var _iterator3 = this.stages, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
              var _ref3;

              if (_isArray3) {
                if (_i3 >= _iterator3.length) break;
                _ref3 = _iterator3[_i3++];
              } else {
                _i3 = _iterator3.next();
                if (_i3.done) break;
                _ref3 = _i3.value;
              }

              var stage = _ref3;

              if (typeof stage === 'function') {
                if (!positions) {
                  stage(this.font, glyphs, this);
                }
              } else if (stage.length > 0) {
                processor.applyFeatures(stage, glyphs, positions);
              }
            }
          };

          return ShapingPlan;
        }();

        var _class$4;

        var _temp;

        var VARIATION_FEATURES = ['rvrn'];
        var COMMON_FEATURES = ['ccmp', 'locl', 'rlig', 'mark', 'mkmk'];
        var FRACTIONAL_FEATURES = ['frac', 'numr', 'dnom'];
        var HORIZONTAL_FEATURES = ['calt', 'clig', 'liga', 'rclt', 'curs', 'kern'];
        var DIRECTIONAL_FEATURES = {
          ltr: ['ltra', 'ltrm'],
          rtl: ['rtla', 'rtlm']
        };
        var DefaultShaper = (_temp = _class$4 = function () {
          function DefaultShaper() {
            _classCallCheck(this, DefaultShaper);
          }

          DefaultShaper.plan = function plan(_plan, glyphs, features) {
            // Plan the features we want to apply
            this.planPreprocessing(_plan);
            this.planFeatures(_plan);
            this.planPostprocessing(_plan, features); // Assign the global features to all the glyphs

            _plan.assignGlobalFeatures(glyphs); // Assign local features to glyphs


            this.assignFeatures(_plan, glyphs);
          };

          DefaultShaper.planPreprocessing = function planPreprocessing(plan) {
            plan.add({
              global: [].concat(VARIATION_FEATURES, DIRECTIONAL_FEATURES[plan.direction]),
              local: FRACTIONAL_FEATURES
            });
          };

          DefaultShaper.planFeatures = function planFeatures(plan) {// Do nothing by default. Let subclasses override this.
          };

          DefaultShaper.planPostprocessing = function planPostprocessing(plan, userFeatures) {
            plan.add([].concat(COMMON_FEATURES, HORIZONTAL_FEATURES));
            plan.setFeatureOverrides(userFeatures);
          };

          DefaultShaper.assignFeatures = function assignFeatures(plan, glyphs) {
            // Enable contextual fractions
            for (var i = 0; i < glyphs.length; i++) {
              var glyph = glyphs[i];

              if (glyph.codePoints[0] === 0x2044) {
                // fraction slash
                var start = i;
                var end = i + 1; // Apply numerator

                while (start > 0 && unicode.isDigit(glyphs[start - 1].codePoints[0])) {
                  glyphs[start - 1].features.numr = true;
                  glyphs[start - 1].features.frac = true;
                  start--;
                } // Apply denominator


                while (end < glyphs.length && unicode.isDigit(glyphs[end].codePoints[0])) {
                  glyphs[end].features.dnom = true;
                  glyphs[end].features.frac = true;
                  end++;
                } // Apply fraction slash


                glyph.features.frac = true;
                i = end - 1;
              }
            }
          };

          return DefaultShaper;
        }(), _class$4.zeroMarkWidths = 'AFTER_GPOS', _temp);
        var trie = new UnicodeTrie(Buffer("AAHwAAAAAAAAADgAAf0BAv7tmi1MxDAUx7vtvjhAgcDgkEgEAnmXEBIMCYaEcygEiqBQ4FAkCE4ikUgMiiBJSAgSiUQSDMn9L9eSl6bddddug9t7yS/trevre+3r27pcNxZiG+yCfdCVv/9LeQxOwRm4AJegD27ALbgD9+ABPJF+z+BN/h7yDj5k/VOWX6SdmU5+wLWknggxDxaS8u0qiiX4uiz9XamQ3wzDMAzDMAzDMAzDVI/h959V/v7BMAzDMAzDMLlyNTNiMSdewVxbiA44B4/guz1qW58VYlMI0WsJ0W+N6kXw0spvPtdwhtkwnGM6uLaV4Xyzg3v3PM9DPfQ/sOg4xPWjipy31P8LTqbU304c/cLCUmWJLNB2Uz2U1KTeRKNmKHVMfbJC+/0loTZRH/W5cvEvBJPMbREkWt3FD1NcqXZBSpuE2Ad0PBehPtNrPtIEdYP+hiRt/V1jIiE69X4NT/uVZI3PUHE9bm5M7ePGdZWy951v7Nn6j8v1WWKP3mt6ttnsigx6VN7Vc0VomSSGqW2mGNP1muZPl7LfjNUaKNFtDGVf2fvE9O7VlBS5j333c5p/eeoOqcs1R/hIqDWLJ7TTlksirVT1SI7l8k4Yp+g3jafGcrU1RM6l9th80XOpnlN97bDNY4i4s61B0Si/ipa0uHMl6zqEjlFfCZm/TM8KmzQDjmuTAQ==", "base64"));
        var FEATURES = ['isol', 'fina', 'fin2', 'fin3', 'medi', 'med2', 'init'];
        var ShapingClasses = {
          Non_Joining: 0,
          Left_Joining: 1,
          Right_Joining: 2,
          Dual_Joining: 3,
          Join_Causing: 3,
          ALAPH: 4,
          'DALATH RISH': 5,
          Transparent: 6
        };
        var ISOL = 'isol';
        var FINA = 'fina';
        var FIN2 = 'fin2';
        var FIN3 = 'fin3';
        var MEDI = 'medi';
        var MED2 = 'med2';
        var INIT = 'init';
        var NONE = null; // Each entry is [prevAction, curAction, nextState]

        var STATE_TABLE = [//   Non_Joining,        Left_Joining,       Right_Joining,     Dual_Joining,           ALAPH,            DALATH RISH
        // State 0: prev was U,  not willing to join.
        [[NONE, NONE, 0], [NONE, ISOL, 2], [NONE, ISOL, 1], [NONE, ISOL, 2], [NONE, ISOL, 1], [NONE, ISOL, 6]], // State 1: prev was R or ISOL/ALAPH,  not willing to join.
        [[NONE, NONE, 0], [NONE, ISOL, 2], [NONE, ISOL, 1], [NONE, ISOL, 2], [NONE, FIN2, 5], [NONE, ISOL, 6]], // State 2: prev was D/L in ISOL form,  willing to join.
        [[NONE, NONE, 0], [NONE, ISOL, 2], [INIT, FINA, 1], [INIT, FINA, 3], [INIT, FINA, 4], [INIT, FINA, 6]], // State 3: prev was D in FINA form,  willing to join.
        [[NONE, NONE, 0], [NONE, ISOL, 2], [MEDI, FINA, 1], [MEDI, FINA, 3], [MEDI, FINA, 4], [MEDI, FINA, 6]], // State 4: prev was FINA ALAPH,  not willing to join.
        [[NONE, NONE, 0], [NONE, ISOL, 2], [MED2, ISOL, 1], [MED2, ISOL, 2], [MED2, FIN2, 5], [MED2, ISOL, 6]], // State 5: prev was FIN2/FIN3 ALAPH,  not willing to join.
        [[NONE, NONE, 0], [NONE, ISOL, 2], [ISOL, ISOL, 1], [ISOL, ISOL, 2], [ISOL, FIN2, 5], [ISOL, ISOL, 6]], // State 6: prev was DALATH/RISH,  not willing to join.
        [[NONE, NONE, 0], [NONE, ISOL, 2], [NONE, ISOL, 1], [NONE, ISOL, 2], [NONE, FIN3, 5], [NONE, ISOL, 6]]];
        /**
         * This is a shaper for Arabic, and other cursive scripts.
         * It uses data from ArabicShaping.txt in the Unicode database,
         * compiled to a UnicodeTrie by generate-data.coffee.
         *
         * The shaping state machine was ported from Harfbuzz.
         * https://github.com/behdad/harfbuzz/blob/master/src/hb-ot-shape-complex-arabic.cc
         */

        var ArabicShaper = function (_DefaultShaper) {
          _inherits(ArabicShaper, _DefaultShaper);

          function ArabicShaper() {
            _classCallCheck(this, ArabicShaper);

            return _possibleConstructorReturn(this, _DefaultShaper.apply(this, arguments));
          }

          ArabicShaper.planFeatures = function planFeatures(plan) {
            plan.add(['ccmp', 'locl']);

            for (var i = 0; i < FEATURES.length; i++) {
              var feature = FEATURES[i];
              plan.addStage(feature, false);
            }

            plan.addStage('mset');
          };

          ArabicShaper.assignFeatures = function assignFeatures(plan, glyphs) {
            _DefaultShaper.assignFeatures.call(this, plan, glyphs);

            var prev = -1;
            var state = 0;
            var actions = []; // Apply the state machine to map glyphs to features

            for (var i = 0; i < glyphs.length; i++) {
              var curAction = void 0,
                  prevAction = void 0;
              var glyph = glyphs[i];
              var type = getShapingClass(glyph.codePoints[0]);

              if (type === ShapingClasses.Transparent) {
                actions[i] = NONE;
                continue;
              }

              var _STATE_TABLE$state$ty = STATE_TABLE[state][type];
              prevAction = _STATE_TABLE$state$ty[0];
              curAction = _STATE_TABLE$state$ty[1];
              state = _STATE_TABLE$state$ty[2];

              if (prevAction !== NONE && prev !== -1) {
                actions[prev] = prevAction;
              }

              actions[i] = curAction;
              prev = i;
            } // Apply the chosen features to their respective glyphs


            for (var index = 0; index < glyphs.length; index++) {
              var feature = void 0;
              var glyph = glyphs[index];

              if (feature = actions[index]) {
                glyph.features[feature] = true;
              }
            }
          };

          return ArabicShaper;
        }(DefaultShaper);

        function getShapingClass(codePoint) {
          var res = trie.get(codePoint);

          if (res) {
            return res - 1;
          }

          var category = unicode.getCategory(codePoint);

          if (category === 'Mn' || category === 'Me' || category === 'Cf') {
            return ShapingClasses.Transparent;
          }

          return ShapingClasses.Non_Joining;
        }

        var GlyphIterator = function () {
          function GlyphIterator(glyphs, options) {
            _classCallCheck(this, GlyphIterator);

            this.glyphs = glyphs;
            this.reset(options);
          }

          GlyphIterator.prototype.reset = function reset() {
            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
            this.options = options;
            this.flags = options.flags || {};
            this.markAttachmentType = options.markAttachmentType || 0;
            this.index = index;
          };

          GlyphIterator.prototype.shouldIgnore = function shouldIgnore(glyph) {
            return this.flags.ignoreMarks && glyph.isMark || this.flags.ignoreBaseGlyphs && glyph.isBase || this.flags.ignoreLigatures && glyph.isLigature || this.markAttachmentType && glyph.isMark && glyph.markAttachmentType !== this.markAttachmentType;
          };

          GlyphIterator.prototype.move = function move(dir) {
            this.index += dir;

            while (0 <= this.index && this.index < this.glyphs.length && this.shouldIgnore(this.glyphs[this.index])) {
              this.index += dir;
            }

            if (0 > this.index || this.index >= this.glyphs.length) {
              return null;
            }

            return this.glyphs[this.index];
          };

          GlyphIterator.prototype.next = function next() {
            return this.move(+1);
          };

          GlyphIterator.prototype.prev = function prev() {
            return this.move(-1);
          };

          GlyphIterator.prototype.peek = function peek() {
            var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
            var idx = this.index;
            var res = this.increment(count);
            this.index = idx;
            return res;
          };

          GlyphIterator.prototype.peekIndex = function peekIndex() {
            var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
            var idx = this.index;
            this.increment(count);
            var res = this.index;
            this.index = idx;
            return res;
          };

          GlyphIterator.prototype.increment = function increment() {
            var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
            var dir = count < 0 ? -1 : 1;
            count = Math.abs(count);

            while (count--) {
              this.move(dir);
            }

            return this.glyphs[this.index];
          };

          _createClass(GlyphIterator, [{
            key: "cur",
            get: function get() {
              return this.glyphs[this.index] || null;
            }
          }]);

          return GlyphIterator;
        }();

        var DEFAULT_SCRIPTS = ['DFLT', 'dflt', 'latn'];

        var OTProcessor = function () {
          function OTProcessor(font, table) {
            _classCallCheck(this, OTProcessor);

            this.font = font;
            this.table = table;
            this.script = null;
            this.scriptTag = null;
            this.language = null;
            this.languageTag = null;
            this.features = {};
            this.lookups = {}; // Setup variation substitutions

            this.variationsIndex = font._variationProcessor ? this.findVariationsIndex(font._variationProcessor.normalizedCoords) : -1; // initialize to default script + language

            this.selectScript(); // current context (set by applyFeatures)

            this.glyphs = [];
            this.positions = []; // only used by GPOS

            this.ligatureID = 1;
            this.currentFeature = null;
          }

          OTProcessor.prototype.findScript = function findScript(script) {
            if (this.table.scriptList == null) {
              return null;
            }

            if (!Array.isArray(script)) {
              script = [script];
            }

            for (var _iterator = script, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
              var _ref;

              if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref = _iterator[_i++];
              } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref = _i.value;
              }

              var s = _ref;

              for (var _iterator2 = this.table.scriptList, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
                var _ref2;

                if (_isArray2) {
                  if (_i2 >= _iterator2.length) break;
                  _ref2 = _iterator2[_i2++];
                } else {
                  _i2 = _iterator2.next();
                  if (_i2.done) break;
                  _ref2 = _i2.value;
                }

                var entry = _ref2;

                if (entry.tag === s) {
                  return entry;
                }
              }
            }

            return null;
          };

          OTProcessor.prototype.selectScript = function selectScript(script, language, direction$$) {
            var changed = false;
            var entry = void 0;

            if (!this.script || script !== this.scriptTag) {
              entry = this.findScript(script);

              if (!entry) {
                entry = this.findScript(DEFAULT_SCRIPTS);
              }

              if (!entry) {
                return this.scriptTag;
              }

              this.scriptTag = entry.tag;
              this.script = entry.script;
              this.language = null;
              this.languageTag = null;
              changed = true;
            }

            if (!direction$$ || direction$$ !== this.direction) {
              this.direction = direction$$ || direction(script);
            }

            if (language && language.length < 4) {
              language += ' '.repeat(4 - language.length);
            }

            if (!language || language !== this.languageTag) {
              this.language = null;

              for (var _iterator3 = this.script.langSysRecords, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
                var _ref3;

                if (_isArray3) {
                  if (_i3 >= _iterator3.length) break;
                  _ref3 = _iterator3[_i3++];
                } else {
                  _i3 = _iterator3.next();
                  if (_i3.done) break;
                  _ref3 = _i3.value;
                }

                var lang = _ref3;

                if (lang.tag === language) {
                  this.language = lang.langSys;
                  this.languageTag = lang.tag;
                  break;
                }
              }

              if (!this.language) {
                this.language = this.script.defaultLangSys;
                this.languageTag = null;
              }

              changed = true;
            } // Build a feature lookup table


            if (changed) {
              this.features = {};

              if (this.language) {
                for (var _iterator4 = this.language.featureIndexes, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _getIterator(_iterator4);;) {
                  var _ref4;

                  if (_isArray4) {
                    if (_i4 >= _iterator4.length) break;
                    _ref4 = _iterator4[_i4++];
                  } else {
                    _i4 = _iterator4.next();
                    if (_i4.done) break;
                    _ref4 = _i4.value;
                  }

                  var featureIndex = _ref4;
                  var record = this.table.featureList[featureIndex];
                  var substituteFeature = this.substituteFeatureForVariations(featureIndex);
                  this.features[record.tag] = substituteFeature || record.feature;
                }
              }
            }

            return this.scriptTag;
          };

          OTProcessor.prototype.lookupsForFeatures = function lookupsForFeatures() {
            var userFeatures = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
            var exclude = arguments[1];
            var lookups = [];

            for (var _iterator5 = userFeatures, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _getIterator(_iterator5);;) {
              var _ref5;

              if (_isArray5) {
                if (_i5 >= _iterator5.length) break;
                _ref5 = _iterator5[_i5++];
              } else {
                _i5 = _iterator5.next();
                if (_i5.done) break;
                _ref5 = _i5.value;
              }

              var tag = _ref5;
              var feature = this.features[tag];

              if (!feature) {
                continue;
              }

              for (var _iterator6 = feature.lookupListIndexes, _isArray6 = Array.isArray(_iterator6), _i6 = 0, _iterator6 = _isArray6 ? _iterator6 : _getIterator(_iterator6);;) {
                var _ref6;

                if (_isArray6) {
                  if (_i6 >= _iterator6.length) break;
                  _ref6 = _iterator6[_i6++];
                } else {
                  _i6 = _iterator6.next();
                  if (_i6.done) break;
                  _ref6 = _i6.value;
                }

                var lookupIndex = _ref6;

                if (exclude && exclude.indexOf(lookupIndex) !== -1) {
                  continue;
                }

                lookups.push({
                  feature: tag,
                  index: lookupIndex,
                  lookup: this.table.lookupList.get(lookupIndex)
                });
              }
            }

            lookups.sort(function (a, b) {
              return a.index - b.index;
            });
            return lookups;
          };

          OTProcessor.prototype.substituteFeatureForVariations = function substituteFeatureForVariations(featureIndex) {
            if (this.variationsIndex === -1) {
              return null;
            }

            var record = this.table.featureVariations.featureVariationRecords[this.variationsIndex];
            var substitutions = record.featureTableSubstitution.substitutions;

            for (var _iterator7 = substitutions, _isArray7 = Array.isArray(_iterator7), _i7 = 0, _iterator7 = _isArray7 ? _iterator7 : _getIterator(_iterator7);;) {
              var _ref7;

              if (_isArray7) {
                if (_i7 >= _iterator7.length) break;
                _ref7 = _iterator7[_i7++];
              } else {
                _i7 = _iterator7.next();
                if (_i7.done) break;
                _ref7 = _i7.value;
              }

              var substitution = _ref7;

              if (substitution.featureIndex === featureIndex) {
                return substitution.alternateFeatureTable;
              }
            }

            return null;
          };

          OTProcessor.prototype.findVariationsIndex = function findVariationsIndex(coords) {
            var variations = this.table.featureVariations;

            if (!variations) {
              return -1;
            }

            var records = variations.featureVariationRecords;

            for (var i = 0; i < records.length; i++) {
              var conditions = records[i].conditionSet.conditionTable;

              if (this.variationConditionsMatch(conditions, coords)) {
                return i;
              }
            }

            return -1;
          };

          OTProcessor.prototype.variationConditionsMatch = function variationConditionsMatch(conditions, coords) {
            return conditions.every(function (condition) {
              var coord = condition.axisIndex < coords.length ? coords[condition.axisIndex] : 0;
              return condition.filterRangeMinValue <= coord && coord <= condition.filterRangeMaxValue;
            });
          };

          OTProcessor.prototype.applyFeatures = function applyFeatures(userFeatures, glyphs, advances) {
            var lookups = this.lookupsForFeatures(userFeatures);
            this.applyLookups(lookups, glyphs, advances);
          };

          OTProcessor.prototype.applyLookups = function applyLookups(lookups, glyphs, positions) {
            this.glyphs = glyphs;
            this.positions = positions;
            this.glyphIterator = new GlyphIterator(glyphs);

            for (var _iterator8 = lookups, _isArray8 = Array.isArray(_iterator8), _i8 = 0, _iterator8 = _isArray8 ? _iterator8 : _getIterator(_iterator8);;) {
              var _ref8;

              if (_isArray8) {
                if (_i8 >= _iterator8.length) break;
                _ref8 = _iterator8[_i8++];
              } else {
                _i8 = _iterator8.next();
                if (_i8.done) break;
                _ref8 = _i8.value;
              }

              var _ref9 = _ref8,
                  feature = _ref9.feature,
                  lookup = _ref9.lookup;
              this.currentFeature = feature;
              this.glyphIterator.reset(lookup.flags);

              while (this.glyphIterator.index < glyphs.length) {
                if (!(feature in this.glyphIterator.cur.features)) {
                  this.glyphIterator.next();
                  continue;
                }

                for (var _iterator9 = lookup.subTables, _isArray9 = Array.isArray(_iterator9), _i9 = 0, _iterator9 = _isArray9 ? _iterator9 : _getIterator(_iterator9);;) {
                  var _ref10;

                  if (_isArray9) {
                    if (_i9 >= _iterator9.length) break;
                    _ref10 = _iterator9[_i9++];
                  } else {
                    _i9 = _iterator9.next();
                    if (_i9.done) break;
                    _ref10 = _i9.value;
                  }

                  var table = _ref10;
                  var res = this.applyLookup(lookup.lookupType, table);

                  if (res) {
                    break;
                  }
                }

                this.glyphIterator.next();
              }
            }
          };

          OTProcessor.prototype.applyLookup = function applyLookup(lookup, table) {
            throw new Error("applyLookup must be implemented by subclasses");
          };

          OTProcessor.prototype.applyLookupList = function applyLookupList(lookupRecords) {
            var options = this.glyphIterator.options;
            var glyphIndex = this.glyphIterator.index;

            for (var _iterator10 = lookupRecords, _isArray10 = Array.isArray(_iterator10), _i10 = 0, _iterator10 = _isArray10 ? _iterator10 : _getIterator(_iterator10);;) {
              var _ref11;

              if (_isArray10) {
                if (_i10 >= _iterator10.length) break;
                _ref11 = _iterator10[_i10++];
              } else {
                _i10 = _iterator10.next();
                if (_i10.done) break;
                _ref11 = _i10.value;
              }

              var lookupRecord = _ref11; // Reset flags and find glyph index for this lookup record

              this.glyphIterator.reset(options, glyphIndex);
              this.glyphIterator.increment(lookupRecord.sequenceIndex); // Get the lookup and setup flags for subtables

              var lookup = this.table.lookupList.get(lookupRecord.lookupListIndex);
              this.glyphIterator.reset(lookup.flags, this.glyphIterator.index); // Apply lookup subtables until one matches

              for (var _iterator11 = lookup.subTables, _isArray11 = Array.isArray(_iterator11), _i11 = 0, _iterator11 = _isArray11 ? _iterator11 : _getIterator(_iterator11);;) {
                var _ref12;

                if (_isArray11) {
                  if (_i11 >= _iterator11.length) break;
                  _ref12 = _iterator11[_i11++];
                } else {
                  _i11 = _iterator11.next();
                  if (_i11.done) break;
                  _ref12 = _i11.value;
                }

                var table = _ref12;

                if (this.applyLookup(lookup.lookupType, table)) {
                  break;
                }
              }
            }

            this.glyphIterator.reset(options, glyphIndex);
            return true;
          };

          OTProcessor.prototype.coverageIndex = function coverageIndex(coverage, glyph) {
            if (glyph == null) {
              glyph = this.glyphIterator.cur.id;
            }

            switch (coverage.version) {
              case 1:
                return coverage.glyphs.indexOf(glyph);

              case 2:
                for (var _iterator12 = coverage.rangeRecords, _isArray12 = Array.isArray(_iterator12), _i12 = 0, _iterator12 = _isArray12 ? _iterator12 : _getIterator(_iterator12);;) {
                  var _ref13;

                  if (_isArray12) {
                    if (_i12 >= _iterator12.length) break;
                    _ref13 = _iterator12[_i12++];
                  } else {
                    _i12 = _iterator12.next();
                    if (_i12.done) break;
                    _ref13 = _i12.value;
                  }

                  var range = _ref13;

                  if (range.start <= glyph && glyph <= range.end) {
                    return range.startCoverageIndex + glyph - range.start;
                  }
                }

                break;
            }

            return -1;
          };

          OTProcessor.prototype.match = function match(sequenceIndex, sequence, fn, matched) {
            var pos = this.glyphIterator.index;
            var glyph = this.glyphIterator.increment(sequenceIndex);
            var idx = 0;

            while (idx < sequence.length && glyph && fn(sequence[idx], glyph)) {
              if (matched) {
                matched.push(this.glyphIterator.index);
              }

              idx++;
              glyph = this.glyphIterator.next();
            }

            this.glyphIterator.index = pos;

            if (idx < sequence.length) {
              return false;
            }

            return matched || true;
          };

          OTProcessor.prototype.sequenceMatches = function sequenceMatches(sequenceIndex, sequence) {
            return this.match(sequenceIndex, sequence, function (component, glyph) {
              return component === glyph.id;
            });
          };

          OTProcessor.prototype.sequenceMatchIndices = function sequenceMatchIndices(sequenceIndex, sequence) {
            var _this = this;

            return this.match(sequenceIndex, sequence, function (component, glyph) {
              // If the current feature doesn't apply to this glyph,
              if (!(_this.currentFeature in glyph.features)) {
                return false;
              }

              return component === glyph.id;
            }, []);
          };

          OTProcessor.prototype.coverageSequenceMatches = function coverageSequenceMatches(sequenceIndex, sequence) {
            var _this2 = this;

            return this.match(sequenceIndex, sequence, function (coverage, glyph) {
              return _this2.coverageIndex(coverage, glyph.id) >= 0;
            });
          };

          OTProcessor.prototype.getClassID = function getClassID(glyph, classDef) {
            switch (classDef.version) {
              case 1:
                // Class array
                var i = glyph - classDef.startGlyph;

                if (i >= 0 && i < classDef.classValueArray.length) {
                  return classDef.classValueArray[i];
                }

                break;

              case 2:
                for (var _iterator13 = classDef.classRangeRecord, _isArray13 = Array.isArray(_iterator13), _i13 = 0, _iterator13 = _isArray13 ? _iterator13 : _getIterator(_iterator13);;) {
                  var _ref14;

                  if (_isArray13) {
                    if (_i13 >= _iterator13.length) break;
                    _ref14 = _iterator13[_i13++];
                  } else {
                    _i13 = _iterator13.next();
                    if (_i13.done) break;
                    _ref14 = _i13.value;
                  }

                  var range = _ref14;

                  if (range.start <= glyph && glyph <= range.end) {
                    return range.class;
                  }
                }

                break;
            }

            return 0;
          };

          OTProcessor.prototype.classSequenceMatches = function classSequenceMatches(sequenceIndex, sequence, classDef) {
            var _this3 = this;

            return this.match(sequenceIndex, sequence, function (classID, glyph) {
              return classID === _this3.getClassID(glyph.id, classDef);
            });
          };

          OTProcessor.prototype.applyContext = function applyContext(table) {
            switch (table.version) {
              case 1:
                var index = this.coverageIndex(table.coverage);

                if (index === -1) {
                  return false;
                }

                var set = table.ruleSets[index];

                for (var _iterator14 = set, _isArray14 = Array.isArray(_iterator14), _i14 = 0, _iterator14 = _isArray14 ? _iterator14 : _getIterator(_iterator14);;) {
                  var _ref15;

                  if (_isArray14) {
                    if (_i14 >= _iterator14.length) break;
                    _ref15 = _iterator14[_i14++];
                  } else {
                    _i14 = _iterator14.next();
                    if (_i14.done) break;
                    _ref15 = _i14.value;
                  }

                  var rule = _ref15;

                  if (this.sequenceMatches(1, rule.input)) {
                    return this.applyLookupList(rule.lookupRecords);
                  }
                }

                break;

              case 2:
                if (this.coverageIndex(table.coverage) === -1) {
                  return false;
                }

                index = this.getClassID(this.glyphIterator.cur.id, table.classDef);

                if (index === -1) {
                  return false;
                }

                set = table.classSet[index];

                for (var _iterator15 = set, _isArray15 = Array.isArray(_iterator15), _i15 = 0, _iterator15 = _isArray15 ? _iterator15 : _getIterator(_iterator15);;) {
                  var _ref16;

                  if (_isArray15) {
                    if (_i15 >= _iterator15.length) break;
                    _ref16 = _iterator15[_i15++];
                  } else {
                    _i15 = _iterator15.next();
                    if (_i15.done) break;
                    _ref16 = _i15.value;
                  }

                  var _rule = _ref16;

                  if (this.classSequenceMatches(1, _rule.classes, table.classDef)) {
                    return this.applyLookupList(_rule.lookupRecords);
                  }
                }

                break;

              case 3:
                if (this.coverageSequenceMatches(0, table.coverages)) {
                  return this.applyLookupList(table.lookupRecords);
                }

                break;
            }

            return false;
          };

          OTProcessor.prototype.applyChainingContext = function applyChainingContext(table) {
            switch (table.version) {
              case 1:
                var index = this.coverageIndex(table.coverage);

                if (index === -1) {
                  return false;
                }

                var set = table.chainRuleSets[index];

                for (var _iterator16 = set, _isArray16 = Array.isArray(_iterator16), _i16 = 0, _iterator16 = _isArray16 ? _iterator16 : _getIterator(_iterator16);;) {
                  var _ref17;

                  if (_isArray16) {
                    if (_i16 >= _iterator16.length) break;
                    _ref17 = _iterator16[_i16++];
                  } else {
                    _i16 = _iterator16.next();
                    if (_i16.done) break;
                    _ref17 = _i16.value;
                  }

                  var rule = _ref17;

                  if (this.sequenceMatches(-rule.backtrack.length, rule.backtrack) && this.sequenceMatches(1, rule.input) && this.sequenceMatches(1 + rule.input.length, rule.lookahead)) {
                    return this.applyLookupList(rule.lookupRecords);
                  }
                }

                break;

              case 2:
                if (this.coverageIndex(table.coverage) === -1) {
                  return false;
                }

                index = this.getClassID(this.glyphIterator.cur.id, table.inputClassDef);
                var rules = table.chainClassSet[index];

                if (!rules) {
                  return false;
                }

                for (var _iterator17 = rules, _isArray17 = Array.isArray(_iterator17), _i17 = 0, _iterator17 = _isArray17 ? _iterator17 : _getIterator(_iterator17);;) {
                  var _ref18;

                  if (_isArray17) {
                    if (_i17 >= _iterator17.length) break;
                    _ref18 = _iterator17[_i17++];
                  } else {
                    _i17 = _iterator17.next();
                    if (_i17.done) break;
                    _ref18 = _i17.value;
                  }

                  var _rule2 = _ref18;

                  if (this.classSequenceMatches(-_rule2.backtrack.length, _rule2.backtrack, table.backtrackClassDef) && this.classSequenceMatches(1, _rule2.input, table.inputClassDef) && this.classSequenceMatches(1 + _rule2.input.length, _rule2.lookahead, table.lookaheadClassDef)) {
                    return this.applyLookupList(_rule2.lookupRecords);
                  }
                }

                break;

              case 3:
                if (this.coverageSequenceMatches(-table.backtrackGlyphCount, table.backtrackCoverage) && this.coverageSequenceMatches(0, table.inputCoverage) && this.coverageSequenceMatches(table.inputGlyphCount, table.lookaheadCoverage)) {
                  return this.applyLookupList(table.lookupRecords);
                }

                break;
            }

            return false;
          };

          return OTProcessor;
        }();

        var GlyphInfo = function () {
          function GlyphInfo(font, id) {
            var codePoints = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
            var features = arguments[3];

            _classCallCheck(this, GlyphInfo);

            this._font = font;
            this.codePoints = codePoints;
            this.id = id;
            this.features = {};

            if (Array.isArray(features)) {
              for (var i = 0; i < features.length; i++) {
                var feature = features[i];
                this.features[feature] = true;
              }
            } else if ((typeof features === 'undefined' ? 'undefined' : _typeof(features)) === 'object') {
              _Object$assign(this.features, features);
            }

            this.ligatureID = null;
            this.ligatureComponent = null;
            this.isLigated = false;
            this.cursiveAttachment = null;
            this.markAttachment = null;
            this.shaperInfo = null;
            this.substituted = false;
            this.isMultiplied = false;
          }

          GlyphInfo.prototype.copy = function copy() {
            return new GlyphInfo(this._font, this.id, this.codePoints, this.features);
          };

          _createClass(GlyphInfo, [{
            key: 'id',
            get: function get() {
              return this._id;
            },
            set: function set(id) {
              this._id = id;
              this.substituted = true;
              var GDEF = this._font.GDEF;

              if (GDEF && GDEF.glyphClassDef) {
                // TODO: clean this up
                var classID = OTProcessor.prototype.getClassID(id, GDEF.glyphClassDef);
                this.isBase = classID === 1;
                this.isLigature = classID === 2;
                this.isMark = classID === 3;
                this.markAttachmentType = GDEF.markAttachClassDef ? OTProcessor.prototype.getClassID(id, GDEF.markAttachClassDef) : 0;
              } else {
                this.isMark = this.codePoints.length > 0 && this.codePoints.every(unicode.isMark);
                this.isBase = !this.isMark;
                this.isLigature = this.codePoints.length > 1;
                this.markAttachmentType = 0;
              }
            }
          }]);

          return GlyphInfo;
        }();

        var _class$5;

        var _temp$1;
        /**
         * This is a shaper for the Hangul script, used by the Korean language.
         * It does the following:
         *   - decompose if unsupported by the font:
         *     <LV>   -> <L,V>
         *     <LVT>  -> <L,V,T>
         *     <LV,T> -> <L,V,T>
         *
         *   - compose if supported by the font:
         *     <L,V>   -> <LV>
         *     <L,V,T> -> <LVT>
         *     <LV,T>  -> <LVT>
         *
         *   - reorder tone marks (S is any valid syllable):
         *     <S, M> -> <M, S>
         *
         *   - apply ljmo, vjmo, and tjmo OpenType features to decomposed Jamo sequences.
         *
         * This logic is based on the following documents:
         *   - http://www.microsoft.com/typography/OpenTypeDev/hangul/intro.htm
         *   - http://ktug.org/~nomos/harfbuzz-hangul/hangulshaper.pdf
         */


        var HangulShaper = (_temp$1 = _class$5 = function (_DefaultShaper) {
          _inherits(HangulShaper, _DefaultShaper);

          function HangulShaper() {
            _classCallCheck(this, HangulShaper);

            return _possibleConstructorReturn(this, _DefaultShaper.apply(this, arguments));
          }

          HangulShaper.planFeatures = function planFeatures(plan) {
            plan.add(['ljmo', 'vjmo', 'tjmo'], false);
          };

          HangulShaper.assignFeatures = function assignFeatures(plan, glyphs) {
            var state = 0;
            var i = 0;

            while (i < glyphs.length) {
              var action = void 0;
              var glyph = glyphs[i];
              var code = glyph.codePoints[0];
              var type = getType(code);
              var _STATE_TABLE$state$ty = STATE_TABLE$1[state][type];
              action = _STATE_TABLE$state$ty[0];
              state = _STATE_TABLE$state$ty[1];

              switch (action) {
                case DECOMPOSE:
                  // Decompose the composed syllable if it is not supported by the font.
                  if (!plan.font.hasGlyphForCodePoint(code)) {
                    i = decompose(glyphs, i, plan.font);
                  }

                  break;

                case COMPOSE:
                  // Found a decomposed syllable. Try to compose if supported by the font.
                  i = compose(glyphs, i, plan.font);
                  break;

                case TONE_MARK:
                  // Got a valid syllable, followed by a tone mark. Move the tone mark to the beginning of the syllable.
                  reorderToneMark(glyphs, i, plan.font);
                  break;

                case INVALID:
                  // Tone mark has no valid syllable to attach to, so insert a dotted circle
                  i = insertDottedCircle(glyphs, i, plan.font);
                  break;
              }

              i++;
            }
          };

          return HangulShaper;
        }(DefaultShaper), _class$5.zeroMarkWidths = 'NONE', _temp$1);
        var HANGUL_BASE = 0xac00;
        var HANGUL_END = 0xd7a4;
        var HANGUL_COUNT = HANGUL_END - HANGUL_BASE + 1;
        var L_BASE = 0x1100; // lead

        var V_BASE = 0x1161; // vowel

        var T_BASE = 0x11a7; // trail

        var L_COUNT = 19;
        var V_COUNT = 21;
        var T_COUNT = 28;
        var L_END = L_BASE + L_COUNT - 1;
        var V_END = V_BASE + V_COUNT - 1;
        var T_END = T_BASE + T_COUNT - 1;
        var DOTTED_CIRCLE = 0x25cc;

        var isL = function isL(code) {
          return 0x1100 <= code && code <= 0x115f || 0xa960 <= code && code <= 0xa97c;
        };

        var isV = function isV(code) {
          return 0x1160 <= code && code <= 0x11a7 || 0xd7b0 <= code && code <= 0xd7c6;
        };

        var isT = function isT(code) {
          return 0x11a8 <= code && code <= 0x11ff || 0xd7cb <= code && code <= 0xd7fb;
        };

        var isTone = function isTone(code) {
          return 0x302e <= code && code <= 0x302f;
        };

        var isLVT = function isLVT(code) {
          return HANGUL_BASE <= code && code <= HANGUL_END;
        };

        var isLV = function isLV(code) {
          return code - HANGUL_BASE < HANGUL_COUNT && (code - HANGUL_BASE) % T_COUNT === 0;
        };

        var isCombiningL = function isCombiningL(code) {
          return L_BASE <= code && code <= L_END;
        };

        var isCombiningV = function isCombiningV(code) {
          return V_BASE <= code && code <= V_END;
        };

        var isCombiningT = function isCombiningT(code) {
          return T_BASE + 1 && 1 <= code && code <= T_END;
        }; // Character categories


        var X = 0; // Other character

        var L = 1; // Leading consonant

        var V = 2; // Medial vowel

        var T = 3; // Trailing consonant

        var LV = 4; // Composed <LV> syllable

        var LVT = 5; // Composed <LVT> syllable

        var M = 6; // Tone mark
        // This function classifies a character using the above categories.

        function getType(code) {
          if (isL(code)) {
            return L;
          }

          if (isV(code)) {
            return V;
          }

          if (isT(code)) {
            return T;
          }

          if (isLV(code)) {
            return LV;
          }

          if (isLVT(code)) {
            return LVT;
          }

          if (isTone(code)) {
            return M;
          }

          return X;
        } // State machine actions


        var NO_ACTION = 0;
        var DECOMPOSE = 1;
        var COMPOSE = 2;
        var TONE_MARK = 4;
        var INVALID = 5; // Build a state machine that accepts valid syllables, and applies actions along the way.
        // The logic this is implementing is documented at the top of the file.

        var STATE_TABLE$1 = [//       X                 L                 V                T                  LV                LVT               M
        // State 0: start state
        [[NO_ACTION, 0], [NO_ACTION, 1], [NO_ACTION, 0], [NO_ACTION, 0], [DECOMPOSE, 2], [DECOMPOSE, 3], [INVALID, 0]], // State 1: <L>
        [[NO_ACTION, 0], [NO_ACTION, 1], [COMPOSE, 2], [NO_ACTION, 0], [DECOMPOSE, 2], [DECOMPOSE, 3], [INVALID, 0]], // State 2: <L,V> or <LV>
        [[NO_ACTION, 0], [NO_ACTION, 1], [NO_ACTION, 0], [COMPOSE, 3], [DECOMPOSE, 2], [DECOMPOSE, 3], [TONE_MARK, 0]], // State 3: <L,V,T> or <LVT>
        [[NO_ACTION, 0], [NO_ACTION, 1], [NO_ACTION, 0], [NO_ACTION, 0], [DECOMPOSE, 2], [DECOMPOSE, 3], [TONE_MARK, 0]]];

        function getGlyph(font, code, features) {
          return new GlyphInfo(font, font.glyphForCodePoint(code).id, [code], features);
        }

        function decompose(glyphs, i, font) {
          var glyph = glyphs[i];
          var code = glyph.codePoints[0];
          var s = code - HANGUL_BASE;
          var t = T_BASE + s % T_COUNT;
          s = s / T_COUNT | 0;
          var l = L_BASE + s / V_COUNT | 0;
          var v = V_BASE + s % V_COUNT; // Don't decompose if all of the components are not available

          if (!font.hasGlyphForCodePoint(l) || !font.hasGlyphForCodePoint(v) || t !== T_BASE && !font.hasGlyphForCodePoint(t)) {
            return i;
          } // Replace the current glyph with decomposed L, V, and T glyphs,
          // and apply the proper OpenType features to each component.


          var ljmo = getGlyph(font, l, glyph.features);
          ljmo.features.ljmo = true;
          var vjmo = getGlyph(font, v, glyph.features);
          vjmo.features.vjmo = true;
          var insert = [ljmo, vjmo];

          if (t > T_BASE) {
            var tjmo = getGlyph(font, t, glyph.features);
            tjmo.features.tjmo = true;
            insert.push(tjmo);
          }

          glyphs.splice.apply(glyphs, [i, 1].concat(insert));
          return i + insert.length - 1;
        }

        function compose(glyphs, i, font) {
          var glyph = glyphs[i];
          var code = glyphs[i].codePoints[0];
          var type = getType(code);
          var prev = glyphs[i - 1].codePoints[0];
          var prevType = getType(prev); // Figure out what type of syllable we're dealing with

          var lv = void 0,
              ljmo = void 0,
              vjmo = void 0,
              tjmo = void 0;

          if (prevType === LV && type === T) {
            // <LV,T>
            lv = prev;
            tjmo = glyph;
          } else {
            if (type === V) {
              // <L,V>
              ljmo = glyphs[i - 1];
              vjmo = glyph;
            } else {
              // <L,V,T>
              ljmo = glyphs[i - 2];
              vjmo = glyphs[i - 1];
              tjmo = glyph;
            }

            var l = ljmo.codePoints[0];
            var v = vjmo.codePoints[0]; // Make sure L and V are combining characters

            if (isCombiningL(l) && isCombiningV(v)) {
              lv = HANGUL_BASE + ((l - L_BASE) * V_COUNT + (v - V_BASE)) * T_COUNT;
            }
          }

          var t = tjmo && tjmo.codePoints[0] || T_BASE;

          if (lv != null && (t === T_BASE || isCombiningT(t))) {
            var s = lv + (t - T_BASE); // Replace with a composed glyph if supported by the font,
            // otherwise apply the proper OpenType features to each component.

            if (font.hasGlyphForCodePoint(s)) {
              var del = prevType === V ? 3 : 2;
              glyphs.splice(i - del + 1, del, getGlyph(font, s, glyph.features));
              return i - del + 1;
            }
          } // Didn't compose (either a non-combining component or unsupported by font).


          if (ljmo) {
            ljmo.features.ljmo = true;
          }

          if (vjmo) {
            vjmo.features.vjmo = true;
          }

          if (tjmo) {
            tjmo.features.tjmo = true;
          }

          if (prevType === LV) {
            // Sequence was originally <L,V>, which got combined earlier.
            // Either the T was non-combining, or the LVT glyph wasn't supported.
            // Decompose the glyph again and apply OT features.
            decompose(glyphs, i - 1, font);
            return i + 1;
          }

          return i;
        }

        function getLength(code) {
          switch (getType(code)) {
            case LV:
            case LVT:
              return 1;

            case V:
              return 2;

            case T:
              return 3;
          }
        }

        function reorderToneMark(glyphs, i, font) {
          var glyph = glyphs[i];
          var code = glyphs[i].codePoints[0]; // Move tone mark to the beginning of the previous syllable, unless it is zero width

          if (font.glyphForCodePoint(code).advanceWidth === 0) {
            return;
          }

          var prev = glyphs[i - 1].codePoints[0];
          var len = getLength(prev);
          glyphs.splice(i, 1);
          return glyphs.splice(i - len, 0, glyph);
        }

        function insertDottedCircle(glyphs, i, font) {
          var glyph = glyphs[i];
          var code = glyphs[i].codePoints[0];

          if (font.hasGlyphForCodePoint(DOTTED_CIRCLE)) {
            var dottedCircle = getGlyph(font, DOTTED_CIRCLE, glyph.features); // If the tone mark is zero width, insert the dotted circle before, otherwise after

            var idx = font.glyphForCodePoint(code).advanceWidth === 0 ? i : i + 1;
            glyphs.splice(idx, 0, dottedCircle);
            i++;
          }

          return i;
        }

        var stateTable = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 11, 12, 13, 14, 15, 16, 17], [0, 0, 0, 18, 19, 20, 21, 22, 23, 0, 24, 0, 0, 25, 26, 0, 0, 27, 0], [0, 0, 0, 28, 29, 30, 31, 32, 33, 0, 34, 0, 0, 35, 36, 0, 0, 37, 0], [0, 0, 0, 38, 5, 7, 7, 8, 9, 0, 10, 0, 0, 0, 13, 0, 0, 16, 0], [0, 39, 0, 0, 0, 40, 41, 0, 9, 0, 10, 0, 0, 0, 42, 0, 39, 0, 0], [0, 0, 0, 0, 43, 44, 44, 8, 9, 0, 0, 0, 0, 12, 43, 0, 0, 0, 0], [0, 0, 0, 0, 43, 44, 44, 8, 9, 0, 0, 0, 0, 0, 43, 0, 0, 0, 0], [0, 0, 0, 45, 46, 47, 48, 49, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 0, 0, 0, 0, 50, 0, 0, 51, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 53, 54, 55, 56, 57, 58, 0, 59, 0, 0, 60, 61, 0, 0, 62, 0], [0, 0, 0, 4, 5, 7, 7, 8, 9, 0, 10, 0, 0, 0, 13, 0, 0, 16, 0], [0, 63, 64, 0, 0, 40, 41, 0, 9, 0, 10, 0, 0, 0, 42, 0, 63, 0, 0], [0, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 11, 12, 13, 0, 2, 16, 0], [0, 0, 0, 18, 65, 20, 21, 22, 23, 0, 24, 0, 0, 25, 26, 0, 0, 27, 0], [0, 0, 0, 0, 66, 67, 67, 8, 9, 0, 10, 0, 0, 0, 68, 0, 0, 0, 0], [0, 0, 0, 69, 0, 70, 70, 0, 71, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 73, 19, 74, 74, 22, 23, 0, 24, 0, 0, 0, 26, 0, 0, 27, 0], [0, 75, 0, 0, 0, 76, 77, 0, 23, 0, 24, 0, 0, 0, 78, 0, 75, 0, 0], [0, 0, 0, 0, 79, 80, 80, 22, 23, 0, 0, 0, 0, 25, 79, 0, 0, 0, 0], [0, 0, 0, 18, 19, 20, 74, 22, 23, 0, 24, 0, 0, 25, 26, 0, 0, 27, 0], [0, 0, 0, 81, 82, 83, 84, 85, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 0, 0, 0, 0, 86, 0, 0, 87, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 88, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 18, 19, 74, 74, 22, 23, 0, 24, 0, 0, 0, 26, 0, 0, 27, 0], [0, 89, 90, 0, 0, 76, 77, 0, 23, 0, 24, 0, 0, 0, 78, 0, 89, 0, 0], [0, 0, 0, 0, 91, 92, 92, 22, 23, 0, 24, 0, 0, 0, 93, 0, 0, 0, 0], [0, 0, 0, 94, 29, 95, 31, 32, 33, 0, 34, 0, 0, 0, 36, 0, 0, 37, 0], [0, 96, 0, 0, 0, 97, 98, 0, 33, 0, 34, 0, 0, 0, 99, 0, 96, 0, 0], [0, 0, 0, 0, 100, 101, 101, 32, 33, 0, 0, 0, 0, 35, 100, 0, 0, 0, 0], [0, 0, 0, 0, 100, 101, 101, 32, 33, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0], [0, 0, 0, 102, 103, 104, 105, 106, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 0, 0, 0, 0, 107, 0, 0, 108, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 109, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 28, 29, 95, 31, 32, 33, 0, 34, 0, 0, 0, 36, 0, 0, 37, 0], [0, 110, 111, 0, 0, 97, 98, 0, 33, 0, 34, 0, 0, 0, 99, 0, 110, 0, 0], [0, 0, 0, 0, 112, 113, 113, 32, 33, 0, 34, 0, 0, 0, 114, 0, 0, 0, 0], [0, 0, 0, 0, 5, 7, 7, 8, 9, 0, 10, 0, 0, 0, 13, 0, 0, 16, 0], [0, 0, 0, 115, 116, 117, 118, 8, 9, 0, 10, 0, 0, 119, 120, 0, 0, 16, 0], [0, 0, 0, 0, 0, 121, 121, 0, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 39, 0, 122, 0, 123, 123, 8, 9, 0, 10, 0, 0, 0, 42, 0, 39, 0, 0], [0, 124, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 124, 0, 0], [0, 39, 0, 0, 0, 121, 125, 0, 9, 0, 10, 0, 0, 0, 42, 0, 39, 0, 0], [0, 0, 0, 0, 0, 126, 126, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 46, 47, 48, 49, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 0, 0, 0, 0, 47, 47, 49, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 0, 0, 0, 0, 127, 127, 49, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 128, 127, 127, 49, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 129, 130, 131, 132, 133, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 50, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 134, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 135, 54, 56, 56, 57, 58, 0, 59, 0, 0, 0, 61, 0, 0, 62, 0], [0, 136, 0, 0, 0, 137, 138, 0, 58, 0, 59, 0, 0, 0, 139, 0, 136, 0, 0], [0, 0, 0, 0, 140, 141, 141, 57, 58, 0, 0, 0, 0, 60, 140, 0, 0, 0, 0], [0, 0, 0, 0, 140, 141, 141, 57, 58, 0, 0, 0, 0, 0, 140, 0, 0, 0, 0], [0, 0, 0, 142, 143, 144, 145, 146, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 0, 0, 0, 0, 147, 0, 0, 148, 0, 59, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 149, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 53, 54, 56, 56, 57, 58, 0, 59, 0, 0, 0, 61, 0, 0, 62, 0], [0, 150, 151, 0, 0, 137, 138, 0, 58, 0, 59, 0, 0, 0, 139, 0, 150, 0, 0], [0, 0, 0, 0, 152, 153, 153, 57, 58, 0, 59, 0, 0, 0, 154, 0, 0, 0, 0], [0, 0, 0, 155, 116, 156, 157, 8, 9, 0, 10, 0, 0, 158, 120, 0, 0, 16, 0], [0, 0, 0, 0, 0, 121, 121, 0, 9, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0], [0, 75, 3, 4, 5, 159, 160, 8, 161, 0, 162, 0, 11, 12, 163, 0, 75, 16, 0], [0, 0, 0, 0, 0, 40, 164, 0, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 0, 0, 0, 165, 44, 44, 8, 9, 0, 0, 0, 0, 0, 165, 0, 0, 0, 0], [0, 124, 64, 0, 0, 40, 164, 0, 9, 0, 10, 0, 0, 0, 42, 0, 124, 0, 0], [0, 0, 0, 0, 0, 70, 70, 0, 71, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 166, 0, 0, 167, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 168, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 19, 74, 74, 22, 23, 0, 24, 0, 0, 0, 26, 0, 0, 27, 0], [0, 0, 0, 0, 79, 80, 80, 22, 23, 0, 0, 0, 0, 0, 79, 0, 0, 0, 0], [0, 0, 0, 169, 170, 171, 172, 22, 23, 0, 24, 0, 0, 173, 174, 0, 0, 27, 0], [0, 0, 0, 0, 0, 175, 175, 0, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 75, 0, 176, 0, 177, 177, 22, 23, 0, 24, 0, 0, 0, 78, 0, 75, 0, 0], [0, 178, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 178, 0, 0], [0, 75, 0, 0, 0, 175, 179, 0, 23, 0, 24, 0, 0, 0, 78, 0, 75, 0, 0], [0, 0, 0, 0, 0, 180, 180, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 82, 83, 84, 85, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 0, 0, 0, 0, 83, 83, 85, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 0, 0, 0, 0, 181, 181, 85, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 182, 181, 181, 85, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 183, 184, 185, 186, 187, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 86, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 188, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 189, 170, 190, 191, 22, 23, 0, 24, 0, 0, 192, 174, 0, 0, 27, 0], [0, 0, 0, 0, 0, 175, 175, 0, 23, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 76, 193, 0, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 0, 0, 0, 194, 80, 80, 22, 23, 0, 0, 0, 0, 0, 194, 0, 0, 0, 0], [0, 178, 90, 0, 0, 76, 193, 0, 23, 0, 24, 0, 0, 0, 78, 0, 178, 0, 0], [0, 0, 0, 0, 29, 95, 31, 32, 33, 0, 34, 0, 0, 0, 36, 0, 0, 37, 0], [0, 0, 0, 0, 100, 101, 101, 32, 33, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0], [0, 0, 0, 195, 196, 197, 198, 32, 33, 0, 34, 0, 0, 199, 200, 0, 0, 37, 0], [0, 0, 0, 0, 0, 201, 201, 0, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 96, 0, 202, 0, 203, 203, 32, 33, 0, 34, 0, 0, 0, 99, 0, 96, 0, 0], [0, 204, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 204, 0, 0], [0, 96, 0, 0, 0, 201, 205, 0, 33, 0, 34, 0, 0, 0, 99, 0, 96, 0, 0], [0, 0, 0, 0, 0, 206, 206, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 103, 104, 105, 106, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 0, 0, 0, 0, 104, 104, 106, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 0, 0, 0, 0, 207, 207, 106, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 208, 207, 207, 106, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 209, 210, 211, 212, 213, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 107, 0, 0, 0, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 214, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 215, 196, 216, 217, 32, 33, 0, 34, 0, 0, 218, 200, 0, 0, 37, 0], [0, 0, 0, 0, 0, 201, 201, 0, 33, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 97, 219, 0, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 0, 0, 0, 220, 101, 101, 32, 33, 0, 0, 0, 0, 0, 220, 0, 0, 0, 0], [0, 204, 111, 0, 0, 97, 219, 0, 33, 0, 34, 0, 0, 0, 99, 0, 204, 0, 0], [0, 0, 0, 221, 116, 222, 222, 8, 9, 0, 10, 0, 0, 0, 120, 0, 0, 16, 0], [0, 223, 0, 0, 0, 40, 224, 0, 9, 0, 10, 0, 0, 0, 42, 0, 223, 0, 0], [0, 0, 0, 0, 225, 44, 44, 8, 9, 0, 0, 0, 0, 119, 225, 0, 0, 0, 0], [0, 0, 0, 115, 116, 117, 222, 8, 9, 0, 10, 0, 0, 119, 120, 0, 0, 16, 0], [0, 0, 0, 115, 116, 222, 222, 8, 9, 0, 10, 0, 0, 0, 120, 0, 0, 16, 0], [0, 226, 64, 0, 0, 40, 224, 0, 9, 0, 10, 0, 0, 0, 42, 0, 226, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 39, 0, 0, 0, 121, 121, 0, 9, 0, 10, 0, 0, 0, 42, 0, 39, 0, 0], [0, 0, 0, 0, 0, 44, 44, 8, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 227, 0, 228, 229, 0, 9, 0, 10, 0, 0, 230, 0, 0, 0, 0, 0], [0, 39, 0, 122, 0, 121, 121, 0, 9, 0, 10, 0, 0, 0, 42, 0, 39, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 231, 231, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 232, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 130, 131, 132, 133, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 0, 0, 0, 0, 131, 131, 133, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 0, 0, 0, 0, 233, 233, 133, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 234, 233, 233, 133, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 235, 236, 237, 238, 239, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 54, 56, 56, 57, 58, 0, 59, 0, 0, 0, 61, 0, 0, 62, 0], [0, 0, 0, 240, 241, 242, 243, 57, 58, 0, 59, 0, 0, 244, 245, 0, 0, 62, 0], [0, 0, 0, 0, 0, 246, 246, 0, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 136, 0, 247, 0, 248, 248, 57, 58, 0, 59, 0, 0, 0, 139, 0, 136, 0, 0], [0, 249, 151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 249, 0, 0], [0, 136, 0, 0, 0, 246, 250, 0, 58, 0, 59, 0, 0, 0, 139, 0, 136, 0, 0], [0, 0, 0, 0, 0, 251, 251, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 143, 144, 145, 146, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 0, 0, 0, 0, 144, 144, 146, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 0, 0, 0, 0, 252, 252, 146, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 253, 252, 252, 146, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 254, 255, 256, 257, 258, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 147, 0, 0, 0, 0, 59, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 259, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 260, 241, 261, 262, 57, 58, 0, 59, 0, 0, 263, 245, 0, 0, 62, 0], [0, 0, 0, 0, 0, 246, 246, 0, 58, 0, 59, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 137, 264, 0, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 0, 0, 0, 265, 141, 141, 57, 58, 0, 0, 0, 0, 0, 265, 0, 0, 0, 0], [0, 249, 151, 0, 0, 137, 264, 0, 58, 0, 59, 0, 0, 0, 139, 0, 249, 0, 0], [0, 0, 0, 221, 116, 222, 222, 8, 9, 0, 10, 0, 0, 0, 120, 0, 0, 16, 0], [0, 0, 0, 0, 225, 44, 44, 8, 9, 0, 0, 0, 0, 158, 225, 0, 0, 0, 0], [0, 0, 0, 155, 116, 156, 222, 8, 9, 0, 10, 0, 0, 158, 120, 0, 0, 16, 0], [0, 0, 0, 155, 116, 222, 222, 8, 9, 0, 10, 0, 0, 0, 120, 0, 0, 16, 0], [0, 0, 0, 0, 43, 266, 266, 8, 161, 0, 24, 0, 0, 12, 267, 0, 0, 0, 0], [0, 75, 0, 176, 43, 268, 268, 269, 161, 0, 24, 0, 0, 0, 267, 0, 75, 0, 0], [0, 0, 0, 0, 0, 270, 0, 0, 271, 0, 162, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 272, 0, 0, 0, 0, 0, 0, 0, 0], [0, 273, 274, 0, 0, 40, 41, 0, 9, 0, 10, 0, 0, 0, 42, 0, 273, 0, 0], [0, 0, 0, 40, 0, 123, 123, 8, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 0, 0, 0, 0, 121, 275, 0, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 166, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 276, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 277, 170, 278, 278, 22, 23, 0, 24, 0, 0, 0, 174, 0, 0, 27, 0], [0, 279, 0, 0, 0, 76, 280, 0, 23, 0, 24, 0, 0, 0, 78, 0, 279, 0, 0], [0, 0, 0, 0, 281, 80, 80, 22, 23, 0, 0, 0, 0, 173, 281, 0, 0, 0, 0], [0, 0, 0, 169, 170, 171, 278, 22, 23, 0, 24, 0, 0, 173, 174, 0, 0, 27, 0], [0, 0, 0, 169, 170, 278, 278, 22, 23, 0, 24, 0, 0, 0, 174, 0, 0, 27, 0], [0, 282, 90, 0, 0, 76, 280, 0, 23, 0, 24, 0, 0, 0, 78, 0, 282, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 75, 0, 0, 0, 175, 175, 0, 23, 0, 24, 0, 0, 0, 78, 0, 75, 0, 0], [0, 0, 0, 0, 0, 80, 80, 22, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 283, 0, 284, 285, 0, 23, 0, 24, 0, 0, 286, 0, 0, 0, 0, 0], [0, 75, 0, 176, 0, 175, 175, 0, 23, 0, 24, 0, 0, 0, 78, 0, 75, 0, 0], [0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 287, 287, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 288, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 184, 185, 186, 187, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 0, 0, 0, 0, 185, 185, 187, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 0, 0, 0, 0, 289, 289, 187, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 290, 289, 289, 187, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 291, 292, 293, 294, 295, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 277, 170, 278, 278, 22, 23, 0, 24, 0, 0, 0, 174, 0, 0, 27, 0], [0, 0, 0, 0, 281, 80, 80, 22, 23, 0, 0, 0, 0, 192, 281, 0, 0, 0, 0], [0, 0, 0, 189, 170, 190, 278, 22, 23, 0, 24, 0, 0, 192, 174, 0, 0, 27, 0], [0, 0, 0, 189, 170, 278, 278, 22, 23, 0, 24, 0, 0, 0, 174, 0, 0, 27, 0], [0, 0, 0, 76, 0, 177, 177, 22, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 0, 0, 0, 0, 175, 296, 0, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 0, 0, 297, 196, 298, 298, 32, 33, 0, 34, 0, 0, 0, 200, 0, 0, 37, 0], [0, 299, 0, 0, 0, 97, 300, 0, 33, 0, 34, 0, 0, 0, 99, 0, 299, 0, 0], [0, 0, 0, 0, 301, 101, 101, 32, 33, 0, 0, 0, 0, 199, 301, 0, 0, 0, 0], [0, 0, 0, 195, 196, 197, 298, 32, 33, 0, 34, 0, 0, 199, 200, 0, 0, 37, 0], [0, 0, 0, 195, 196, 298, 298, 32, 33, 0, 34, 0, 0, 0, 200, 0, 0, 37, 0], [0, 302, 111, 0, 0, 97, 300, 0, 33, 0, 34, 0, 0, 0, 99, 0, 302, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 96, 0, 0, 0, 201, 201, 0, 33, 0, 34, 0, 0, 0, 99, 0, 96, 0, 0], [0, 0, 0, 0, 0, 101, 101, 32, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 303, 0, 304, 305, 0, 33, 0, 34, 0, 0, 306, 0, 0, 0, 0, 0], [0, 96, 0, 202, 0, 201, 201, 0, 33, 0, 34, 0, 0, 0, 99, 0, 96, 0, 0], [0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 307, 307, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 308, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 210, 211, 212, 213, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 0, 0, 0, 0, 211, 211, 213, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 0, 0, 0, 0, 309, 309, 213, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 310, 309, 309, 213, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 311, 312, 313, 314, 315, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 297, 196, 298, 298, 32, 33, 0, 34, 0, 0, 0, 200, 0, 0, 37, 0], [0, 0, 0, 0, 301, 101, 101, 32, 33, 0, 0, 0, 0, 218, 301, 0, 0, 0, 0], [0, 0, 0, 215, 196, 216, 298, 32, 33, 0, 34, 0, 0, 218, 200, 0, 0, 37, 0], [0, 0, 0, 215, 196, 298, 298, 32, 33, 0, 34, 0, 0, 0, 200, 0, 0, 37, 0], [0, 0, 0, 97, 0, 203, 203, 32, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 0, 0, 0, 0, 201, 316, 0, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 0, 0, 0, 116, 222, 222, 8, 9, 0, 10, 0, 0, 0, 120, 0, 0, 16, 0], [0, 0, 0, 0, 225, 44, 44, 8, 9, 0, 0, 0, 0, 0, 225, 0, 0, 0, 0], [0, 0, 0, 317, 318, 319, 320, 8, 9, 0, 10, 0, 0, 321, 322, 0, 0, 16, 0], [0, 223, 0, 323, 0, 123, 123, 8, 9, 0, 10, 0, 0, 0, 42, 0, 223, 0, 0], [0, 223, 0, 0, 0, 121, 324, 0, 9, 0, 10, 0, 0, 0, 42, 0, 223, 0, 0], [0, 0, 0, 325, 318, 326, 327, 8, 9, 0, 10, 0, 0, 328, 322, 0, 0, 16, 0], [0, 0, 0, 64, 0, 121, 121, 0, 9, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 230, 0, 0, 0, 0, 0], [0, 0, 0, 227, 0, 228, 121, 0, 9, 0, 10, 0, 0, 230, 0, 0, 0, 0, 0], [0, 0, 0, 227, 0, 121, 121, 0, 9, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0], [0, 0, 0, 0, 0, 329, 329, 133, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 330, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 236, 237, 238, 239, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 0, 0, 0, 0, 237, 237, 239, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 0, 0, 0, 0, 331, 331, 239, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 332, 331, 331, 239, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 333, 40, 121, 334, 0, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 0, 0, 335, 241, 336, 336, 57, 58, 0, 59, 0, 0, 0, 245, 0, 0, 62, 0], [0, 337, 0, 0, 0, 137, 338, 0, 58, 0, 59, 0, 0, 0, 139, 0, 337, 0, 0], [0, 0, 0, 0, 339, 141, 141, 57, 58, 0, 0, 0, 0, 244, 339, 0, 0, 0, 0], [0, 0, 0, 240, 241, 242, 336, 57, 58, 0, 59, 0, 0, 244, 245, 0, 0, 62, 0], [0, 0, 0, 240, 241, 336, 336, 57, 58, 0, 59, 0, 0, 0, 245, 0, 0, 62, 0], [0, 340, 151, 0, 0, 137, 338, 0, 58, 0, 59, 0, 0, 0, 139, 0, 340, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 136, 0, 0, 0, 246, 246, 0, 58, 0, 59, 0, 0, 0, 139, 0, 136, 0, 0], [0, 0, 0, 0, 0, 141, 141, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 341, 0, 342, 343, 0, 58, 0, 59, 0, 0, 344, 0, 0, 0, 0, 0], [0, 136, 0, 247, 0, 246, 246, 0, 58, 0, 59, 0, 0, 0, 139, 0, 136, 0, 0], [0, 0, 0, 0, 0, 0, 0, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 345, 345, 146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 346, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 255, 256, 257, 258, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 0, 0, 0, 0, 256, 256, 258, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 0, 0, 0, 0, 347, 347, 258, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 348, 347, 347, 258, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 349, 350, 351, 352, 353, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 335, 241, 336, 336, 57, 58, 0, 59, 0, 0, 0, 245, 0, 0, 62, 0], [0, 0, 0, 0, 339, 141, 141, 57, 58, 0, 0, 0, 0, 263, 339, 0, 0, 0, 0], [0, 0, 0, 260, 241, 261, 336, 57, 58, 0, 59, 0, 0, 263, 245, 0, 0, 62, 0], [0, 0, 0, 260, 241, 336, 336, 57, 58, 0, 59, 0, 0, 0, 245, 0, 0, 62, 0], [0, 0, 0, 137, 0, 248, 248, 57, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 0, 0, 0, 0, 246, 354, 0, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 0, 0, 0, 0, 126, 126, 8, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 355, 90, 0, 0, 121, 125, 0, 9, 0, 10, 0, 0, 0, 42, 0, 355, 0, 0], [0, 0, 0, 0, 0, 356, 356, 269, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 357, 358, 359, 360, 361, 161, 0, 162, 0, 0, 0, 362, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 270, 0, 0, 0, 0, 162, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 363, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 364, 116, 365, 366, 8, 161, 0, 162, 0, 0, 367, 120, 0, 0, 16, 0], [0, 0, 0, 0, 0, 368, 368, 0, 161, 0, 162, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 40, 0, 121, 121, 0, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 170, 278, 278, 22, 23, 0, 24, 0, 0, 0, 174, 0, 0, 27, 0], [0, 0, 0, 0, 281, 80, 80, 22, 23, 0, 0, 0, 0, 0, 281, 0, 0, 0, 0], [0, 0, 0, 369, 370, 371, 372, 22, 23, 0, 24, 0, 0, 373, 374, 0, 0, 27, 0], [0, 279, 0, 375, 0, 177, 177, 22, 23, 0, 24, 0, 0, 0, 78, 0, 279, 0, 0], [0, 279, 0, 0, 0, 175, 376, 0, 23, 0, 24, 0, 0, 0, 78, 0, 279, 0, 0], [0, 0, 0, 377, 370, 378, 379, 22, 23, 0, 24, 0, 0, 380, 374, 0, 0, 27, 0], [0, 0, 0, 90, 0, 175, 175, 0, 23, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 286, 0, 0, 0, 0, 0], [0, 0, 0, 283, 0, 284, 175, 0, 23, 0, 24, 0, 0, 286, 0, 0, 0, 0, 0], [0, 0, 0, 283, 0, 175, 175, 0, 23, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 82, 0, 0], [0, 0, 0, 0, 0, 381, 381, 187, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 382, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 292, 293, 294, 295, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 0, 0, 0, 0, 293, 293, 295, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 0, 0, 0, 0, 383, 383, 295, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 384, 383, 383, 295, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 385, 76, 175, 386, 0, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 0, 0, 76, 0, 175, 175, 0, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 0, 0, 0, 196, 298, 298, 32, 33, 0, 34, 0, 0, 0, 200, 0, 0, 37, 0], [0, 0, 0, 0, 301, 101, 101, 32, 33, 0, 0, 0, 0, 0, 301, 0, 0, 0, 0], [0, 0, 0, 387, 388, 389, 390, 32, 33, 0, 34, 0, 0, 391, 392, 0, 0, 37, 0], [0, 299, 0, 393, 0, 203, 203, 32, 33, 0, 34, 0, 0, 0, 99, 0, 299, 0, 0], [0, 299, 0, 0, 0, 201, 394, 0, 33, 0, 34, 0, 0, 0, 99, 0, 299, 0, 0], [0, 0, 0, 395, 388, 396, 397, 32, 33, 0, 34, 0, 0, 398, 392, 0, 0, 37, 0], [0, 0, 0, 111, 0, 201, 201, 0, 33, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 0, 0, 306, 0, 0, 0, 0, 0], [0, 0, 0, 303, 0, 304, 201, 0, 33, 0, 34, 0, 0, 306, 0, 0, 0, 0, 0], [0, 0, 0, 303, 0, 201, 201, 0, 33, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 103, 0, 0], [0, 0, 0, 0, 0, 399, 399, 213, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 312, 313, 314, 315, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 0, 0, 0, 0, 313, 313, 315, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 0, 0, 0, 0, 401, 401, 315, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 402, 401, 401, 315, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 403, 97, 201, 404, 0, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 0, 0, 97, 0, 201, 201, 0, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 0, 0, 405, 318, 406, 406, 8, 9, 0, 10, 0, 0, 0, 322, 0, 0, 16, 0], [0, 407, 0, 0, 0, 40, 408, 0, 9, 0, 10, 0, 0, 0, 42, 0, 407, 0, 0], [0, 0, 0, 0, 409, 44, 44, 8, 9, 0, 0, 0, 0, 321, 409, 0, 0, 0, 0], [0, 0, 0, 317, 318, 319, 406, 8, 9, 0, 10, 0, 0, 321, 322, 0, 0, 16, 0], [0, 0, 0, 317, 318, 406, 406, 8, 9, 0, 10, 0, 0, 0, 322, 0, 0, 16, 0], [0, 410, 64, 0, 0, 40, 408, 0, 9, 0, 10, 0, 0, 0, 42, 0, 410, 0, 0], [0, 223, 0, 0, 0, 121, 121, 0, 9, 0, 10, 0, 0, 0, 42, 0, 223, 0, 0], [0, 223, 0, 323, 0, 121, 121, 0, 9, 0, 10, 0, 0, 0, 42, 0, 223, 0, 0], [0, 0, 0, 405, 318, 406, 406, 8, 9, 0, 10, 0, 0, 0, 322, 0, 0, 16, 0], [0, 0, 0, 0, 409, 44, 44, 8, 9, 0, 0, 0, 0, 328, 409, 0, 0, 0, 0], [0, 0, 0, 325, 318, 326, 406, 8, 9, 0, 10, 0, 0, 328, 322, 0, 0, 16, 0], [0, 0, 0, 325, 318, 406, 406, 8, 9, 0, 10, 0, 0, 0, 322, 0, 0, 16, 0], [0, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 130, 0, 0], [0, 0, 0, 0, 0, 411, 411, 239, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 412, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 40, 121, 334, 0, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 0, 0, 0, 413, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 241, 336, 336, 57, 58, 0, 59, 0, 0, 0, 245, 0, 0, 62, 0], [0, 0, 0, 0, 339, 141, 141, 57, 58, 0, 0, 0, 0, 0, 339, 0, 0, 0, 0], [0, 0, 0, 414, 415, 416, 417, 57, 58, 0, 59, 0, 0, 418, 419, 0, 0, 62, 0], [0, 337, 0, 420, 0, 248, 248, 57, 58, 0, 59, 0, 0, 0, 139, 0, 337, 0, 0], [0, 337, 0, 0, 0, 246, 421, 0, 58, 0, 59, 0, 0, 0, 139, 0, 337, 0, 0], [0, 0, 0, 422, 415, 423, 424, 57, 58, 0, 59, 0, 0, 425, 419, 0, 0, 62, 0], [0, 0, 0, 151, 0, 246, 246, 0, 58, 0, 59, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 58, 0, 0, 0, 0, 344, 0, 0, 0, 0, 0], [0, 0, 0, 341, 0, 342, 246, 0, 58, 0, 59, 0, 0, 344, 0, 0, 0, 0, 0], [0, 0, 0, 341, 0, 246, 246, 0, 58, 0, 59, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 143, 0, 0], [0, 0, 0, 0, 0, 426, 426, 258, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 427, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 350, 351, 352, 353, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 0, 0, 0, 0, 351, 351, 353, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 0, 0, 0, 0, 428, 428, 353, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 429, 428, 428, 353, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 430, 137, 246, 431, 0, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 0, 0, 137, 0, 246, 246, 0, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 0, 0, 432, 116, 433, 434, 8, 161, 0, 162, 0, 0, 435, 120, 0, 0, 16, 0], [0, 0, 0, 0, 0, 180, 180, 269, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 358, 359, 360, 361, 161, 0, 162, 0, 0, 0, 362, 0, 0, 0, 0], [0, 0, 0, 0, 0, 359, 359, 361, 161, 0, 162, 0, 0, 0, 362, 0, 0, 0, 0], [0, 0, 0, 0, 0, 436, 436, 361, 161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 437, 436, 436, 361, 161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 438, 439, 440, 441, 442, 161, 0, 162, 0, 0, 0, 362, 0, 0, 0, 0], [0, 443, 274, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 443, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 444, 116, 445, 445, 8, 161, 0, 162, 0, 0, 0, 120, 0, 0, 16, 0], [0, 0, 0, 0, 225, 44, 44, 8, 161, 0, 0, 0, 0, 367, 225, 0, 0, 0, 0], [0, 0, 0, 364, 116, 365, 445, 8, 161, 0, 162, 0, 0, 367, 120, 0, 0, 16, 0], [0, 0, 0, 364, 116, 445, 445, 8, 161, 0, 162, 0, 0, 0, 120, 0, 0, 16, 0], [0, 0, 0, 0, 0, 0, 0, 0, 161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 446, 370, 447, 447, 22, 23, 0, 24, 0, 0, 0, 374, 0, 0, 27, 0], [0, 448, 0, 0, 0, 76, 449, 0, 23, 0, 24, 0, 0, 0, 78, 0, 448, 0, 0], [0, 0, 0, 0, 450, 80, 80, 22, 23, 0, 0, 0, 0, 373, 450, 0, 0, 0, 0], [0, 0, 0, 369, 370, 371, 447, 22, 23, 0, 24, 0, 0, 373, 374, 0, 0, 27, 0], [0, 0, 0, 369, 370, 447, 447, 22, 23, 0, 24, 0, 0, 0, 374, 0, 0, 27, 0], [0, 451, 90, 0, 0, 76, 449, 0, 23, 0, 24, 0, 0, 0, 78, 0, 451, 0, 0], [0, 279, 0, 0, 0, 175, 175, 0, 23, 0, 24, 0, 0, 0, 78, 0, 279, 0, 0], [0, 279, 0, 375, 0, 175, 175, 0, 23, 0, 24, 0, 0, 0, 78, 0, 279, 0, 0], [0, 0, 0, 446, 370, 447, 447, 22, 23, 0, 24, 0, 0, 0, 374, 0, 0, 27, 0], [0, 0, 0, 0, 450, 80, 80, 22, 23, 0, 0, 0, 0, 380, 450, 0, 0, 0, 0], [0, 0, 0, 377, 370, 378, 447, 22, 23, 0, 24, 0, 0, 380, 374, 0, 0, 27, 0], [0, 0, 0, 377, 370, 447, 447, 22, 23, 0, 24, 0, 0, 0, 374, 0, 0, 27, 0], [0, 0, 0, 0, 0, 0, 0, 187, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 184, 0, 0], [0, 0, 0, 0, 0, 452, 452, 295, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 453, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 76, 175, 386, 0, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 0, 0, 0, 454, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 455, 388, 456, 456, 32, 33, 0, 34, 0, 0, 0, 392, 0, 0, 37, 0], [0, 457, 0, 0, 0, 97, 458, 0, 33, 0, 34, 0, 0, 0, 99, 0, 457, 0, 0], [0, 0, 0, 0, 459, 101, 101, 32, 33, 0, 0, 0, 0, 391, 459, 0, 0, 0, 0], [0, 0, 0, 387, 388, 389, 456, 32, 33, 0, 34, 0, 0, 391, 392, 0, 0, 37, 0], [0, 0, 0, 387, 388, 456, 456, 32, 33, 0, 34, 0, 0, 0, 392, 0, 0, 37, 0], [0, 460, 111, 0, 0, 97, 458, 0, 33, 0, 34, 0, 0, 0, 99, 0, 460, 0, 0], [0, 299, 0, 0, 0, 201, 201, 0, 33, 0, 34, 0, 0, 0, 99, 0, 299, 0, 0], [0, 299, 0, 393, 0, 201, 201, 0, 33, 0, 34, 0, 0, 0, 99, 0, 299, 0, 0], [0, 0, 0, 455, 388, 456, 456, 32, 33, 0, 34, 0, 0, 0, 392, 0, 0, 37, 0], [0, 0, 0, 0, 459, 101, 101, 32, 33, 0, 0, 0, 0, 398, 459, 0, 0, 0, 0], [0, 0, 0, 395, 388, 396, 456, 32, 33, 0, 34, 0, 0, 398, 392, 0, 0, 37, 0], [0, 0, 0, 395, 388, 456, 456, 32, 33, 0, 34, 0, 0, 0, 392, 0, 0, 37, 0], [0, 0, 0, 0, 0, 0, 0, 213, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 210, 0, 0], [0, 0, 0, 0, 0, 461, 461, 315, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 462, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 97, 201, 404, 0, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 0, 0, 0, 463, 0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 318, 406, 406, 8, 9, 0, 10, 0, 0, 0, 322, 0, 0, 16, 0], [0, 0, 0, 0, 409, 44, 44, 8, 9, 0, 0, 0, 0, 0, 409, 0, 0, 0, 0], [0, 0, 0, 464, 465, 466, 467, 8, 9, 0, 10, 0, 0, 468, 469, 0, 0, 16, 0], [0, 407, 0, 470, 0, 123, 123, 8, 9, 0, 10, 0, 0, 0, 42, 0, 407, 0, 0], [0, 407, 0, 0, 0, 121, 471, 0, 9, 0, 10, 0, 0, 0, 42, 0, 407, 0, 0], [0, 0, 0, 472, 465, 473, 474, 8, 9, 0, 10, 0, 0, 475, 469, 0, 0, 16, 0], [0, 0, 0, 0, 0, 0, 0, 239, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 236, 0, 0], [0, 0, 0, 0, 0, 0, 476, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 477, 415, 478, 478, 57, 58, 0, 59, 0, 0, 0, 419, 0, 0, 62, 0], [0, 479, 0, 0, 0, 137, 480, 0, 58, 0, 59, 0, 0, 0, 139, 0, 479, 0, 0], [0, 0, 0, 0, 481, 141, 141, 57, 58, 0, 0, 0, 0, 418, 481, 0, 0, 0, 0], [0, 0, 0, 414, 415, 416, 478, 57, 58, 0, 59, 0, 0, 418, 419, 0, 0, 62, 0], [0, 0, 0, 414, 415, 478, 478, 57, 58, 0, 59, 0, 0, 0, 419, 0, 0, 62, 0], [0, 482, 151, 0, 0, 137, 480, 0, 58, 0, 59, 0, 0, 0, 139, 0, 482, 0, 0], [0, 337, 0, 0, 0, 246, 246, 0, 58, 0, 59, 0, 0, 0, 139, 0, 337, 0, 0], [0, 337, 0, 420, 0, 246, 246, 0, 58, 0, 59, 0, 0, 0, 139, 0, 337, 0, 0], [0, 0, 0, 477, 415, 478, 478, 57, 58, 0, 59, 0, 0, 0, 419, 0, 0, 62, 0], [0, 0, 0, 0, 481, 141, 141, 57, 58, 0, 0, 0, 0, 425, 481, 0, 0, 0, 0], [0, 0, 0, 422, 415, 423, 478, 57, 58, 0, 59, 0, 0, 425, 419, 0, 0, 62, 0], [0, 0, 0, 422, 415, 478, 478, 57, 58, 0, 59, 0, 0, 0, 419, 0, 0, 62, 0], [0, 0, 0, 0, 0, 0, 0, 258, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0], [0, 0, 0, 0, 0, 483, 483, 353, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 484, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 137, 246, 431, 0, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 0, 0, 0, 485, 0, 0, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 444, 116, 445, 445, 8, 161, 0, 162, 0, 0, 0, 120, 0, 0, 16, 0], [0, 0, 0, 0, 225, 44, 44, 8, 161, 0, 0, 0, 0, 435, 225, 0, 0, 0, 0], [0, 0, 0, 432, 116, 433, 445, 8, 161, 0, 162, 0, 0, 435, 120, 0, 0, 16, 0], [0, 0, 0, 432, 116, 445, 445, 8, 161, 0, 162, 0, 0, 0, 120, 0, 0, 16, 0], [0, 0, 0, 0, 0, 486, 486, 361, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 487, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 439, 440, 441, 442, 161, 0, 162, 0, 0, 0, 362, 0, 0, 0, 0], [0, 0, 0, 0, 0, 440, 440, 442, 161, 0, 162, 0, 0, 0, 362, 0, 0, 0, 0], [0, 0, 0, 0, 0, 488, 488, 442, 161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 489, 488, 488, 442, 161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 490, 491, 492, 493, 494, 161, 0, 162, 0, 0, 0, 362, 0, 0, 0, 0], [0, 0, 0, 495, 0, 496, 497, 0, 161, 0, 162, 0, 0, 498, 0, 0, 0, 0, 0], [0, 0, 0, 0, 116, 445, 445, 8, 161, 0, 162, 0, 0, 0, 120, 0, 0, 16, 0], [0, 0, 0, 0, 225, 44, 44, 8, 161, 0, 0, 0, 0, 0, 225, 0, 0, 0, 0], [0, 0, 0, 0, 370, 447, 447, 22, 23, 0, 24, 0, 0, 0, 374, 0, 0, 27, 0], [0, 0, 0, 0, 450, 80, 80, 22, 23, 0, 0, 0, 0, 0, 450, 0, 0, 0, 0], [0, 0, 0, 499, 500, 501, 502, 22, 23, 0, 24, 0, 0, 503, 504, 0, 0, 27, 0], [0, 448, 0, 505, 0, 177, 177, 22, 23, 0, 24, 0, 0, 0, 78, 0, 448, 0, 0], [0, 448, 0, 0, 0, 175, 506, 0, 23, 0, 24, 0, 0, 0, 78, 0, 448, 0, 0], [0, 0, 0, 507, 500, 508, 509, 22, 23, 0, 24, 0, 0, 510, 504, 0, 0, 27, 0], [0, 0, 0, 0, 0, 0, 0, 295, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 292, 0, 0], [0, 0, 0, 0, 0, 0, 511, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 388, 456, 456, 32, 33, 0, 34, 0, 0, 0, 392, 0, 0, 37, 0], [0, 0, 0, 0, 459, 101, 101, 32, 33, 0, 0, 0, 0, 0, 459, 0, 0, 0, 0], [0, 0, 0, 512, 513, 514, 515, 32, 33, 0, 34, 0, 0, 516, 517, 0, 0, 37, 0], [0, 457, 0, 518, 0, 203, 203, 32, 33, 0, 34, 0, 0, 0, 99, 0, 457, 0, 0], [0, 457, 0, 0, 0, 201, 519, 0, 33, 0, 34, 0, 0, 0, 99, 0, 457, 0, 0], [0, 0, 0, 520, 513, 521, 522, 32, 33, 0, 34, 0, 0, 523, 517, 0, 0, 37, 0], [0, 0, 0, 0, 0, 0, 0, 315, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 312, 0, 0], [0, 0, 0, 0, 0, 0, 524, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 525, 465, 526, 526, 8, 9, 0, 10, 0, 0, 0, 469, 0, 0, 16, 0], [0, 527, 0, 0, 0, 40, 528, 0, 9, 0, 10, 0, 0, 0, 42, 0, 527, 0, 0], [0, 0, 0, 0, 529, 44, 44, 8, 9, 0, 0, 0, 0, 468, 529, 0, 0, 0, 0], [0, 0, 0, 464, 465, 466, 526, 8, 9, 0, 10, 0, 0, 468, 469, 0, 0, 16, 0], [0, 0, 0, 464, 465, 526, 526, 8, 9, 0, 10, 0, 0, 0, 469, 0, 0, 16, 0], [0, 530, 64, 0, 0, 40, 528, 0, 9, 0, 10, 0, 0, 0, 42, 0, 530, 0, 0], [0, 407, 0, 0, 0, 121, 121, 0, 9, 0, 10, 0, 0, 0, 42, 0, 407, 0, 0], [0, 407, 0, 470, 0, 121, 121, 0, 9, 0, 10, 0, 0, 0, 42, 0, 407, 0, 0], [0, 0, 0, 525, 465, 526, 526, 8, 9, 0, 10, 0, 0, 0, 469, 0, 0, 16, 0], [0, 0, 0, 0, 529, 44, 44, 8, 9, 0, 0, 0, 0, 475, 529, 0, 0, 0, 0], [0, 0, 0, 472, 465, 473, 526, 8, 9, 0, 10, 0, 0, 475, 469, 0, 0, 16, 0], [0, 0, 0, 472, 465, 526, 526, 8, 9, 0, 10, 0, 0, 0, 469, 0, 0, 16, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 0, 0], [0, 0, 0, 0, 415, 478, 478, 57, 58, 0, 59, 0, 0, 0, 419, 0, 0, 62, 0], [0, 0, 0, 0, 481, 141, 141, 57, 58, 0, 0, 0, 0, 0, 481, 0, 0, 0, 0], [0, 0, 0, 531, 532, 533, 534, 57, 58, 0, 59, 0, 0, 535, 536, 0, 0, 62, 0], [0, 479, 0, 537, 0, 248, 248, 57, 58, 0, 59, 0, 0, 0, 139, 0, 479, 0, 0], [0, 479, 0, 0, 0, 246, 538, 0, 58, 0, 59, 0, 0, 0, 139, 0, 479, 0, 0], [0, 0, 0, 539, 532, 540, 541, 57, 58, 0, 59, 0, 0, 542, 536, 0, 0, 62, 0], [0, 0, 0, 0, 0, 0, 0, 353, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 350, 0, 0], [0, 0, 0, 0, 0, 0, 543, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 361, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 358, 0, 0], [0, 0, 0, 0, 0, 544, 544, 442, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 545, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 491, 492, 493, 494, 161, 0, 162, 0, 0, 0, 362, 0, 0, 0, 0], [0, 0, 0, 0, 0, 492, 492, 494, 161, 0, 162, 0, 0, 0, 362, 0, 0, 0, 0], [0, 0, 0, 0, 0, 546, 546, 494, 161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 547, 546, 546, 494, 161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 548, 549, 368, 550, 0, 161, 0, 162, 0, 0, 0, 362, 0, 0, 0, 0], [0, 0, 0, 274, 0, 368, 368, 0, 161, 0, 162, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 161, 0, 0, 0, 0, 498, 0, 0, 0, 0, 0], [0, 0, 0, 495, 0, 496, 368, 0, 161, 0, 162, 0, 0, 498, 0, 0, 0, 0, 0], [0, 0, 0, 495, 0, 368, 368, 0, 161, 0, 162, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 551, 500, 552, 552, 22, 23, 0, 24, 0, 0, 0, 504, 0, 0, 27, 0], [0, 553, 0, 0, 0, 76, 554, 0, 23, 0, 24, 0, 0, 0, 78, 0, 553, 0, 0], [0, 0, 0, 0, 555, 80, 80, 22, 23, 0, 0, 0, 0, 503, 555, 0, 0, 0, 0], [0, 0, 0, 499, 500, 501, 552, 22, 23, 0, 24, 0, 0, 503, 504, 0, 0, 27, 0], [0, 0, 0, 499, 500, 552, 552, 22, 23, 0, 24, 0, 0, 0, 504, 0, 0, 27, 0], [0, 556, 90, 0, 0, 76, 554, 0, 23, 0, 24, 0, 0, 0, 78, 0, 556, 0, 0], [0, 448, 0, 0, 0, 175, 175, 0, 23, 0, 24, 0, 0, 0, 78, 0, 448, 0, 0], [0, 448, 0, 505, 0, 175, 175, 0, 23, 0, 24, 0, 0, 0, 78, 0, 448, 0, 0], [0, 0, 0, 551, 500, 552, 552, 22, 23, 0, 24, 0, 0, 0, 504, 0, 0, 27, 0], [0, 0, 0, 0, 555, 80, 80, 22, 23, 0, 0, 0, 0, 510, 555, 0, 0, 0, 0], [0, 0, 0, 507, 500, 508, 552, 22, 23, 0, 24, 0, 0, 510, 504, 0, 0, 27, 0], [0, 0, 0, 507, 500, 552, 552, 22, 23, 0, 24, 0, 0, 0, 504, 0, 0, 27, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0], [0, 0, 0, 557, 513, 558, 558, 32, 33, 0, 34, 0, 0, 0, 517, 0, 0, 37, 0], [0, 559, 0, 0, 0, 97, 560, 0, 33, 0, 34, 0, 0, 0, 99, 0, 559, 0, 0], [0, 0, 0, 0, 561, 101, 101, 32, 33, 0, 0, 0, 0, 516, 561, 0, 0, 0, 0], [0, 0, 0, 512, 513, 514, 558, 32, 33, 0, 34, 0, 0, 516, 517, 0, 0, 37, 0], [0, 0, 0, 512, 513, 558, 558, 32, 33, 0, 34, 0, 0, 0, 517, 0, 0, 37, 0], [0, 562, 111, 0, 0, 97, 560, 0, 33, 0, 34, 0, 0, 0, 99, 0, 562, 0, 0], [0, 457, 0, 0, 0, 201, 201, 0, 33, 0, 34, 0, 0, 0, 99, 0, 457, 0, 0], [0, 457, 0, 518, 0, 201, 201, 0, 33, 0, 34, 0, 0, 0, 99, 0, 457, 0, 0], [0, 0, 0, 557, 513, 558, 558, 32, 33, 0, 34, 0, 0, 0, 517, 0, 0, 37, 0], [0, 0, 0, 0, 561, 101, 101, 32, 33, 0, 0, 0, 0, 523, 561, 0, 0, 0, 0], [0, 0, 0, 520, 513, 521, 558, 32, 33, 0, 34, 0, 0, 523, 517, 0, 0, 37, 0], [0, 0, 0, 520, 513, 558, 558, 32, 33, 0, 34, 0, 0, 0, 517, 0, 0, 37, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 97, 0, 0], [0, 0, 0, 0, 465, 526, 526, 8, 9, 0, 10, 0, 0, 0, 469, 0, 0, 16, 0], [0, 0, 0, 0, 529, 44, 44, 8, 9, 0, 0, 0, 0, 0, 529, 0, 0, 0, 0], [0, 0, 0, 563, 66, 564, 565, 8, 9, 0, 10, 0, 0, 566, 68, 0, 0, 16, 0], [0, 527, 0, 567, 0, 123, 123, 8, 9, 0, 10, 0, 0, 0, 42, 0, 527, 0, 0], [0, 527, 0, 0, 0, 121, 568, 0, 9, 0, 10, 0, 0, 0, 42, 0, 527, 0, 0], [0, 0, 0, 569, 66, 570, 571, 8, 9, 0, 10, 0, 0, 572, 68, 0, 0, 16, 0], [0, 0, 0, 573, 532, 574, 574, 57, 58, 0, 59, 0, 0, 0, 536, 0, 0, 62, 0], [0, 575, 0, 0, 0, 137, 576, 0, 58, 0, 59, 0, 0, 0, 139, 0, 575, 0, 0], [0, 0, 0, 0, 577, 141, 141, 57, 58, 0, 0, 0, 0, 535, 577, 0, 0, 0, 0], [0, 0, 0, 531, 532, 533, 574, 57, 58, 0, 59, 0, 0, 535, 536, 0, 0, 62, 0], [0, 0, 0, 531, 532, 574, 574, 57, 58, 0, 59, 0, 0, 0, 536, 0, 0, 62, 0], [0, 578, 151, 0, 0, 137, 576, 0, 58, 0, 59, 0, 0, 0, 139, 0, 578, 0, 0], [0, 479, 0, 0, 0, 246, 246, 0, 58, 0, 59, 0, 0, 0, 139, 0, 479, 0, 0], [0, 479, 0, 537, 0, 246, 246, 0, 58, 0, 59, 0, 0, 0, 139, 0, 479, 0, 0], [0, 0, 0, 573, 532, 574, 574, 57, 58, 0, 59, 0, 0, 0, 536, 0, 0, 62, 0], [0, 0, 0, 0, 577, 141, 141, 57, 58, 0, 0, 0, 0, 542, 577, 0, 0, 0, 0], [0, 0, 0, 539, 532, 540, 574, 57, 58, 0, 59, 0, 0, 542, 536, 0, 0, 62, 0], [0, 0, 0, 539, 532, 574, 574, 57, 58, 0, 59, 0, 0, 0, 536, 0, 0, 62, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 137, 0, 0], [0, 0, 0, 0, 0, 0, 0, 442, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 439, 0, 0], [0, 0, 0, 0, 0, 579, 579, 494, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 580, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 549, 368, 550, 0, 161, 0, 162, 0, 0, 0, 362, 0, 0, 0, 0], [0, 0, 0, 0, 0, 368, 368, 0, 161, 0, 162, 0, 0, 0, 362, 0, 0, 0, 0], [0, 0, 0, 0, 581, 0, 0, 0, 161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 500, 552, 552, 22, 23, 0, 24, 0, 0, 0, 504, 0, 0, 27, 0], [0, 0, 0, 0, 555, 80, 80, 22, 23, 0, 0, 0, 0, 0, 555, 0, 0, 0, 0], [0, 0, 0, 582, 91, 583, 584, 22, 23, 0, 24, 0, 0, 585, 93, 0, 0, 27, 0], [0, 553, 0, 586, 0, 177, 177, 22, 23, 0, 24, 0, 0, 0, 78, 0, 553, 0, 0], [0, 553, 0, 0, 0, 175, 587, 0, 23, 0, 24, 0, 0, 0, 78, 0, 553, 0, 0], [0, 0, 0, 588, 91, 589, 590, 22, 23, 0, 24, 0, 0, 591, 93, 0, 0, 27, 0], [0, 0, 0, 0, 513, 558, 558, 32, 33, 0, 34, 0, 0, 0, 517, 0, 0, 37, 0], [0, 0, 0, 0, 561, 101, 101, 32, 33, 0, 0, 0, 0, 0, 561, 0, 0, 0, 0], [0, 0, 0, 592, 112, 593, 594, 32, 33, 0, 34, 0, 0, 595, 114, 0, 0, 37, 0], [0, 559, 0, 596, 0, 203, 203, 32, 33, 0, 34, 0, 0, 0, 99, 0, 559, 0, 0], [0, 559, 0, 0, 0, 201, 597, 0, 33, 0, 34, 0, 0, 0, 99, 0, 559, 0, 0], [0, 0, 0, 598, 112, 599, 600, 32, 33, 0, 34, 0, 0, 601, 114, 0, 0, 37, 0], [0, 0, 0, 602, 66, 67, 67, 8, 9, 0, 10, 0, 0, 0, 68, 0, 0, 16, 0], [0, 0, 0, 0, 165, 44, 44, 8, 9, 0, 0, 0, 0, 566, 165, 0, 0, 0, 0], [0, 0, 0, 563, 66, 564, 67, 8, 9, 0, 10, 0, 0, 566, 68, 0, 0, 16, 0], [0, 0, 0, 563, 66, 67, 67, 8, 9, 0, 10, 0, 0, 0, 68, 0, 0, 16, 0], [0, 527, 0, 0, 0, 121, 121, 0, 9, 0, 10, 0, 0, 0, 42, 0, 527, 0, 0], [0, 527, 0, 567, 0, 121, 121, 0, 9, 0, 10, 0, 0, 0, 42, 0, 527, 0, 0], [0, 0, 0, 602, 66, 67, 67, 8, 9, 0, 10, 0, 0, 0, 68, 0, 0, 16, 0], [0, 0, 0, 0, 165, 44, 44, 8, 9, 0, 0, 0, 0, 572, 165, 0, 0, 0, 0], [0, 0, 0, 569, 66, 570, 67, 8, 9, 0, 10, 0, 0, 572, 68, 0, 0, 16, 0], [0, 0, 0, 569, 66, 67, 67, 8, 9, 0, 10, 0, 0, 0, 68, 0, 0, 16, 0], [0, 0, 0, 0, 532, 574, 574, 57, 58, 0, 59, 0, 0, 0, 536, 0, 0, 62, 0], [0, 0, 0, 0, 577, 141, 141, 57, 58, 0, 0, 0, 0, 0, 577, 0, 0, 0, 0], [0, 0, 0, 603, 152, 604, 605, 57, 58, 0, 59, 0, 0, 606, 154, 0, 0, 62, 0], [0, 575, 0, 607, 0, 248, 248, 57, 58, 0, 59, 0, 0, 0, 139, 0, 575, 0, 0], [0, 575, 0, 0, 0, 246, 608, 0, 58, 0, 59, 0, 0, 0, 139, 0, 575, 0, 0], [0, 0, 0, 609, 152, 610, 611, 57, 58, 0, 59, 0, 0, 612, 154, 0, 0, 62, 0], [0, 0, 0, 0, 0, 0, 0, 494, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 491, 0, 0], [0, 0, 0, 0, 0, 0, 613, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 614, 91, 92, 92, 22, 23, 0, 24, 0, 0, 0, 93, 0, 0, 27, 0], [0, 0, 0, 0, 194, 80, 80, 22, 23, 0, 0, 0, 0, 585, 194, 0, 0, 0, 0], [0, 0, 0, 582, 91, 583, 92, 22, 23, 0, 24, 0, 0, 585, 93, 0, 0, 27, 0], [0, 0, 0, 582, 91, 92, 92, 22, 23, 0, 24, 0, 0, 0, 93, 0, 0, 27, 0], [0, 553, 0, 0, 0, 175, 175, 0, 23, 0, 24, 0, 0, 0, 78, 0, 553, 0, 0], [0, 553, 0, 586, 0, 175, 175, 0, 23, 0, 24, 0, 0, 0, 78, 0, 553, 0, 0], [0, 0, 0, 614, 91, 92, 92, 22, 23, 0, 24, 0, 0, 0, 93, 0, 0, 27, 0], [0, 0, 0, 0, 194, 80, 80, 22, 23, 0, 0, 0, 0, 591, 194, 0, 0, 0, 0], [0, 0, 0, 588, 91, 589, 92, 22, 23, 0, 24, 0, 0, 591, 93, 0, 0, 27, 0], [0, 0, 0, 588, 91, 92, 92, 22, 23, 0, 24, 0, 0, 0, 93, 0, 0, 27, 0], [0, 0, 0, 615, 112, 113, 113, 32, 33, 0, 34, 0, 0, 0, 114, 0, 0, 37, 0], [0, 0, 0, 0, 220, 101, 101, 32, 33, 0, 0, 0, 0, 595, 220, 0, 0, 0, 0], [0, 0, 0, 592, 112, 593, 113, 32, 33, 0, 34, 0, 0, 595, 114, 0, 0, 37, 0], [0, 0, 0, 592, 112, 113, 113, 32, 33, 0, 34, 0, 0, 0, 114, 0, 0, 37, 0], [0, 559, 0, 0, 0, 201, 201, 0, 33, 0, 34, 0, 0, 0, 99, 0, 559, 0, 0], [0, 559, 0, 596, 0, 201, 201, 0, 33, 0, 34, 0, 0, 0, 99, 0, 559, 0, 0], [0, 0, 0, 615, 112, 113, 113, 32, 33, 0, 34, 0, 0, 0, 114, 0, 0, 37, 0], [0, 0, 0, 0, 220, 101, 101, 32, 33, 0, 0, 0, 0, 601, 220, 0, 0, 0, 0], [0, 0, 0, 598, 112, 599, 113, 32, 33, 0, 34, 0, 0, 601, 114, 0, 0, 37, 0], [0, 0, 0, 598, 112, 113, 113, 32, 33, 0, 34, 0, 0, 0, 114, 0, 0, 37, 0], [0, 0, 0, 0, 66, 67, 67, 8, 9, 0, 10, 0, 0, 0, 68, 0, 0, 16, 0], [0, 0, 0, 616, 152, 153, 153, 57, 58, 0, 59, 0, 0, 0, 154, 0, 0, 62, 0], [0, 0, 0, 0, 265, 141, 141, 57, 58, 0, 0, 0, 0, 606, 265, 0, 0, 0, 0], [0, 0, 0, 603, 152, 604, 153, 57, 58, 0, 59, 0, 0, 606, 154, 0, 0, 62, 0], [0, 0, 0, 603, 152, 153, 153, 57, 58, 0, 59, 0, 0, 0, 154, 0, 0, 62, 0], [0, 575, 0, 0, 0, 246, 246, 0, 58, 0, 59, 0, 0, 0, 139, 0, 575, 0, 0], [0, 575, 0, 607, 0, 246, 246, 0, 58, 0, 59, 0, 0, 0, 139, 0, 575, 0, 0], [0, 0, 0, 616, 152, 153, 153, 57, 58, 0, 59, 0, 0, 0, 154, 0, 0, 62, 0], [0, 0, 0, 0, 265, 141, 141, 57, 58, 0, 0, 0, 0, 612, 265, 0, 0, 0, 0], [0, 0, 0, 609, 152, 610, 153, 57, 58, 0, 59, 0, 0, 612, 154, 0, 0, 62, 0], [0, 0, 0, 609, 152, 153, 153, 57, 58, 0, 59, 0, 0, 0, 154, 0, 0, 62, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 549, 0, 0], [0, 0, 0, 0, 91, 92, 92, 22, 23, 0, 24, 0, 0, 0, 93, 0, 0, 27, 0], [0, 0, 0, 0, 112, 113, 113, 32, 33, 0, 34, 0, 0, 0, 114, 0, 0, 37, 0], [0, 0, 0, 0, 152, 153, 153, 57, 58, 0, 59, 0, 0, 0, 154, 0, 0, 62, 0]];
        var accepting = [false, true, true, true, true, true, false, false, true, true, true, true, true, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, true, true, true, false, true, false, true, true, false, false, true, true, true, true, true, true, false, false, true, true, true, true, true, true, true, true, true, true, false, true, true, false, true, true, true, false, true, true, true, false, true, false, true, true, false, false, true, true, true, true, true, true, true, false, true, true, false, true, true, true, false, true, false, true, true, false, false, true, true, true, true, true, true, true, false, true, true, true, false, true, true, true, false, true, false, true, true, false, false, false, true, true, false, false, true, true, true, true, true, true, false, true, false, true, true, false, false, true, true, true, true, true, true, true, false, true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, true, true, true, false, true, false, true, true, false, false, false, true, true, false, false, true, true, true, false, true, true, true, true, true, true, false, true, true, true, false, true, false, true, true, false, false, false, true, true, false, false, true, true, true, false, true, true, true, true, true, false, true, true, true, true, true, false, true, true, false, false, false, false, true, true, false, false, true, true, true, false, true, true, true, false, true, false, true, true, false, false, false, true, true, false, false, true, true, true, false, true, true, true, true, false, true, false, true, true, true, true, true, true, true, true, true, false, true, true, true, true, true, false, true, true, false, false, false, false, true, true, false, false, true, true, true, false, true, true, true, true, true, false, true, true, false, false, false, false, true, true, false, false, true, true, true, true, false, true, true, true, true, true, true, false, true, true, false, false, false, false, true, false, true, false, true, true, true, true, true, false, true, true, false, false, false, false, true, true, false, false, true, true, true, false, true, true, false, false, true, false, true, true, false, true, true, false, true, true, false, true, true, true, true, true, true, false, true, true, false, false, false, false, true, false, true, true, false, true, true, true, true, true, true, false, true, true, false, false, false, false, true, false, true, false, true, true, true, true, false, false, false, true, true, false, true, true, true, true, true, true, false, true, true, false, false, false, false, true, false, true, false, true, true, false, false, true, true, false, false, true, true, true, false, true, false, true, true, true, true, false, false, false, true, false, true, true, true, true, false, false, false, true, true, false, true, true, true, true, true, true, false, true, true, false, true, false, true, true, true, true, false, false, false, false, false, false, false, true, true, false, false, true, true, false, true, true, true, true, false, true, true, true, true, true, true, false, true, true, false, true, true, false, true, true, true, true, true, true, false, true, true, false, true, false, true, true, true, true, true, true, false, true, true, true, true, true, true, false, true, true, false, false, false, false, false, true, true, false, true, false, true, true, true, true, true, false, true, true, true, true, true, false, true, true, true, true, true, false, true, true, true, false, true, true, true, true, false, false, false, true, false, true, true, true, true, true, false, true, true, true, false, true, true, true, true, true, false, true, true, true, true, false, true, true, true, true, true, false, true, true, false, true, true, true];
        var tags = [[], ["broken_cluster"], ["consonant_syllable"], ["vowel_syllable"], ["broken_cluster"], ["broken_cluster"], [], [], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["standalone_cluster"], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["consonant_syllable"], ["broken_cluster"], ["symbol_cluster"], ["consonant_syllable"], ["consonant_syllable"], [], ["consonant_syllable"], ["consonant_syllable"], ["consonant_syllable"], ["consonant_syllable"], ["consonant_syllable"], ["consonant_syllable"], ["consonant_syllable"], ["vowel_syllable"], ["vowel_syllable"], [], ["vowel_syllable"], ["vowel_syllable"], ["vowel_syllable"], ["vowel_syllable"], ["vowel_syllable"], ["vowel_syllable"], ["vowel_syllable"], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], [], ["broken_cluster"], [], ["broken_cluster"], ["broken_cluster"], [], [], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["standalone_cluster"], ["standalone_cluster"], [], [], ["standalone_cluster"], ["standalone_cluster"], ["standalone_cluster"], ["standalone_cluster"], ["standalone_cluster"], ["standalone_cluster"], ["broken_cluster"], ["broken_cluster"], ["consonant_syllable", "broken_cluster"], ["broken_cluster"], [], ["broken_cluster"], ["symbol_cluster"], [], ["symbol_cluster"], ["symbol_cluster"], ["consonant_syllable"], [], ["consonant_syllable"], ["consonant_syllable"], ["consonant_syllable"], [], ["consonant_syllable"], [], ["consonant_syllable"], ["consonant_syllable"], [], [], ["consonant_syllable"], ["consonant_syllable"], ["consonant_syllable"], ["consonant_syllable"], ["consonant_syllable"], ["consonant_syllable"], ["consonant_syllable"], [], ["consonant_syllable"], ["vowel_syllable"], [], ["vowel_syllable"], ["vowel_syllable"], ["vowel_syllable"], [], ["vowel_syllable"], [], ["vowel_syllable"], ["vowel_syllable"], [], [], ["vowel_syllable"], ["vowel_syllable"], ["vowel_syllable"], ["vowel_syllable"], ["vowel_syllable"], ["vowel_syllable"], ["vowel_syllable"], [], ["vowel_syllable"], ["broken_cluster"], ["broken_cluster"], [], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], [], ["broken_cluster"], [], ["broken_cluster"], ["broken_cluster"], [], [], [], ["broken_cluster"], ["broken_cluster"], [], [], ["broken_cluster"], ["broken_cluster"], ["standalone_cluster"], ["standalone_cluster"], ["standalone_cluster"], ["standalone_cluster"], [], ["standalone_cluster"], [], ["standalone_cluster"], ["standalone_cluster"], [], [], ["standalone_cluster"], ["standalone_cluster"], ["standalone_cluster"], ["standalone_cluster"], ["standalone_cluster"], ["standalone_cluster"], ["standalone_cluster"], [], ["standalone_cluster"], ["broken_cluster"], [], ["broken_cluster"], ["broken_cluster"], ["consonant_syllable"], ["consonant_syllable"], ["consonant_syllable", "broken_cluster"], ["consonant_syllable", "broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["symbol_cluster"], ["symbol_cluster"], ["symbol_cluster"], ["consonant_syllable"], ["consonant_syllable"], [], ["consonant_syllable"], ["consonant_syllable"], ["consonant_syllable"], [], ["consonant_syllable"], [], ["consonant_syllable"], ["consonant_syllable"], [], [], [], ["consonant_syllable"], ["consonant_syllable"], [], [], ["consonant_syllable"], ["consonant_syllable"], ["consonant_syllable"], [], ["consonant_syllable"], ["consonant_syllable"], ["consonant_syllable"], ["consonant_syllable"], ["vowel_syllable"], ["vowel_syllable"], [], ["vowel_syllable"], ["vowel_syllable"], ["vowel_syllable"], [], ["vowel_syllable"], [], ["vowel_syllable"], ["vowel_syllable"], [], [], [], ["vowel_syllable"], ["vowel_syllable"], [], [], ["vowel_syllable"], ["vowel_syllable"], ["vowel_syllable"], [], ["vowel_syllable"], ["vowel_syllable"], ["vowel_syllable"], ["vowel_syllable"], ["broken_cluster"], [], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], [], ["broken_cluster"], ["broken_cluster"], [], [], [], [], ["broken_cluster"], ["broken_cluster"], [], [], ["broken_cluster"], ["standalone_cluster"], ["standalone_cluster"], [], ["standalone_cluster"], ["standalone_cluster"], ["standalone_cluster"], [], ["standalone_cluster"], [], ["standalone_cluster"], ["standalone_cluster"], [], [], [], ["standalone_cluster"], ["standalone_cluster"], [], [], ["standalone_cluster"], ["standalone_cluster"], ["standalone_cluster"], [], ["standalone_cluster"], ["standalone_cluster"], ["standalone_cluster"], ["standalone_cluster"], [], ["broken_cluster"], [], ["consonant_syllable", "broken_cluster"], ["consonant_syllable", "broken_cluster"], ["consonant_syllable", "broken_cluster"], ["consonant_syllable", "broken_cluster"], ["consonant_syllable", "broken_cluster"], ["consonant_syllable", "broken_cluster"], ["broken_cluster"], ["symbol_cluster"], ["consonant_syllable"], [], ["consonant_syllable"], ["consonant_syllable"], ["consonant_syllable"], ["consonant_syllable"], ["consonant_syllable"], [], ["consonant_syllable"], ["consonant_syllable"], [], [], [], [], ["consonant_syllable"], ["consonant_syllable"], [], [], ["consonant_syllable"], ["consonant_syllable"], ["vowel_syllable"], [], ["vowel_syllable"], ["vowel_syllable"], ["vowel_syllable"], ["vowel_syllable"], ["vowel_syllable"], [], ["vowel_syllable"], ["vowel_syllable"], [], [], [], [], ["vowel_syllable"], ["vowel_syllable"], [], [], ["vowel_syllable"], ["vowel_syllable"], ["broken_cluster"], ["broken_cluster"], [], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], [], ["broken_cluster"], ["broken_cluster"], [], [], [], [], ["broken_cluster"], [], ["standalone_cluster"], [], ["standalone_cluster"], ["standalone_cluster"], ["standalone_cluster"], ["standalone_cluster"], ["standalone_cluster"], [], ["standalone_cluster"], ["standalone_cluster"], [], [], [], [], ["standalone_cluster"], ["standalone_cluster"], [], [], ["standalone_cluster"], ["standalone_cluster"], ["consonant_syllable", "broken_cluster"], [], ["consonant_syllable", "broken_cluster"], ["consonant_syllable", "broken_cluster"], [], [], ["consonant_syllable", "broken_cluster"], [], ["consonant_syllable", "broken_cluster"], ["consonant_syllable", "broken_cluster"], [], ["consonant_syllable", "broken_cluster"], ["consonant_syllable", "broken_cluster"], [], ["consonant_syllable"], ["consonant_syllable"], [], ["consonant_syllable"], ["consonant_syllable"], ["consonant_syllable"], ["consonant_syllable"], ["consonant_syllable"], ["consonant_syllable"], [], ["consonant_syllable"], ["consonant_syllable"], [], [], [], [], ["consonant_syllable"], [], ["vowel_syllable"], ["vowel_syllable"], [], ["vowel_syllable"], ["vowel_syllable"], ["vowel_syllable"], ["vowel_syllable"], ["vowel_syllable"], ["vowel_syllable"], [], ["vowel_syllable"], ["vowel_syllable"], [], [], [], [], ["vowel_syllable"], [], ["broken_cluster"], [], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], [], [], [], ["standalone_cluster"], ["standalone_cluster"], [], ["standalone_cluster"], ["standalone_cluster"], ["standalone_cluster"], ["standalone_cluster"], ["standalone_cluster"], ["standalone_cluster"], [], ["standalone_cluster"], ["standalone_cluster"], [], [], [], [], ["standalone_cluster"], [], ["consonant_syllable", "broken_cluster"], [], ["consonant_syllable", "broken_cluster"], ["consonant_syllable", "broken_cluster"], [], [], ["consonant_syllable", "broken_cluster"], ["consonant_syllable", "broken_cluster"], [], [], ["consonant_syllable", "broken_cluster"], ["consonant_syllable", "broken_cluster"], ["consonant_syllable", "broken_cluster"], [], ["consonant_syllable"], [], ["consonant_syllable"], ["consonant_syllable"], ["consonant_syllable"], ["consonant_syllable"], [], [], [], ["vowel_syllable"], [], ["vowel_syllable"], ["vowel_syllable"], ["vowel_syllable"], ["vowel_syllable"], [], [], [], ["broken_cluster"], ["broken_cluster"], [], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], [], ["broken_cluster"], ["broken_cluster"], [], ["standalone_cluster"], [], ["standalone_cluster"], ["standalone_cluster"], ["standalone_cluster"], ["standalone_cluster"], [], [], [], [], [], [], [], ["consonant_syllable", "broken_cluster"], ["consonant_syllable", "broken_cluster"], [], [], ["consonant_syllable", "broken_cluster"], ["consonant_syllable", "broken_cluster"], [], ["consonant_syllable", "broken_cluster"], ["consonant_syllable", "broken_cluster"], ["consonant_syllable"], ["consonant_syllable"], [], ["consonant_syllable"], ["consonant_syllable"], ["consonant_syllable"], ["consonant_syllable"], ["consonant_syllable"], ["consonant_syllable"], [], ["consonant_syllable"], ["consonant_syllable"], [], ["vowel_syllable"], ["vowel_syllable"], [], ["vowel_syllable"], ["vowel_syllable"], ["vowel_syllable"], ["vowel_syllable"], ["vowel_syllable"], ["vowel_syllable"], [], ["vowel_syllable"], ["vowel_syllable"], [], ["broken_cluster"], [], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["standalone_cluster"], ["standalone_cluster"], [], ["standalone_cluster"], ["standalone_cluster"], ["standalone_cluster"], ["standalone_cluster"], ["standalone_cluster"], ["standalone_cluster"], [], ["standalone_cluster"], ["standalone_cluster"], [], [], [], [], [], ["consonant_syllable", "broken_cluster"], ["consonant_syllable", "broken_cluster"], [], ["consonant_syllable"], [], ["consonant_syllable"], ["consonant_syllable"], ["consonant_syllable"], ["consonant_syllable"], ["vowel_syllable"], [], ["vowel_syllable"], ["vowel_syllable"], ["vowel_syllable"], ["vowel_syllable"], ["broken_cluster"], [], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], [], ["broken_cluster"], ["broken_cluster"], ["standalone_cluster"], [], ["standalone_cluster"], ["standalone_cluster"], ["standalone_cluster"], ["standalone_cluster"], [], [], [], ["consonant_syllable"], [], ["consonant_syllable"], ["consonant_syllable"], ["consonant_syllable"], ["consonant_syllable"], ["consonant_syllable"], [], ["consonant_syllable"], ["consonant_syllable"], ["vowel_syllable"], [], ["vowel_syllable"], ["vowel_syllable"], ["vowel_syllable"], ["vowel_syllable"], ["vowel_syllable"], [], ["vowel_syllable"], ["vowel_syllable"], ["broken_cluster"], ["standalone_cluster"], [], ["standalone_cluster"], ["standalone_cluster"], ["standalone_cluster"], ["standalone_cluster"], ["standalone_cluster"], [], ["standalone_cluster"], ["standalone_cluster"], [], ["consonant_syllable"], ["vowel_syllable"], ["standalone_cluster"]];
        var indicMachine = {
          stateTable: stateTable,
          accepting: accepting,
          tags: tags
        };
        var categories = ["O", "IND", "S", "GB", "B", "FM", "CGJ", "VMAbv", "VMPst", "VAbv", "VPst", "CMBlw", "VPre", "VBlw", "H", "VMBlw", "CMAbv", "MBlw", "CS", "R", "SUB", "MPst", "MPre", "FAbv", "FPst", "FBlw", "null", "SMAbv", "SMBlw", "VMPre", "ZWNJ", "ZWJ", "WJ", "M", "VS", "N", "HN", "MAbv"];
        var decompositions$1 = {
          "2507": [2503, 2494],
          "2508": [2503, 2519],
          "2888": [2887, 2902],
          "2891": [2887, 2878],
          "2892": [2887, 2903],
          "3018": [3014, 3006],
          "3019": [3015, 3006],
          "3020": [3014, 3031],
          "3144": [3142, 3158],
          "3264": [3263, 3285],
          "3271": [3270, 3285],
          "3272": [3270, 3286],
          "3274": [3270, 3266],
          "3275": [3270, 3266, 3285],
          "3402": [3398, 3390],
          "3403": [3399, 3390],
          "3404": [3398, 3415],
          "3546": [3545, 3530],
          "3548": [3545, 3535],
          "3549": [3545, 3535, 3530],
          "3550": [3545, 3551],
          "3635": [3661, 3634],
          "3763": [3789, 3762],
          "3955": [3953, 3954],
          "3957": [3953, 3956],
          "3958": [4018, 3968],
          "3959": [4018, 3953, 3968],
          "3960": [4019, 3968],
          "3961": [4019, 3953, 3968],
          "3969": [3953, 3968],
          "6971": [6970, 6965],
          "6973": [6972, 6965],
          "6976": [6974, 6965],
          "6977": [6975, 6965],
          "6979": [6978, 6965],
          "69934": [69937, 69927],
          "69935": [69938, 69927],
          "70475": [70471, 70462],
          "70476": [70471, 70487],
          "70843": [70841, 70842],
          "70844": [70841, 70832],
          "70846": [70841, 70845],
          "71098": [71096, 71087],
          "71099": [71097, 71087]
        };
        var stateTable$1 = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 3, 4, 4, 5, 0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 17, 18, 11, 19, 20, 21, 22, 0, 0, 0, 23, 0, 0, 2, 0, 0, 24, 0, 25], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 28, 0, 0, 0, 0, 0, 27, 0, 0, 0], [0, 0, 0, 0, 0, 29, 0, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 0, 0, 41, 35, 42, 43, 44, 45, 0, 0, 0, 46, 0, 0, 0, 0, 39, 0, 0, 47], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 6, 7, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 20, 21, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 21, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 6, 7, 8, 9, 0, 0, 12, 0, 14, 0, 0, 0, 0, 0, 0, 0, 20, 21, 22, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 6, 7, 0, 9, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 20, 21, 22, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 16, 0, 0, 18, 11, 19, 20, 21, 22, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 25], [0, 0, 0, 0, 0, 5, 0, 6, 7, 8, 9, 0, 11, 12, 0, 14, 0, 0, 0, 0, 0, 0, 0, 20, 21, 22, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 6, 7, 0, 9, 0, 0, 12, 0, 14, 0, 0, 0, 0, 0, 0, 0, 20, 21, 22, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 7, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 20, 21, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 0, 18, 11, 19, 20, 21, 22, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 25], [0, 0, 0, 0, 0, 5, 0, 6, 7, 8, 9, 0, 11, 12, 0, 14, 0, 0, 0, 0, 0, 11, 0, 20, 21, 22, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 4, 5, 0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 0, 18, 11, 19, 20, 21, 22, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 25], [0, 0, 0, 0, 0, 5, 0, 6, 7, 8, 9, 48, 11, 12, 13, 14, 48, 16, 0, 0, 18, 11, 19, 20, 21, 22, 0, 0, 0, 23, 0, 0, 0, 0, 49, 0, 0, 25], [0, 0, 0, 0, 0, 5, 0, 6, 7, 8, 9, 0, 11, 12, 0, 14, 0, 16, 0, 0, 0, 11, 0, 20, 21, 22, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 25], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 21, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 6, 7, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 20, 21, 22, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 0, 51, 0], [0, 0, 0, 0, 0, 5, 0, 6, 7, 8, 9, 0, 11, 12, 0, 14, 0, 16, 0, 0, 0, 11, 0, 20, 21, 22, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 29, 0, 30, 31, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 43, 44, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 29, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 44, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 29, 0, 30, 31, 32, 33, 0, 0, 36, 0, 38, 0, 0, 0, 0, 0, 0, 0, 43, 44, 45, 0, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 29, 0, 30, 31, 0, 33, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 43, 44, 45, 0, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 29, 0, 30, 31, 32, 33, 34, 35, 36, 37, 38, 0, 40, 0, 0, 41, 35, 42, 43, 44, 45, 0, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0, 47], [0, 0, 0, 0, 0, 29, 0, 30, 31, 32, 33, 0, 35, 36, 0, 38, 0, 0, 0, 0, 0, 0, 0, 43, 44, 45, 0, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 29, 0, 30, 31, 0, 33, 0, 0, 36, 0, 38, 0, 0, 0, 0, 0, 0, 0, 43, 44, 45, 0, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 29, 0, 0, 31, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 43, 44, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 29, 0, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 0, 0, 41, 35, 42, 43, 44, 45, 0, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0, 47], [0, 0, 0, 0, 0, 29, 0, 30, 31, 32, 33, 0, 35, 36, 0, 38, 0, 0, 0, 0, 0, 35, 0, 43, 44, 45, 0, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 29, 0, 30, 31, 32, 33, 52, 35, 36, 37, 38, 52, 40, 0, 0, 41, 35, 42, 43, 44, 45, 0, 0, 0, 46, 0, 0, 0, 0, 53, 0, 0, 47], [0, 0, 0, 0, 0, 29, 0, 30, 31, 32, 33, 0, 35, 36, 0, 38, 0, 40, 0, 0, 0, 35, 0, 43, 44, 45, 0, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0, 47], [0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 44, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 29, 0, 30, 31, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 43, 44, 45, 0, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 29, 0, 30, 31, 32, 33, 0, 35, 36, 0, 38, 0, 40, 0, 0, 0, 35, 0, 43, 44, 45, 0, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 6, 7, 8, 9, 48, 11, 12, 13, 14, 0, 16, 0, 0, 18, 11, 19, 20, 21, 22, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 25], [0, 0, 0, 0, 0, 5, 0, 6, 7, 8, 9, 48, 11, 12, 13, 14, 48, 16, 0, 0, 18, 11, 19, 20, 21, 22, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 25], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 0, 0], [0, 0, 0, 0, 0, 29, 0, 30, 31, 32, 33, 52, 35, 36, 37, 38, 0, 40, 0, 0, 41, 35, 42, 43, 44, 45, 0, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0, 47], [0, 0, 0, 0, 0, 29, 0, 30, 31, 32, 33, 52, 35, 36, 37, 38, 52, 40, 0, 0, 41, 35, 42, 43, 44, 45, 0, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0, 47], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 0, 51, 0]];
        var accepting$1 = [false, true, true, true, true, true, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true];
        var tags$1 = [[], ["broken_cluster"], ["independent_cluster"], ["symbol_cluster"], ["standard_cluster"], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], [], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["numeral_cluster"], ["broken_cluster"], ["independent_cluster"], ["symbol_cluster"], ["symbol_cluster"], ["standard_cluster"], ["standard_cluster"], ["standard_cluster"], ["standard_cluster"], ["standard_cluster"], ["standard_cluster"], ["standard_cluster"], ["standard_cluster"], ["virama_terminated_cluster"], ["standard_cluster"], ["standard_cluster"], ["standard_cluster"], ["standard_cluster"], ["standard_cluster"], ["standard_cluster"], ["standard_cluster"], ["standard_cluster"], ["standard_cluster"], ["standard_cluster"], ["broken_cluster"], ["broken_cluster"], ["numeral_cluster"], ["number_joiner_terminated_cluster"], ["standard_cluster"], ["standard_cluster"], ["numeral_cluster"]];
        var useData = {
          categories: categories,
          decompositions: decompositions$1,
          stateTable: stateTable$1,
          accepting: accepting$1,
          tags: tags$1
        }; // Cateories used in the OpenType spec:
        // https://www.microsoft.com/typography/otfntdev/devanot/shaping.aspx

        var CATEGORIES = {
          X: 1 << 0,
          C: 1 << 1,
          V: 1 << 2,
          N: 1 << 3,
          H: 1 << 4,
          ZWNJ: 1 << 5,
          ZWJ: 1 << 6,
          M: 1 << 7,
          SM: 1 << 8,
          VD: 1 << 9,
          A: 1 << 10,
          Placeholder: 1 << 11,
          Dotted_Circle: 1 << 12,
          RS: 1 << 13,
          // Register Shifter, used in Khmer OT spec.
          Coeng: 1 << 14,
          // Khmer-style Virama.
          Repha: 1 << 15,
          // Atomically-encoded logical or visual repha.
          Ra: 1 << 16,
          CM: 1 << 17,
          // Consonant-Medial.
          Symbol: 1 << 18 // Avagraha, etc that take marks (SM,A,VD).

        }; // Visual positions in a syllable from left to right.

        var POSITIONS = {
          Start: 1 << 0,
          Ra_To_Become_Reph: 1 << 1,
          Pre_M: 1 << 2,
          Pre_C: 1 << 3,
          Base_C: 1 << 4,
          After_Main: 1 << 5,
          Above_C: 1 << 6,
          Before_Sub: 1 << 7,
          Below_C: 1 << 8,
          After_Sub: 1 << 9,
          Before_Post: 1 << 10,
          Post_C: 1 << 11,
          After_Post: 1 << 12,
          Final_C: 1 << 13,
          SMVD: 1 << 14,
          End: 1 << 15
        };
        var CONSONANT_FLAGS = CATEGORIES.C | CATEGORIES.Ra | CATEGORIES.CM | CATEGORIES.V | CATEGORIES.Placeholder | CATEGORIES.Dotted_Circle;
        var JOINER_FLAGS = CATEGORIES.ZWJ | CATEGORIES.ZWNJ;
        var HALANT_OR_COENG_FLAGS = CATEGORIES.H | CATEGORIES.Coeng;
        var INDIC_CONFIGS = {
          Default: {
            hasOldSpec: false,
            virama: 0,
            basePos: 'Last',
            rephPos: POSITIONS.Before_Post,
            rephMode: 'Implicit',
            blwfMode: 'Pre_And_Post'
          },
          Devanagari: {
            hasOldSpec: true,
            virama: 0x094D,
            basePos: 'Last',
            rephPos: POSITIONS.Before_Post,
            rephMode: 'Implicit',
            blwfMode: 'Pre_And_Post'
          },
          Bengali: {
            hasOldSpec: true,
            virama: 0x09CD,
            basePos: 'Last',
            rephPos: POSITIONS.After_Sub,
            rephMode: 'Implicit',
            blwfMode: 'Pre_And_Post'
          },
          Gurmukhi: {
            hasOldSpec: true,
            virama: 0x0A4D,
            basePos: 'Last',
            rephPos: POSITIONS.Before_Sub,
            rephMode: 'Implicit',
            blwfMode: 'Pre_And_Post'
          },
          Gujarati: {
            hasOldSpec: true,
            virama: 0x0ACD,
            basePos: 'Last',
            rephPos: POSITIONS.Before_Post,
            rephMode: 'Implicit',
            blwfMode: 'Pre_And_Post'
          },
          Oriya: {
            hasOldSpec: true,
            virama: 0x0B4D,
            basePos: 'Last',
            rephPos: POSITIONS.After_Main,
            rephMode: 'Implicit',
            blwfMode: 'Pre_And_Post'
          },
          Tamil: {
            hasOldSpec: true,
            virama: 0x0BCD,
            basePos: 'Last',
            rephPos: POSITIONS.After_Post,
            rephMode: 'Implicit',
            blwfMode: 'Pre_And_Post'
          },
          Telugu: {
            hasOldSpec: true,
            virama: 0x0C4D,
            basePos: 'Last',
            rephPos: POSITIONS.After_Post,
            rephMode: 'Explicit',
            blwfMode: 'Post_Only'
          },
          Kannada: {
            hasOldSpec: true,
            virama: 0x0CCD,
            basePos: 'Last',
            rephPos: POSITIONS.After_Post,
            rephMode: 'Implicit',
            blwfMode: 'Post_Only'
          },
          Malayalam: {
            hasOldSpec: true,
            virama: 0x0D4D,
            basePos: 'Last',
            rephPos: POSITIONS.After_Main,
            rephMode: 'Log_Repha',
            blwfMode: 'Pre_And_Post'
          },
          // Handled by UniversalShaper
          // Sinhala: {
          //   hasOldSpec: false,
          //   virama: 0x0DCA,
          //   basePos: 'Last_Sinhala',
          //   rephPos: POSITIONS.After_Main,
          //   rephMode: 'Explicit',
          //   blwfMode: 'Pre_And_Post'
          // },
          Khmer: {
            hasOldSpec: false,
            virama: 0x17D2,
            basePos: 'First',
            rephPos: POSITIONS.Ra_To_Become_Reph,
            rephMode: 'Vis_Repha',
            blwfMode: 'Pre_And_Post'
          }
        }; // Additional decompositions that aren't in Unicode

        var INDIC_DECOMPOSITIONS = {
          // Khmer
          0x17BE: [0x17C1, 0x17BE],
          0x17BF: [0x17C1, 0x17BF],
          0x17C0: [0x17C1, 0x17C0],
          0x17C4: [0x17C1, 0x17C4],
          0x17C5: [0x17C1, 0x17C5]
        };

        var _class$6;

        var _temp$2;

        var decompositions = useData.decompositions;
        var trie$1 = new UnicodeTrie(Buffer("ABEAAAAAAAAAANhgAWYPmfDtnXuMXFUdx+/uzs7M7szudAtECGJRIMRQbUAithQWkGAKiVhNpFVRRAmIQVCDkDYICGotIA9BTCz8IeUviv7BQ2PBtBIRLBBQIWAUsKg1BKxRAqIgfs/cc+aeOXPej3tnZX7JJ/dxzj3nd36/8753Z5fUsuxgsAwcAU4Gp4BPgM+Cd4P3RjieDs4GXwLrHJ5bDy4DG8A14LvgZrAZbAF3gns0z18ALgY/B78C94NHwBPgabAE/AX8DbwM5sF/QX0yD5vFcU/wVnAgWAoOAyvAceBE8CGwBpwGzgJfAF8BXwXfAFeC68EmsBlsAXeCreA+8CB4DDwF/gh2gd3gFfAGmKxn2QzYC+wHDgRLweFgJTgWrKrnuq/GcQ04jV6fheN54EJwEbgcXAG+Q8O/j+Mt4DZwB9haz8t9Hz3a8iCN/xiOvwRP0evH6fE68AzOH+Ke2eWYhw3PcGnuxvkr4A3QaGRZB7wFLAEHg2XgiEZ/fHKcp/ceBh/A+cngFPCpRm6vM3E8l8a5gN67GMdvgqsbeX2ap9yI601gM7gN3AG20mfuo8cdOP6GpvdUg9oKxz839GV90RDO2/glxN1B790NXsN1rZll7WYRdw+c70uvTwIHNAfTO0RyL5TDmnnbc3lmRQI9UnM0dD5eovfz4FpJ/BNpXNYWV+N6Lfg0hY97JK1vn+Pur9DoQur2F7m436bHDUK8C5t5/8vruo4+97WmXG+GLmzEiBF+PDwEOowYMWLEiBEjRoxYeBw5BDqIPEfXut9yWN+vVNxfrnnmWqR/PdgENoMt4E5wD9gOHgCPgifBs2BXM99b2o3jP8F/wMRUlrXAHNgHvH0q3895J46HguXgWHAGLctmLv9VuL96qnp7jxgxYsSbCbJvuRZ97/tqxT59VVRtixEjRsThBG7OSt5zzoPT0M+cBc4T5noXOs79TqLHeZrHUeCSqeJ96gacXy2kecNU8V6Hh7yXuQlhtw7B/PO1RTkr52Aj8JNFZjYg3gOKuC/g/v6Ls2wNuAY8urg//PcIb+6RZXuDNeCS6SzbBrJWlh0DLiFHco8ed9IjzzvaWfa9sZzTcf6D9mCcnbg3PlNcH4fzS8F2MDaLdQG4dLZIJxbbaZqv4ri8k58f3+mPs66T6/TTzqDeI0aMGDGiHP5dcR8ce/xxYcWi6vOfr725uRzcjnngXVOD61Hync+9uL+Nmyfej/NHpvL56A5Jeuz7uyfo+pqcPz2Vf1NH0ttJ03pekt8SmuY/EPYy9zzbN319ym/9TL6ZIt9MHCXRdxJtoAkWTRdz472n87D9cTwYLJvuz++I6WIePo/zE8AHp4v8WLyP0nufnM6/+zoDx8+DL08P6r9+urheRtO+jD6/cdrsx3mqu8w+xH4PScKIXa5D2jeCm8Et4DbwI/BjcC/4BXgI/Bb8DuwEu8Bu8Ap4A9RaRZptnO8J9gUHgEPAoWA5OLY1qMO90GEV7q+mYWtxPBWcIYnL4p+DsPNbxfVFOP86uAr8DNc34HgTDb8Vx9sVaRFI/LtagzYjnCqpb908EX87eBA8Bh4Hf2jle/9/wvGFVv787rrZZy8h7qtgDOuFOmiBuXYRvg/O9wMHgXeB97SLspk4sq0OI/q9v13+ek+sh3zYSRp9jrYorw9ll1/GRzR+KotYZSHf8laVP2lvpA/8OGdPMk59hqtXZ+L8nHbxvWwqO65ryu+fT3VZz+l4dET7L0R072ljsMyzTpaJqQxsbL8M9WajY789DO85XMp/Dcp3Qztdn+9qf/a97ZWK8PXc3G+TpC/nv8Mncy7ZvICF302P5O+aNiOtLdTXd+D4Q7DVwfcvWvx9zTEJ/o5iG3R8YAjGNFseha5PGuZKz7b7xxXbOrXMcu5eJSo//rXdH/73Enz6L1q/X+fyIu8wZGtNBmkjkzNZNgP2AvuBg2bysKUzduXn/66JtNeN4PCZvO0/x7Ujdn4VnYOvRJzjZ/I+9sQZeftX2Tc1RPcPz/Tf4/si0g+t5Mq+kfZjZL34Mc5ul3PPnE7TOxvHK2qDaZ+L++db2HyYqMo/qVnb/P8uH8/rmnFxR0k6DCu/rjj/RxT7KGUSWgbd+LMQuEgYB1zsk2qtvJD8v5AhdfdttbEunSxbcJD9Zf7chqp1Hlbe7FK1/aPVTfp7FgtC1yGGiSncFK/DhZvi+epZta0WWjlsfDZMyPRdSPrryqSSKnXx1bkq/Ye9TlRpk7Lrjq1UrfdC9X+MtKqwP6+3a/4pJFUZF0pZZpv91MYjMBaRRXbxpho5zQmUY3F+Pt4o7rvQrBXPdm00TaE24uMadaM2meLSI7iu071t3er3b6ZLi8JEde3qw+6zGv+ycF5kaRBh/m1T/7Yl/mMyTuMwadP4xL9ifjJpNwbvDZRJ8G8vnqV/Wf12aa/kyOdl69+BspTsXzGueE6E+JfZnvmXIfNPW+FfXkjb1YmqPNpnLP3b61fHCj/X5tzGANf2y3yqvC7Jv7btV4TVbdammI9l/g0dS5lNxLrk2j9r8xjjxhBQnygg0lgg/bOrfyct+udJi/Yrk0lFnxC7f+5kRbsNmcexfrubt0X/rGvLqrGSnYv3ZPHEe8r7lvMvUfi2LOu/2dg8LrRtQt2yfcv8r5IU70VkIs6nbebUXf0M/o7Znl39Sdoz+X1oEb5N8ffF67qhPfPP6eoUbxf+GRf/6sRnvaSdmw+Bf1VxmbD+2sa//DU7t/Gv2PfKpKdrBP92Ojk+IvqX16ks/2qxbL8EZnc2HqsgYuqPuzZV+I3RbujbDm+T0PmWCVO/5jqftp1zy+wSA6s0JWtp2z5e1oZV+yMsjB3ZXolsv0Ulrv01v3/iKrF94Qtbt9siCnmeb6fjjf59KnLk1xaEbvtvFnFirGvEOqmycQrbm/IMsXd3P28uh4nM3swXRER717OiX8kc7K2qqyn2p3maFGU/aruP5VCv+PraoTYU8yUmmbDwcYo6pusnM486xdoga4dkPCb1pK7Sfc6ebvkd4qeAtQcd/N63bB3lU3dlUnUf38VyvqCqK7JxlNSd7lydrDlm+/uqHiRvl30Nrp/n9zpkZRjoJ3V1diyP05rIYXHYs+w+D5+WMS8b5gZtKcuX0KT5d/WwtB97VnyvY6rjMukI56HI0rFJPwt8PjT/1OXzSbcMeEmdh294qvKK4rNu7j4n3LNZg8TKXwafv025U+XvKjHsT8Q7/7LGaJt9lAh7Asz3uv0XEX6t0duDoWN/93wmh92XpUHmCKb9GALbG+rZP3AfNbQPKKv/jpF/bP0JXfuW1QYk7dhljcyvk5mw+933Hpo1g26PQ2ZP6zVmTJt47P25jncD9vPwGS+q9QS/V6RaY8j8K8LmvUr9HfYCpH5OWL9lZY+Sv6pesHCJHbtrf9k6etZvf0G1L0ja4cAe1UT/s3zdCe3/Q5/n372wMc97/E1Qh0Tbmfwh3m/V9On72tNnrCF1sJkVe1EyXMdBa7+lHMsk44zMF6St9e2djNnbm8ybpHkq+gbbemMaH0UZmD8obKGrk7r+nt+3bE7o83YZp/vqOKdv6PzJNN6mTJsI/51XR7i2ZrGA5B6zFwnjzxmqPjaGfW3tZNrz1eljq29mOOqeCfF/irRt87PNw0uXSVAvrmOMNT569MptsYaV0sic/wbY13e8hPrb9K2ySUJ0j6G/Lu0U4qpTrR23jMp6m5hU+YTaWCeh9aIsm/rqUHV4bFv42kgnZdfH1PUj1D7DVH9d8khRN1zFRl/+/TW//qxL1uH83+mk3H+SvRtS2TDU90nX2TpM6/1xzZpZtoYdK763dqlz0f6uNeFehcs+H/nbGP77MpX06n/ofpzP+tVmTUvRtVuX/cjS67OE5kRBrxyJ+w/dPo7r+9cO1160e3gqu0S2uW7PjN/L6ns/UfMf10Lai87frJ+3KndAfc8yTf1M3T4s6qm4/yh7/2GSkG8UMw//DvRLgbYZSEOxr0LCWvRdjfh9XGzfqN4NivfZd7rsmFp08zmbssrKJEuTfVMZopdpbuwSrhNv3/N2s+0PDG3KNB6RMrFvJHv6B85HXObAoWsd3zm3i+6uZYytv+5+pohbpo6+tpZJFfmGlrcMf4c8b1Pe2OUIsaXJrinCTfaxtZOt+NYnU3hIfQlN20Z/1+dt7JaqLsbIzycNWZmrlNg2Dc2/LJ1T+T6WrrYSml4Ku7ik7yIx2opJD51vU9UfVRmrqL8u/olZj0PyCLV5irxcdKoi/6rKb8qTrHsnhW9jyZH/nSpeWDzxd9769uQ016lgUuf2pAfKPhu2FpfZL2Yb9snLNl/fNIepXaUsj4vNXCXUZ75px8ojNP8UPvAta2g6fb+F1ckZuneshv1vGXXDeyRRrN/bBPS1Jul+l+7zW86R7Wv63WXyDpt/RxraRjvC+TC3O61/Sqj/prag8x372yQivn+XwudrI2X2E2KdtJEov52e0L+uv4FO3p/rvssgsL8F4d/z9PzlWS94m8fqS3361Fi+6qaVYHwi9Yz4iH2fobIj+45cpz/TUaarr/4+z+vaWtVtyAX2d1LG8W9C3f+F1mnf36/k4w3YPrLv+XBVXCJs3cr+n4MKJuLv/fN9GhNdXVP5pJMN9vFi3rpv3/r8Ywg3SYp66zNOsO8QGcxPpnmRS/1mvmJjju3v7absI2xspQrvs1dNbjOj/wP7h1RlZyKGy8occ408UL8En4v6xfC/K3z52XzJd62T8vuZGGsxo/6O46ntmNqqFb/jps2/hHV4rPKH0svT4pstU7t2tZ9u/ZdqbJL1MwP6O86Fyt4jYaIrGz9mjEt8lFL4PtVE6votG2P6fpdf/GZRse7s3bf4BtSl/DIbKMctx++Z+8o6K6z9FPOwKsRmXiaNl7C+6NYRpjlbqG1j72f49qsuY4brd/amb4ZVc8TQ+sSH985LrEe8iPWJnfPrJRbWbb+dwn4x6o+r/aS2S7w3qWt//LnYz2ntE0vH1uDcyKatx1rH+EiMPEN1SZG/iz6+9o01Rob6O7Q+xLZ1jHobK61U+pWVvo2EpuWqzzD6Poa+pvhli0wn8Zq/72Mzm2d90o5VN1x9ZKuzbTgvqWwUIin8FSpl1CXXvFRxU0iozVPYJDRtF3uFphn6XAyJUUdD7SjTJ8v6n9fVbVObkKWp001lc9VRlqdOf5v0ZM+bymdbfp1NfG0bq27Y5JMyfxeJkU6o/inKH8O2Zfgidb6h/g3VJ7QcVbWL0Pxt6rlrPqa4KfQ25a2zl4/E8GdM/4fK/wA=", "base64"));
        var stateMachine = new StateMachine(indicMachine);
        /**
         * The IndicShaper supports indic scripts e.g. Devanagari, Kannada, etc.
         * Based on code from Harfbuzz: https://github.com/behdad/harfbuzz/blob/master/src/hb-ot-shape-complex-indic.cc
         */

        var IndicShaper = (_temp$2 = _class$6 = function (_DefaultShaper) {
          _inherits(IndicShaper, _DefaultShaper);

          function IndicShaper() {
            _classCallCheck(this, IndicShaper);

            return _possibleConstructorReturn(this, _DefaultShaper.apply(this, arguments));
          }

          IndicShaper.planFeatures = function planFeatures(plan) {
            plan.addStage(setupSyllables);
            plan.addStage(['locl', 'ccmp']);
            plan.addStage(initialReordering);
            plan.addStage('nukt');
            plan.addStage('akhn');
            plan.addStage('rphf', false);
            plan.addStage('rkrf');
            plan.addStage('pref', false);
            plan.addStage('blwf', false);
            plan.addStage('abvf', false);
            plan.addStage('half', false);
            plan.addStage('pstf', false);
            plan.addStage('vatu');
            plan.addStage('cjct');
            plan.addStage('cfar', false);
            plan.addStage(finalReordering);
            plan.addStage({
              local: ['init'],
              global: ['pres', 'abvs', 'blws', 'psts', 'haln', 'dist', 'abvm', 'blwm', 'calt', 'clig']
            }); // Setup the indic config for the selected script

            plan.unicodeScript = fromOpenType(plan.script);
            plan.indicConfig = INDIC_CONFIGS[plan.unicodeScript] || INDIC_CONFIGS.Default;
            plan.isOldSpec = plan.indicConfig.hasOldSpec && plan.script[plan.script.length - 1] !== '2'; // TODO: turn off kern (Khmer) and liga features.
          };

          IndicShaper.assignFeatures = function assignFeatures(plan, glyphs) {
            var _loop = function _loop(i) {
              var codepoint = glyphs[i].codePoints[0];
              var d = INDIC_DECOMPOSITIONS[codepoint] || decompositions[codepoint];

              if (d) {
                var decomposed = d.map(function (c) {
                  var g = plan.font.glyphForCodePoint(c);
                  return new GlyphInfo(plan.font, g.id, [c], glyphs[i].features);
                });
                glyphs.splice.apply(glyphs, [i, 1].concat(decomposed));
              }
            }; // Decompose split matras
            // TODO: do this in a more general unicode normalizer


            for (var i = glyphs.length - 1; i >= 0; i--) {
              _loop(i);
            }
          };

          return IndicShaper;
        }(DefaultShaper), _class$6.zeroMarkWidths = 'NONE', _temp$2);

        function indicCategory(glyph) {
          return trie$1.get(glyph.codePoints[0]) >> 8;
        }

        function indicPosition(glyph) {
          return 1 << (trie$1.get(glyph.codePoints[0]) & 0xff);
        }

        var IndicInfo = function IndicInfo(category, position, syllableType, syllable) {
          _classCallCheck(this, IndicInfo);

          this.category = category;
          this.position = position;
          this.syllableType = syllableType;
          this.syllable = syllable;
        };

        function setupSyllables(font, glyphs) {
          var syllable = 0;
          var last = 0;

          for (var _iterator = stateMachine.match(glyphs.map(indicCategory)), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
            var _ref;

            if (_isArray) {
              if (_i >= _iterator.length) break;
              _ref = _iterator[_i++];
            } else {
              _i = _iterator.next();
              if (_i.done) break;
              _ref = _i.value;
            }

            var _ref2 = _ref,
                start = _ref2[0],
                end = _ref2[1],
                tags = _ref2[2];

            if (start > last) {
              ++syllable;

              for (var _i2 = last; _i2 < start; _i2++) {
                glyphs[_i2].shaperInfo = new IndicInfo(CATEGORIES.X, POSITIONS.End, 'non_indic_cluster', syllable);
              }
            }

            ++syllable; // Create shaper info

            for (var _i3 = start; _i3 <= end; _i3++) {
              glyphs[_i3].shaperInfo = new IndicInfo(1 << indicCategory(glyphs[_i3]), indicPosition(glyphs[_i3]), tags[0], syllable);
            }

            last = end + 1;
          }

          if (last < glyphs.length) {
            ++syllable;

            for (var i = last; i < glyphs.length; i++) {
              glyphs[i].shaperInfo = new IndicInfo(CATEGORIES.X, POSITIONS.End, 'non_indic_cluster', syllable);
            }
          }
        }

        function isConsonant(glyph) {
          return glyph.shaperInfo.category & CONSONANT_FLAGS;
        }

        function isJoiner(glyph) {
          return glyph.shaperInfo.category & JOINER_FLAGS;
        }

        function isHalantOrCoeng(glyph) {
          return glyph.shaperInfo.category & HALANT_OR_COENG_FLAGS;
        }

        function wouldSubstitute(glyphs, feature) {
          for (var _iterator2 = glyphs, _isArray2 = Array.isArray(_iterator2), _i4 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
            var _glyph$features;

            var _ref3;

            if (_isArray2) {
              if (_i4 >= _iterator2.length) break;
              _ref3 = _iterator2[_i4++];
            } else {
              _i4 = _iterator2.next();
              if (_i4.done) break;
              _ref3 = _i4.value;
            }

            var glyph = _ref3;
            glyph.features = (_glyph$features = {}, _glyph$features[feature] = true, _glyph$features);
          }

          var GSUB = glyphs[0]._font._layoutEngine.engine.GSUBProcessor;
          GSUB.applyFeatures([feature], glyphs);
          return glyphs.length === 1;
        }

        function consonantPosition(font, consonant, virama) {
          var glyphs = [virama, consonant, virama];

          if (wouldSubstitute(glyphs.slice(0, 2), 'blwf') || wouldSubstitute(glyphs.slice(1, 3), 'blwf')) {
            return POSITIONS.Below_C;
          } else if (wouldSubstitute(glyphs.slice(0, 2), 'pstf') || wouldSubstitute(glyphs.slice(1, 3), 'pstf')) {
            return POSITIONS.Post_C;
          } else if (wouldSubstitute(glyphs.slice(0, 2), 'pref') || wouldSubstitute(glyphs.slice(1, 3), 'pref')) {
            return POSITIONS.Post_C;
          }

          return POSITIONS.Base_C;
        }

        function initialReordering(font, glyphs, plan) {
          var indicConfig = plan.indicConfig;
          var features = font._layoutEngine.engine.GSUBProcessor.features;
          var dottedCircle = font.glyphForCodePoint(0x25cc).id;
          var virama = font.glyphForCodePoint(indicConfig.virama).id;

          if (virama) {
            var info = new GlyphInfo(font, virama, [indicConfig.virama]);

            for (var i = 0; i < glyphs.length; i++) {
              if (glyphs[i].shaperInfo.position === POSITIONS.Base_C) {
                glyphs[i].shaperInfo.position = consonantPosition(font, glyphs[i].copy(), info);
              }
            }
          }

          for (var start = 0, end = nextSyllable(glyphs, 0); start < glyphs.length; start = end, end = nextSyllable(glyphs, start)) {
            var _glyphs$start$shaperI = glyphs[start].shaperInfo,
                category = _glyphs$start$shaperI.category,
                syllableType = _glyphs$start$shaperI.syllableType;

            if (syllableType === 'symbol_cluster' || syllableType === 'non_indic_cluster') {
              continue;
            }

            if (syllableType === 'broken_cluster' && dottedCircle) {
              var g = new GlyphInfo(font, dottedCircle, [0x25cc]);
              g.shaperInfo = new IndicInfo(1 << indicCategory(g), indicPosition(g), glyphs[start].shaperInfo.syllableType, glyphs[start].shaperInfo.syllable); // Insert after possible Repha.

              var _i5 = start;

              while (_i5 < end && glyphs[_i5].shaperInfo.category === CATEGORIES.Repha) {
                _i5++;
              }

              glyphs.splice(_i5++, 0, g);
              end++;
            } // 1. Find base consonant:
            //
            // The shaping engine finds the base consonant of the syllable, using the
            // following algorithm: starting from the end of the syllable, move backwards
            // until a consonant is found that does not have a below-base or post-base
            // form (post-base forms have to follow below-base forms), or that is not a
            // pre-base reordering Ra, or arrive at the first consonant. The consonant
            // stopped at will be the base.


            var base = end;
            var limit = start;
            var hasReph = false; // If the syllable starts with Ra + Halant (in a script that has Reph)
            // and has more than one consonant, Ra is excluded from candidates for
            // base consonants.

            if (indicConfig.rephPos !== POSITIONS.Ra_To_Become_Reph && features.rphf && start + 3 <= end && (indicConfig.rephMode === 'Implicit' && !isJoiner(glyphs[start + 2]) || indicConfig.rephMode === 'Explicit' && glyphs[start + 2].shaperInfo.category === CATEGORIES.ZWJ)) {
              // See if it matches the 'rphf' feature.
              var _g = [glyphs[start].copy(), glyphs[start + 1].copy(), glyphs[start + 2].copy()];

              if (wouldSubstitute(_g.slice(0, 2), 'rphf') || indicConfig.rephMode === 'Explicit' && wouldSubstitute(_g, 'rphf')) {
                limit += 2;

                while (limit < end && isJoiner(glyphs[limit])) {
                  limit++;
                }

                base = start;
                hasReph = true;
              }
            } else if (indicConfig.rephMode === 'Log_Repha' && glyphs[start].shaperInfo.category === CATEGORIES.Repha) {
              limit++;

              while (limit < end && isJoiner(glyphs[limit])) {
                limit++;
              }

              base = start;
              hasReph = true;
            }

            switch (indicConfig.basePos) {
              case 'Last':
                {
                  // starting from the end of the syllable, move backwards
                  var _i6 = end;
                  var seenBelow = false;

                  do {
                    var _info = glyphs[--_i6].shaperInfo; // until a consonant is found

                    if (isConsonant(glyphs[_i6])) {
                      // that does not have a below-base or post-base form
                      // (post-base forms have to follow below-base forms),
                      if (_info.position !== POSITIONS.Below_C && (_info.position !== POSITIONS.Post_C || seenBelow)) {
                        base = _i6;
                        break;
                      } // or that is not a pre-base reordering Ra,
                      //
                      // IMPLEMENTATION NOTES:
                      //
                      // Our pre-base reordering Ra's are marked POS_POST_C, so will be skipped
                      // by the logic above already.
                      //
                      // or arrive at the first consonant. The consonant stopped at will
                      // be the base.


                      if (_info.position === POSITIONS.Below_C) {
                        seenBelow = true;
                      }

                      base = _i6;
                    } else if (start < _i6 && _info.category === CATEGORIES.ZWJ && glyphs[_i6 - 1].shaperInfo.category === CATEGORIES.H) {
                      // A ZWJ after a Halant stops the base search, and requests an explicit
                      // half form.
                      // A ZWJ before a Halant, requests a subjoined form instead, and hence
                      // search continues.  This is particularly important for Bengali
                      // sequence Ra,H,Ya that should form Ya-Phalaa by subjoining Ya.
                      break;
                    }
                  } while (_i6 > limit);

                  break;
                }

              case 'First':
                {
                  // The first consonant is always the base.
                  base = start; // Mark all subsequent consonants as below.

                  for (var _i7 = base + 1; _i7 < end; _i7++) {
                    if (isConsonant(glyphs[_i7])) {
                      glyphs[_i7].shaperInfo.position = POSITIONS.Below_C;
                    }
                  }
                }
            } // If the syllable starts with Ra + Halant (in a script that has Reph)
            // and has more than one consonant, Ra is excluded from candidates for
            // base consonants.
            //
            //  Only do this for unforced Reph. (ie. not for Ra,H,ZWJ)


            if (hasReph && base === start && limit - base <= 2) {
              hasReph = false;
            } // 2. Decompose and reorder Matras:
            //
            // Each matra and any syllable modifier sign in the cluster are moved to the
            // appropriate position relative to the consonant(s) in the cluster. The
            // shaping engine decomposes two- or three-part matras into their constituent
            // parts before any repositioning. Matra characters are classified by which
            // consonant in a conjunct they have affinity for and are reordered to the
            // following positions:
            //
            //   o Before first half form in the syllable
            //   o After subjoined consonants
            //   o After post-form consonant
            //   o After main consonant (for above marks)
            //
            // IMPLEMENTATION NOTES:
            //
            // The normalize() routine has already decomposed matras for us, so we don't
            // need to worry about that.
            // 3.  Reorder marks to canonical order:
            //
            // Adjacent nukta and halant or nukta and vedic sign are always repositioned
            // if necessary, so that the nukta is first.
            //
            // IMPLEMENTATION NOTES:
            //
            // We don't need to do this: the normalize() routine already did this for us.
            // Reorder characters


            for (var _i8 = start; _i8 < base; _i8++) {
              var _info2 = glyphs[_i8].shaperInfo;
              _info2.position = Math.min(POSITIONS.Pre_C, _info2.position);
            }

            if (base < end) {
              glyphs[base].shaperInfo.position = POSITIONS.Base_C;
            } // Mark final consonants.  A final consonant is one appearing after a matra,
            // like in Khmer.


            for (var _i9 = base + 1; _i9 < end; _i9++) {
              if (glyphs[_i9].shaperInfo.category === CATEGORIES.M) {
                for (var j = _i9 + 1; j < end; j++) {
                  if (isConsonant(glyphs[j])) {
                    glyphs[j].shaperInfo.position = POSITIONS.Final_C;
                    break;
                  }
                }

                break;
              }
            } // Handle beginning Ra


            if (hasReph) {
              glyphs[start].shaperInfo.position = POSITIONS.Ra_To_Become_Reph;
            } // For old-style Indic script tags, move the first post-base Halant after
            // last consonant.
            //
            // Reports suggest that in some scripts Uniscribe does this only if there
            // is *not* a Halant after last consonant already (eg. Kannada), while it
            // does it unconditionally in other scripts (eg. Malayalam).  We don't
            // currently know about other scripts, so we single out Malayalam for now.
            //
            // Kannada test case:
            // U+0C9A,U+0CCD,U+0C9A,U+0CCD
            // With some versions of Lohit Kannada.
            // https://bugs.freedesktop.org/show_bug.cgi?id=59118
            //
            // Malayalam test case:
            // U+0D38,U+0D4D,U+0D31,U+0D4D,U+0D31,U+0D4D
            // With lohit-ttf-20121122/Lohit-Malayalam.ttf


            if (plan.isOldSpec) {
              var disallowDoubleHalants = plan.unicodeScript !== 'Malayalam';

              for (var _i10 = base + 1; _i10 < end; _i10++) {
                if (glyphs[_i10].shaperInfo.category === CATEGORIES.H) {
                  var _j = void 0;

                  for (_j = end - 1; _j > _i10; _j--) {
                    if (isConsonant(glyphs[_j]) || disallowDoubleHalants && glyphs[_j].shaperInfo.category === CATEGORIES.H) {
                      break;
                    }
                  }

                  if (glyphs[_j].shaperInfo.category !== CATEGORIES.H && _j > _i10) {
                    // Move Halant to after last consonant.
                    var t = glyphs[_i10];
                    glyphs.splice.apply(glyphs, [_i10, 0].concat(glyphs.splice(_i10 + 1, _j - _i10)));
                    glyphs[_j] = t;
                  }

                  break;
                }
              }
            } // Attach misc marks to previous char to move with them.


            var lastPos = POSITIONS.Start;

            for (var _i11 = start; _i11 < end; _i11++) {
              var _info3 = glyphs[_i11].shaperInfo;

              if (_info3.category & (JOINER_FLAGS | CATEGORIES.N | CATEGORIES.RS | CATEGORIES.CM | HALANT_OR_COENG_FLAGS & _info3.category)) {
                _info3.position = lastPos;

                if (_info3.category === CATEGORIES.H && _info3.position === POSITIONS.Pre_M) {
                  // Uniscribe doesn't move the Halant with Left Matra.
                  // TEST: U+092B,U+093F,U+094DE
                  // We follow.  This is important for the Sinhala
                  // U+0DDA split matra since it decomposes to U+0DD9,U+0DCA
                  // where U+0DD9 is a left matra and U+0DCA is the virama.
                  // We don't want to move the virama with the left matra.
                  // TEST: U+0D9A,U+0DDA
                  for (var _j2 = _i11; _j2 > start; _j2--) {
                    if (glyphs[_j2 - 1].shaperInfo.position !== POSITIONS.Pre_M) {
                      _info3.position = glyphs[_j2 - 1].shaperInfo.position;
                      break;
                    }
                  }
                }
              } else if (_info3.position !== POSITIONS.SMVD) {
                lastPos = _info3.position;
              }
            } // For post-base consonants let them own anything before them
            // since the last consonant or matra.


            var last = base;

            for (var _i12 = base + 1; _i12 < end; _i12++) {
              if (isConsonant(glyphs[_i12])) {
                for (var _j3 = last + 1; _j3 < _i12; _j3++) {
                  if (glyphs[_j3].shaperInfo.position < POSITIONS.SMVD) {
                    glyphs[_j3].shaperInfo.position = glyphs[_i12].shaperInfo.position;
                  }
                }

                last = _i12;
              } else if (glyphs[_i12].shaperInfo.category === CATEGORIES.M) {
                last = _i12;
              }
            }

            var arr = glyphs.slice(start, end);
            arr.sort(function (a, b) {
              return a.shaperInfo.position - b.shaperInfo.position;
            });
            glyphs.splice.apply(glyphs, [start, arr.length].concat(arr)); // Find base again

            for (var _i13 = start; _i13 < end; _i13++) {
              if (glyphs[_i13].shaperInfo.position === POSITIONS.Base_C) {
                base = _i13;
                break;
              }
            } // Setup features now
            // Reph


            for (var _i14 = start; _i14 < end && glyphs[_i14].shaperInfo.position === POSITIONS.Ra_To_Become_Reph; _i14++) {
              glyphs[_i14].features.rphf = true;
            } // Pre-base


            var blwf = !plan.isOldSpec && indicConfig.blwfMode === 'Pre_And_Post';

            for (var _i15 = start; _i15 < base; _i15++) {
              glyphs[_i15].features.half = true;

              if (blwf) {
                glyphs[_i15].features.blwf = true;
              }
            } // Post-base


            for (var _i16 = base + 1; _i16 < end; _i16++) {
              glyphs[_i16].features.abvf = true;
              glyphs[_i16].features.pstf = true;
              glyphs[_i16].features.blwf = true;
            }

            if (plan.isOldSpec && plan.unicodeScript === 'Devanagari') {
              // Old-spec eye-lash Ra needs special handling.  From the
              // spec:
              //
              // "The feature 'below-base form' is applied to consonants
              // having below-base forms and following the base consonant.
              // The exception is vattu, which may appear below half forms
              // as well as below the base glyph. The feature 'below-base
              // form' will be applied to all such occurrences of Ra as well."
              //
              // Test case: U+0924,U+094D,U+0930,U+094d,U+0915
              // with Sanskrit 2003 font.
              //
              // However, note that Ra,Halant,ZWJ is the correct way to
              // request eyelash form of Ra, so we wouldbn't inhibit it
              // in that sequence.
              //
              // Test case: U+0924,U+094D,U+0930,U+094d,U+200D,U+0915
              for (var _i17 = start; _i17 + 1 < base; _i17++) {
                if (glyphs[_i17].shaperInfo.category === CATEGORIES.Ra && glyphs[_i17 + 1].shaperInfo.category === CATEGORIES.H && (_i17 + 1 === base || glyphs[_i17 + 2].shaperInfo.category === CATEGORIES.ZWJ)) {
                  glyphs[_i17].features.blwf = true;
                  glyphs[_i17 + 1].features.blwf = true;
                }
              }
            }

            var prefLen = 2;

            if (features.pref && base + prefLen < end) {
              // Find a Halant,Ra sequence and mark it for pre-base reordering processing.
              for (var _i18 = base + 1; _i18 + prefLen - 1 < end; _i18++) {
                var _g2 = [glyphs[_i18].copy(), glyphs[_i18 + 1].copy()];

                if (wouldSubstitute(_g2, 'pref')) {
                  for (var _j4 = 0; _j4 < prefLen; _j4++) {
                    glyphs[_i18++].features.pref = true;
                  } // Mark the subsequent stuff with 'cfar'.  Used in Khmer.
                  // Read the feature spec.
                  // This allows distinguishing the following cases with MS Khmer fonts:
                  // U+1784,U+17D2,U+179A,U+17D2,U+1782
                  // U+1784,U+17D2,U+1782,U+17D2,U+179A


                  if (features.cfar) {
                    for (; _i18 < end; _i18++) {
                      glyphs[_i18].features.cfar = true;
                    }
                  }

                  break;
                }
              }
            } // Apply ZWJ/ZWNJ effects


            for (var _i19 = start + 1; _i19 < end; _i19++) {
              if (isJoiner(glyphs[_i19])) {
                var nonJoiner = glyphs[_i19].shaperInfo.category === CATEGORIES.ZWNJ;
                var _j5 = _i19;

                do {
                  _j5--; // ZWJ/ZWNJ should disable CJCT.  They do that by simply
                  // being there, since we don't skip them for the CJCT
                  // feature (ie. F_MANUAL_ZWJ)
                  // A ZWNJ disables HALF.

                  if (nonJoiner) {
                    delete glyphs[_j5].features.half;
                  }
                } while (_j5 > start && !isConsonant(glyphs[_j5]));
              }
            }
          }
        }

        function finalReordering(font, glyphs, plan) {
          var indicConfig = plan.indicConfig;
          var features = font._layoutEngine.engine.GSUBProcessor.features;

          for (var start = 0, end = nextSyllable(glyphs, 0); start < glyphs.length; start = end, end = nextSyllable(glyphs, start)) {
            // 4. Final reordering:
            //
            // After the localized forms and basic shaping forms GSUB features have been
            // applied (see below), the shaping engine performs some final glyph
            // reordering before applying all the remaining font features to the entire
            // cluster.
            var tryPref = !!features.pref; // Find base again

            var base = start;

            for (; base < end; base++) {
              if (glyphs[base].shaperInfo.position >= POSITIONS.Base_C) {
                if (tryPref && base + 1 < end) {
                  for (var i = base + 1; i < end; i++) {
                    if (glyphs[i].features.pref) {
                      if (!(glyphs[i].substituted && glyphs[i].isLigated && !glyphs[i].isMultiplied)) {
                        // Ok, this was a 'pref' candidate but didn't form any.
                        // Base is around here...
                        base = i;

                        while (base < end && isHalantOrCoeng(glyphs[base])) {
                          base++;
                        }

                        glyphs[base].shaperInfo.position = POSITIONS.BASE_C;
                        tryPref = false;
                      }

                      break;
                    }
                  }
                } // For Malayalam, skip over unformed below- (but NOT post-) forms.


                if (plan.unicodeScript === 'Malayalam') {
                  for (var _i20 = base + 1; _i20 < end; _i20++) {
                    while (_i20 < end && isJoiner(glyphs[_i20])) {
                      _i20++;
                    }

                    if (_i20 === end || !isHalantOrCoeng(glyphs[_i20])) {
                      break;
                    }

                    _i20++; // Skip halant.

                    while (_i20 < end && isJoiner(glyphs[_i20])) {
                      _i20++;
                    }

                    if (_i20 < end && isConsonant(glyphs[_i20]) && glyphs[_i20].shaperInfo.position === POSITIONS.Below_C) {
                      base = _i20;
                      glyphs[base].shaperInfo.position = POSITIONS.Base_C;
                    }
                  }
                }

                if (start < base && glyphs[base].shaperInfo.position > POSITIONS.Base_C) {
                  base--;
                }

                break;
              }
            }

            if (base === end && start < base && glyphs[base - 1].shaperInfo.category === CATEGORIES.ZWJ) {
              base--;
            }

            if (base < end) {
              while (start < base && glyphs[base].shaperInfo.category & (CATEGORIES.N | HALANT_OR_COENG_FLAGS)) {
                base--;
              }
            } // o Reorder matras:
            //
            // If a pre-base matra character had been reordered before applying basic
            // features, the glyph can be moved closer to the main consonant based on
            // whether half-forms had been formed. Actual position for the matra is
            // defined as “after last standalone halant glyph, after initial matra
            // position and before the main consonant”. If ZWJ or ZWNJ follow this
            // halant, position is moved after it.
            //


            if (start + 1 < end && start < base) {
              // Otherwise there can't be any pre-base matra characters.
              // If we lost track of base, alas, position before last thingy.
              var newPos = base === end ? base - 2 : base - 1; // Malayalam / Tamil do not have "half" forms or explicit virama forms.
              // The glyphs formed by 'half' are Chillus or ligated explicit viramas.
              // We want to position matra after them.

              if (plan.unicodeScript !== 'Malayalam' && plan.unicodeScript !== 'Tamil') {
                while (newPos > start && !(glyphs[newPos].shaperInfo.category & (CATEGORIES.M | HALANT_OR_COENG_FLAGS))) {
                  newPos--;
                } // If we found no Halant we are done.
                // Otherwise only proceed if the Halant does
                // not belong to the Matra itself!


                if (isHalantOrCoeng(glyphs[newPos]) && glyphs[newPos].shaperInfo.position !== POSITIONS.Pre_M) {
                  // If ZWJ or ZWNJ follow this halant, position is moved after it.
                  if (newPos + 1 < end && isJoiner(glyphs[newPos + 1])) {
                    newPos++;
                  }
                } else {
                  newPos = start; // No move.
                }
              }

              if (start < newPos && glyphs[newPos].shaperInfo.position !== POSITIONS.Pre_M) {
                // Now go see if there's actually any matras...
                for (var _i21 = newPos; _i21 > start; _i21--) {
                  if (glyphs[_i21 - 1].shaperInfo.position === POSITIONS.Pre_M) {
                    var oldPos = _i21 - 1;

                    if (oldPos < base && base <= newPos) {
                      // Shouldn't actually happen.
                      base--;
                    }

                    var tmp = glyphs[oldPos];
                    glyphs.splice.apply(glyphs, [oldPos, 0].concat(glyphs.splice(oldPos + 1, newPos - oldPos)));
                    glyphs[newPos] = tmp;
                    newPos--;
                  }
                }
              }
            } // o Reorder reph:
            //
            // Reph’s original position is always at the beginning of the syllable,
            // (i.e. it is not reordered at the character reordering stage). However,
            // it will be reordered according to the basic-forms shaping results.
            // Possible positions for reph, depending on the script, are; after main,
            // before post-base consonant forms, and after post-base consonant forms.
            // Two cases:
            //
            // - If repha is encoded as a sequence of characters (Ra,H or Ra,H,ZWJ), then
            //   we should only move it if the sequence ligated to the repha form.
            //
            // - If repha is encoded separately and in the logical position, we should only
            //   move it if it did NOT ligate.  If it ligated, it's probably the font trying
            //   to make it work without the reordering.


            if (start + 1 < end && glyphs[start].shaperInfo.position === POSITIONS.Ra_To_Become_Reph && glyphs[start].shaperInfo.category === CATEGORIES.Repha !== (glyphs[start].isLigated && !glyphs[start].isMultiplied)) {
              var newRephPos = void 0;
              var rephPos = indicConfig.rephPos;
              var found = false; // 1. If reph should be positioned after post-base consonant forms,
              //    proceed to step 5.

              if (rephPos !== POSITIONS.After_Post) {
                //  2. If the reph repositioning class is not after post-base: target
                //     position is after the first explicit halant glyph between the
                //     first post-reph consonant and last main consonant. If ZWJ or ZWNJ
                //     are following this halant, position is moved after it. If such
                //     position is found, this is the target position. Otherwise,
                //     proceed to the next step.
                //
                //     Note: in old-implementation fonts, where classifications were
                //     fixed in shaping engine, there was no case where reph position
                //     will be found on this step.
                newRephPos = start + 1;

                while (newRephPos < base && !isHalantOrCoeng(glyphs[newRephPos])) {
                  newRephPos++;
                }

                if (newRephPos < base && isHalantOrCoeng(glyphs[newRephPos])) {
                  // ->If ZWJ or ZWNJ are following this halant, position is moved after it.
                  if (newRephPos + 1 < base && isJoiner(glyphs[newRephPos + 1])) {
                    newRephPos++;
                  }

                  found = true;
                } // 3. If reph should be repositioned after the main consonant: find the
                //    first consonant not ligated with main, or find the first
                //    consonant that is not a potential pre-base reordering Ra.


                if (!found && rephPos === POSITIONS.After_Main) {
                  newRephPos = base;

                  while (newRephPos + 1 < end && glyphs[newRephPos + 1].shaperInfo.position <= POSITIONS.After_Main) {
                    newRephPos++;
                  }

                  found = newRephPos < end;
                } // 4. If reph should be positioned before post-base consonant, find
                //    first post-base classified consonant not ligated with main. If no
                //    consonant is found, the target position should be before the
                //    first matra, syllable modifier sign or vedic sign.
                //
                // This is our take on what step 4 is trying to say (and failing, BADLY).


                if (!found && rephPos === POSITIONS.After_Sub) {
                  newRephPos = base;

                  while (newRephPos + 1 < end && !(glyphs[newRephPos + 1].shaperInfo.position & (POSITIONS.Post_C | POSITIONS.After_Post | POSITIONS.SMVD))) {
                    newRephPos++;
                  }

                  found = newRephPos < end;
                }
              } //  5. If no consonant is found in steps 3 or 4, move reph to a position
              //     immediately before the first post-base matra, syllable modifier
              //     sign or vedic sign that has a reordering class after the intended
              //     reph position. For example, if the reordering position for reph
              //     is post-main, it will skip above-base matras that also have a
              //     post-main position.


              if (!found) {
                // Copied from step 2.
                newRephPos = start + 1;

                while (newRephPos < base && !isHalantOrCoeng(glyphs[newRephPos])) {
                  newRephPos++;
                }

                if (newRephPos < base && isHalantOrCoeng(glyphs[newRephPos])) {
                  // ->If ZWJ or ZWNJ are following this halant, position is moved after it.
                  if (newRephPos + 1 < base && isJoiner(glyphs[newRephPos + 1])) {
                    newRephPos++;
                  }

                  found = true;
                }
              } // 6. Otherwise, reorder reph to the end of the syllable.


              if (!found) {
                newRephPos = end - 1;

                while (newRephPos > start && glyphs[newRephPos].shaperInfo.position === POSITIONS.SMVD) {
                  newRephPos--;
                } // If the Reph is to be ending up after a Matra,Halant sequence,
                // position it before that Halant so it can interact with the Matra.
                // However, if it's a plain Consonant,Halant we shouldn't do that.
                // Uniscribe doesn't do this.
                // TEST: U+0930,U+094D,U+0915,U+094B,U+094D


                if (isHalantOrCoeng(glyphs[newRephPos])) {
                  for (var _i22 = base + 1; _i22 < newRephPos; _i22++) {
                    if (glyphs[_i22].shaperInfo.category === CATEGORIES.M) {
                      newRephPos--;
                    }
                  }
                }
              }

              var reph = glyphs[start];
              glyphs.splice.apply(glyphs, [start, 0].concat(glyphs.splice(start + 1, newRephPos - start)));
              glyphs[newRephPos] = reph;

              if (start < base && base <= newRephPos) {
                base--;
              }
            } // o Reorder pre-base reordering consonants:
            //
            // If a pre-base reordering consonant is found, reorder it according to
            // the following rules:


            if (tryPref && base + 1 < end) {
              for (var _i23 = base + 1; _i23 < end; _i23++) {
                if (glyphs[_i23].features.pref) {
                  // 1. Only reorder a glyph produced by substitution during application
                  //    of the <pref> feature. (Note that a font may shape a Ra consonant with
                  //    the feature generally but block it in certain contexts.)
                  // Note: We just check that something got substituted.  We don't check that
                  // the <pref> feature actually did it...
                  //
                  // Reorder pref only if it ligated.
                  if (glyphs[_i23].isLigated && !glyphs[_i23].isMultiplied) {
                    // 2. Try to find a target position the same way as for pre-base matra.
                    //    If it is found, reorder pre-base consonant glyph.
                    //
                    // 3. If position is not found, reorder immediately before main
                    //    consonant.
                    var _newPos = base; // Malayalam / Tamil do not have "half" forms or explicit virama forms.
                    // The glyphs formed by 'half' are Chillus or ligated explicit viramas.
                    // We want to position matra after them.

                    if (plan.unicodeScript !== 'Malayalam' && plan.unicodeScript !== 'Tamil') {
                      while (_newPos > start && !(glyphs[_newPos - 1].shaperInfo.category & (CATEGORIES.M | HALANT_OR_COENG_FLAGS))) {
                        _newPos--;
                      } // In Khmer coeng model, a H,Ra can go *after* matras.  If it goes after a
                      // split matra, it should be reordered to *before* the left part of such matra.


                      if (_newPos > start && glyphs[_newPos - 1].shaperInfo.category === CATEGORIES.M) {
                        var _oldPos2 = _i23;

                        for (var j = base + 1; j < _oldPos2; j++) {
                          if (glyphs[j].shaperInfo.category === CATEGORIES.M) {
                            _newPos--;
                            break;
                          }
                        }
                      }
                    }

                    if (_newPos > start && isHalantOrCoeng(glyphs[_newPos - 1])) {
                      // -> If ZWJ or ZWNJ follow this halant, position is moved after it.
                      if (_newPos < end && isJoiner(glyphs[_newPos])) {
                        _newPos++;
                      }
                    }

                    var _oldPos = _i23;
                    var _tmp = glyphs[_oldPos];
                    glyphs.splice.apply(glyphs, [_newPos + 1, 0].concat(glyphs.splice(_newPos, _oldPos - _newPos)));
                    glyphs[_newPos] = _tmp;

                    if (_newPos <= base && base < _oldPos) {
                      base++;
                    }
                  }

                  break;
                }
              }
            } // Apply 'init' to the Left Matra if it's a word start.


            if (glyphs[start].shaperInfo.position === POSITIONS.Pre_M && (!start || !/Cf|Mn/.test(unicode.getCategory(glyphs[start - 1].codePoints[0])))) {
              glyphs[start].features.init = true;
            }
          }
        }

        function nextSyllable(glyphs, start) {
          if (start >= glyphs.length) return start;
          var syllable = glyphs[start].shaperInfo.syllable;

          while (++start < glyphs.length && glyphs[start].shaperInfo.syllable === syllable) {}

          return start;
        }

        var _class$7;

        var _temp$3;

        var categories$1 = useData.categories;
        var decompositions$2 = useData.decompositions;
        var trie$2 = new UnicodeTrie(Buffer("AAIAAAAAAAAAALoQAQUO+vHtnHuMX0UVx2d3u/t7bXe7FlqgvB+mpQhFmhikMRAg0ZQmakMU+cPWBzZisEGNjUpoiIYCEgmGUGOEGqOVNPUZUGNA+QNIBU2KREEFFSMBUYRISMXE+B3vnPzOzp553tcWfif5ZO5jnufMzJ2ZO/eumlDqFLAWnAMuBBvBZnC5uXZeBe4WsA1sBzs8/naCXcL1G8GtYDfYA74NvgfuAfcZHmT+fwEeBb8DTwvxPQWeAavACyZvq8z9VYxXwCGglijVBcvACnA8eCM4E6wHG8BF4BLwbvA+8AHwUbAd7AA7wS5wC9gN7gR7wX5wN7gXPAAeBr8Gvwd/Ac+CF8EhoCaV6oBZsBKcAE4FZ0wWeV8P9zxwoTnfCHczuBxsAdvAx8Gnzf1r4X4B3AxuA1+bHJb9m5PzdVGW/Yjv+xXHyfmxFfd9OH8Q/Ar8Bjw1WZT3GfACeAX8N5CfqSmlZsAKsGqqCH8K3DXgbHCuuXYB3HeAd4HLpgrdarbi+EPgY+CT4HPg8ybMTcb9MtyvghtYut/A+b4pf95+ELgfw08Qx/3gADgInjDl0veehPtX8A/wsrn2KtzxDuogWNoJx38k/BzXKeI8Ee5qcBZYD9aZtDbg+AwT19uMX83F7JizCdcvBZdZ97c6/BMfMWmfzfTm88/95aLj+DDSvApcDXZ04uPfaen3TMHPLvi5BezuFPVtD4t/qUcfe3FvP7gb3Ouwo9T+H+gMy/UIjh8DfwBPm7T08d/M8WMBe1Sh3xEjXo+M2s+IESNGjBgxYsSI1wLrOsM1gRsi/P+TzV3/Zc1jvxgR/j8IM9Et1mEGcJeDFeA4cJq5/ia467uF/w1wzwdvB+80998LdwvYZs63w90Bdnbd6Wp/uzz3R4wYMWJEvZzTMm2Xf8SIEfVQd/v+EsaPt3eL90J3wP2WMJ78Trd4t6+P77Hu37cIxp9/ny6YXqrUJeCR6TA74e/nll81MzxejeMtYA94HBwy91bPYow+O/S3A8d7oIM/gRN7CAP29Iqx/B1ThfuwOecM+vA3NmRjf6Gfm3BtH7v+PI7XDpS6EuwDz4O10+0/f9om1F4ehO4OmHp6EO7jxl56nvhsN/15ut+4Z0b657yYkZ7UJ0jhX0bcr3bn+6P87vekN4762QNzvWHZtL+jcH5srzg/uTf0f3pvfj5i+6tYW7rK9+aefO+tuL4BXAQ2gs3gPeBJc//9OL4CXAWuNvc/A64DN4Jbwe0s7jtxvBfsAz8EPwX3gwPgoJAHPQ9/Atf/bO7p/TTP4fglwS/5/zfujfWH5z0cz4Gj+8X5Sf1ib4m+vwbHZ/fdOtP+z+3LOnPp/QL4vxhsApeCy8BWk/a2ftFmYu22Hf4/Ba4B14Hrwc0sP7fh+Cvg6+Au8F1WthA/8pT7UeTxZ/12njkuXT8UyM9i6iur1EEb6f+yPz/eg0b3v4X7x365fMaW42lPu7PTv6vi8i/G+lWF/cvUk7bLl1r+5/rN5tu3j2qvWTd/qV+4h+AqjDGnBsX59GDo94iBXDa6v6Yjl6vu+h8itJcsZq/ZykHhHg/3tMHhUe9s/Yfuny7YNxTvQ8LYdrER2+/c0GBezhrMv3ZNRv7PmYirh7oOv4W1Y72/cwPOzx8U7X8d2295sfE3MPnbBPfSQbHv9nK4HxTqiK/trI7Yy5mLzvuVg/nX+N7V51A3r+gMy/4J434W7l2dYf5PZWGuNX6uh3uzEPetuLY7sZ20zTETY2oxyBhj3DrnfsidYPeXRGLHpxzX6pbFofGRkFBdGhcgW40L4cYtd9JAElO36q4LEzXHX7VMtZ2BEhJjy9dT25fazOtJxhwsBrHzwfu8w12kMYN9fLhIbp2RxlI59rX1dzjpsKl2Fxt3iu6rbofc9q5+KcRrXVzzDn6/Crvk6p/y1GFgGhs9/6maHjBLgv8/18fTxl1q0bPoW8ywsFTGWaazHosrNn/kP2eeqEroZYLZphsZl7L82eephMIqNT8dyT9JjH1Jpg32ubZvTB/SF665ymSnnaqjUHum+1Qn+NyOtz9f2r6y5OQ51b6hYy0D40r2tYXar30+Y/mbVX6JqY+hMC60XZapoh3S/HdOpT3DYu3rs0lKnquyb277JZvyPlqp+f1zVVK2/dJYNpQGf04uYyh1+PTPqfalZ2tO/xwSu+3bOrDzmWvfcTW/fLmibRx6lkvlcOlc8qsE/y5/rnSk67F1iAu1VT6+4jKt5tufn8e2b+n57JKcckhrsKG1Cd6Wu+Y8tf2l5DenPafqQZ/7xstKLeyr+XnInjSelvRgS9n27JPQM5n6Am7jmLG8VK6m7OvyS2L313XYV2r/tth5LWPfNxhyhI+1Up7HVbe/HMgeZE8brtNQ/7tcyX0cn//H2LTO9kpir5VI6yYp9szJW9W2jI1Tqfl5ic2v1GZ5XaG6RDZbyvxMO/DVh1SdUj5y1vraaHs+2/TYNXvtSRoXk4wrf9w6fEctnFt0zL2y+xFsfSrLza2zOTqMiZv8xOpbn8+xsL5ykdj6VsxNKb/Lvxb7nX8u48y1x6yuMW3V9tNxTlouzXslibVxndjC14xda8g2NIbg5x01XAP2lfeIBFSi/zrQEporTXru8fCueiy1CUnqrhspSM9SzbSS64tep9R1ZsZcOxKsUEUfNZeYtr0vjY5DeXW915hT8/PRV8MxlR1HV4DHZZc9R7dzajgWoXikdLtGr0uEfPigsGS/NvYjSHW87XejoXZehZ74XrcqpQ4d5T5f7Gu8f6g7fQmefoqOqk4/VarQv2o4/VDetPDnhjR2dc3BCBp/9NVw7KGfwStVMf6aZNAajj6224j9HCZbpZa/LvH1gU30i/q5WnUdSNEprxv2eIOwx2pcjjLMsmObo008k0J4u69P3d9QdbspW/dy080Nb8PXqcrmj0vsc7tu6qwD1A5oLYr3U3XWSxqj6/a10nCMkudJMyxvrvbK55jUrqU+Xlr/Iai98jY7mVAml5QNHxq31j2m5TrSdmp6z5p+9kpzQntdQbI1Pafr6I9C60gxrALHGtdF6tyhLTtxeBuW+hhqyzPMX931xl6rJ5f6n5h3blpsW7vKbvdBfL1gpYfjDLrvob1drrRT+mcuMf1OrJSdW/P+RfufdUB+pOtdTzhpL5t0jfKr46P3obQfQdPGt1jS+DEkx4MT2PmEg1j72OthqfZNWX+JuZ4at/2sTAmn5cSIMqZIjk0pnD0+aUI6YS9ekdaspWsp8cWEC62dS66UTkq+ypajyvXSlPz4xhQhm/ns6wpXBVI560jHN9aKkdT46spvWT916rONdHNsGSNtl6Hp8oakTVukpF9n3U3Jx0TNefbp3R4jltVfFfpvQkJpNaH/puyco++qbZPz7sE1L3DFGVovc4XPLUPO3ELyrzLiSpmPhaTJfqeJ+t60PiTh9snNW2656upDQ+Wtyg6ueJquB7HSVPspW9a28lDWJouhb6iyv7XjTfVL67j2vjDpvUfMt1Vl4GvctMaeq/vYcFWXIfV5Ku3XaxK951H6dsWFrhcxa3pU/pz3C1xc71tTcaXjGjtJbYIj7UHm7wxSyx+D/d7SfpfJ3wPpfSQp32tS2dt8V2tD7+Bce3rpPa3eC6Dr8Ulq+K+J3HFvbn312Zv2RdStr9g0pP0P/B04XbP3Q8cIT2dlRF6orkrhY/Rv27FqHfL1DP480ffo/V6V7aTHXLKDbTdXOOrnyG1ScvSv6xqve30lPzdpj36M8Pilb+L5vr0xE3dd30nWIfZ45uSSxK4x+CRmTUK6F/LrSsfnj+aOdYyvpXyMK7/OpHWjlDTsa0rJum5K7Ppnj7F9c+0q0qtr7pQji2X9oMwcVrJfmblwU2V2SV3rEk3YuO46XXf8MfrQz077G2zftyDkj/ZqhcZr9nldkOg5ykAt3GunJbR3NGYsUfWafd3ts853C4dLHppOM6WcfM5C+xSbaC/2HMa1H9v1vXdoXm/LKSVpYh5wqmr/X67SfwHtPc9a97p/k8bt0hpbW0j1Svr2m+7Rd98qIQ1pvSF273dKOjHYNmk6fd8/JX3tWIddblBqoU5p7zrZKnd9TppjVq0DSitWqkwz12b2exb7vwjaRvS/TFd/S+8AYvIo+Suri5TwvvZRdV1IQevQ1/8SA+UeH5eto7n/X1Oe86ptaafl8kPjcF7P7W93eD9d5n+oSvn7fFe7I/G9q1IBfylSR71N6fft94ZU18hOXKR+JqUO8f4+5dvLsmWlMQb/Vov+CUDlpTGUndeQlG3fdZWdRPoPgl3mmDlsLnaey/4X3tVuU+o6L3/Pym+qlLV/jk6rlBRd8394hZ6JdnuqIv2ykOh3pfq96Wkq/E8qu2xl88/tOJ4R3tfmpbGi3c5T859bzqr7MbsN03iI5itUNj5eaEKWqIX/KJCQ/iFWNZMmHXs8ovWk53JzFq5vPul6zDjLV36pX7bzvNzB0YlQOZephWtRS5T7eeSq8030R77/HvC1d7tN83Zt9yltrDdwSR0XxsZd5l+MvvvU1/M9jSnj+Nh6FPJbBld/w6XHXH5MZeXrOfS/65g9RTl1JCa8chzX2RZ9/3lXSh4/VqWfEBNq4b82Ytp6m+9Qqxir1jX+rfPdT1vvsWhM6bPbmON6E1LnPCZW7L0qqXswmtqf0MQelZj4myrzYtzvIYmURlvtqapyx+gzRfd0XPfahVSOquMoG+dibBdl46iyfdbV1qvUW9m8+KTudMvkzZe/pqTJ+pWTflX5zw1fVfox6ZTVc8hvHflOSb+OuG1JsZ0kufXAJf8D", "base64"));
        var stateMachine$1 = new StateMachine(useData);
        /**
         * This shaper is an implementation of the Universal Shaping Engine, which
         * uses Unicode data to shape a number of scripts without a dedicated shaping engine.
         * See https://www.microsoft.com/typography/OpenTypeDev/USE/intro.htm.
         */

        var UniversalShaper = (_temp$3 = _class$7 = function (_DefaultShaper) {
          _inherits(UniversalShaper, _DefaultShaper);

          function UniversalShaper() {
            _classCallCheck(this, UniversalShaper);

            return _possibleConstructorReturn(this, _DefaultShaper.apply(this, arguments));
          }

          UniversalShaper.planFeatures = function planFeatures(plan) {
            plan.addStage(setupSyllables$1); // Default glyph pre-processing group

            plan.addStage(['locl', 'ccmp', 'nukt', 'akhn']); // Reordering group

            plan.addStage(clearSubstitutionFlags);
            plan.addStage(['rphf'], false);
            plan.addStage(recordRphf);
            plan.addStage(clearSubstitutionFlags);
            plan.addStage(['pref']);
            plan.addStage(recordPref); // Orthographic unit shaping group

            plan.addStage(['rkrf', 'abvf', 'blwf', 'half', 'pstf', 'vatu', 'cjct']);
            plan.addStage(reorder); // Topographical features
            // Scripts that need this are handled by the Arabic shaper, not implemented here for now.
            // plan.addStage(['isol', 'init', 'medi', 'fina', 'med2', 'fin2', 'fin3'], false);
            // Standard topographic presentation and positional feature application

            plan.addStage(['abvs', 'blws', 'pres', 'psts', 'dist', 'abvm', 'blwm']);
          };

          UniversalShaper.assignFeatures = function assignFeatures(plan, glyphs) {
            var _loop = function _loop(i) {
              var codepoint = glyphs[i].codePoints[0];

              if (decompositions$2[codepoint]) {
                var decomposed = decompositions$2[codepoint].map(function (c) {
                  var g = plan.font.glyphForCodePoint(c);
                  return new GlyphInfo(plan.font, g.id, [c], glyphs[i].features);
                });
                glyphs.splice.apply(glyphs, [i, 1].concat(decomposed));
              }
            }; // Decompose split vowels
            // TODO: do this in a more general unicode normalizer


            for (var i = glyphs.length - 1; i >= 0; i--) {
              _loop(i);
            }
          };

          return UniversalShaper;
        }(DefaultShaper), _class$7.zeroMarkWidths = 'BEFORE_GPOS', _temp$3);

        function useCategory(glyph) {
          return trie$2.get(glyph.codePoints[0]);
        }

        var USEInfo = function USEInfo(category, syllableType, syllable) {
          _classCallCheck(this, USEInfo);

          this.category = category;
          this.syllableType = syllableType;
          this.syllable = syllable;
        };

        function setupSyllables$1(font, glyphs) {
          var syllable = 0;

          for (var _iterator = stateMachine$1.match(glyphs.map(useCategory)), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
            var _ref;

            if (_isArray) {
              if (_i >= _iterator.length) break;
              _ref = _iterator[_i++];
            } else {
              _i = _iterator.next();
              if (_i.done) break;
              _ref = _i.value;
            }

            var _ref2 = _ref,
                start = _ref2[0],
                end = _ref2[1],
                tags = _ref2[2];
            ++syllable; // Create shaper info

            for (var i = start; i <= end; i++) {
              glyphs[i].shaperInfo = new USEInfo(categories$1[useCategory(glyphs[i])], tags[0], syllable);
            } // Assign rphf feature


            var limit = glyphs[start].shaperInfo.category === 'R' ? 1 : Math.min(3, end - start);

            for (var _i2 = start; _i2 < start + limit; _i2++) {
              glyphs[_i2].features.rphf = true;
            }
          }
        }

        function clearSubstitutionFlags(font, glyphs) {
          for (var _iterator2 = glyphs, _isArray2 = Array.isArray(_iterator2), _i3 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
            var _ref3;

            if (_isArray2) {
              if (_i3 >= _iterator2.length) break;
              _ref3 = _iterator2[_i3++];
            } else {
              _i3 = _iterator2.next();
              if (_i3.done) break;
              _ref3 = _i3.value;
            }

            var glyph = _ref3;
            glyph.substituted = false;
          }
        }

        function recordRphf(font, glyphs) {
          for (var _iterator3 = glyphs, _isArray3 = Array.isArray(_iterator3), _i4 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
            var _ref4;

            if (_isArray3) {
              if (_i4 >= _iterator3.length) break;
              _ref4 = _iterator3[_i4++];
            } else {
              _i4 = _iterator3.next();
              if (_i4.done) break;
              _ref4 = _i4.value;
            }

            var glyph = _ref4;

            if (glyph.substituted && glyph.features.rphf) {
              // Mark a substituted repha.
              glyph.shaperInfo.category = 'R';
            }
          }
        }

        function recordPref(font, glyphs) {
          for (var _iterator4 = glyphs, _isArray4 = Array.isArray(_iterator4), _i5 = 0, _iterator4 = _isArray4 ? _iterator4 : _getIterator(_iterator4);;) {
            var _ref5;

            if (_isArray4) {
              if (_i5 >= _iterator4.length) break;
              _ref5 = _iterator4[_i5++];
            } else {
              _i5 = _iterator4.next();
              if (_i5.done) break;
              _ref5 = _i5.value;
            }

            var glyph = _ref5;

            if (glyph.substituted) {
              // Mark a substituted pref as VPre, as they behave the same way.
              glyph.shaperInfo.category = 'VPre';
            }
          }
        }

        function reorder(font, glyphs) {
          var dottedCircle = font.glyphForCodePoint(0x25cc).id;

          for (var start = 0, end = nextSyllable$1(glyphs, 0); start < glyphs.length; start = end, end = nextSyllable$1(glyphs, start)) {
            var i = void 0,
                j = void 0;
            var info = glyphs[start].shaperInfo;
            var type = info.syllableType; // Only a few syllable types need reordering.

            if (type !== 'virama_terminated_cluster' && type !== 'standard_cluster' && type !== 'broken_cluster') {
              continue;
            } // Insert a dotted circle glyph in broken clusters.


            if (type === 'broken_cluster' && dottedCircle) {
              var g = new GlyphInfo(font, dottedCircle, [0x25cc]);
              g.shaperInfo = info; // Insert after possible Repha.

              for (i = start; i < end && glyphs[i].shaperInfo.category === 'R'; i++) {}

              glyphs.splice(++i, 0, g);
              end++;
            } // Move things forward.


            if (info.category === 'R' && end - start > 1) {
              // Got a repha. Reorder it to after first base, before first halant.
              for (i = start + 1; i < end; i++) {
                info = glyphs[i].shaperInfo;

                if (isBase(info) || isHalant(glyphs[i])) {
                  // If we hit a halant, move before it; otherwise it's a base: move to it's
                  // place, and shift things in between backward.
                  if (isHalant(glyphs[i])) {
                    i--;
                  }

                  glyphs.splice.apply(glyphs, [start, 0].concat(glyphs.splice(start + 1, i - start), [glyphs[i]]));
                  break;
                }
              }
            } // Move things back.


            for (i = start, j = end; i < end; i++) {
              info = glyphs[i].shaperInfo;

              if (isBase(info) || isHalant(glyphs[i])) {
                // If we hit a halant, move after it; otherwise it's a base: move to it's
                // place, and shift things in between backward.
                j = isHalant(glyphs[i]) ? i + 1 : i;
              } else if ((info.category === 'VPre' || info.category === 'VMPre') && j < i) {
                glyphs.splice.apply(glyphs, [j, 1, glyphs[i]].concat(glyphs.splice(j, i - j)));
              }
            }
          }
        }

        function nextSyllable$1(glyphs, start) {
          if (start >= glyphs.length) return start;
          var syllable = glyphs[start].shaperInfo.syllable;

          while (++start < glyphs.length && glyphs[start].shaperInfo.syllable === syllable) {}

          return start;
        }

        function isHalant(glyph) {
          return glyph.shaperInfo.category === 'H' && !glyph.isLigated;
        }

        function isBase(info) {
          return info.category === 'B' || info.category === 'GB';
        }

        var SHAPERS = {
          arab: ArabicShaper,
          // Arabic
          mong: ArabicShaper,
          // Mongolian
          syrc: ArabicShaper,
          // Syriac
          'nko ': ArabicShaper,
          // N'Ko
          phag: ArabicShaper,
          // Phags Pa
          mand: ArabicShaper,
          // Mandaic
          mani: ArabicShaper,
          // Manichaean
          phlp: ArabicShaper,
          // Psalter Pahlavi
          hang: HangulShaper,
          // Hangul
          bng2: IndicShaper,
          // Bengali
          beng: IndicShaper,
          // Bengali
          dev2: IndicShaper,
          // Devanagari
          deva: IndicShaper,
          // Devanagari
          gjr2: IndicShaper,
          // Gujarati
          gujr: IndicShaper,
          // Gujarati
          guru: IndicShaper,
          // Gurmukhi
          gur2: IndicShaper,
          // Gurmukhi
          knda: IndicShaper,
          // Kannada
          knd2: IndicShaper,
          // Kannada
          mlm2: IndicShaper,
          // Malayalam
          mlym: IndicShaper,
          // Malayalam
          ory2: IndicShaper,
          // Oriya
          orya: IndicShaper,
          // Oriya
          taml: IndicShaper,
          // Tamil
          tml2: IndicShaper,
          // Tamil
          telu: IndicShaper,
          // Telugu
          tel2: IndicShaper,
          // Telugu
          khmr: IndicShaper,
          // Khmer
          bali: UniversalShaper,
          // Balinese
          batk: UniversalShaper,
          // Batak
          brah: UniversalShaper,
          // Brahmi
          bugi: UniversalShaper,
          // Buginese
          buhd: UniversalShaper,
          // Buhid
          cakm: UniversalShaper,
          // Chakma
          cham: UniversalShaper,
          // Cham
          dupl: UniversalShaper,
          // Duployan
          egyp: UniversalShaper,
          // Egyptian Hieroglyphs
          gran: UniversalShaper,
          // Grantha
          hano: UniversalShaper,
          // Hanunoo
          java: UniversalShaper,
          // Javanese
          kthi: UniversalShaper,
          // Kaithi
          kali: UniversalShaper,
          // Kayah Li
          khar: UniversalShaper,
          // Kharoshthi
          khoj: UniversalShaper,
          // Khojki
          sind: UniversalShaper,
          // Khudawadi
          lepc: UniversalShaper,
          // Lepcha
          limb: UniversalShaper,
          // Limbu
          mahj: UniversalShaper,
          // Mahajani
          // mand: UniversalShaper, // Mandaic
          // mani: UniversalShaper, // Manichaean
          mtei: UniversalShaper,
          // Meitei Mayek
          modi: UniversalShaper,
          // Modi
          // mong: UniversalShaper, // Mongolian
          // 'nko ': UniversalShaper, // N’Ko
          hmng: UniversalShaper,
          // Pahawh Hmong
          // phag: UniversalShaper, // Phags-pa
          // phlp: UniversalShaper, // Psalter Pahlavi
          rjng: UniversalShaper,
          // Rejang
          saur: UniversalShaper,
          // Saurashtra
          shrd: UniversalShaper,
          // Sharada
          sidd: UniversalShaper,
          // Siddham
          sinh: UniversalShaper,
          // Sinhala
          sund: UniversalShaper,
          // Sundanese
          sylo: UniversalShaper,
          // Syloti Nagri
          tglg: UniversalShaper,
          // Tagalog
          tagb: UniversalShaper,
          // Tagbanwa
          tale: UniversalShaper,
          // Tai Le
          lana: UniversalShaper,
          // Tai Tham
          tavt: UniversalShaper,
          // Tai Viet
          takr: UniversalShaper,
          // Takri
          tibt: UniversalShaper,
          // Tibetan
          tfng: UniversalShaper,
          // Tifinagh
          tirh: UniversalShaper,
          // Tirhuta
          latn: DefaultShaper,
          // Latin
          DFLT: DefaultShaper // Default

        };

        function choose(script) {
          if (!Array.isArray(script)) {
            script = [script];
          }

          for (var _iterator = script, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
            var _ref;

            if (_isArray) {
              if (_i >= _iterator.length) break;
              _ref = _iterator[_i++];
            } else {
              _i = _iterator.next();
              if (_i.done) break;
              _ref = _i.value;
            }

            var s = _ref;
            var shaper = SHAPERS[s];

            if (shaper) {
              return shaper;
            }
          }

          return DefaultShaper;
        }

        var GSUBProcessor = function (_OTProcessor) {
          _inherits(GSUBProcessor, _OTProcessor);

          function GSUBProcessor() {
            _classCallCheck(this, GSUBProcessor);

            return _possibleConstructorReturn(this, _OTProcessor.apply(this, arguments));
          }

          GSUBProcessor.prototype.applyLookup = function applyLookup(lookupType, table) {
            var _this2 = this;

            switch (lookupType) {
              case 1:
                {
                  // Single Substitution
                  var index = this.coverageIndex(table.coverage);

                  if (index === -1) {
                    return false;
                  }

                  var glyph = this.glyphIterator.cur;

                  switch (table.version) {
                    case 1:
                      glyph.id = glyph.id + table.deltaGlyphID & 0xffff;
                      break;

                    case 2:
                      glyph.id = table.substitute.get(index);
                      break;
                  }

                  return true;
                }

              case 2:
                {
                  // Multiple Substitution
                  var _index = this.coverageIndex(table.coverage);

                  if (_index !== -1) {
                    var _glyphs;

                    var sequence = table.sequences.get(_index);

                    if (sequence.length === 0) {
                      // If the sequence length is zero, delete the glyph.
                      // The OpenType spec disallows this, but seems like Harfbuzz and Uniscribe allow it.
                      this.glyphs.splice(this.glyphIterator.index, 1);
                      return true;
                    }

                    this.glyphIterator.cur.id = sequence[0];
                    this.glyphIterator.cur.ligatureComponent = 0;
                    var features = this.glyphIterator.cur.features;
                    var curGlyph = this.glyphIterator.cur;
                    var replacement = sequence.slice(1).map(function (gid, i) {
                      var glyph = new GlyphInfo(_this2.font, gid, undefined, features);
                      glyph.shaperInfo = curGlyph.shaperInfo;
                      glyph.isLigated = curGlyph.isLigated;
                      glyph.ligatureComponent = i + 1;
                      glyph.substituted = true;
                      glyph.isMultiplied = true;
                      return glyph;
                    });

                    (_glyphs = this.glyphs).splice.apply(_glyphs, [this.glyphIterator.index + 1, 0].concat(replacement));

                    return true;
                  }

                  return false;
                }

              case 3:
                {
                  // Alternate Substitution
                  var _index2 = this.coverageIndex(table.coverage);

                  if (_index2 !== -1) {
                    var USER_INDEX = 0; // TODO

                    this.glyphIterator.cur.id = table.alternateSet.get(_index2)[USER_INDEX];
                    return true;
                  }

                  return false;
                }

              case 4:
                {
                  // Ligature Substitution
                  var _index3 = this.coverageIndex(table.coverage);

                  if (_index3 === -1) {
                    return false;
                  }

                  for (var _iterator = table.ligatureSets.get(_index3), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
                    var _ref;

                    if (_isArray) {
                      if (_i >= _iterator.length) break;
                      _ref = _iterator[_i++];
                    } else {
                      _i = _iterator.next();
                      if (_i.done) break;
                      _ref = _i.value;
                    }

                    var ligature = _ref;
                    var matched = this.sequenceMatchIndices(1, ligature.components);

                    if (!matched) {
                      continue;
                    }

                    var _curGlyph = this.glyphIterator.cur; // Concatenate all of the characters the new ligature will represent

                    var characters = _curGlyph.codePoints.slice();

                    for (var _iterator2 = matched, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
                      var _ref2;

                      if (_isArray2) {
                        if (_i2 >= _iterator2.length) break;
                        _ref2 = _iterator2[_i2++];
                      } else {
                        _i2 = _iterator2.next();
                        if (_i2.done) break;
                        _ref2 = _i2.value;
                      }

                      var _index4 = _ref2;
                      characters.push.apply(characters, this.glyphs[_index4].codePoints);
                    } // Create the replacement ligature glyph


                    var ligatureGlyph = new GlyphInfo(this.font, ligature.glyph, characters, _curGlyph.features);
                    ligatureGlyph.shaperInfo = _curGlyph.shaperInfo;
                    ligatureGlyph.isLigated = true;
                    ligatureGlyph.substituted = true; // From Harfbuzz:
                    // - If it *is* a mark ligature, we don't allocate a new ligature id, and leave
                    //   the ligature to keep its old ligature id.  This will allow it to attach to
                    //   a base ligature in GPOS.  Eg. if the sequence is: LAM,LAM,SHADDA,FATHA,HEH,
                    //   and LAM,LAM,HEH for a ligature, they will leave SHADDA and FATHA with a
                    //   ligature id and component value of 2.  Then if SHADDA,FATHA form a ligature
                    //   later, we don't want them to lose their ligature id/component, otherwise
                    //   GPOS will fail to correctly position the mark ligature on top of the
                    //   LAM,LAM,HEH ligature. See https://bugzilla.gnome.org/show_bug.cgi?id=676343
                    //
                    // - If a ligature is formed of components that some of which are also ligatures
                    //   themselves, and those ligature components had marks attached to *their*
                    //   components, we have to attach the marks to the new ligature component
                    //   positions!  Now *that*'s tricky!  And these marks may be following the
                    //   last component of the whole sequence, so we should loop forward looking
                    //   for them and update them.
                    //
                    //   Eg. the sequence is LAM,LAM,SHADDA,FATHA,HEH, and the font first forms a
                    //   'calt' ligature of LAM,HEH, leaving the SHADDA and FATHA with a ligature
                    //   id and component == 1.  Now, during 'liga', the LAM and the LAM-HEH ligature
                    //   form a LAM-LAM-HEH ligature.  We need to reassign the SHADDA and FATHA to
                    //   the new ligature with a component value of 2.
                    //
                    //   This in fact happened to a font...  See https://bugzilla.gnome.org/show_bug.cgi?id=437633

                    var isMarkLigature = _curGlyph.isMark;

                    for (var i = 0; i < matched.length && isMarkLigature; i++) {
                      isMarkLigature = this.glyphs[matched[i]].isMark;
                    }

                    ligatureGlyph.ligatureID = isMarkLigature ? null : this.ligatureID++;
                    var lastLigID = _curGlyph.ligatureID;
                    var lastNumComps = _curGlyph.codePoints.length;
                    var curComps = lastNumComps;
                    var idx = this.glyphIterator.index + 1; // Set ligatureID and ligatureComponent on glyphs that were skipped in the matched sequence.
                    // This allows GPOS to attach marks to the correct ligature components.

                    for (var _iterator3 = matched, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
                      var _ref3;

                      if (_isArray3) {
                        if (_i3 >= _iterator3.length) break;
                        _ref3 = _iterator3[_i3++];
                      } else {
                        _i3 = _iterator3.next();
                        if (_i3.done) break;
                        _ref3 = _i3.value;
                      }

                      var matchIndex = _ref3; // Don't assign new ligature components for mark ligatures (see above)

                      if (isMarkLigature) {
                        idx = matchIndex;
                      } else {
                        while (idx < matchIndex) {
                          var ligatureComponent = curComps - lastNumComps + Math.min(this.glyphs[idx].ligatureComponent || 1, lastNumComps);
                          this.glyphs[idx].ligatureID = ligatureGlyph.ligatureID;
                          this.glyphs[idx].ligatureComponent = ligatureComponent;
                          idx++;
                        }
                      }

                      lastLigID = this.glyphs[idx].ligatureID;
                      lastNumComps = this.glyphs[idx].codePoints.length;
                      curComps += lastNumComps;
                      idx++; // skip base glyph
                    } // Adjust ligature components for any marks following


                    if (lastLigID && !isMarkLigature) {
                      for (var _i4 = idx; _i4 < this.glyphs.length; _i4++) {
                        if (this.glyphs[_i4].ligatureID === lastLigID) {
                          var ligatureComponent = curComps - lastNumComps + Math.min(this.glyphs[_i4].ligatureComponent || 1, lastNumComps);
                          this.glyphs[_i4].ligatureComponent = ligatureComponent;
                        } else {
                          break;
                        }
                      }
                    } // Delete the matched glyphs, and replace the current glyph with the ligature glyph


                    for (var _i5 = matched.length - 1; _i5 >= 0; _i5--) {
                      this.glyphs.splice(matched[_i5], 1);
                    }

                    this.glyphs[this.glyphIterator.index] = ligatureGlyph;
                    return true;
                  }

                  return false;
                }

              case 5:
                // Contextual Substitution
                return this.applyContext(table);

              case 6:
                // Chaining Contextual Substitution
                return this.applyChainingContext(table);

              case 7:
                // Extension Substitution
                return this.applyLookup(table.lookupType, table.extension);

              default:
                throw new Error('GSUB lookupType ' + lookupType + ' is not supported');
            }
          };

          return GSUBProcessor;
        }(OTProcessor);

        var GPOSProcessor = function (_OTProcessor) {
          _inherits(GPOSProcessor, _OTProcessor);

          function GPOSProcessor() {
            _classCallCheck(this, GPOSProcessor);

            return _possibleConstructorReturn(this, _OTProcessor.apply(this, arguments));
          }

          GPOSProcessor.prototype.applyPositionValue = function applyPositionValue(sequenceIndex, value) {
            var position = this.positions[this.glyphIterator.peekIndex(sequenceIndex)];

            if (value.xAdvance != null) {
              position.xAdvance += value.xAdvance;
            }

            if (value.yAdvance != null) {
              position.yAdvance += value.yAdvance;
            }

            if (value.xPlacement != null) {
              position.xOffset += value.xPlacement;
            }

            if (value.yPlacement != null) {
              position.yOffset += value.yPlacement;
            } // Adjustments for font variations


            var variationProcessor = this.font._variationProcessor;
            var variationStore = this.font.GDEF && this.font.GDEF.itemVariationStore;

            if (variationProcessor && variationStore) {
              if (value.xPlaDevice) {
                position.xOffset += variationProcessor.getDelta(variationStore, value.xPlaDevice.a, value.xPlaDevice.b);
              }

              if (value.yPlaDevice) {
                position.yOffset += variationProcessor.getDelta(variationStore, value.yPlaDevice.a, value.yPlaDevice.b);
              }

              if (value.xAdvDevice) {
                position.xAdvance += variationProcessor.getDelta(variationStore, value.xAdvDevice.a, value.xAdvDevice.b);
              }

              if (value.yAdvDevice) {
                position.yAdvance += variationProcessor.getDelta(variationStore, value.yAdvDevice.a, value.yAdvDevice.b);
              }
            } // TODO: device tables

          };

          GPOSProcessor.prototype.applyLookup = function applyLookup(lookupType, table) {
            switch (lookupType) {
              case 1:
                {
                  // Single positioning value
                  var index = this.coverageIndex(table.coverage);

                  if (index === -1) {
                    return false;
                  }

                  switch (table.version) {
                    case 1:
                      this.applyPositionValue(0, table.value);
                      break;

                    case 2:
                      this.applyPositionValue(0, table.values.get(index));
                      break;
                  }

                  return true;
                }

              case 2:
                {
                  // Pair Adjustment Positioning
                  var nextGlyph = this.glyphIterator.peek();

                  if (!nextGlyph) {
                    return false;
                  }

                  var _index = this.coverageIndex(table.coverage);

                  if (_index === -1) {
                    return false;
                  }

                  switch (table.version) {
                    case 1:
                      // Adjustments for glyph pairs
                      var set = table.pairSets.get(_index);

                      for (var _iterator = set, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
                        var _ref;

                        if (_isArray) {
                          if (_i >= _iterator.length) break;
                          _ref = _iterator[_i++];
                        } else {
                          _i = _iterator.next();
                          if (_i.done) break;
                          _ref = _i.value;
                        }

                        var _pair = _ref;

                        if (_pair.secondGlyph === nextGlyph.id) {
                          this.applyPositionValue(0, _pair.value1);
                          this.applyPositionValue(1, _pair.value2);
                          return true;
                        }
                      }

                      return false;

                    case 2:
                      // Class pair adjustment
                      var class1 = this.getClassID(this.glyphIterator.cur.id, table.classDef1);
                      var class2 = this.getClassID(nextGlyph.id, table.classDef2);

                      if (class1 === -1 || class2 === -1) {
                        return false;
                      }

                      var pair = table.classRecords.get(class1).get(class2);
                      this.applyPositionValue(0, pair.value1);
                      this.applyPositionValue(1, pair.value2);
                      return true;
                  }
                }

              case 3:
                {
                  // Cursive Attachment Positioning
                  var nextIndex = this.glyphIterator.peekIndex();
                  var _nextGlyph = this.glyphs[nextIndex];

                  if (!_nextGlyph) {
                    return false;
                  }

                  var curRecord = table.entryExitRecords[this.coverageIndex(table.coverage)];

                  if (!curRecord || !curRecord.exitAnchor) {
                    return false;
                  }

                  var nextRecord = table.entryExitRecords[this.coverageIndex(table.coverage, _nextGlyph.id)];

                  if (!nextRecord || !nextRecord.entryAnchor) {
                    return false;
                  }

                  var entry = this.getAnchor(nextRecord.entryAnchor);
                  var exit = this.getAnchor(curRecord.exitAnchor);
                  var cur = this.positions[this.glyphIterator.index];
                  var next = this.positions[nextIndex];

                  switch (this.direction) {
                    case 'ltr':
                      cur.xAdvance = exit.x + cur.xOffset;
                      var d = entry.x + next.xOffset;
                      next.xAdvance -= d;
                      next.xOffset -= d;
                      break;

                    case 'rtl':
                      d = exit.x + cur.xOffset;
                      cur.xAdvance -= d;
                      cur.xOffset -= d;
                      next.xAdvance = entry.x + next.xOffset;
                      break;
                  }

                  if (this.glyphIterator.flags.rightToLeft) {
                    this.glyphIterator.cur.cursiveAttachment = nextIndex;
                    cur.yOffset = entry.y - exit.y;
                  } else {
                    _nextGlyph.cursiveAttachment = this.glyphIterator.index;
                    cur.yOffset = exit.y - entry.y;
                  }

                  return true;
                }

              case 4:
                {
                  // Mark to base positioning
                  var markIndex = this.coverageIndex(table.markCoverage);

                  if (markIndex === -1) {
                    return false;
                  } // search backward for a base glyph


                  var baseGlyphIndex = this.glyphIterator.index;

                  while (--baseGlyphIndex >= 0 && (this.glyphs[baseGlyphIndex].isMark || this.glyphs[baseGlyphIndex].ligatureComponent > 0)) {}

                  if (baseGlyphIndex < 0) {
                    return false;
                  }

                  var baseIndex = this.coverageIndex(table.baseCoverage, this.glyphs[baseGlyphIndex].id);

                  if (baseIndex === -1) {
                    return false;
                  }

                  var markRecord = table.markArray[markIndex];
                  var baseAnchor = table.baseArray[baseIndex][markRecord.class];
                  this.applyAnchor(markRecord, baseAnchor, baseGlyphIndex);
                  return true;
                }

              case 5:
                {
                  // Mark to ligature positioning
                  var _markIndex = this.coverageIndex(table.markCoverage);

                  if (_markIndex === -1) {
                    return false;
                  } // search backward for a base glyph


                  var _baseGlyphIndex = this.glyphIterator.index;

                  while (--_baseGlyphIndex >= 0 && this.glyphs[_baseGlyphIndex].isMark) {}

                  if (_baseGlyphIndex < 0) {
                    return false;
                  }

                  var ligIndex = this.coverageIndex(table.ligatureCoverage, this.glyphs[_baseGlyphIndex].id);

                  if (ligIndex === -1) {
                    return false;
                  }

                  var ligAttach = table.ligatureArray[ligIndex];
                  var markGlyph = this.glyphIterator.cur;
                  var ligGlyph = this.glyphs[_baseGlyphIndex];
                  var compIndex = ligGlyph.ligatureID && ligGlyph.ligatureID === markGlyph.ligatureID && markGlyph.ligatureComponent > 0 ? Math.min(markGlyph.ligatureComponent, ligGlyph.codePoints.length) - 1 : ligGlyph.codePoints.length - 1;
                  var _markRecord = table.markArray[_markIndex];
                  var _baseAnchor = ligAttach[compIndex][_markRecord.class];
                  this.applyAnchor(_markRecord, _baseAnchor, _baseGlyphIndex);
                  return true;
                }

              case 6:
                {
                  // Mark to mark positioning
                  var mark1Index = this.coverageIndex(table.mark1Coverage);

                  if (mark1Index === -1) {
                    return false;
                  } // get the previous mark to attach to


                  var prevIndex = this.glyphIterator.peekIndex(-1);
                  var prev = this.glyphs[prevIndex];

                  if (!prev || !prev.isMark) {
                    return false;
                  }

                  var _cur = this.glyphIterator.cur; // The following logic was borrowed from Harfbuzz

                  var good = false;

                  if (_cur.ligatureID === prev.ligatureID) {
                    if (!_cur.ligatureID) {
                      // Marks belonging to the same base
                      good = true;
                    } else if (_cur.ligatureComponent === prev.ligatureComponent) {
                      // Marks belonging to the same ligature component
                      good = true;
                    }
                  } else {
                    // If ligature ids don't match, it may be the case that one of the marks
                    // itself is a ligature, in which case match.
                    if (_cur.ligatureID && !_cur.ligatureComponent || prev.ligatureID && !prev.ligatureComponent) {
                      good = true;
                    }
                  }

                  if (!good) {
                    return false;
                  }

                  var mark2Index = this.coverageIndex(table.mark2Coverage, prev.id);

                  if (mark2Index === -1) {
                    return false;
                  }

                  var _markRecord2 = table.mark1Array[mark1Index];
                  var _baseAnchor2 = table.mark2Array[mark2Index][_markRecord2.class];
                  this.applyAnchor(_markRecord2, _baseAnchor2, prevIndex);
                  return true;
                }

              case 7:
                // Contextual positioning
                return this.applyContext(table);

              case 8:
                // Chaining contextual positioning
                return this.applyChainingContext(table);

              case 9:
                // Extension positioning
                return this.applyLookup(table.lookupType, table.extension);

              default:
                throw new Error('Unsupported GPOS table: ' + lookupType);
            }
          };

          GPOSProcessor.prototype.applyAnchor = function applyAnchor(markRecord, baseAnchor, baseGlyphIndex) {
            var baseCoords = this.getAnchor(baseAnchor);
            var markCoords = this.getAnchor(markRecord.markAnchor);
            var basePos = this.positions[baseGlyphIndex];
            var markPos = this.positions[this.glyphIterator.index];
            markPos.xOffset = baseCoords.x - markCoords.x;
            markPos.yOffset = baseCoords.y - markCoords.y;
            this.glyphIterator.cur.markAttachment = baseGlyphIndex;
          };

          GPOSProcessor.prototype.getAnchor = function getAnchor(anchor) {
            // TODO: contour point, device tables
            var x = anchor.xCoordinate;
            var y = anchor.yCoordinate; // Adjustments for font variations

            var variationProcessor = this.font._variationProcessor;
            var variationStore = this.font.GDEF && this.font.GDEF.itemVariationStore;

            if (variationProcessor && variationStore) {
              if (anchor.xDeviceTable) {
                x += variationProcessor.getDelta(variationStore, anchor.xDeviceTable.a, anchor.xDeviceTable.b);
              }

              if (anchor.yDeviceTable) {
                y += variationProcessor.getDelta(variationStore, anchor.yDeviceTable.a, anchor.yDeviceTable.b);
              }
            }

            return {
              x: x,
              y: y
            };
          };

          GPOSProcessor.prototype.applyFeatures = function applyFeatures(userFeatures, glyphs, advances) {
            _OTProcessor.prototype.applyFeatures.call(this, userFeatures, glyphs, advances);

            for (var i = 0; i < this.glyphs.length; i++) {
              this.fixCursiveAttachment(i);
            }

            this.fixMarkAttachment();
          };

          GPOSProcessor.prototype.fixCursiveAttachment = function fixCursiveAttachment(i) {
            var glyph = this.glyphs[i];

            if (glyph.cursiveAttachment != null) {
              var j = glyph.cursiveAttachment;
              glyph.cursiveAttachment = null;
              this.fixCursiveAttachment(j);
              this.positions[i].yOffset += this.positions[j].yOffset;
            }
          };

          GPOSProcessor.prototype.fixMarkAttachment = function fixMarkAttachment() {
            for (var i = 0; i < this.glyphs.length; i++) {
              var glyph = this.glyphs[i];

              if (glyph.markAttachment != null) {
                var j = glyph.markAttachment;
                this.positions[i].xOffset += this.positions[j].xOffset;
                this.positions[i].yOffset += this.positions[j].yOffset;

                if (this.direction === 'ltr') {
                  for (var k = j; k < i; k++) {
                    this.positions[i].xOffset -= this.positions[k].xAdvance;
                    this.positions[i].yOffset -= this.positions[k].yAdvance;
                  }
                } else {
                  for (var _k = j + 1; _k < i + 1; _k++) {
                    this.positions[i].xOffset += this.positions[_k].xAdvance;
                    this.positions[i].yOffset += this.positions[_k].yAdvance;
                  }
                }
              }
            }
          };

          return GPOSProcessor;
        }(OTProcessor);

        var OTLayoutEngine = function () {
          function OTLayoutEngine(font) {
            _classCallCheck(this, OTLayoutEngine);

            this.font = font;
            this.glyphInfos = null;
            this.plan = null;
            this.GSUBProcessor = null;
            this.GPOSProcessor = null;
            this.fallbackPosition = true;

            if (font.GSUB) {
              this.GSUBProcessor = new GSUBProcessor(font, font.GSUB);
            }

            if (font.GPOS) {
              this.GPOSProcessor = new GPOSProcessor(font, font.GPOS);
            }
          }

          OTLayoutEngine.prototype.setup = function setup(glyphRun) {
            var _this = this; // Map glyphs to GlyphInfo objects so data can be passed between
            // GSUB and GPOS without mutating the real (shared) Glyph objects.


            this.glyphInfos = glyphRun.glyphs.map(function (glyph) {
              return new GlyphInfo(_this.font, glyph.id, [].concat(glyph.codePoints));
            }); // Select a script based on what is available in GSUB/GPOS.

            var script = null;

            if (this.GPOSProcessor) {
              script = this.GPOSProcessor.selectScript(glyphRun.script, glyphRun.language, glyphRun.direction);
            }

            if (this.GSUBProcessor) {
              script = this.GSUBProcessor.selectScript(glyphRun.script, glyphRun.language, glyphRun.direction);
            } // Choose a shaper based on the script, and setup a shaping plan.
            // This determines which features to apply to which glyphs.


            this.shaper = choose(script);
            this.plan = new ShapingPlan(this.font, script, glyphRun.direction);
            this.shaper.plan(this.plan, this.glyphInfos, glyphRun.features); // Assign chosen features to output glyph run

            for (var key in this.plan.allFeatures) {
              glyphRun.features[key] = true;
            }
          };

          OTLayoutEngine.prototype.substitute = function substitute(glyphRun) {
            var _this2 = this;

            if (this.GSUBProcessor) {
              this.plan.process(this.GSUBProcessor, this.glyphInfos); // Map glyph infos back to normal Glyph objects

              glyphRun.glyphs = this.glyphInfos.map(function (glyphInfo) {
                return _this2.font.getGlyph(glyphInfo.id, glyphInfo.codePoints);
              });
            }
          };

          OTLayoutEngine.prototype.position = function position(glyphRun) {
            if (this.shaper.zeroMarkWidths === 'BEFORE_GPOS') {
              this.zeroMarkAdvances(glyphRun.positions);
            }

            if (this.GPOSProcessor) {
              this.plan.process(this.GPOSProcessor, this.glyphInfos, glyphRun.positions);
            }

            if (this.shaper.zeroMarkWidths === 'AFTER_GPOS') {
              this.zeroMarkAdvances(glyphRun.positions);
            } // Reverse the glyphs and positions if the script is right-to-left


            if (glyphRun.direction === 'rtl') {
              glyphRun.glyphs.reverse();
              glyphRun.positions.reverse();
            }

            return this.GPOSProcessor && this.GPOSProcessor.features;
          };

          OTLayoutEngine.prototype.zeroMarkAdvances = function zeroMarkAdvances(positions) {
            for (var i = 0; i < this.glyphInfos.length; i++) {
              if (this.glyphInfos[i].isMark) {
                positions[i].xAdvance = 0;
                positions[i].yAdvance = 0;
              }
            }
          };

          OTLayoutEngine.prototype.cleanup = function cleanup() {
            this.glyphInfos = null;
            this.plan = null;
            this.shaper = null;
          };

          OTLayoutEngine.prototype.getAvailableFeatures = function getAvailableFeatures(script, language) {
            var features = [];

            if (this.GSUBProcessor) {
              this.GSUBProcessor.selectScript(script, language);
              features.push.apply(features, _Object$keys(this.GSUBProcessor.features));
            }

            if (this.GPOSProcessor) {
              this.GPOSProcessor.selectScript(script, language);
              features.push.apply(features, _Object$keys(this.GPOSProcessor.features));
            }

            return features;
          };

          return OTLayoutEngine;
        }();

        var LayoutEngine = function () {
          function LayoutEngine(font) {
            _classCallCheck(this, LayoutEngine);

            this.font = font;
            this.unicodeLayoutEngine = null;
            this.kernProcessor = null; // Choose an advanced layout engine. We try the AAT morx table first since more
            // scripts are currently supported because the shaping logic is built into the font.

            if (this.font.morx) {
              this.engine = new AATLayoutEngine(this.font);
            } else if (this.font.GSUB || this.font.GPOS) {
              this.engine = new OTLayoutEngine(this.font);
            }
          }

          LayoutEngine.prototype.layout = function layout(string, features, script, language, direction) {
            // Make the features parameter optional
            if (typeof features === 'string') {
              direction = language;
              language = script;
              script = features;
              features = [];
            } // Map string to glyphs if needed


            if (typeof string === 'string') {
              // Attempt to detect the script from the string if not provided.
              if (script == null) {
                script = forString(string);
              }

              var glyphs = this.font.glyphsForString(string);
            } else {
              // Attempt to detect the script from the glyph code points if not provided.
              if (script == null) {
                var codePoints = [];

                for (var _iterator = string, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
                  var _ref;

                  if (_isArray) {
                    if (_i >= _iterator.length) break;
                    _ref = _iterator[_i++];
                  } else {
                    _i = _iterator.next();
                    if (_i.done) break;
                    _ref = _i.value;
                  }

                  var glyph = _ref;
                  codePoints.push.apply(codePoints, glyph.codePoints);
                }

                script = forCodePoints(codePoints);
              }

              var glyphs = string;
            }

            var glyphRun = new GlyphRun(glyphs, features, script, language, direction); // Return early if there are no glyphs

            if (glyphs.length === 0) {
              glyphRun.positions = [];
              return glyphRun;
            } // Setup the advanced layout engine


            if (this.engine && this.engine.setup) {
              this.engine.setup(glyphRun);
            } // Substitute and position the glyphs


            this.substitute(glyphRun);
            this.position(glyphRun);
            this.hideDefaultIgnorables(glyphRun.glyphs, glyphRun.positions); // Let the layout engine clean up any state it might have

            if (this.engine && this.engine.cleanup) {
              this.engine.cleanup();
            }

            return glyphRun;
          };

          LayoutEngine.prototype.substitute = function substitute(glyphRun) {
            // Call the advanced layout engine to make substitutions
            if (this.engine && this.engine.substitute) {
              this.engine.substitute(glyphRun);
            }
          };

          LayoutEngine.prototype.position = function position(glyphRun) {
            // Get initial glyph positions
            glyphRun.positions = glyphRun.glyphs.map(function (glyph) {
              return new GlyphPosition(glyph.advanceWidth);
            });
            var positioned = null; // Call the advanced layout engine. Returns the features applied.

            if (this.engine && this.engine.position) {
              positioned = this.engine.position(glyphRun);
            } // if there is no GPOS table, use unicode properties to position marks.


            if (!positioned && (!this.engine || this.engine.fallbackPosition)) {
              if (!this.unicodeLayoutEngine) {
                this.unicodeLayoutEngine = new UnicodeLayoutEngine(this.font);
              }

              this.unicodeLayoutEngine.positionGlyphs(glyphRun.glyphs, glyphRun.positions);
            } // if kerning is not supported by GPOS, do kerning with the TrueType/AAT kern table


            if ((!positioned || !positioned.kern) && glyphRun.features.kern !== false && this.font.kern) {
              if (!this.kernProcessor) {
                this.kernProcessor = new KernProcessor(this.font);
              }

              this.kernProcessor.process(glyphRun.glyphs, glyphRun.positions);
              glyphRun.features.kern = true;
            }
          };

          LayoutEngine.prototype.hideDefaultIgnorables = function hideDefaultIgnorables(glyphs, positions) {
            var space = this.font.glyphForCodePoint(0x20);

            for (var i = 0; i < glyphs.length; i++) {
              if (this.isDefaultIgnorable(glyphs[i].codePoints[0])) {
                glyphs[i] = space;
                positions[i].xAdvance = 0;
                positions[i].yAdvance = 0;
              }
            }
          };

          LayoutEngine.prototype.isDefaultIgnorable = function isDefaultIgnorable(ch) {
            // From DerivedCoreProperties.txt in the Unicode database,
            // minus U+115F, U+1160, U+3164 and U+FFA0, which is what
            // Harfbuzz and Uniscribe do.
            var plane = ch >> 16;

            if (plane === 0) {
              // BMP
              switch (ch >> 8) {
                case 0x00:
                  return ch === 0x00AD;

                case 0x03:
                  return ch === 0x034F;

                case 0x06:
                  return ch === 0x061C;

                case 0x17:
                  return 0x17B4 <= ch && ch <= 0x17B5;

                case 0x18:
                  return 0x180B <= ch && ch <= 0x180E;

                case 0x20:
                  return 0x200B <= ch && ch <= 0x200F || 0x202A <= ch && ch <= 0x202E || 0x2060 <= ch && ch <= 0x206F;

                case 0xFE:
                  return 0xFE00 <= ch && ch <= 0xFE0F || ch === 0xFEFF;

                case 0xFF:
                  return 0xFFF0 <= ch && ch <= 0xFFF8;

                default:
                  return false;
              }
            } else {
              // Other planes
              switch (plane) {
                case 0x01:
                  return 0x1BCA0 <= ch && ch <= 0x1BCA3 || 0x1D173 <= ch && ch <= 0x1D17A;

                case 0x0E:
                  return 0xE0000 <= ch && ch <= 0xE0FFF;

                default:
                  return false;
              }
            }
          };

          LayoutEngine.prototype.getAvailableFeatures = function getAvailableFeatures(script, language) {
            var features = [];

            if (this.engine) {
              features.push.apply(features, this.engine.getAvailableFeatures(script, language));
            }

            if (this.font.kern && features.indexOf('kern') === -1) {
              features.push('kern');
            }

            return features;
          };

          LayoutEngine.prototype.stringsForGlyph = function stringsForGlyph(gid) {
            var result = new _Set();

            var codePoints = this.font._cmapProcessor.codePointsForGlyph(gid);

            for (var _iterator2 = codePoints, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
              var _ref2;

              if (_isArray2) {
                if (_i2 >= _iterator2.length) break;
                _ref2 = _iterator2[_i2++];
              } else {
                _i2 = _iterator2.next();
                if (_i2.done) break;
                _ref2 = _i2.value;
              }

              var codePoint = _ref2;
              result.add(_String$fromCodePoint(codePoint));
            }

            if (this.engine && this.engine.stringsForGlyph) {
              for (var _iterator3 = this.engine.stringsForGlyph(gid), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
                var _ref3;

                if (_isArray3) {
                  if (_i3 >= _iterator3.length) break;
                  _ref3 = _iterator3[_i3++];
                } else {
                  _i3 = _iterator3.next();
                  if (_i3.done) break;
                  _ref3 = _i3.value;
                }

                var string = _ref3;
                result.add(string);
              }
            }

            return _Array$from(result);
          };

          return LayoutEngine;
        }();

        var SVG_COMMANDS = {
          moveTo: 'M',
          lineTo: 'L',
          quadraticCurveTo: 'Q',
          bezierCurveTo: 'C',
          closePath: 'Z'
        };
        /**
         * Path objects are returned by glyphs and represent the actual
         * vector outlines for each glyph in the font. Paths can be converted
         * to SVG path data strings, or to functions that can be applied to
         * render the path to a graphics context.
         */

        var Path = function () {
          function Path() {
            _classCallCheck(this, Path);

            this.commands = [];
            this._bbox = null;
            this._cbox = null;
          }
          /**
           * Compiles the path to a JavaScript function that can be applied with
           * a graphics context in order to render the path.
           * @return {string}
           */


          Path.prototype.toFunction = function toFunction() {
            var _this = this;

            return function (ctx) {
              _this.commands.forEach(function (c) {
                return ctx[c.command].apply(ctx, c.args);
              });
            };
          };
          /**
           * Converts the path to an SVG path data string
           * @return {string}
           */


          Path.prototype.toSVG = function toSVG() {
            var cmds = this.commands.map(function (c) {
              var args = c.args.map(function (arg) {
                return Math.round(arg * 100) / 100;
              });
              return '' + SVG_COMMANDS[c.command] + args.join(' ');
            });
            return cmds.join('');
          };
          /**
           * Gets the "control box" of a path.
           * This is like the bounding box, but it includes all points including
           * control points of bezier segments and is much faster to compute than
           * the real bounding box.
           * @type {BBox}
           */

          /**
           * Applies a mapping function to each point in the path.
           * @param {function} fn
           * @return {Path}
           */


          Path.prototype.mapPoints = function mapPoints(fn) {
            var path = new Path();

            for (var _iterator = this.commands, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
              var _ref;

              if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref = _iterator[_i++];
              } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref = _i.value;
              }

              var c = _ref;
              var args = [];

              for (var _i2 = 0; _i2 < c.args.length; _i2 += 2) {
                var _fn = fn(c.args[_i2], c.args[_i2 + 1]),
                    x = _fn[0],
                    y = _fn[1];

                args.push(x, y);
              }

              path[c.command].apply(path, args);
            }

            return path;
          };
          /**
           * Transforms the path by the given matrix.
           */


          Path.prototype.transform = function transform(m0, m1, m2, m3, m4, m5) {
            return this.mapPoints(function (x, y) {
              x = m0 * x + m2 * y + m4;
              y = m1 * x + m3 * y + m5;
              return [x, y];
            });
          };
          /**
           * Translates the path by the given offset.
           */


          Path.prototype.translate = function translate(x, y) {
            return this.transform(1, 0, 0, 1, x, y);
          };
          /**
           * Rotates the path by the given angle (in radians).
           */


          Path.prototype.rotate = function rotate(angle) {
            var cos = Math.cos(angle);
            var sin = Math.sin(angle);
            return this.transform(cos, sin, -sin, cos, 0, 0);
          };
          /**
           * Scales the path.
           */


          Path.prototype.scale = function scale(scaleX) {
            var scaleY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : scaleX;
            return this.transform(scaleX, 0, 0, scaleY, 0, 0);
          };

          _createClass(Path, [{
            key: 'cbox',
            get: function get() {
              if (!this._cbox) {
                var cbox = new BBox();

                for (var _iterator2 = this.commands, _isArray2 = Array.isArray(_iterator2), _i3 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
                  var _ref2;

                  if (_isArray2) {
                    if (_i3 >= _iterator2.length) break;
                    _ref2 = _iterator2[_i3++];
                  } else {
                    _i3 = _iterator2.next();
                    if (_i3.done) break;
                    _ref2 = _i3.value;
                  }

                  var command = _ref2;

                  for (var _i4 = 0; _i4 < command.args.length; _i4 += 2) {
                    cbox.addPoint(command.args[_i4], command.args[_i4 + 1]);
                  }
                }

                this._cbox = _Object$freeze(cbox);
              }

              return this._cbox;
            }
            /**
             * Gets the exact bounding box of the path by evaluating curve segments.
             * Slower to compute than the control box, but more accurate.
             * @type {BBox}
             */

          }, {
            key: 'bbox',
            get: function get() {
              if (this._bbox) {
                return this._bbox;
              }

              var bbox = new BBox();
              var cx = 0,
                  cy = 0;

              var f = function f(t) {
                return Math.pow(1 - t, 3) * p0[i] + 3 * Math.pow(1 - t, 2) * t * p1[i] + 3 * (1 - t) * Math.pow(t, 2) * p2[i] + Math.pow(t, 3) * p3[i];
              };

              for (var _iterator3 = this.commands, _isArray3 = Array.isArray(_iterator3), _i5 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
                var _ref3;

                if (_isArray3) {
                  if (_i5 >= _iterator3.length) break;
                  _ref3 = _iterator3[_i5++];
                } else {
                  _i5 = _iterator3.next();
                  if (_i5.done) break;
                  _ref3 = _i5.value;
                }

                var c = _ref3;

                switch (c.command) {
                  case 'moveTo':
                  case 'lineTo':
                    var _c$args = c.args,
                        x = _c$args[0],
                        y = _c$args[1];
                    bbox.addPoint(x, y);
                    cx = x;
                    cy = y;
                    break;

                  case 'quadraticCurveTo':
                  case 'bezierCurveTo':
                    if (c.command === 'quadraticCurveTo') {
                      // http://fontforge.org/bezier.html
                      var _c$args2 = c.args,
                          qp1x = _c$args2[0],
                          qp1y = _c$args2[1],
                          p3x = _c$args2[2],
                          p3y = _c$args2[3];
                      var cp1x = cx + 2 / 3 * (qp1x - cx); // CP1 = QP0 + 2/3 * (QP1-QP0)

                      var cp1y = cy + 2 / 3 * (qp1y - cy);
                      var cp2x = p3x + 2 / 3 * (qp1x - p3x); // CP2 = QP2 + 2/3 * (QP1-QP2)

                      var cp2y = p3y + 2 / 3 * (qp1y - p3y);
                    } else {
                      var _c$args3 = c.args,
                          cp1x = _c$args3[0],
                          cp1y = _c$args3[1],
                          cp2x = _c$args3[2],
                          cp2y = _c$args3[3],
                          p3x = _c$args3[4],
                          p3y = _c$args3[5];
                    } // http://blog.hackers-cafe.net/2009/06/how-to-calculate-bezier-curves-bounding.html


                    bbox.addPoint(p3x, p3y);
                    var p0 = [cx, cy];
                    var p1 = [cp1x, cp1y];
                    var p2 = [cp2x, cp2y];
                    var p3 = [p3x, p3y];

                    for (var i = 0; i <= 1; i++) {
                      var b = 6 * p0[i] - 12 * p1[i] + 6 * p2[i];
                      var a = -3 * p0[i] + 9 * p1[i] - 9 * p2[i] + 3 * p3[i];
                      c = 3 * p1[i] - 3 * p0[i];

                      if (a === 0) {
                        if (b === 0) {
                          continue;
                        }

                        var t = -c / b;

                        if (0 < t && t < 1) {
                          if (i === 0) {
                            bbox.addPoint(f(t), bbox.maxY);
                          } else if (i === 1) {
                            bbox.addPoint(bbox.maxX, f(t));
                          }
                        }

                        continue;
                      }

                      var b2ac = Math.pow(b, 2) - 4 * c * a;

                      if (b2ac < 0) {
                        continue;
                      }

                      var t1 = (-b + Math.sqrt(b2ac)) / (2 * a);

                      if (0 < t1 && t1 < 1) {
                        if (i === 0) {
                          bbox.addPoint(f(t1), bbox.maxY);
                        } else if (i === 1) {
                          bbox.addPoint(bbox.maxX, f(t1));
                        }
                      }

                      var t2 = (-b - Math.sqrt(b2ac)) / (2 * a);

                      if (0 < t2 && t2 < 1) {
                        if (i === 0) {
                          bbox.addPoint(f(t2), bbox.maxY);
                        } else if (i === 1) {
                          bbox.addPoint(bbox.maxX, f(t2));
                        }
                      }
                    }

                    cx = p3x;
                    cy = p3y;
                    break;
                }
              }

              return this._bbox = _Object$freeze(bbox);
            }
          }]);

          return Path;
        }();

        var _arr = ['moveTo', 'lineTo', 'quadraticCurveTo', 'bezierCurveTo', 'closePath'];

        var _loop = function _loop() {
          var command = _arr[_i6];

          Path.prototype[command] = function () {
            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }

            this._bbox = this._cbox = null;
            this.commands.push({
              command: command,
              args: args
            });
            return this;
          };
        };

        for (var _i6 = 0; _i6 < _arr.length; _i6++) {
          _loop();
        }

        var StandardNames = ['.notdef', '.null', 'nonmarkingreturn', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quotesingle', 'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater', 'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore', 'grave', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', 'Adieresis', 'Aring', 'Ccedilla', 'Eacute', 'Ntilde', 'Odieresis', 'Udieresis', 'aacute', 'agrave', 'acircumflex', 'adieresis', 'atilde', 'aring', 'ccedilla', 'eacute', 'egrave', 'ecircumflex', 'edieresis', 'iacute', 'igrave', 'icircumflex', 'idieresis', 'ntilde', 'oacute', 'ograve', 'ocircumflex', 'odieresis', 'otilde', 'uacute', 'ugrave', 'ucircumflex', 'udieresis', 'dagger', 'degree', 'cent', 'sterling', 'section', 'bullet', 'paragraph', 'germandbls', 'registered', 'copyright', 'trademark', 'acute', 'dieresis', 'notequal', 'AE', 'Oslash', 'infinity', 'plusminus', 'lessequal', 'greaterequal', 'yen', 'mu', 'partialdiff', 'summation', 'product', 'pi', 'integral', 'ordfeminine', 'ordmasculine', 'Omega', 'ae', 'oslash', 'questiondown', 'exclamdown', 'logicalnot', 'radical', 'florin', 'approxequal', 'Delta', 'guillemotleft', 'guillemotright', 'ellipsis', 'nonbreakingspace', 'Agrave', 'Atilde', 'Otilde', 'OE', 'oe', 'endash', 'emdash', 'quotedblleft', 'quotedblright', 'quoteleft', 'quoteright', 'divide', 'lozenge', 'ydieresis', 'Ydieresis', 'fraction', 'currency', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', 'daggerdbl', 'periodcentered', 'quotesinglbase', 'quotedblbase', 'perthousand', 'Acircumflex', 'Ecircumflex', 'Aacute', 'Edieresis', 'Egrave', 'Iacute', 'Icircumflex', 'Idieresis', 'Igrave', 'Oacute', 'Ocircumflex', 'apple', 'Ograve', 'Uacute', 'Ucircumflex', 'Ugrave', 'dotlessi', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'ring', 'cedilla', 'hungarumlaut', 'ogonek', 'caron', 'Lslash', 'lslash', 'Scaron', 'scaron', 'Zcaron', 'zcaron', 'brokenbar', 'Eth', 'eth', 'Yacute', 'yacute', 'Thorn', 'thorn', 'minus', 'multiply', 'onesuperior', 'twosuperior', 'threesuperior', 'onehalf', 'onequarter', 'threequarters', 'franc', 'Gbreve', 'gbreve', 'Idotaccent', 'Scedilla', 'scedilla', 'Cacute', 'cacute', 'Ccaron', 'ccaron', 'dcroat'];

        var _class$8;

        function _applyDecoratedDescriptor$4(target, property, decorators, descriptor, context) {
          var desc = {};
          Object['ke' + 'ys'](descriptor).forEach(function (key) {
            desc[key] = descriptor[key];
          });
          desc.enumerable = !!desc.enumerable;
          desc.configurable = !!desc.configurable;

          if ('value' in desc || desc.initializer) {
            desc.writable = true;
          }

          desc = decorators.slice().reverse().reduce(function (desc, decorator) {
            return decorator(target, property, desc) || desc;
          }, desc);

          if (context && desc.initializer !== void 0) {
            desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
            desc.initializer = undefined;
          }

          if (desc.initializer === void 0) {
            Object['define' + 'Property'](target, property, desc);
            desc = null;
          }

          return desc;
        }
        /**
         * Glyph objects represent a glyph in the font. They have various properties for accessing metrics and
         * the actual vector path the glyph represents, and methods for rendering the glyph to a graphics context.
         *
         * You do not create glyph objects directly. They are created by various methods on the font object.
         * There are several subclasses of the base Glyph class internally that may be returned depending
         * on the font format, but they all inherit from this class.
         */


        var Glyph = (_class$8 = function () {
          function Glyph(id, codePoints, font) {
            _classCallCheck(this, Glyph);
            /**
             * The glyph id in the font
             * @type {number}
             */


            this.id = id;
            /**
             * An array of unicode code points that are represented by this glyph.
             * There can be multiple code points in the case of ligatures and other glyphs
             * that represent multiple visual characters.
             * @type {number[]}
             */

            this.codePoints = codePoints;
            this._font = font; // TODO: get this info from GDEF if available

            this.isMark = this.codePoints.length > 0 && this.codePoints.every(unicode.isMark);
            this.isLigature = this.codePoints.length > 1;
          }

          Glyph.prototype._getPath = function _getPath() {
            return new Path();
          };

          Glyph.prototype._getCBox = function _getCBox() {
            return this.path.cbox;
          };

          Glyph.prototype._getBBox = function _getBBox() {
            return this.path.bbox;
          };

          Glyph.prototype._getTableMetrics = function _getTableMetrics(table) {
            if (this.id < table.metrics.length) {
              return table.metrics.get(this.id);
            }

            var metric = table.metrics.get(table.metrics.length - 1);
            var res = {
              advance: metric ? metric.advance : 0,
              bearing: table.bearings.get(this.id - table.metrics.length) || 0
            };
            return res;
          };

          Glyph.prototype._getMetrics = function _getMetrics(cbox) {
            if (this._metrics) {
              return this._metrics;
            }

            var _getTableMetrics2 = this._getTableMetrics(this._font.hmtx),
                advanceWidth = _getTableMetrics2.advance,
                leftBearing = _getTableMetrics2.bearing; // For vertical metrics, use vmtx if available, or fall back to global data from OS/2 or hhea


            if (this._font.vmtx) {
              var _getTableMetrics3 = this._getTableMetrics(this._font.vmtx),
                  advanceHeight = _getTableMetrics3.advance,
                  topBearing = _getTableMetrics3.bearing;
            } else {
              var os2 = void 0;

              if (typeof cbox === 'undefined' || cbox === null) {
                cbox = this.cbox;
              }

              if ((os2 = this._font['OS/2']) && os2.version > 0) {
                var advanceHeight = Math.abs(os2.typoAscender - os2.typoDescender);
                var topBearing = os2.typoAscender - cbox.maxY;
              } else {
                var hhea = this._font.hhea;
                var advanceHeight = Math.abs(hhea.ascent - hhea.descent);
                var topBearing = hhea.ascent - cbox.maxY;
              }
            }

            if (this._font._variationProcessor && this._font.HVAR) {
              advanceWidth += this._font._variationProcessor.getAdvanceAdjustment(this.id, this._font.HVAR);
            }

            return this._metrics = {
              advanceWidth: advanceWidth,
              advanceHeight: advanceHeight,
              leftBearing: leftBearing,
              topBearing: topBearing
            };
          };
          /**
           * The glyph’s control box.
           * This is often the same as the bounding box, but is faster to compute.
           * Because of the way bezier curves are defined, some of the control points
           * can be outside of the bounding box. Where `bbox` takes this into account,
           * `cbox` does not. Thus, cbox is less accurate, but faster to compute.
           * See [here](http://www.freetype.org/freetype2/docs/glyphs/glyphs-6.html#section-2)
           * for a more detailed description.
           *
           * @type {BBox}
           */

          /**
           * Returns a path scaled to the given font size.
           * @param {number} size
           * @return {Path}
           */


          Glyph.prototype.getScaledPath = function getScaledPath(size) {
            var scale = 1 / this._font.unitsPerEm * size;
            return this.path.scale(scale);
          };
          /**
           * The glyph's advance width.
           * @type {number}
           */


          Glyph.prototype._getName = function _getName() {
            var post = this._font.post;

            if (!post) {
              return null;
            }

            switch (post.version) {
              case 1:
                return StandardNames[this.id];

              case 2:
                var id = post.glyphNameIndex[this.id];

                if (id < StandardNames.length) {
                  return StandardNames[id];
                }

                return post.names[id - StandardNames.length];

              case 2.5:
                return StandardNames[this.id + post.offsets[this.id]];

              case 4:
                return String.fromCharCode(post.map[this.id]);
            }
          };
          /**
           * The glyph's name
           * @type {string}
           */

          /**
           * Renders the glyph to the given graphics context, at the specified font size.
           * @param {CanvasRenderingContext2d} ctx
           * @param {number} size
           */


          Glyph.prototype.render = function render(ctx, size) {
            ctx.save();
            var scale = 1 / this._font.head.unitsPerEm * size;
            ctx.scale(scale, scale);
            var fn = this.path.toFunction();
            fn(ctx);
            ctx.fill();
            ctx.restore();
          };

          _createClass(Glyph, [{
            key: 'cbox',
            get: function get() {
              return this._getCBox();
            }
            /**
             * The glyph’s bounding box, i.e. the rectangle that encloses the
             * glyph outline as tightly as possible.
             * @type {BBox}
             */

          }, {
            key: 'bbox',
            get: function get() {
              return this._getBBox();
            }
            /**
             * A vector Path object representing the glyph outline.
             * @type {Path}
             */

          }, {
            key: 'path',
            get: function get() {
              // Cache the path so we only decode it once
              // Decoding is actually performed by subclasses
              return this._getPath();
            }
          }, {
            key: 'advanceWidth',
            get: function get() {
              return this._getMetrics().advanceWidth;
            }
            /**
             * The glyph's advance height.
             * @type {number}
             */

          }, {
            key: 'advanceHeight',
            get: function get() {
              return this._getMetrics().advanceHeight;
            }
          }, {
            key: 'ligatureCaretPositions',
            get: function get() {}
          }, {
            key: 'name',
            get: function get() {
              return this._getName();
            }
          }]);

          return Glyph;
        }(), (_applyDecoratedDescriptor$4(_class$8.prototype, 'cbox', [cache], _Object$getOwnPropertyDescriptor(_class$8.prototype, 'cbox'), _class$8.prototype), _applyDecoratedDescriptor$4(_class$8.prototype, 'bbox', [cache], _Object$getOwnPropertyDescriptor(_class$8.prototype, 'bbox'), _class$8.prototype), _applyDecoratedDescriptor$4(_class$8.prototype, 'path', [cache], _Object$getOwnPropertyDescriptor(_class$8.prototype, 'path'), _class$8.prototype), _applyDecoratedDescriptor$4(_class$8.prototype, 'advanceWidth', [cache], _Object$getOwnPropertyDescriptor(_class$8.prototype, 'advanceWidth'), _class$8.prototype), _applyDecoratedDescriptor$4(_class$8.prototype, 'advanceHeight', [cache], _Object$getOwnPropertyDescriptor(_class$8.prototype, 'advanceHeight'), _class$8.prototype), _applyDecoratedDescriptor$4(_class$8.prototype, 'name', [cache], _Object$getOwnPropertyDescriptor(_class$8.prototype, 'name'), _class$8.prototype)), _class$8); // The header for both simple and composite glyphs

        var GlyfHeader = new r.Struct({
          numberOfContours: r.int16,
          // if negative, this is a composite glyph
          xMin: r.int16,
          yMin: r.int16,
          xMax: r.int16,
          yMax: r.int16
        }); // Flags for simple glyphs

        var ON_CURVE = 1 << 0;
        var X_SHORT_VECTOR = 1 << 1;
        var Y_SHORT_VECTOR = 1 << 2;
        var REPEAT = 1 << 3;
        var SAME_X = 1 << 4;
        var SAME_Y = 1 << 5; // Flags for composite glyphs

        var ARG_1_AND_2_ARE_WORDS = 1 << 0;
        var WE_HAVE_A_SCALE = 1 << 3;
        var MORE_COMPONENTS = 1 << 5;
        var WE_HAVE_AN_X_AND_Y_SCALE = 1 << 6;
        var WE_HAVE_A_TWO_BY_TWO = 1 << 7;
        var WE_HAVE_INSTRUCTIONS = 1 << 8; // Represents a point in a simple glyph

        var Point = function () {
          function Point(onCurve, endContour) {
            var x = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
            var y = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

            _classCallCheck(this, Point);

            this.onCurve = onCurve;
            this.endContour = endContour;
            this.x = x;
            this.y = y;
          }

          Point.prototype.copy = function copy() {
            return new Point(this.onCurve, this.endContour, this.x, this.y);
          };

          return Point;
        }(); // Represents a component in a composite glyph


        var Component = function Component(glyphID, dx, dy) {
          _classCallCheck(this, Component);

          this.glyphID = glyphID;
          this.dx = dx;
          this.dy = dy;
          this.pos = 0;
          this.scaleX = this.scaleY = 1;
          this.scale01 = this.scale10 = 0;
        };
        /**
         * Represents a TrueType glyph.
         */


        var TTFGlyph = function (_Glyph) {
          _inherits(TTFGlyph, _Glyph);

          function TTFGlyph() {
            _classCallCheck(this, TTFGlyph);

            return _possibleConstructorReturn(this, _Glyph.apply(this, arguments));
          } // Parses just the glyph header and returns the bounding box


          TTFGlyph.prototype._getCBox = function _getCBox(internal) {
            // We need to decode the glyph if variation processing is requested,
            // so it's easier just to recompute the path's cbox after decoding.
            if (this._font._variationProcessor && !internal) {
              return this.path.cbox;
            }

            var stream = this._font._getTableStream('glyf');

            stream.pos += this._font.loca.offsets[this.id];
            var glyph = GlyfHeader.decode(stream);
            var cbox = new BBox(glyph.xMin, glyph.yMin, glyph.xMax, glyph.yMax);
            return _Object$freeze(cbox);
          }; // Parses a single glyph coordinate


          TTFGlyph.prototype._parseGlyphCoord = function _parseGlyphCoord(stream, prev, short, same) {
            if (short) {
              var val = stream.readUInt8();

              if (!same) {
                val = -val;
              }

              val += prev;
            } else {
              if (same) {
                var val = prev;
              } else {
                var val = prev + stream.readInt16BE();
              }
            }

            return val;
          }; // Decodes the glyph data into points for simple glyphs,
          // or components for composite glyphs


          TTFGlyph.prototype._decode = function _decode() {
            var glyfPos = this._font.loca.offsets[this.id];
            var nextPos = this._font.loca.offsets[this.id + 1]; // Nothing to do if there is no data for this glyph

            if (glyfPos === nextPos) {
              return null;
            }

            var stream = this._font._getTableStream('glyf');

            stream.pos += glyfPos;
            var startPos = stream.pos;
            var glyph = GlyfHeader.decode(stream);

            if (glyph.numberOfContours > 0) {
              this._decodeSimple(glyph, stream);
            } else if (glyph.numberOfContours < 0) {
              this._decodeComposite(glyph, stream, startPos);
            }

            return glyph;
          };

          TTFGlyph.prototype._decodeSimple = function _decodeSimple(glyph, stream) {
            // this is a simple glyph
            glyph.points = [];
            var endPtsOfContours = new r.Array(r.uint16, glyph.numberOfContours).decode(stream);
            glyph.instructions = new r.Array(r.uint8, r.uint16).decode(stream);
            var flags = [];
            var numCoords = endPtsOfContours[endPtsOfContours.length - 1] + 1;

            while (flags.length < numCoords) {
              var flag = stream.readUInt8();
              flags.push(flag); // check for repeat flag

              if (flag & REPEAT) {
                var count = stream.readUInt8();

                for (var j = 0; j < count; j++) {
                  flags.push(flag);
                }
              }
            }

            for (var i = 0; i < flags.length; i++) {
              var flag = flags[i];
              var point = new Point(!!(flag & ON_CURVE), endPtsOfContours.indexOf(i) >= 0, 0, 0);
              glyph.points.push(point);
            }

            var px = 0;

            for (var i = 0; i < flags.length; i++) {
              var flag = flags[i];
              glyph.points[i].x = px = this._parseGlyphCoord(stream, px, flag & X_SHORT_VECTOR, flag & SAME_X);
            }

            var py = 0;

            for (var i = 0; i < flags.length; i++) {
              var flag = flags[i];
              glyph.points[i].y = py = this._parseGlyphCoord(stream, py, flag & Y_SHORT_VECTOR, flag & SAME_Y);
            }

            if (this._font._variationProcessor) {
              var points = glyph.points.slice();
              points.push.apply(points, this._getPhantomPoints(glyph));

              this._font._variationProcessor.transformPoints(this.id, points);

              glyph.phantomPoints = points.slice(-4);
            }

            return;
          };

          TTFGlyph.prototype._decodeComposite = function _decodeComposite(glyph, stream) {
            var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0; // this is a composite glyph

            glyph.components = [];
            var haveInstructions = false;
            var flags = MORE_COMPONENTS;

            while (flags & MORE_COMPONENTS) {
              flags = stream.readUInt16BE();
              var gPos = stream.pos - offset;
              var glyphID = stream.readUInt16BE();

              if (!haveInstructions) {
                haveInstructions = (flags & WE_HAVE_INSTRUCTIONS) !== 0;
              }

              if (flags & ARG_1_AND_2_ARE_WORDS) {
                var dx = stream.readInt16BE();
                var dy = stream.readInt16BE();
              } else {
                var dx = stream.readInt8();
                var dy = stream.readInt8();
              }

              var component = new Component(glyphID, dx, dy);
              component.pos = gPos;

              if (flags & WE_HAVE_A_SCALE) {
                // fixed number with 14 bits of fraction
                component.scaleX = component.scaleY = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;
              } else if (flags & WE_HAVE_AN_X_AND_Y_SCALE) {
                component.scaleX = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;
                component.scaleY = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;
              } else if (flags & WE_HAVE_A_TWO_BY_TWO) {
                component.scaleX = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;
                component.scale01 = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;
                component.scale10 = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;
                component.scaleY = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;
              }

              glyph.components.push(component);
            }

            if (this._font._variationProcessor) {
              var points = [];

              for (var j = 0; j < glyph.components.length; j++) {
                var component = glyph.components[j];
                points.push(new Point(true, true, component.dx, component.dy));
              }

              points.push.apply(points, this._getPhantomPoints(glyph));

              this._font._variationProcessor.transformPoints(this.id, points);

              glyph.phantomPoints = points.splice(-4, 4);

              for (var i = 0; i < points.length; i++) {
                var point = points[i];
                glyph.components[i].dx = point.x;
                glyph.components[i].dy = point.y;
              }
            }

            return haveInstructions;
          };

          TTFGlyph.prototype._getPhantomPoints = function _getPhantomPoints(glyph) {
            var cbox = this._getCBox(true);

            if (this._metrics == null) {
              this._metrics = Glyph.prototype._getMetrics.call(this, cbox);
            }

            var _metrics = this._metrics,
                advanceWidth = _metrics.advanceWidth,
                advanceHeight = _metrics.advanceHeight,
                leftBearing = _metrics.leftBearing,
                topBearing = _metrics.topBearing;
            return [new Point(false, true, glyph.xMin - leftBearing, 0), new Point(false, true, glyph.xMin - leftBearing + advanceWidth, 0), new Point(false, true, 0, glyph.yMax + topBearing), new Point(false, true, 0, glyph.yMax + topBearing + advanceHeight)];
          }; // Decodes font data, resolves composite glyphs, and returns an array of contours


          TTFGlyph.prototype._getContours = function _getContours() {
            var glyph = this._decode();

            if (!glyph) {
              return [];
            }

            var points = [];

            if (glyph.numberOfContours < 0) {
              // resolve composite glyphs
              for (var _iterator = glyph.components, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
                var _ref;

                if (_isArray) {
                  if (_i >= _iterator.length) break;
                  _ref = _iterator[_i++];
                } else {
                  _i = _iterator.next();
                  if (_i.done) break;
                  _ref = _i.value;
                }

                var component = _ref;

                var _contours = this._font.getGlyph(component.glyphID)._getContours();

                for (var i = 0; i < _contours.length; i++) {
                  var contour = _contours[i];

                  for (var j = 0; j < contour.length; j++) {
                    var _point = contour[j];
                    var x = _point.x * component.scaleX + _point.y * component.scale01 + component.dx;
                    var y = _point.y * component.scaleY + _point.x * component.scale10 + component.dy;
                    points.push(new Point(_point.onCurve, _point.endContour, x, y));
                  }
                }
              }
            } else {
              points = glyph.points || [];
            } // Recompute and cache metrics if we performed variation processing, and don't have an HVAR table


            if (glyph.phantomPoints && !this._font.directory.tables.HVAR) {
              this._metrics.advanceWidth = glyph.phantomPoints[1].x - glyph.phantomPoints[0].x;
              this._metrics.advanceHeight = glyph.phantomPoints[3].y - glyph.phantomPoints[2].y;
              this._metrics.leftBearing = glyph.xMin - glyph.phantomPoints[0].x;
              this._metrics.topBearing = glyph.phantomPoints[2].y - glyph.yMax;
            }

            var contours = [];
            var cur = [];

            for (var k = 0; k < points.length; k++) {
              var point = points[k];
              cur.push(point);

              if (point.endContour) {
                contours.push(cur);
                cur = [];
              }
            }

            return contours;
          };

          TTFGlyph.prototype._getMetrics = function _getMetrics() {
            if (this._metrics) {
              return this._metrics;
            }

            var cbox = this._getCBox(true);

            _Glyph.prototype._getMetrics.call(this, cbox);

            if (this._font._variationProcessor && !this._font.HVAR) {
              // No HVAR table, decode the glyph. This triggers recomputation of metrics.
              this.path;
            }

            return this._metrics;
          }; // Converts contours to a Path object that can be rendered


          TTFGlyph.prototype._getPath = function _getPath() {
            var contours = this._getContours();

            var path = new Path();

            for (var i = 0; i < contours.length; i++) {
              var contour = contours[i];
              var firstPt = contour[0];
              var lastPt = contour[contour.length - 1];
              var start = 0;

              if (firstPt.onCurve) {
                // The first point will be consumed by the moveTo command, so skip in the loop
                var curvePt = null;
                start = 1;
              } else {
                if (lastPt.onCurve) {
                  // Start at the last point if the first point is off curve and the last point is on curve
                  firstPt = lastPt;
                } else {
                  // Start at the middle if both the first and last points are off curve
                  firstPt = new Point(false, false, (firstPt.x + lastPt.x) / 2, (firstPt.y + lastPt.y) / 2);
                }

                var curvePt = firstPt;
              }

              path.moveTo(firstPt.x, firstPt.y);

              for (var j = start; j < contour.length; j++) {
                var pt = contour[j];
                var prevPt = j === 0 ? firstPt : contour[j - 1];

                if (prevPt.onCurve && pt.onCurve) {
                  path.lineTo(pt.x, pt.y);
                } else if (prevPt.onCurve && !pt.onCurve) {
                  var curvePt = pt;
                } else if (!prevPt.onCurve && !pt.onCurve) {
                  var midX = (prevPt.x + pt.x) / 2;
                  var midY = (prevPt.y + pt.y) / 2;
                  path.quadraticCurveTo(prevPt.x, prevPt.y, midX, midY);
                  var curvePt = pt;
                } else if (!prevPt.onCurve && pt.onCurve) {
                  path.quadraticCurveTo(curvePt.x, curvePt.y, pt.x, pt.y);
                  var curvePt = null;
                } else {
                  throw new Error("Unknown TTF path state");
                }
              } // Connect the first and last points


              if (curvePt) {
                path.quadraticCurveTo(curvePt.x, curvePt.y, firstPt.x, firstPt.y);
              }

              path.closePath();
            }

            return path;
          };

          return TTFGlyph;
        }(Glyph);
        /**
         * Represents an OpenType PostScript glyph, in the Compact Font Format.
         */


        var CFFGlyph = function (_Glyph) {
          _inherits(CFFGlyph, _Glyph);

          function CFFGlyph() {
            _classCallCheck(this, CFFGlyph);

            return _possibleConstructorReturn(this, _Glyph.apply(this, arguments));
          }

          CFFGlyph.prototype._getName = function _getName() {
            if (this._font.CFF2) {
              return _Glyph.prototype._getName.call(this);
            }

            return this._font['CFF '].getGlyphName(this.id);
          };

          CFFGlyph.prototype.bias = function bias(s) {
            if (s.length < 1240) {
              return 107;
            } else if (s.length < 33900) {
              return 1131;
            } else {
              return 32768;
            }
          };

          CFFGlyph.prototype._getPath = function _getPath() {
            var cff = this._font.CFF2 || this._font['CFF '];
            var stream = cff.stream;
            var str = cff.topDict.CharStrings[this.id];
            var end = str.offset + str.length;
            stream.pos = str.offset;
            var path = new Path();
            var stack = [];
            var trans = [];
            var width = null;
            var nStems = 0;
            var x = 0,
                y = 0;
            var usedGsubrs = void 0;
            var usedSubrs = void 0;
            var open = false;
            this._usedGsubrs = usedGsubrs = {};
            this._usedSubrs = usedSubrs = {};
            var gsubrs = cff.globalSubrIndex || [];
            var gsubrsBias = this.bias(gsubrs);
            var privateDict = cff.privateDictForGlyph(this.id) || {};
            var subrs = privateDict.Subrs || [];
            var subrsBias = this.bias(subrs);
            var vstore = cff.topDict.vstore && cff.topDict.vstore.itemVariationStore;
            var vsindex = privateDict.vsindex;
            var variationProcessor = this._font._variationProcessor;

            function checkWidth() {
              if (width == null) {
                width = stack.shift() + privateDict.nominalWidthX;
              }
            }

            function parseStems() {
              if (stack.length % 2 !== 0) {
                checkWidth();
              }

              nStems += stack.length >> 1;
              return stack.length = 0;
            }

            function moveTo(x, y) {
              if (open) {
                path.closePath();
              }

              path.moveTo(x, y);
              open = true;
            }

            var parse = function parse() {
              while (stream.pos < end) {
                var op = stream.readUInt8();

                if (op < 32) {
                  switch (op) {
                    case 1: // hstem

                    case 3: // vstem

                    case 18: // hstemhm

                    case 23:
                      // vstemhm
                      parseStems();
                      break;

                    case 4:
                      // vmoveto
                      if (stack.length > 1) {
                        checkWidth();
                      }

                      y += stack.shift();
                      moveTo(x, y);
                      break;

                    case 5:
                      // rlineto
                      while (stack.length >= 2) {
                        x += stack.shift();
                        y += stack.shift();
                        path.lineTo(x, y);
                      }

                      break;

                    case 6: // hlineto

                    case 7:
                      // vlineto
                      var phase = op === 6;

                      while (stack.length >= 1) {
                        if (phase) {
                          x += stack.shift();
                        } else {
                          y += stack.shift();
                        }

                        path.lineTo(x, y);
                        phase = !phase;
                      }

                      break;

                    case 8:
                      // rrcurveto
                      while (stack.length > 0) {
                        var c1x = x + stack.shift();
                        var c1y = y + stack.shift();
                        var c2x = c1x + stack.shift();
                        var c2y = c1y + stack.shift();
                        x = c2x + stack.shift();
                        y = c2y + stack.shift();
                        path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);
                      }

                      break;

                    case 10:
                      // callsubr
                      var index = stack.pop() + subrsBias;
                      var subr = subrs[index];

                      if (subr) {
                        usedSubrs[index] = true;
                        var p = stream.pos;
                        var e = end;
                        stream.pos = subr.offset;
                        end = subr.offset + subr.length;
                        parse();
                        stream.pos = p;
                        end = e;
                      }

                      break;

                    case 11:
                      // return
                      if (cff.version >= 2) {
                        break;
                      }

                      return;

                    case 14:
                      // endchar
                      if (cff.version >= 2) {
                        break;
                      }

                      if (stack.length > 0) {
                        checkWidth();
                      }

                      if (open) {
                        path.closePath();
                        open = false;
                      }

                      break;

                    case 15:
                      {
                        // vsindex
                        if (cff.version < 2) {
                          throw new Error('vsindex operator not supported in CFF v1');
                        }

                        vsindex = stack.pop();
                        break;
                      }

                    case 16:
                      {
                        // blend
                        if (cff.version < 2) {
                          throw new Error('blend operator not supported in CFF v1');
                        }

                        if (!variationProcessor) {
                          throw new Error('blend operator in non-variation font');
                        }

                        var blendVector = variationProcessor.getBlendVector(vstore, vsindex);
                        var numBlends = stack.pop();
                        var numOperands = numBlends * blendVector.length;
                        var delta = stack.length - numOperands;
                        var base = delta - numBlends;

                        for (var i = 0; i < numBlends; i++) {
                          var sum = stack[base + i];

                          for (var j = 0; j < blendVector.length; j++) {
                            sum += blendVector[j] * stack[delta++];
                          }

                          stack[base + i] = sum;
                        }

                        while (numOperands--) {
                          stack.pop();
                        }

                        break;
                      }

                    case 19: // hintmask

                    case 20:
                      // cntrmask
                      parseStems();
                      stream.pos += nStems + 7 >> 3;
                      break;

                    case 21:
                      // rmoveto
                      if (stack.length > 2) {
                        checkWidth();
                      }

                      x += stack.shift();
                      y += stack.shift();
                      moveTo(x, y);
                      break;

                    case 22:
                      // hmoveto
                      if (stack.length > 1) {
                        checkWidth();
                      }

                      x += stack.shift();
                      moveTo(x, y);
                      break;

                    case 24:
                      // rcurveline
                      while (stack.length >= 8) {
                        var c1x = x + stack.shift();
                        var c1y = y + stack.shift();
                        var c2x = c1x + stack.shift();
                        var c2y = c1y + stack.shift();
                        x = c2x + stack.shift();
                        y = c2y + stack.shift();
                        path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);
                      }

                      x += stack.shift();
                      y += stack.shift();
                      path.lineTo(x, y);
                      break;

                    case 25:
                      // rlinecurve
                      while (stack.length >= 8) {
                        x += stack.shift();
                        y += stack.shift();
                        path.lineTo(x, y);
                      }

                      var c1x = x + stack.shift();
                      var c1y = y + stack.shift();
                      var c2x = c1x + stack.shift();
                      var c2y = c1y + stack.shift();
                      x = c2x + stack.shift();
                      y = c2y + stack.shift();
                      path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);
                      break;

                    case 26:
                      // vvcurveto
                      if (stack.length % 2) {
                        x += stack.shift();
                      }

                      while (stack.length >= 4) {
                        c1x = x;
                        c1y = y + stack.shift();
                        c2x = c1x + stack.shift();
                        c2y = c1y + stack.shift();
                        x = c2x;
                        y = c2y + stack.shift();
                        path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);
                      }

                      break;

                    case 27:
                      // hhcurveto
                      if (stack.length % 2) {
                        y += stack.shift();
                      }

                      while (stack.length >= 4) {
                        c1x = x + stack.shift();
                        c1y = y;
                        c2x = c1x + stack.shift();
                        c2y = c1y + stack.shift();
                        x = c2x + stack.shift();
                        y = c2y;
                        path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);
                      }

                      break;

                    case 28:
                      // shortint
                      stack.push(stream.readInt16BE());
                      break;

                    case 29:
                      // callgsubr
                      index = stack.pop() + gsubrsBias;
                      subr = gsubrs[index];

                      if (subr) {
                        usedGsubrs[index] = true;
                        var p = stream.pos;
                        var e = end;
                        stream.pos = subr.offset;
                        end = subr.offset + subr.length;
                        parse();
                        stream.pos = p;
                        end = e;
                      }

                      break;

                    case 30: // vhcurveto

                    case 31:
                      // hvcurveto
                      phase = op === 31;

                      while (stack.length >= 4) {
                        if (phase) {
                          c1x = x + stack.shift();
                          c1y = y;
                          c2x = c1x + stack.shift();
                          c2y = c1y + stack.shift();
                          y = c2y + stack.shift();
                          x = c2x + (stack.length === 1 ? stack.shift() : 0);
                        } else {
                          c1x = x;
                          c1y = y + stack.shift();
                          c2x = c1x + stack.shift();
                          c2y = c1y + stack.shift();
                          x = c2x + stack.shift();
                          y = c2y + (stack.length === 1 ? stack.shift() : 0);
                        }

                        path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);
                        phase = !phase;
                      }

                      break;

                    case 12:
                      op = stream.readUInt8();

                      switch (op) {
                        case 3:
                          // and
                          var a = stack.pop();
                          var b = stack.pop();
                          stack.push(a && b ? 1 : 0);
                          break;

                        case 4:
                          // or
                          a = stack.pop();
                          b = stack.pop();
                          stack.push(a || b ? 1 : 0);
                          break;

                        case 5:
                          // not
                          a = stack.pop();
                          stack.push(a ? 0 : 1);
                          break;

                        case 9:
                          // abs
                          a = stack.pop();
                          stack.push(Math.abs(a));
                          break;

                        case 10:
                          // add
                          a = stack.pop();
                          b = stack.pop();
                          stack.push(a + b);
                          break;

                        case 11:
                          // sub
                          a = stack.pop();
                          b = stack.pop();
                          stack.push(a - b);
                          break;

                        case 12:
                          // div
                          a = stack.pop();
                          b = stack.pop();
                          stack.push(a / b);
                          break;

                        case 14:
                          // neg
                          a = stack.pop();
                          stack.push(-a);
                          break;

                        case 15:
                          // eq
                          a = stack.pop();
                          b = stack.pop();
                          stack.push(a === b ? 1 : 0);
                          break;

                        case 18:
                          // drop
                          stack.pop();
                          break;

                        case 20:
                          // put
                          var val = stack.pop();
                          var idx = stack.pop();
                          trans[idx] = val;
                          break;

                        case 21:
                          // get
                          idx = stack.pop();
                          stack.push(trans[idx] || 0);
                          break;

                        case 22:
                          // ifelse
                          var s1 = stack.pop();
                          var s2 = stack.pop();
                          var v1 = stack.pop();
                          var v2 = stack.pop();
                          stack.push(v1 <= v2 ? s1 : s2);
                          break;

                        case 23:
                          // random
                          stack.push(Math.random());
                          break;

                        case 24:
                          // mul
                          a = stack.pop();
                          b = stack.pop();
                          stack.push(a * b);
                          break;

                        case 26:
                          // sqrt
                          a = stack.pop();
                          stack.push(Math.sqrt(a));
                          break;

                        case 27:
                          // dup
                          a = stack.pop();
                          stack.push(a, a);
                          break;

                        case 28:
                          // exch
                          a = stack.pop();
                          b = stack.pop();
                          stack.push(b, a);
                          break;

                        case 29:
                          // index
                          idx = stack.pop();

                          if (idx < 0) {
                            idx = 0;
                          } else if (idx > stack.length - 1) {
                            idx = stack.length - 1;
                          }

                          stack.push(stack[idx]);
                          break;

                        case 30:
                          // roll
                          var n = stack.pop();

                          var _j = stack.pop();

                          if (_j >= 0) {
                            while (_j > 0) {
                              var t = stack[n - 1];

                              for (var _i = n - 2; _i >= 0; _i--) {
                                stack[_i + 1] = stack[_i];
                              }

                              stack[0] = t;
                              _j--;
                            }
                          } else {
                            while (_j < 0) {
                              var t = stack[0];

                              for (var _i2 = 0; _i2 <= n; _i2++) {
                                stack[_i2] = stack[_i2 + 1];
                              }

                              stack[n - 1] = t;
                              _j++;
                            }
                          }

                          break;

                        case 34:
                          // hflex
                          c1x = x + stack.shift();
                          c1y = y;
                          c2x = c1x + stack.shift();
                          c2y = c1y + stack.shift();
                          var c3x = c2x + stack.shift();
                          var c3y = c2y;
                          var c4x = c3x + stack.shift();
                          var c4y = c3y;
                          var c5x = c4x + stack.shift();
                          var c5y = c4y;
                          var c6x = c5x + stack.shift();
                          var c6y = c5y;
                          x = c6x;
                          y = c6y;
                          path.bezierCurveTo(c1x, c1y, c2x, c2y, c3x, c3y);
                          path.bezierCurveTo(c4x, c4y, c5x, c5y, c6x, c6y);
                          break;

                        case 35:
                          // flex
                          var pts = [];

                          for (var _i3 = 0; _i3 <= 5; _i3++) {
                            x += stack.shift();
                            y += stack.shift();
                            pts.push(x, y);
                          }

                          path.bezierCurveTo.apply(path, pts.slice(0, 6));
                          path.bezierCurveTo.apply(path, pts.slice(6));
                          stack.shift(); // fd

                          break;

                        case 36:
                          // hflex1
                          c1x = x + stack.shift();
                          c1y = y + stack.shift();
                          c2x = c1x + stack.shift();
                          c2y = c1y + stack.shift();
                          c3x = c2x + stack.shift();
                          c3y = c2y;
                          c4x = c3x + stack.shift();
                          c4y = c3y;
                          c5x = c4x + stack.shift();
                          c5y = c4y + stack.shift();
                          c6x = c5x + stack.shift();
                          c6y = c5y;
                          x = c6x;
                          y = c6y;
                          path.bezierCurveTo(c1x, c1y, c2x, c2y, c3x, c3y);
                          path.bezierCurveTo(c4x, c4y, c5x, c5y, c6x, c6y);
                          break;

                        case 37:
                          // flex1
                          var startx = x;
                          var starty = y;
                          pts = [];

                          for (var _i4 = 0; _i4 <= 4; _i4++) {
                            x += stack.shift();
                            y += stack.shift();
                            pts.push(x, y);
                          }

                          if (Math.abs(x - startx) > Math.abs(y - starty)) {
                            // horizontal
                            x += stack.shift();
                            y = starty;
                          } else {
                            x = startx;
                            y += stack.shift();
                          }

                          pts.push(x, y);
                          path.bezierCurveTo.apply(path, pts.slice(0, 6));
                          path.bezierCurveTo.apply(path, pts.slice(6));
                          break;

                        default:
                          throw new Error('Unknown op: 12 ' + op);
                      }

                      break;

                    default:
                      throw new Error('Unknown op: ' + op);
                  }
                } else if (op < 247) {
                  stack.push(op - 139);
                } else if (op < 251) {
                  var b1 = stream.readUInt8();
                  stack.push((op - 247) * 256 + b1 + 108);
                } else if (op < 255) {
                  var b1 = stream.readUInt8();
                  stack.push(-(op - 251) * 256 - b1 - 108);
                } else {
                  stack.push(stream.readInt32BE() / 65536);
                }
              }
            };

            parse();

            if (open) {
              path.closePath();
            }

            return path;
          };

          return CFFGlyph;
        }(Glyph);

        var SBIXImage = new r.Struct({
          originX: r.uint16,
          originY: r.uint16,
          type: new r.String(4),
          data: new r.Buffer(function (t) {
            return t.parent.buflen - t._currentOffset;
          })
        });
        /**
         * Represents a color (e.g. emoji) glyph in Apple's SBIX format.
         */

        var SBIXGlyph = function (_TTFGlyph) {
          _inherits(SBIXGlyph, _TTFGlyph);

          function SBIXGlyph() {
            _classCallCheck(this, SBIXGlyph);

            return _possibleConstructorReturn(this, _TTFGlyph.apply(this, arguments));
          }
          /**
           * Returns an object representing a glyph image at the given point size.
           * The object has a data property with a Buffer containing the actual image data,
           * along with the image type, and origin.
           *
           * @param {number} size
           * @return {object}
           */


          SBIXGlyph.prototype.getImageForSize = function getImageForSize(size) {
            for (var i = 0; i < this._font.sbix.imageTables.length; i++) {
              var table = this._font.sbix.imageTables[i];

              if (table.ppem >= size) {
                break;
              }
            }

            var offsets = table.imageOffsets;
            var start = offsets[this.id];
            var end = offsets[this.id + 1];

            if (start === end) {
              return null;
            }

            this._font.stream.pos = start;
            return SBIXImage.decode(this._font.stream, {
              buflen: end - start
            });
          };

          SBIXGlyph.prototype.render = function render(ctx, size) {
            var img = this.getImageForSize(size);

            if (img != null) {
              var scale = size / this._font.unitsPerEm;
              ctx.image(img.data, {
                height: size,
                x: img.originX,
                y: (this.bbox.minY - img.originY) * scale
              });
            }

            if (this._font.sbix.flags.renderOutlines) {
              _TTFGlyph.prototype.render.call(this, ctx, size);
            }
          };

          return SBIXGlyph;
        }(TTFGlyph);

        var COLRLayer = function COLRLayer(glyph, color) {
          _classCallCheck(this, COLRLayer);

          this.glyph = glyph;
          this.color = color;
        };
        /**
         * Represents a color (e.g. emoji) glyph in Microsoft's COLR format.
         * Each glyph in this format contain a list of colored layers, each
         * of which  is another vector glyph.
         */


        var COLRGlyph = function (_Glyph) {
          _inherits(COLRGlyph, _Glyph);

          function COLRGlyph() {
            _classCallCheck(this, COLRGlyph);

            return _possibleConstructorReturn(this, _Glyph.apply(this, arguments));
          }

          COLRGlyph.prototype._getBBox = function _getBBox() {
            var bbox = new BBox();

            for (var i = 0; i < this.layers.length; i++) {
              var layer = this.layers[i];
              var b = layer.glyph.bbox;
              bbox.addPoint(b.minX, b.minY);
              bbox.addPoint(b.maxX, b.maxY);
            }

            return bbox;
          };
          /**
           * Returns an array of objects containing the glyph and color for
           * each layer in the composite color glyph.
           * @type {object[]}
           */


          COLRGlyph.prototype.render = function render(ctx, size) {
            for (var _iterator = this.layers, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
              var _ref;

              if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref = _iterator[_i++];
              } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref = _i.value;
              }

              var _ref2 = _ref,
                  glyph = _ref2.glyph,
                  color = _ref2.color;
              ctx.fillColor([color.red, color.green, color.blue], color.alpha / 255 * 100);
              glyph.render(ctx, size);
            }

            return;
          };

          _createClass(COLRGlyph, [{
            key: 'layers',
            get: function get() {
              var cpal = this._font.CPAL;
              var colr = this._font.COLR;
              var low = 0;
              var high = colr.baseGlyphRecord.length - 1;

              while (low <= high) {
                var mid = low + high >> 1;
                var rec = colr.baseGlyphRecord[mid];

                if (this.id < rec.gid) {
                  high = mid - 1;
                } else if (this.id > rec.gid) {
                  low = mid + 1;
                } else {
                  var baseLayer = rec;
                  break;
                }
              } // if base glyph not found in COLR table,
              // default to normal glyph from glyf or CFF


              if (baseLayer == null) {
                var g = this._font._getBaseGlyph(this.id);

                var color = {
                  red: 0,
                  green: 0,
                  blue: 0,
                  alpha: 255
                };
                return [new COLRLayer(g, color)];
              } // otherwise, return an array of all the layers


              var layers = [];

              for (var i = baseLayer.firstLayerIndex; i < baseLayer.firstLayerIndex + baseLayer.numLayers; i++) {
                var rec = colr.layerRecords[i];
                var color = cpal.colorRecords[rec.paletteIndex];

                var g = this._font._getBaseGlyph(rec.gid);

                layers.push(new COLRLayer(g, color));
              }

              return layers;
            }
          }]);

          return COLRGlyph;
        }(Glyph);

        var TUPLES_SHARE_POINT_NUMBERS = 0x8000;
        var TUPLE_COUNT_MASK = 0x0fff;
        var EMBEDDED_TUPLE_COORD = 0x8000;
        var INTERMEDIATE_TUPLE = 0x4000;
        var PRIVATE_POINT_NUMBERS = 0x2000;
        var TUPLE_INDEX_MASK = 0x0fff;
        var POINTS_ARE_WORDS = 0x80;
        var POINT_RUN_COUNT_MASK = 0x7f;
        var DELTAS_ARE_ZERO = 0x80;
        var DELTAS_ARE_WORDS = 0x40;
        var DELTA_RUN_COUNT_MASK = 0x3f;
        /**
         * This class is transforms TrueType glyphs according to the data from
         * the Apple Advanced Typography variation tables (fvar, gvar, and avar).
         * These tables allow infinite adjustments to glyph weight, width, slant,
         * and optical size without the designer needing to specify every exact style.
         *
         * Apple's documentation for these tables is not great, so thanks to the
         * Freetype project for figuring much of this out.
         *
         * @private
         */

        var GlyphVariationProcessor = function () {
          function GlyphVariationProcessor(font, coords) {
            _classCallCheck(this, GlyphVariationProcessor);

            this.font = font;
            this.normalizedCoords = this.normalizeCoords(coords);
            this.blendVectors = new _Map();
          }

          GlyphVariationProcessor.prototype.normalizeCoords = function normalizeCoords(coords) {
            // the default mapping is linear along each axis, in two segments:
            // from the minValue to defaultValue, and from defaultValue to maxValue.
            var normalized = [];

            for (var i = 0; i < this.font.fvar.axis.length; i++) {
              var axis = this.font.fvar.axis[i];

              if (coords[i] < axis.defaultValue) {
                normalized.push((coords[i] - axis.defaultValue + _Number$EPSILON) / (axis.defaultValue - axis.minValue + _Number$EPSILON));
              } else {
                normalized.push((coords[i] - axis.defaultValue + _Number$EPSILON) / (axis.maxValue - axis.defaultValue + _Number$EPSILON));
              }
            } // if there is an avar table, the normalized value is calculated
            // by interpolating between the two nearest mapped values.


            if (this.font.avar) {
              for (var i = 0; i < this.font.avar.segment.length; i++) {
                var segment = this.font.avar.segment[i];

                for (var j = 0; j < segment.correspondence.length; j++) {
                  var pair = segment.correspondence[j];

                  if (j >= 1 && normalized[i] < pair.fromCoord) {
                    var prev = segment.correspondence[j - 1];
                    normalized[i] = ((normalized[i] - prev.fromCoord) * (pair.toCoord - prev.toCoord) + _Number$EPSILON) / (pair.fromCoord - prev.fromCoord + _Number$EPSILON) + prev.toCoord;
                    break;
                  }
                }
              }
            }

            return normalized;
          };

          GlyphVariationProcessor.prototype.transformPoints = function transformPoints(gid, glyphPoints) {
            if (!this.font.fvar || !this.font.gvar) {
              return;
            }

            var gvar = this.font.gvar;

            if (gid >= gvar.glyphCount) {
              return;
            }

            var offset = gvar.offsets[gid];

            if (offset === gvar.offsets[gid + 1]) {
              return;
            } // Read the gvar data for this glyph


            var stream = this.font.stream;
            stream.pos = offset;

            if (stream.pos >= stream.length) {
              return;
            }

            var tupleCount = stream.readUInt16BE();
            var offsetToData = offset + stream.readUInt16BE();

            if (tupleCount & TUPLES_SHARE_POINT_NUMBERS) {
              var here = stream.pos;
              stream.pos = offsetToData;
              var sharedPoints = this.decodePoints();
              offsetToData = stream.pos;
              stream.pos = here;
            }

            var origPoints = glyphPoints.map(function (pt) {
              return pt.copy();
            });
            tupleCount &= TUPLE_COUNT_MASK;

            for (var i = 0; i < tupleCount; i++) {
              var tupleDataSize = stream.readUInt16BE();
              var tupleIndex = stream.readUInt16BE();

              if (tupleIndex & EMBEDDED_TUPLE_COORD) {
                var tupleCoords = [];

                for (var a = 0; a < gvar.axisCount; a++) {
                  tupleCoords.push(stream.readInt16BE() / 16384);
                }
              } else {
                if ((tupleIndex & TUPLE_INDEX_MASK) >= gvar.globalCoordCount) {
                  throw new Error('Invalid gvar table');
                }

                var tupleCoords = gvar.globalCoords[tupleIndex & TUPLE_INDEX_MASK];
              }

              if (tupleIndex & INTERMEDIATE_TUPLE) {
                var startCoords = [];

                for (var _a = 0; _a < gvar.axisCount; _a++) {
                  startCoords.push(stream.readInt16BE() / 16384);
                }

                var endCoords = [];

                for (var _a2 = 0; _a2 < gvar.axisCount; _a2++) {
                  endCoords.push(stream.readInt16BE() / 16384);
                }
              } // Get the factor at which to apply this tuple


              var factor = this.tupleFactor(tupleIndex, tupleCoords, startCoords, endCoords);

              if (factor === 0) {
                offsetToData += tupleDataSize;
                continue;
              }

              var here = stream.pos;
              stream.pos = offsetToData;

              if (tupleIndex & PRIVATE_POINT_NUMBERS) {
                var points = this.decodePoints();
              } else {
                var points = sharedPoints;
              } // points.length = 0 means there are deltas for all points


              var nPoints = points.length === 0 ? glyphPoints.length : points.length;
              var xDeltas = this.decodeDeltas(nPoints);
              var yDeltas = this.decodeDeltas(nPoints);

              if (points.length === 0) {
                // all points
                for (var _i = 0; _i < glyphPoints.length; _i++) {
                  var point = glyphPoints[_i];
                  point.x += Math.round(xDeltas[_i] * factor);
                  point.y += Math.round(yDeltas[_i] * factor);
                }
              } else {
                var outPoints = origPoints.map(function (pt) {
                  return pt.copy();
                });
                var hasDelta = glyphPoints.map(function () {
                  return false;
                });

                for (var _i2 = 0; _i2 < points.length; _i2++) {
                  var idx = points[_i2];

                  if (idx < glyphPoints.length) {
                    var _point = outPoints[idx];
                    hasDelta[idx] = true;
                    _point.x += Math.round(xDeltas[_i2] * factor);
                    _point.y += Math.round(yDeltas[_i2] * factor);
                  }
                }

                this.interpolateMissingDeltas(outPoints, origPoints, hasDelta);

                for (var _i3 = 0; _i3 < glyphPoints.length; _i3++) {
                  var deltaX = outPoints[_i3].x - origPoints[_i3].x;
                  var deltaY = outPoints[_i3].y - origPoints[_i3].y;
                  glyphPoints[_i3].x += deltaX;
                  glyphPoints[_i3].y += deltaY;
                }
              }

              offsetToData += tupleDataSize;
              stream.pos = here;
            }
          };

          GlyphVariationProcessor.prototype.decodePoints = function decodePoints() {
            var stream = this.font.stream;
            var count = stream.readUInt8();

            if (count & POINTS_ARE_WORDS) {
              count = (count & POINT_RUN_COUNT_MASK) << 8 | stream.readUInt8();
            }

            var points = new Uint16Array(count);
            var i = 0;
            var point = 0;

            while (i < count) {
              var run = stream.readUInt8();
              var runCount = (run & POINT_RUN_COUNT_MASK) + 1;
              var fn = run & POINTS_ARE_WORDS ? stream.readUInt16 : stream.readUInt8;

              for (var j = 0; j < runCount && i < count; j++) {
                point += fn.call(stream);
                points[i++] = point;
              }
            }

            return points;
          };

          GlyphVariationProcessor.prototype.decodeDeltas = function decodeDeltas(count) {
            var stream = this.font.stream;
            var i = 0;
            var deltas = new Int16Array(count);

            while (i < count) {
              var run = stream.readUInt8();
              var runCount = (run & DELTA_RUN_COUNT_MASK) + 1;

              if (run & DELTAS_ARE_ZERO) {
                i += runCount;
              } else {
                var fn = run & DELTAS_ARE_WORDS ? stream.readInt16BE : stream.readInt8;

                for (var j = 0; j < runCount && i < count; j++) {
                  deltas[i++] = fn.call(stream);
                }
              }
            }

            return deltas;
          };

          GlyphVariationProcessor.prototype.tupleFactor = function tupleFactor(tupleIndex, tupleCoords, startCoords, endCoords) {
            var normalized = this.normalizedCoords;
            var gvar = this.font.gvar;
            var factor = 1;

            for (var i = 0; i < gvar.axisCount; i++) {
              if (tupleCoords[i] === 0) {
                continue;
              }

              if (normalized[i] === 0) {
                return 0;
              }

              if ((tupleIndex & INTERMEDIATE_TUPLE) === 0) {
                if (normalized[i] < Math.min(0, tupleCoords[i]) || normalized[i] > Math.max(0, tupleCoords[i])) {
                  return 0;
                }

                factor = (factor * normalized[i] + _Number$EPSILON) / (tupleCoords[i] + _Number$EPSILON);
              } else {
                if (normalized[i] < startCoords[i] || normalized[i] > endCoords[i]) {
                  return 0;
                } else if (normalized[i] < tupleCoords[i]) {
                  factor = factor * (normalized[i] - startCoords[i] + _Number$EPSILON) / (tupleCoords[i] - startCoords[i] + _Number$EPSILON);
                } else {
                  factor = factor * (endCoords[i] - normalized[i] + _Number$EPSILON) / (endCoords[i] - tupleCoords[i] + _Number$EPSILON);
                }
              }
            }

            return factor;
          }; // Interpolates points without delta values.
          // Needed for the Ø and Q glyphs in Skia.
          // Algorithm from Freetype.


          GlyphVariationProcessor.prototype.interpolateMissingDeltas = function interpolateMissingDeltas(points, inPoints, hasDelta) {
            if (points.length === 0) {
              return;
            }

            var point = 0;

            while (point < points.length) {
              var firstPoint = point; // find the end point of the contour

              var endPoint = point;
              var pt = points[endPoint];

              while (!pt.endContour) {
                pt = points[++endPoint];
              } // find the first point that has a delta


              while (point <= endPoint && !hasDelta[point]) {
                point++;
              }

              if (point > endPoint) {
                continue;
              }

              var firstDelta = point;
              var curDelta = point;
              point++;

              while (point <= endPoint) {
                // find the next point with a delta, and interpolate intermediate points
                if (hasDelta[point]) {
                  this.deltaInterpolate(curDelta + 1, point - 1, curDelta, point, inPoints, points);
                  curDelta = point;
                }

                point++;
              } // shift contour if we only have a single delta


              if (curDelta === firstDelta) {
                this.deltaShift(firstPoint, endPoint, curDelta, inPoints, points);
              } else {
                // otherwise, handle the remaining points at the end and beginning of the contour
                this.deltaInterpolate(curDelta + 1, endPoint, curDelta, firstDelta, inPoints, points);

                if (firstDelta > 0) {
                  this.deltaInterpolate(firstPoint, firstDelta - 1, curDelta, firstDelta, inPoints, points);
                }
              }

              point = endPoint + 1;
            }
          };

          GlyphVariationProcessor.prototype.deltaInterpolate = function deltaInterpolate(p1, p2, ref1, ref2, inPoints, outPoints) {
            if (p1 > p2) {
              return;
            }

            var iterable = ['x', 'y'];

            for (var i = 0; i < iterable.length; i++) {
              var k = iterable[i];

              if (inPoints[ref1][k] > inPoints[ref2][k]) {
                var p = ref1;
                ref1 = ref2;
                ref2 = p;
              }

              var in1 = inPoints[ref1][k];
              var in2 = inPoints[ref2][k];
              var out1 = outPoints[ref1][k];
              var out2 = outPoints[ref2][k]; // If the reference points have the same coordinate but different
              // delta, inferred delta is zero.  Otherwise interpolate.

              if (in1 !== in2 || out1 === out2) {
                var scale = in1 === in2 ? 0 : (out2 - out1) / (in2 - in1);

                for (var _p = p1; _p <= p2; _p++) {
                  var out = inPoints[_p][k];

                  if (out <= in1) {
                    out += out1 - in1;
                  } else if (out >= in2) {
                    out += out2 - in2;
                  } else {
                    out = out1 + (out - in1) * scale;
                  }

                  outPoints[_p][k] = out;
                }
              }
            }
          };

          GlyphVariationProcessor.prototype.deltaShift = function deltaShift(p1, p2, ref, inPoints, outPoints) {
            var deltaX = outPoints[ref].x - inPoints[ref].x;
            var deltaY = outPoints[ref].y - inPoints[ref].y;

            if (deltaX === 0 && deltaY === 0) {
              return;
            }

            for (var p = p1; p <= p2; p++) {
              if (p !== ref) {
                outPoints[p].x += deltaX;
                outPoints[p].y += deltaY;
              }
            }
          };

          GlyphVariationProcessor.prototype.getAdvanceAdjustment = function getAdvanceAdjustment(gid, table) {
            var outerIndex = void 0,
                innerIndex = void 0;

            if (table.advanceWidthMapping) {
              var idx = gid;

              if (idx >= table.advanceWidthMapping.mapCount) {
                idx = table.advanceWidthMapping.mapCount - 1;
              }

              var entryFormat = table.advanceWidthMapping.entryFormat;
              var _table$advanceWidthMa = table.advanceWidthMapping.mapData[idx];
              outerIndex = _table$advanceWidthMa.outerIndex;
              innerIndex = _table$advanceWidthMa.innerIndex;
            } else {
              outerIndex = 0;
              innerIndex = gid;
            }

            return this.getDelta(table.itemVariationStore, outerIndex, innerIndex);
          }; // See pseudo code from `Font Variations Overview'
          // in the OpenType specification.


          GlyphVariationProcessor.prototype.getDelta = function getDelta(itemStore, outerIndex, innerIndex) {
            if (outerIndex >= itemStore.itemVariationData.length) {
              return 0;
            }

            var varData = itemStore.itemVariationData[outerIndex];

            if (innerIndex >= varData.deltaSets.length) {
              return 0;
            }

            var deltaSet = varData.deltaSets[innerIndex];
            var blendVector = this.getBlendVector(itemStore, outerIndex);
            var netAdjustment = 0;

            for (var master = 0; master < varData.regionIndexCount; master++) {
              netAdjustment += deltaSet.deltas[master] * blendVector[master];
            }

            return netAdjustment;
          };

          GlyphVariationProcessor.prototype.getBlendVector = function getBlendVector(itemStore, outerIndex) {
            var varData = itemStore.itemVariationData[outerIndex];

            if (this.blendVectors.has(varData)) {
              return this.blendVectors.get(varData);
            }

            var normalizedCoords = this.normalizedCoords;
            var blendVector = []; // outer loop steps through master designs to be blended

            for (var master = 0; master < varData.regionIndexCount; master++) {
              var scalar = 1;
              var regionIndex = varData.regionIndexes[master];
              var axes = itemStore.variationRegionList.variationRegions[regionIndex]; // inner loop steps through axes in this region

              for (var j = 0; j < axes.length; j++) {
                var axis = axes[j];
                var axisScalar = void 0; // compute the scalar contribution of this axis
                // ignore invalid ranges

                if (axis.startCoord > axis.peakCoord || axis.peakCoord > axis.endCoord) {
                  axisScalar = 1;
                } else if (axis.startCoord < 0 && axis.endCoord > 0 && axis.peakCoord !== 0) {
                  axisScalar = 1; // peak of 0 means ignore this axis
                } else if (axis.peakCoord === 0) {
                  axisScalar = 1; // ignore this region if coords are out of range
                } else if (normalizedCoords[j] < axis.startCoord || normalizedCoords[j] > axis.endCoord) {
                  axisScalar = 0; // calculate a proportional factor
                } else {
                  if (normalizedCoords[j] === axis.peakCoord) {
                    axisScalar = 1;
                  } else if (normalizedCoords[j] < axis.peakCoord) {
                    axisScalar = (normalizedCoords[j] - axis.startCoord + _Number$EPSILON) / (axis.peakCoord - axis.startCoord + _Number$EPSILON);
                  } else {
                    axisScalar = (axis.endCoord - normalizedCoords[j] + _Number$EPSILON) / (axis.endCoord - axis.peakCoord + _Number$EPSILON);
                  }
                } // take product of all the axis scalars


                scalar *= axisScalar;
              }

              blendVector[master] = scalar;
            }

            this.blendVectors.set(varData, blendVector);
            return blendVector;
          };

          return GlyphVariationProcessor;
        }();

        var resolved = _Promise.resolve();

        var Subset = function () {
          function Subset(font) {
            _classCallCheck(this, Subset);

            this.font = font;
            this.glyphs = [];
            this.mapping = {}; // always include the missing glyph

            this.includeGlyph(0);
          }

          Subset.prototype.includeGlyph = function includeGlyph(glyph) {
            if ((typeof glyph === 'undefined' ? 'undefined' : _typeof(glyph)) === 'object') {
              glyph = glyph.id;
            }

            if (this.mapping[glyph] == null) {
              this.glyphs.push(glyph);
              this.mapping[glyph] = this.glyphs.length - 1;
            }

            return this.mapping[glyph];
          };

          Subset.prototype.encodeStream = function encodeStream() {
            var _this = this;

            var s = new r.EncodeStream();
            resolved.then(function () {
              _this.encode(s);

              return s.end();
            });
            return s;
          };

          return Subset;
        }(); // Flags for simple glyphs


        var ON_CURVE$1 = 1 << 0;
        var X_SHORT_VECTOR$1 = 1 << 1;
        var Y_SHORT_VECTOR$1 = 1 << 2;
        var REPEAT$1 = 1 << 3;
        var SAME_X$1 = 1 << 4;
        var SAME_Y$1 = 1 << 5;

        var Point$1 = function () {
          function Point() {
            _classCallCheck(this, Point);
          }

          Point.size = function size(val) {
            return val >= 0 && val <= 255 ? 1 : 2;
          };

          Point.encode = function encode(stream, value) {
            if (value >= 0 && value <= 255) {
              stream.writeUInt8(value);
            } else {
              stream.writeInt16BE(value);
            }
          };

          return Point;
        }();

        var Glyf = new r.Struct({
          numberOfContours: r.int16,
          // if negative, this is a composite glyph
          xMin: r.int16,
          yMin: r.int16,
          xMax: r.int16,
          yMax: r.int16,
          endPtsOfContours: new r.Array(r.uint16, 'numberOfContours'),
          instructions: new r.Array(r.uint8, r.uint16),
          flags: new r.Array(r.uint8, 0),
          xPoints: new r.Array(Point$1, 0),
          yPoints: new r.Array(Point$1, 0)
        });
        /**
         * Encodes TrueType glyph outlines
         */

        var TTFGlyphEncoder = function () {
          function TTFGlyphEncoder() {
            _classCallCheck(this, TTFGlyphEncoder);
          }

          TTFGlyphEncoder.prototype.encodeSimple = function encodeSimple(path) {
            var instructions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
            var endPtsOfContours = [];
            var xPoints = [];
            var yPoints = [];
            var flags = [];
            var same = 0;
            var lastX = 0,
                lastY = 0,
                lastFlag = 0;
            var pointCount = 0;

            for (var i = 0; i < path.commands.length; i++) {
              var c = path.commands[i];

              for (var j = 0; j < c.args.length; j += 2) {
                var x = c.args[j];
                var y = c.args[j + 1];
                var flag = 0; // If the ending point of a quadratic curve is the midpoint
                // between the control point and the control point of the next
                // quadratic curve, we can omit the ending point.

                if (c.command === 'quadraticCurveTo' && j === 2) {
                  var next = path.commands[i + 1];

                  if (next && next.command === 'quadraticCurveTo') {
                    var midX = (lastX + next.args[0]) / 2;
                    var midY = (lastY + next.args[1]) / 2;

                    if (x === midX && y === midY) {
                      continue;
                    }
                  }
                } // All points except control points are on curve.


                if (!(c.command === 'quadraticCurveTo' && j === 0)) {
                  flag |= ON_CURVE$1;
                }

                flag = this._encodePoint(x, lastX, xPoints, flag, X_SHORT_VECTOR$1, SAME_X$1);
                flag = this._encodePoint(y, lastY, yPoints, flag, Y_SHORT_VECTOR$1, SAME_Y$1);

                if (flag === lastFlag && same < 255) {
                  flags[flags.length - 1] |= REPEAT$1;
                  same++;
                } else {
                  if (same > 0) {
                    flags.push(same);
                    same = 0;
                  }

                  flags.push(flag);
                  lastFlag = flag;
                }

                lastX = x;
                lastY = y;
                pointCount++;
              }

              if (c.command === 'closePath') {
                endPtsOfContours.push(pointCount - 1);
              }
            } // Close the path if the last command didn't already


            if (path.commands.length > 1 && path.commands[path.commands.length - 1].command !== 'closePath') {
              endPtsOfContours.push(pointCount - 1);
            }

            var bbox = path.bbox;
            var glyf = {
              numberOfContours: endPtsOfContours.length,
              xMin: bbox.minX,
              yMin: bbox.minY,
              xMax: bbox.maxX,
              yMax: bbox.maxY,
              endPtsOfContours: endPtsOfContours,
              instructions: instructions,
              flags: flags,
              xPoints: xPoints,
              yPoints: yPoints
            };
            var size = Glyf.size(glyf);
            var tail = 4 - size % 4;
            var stream = new r.EncodeStream(size + tail);
            Glyf.encode(stream, glyf); // Align to 4-byte length

            if (tail !== 0) {
              stream.fill(0, tail);
            }

            return stream.buffer;
          };

          TTFGlyphEncoder.prototype._encodePoint = function _encodePoint(value, last, points, flag, shortFlag, sameFlag) {
            var diff = value - last;

            if (value === last) {
              flag |= sameFlag;
            } else {
              if (-255 <= diff && diff <= 255) {
                flag |= shortFlag;

                if (diff < 0) {
                  diff = -diff;
                } else {
                  flag |= sameFlag;
                }
              }

              points.push(diff);
            }

            return flag;
          };

          return TTFGlyphEncoder;
        }();

        var TTFSubset = function (_Subset) {
          _inherits(TTFSubset, _Subset);

          function TTFSubset(font) {
            _classCallCheck(this, TTFSubset);

            var _this = _possibleConstructorReturn(this, _Subset.call(this, font));

            _this.glyphEncoder = new TTFGlyphEncoder();
            return _this;
          }

          TTFSubset.prototype._addGlyph = function _addGlyph(gid) {
            var glyph = this.font.getGlyph(gid);

            var glyf = glyph._decode(); // get the offset to the glyph from the loca table


            var curOffset = this.font.loca.offsets[gid];
            var nextOffset = this.font.loca.offsets[gid + 1];

            var stream = this.font._getTableStream('glyf');

            stream.pos += curOffset;
            var buffer = stream.readBuffer(nextOffset - curOffset); // if it is a compound glyph, include its components

            if (glyf && glyf.numberOfContours < 0) {
              buffer = new Buffer(buffer);

              for (var _iterator = glyf.components, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
                var _ref;

                if (_isArray) {
                  if (_i >= _iterator.length) break;
                  _ref = _iterator[_i++];
                } else {
                  _i = _iterator.next();
                  if (_i.done) break;
                  _ref = _i.value;
                }

                var component = _ref;
                gid = this.includeGlyph(component.glyphID);
                buffer.writeUInt16BE(gid, component.pos);
              }
            } else if (glyf && this.font._variationProcessor) {
              // If this is a TrueType variation glyph, re-encode the path
              buffer = this.glyphEncoder.encodeSimple(glyph.path, glyf.instructions);
            }

            this.glyf.push(buffer);
            this.loca.offsets.push(this.offset);
            this.hmtx.metrics.push({
              advance: glyph.advanceWidth,
              bearing: glyph._getMetrics().leftBearing
            });
            this.offset += buffer.length;
            return this.glyf.length - 1;
          };

          TTFSubset.prototype.encode = function encode(stream) {
            // tables required by PDF spec:
            //   head, hhea, loca, maxp, cvt , prep, glyf, hmtx, fpgm
            //
            // additional tables required for standalone fonts:
            //   name, cmap, OS/2, post
            this.glyf = [];
            this.offset = 0;
            this.loca = {
              offsets: [],
              version: this.font.loca.version
            };
            this.hmtx = {
              metrics: [],
              bearings: []
            }; // include all the glyphs
            // not using a for loop because we need to support adding more
            // glyphs to the array as we go, and CoffeeScript caches the length.

            var i = 0;

            while (i < this.glyphs.length) {
              this._addGlyph(this.glyphs[i++]);
            }

            var maxp = cloneDeep(this.font.maxp);
            maxp.numGlyphs = this.glyf.length;
            this.loca.offsets.push(this.offset);
            var head = cloneDeep(this.font.head);
            head.indexToLocFormat = this.loca.version;
            var hhea = cloneDeep(this.font.hhea);
            hhea.numberOfMetrics = this.hmtx.metrics.length; // map = []
            // for index in [0...256]
            //     if index < @numGlyphs
            //         map[index] = index
            //     else
            //         map[index] = 0
            //
            // cmapTable =
            //     version: 0
            //     length: 262
            //     language: 0
            //     codeMap: map
            //
            // cmap =
            //     version: 0
            //     numSubtables: 1
            //     tables: [
            //         platformID: 1
            //         encodingID: 0
            //         table: cmapTable
            //     ]
            // TODO: subset prep, cvt, fpgm?

            Directory.encode(stream, {
              tables: {
                head: head,
                hhea: hhea,
                loca: this.loca,
                maxp: maxp,
                'cvt ': this.font['cvt '],
                prep: this.font.prep,
                glyf: this.glyf,
                hmtx: this.hmtx,
                fpgm: this.font.fpgm // name: clone @font.name
                // 'OS/2': clone @font['OS/2']
                // post: clone @font.post
                // cmap: cmap

              }
            });
          };

          return TTFSubset;
        }(Subset);

        var CFFSubset = function (_Subset) {
          _inherits(CFFSubset, _Subset);

          function CFFSubset(font) {
            _classCallCheck(this, CFFSubset);

            var _this = _possibleConstructorReturn(this, _Subset.call(this, font));

            _this.cff = _this.font['CFF '];

            if (!_this.cff) {
              throw new Error('Not a CFF Font');
            }

            return _this;
          }

          CFFSubset.prototype.subsetCharstrings = function subsetCharstrings() {
            this.charstrings = [];
            var gsubrs = {};

            for (var _iterator = this.glyphs, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
              var _ref;

              if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref = _iterator[_i++];
              } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref = _i.value;
              }

              var gid = _ref;
              this.charstrings.push(this.cff.getCharString(gid));
              var glyph = this.font.getGlyph(gid);
              var path = glyph.path; // this causes the glyph to be parsed

              for (var subr in glyph._usedGsubrs) {
                gsubrs[subr] = true;
              }
            }

            this.gsubrs = this.subsetSubrs(this.cff.globalSubrIndex, gsubrs);
          };

          CFFSubset.prototype.subsetSubrs = function subsetSubrs(subrs, used) {
            var res = [];

            for (var i = 0; i < subrs.length; i++) {
              var subr = subrs[i];

              if (used[i]) {
                this.cff.stream.pos = subr.offset;
                res.push(this.cff.stream.readBuffer(subr.length));
              } else {
                res.push(new Buffer([11])); // return
              }
            }

            return res;
          };

          CFFSubset.prototype.subsetFontdict = function subsetFontdict(topDict) {
            topDict.FDArray = [];
            topDict.FDSelect = {
              version: 0,
              fds: []
            };
            var used_fds = {};
            var used_subrs = [];

            for (var _iterator2 = this.glyphs, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
              var _ref2;

              if (_isArray2) {
                if (_i2 >= _iterator2.length) break;
                _ref2 = _iterator2[_i2++];
              } else {
                _i2 = _iterator2.next();
                if (_i2.done) break;
                _ref2 = _i2.value;
              }

              var gid = _ref2;
              var fd = this.cff.fdForGlyph(gid);

              if (fd == null) {
                continue;
              }

              if (!used_fds[fd]) {
                topDict.FDArray.push(_Object$assign({}, this.cff.topDict.FDArray[fd]));
                used_subrs.push({});
              }

              used_fds[fd] = true;
              topDict.FDSelect.fds.push(topDict.FDArray.length - 1);
              var glyph = this.font.getGlyph(gid);
              var path = glyph.path; // this causes the glyph to be parsed

              for (var subr in glyph._usedSubrs) {
                used_subrs[used_subrs.length - 1][subr] = true;
              }
            }

            for (var i = 0; i < topDict.FDArray.length; i++) {
              var dict = topDict.FDArray[i];
              delete dict.FontName;

              if (dict.Private && dict.Private.Subrs) {
                dict.Private = _Object$assign({}, dict.Private);
                dict.Private.Subrs = this.subsetSubrs(dict.Private.Subrs, used_subrs[i]);
              }
            }

            return;
          };

          CFFSubset.prototype.createCIDFontdict = function createCIDFontdict(topDict) {
            var used_subrs = {};

            for (var _iterator3 = this.glyphs, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
              var _ref3;

              if (_isArray3) {
                if (_i3 >= _iterator3.length) break;
                _ref3 = _iterator3[_i3++];
              } else {
                _i3 = _iterator3.next();
                if (_i3.done) break;
                _ref3 = _i3.value;
              }

              var gid = _ref3;
              var glyph = this.font.getGlyph(gid);
              var path = glyph.path; // this causes the glyph to be parsed

              for (var subr in glyph._usedSubrs) {
                used_subrs[subr] = true;
              }
            }

            var privateDict = _Object$assign({}, this.cff.topDict.Private);

            if (this.cff.topDict.Private && this.cff.topDict.Private.Subrs) {
              privateDict.Subrs = this.subsetSubrs(this.cff.topDict.Private.Subrs, used_subrs);
            }

            topDict.FDArray = [{
              Private: privateDict
            }];
            return topDict.FDSelect = {
              version: 3,
              nRanges: 1,
              ranges: [{
                first: 0,
                fd: 0
              }],
              sentinel: this.charstrings.length
            };
          };

          CFFSubset.prototype.addString = function addString(string) {
            if (!string) {
              return null;
            }

            if (!this.strings) {
              this.strings = [];
            }

            this.strings.push(string);
            return standardStrings.length + this.strings.length - 1;
          };

          CFFSubset.prototype.encode = function encode(stream) {
            this.subsetCharstrings();
            var charset = {
              version: this.charstrings.length > 255 ? 2 : 1,
              ranges: [{
                first: 1,
                nLeft: this.charstrings.length - 2
              }]
            };

            var topDict = _Object$assign({}, this.cff.topDict);

            topDict.Private = null;
            topDict.charset = charset;
            topDict.Encoding = null;
            topDict.CharStrings = this.charstrings;
            var _arr = ['version', 'Notice', 'Copyright', 'FullName', 'FamilyName', 'Weight', 'PostScript', 'BaseFontName', 'FontName'];

            for (var _i4 = 0; _i4 < _arr.length; _i4++) {
              var key = _arr[_i4];
              topDict[key] = this.addString(this.cff.string(topDict[key]));
            }

            topDict.ROS = [this.addString('Adobe'), this.addString('Identity'), 0];
            topDict.CIDCount = this.charstrings.length;

            if (this.cff.isCIDFont) {
              this.subsetFontdict(topDict);
            } else {
              this.createCIDFontdict(topDict);
            }

            var top = {
              version: 1,
              hdrSize: this.cff.hdrSize,
              offSize: 4,
              header: this.cff.header,
              nameIndex: [this.cff.postscriptName],
              topDictIndex: [topDict],
              stringIndex: this.strings,
              globalSubrIndex: this.gsubrs
            };
            CFFTop.encode(stream, top);
          };

          return CFFSubset;
        }(Subset);

        var _class;

        function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
          var desc = {};
          Object['ke' + 'ys'](descriptor).forEach(function (key) {
            desc[key] = descriptor[key];
          });
          desc.enumerable = !!desc.enumerable;
          desc.configurable = !!desc.configurable;

          if ('value' in desc || desc.initializer) {
            desc.writable = true;
          }

          desc = decorators.slice().reverse().reduce(function (desc, decorator) {
            return decorator(target, property, desc) || desc;
          }, desc);

          if (context && desc.initializer !== void 0) {
            desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
            desc.initializer = undefined;
          }

          if (desc.initializer === void 0) {
            Object['define' + 'Property'](target, property, desc);
            desc = null;
          }

          return desc;
        }
        /**
         * This is the base class for all SFNT-based font formats in fontkit.
         * It supports TrueType, and PostScript glyphs, and several color glyph formats.
         */


        var TTFFont = (_class = function () {
          TTFFont.probe = function probe(buffer) {
            var format = buffer.toString('ascii', 0, 4);
            return format === 'true' || format === 'OTTO' || format === String.fromCharCode(0, 1, 0, 0);
          };

          function TTFFont(stream) {
            var variationCoords = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

            _classCallCheck(this, TTFFont);

            this.defaultLanguage = null;
            this.stream = stream;
            this.variationCoords = variationCoords;
            this._directoryPos = this.stream.pos;
            this._tables = {};
            this._glyphs = {};

            this._decodeDirectory(); // define properties for each table to lazily parse


            for (var tag in this.directory.tables) {
              var table = this.directory.tables[tag];

              if (tables[tag] && table.length > 0) {
                _Object$defineProperty(this, tag, {
                  get: this._getTable.bind(this, table)
                });
              }
            }
          }

          TTFFont.prototype.setDefaultLanguage = function setDefaultLanguage() {
            var lang = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
            this.defaultLanguage = lang;
          };

          TTFFont.prototype._getTable = function _getTable(table) {
            if (!(table.tag in this._tables)) {
              try {
                this._tables[table.tag] = this._decodeTable(table);
              } catch (e) {
                if (fontkit.logErrors) {
                  console.error('Error decoding table ' + table.tag);
                  console.error(e.stack);
                }
              }
            }

            return this._tables[table.tag];
          };

          TTFFont.prototype._getTableStream = function _getTableStream(tag) {
            var table = this.directory.tables[tag];

            if (table) {
              this.stream.pos = table.offset;
              return this.stream;
            }

            return null;
          };

          TTFFont.prototype._decodeDirectory = function _decodeDirectory() {
            return this.directory = Directory.decode(this.stream, {
              _startOffset: 0
            });
          };

          TTFFont.prototype._decodeTable = function _decodeTable(table) {
            var pos = this.stream.pos;

            var stream = this._getTableStream(table.tag);

            var result = tables[table.tag].decode(stream, this, table.length);
            this.stream.pos = pos;
            return result;
          };
          /**
           * Gets a string from the font's `name` table
           * `lang` is a BCP-47 language code.
           * @return {string}
           */


          TTFFont.prototype.getName = function getName(key) {
            var lang = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.defaultLanguage || fontkit.defaultLanguage;
            var record = this.name && this.name.records[key];

            if (record) {
              // Attempt to retrieve the entry, depending on which translation is available:
              return record[lang] || record[this.defaultLanguage] || record[fontkit.defaultLanguage] || record['en'] || record[_Object$keys(record)[0]] // Seriously, ANY language would be fine
              || null;
            }

            return null;
          };
          /**
           * The unique PostScript name for this font, e.g. "Helvetica-Bold"
           * @type {string}
           */

          /**
           * Returns whether there is glyph in the font for the given unicode code point.
           *
           * @param {number} codePoint
           * @return {boolean}
           */


          TTFFont.prototype.hasGlyphForCodePoint = function hasGlyphForCodePoint(codePoint) {
            return !!this._cmapProcessor.lookup(codePoint);
          };
          /**
           * Maps a single unicode code point to a Glyph object.
           * Does not perform any advanced substitutions (there is no context to do so).
           *
           * @param {number} codePoint
           * @return {Glyph}
           */


          TTFFont.prototype.glyphForCodePoint = function glyphForCodePoint(codePoint) {
            return this.getGlyph(this._cmapProcessor.lookup(codePoint), [codePoint]);
          };
          /**
           * Returns an array of Glyph objects for the given string.
           * This is only a one-to-one mapping from characters to glyphs.
           * For most uses, you should use font.layout (described below), which
           * provides a much more advanced mapping supporting AAT and OpenType shaping.
           *
           * @param {string} string
           * @return {Glyph[]}
           */


          TTFFont.prototype.glyphsForString = function glyphsForString(string) {
            var glyphs = [];
            var len = string.length;
            var idx = 0;
            var last = -1;
            var state = -1;

            while (idx <= len) {
              var code = 0;
              var nextState = 0;

              if (idx < len) {
                // Decode the next codepoint from UTF 16
                code = string.charCodeAt(idx++);

                if (0xd800 <= code && code <= 0xdbff && idx < len) {
                  var next = string.charCodeAt(idx);

                  if (0xdc00 <= next && next <= 0xdfff) {
                    idx++;
                    code = ((code & 0x3ff) << 10) + (next & 0x3ff) + 0x10000;
                  }
                } // Compute the next state: 1 if the next codepoint is a variation selector, 0 otherwise.


                nextState = 0xfe00 <= code && code <= 0xfe0f || 0xe0100 <= code && code <= 0xe01ef ? 1 : 0;
              } else {
                idx++;
              }

              if (state === 0 && nextState === 1) {
                // Variation selector following normal codepoint.
                glyphs.push(this.getGlyph(this._cmapProcessor.lookup(last, code), [last, code]));
              } else if (state === 0 && nextState === 0) {
                // Normal codepoint following normal codepoint.
                glyphs.push(this.glyphForCodePoint(last));
              }

              last = code;
              state = nextState;
            }

            return glyphs;
          };
          /**
           * Returns a GlyphRun object, which includes an array of Glyphs and GlyphPositions for the given string.
           *
           * @param {string} string
           * @param {string[]} [userFeatures]
           * @param {string} [script]
           * @param {string} [language]
           * @param {string} [direction]
           * @return {GlyphRun}
           */


          TTFFont.prototype.layout = function layout(string, userFeatures, script, language, direction) {
            return this._layoutEngine.layout(string, userFeatures, script, language, direction);
          };
          /**
           * Returns an array of strings that map to the given glyph id.
           * @param {number} gid - glyph id
           */


          TTFFont.prototype.stringsForGlyph = function stringsForGlyph(gid) {
            return this._layoutEngine.stringsForGlyph(gid);
          };
          /**
           * An array of all [OpenType feature tags](https://www.microsoft.com/typography/otspec/featuretags.htm)
           * (or mapped AAT tags) supported by the font.
           * The features parameter is an array of OpenType feature tags to be applied in addition to the default set.
           * If this is an AAT font, the OpenType feature tags are mapped to AAT features.
           *
           * @type {string[]}
           */


          TTFFont.prototype.getAvailableFeatures = function getAvailableFeatures(script, language) {
            return this._layoutEngine.getAvailableFeatures(script, language);
          };

          TTFFont.prototype._getBaseGlyph = function _getBaseGlyph(glyph) {
            var characters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

            if (!this._glyphs[glyph]) {
              if (this.directory.tables.glyf) {
                this._glyphs[glyph] = new TTFGlyph(glyph, characters, this);
              } else if (this.directory.tables['CFF '] || this.directory.tables.CFF2) {
                this._glyphs[glyph] = new CFFGlyph(glyph, characters, this);
              }
            }

            return this._glyphs[glyph] || null;
          };
          /**
           * Returns a glyph object for the given glyph id.
           * You can pass the array of code points this glyph represents for
           * your use later, and it will be stored in the glyph object.
           *
           * @param {number} glyph
           * @param {number[]} characters
           * @return {Glyph}
           */


          TTFFont.prototype.getGlyph = function getGlyph(glyph) {
            var characters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

            if (!this._glyphs[glyph]) {
              if (this.directory.tables.sbix) {
                this._glyphs[glyph] = new SBIXGlyph(glyph, characters, this);
              } else if (this.directory.tables.COLR && this.directory.tables.CPAL) {
                this._glyphs[glyph] = new COLRGlyph(glyph, characters, this);
              } else {
                this._getBaseGlyph(glyph, characters);
              }
            }

            return this._glyphs[glyph] || null;
          };
          /**
           * Returns a Subset for this font.
           * @return {Subset}
           */


          TTFFont.prototype.createSubset = function createSubset() {
            if (this.directory.tables['CFF ']) {
              return new CFFSubset(this);
            }

            return new TTFSubset(this);
          };
          /**
           * Returns an object describing the available variation axes
           * that this font supports. Keys are setting tags, and values
           * contain the axis name, range, and default value.
           *
           * @type {object}
           */

          /**
           * Returns a new font with the given variation settings applied.
           * Settings can either be an instance name, or an object containing
           * variation tags as specified by the `variationAxes` property.
           *
           * @param {object} settings
           * @return {TTFFont}
           */


          TTFFont.prototype.getVariation = function getVariation(settings) {
            if (!(this.directory.tables.fvar && (this.directory.tables.gvar && this.directory.tables.glyf || this.directory.tables.CFF2))) {
              throw new Error('Variations require a font with the fvar, gvar and glyf, or CFF2 tables.');
            }

            if (typeof settings === 'string') {
              settings = this.namedVariations[settings];
            }

            if ((typeof settings === 'undefined' ? 'undefined' : _typeof(settings)) !== 'object') {
              throw new Error('Variation settings must be either a variation name or settings object.');
            } // normalize the coordinates


            var coords = this.fvar.axis.map(function (axis, i) {
              var axisTag = axis.axisTag.trim();

              if (axisTag in settings) {
                return Math.max(axis.minValue, Math.min(axis.maxValue, settings[axisTag]));
              } else {
                return axis.defaultValue;
              }
            });
            var stream = new r.DecodeStream(this.stream.buffer);
            stream.pos = this._directoryPos;
            var font = new TTFFont(stream, coords);
            font._tables = this._tables;
            return font;
          }; // Standardized format plugin API


          TTFFont.prototype.getFont = function getFont(name) {
            return this.getVariation(name);
          };

          _createClass(TTFFont, [{
            key: 'postscriptName',
            get: function get() {
              return this.getName('postscriptName');
            }
            /**
             * The font's full name, e.g. "Helvetica Bold"
             * @type {string}
             */

          }, {
            key: 'fullName',
            get: function get() {
              return this.getName('fullName');
            }
            /**
             * The font's family name, e.g. "Helvetica"
             * @type {string}
             */

          }, {
            key: 'familyName',
            get: function get() {
              return this.getName('fontFamily');
            }
            /**
             * The font's sub-family, e.g. "Bold".
             * @type {string}
             */

          }, {
            key: 'subfamilyName',
            get: function get() {
              return this.getName('fontSubfamily');
            }
            /**
             * The font's copyright information
             * @type {string}
             */

          }, {
            key: 'copyright',
            get: function get() {
              return this.getName('copyright');
            }
            /**
             * The font's version number
             * @type {string}
             */

          }, {
            key: 'version',
            get: function get() {
              return this.getName('version');
            }
            /**
             * The font’s [ascender](https://en.wikipedia.org/wiki/Ascender_(typography))
             * @type {number}
             */

          }, {
            key: 'ascent',
            get: function get() {
              return this.hhea.ascent;
            }
            /**
             * The font’s [descender](https://en.wikipedia.org/wiki/Descender)
             * @type {number}
             */

          }, {
            key: 'descent',
            get: function get() {
              return this.hhea.descent;
            }
            /**
             * The amount of space that should be included between lines
             * @type {number}
             */

          }, {
            key: 'lineGap',
            get: function get() {
              return this.hhea.lineGap;
            }
            /**
             * The offset from the normal underline position that should be used
             * @type {number}
             */

          }, {
            key: 'underlinePosition',
            get: function get() {
              return this.post.underlinePosition;
            }
            /**
             * The weight of the underline that should be used
             * @type {number}
             */

          }, {
            key: 'underlineThickness',
            get: function get() {
              return this.post.underlineThickness;
            }
            /**
             * If this is an italic font, the angle the cursor should be drawn at to match the font design
             * @type {number}
             */

          }, {
            key: 'italicAngle',
            get: function get() {
              return this.post.italicAngle;
            }
            /**
             * The height of capital letters above the baseline.
             * See [here](https://en.wikipedia.org/wiki/Cap_height) for more details.
             * @type {number}
             */

          }, {
            key: 'capHeight',
            get: function get() {
              var os2 = this['OS/2'];
              return os2 ? os2.capHeight : this.ascent;
            }
            /**
             * The height of lower case letters in the font.
             * See [here](https://en.wikipedia.org/wiki/X-height) for more details.
             * @type {number}
             */

          }, {
            key: 'xHeight',
            get: function get() {
              var os2 = this['OS/2'];
              return os2 ? os2.xHeight : 0;
            }
            /**
             * The number of glyphs in the font.
             * @type {number}
             */

          }, {
            key: 'numGlyphs',
            get: function get() {
              return this.maxp.numGlyphs;
            }
            /**
             * The size of the font’s internal coordinate grid
             * @type {number}
             */

          }, {
            key: 'unitsPerEm',
            get: function get() {
              return this.head.unitsPerEm;
            }
            /**
             * The font’s bounding box, i.e. the box that encloses all glyphs in the font.
             * @type {BBox}
             */

          }, {
            key: 'bbox',
            get: function get() {
              return _Object$freeze(new BBox(this.head.xMin, this.head.yMin, this.head.xMax, this.head.yMax));
            }
          }, {
            key: '_cmapProcessor',
            get: function get() {
              return new CmapProcessor(this.cmap);
            }
            /**
             * An array of all of the unicode code points supported by the font.
             * @type {number[]}
             */

          }, {
            key: 'characterSet',
            get: function get() {
              return this._cmapProcessor.getCharacterSet();
            }
          }, {
            key: '_layoutEngine',
            get: function get() {
              return new LayoutEngine(this);
            }
          }, {
            key: 'availableFeatures',
            get: function get() {
              return this._layoutEngine.getAvailableFeatures();
            }
          }, {
            key: 'variationAxes',
            get: function get() {
              var res = {};

              if (!this.fvar) {
                return res;
              }

              for (var _iterator = this.fvar.axis, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
                var _ref;

                if (_isArray) {
                  if (_i >= _iterator.length) break;
                  _ref = _iterator[_i++];
                } else {
                  _i = _iterator.next();
                  if (_i.done) break;
                  _ref = _i.value;
                }

                var axis = _ref;
                res[axis.axisTag.trim()] = {
                  name: axis.name.en,
                  min: axis.minValue,
                  default: axis.defaultValue,
                  max: axis.maxValue
                };
              }

              return res;
            }
            /**
             * Returns an object describing the named variation instances
             * that the font designer has specified. Keys are variation names
             * and values are the variation settings for this instance.
             *
             * @type {object}
             */

          }, {
            key: 'namedVariations',
            get: function get() {
              var res = {};

              if (!this.fvar) {
                return res;
              }

              for (var _iterator2 = this.fvar.instance, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
                var _ref2;

                if (_isArray2) {
                  if (_i2 >= _iterator2.length) break;
                  _ref2 = _iterator2[_i2++];
                } else {
                  _i2 = _iterator2.next();
                  if (_i2.done) break;
                  _ref2 = _i2.value;
                }

                var instance = _ref2;
                var settings = {};

                for (var i = 0; i < this.fvar.axis.length; i++) {
                  var axis = this.fvar.axis[i];
                  settings[axis.axisTag.trim()] = instance.coord[i];
                }

                res[instance.name.en] = settings;
              }

              return res;
            }
          }, {
            key: '_variationProcessor',
            get: function get() {
              if (!this.fvar) {
                return null;
              }

              var variationCoords = this.variationCoords; // Ignore if no variation coords and not CFF2

              if (!variationCoords && !this.CFF2) {
                return null;
              }

              if (!variationCoords) {
                variationCoords = this.fvar.axis.map(function (axis) {
                  return axis.defaultValue;
                });
              }

              return new GlyphVariationProcessor(this, variationCoords);
            }
          }]);

          return TTFFont;
        }(), (_applyDecoratedDescriptor(_class.prototype, 'bbox', [cache], _Object$getOwnPropertyDescriptor(_class.prototype, 'bbox'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, '_cmapProcessor', [cache], _Object$getOwnPropertyDescriptor(_class.prototype, '_cmapProcessor'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'characterSet', [cache], _Object$getOwnPropertyDescriptor(_class.prototype, 'characterSet'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, '_layoutEngine', [cache], _Object$getOwnPropertyDescriptor(_class.prototype, '_layoutEngine'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'variationAxes', [cache], _Object$getOwnPropertyDescriptor(_class.prototype, 'variationAxes'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'namedVariations', [cache], _Object$getOwnPropertyDescriptor(_class.prototype, 'namedVariations'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, '_variationProcessor', [cache], _Object$getOwnPropertyDescriptor(_class.prototype, '_variationProcessor'), _class.prototype)), _class);
        var WOFFDirectoryEntry = new r.Struct({
          tag: new r.String(4),
          offset: new r.Pointer(r.uint32, 'void', {
            type: 'global'
          }),
          compLength: r.uint32,
          length: r.uint32,
          origChecksum: r.uint32
        });
        var WOFFDirectory = new r.Struct({
          tag: new r.String(4),
          // should be 'wOFF'
          flavor: r.uint32,
          length: r.uint32,
          numTables: r.uint16,
          reserved: new r.Reserved(r.uint16),
          totalSfntSize: r.uint32,
          majorVersion: r.uint16,
          minorVersion: r.uint16,
          metaOffset: r.uint32,
          metaLength: r.uint32,
          metaOrigLength: r.uint32,
          privOffset: r.uint32,
          privLength: r.uint32,
          tables: new r.Array(WOFFDirectoryEntry, 'numTables')
        });

        WOFFDirectory.process = function () {
          var tables = {};

          for (var _iterator = this.tables, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
            var _ref;

            if (_isArray) {
              if (_i >= _iterator.length) break;
              _ref = _iterator[_i++];
            } else {
              _i = _iterator.next();
              if (_i.done) break;
              _ref = _i.value;
            }

            var table = _ref;
            tables[table.tag] = table;
          }

          this.tables = tables;
        };

        var WOFFFont = function (_TTFFont) {
          _inherits(WOFFFont, _TTFFont);

          function WOFFFont() {
            _classCallCheck(this, WOFFFont);

            return _possibleConstructorReturn(this, _TTFFont.apply(this, arguments));
          }

          WOFFFont.probe = function probe(buffer) {
            return buffer.toString('ascii', 0, 4) === 'wOFF';
          };

          WOFFFont.prototype._decodeDirectory = function _decodeDirectory() {
            this.directory = WOFFDirectory.decode(this.stream, {
              _startOffset: 0
            });
          };

          WOFFFont.prototype._getTableStream = function _getTableStream(tag) {
            var table = this.directory.tables[tag];

            if (table) {
              this.stream.pos = table.offset;

              if (table.compLength < table.length) {
                this.stream.pos += 2; // skip deflate header

                var outBuffer = new Buffer(table.length);
                var buf = inflate(this.stream.readBuffer(table.compLength - 2), outBuffer);
                return new r.DecodeStream(buf);
              } else {
                return this.stream;
              }
            }

            return null;
          };

          return WOFFFont;
        }(TTFFont);
        /**
         * Represents a TrueType glyph in the WOFF2 format, which compresses glyphs differently.
         */


        var WOFF2Glyph = function (_TTFGlyph) {
          _inherits(WOFF2Glyph, _TTFGlyph);

          function WOFF2Glyph() {
            _classCallCheck(this, WOFF2Glyph);

            return _possibleConstructorReturn(this, _TTFGlyph.apply(this, arguments));
          }

          WOFF2Glyph.prototype._decode = function _decode() {
            // We have to decode in advance (in WOFF2Font), so just return the pre-decoded data.
            return this._font._transformedGlyphs[this.id];
          };

          WOFF2Glyph.prototype._getCBox = function _getCBox() {
            return this.path.bbox;
          };

          return WOFF2Glyph;
        }(TTFGlyph);

        var Base128 = {
          decode: function decode(stream) {
            var result = 0;
            var iterable = [0, 1, 2, 3, 4];

            for (var j = 0; j < iterable.length; j++) {
              var i = iterable[j];
              var code = stream.readUInt8(); // If any of the top seven bits are set then we're about to overflow.

              if (result & 0xe0000000) {
                throw new Error('Overflow');
              }

              result = result << 7 | code & 0x7f;

              if ((code & 0x80) === 0) {
                return result;
              }
            }

            throw new Error('Bad base 128 number');
          }
        };
        var knownTags = ['cmap', 'head', 'hhea', 'hmtx', 'maxp', 'name', 'OS/2', 'post', 'cvt ', 'fpgm', 'glyf', 'loca', 'prep', 'CFF ', 'VORG', 'EBDT', 'EBLC', 'gasp', 'hdmx', 'kern', 'LTSH', 'PCLT', 'VDMX', 'vhea', 'vmtx', 'BASE', 'GDEF', 'GPOS', 'GSUB', 'EBSC', 'JSTF', 'MATH', 'CBDT', 'CBLC', 'COLR', 'CPAL', 'SVG ', 'sbix', 'acnt', 'avar', 'bdat', 'bloc', 'bsln', 'cvar', 'fdsc', 'feat', 'fmtx', 'fvar', 'gvar', 'hsty', 'just', 'lcar', 'mort', 'morx', 'opbd', 'prop', 'trak', 'Zapf', 'Silf', 'Glat', 'Gloc', 'Feat', 'Sill'];
        var WOFF2DirectoryEntry = new r.Struct({
          flags: r.uint8,
          customTag: new r.Optional(new r.String(4), function (t) {
            return (t.flags & 0x3f) === 0x3f;
          }),
          tag: function tag(t) {
            return t.customTag || knownTags[t.flags & 0x3f];
          },
          // || (() => { throw new Error(`Bad tag: ${flags & 0x3f}`); })(); },
          length: Base128,
          transformVersion: function transformVersion(t) {
            return t.flags >>> 6 & 0x03;
          },
          transformed: function transformed(t) {
            return t.tag === 'glyf' || t.tag === 'loca' ? t.transformVersion === 0 : t.transformVersion !== 0;
          },
          transformLength: new r.Optional(Base128, function (t) {
            return t.transformed;
          })
        });
        var WOFF2Directory = new r.Struct({
          tag: new r.String(4),
          // should be 'wOF2'
          flavor: r.uint32,
          length: r.uint32,
          numTables: r.uint16,
          reserved: new r.Reserved(r.uint16),
          totalSfntSize: r.uint32,
          totalCompressedSize: r.uint32,
          majorVersion: r.uint16,
          minorVersion: r.uint16,
          metaOffset: r.uint32,
          metaLength: r.uint32,
          metaOrigLength: r.uint32,
          privOffset: r.uint32,
          privLength: r.uint32,
          tables: new r.Array(WOFF2DirectoryEntry, 'numTables')
        });

        WOFF2Directory.process = function () {
          var tables = {};

          for (var i = 0; i < this.tables.length; i++) {
            var table = this.tables[i];
            tables[table.tag] = table;
          }

          return this.tables = tables;
        };
        /**
         * Subclass of TTFFont that represents a TTF/OTF font compressed by WOFF2
         * See spec here: http://www.w3.org/TR/WOFF2/
         */


        var WOFF2Font = function (_TTFFont) {
          _inherits(WOFF2Font, _TTFFont);

          function WOFF2Font() {
            _classCallCheck(this, WOFF2Font);

            return _possibleConstructorReturn(this, _TTFFont.apply(this, arguments));
          }

          WOFF2Font.probe = function probe(buffer) {
            return buffer.toString('ascii', 0, 4) === 'wOF2';
          };

          WOFF2Font.prototype._decodeDirectory = function _decodeDirectory() {
            this.directory = WOFF2Directory.decode(this.stream);
            this._dataPos = this.stream.pos;
          };

          WOFF2Font.prototype._decompress = function _decompress() {
            // decompress data and setup table offsets if we haven't already
            if (!this._decompressed) {
              this.stream.pos = this._dataPos;
              var buffer = this.stream.readBuffer(this.directory.totalCompressedSize);
              var decompressedSize = 0;

              for (var tag in this.directory.tables) {
                var entry = this.directory.tables[tag];
                entry.offset = decompressedSize;
                decompressedSize += entry.transformLength != null ? entry.transformLength : entry.length;
              }

              var decompressed = brotli(buffer, decompressedSize);

              if (!decompressed) {
                throw new Error('Error decoding compressed data in WOFF2');
              }

              this.stream = new r.DecodeStream(new Buffer(decompressed));
              this._decompressed = true;
            }
          };

          WOFF2Font.prototype._decodeTable = function _decodeTable(table) {
            this._decompress();

            return _TTFFont.prototype._decodeTable.call(this, table);
          }; // Override this method to get a glyph and return our
          // custom subclass if there is a glyf table.


          WOFF2Font.prototype._getBaseGlyph = function _getBaseGlyph(glyph) {
            var characters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

            if (!this._glyphs[glyph]) {
              if (this.directory.tables.glyf && this.directory.tables.glyf.transformed) {
                if (!this._transformedGlyphs) {
                  this._transformGlyfTable();
                }

                return this._glyphs[glyph] = new WOFF2Glyph(glyph, characters, this);
              } else {
                return _TTFFont.prototype._getBaseGlyph.call(this, glyph, characters);
              }
            }
          };

          WOFF2Font.prototype._transformGlyfTable = function _transformGlyfTable() {
            this._decompress();

            this.stream.pos = this.directory.tables.glyf.offset;
            var table = GlyfTable.decode(this.stream);
            var glyphs = [];

            for (var index = 0; index < table.numGlyphs; index++) {
              var glyph = {};
              var nContours = table.nContours.readInt16BE();
              glyph.numberOfContours = nContours;

              if (nContours > 0) {
                // simple glyph
                var nPoints = [];
                var totalPoints = 0;

                for (var i = 0; i < nContours; i++) {
                  var _r = read255UInt16(table.nPoints);

                  totalPoints += _r;
                  nPoints.push(totalPoints);
                }

                glyph.points = decodeTriplet(table.flags, table.glyphs, totalPoints);

                for (var _i = 0; _i < nContours; _i++) {
                  glyph.points[nPoints[_i] - 1].endContour = true;
                }

                var instructionSize = read255UInt16(table.glyphs);
              } else if (nContours < 0) {
                // composite glyph
                var haveInstructions = TTFGlyph.prototype._decodeComposite.call({
                  _font: this
                }, glyph, table.composites);

                if (haveInstructions) {
                  var instructionSize = read255UInt16(table.glyphs);
                }
              }

              glyphs.push(glyph);
            }

            this._transformedGlyphs = glyphs;
          };

          return WOFF2Font;
        }(TTFFont);

        var Substream = function () {
          function Substream(length) {
            _classCallCheck(this, Substream);

            this.length = length;
            this._buf = new r.Buffer(length);
          }

          Substream.prototype.decode = function decode(stream, parent) {
            return new r.DecodeStream(this._buf.decode(stream, parent));
          };

          return Substream;
        }(); // This struct represents the entire glyf table


        var GlyfTable = new r.Struct({
          version: r.uint32,
          numGlyphs: r.uint16,
          indexFormat: r.uint16,
          nContourStreamSize: r.uint32,
          nPointsStreamSize: r.uint32,
          flagStreamSize: r.uint32,
          glyphStreamSize: r.uint32,
          compositeStreamSize: r.uint32,
          bboxStreamSize: r.uint32,
          instructionStreamSize: r.uint32,
          nContours: new Substream('nContourStreamSize'),
          nPoints: new Substream('nPointsStreamSize'),
          flags: new Substream('flagStreamSize'),
          glyphs: new Substream('glyphStreamSize'),
          composites: new Substream('compositeStreamSize'),
          bboxes: new Substream('bboxStreamSize'),
          instructions: new Substream('instructionStreamSize')
        });
        var WORD_CODE = 253;
        var ONE_MORE_BYTE_CODE2 = 254;
        var ONE_MORE_BYTE_CODE1 = 255;
        var LOWEST_U_CODE = 253;

        function read255UInt16(stream) {
          var code = stream.readUInt8();

          if (code === WORD_CODE) {
            return stream.readUInt16BE();
          }

          if (code === ONE_MORE_BYTE_CODE1) {
            return stream.readUInt8() + LOWEST_U_CODE;
          }

          if (code === ONE_MORE_BYTE_CODE2) {
            return stream.readUInt8() + LOWEST_U_CODE * 2;
          }

          return code;
        }

        function withSign(flag, baseval) {
          return flag & 1 ? baseval : -baseval;
        }

        function decodeTriplet(flags, glyphs, nPoints) {
          var y = void 0;
          var x = y = 0;
          var res = [];

          for (var i = 0; i < nPoints; i++) {
            var dx = 0,
                dy = 0;
            var flag = flags.readUInt8();
            var onCurve = !(flag >> 7);
            flag &= 0x7f;

            if (flag < 10) {
              dx = 0;
              dy = withSign(flag, ((flag & 14) << 7) + glyphs.readUInt8());
            } else if (flag < 20) {
              dx = withSign(flag, ((flag - 10 & 14) << 7) + glyphs.readUInt8());
              dy = 0;
            } else if (flag < 84) {
              var b0 = flag - 20;
              var b1 = glyphs.readUInt8();
              dx = withSign(flag, 1 + (b0 & 0x30) + (b1 >> 4));
              dy = withSign(flag >> 1, 1 + ((b0 & 0x0c) << 2) + (b1 & 0x0f));
            } else if (flag < 120) {
              var b0 = flag - 84;
              dx = withSign(flag, 1 + (b0 / 12 << 8) + glyphs.readUInt8());
              dy = withSign(flag >> 1, 1 + (b0 % 12 >> 2 << 8) + glyphs.readUInt8());
            } else if (flag < 124) {
              var b1 = glyphs.readUInt8();
              var b2 = glyphs.readUInt8();
              dx = withSign(flag, (b1 << 4) + (b2 >> 4));
              dy = withSign(flag >> 1, ((b2 & 0x0f) << 8) + glyphs.readUInt8());
            } else {
              dx = withSign(flag, glyphs.readUInt16BE());
              dy = withSign(flag >> 1, glyphs.readUInt16BE());
            }

            x += dx;
            y += dy;
            res.push(new Point(onCurve, false, x, y));
          }

          return res;
        }

        var TTCHeader = new r.VersionedStruct(r.uint32, {
          0x00010000: {
            numFonts: r.uint32,
            offsets: new r.Array(r.uint32, 'numFonts')
          },
          0x00020000: {
            numFonts: r.uint32,
            offsets: new r.Array(r.uint32, 'numFonts'),
            dsigTag: r.uint32,
            dsigLength: r.uint32,
            dsigOffset: r.uint32
          }
        });

        var TrueTypeCollection = function () {
          TrueTypeCollection.probe = function probe(buffer) {
            return buffer.toString('ascii', 0, 4) === 'ttcf';
          };

          function TrueTypeCollection(stream) {
            _classCallCheck(this, TrueTypeCollection);

            this.stream = stream;

            if (stream.readString(4) !== 'ttcf') {
              throw new Error('Not a TrueType collection');
            }

            this.header = TTCHeader.decode(stream);
          }

          TrueTypeCollection.prototype.getFont = function getFont(name) {
            for (var _iterator = this.header.offsets, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
              var _ref;

              if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref = _iterator[_i++];
              } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref = _i.value;
              }

              var offset = _ref;
              var stream = new r.DecodeStream(this.stream.buffer);
              stream.pos = offset;
              var font = new TTFFont(stream);

              if (font.postscriptName === name) {
                return font;
              }
            }

            return null;
          };

          _createClass(TrueTypeCollection, [{
            key: 'fonts',
            get: function get() {
              var fonts = [];

              for (var _iterator2 = this.header.offsets, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
                var _ref2;

                if (_isArray2) {
                  if (_i2 >= _iterator2.length) break;
                  _ref2 = _iterator2[_i2++];
                } else {
                  _i2 = _iterator2.next();
                  if (_i2.done) break;
                  _ref2 = _i2.value;
                }

                var offset = _ref2;
                var stream = new r.DecodeStream(this.stream.buffer);
                stream.pos = offset;
                fonts.push(new TTFFont(stream));
              }

              return fonts;
            }
          }]);

          return TrueTypeCollection;
        }();

        var DFontName = new r.String(r.uint8);
        var DFontData = new r.Struct({
          len: r.uint32,
          buf: new r.Buffer('len')
        });
        var Ref = new r.Struct({
          id: r.uint16,
          nameOffset: r.int16,
          attr: r.uint8,
          dataOffset: r.uint24,
          handle: r.uint32
        });
        var Type = new r.Struct({
          name: new r.String(4),
          maxTypeIndex: r.uint16,
          refList: new r.Pointer(r.uint16, new r.Array(Ref, function (t) {
            return t.maxTypeIndex + 1;
          }), {
            type: 'parent'
          })
        });
        var TypeList = new r.Struct({
          length: r.uint16,
          types: new r.Array(Type, function (t) {
            return t.length + 1;
          })
        });
        var DFontMap = new r.Struct({
          reserved: new r.Reserved(r.uint8, 24),
          typeList: new r.Pointer(r.uint16, TypeList),
          nameListOffset: new r.Pointer(r.uint16, 'void')
        });
        var DFontHeader = new r.Struct({
          dataOffset: r.uint32,
          map: new r.Pointer(r.uint32, DFontMap),
          dataLength: r.uint32,
          mapLength: r.uint32
        });

        var DFont = function () {
          DFont.probe = function probe(buffer) {
            var stream = new r.DecodeStream(buffer);

            try {
              var header = DFontHeader.decode(stream);
            } catch (e) {
              return false;
            }

            for (var _iterator = header.map.typeList.types, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
              var _ref;

              if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref = _iterator[_i++];
              } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref = _i.value;
              }

              var type = _ref;

              if (type.name === 'sfnt') {
                return true;
              }
            }

            return false;
          };

          function DFont(stream) {
            _classCallCheck(this, DFont);

            this.stream = stream;
            this.header = DFontHeader.decode(this.stream);

            for (var _iterator2 = this.header.map.typeList.types, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
              var _ref2;

              if (_isArray2) {
                if (_i2 >= _iterator2.length) break;
                _ref2 = _iterator2[_i2++];
              } else {
                _i2 = _iterator2.next();
                if (_i2.done) break;
                _ref2 = _i2.value;
              }

              var type = _ref2;

              for (var _iterator3 = type.refList, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
                var _ref3;

                if (_isArray3) {
                  if (_i3 >= _iterator3.length) break;
                  _ref3 = _iterator3[_i3++];
                } else {
                  _i3 = _iterator3.next();
                  if (_i3.done) break;
                  _ref3 = _i3.value;
                }

                var ref = _ref3;

                if (ref.nameOffset >= 0) {
                  this.stream.pos = ref.nameOffset + this.header.map.nameListOffset;
                  ref.name = DFontName.decode(this.stream);
                } else {
                  ref.name = null;
                }
              }

              if (type.name === 'sfnt') {
                this.sfnt = type;
              }
            }
          }

          DFont.prototype.getFont = function getFont(name) {
            if (!this.sfnt) {
              return null;
            }

            for (var _iterator4 = this.sfnt.refList, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _getIterator(_iterator4);;) {
              var _ref4;

              if (_isArray4) {
                if (_i4 >= _iterator4.length) break;
                _ref4 = _iterator4[_i4++];
              } else {
                _i4 = _iterator4.next();
                if (_i4.done) break;
                _ref4 = _i4.value;
              }

              var ref = _ref4;
              var pos = this.header.dataOffset + ref.dataOffset + 4;
              var stream = new r.DecodeStream(this.stream.buffer.slice(pos));
              var font = new TTFFont(stream);

              if (font.postscriptName === name) {
                return font;
              }
            }

            return null;
          };

          _createClass(DFont, [{
            key: 'fonts',
            get: function get() {
              var fonts = [];

              for (var _iterator5 = this.sfnt.refList, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _getIterator(_iterator5);;) {
                var _ref5;

                if (_isArray5) {
                  if (_i5 >= _iterator5.length) break;
                  _ref5 = _iterator5[_i5++];
                } else {
                  _i5 = _iterator5.next();
                  if (_i5.done) break;
                  _ref5 = _i5.value;
                }

                var ref = _ref5;
                var pos = this.header.dataOffset + ref.dataOffset + 4;
                var stream = new r.DecodeStream(this.stream.buffer.slice(pos));
                fonts.push(new TTFFont(stream));
              }

              return fonts;
            }
          }]);

          return DFont;
        }(); // Register font formats


        fontkit.registerFormat(TTFFont);
        fontkit.registerFormat(WOFFFont);
        fontkit.registerFormat(WOFF2Font);
        fontkit.registerFormat(TrueTypeCollection);
        fontkit.registerFormat(DFont);
        module.exports = fontkit;
        /* WEBPACK VAR INJECTION */
      }).call(this, __webpack_require__(10).Buffer);
      /***/
    },
    /* 387 */

    /***/
    function (module, exports, __webpack_require__) {
      // Generated by CoffeeScript 1.7.1
      (function () {
        var key, val, _ref, _ref1;

        exports.EncodeStream = __webpack_require__(388);
        exports.DecodeStream = __webpack_require__(169);
        exports.Array = __webpack_require__(252);
        exports.LazyArray = __webpack_require__(407);
        exports.Bitfield = __webpack_require__(408);
        exports.Boolean = __webpack_require__(409);
        exports.Buffer = __webpack_require__(410);
        exports.Enum = __webpack_require__(411);
        exports.Optional = __webpack_require__(412);
        exports.Reserved = __webpack_require__(413);
        exports.String = __webpack_require__(414);
        exports.Struct = __webpack_require__(253);
        exports.VersionedStruct = __webpack_require__(415);
        _ref = __webpack_require__(89);

        for (key in _ref) {
          val = _ref[key];
          exports[key] = val;
        }

        _ref1 = __webpack_require__(416);

        for (key in _ref1) {
          val = _ref1[key];
          exports[key] = val;
        }
      }).call(this);
      /***/
    },
    /* 388 */

    /***/
    function (module, exports, __webpack_require__) {
      /* WEBPACK VAR INJECTION */
      (function (Buffer) {
        // Generated by CoffeeScript 1.7.1
        (function () {
          var DecodeStream,
              EncodeStream,
              iconv,
              stream,
              __hasProp = {}.hasOwnProperty,
              __extends = function __extends(child, parent) {
            for (var key in parent) {
              if (__hasProp.call(parent, key)) child[key] = parent[key];
            }

            function ctor() {
              this.constructor = child;
            }

            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
          };

          stream = __webpack_require__(121);
          DecodeStream = __webpack_require__(169);

          try {
            iconv = __webpack_require__(170);
          } catch (_error) {}

          EncodeStream = function (_super) {
            var key;

            __extends(EncodeStream, _super);

            function EncodeStream(bufferSize) {
              if (bufferSize == null) {
                bufferSize = 65536;
              }

              EncodeStream.__super__.constructor.apply(this, arguments);

              this.buffer = new Buffer(bufferSize);
              this.bufferOffset = 0;
              this.pos = 0;
            }

            for (key in Buffer.prototype) {
              if (key.slice(0, 5) === 'write') {
                (function (key) {
                  var bytes;
                  bytes = +DecodeStream.TYPES[key.replace(/write|[BL]E/g, '')];
                  return EncodeStream.prototype[key] = function (value) {
                    this.ensure(bytes);
                    this.buffer[key](value, this.bufferOffset);
                    this.bufferOffset += bytes;
                    return this.pos += bytes;
                  };
                })(key);
              }
            }

            EncodeStream.prototype._read = function () {};

            EncodeStream.prototype.ensure = function (bytes) {
              if (this.bufferOffset + bytes > this.buffer.length) {
                return this.flush();
              }
            };

            EncodeStream.prototype.flush = function () {
              if (this.bufferOffset > 0) {
                this.push(new Buffer(this.buffer.slice(0, this.bufferOffset)));
                return this.bufferOffset = 0;
              }
            };

            EncodeStream.prototype.writeBuffer = function (buffer) {
              this.flush();
              this.push(buffer);
              return this.pos += buffer.length;
            };

            EncodeStream.prototype.writeString = function (string, encoding) {
              var buf, byte, i, _i, _ref;

              if (encoding == null) {
                encoding = 'ascii';
              }

              switch (encoding) {
                case 'utf16le':
                case 'ucs2':
                case 'utf8':
                case 'ascii':
                  return this.writeBuffer(new Buffer(string, encoding));

                case 'utf16be':
                  buf = new Buffer(string, 'utf16le');

                  for (i = _i = 0, _ref = buf.length - 1; _i < _ref; i = _i += 2) {
                    byte = buf[i];
                    buf[i] = buf[i + 1];
                    buf[i + 1] = byte;
                  }

                  return this.writeBuffer(buf);

                default:
                  if (iconv) {
                    return this.writeBuffer(iconv.encode(string, encoding));
                  } else {
                    throw new Error('Install iconv-lite to enable additional string encodings.');
                  }

              }
            };

            EncodeStream.prototype.writeUInt24BE = function (val) {
              this.ensure(3);
              this.buffer[this.bufferOffset++] = val >>> 16 & 0xff;
              this.buffer[this.bufferOffset++] = val >>> 8 & 0xff;
              this.buffer[this.bufferOffset++] = val & 0xff;
              return this.pos += 3;
            };

            EncodeStream.prototype.writeUInt24LE = function (val) {
              this.ensure(3);
              this.buffer[this.bufferOffset++] = val & 0xff;
              this.buffer[this.bufferOffset++] = val >>> 8 & 0xff;
              this.buffer[this.bufferOffset++] = val >>> 16 & 0xff;
              return this.pos += 3;
            };

            EncodeStream.prototype.writeInt24BE = function (val) {
              if (val >= 0) {
                return this.writeUInt24BE(val);
              } else {
                return this.writeUInt24BE(val + 0xffffff + 1);
              }
            };

            EncodeStream.prototype.writeInt24LE = function (val) {
              if (val >= 0) {
                return this.writeUInt24LE(val);
              } else {
                return this.writeUInt24LE(val + 0xffffff + 1);
              }
            };

            EncodeStream.prototype.fill = function (val, length) {
              var buf;

              if (length < this.buffer.length) {
                this.ensure(length);
                this.buffer.fill(val, this.bufferOffset, this.bufferOffset + length);
                this.bufferOffset += length;
                return this.pos += length;
              } else {
                buf = new Buffer(length);
                buf.fill(val);
                return this.writeBuffer(buf);
              }
            };

            EncodeStream.prototype.end = function () {
              this.flush();
              return this.push(null);
            };

            return EncodeStream;
          }(stream.Readable);

          module.exports = EncodeStream;
        }).call(this);
        /* WEBPACK VAR INJECTION */
      }).call(this, __webpack_require__(10).Buffer);
      /***/
    },
    /* 389 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var BOMChar = "\uFEFF";
      exports.PrependBOM = PrependBOMWrapper;

      function PrependBOMWrapper(encoder, options) {
        this.encoder = encoder;
        this.addBOM = true;
      }

      PrependBOMWrapper.prototype.write = function (str) {
        if (this.addBOM) {
          str = BOMChar + str;
          this.addBOM = false;
        }

        return this.encoder.write(str);
      };

      PrependBOMWrapper.prototype.end = function () {
        return this.encoder.end();
      }; //------------------------------------------------------------------------------


      exports.StripBOM = StripBOMWrapper;

      function StripBOMWrapper(decoder, options) {
        this.decoder = decoder;
        this.pass = false;
        this.options = options || {};
      }

      StripBOMWrapper.prototype.write = function (buf) {
        var res = this.decoder.write(buf);
        if (this.pass || !res) return res;

        if (res[0] === BOMChar) {
          res = res.slice(1);
          if (typeof this.options.stripBOM === 'function') this.options.stripBOM();
        }

        this.pass = true;
        return res;
      };

      StripBOMWrapper.prototype.end = function () {
        return this.decoder.end();
      };
      /***/

    },
    /* 390 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict"; // Update this array if you add/rename/remove files in this directory.
      // We support Browserify by skipping automatic module discovery and requiring modules directly.

      var modules = [__webpack_require__(391), __webpack_require__(392), __webpack_require__(393), __webpack_require__(394), __webpack_require__(395), __webpack_require__(396), __webpack_require__(397), __webpack_require__(398), __webpack_require__(399)]; // Put all encoding/alias/codec definitions to single object and export it.

      for (var i = 0; i < modules.length; i++) {
        var module = modules[i];

        for (var enc in module) {
          if (Object.prototype.hasOwnProperty.call(module, enc)) exports[enc] = module[enc];
        }
      }
      /***/

    },
    /* 391 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var Buffer = __webpack_require__(39).Buffer; // Export Node.js internal encodings.


      module.exports = {
        // Encodings
        utf8: {
          type: "_internal",
          bomAware: true
        },
        cesu8: {
          type: "_internal",
          bomAware: true
        },
        unicode11utf8: "utf8",
        ucs2: {
          type: "_internal",
          bomAware: true
        },
        utf16le: "ucs2",
        binary: {
          type: "_internal"
        },
        base64: {
          type: "_internal"
        },
        hex: {
          type: "_internal"
        },
        // Codec.
        _internal: InternalCodec
      }; //------------------------------------------------------------------------------

      function InternalCodec(codecOptions, iconv) {
        this.enc = codecOptions.encodingName;
        this.bomAware = codecOptions.bomAware;
        if (this.enc === "base64") this.encoder = InternalEncoderBase64;else if (this.enc === "cesu8") {
          this.enc = "utf8"; // Use utf8 for decoding.

          this.encoder = InternalEncoderCesu8; // Add decoder for versions of Node not supporting CESU-8

          if (Buffer.from('eda0bdedb2a9', 'hex').toString() !== '💩') {
            this.decoder = InternalDecoderCesu8;
            this.defaultCharUnicode = iconv.defaultCharUnicode;
          }
        }
      }

      InternalCodec.prototype.encoder = InternalEncoder;
      InternalCodec.prototype.decoder = InternalDecoder; //------------------------------------------------------------------------------
      // We use node.js internal decoder. Its signature is the same as ours.

      var StringDecoder = __webpack_require__(125).StringDecoder;

      if (!StringDecoder.prototype.end) // Node v0.8 doesn't have this method.
        StringDecoder.prototype.end = function () {};

      function InternalDecoder(options, codec) {
        this.decoder = new StringDecoder(codec.enc);
      }

      InternalDecoder.prototype.write = function (buf) {
        if (!Buffer.isBuffer(buf)) {
          buf = Buffer.from(buf);
        }

        return this.decoder.write(buf);
      };

      InternalDecoder.prototype.end = function () {
        return this.decoder.end();
      }; //------------------------------------------------------------------------------
      // Encoder is mostly trivial


      function InternalEncoder(options, codec) {
        this.enc = codec.enc;
      }

      InternalEncoder.prototype.write = function (str) {
        return Buffer.from(str, this.enc);
      };

      InternalEncoder.prototype.end = function () {}; //------------------------------------------------------------------------------
      // Except base64 encoder, which must keep its state.


      function InternalEncoderBase64(options, codec) {
        this.prevStr = '';
      }

      InternalEncoderBase64.prototype.write = function (str) {
        str = this.prevStr + str;
        var completeQuads = str.length - str.length % 4;
        this.prevStr = str.slice(completeQuads);
        str = str.slice(0, completeQuads);
        return Buffer.from(str, "base64");
      };

      InternalEncoderBase64.prototype.end = function () {
        return Buffer.from(this.prevStr, "base64");
      }; //------------------------------------------------------------------------------
      // CESU-8 encoder is also special.


      function InternalEncoderCesu8(options, codec) {}

      InternalEncoderCesu8.prototype.write = function (str) {
        var buf = Buffer.alloc(str.length * 3),
            bufIdx = 0;

        for (var i = 0; i < str.length; i++) {
          var charCode = str.charCodeAt(i); // Naive implementation, but it works because CESU-8 is especially easy
          // to convert from UTF-16 (which all JS strings are encoded in).

          if (charCode < 0x80) buf[bufIdx++] = charCode;else if (charCode < 0x800) {
            buf[bufIdx++] = 0xC0 + (charCode >>> 6);
            buf[bufIdx++] = 0x80 + (charCode & 0x3f);
          } else {
            // charCode will always be < 0x10000 in javascript.
            buf[bufIdx++] = 0xE0 + (charCode >>> 12);
            buf[bufIdx++] = 0x80 + (charCode >>> 6 & 0x3f);
            buf[bufIdx++] = 0x80 + (charCode & 0x3f);
          }
        }

        return buf.slice(0, bufIdx);
      };

      InternalEncoderCesu8.prototype.end = function () {}; //------------------------------------------------------------------------------
      // CESU-8 decoder is not implemented in Node v4.0+


      function InternalDecoderCesu8(options, codec) {
        this.acc = 0;
        this.contBytes = 0;
        this.accBytes = 0;
        this.defaultCharUnicode = codec.defaultCharUnicode;
      }

      InternalDecoderCesu8.prototype.write = function (buf) {
        var acc = this.acc,
            contBytes = this.contBytes,
            accBytes = this.accBytes,
            res = '';

        for (var i = 0; i < buf.length; i++) {
          var curByte = buf[i];

          if ((curByte & 0xC0) !== 0x80) {
            // Leading byte
            if (contBytes > 0) {
              // Previous code is invalid
              res += this.defaultCharUnicode;
              contBytes = 0;
            }

            if (curByte < 0x80) {
              // Single-byte code
              res += String.fromCharCode(curByte);
            } else if (curByte < 0xE0) {
              // Two-byte code
              acc = curByte & 0x1F;
              contBytes = 1;
              accBytes = 1;
            } else if (curByte < 0xF0) {
              // Three-byte code
              acc = curByte & 0x0F;
              contBytes = 2;
              accBytes = 1;
            } else {
              // Four or more are not supported for CESU-8.
              res += this.defaultCharUnicode;
            }
          } else {
            // Continuation byte
            if (contBytes > 0) {
              // We're waiting for it.
              acc = acc << 6 | curByte & 0x3f;
              contBytes--;
              accBytes++;

              if (contBytes === 0) {
                // Check for overlong encoding, but support Modified UTF-8 (encoding NULL as C0 80)
                if (accBytes === 2 && acc < 0x80 && acc > 0) res += this.defaultCharUnicode;else if (accBytes === 3 && acc < 0x800) res += this.defaultCharUnicode;else // Actually add character.
                  res += String.fromCharCode(acc);
              }
            } else {
              // Unexpected continuation byte
              res += this.defaultCharUnicode;
            }
          }
        }

        this.acc = acc;
        this.contBytes = contBytes;
        this.accBytes = accBytes;
        return res;
      };

      InternalDecoderCesu8.prototype.end = function () {
        var res = 0;
        if (this.contBytes > 0) res += this.defaultCharUnicode;
        return res;
      };
      /***/

    },
    /* 392 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var Buffer = __webpack_require__(39).Buffer; // == UTF32-LE/BE codec. ==========================================================


      exports._utf32 = Utf32Codec;

      function Utf32Codec(codecOptions, iconv) {
        this.iconv = iconv;
        this.bomAware = true;
        this.isLE = codecOptions.isLE;
      }

      exports.utf32le = {
        type: '_utf32',
        isLE: true
      };
      exports.utf32be = {
        type: '_utf32',
        isLE: false
      }; // Aliases

      exports.ucs4le = 'utf32le';
      exports.ucs4be = 'utf32be';
      Utf32Codec.prototype.encoder = Utf32Encoder;
      Utf32Codec.prototype.decoder = Utf32Decoder; // -- Encoding

      function Utf32Encoder(options, codec) {
        this.isLE = codec.isLE;
        this.highSurrogate = 0;
      }

      Utf32Encoder.prototype.write = function (str) {
        var src = Buffer.from(str, 'ucs2');
        var dst = Buffer.alloc(src.length * 2);
        var write32 = this.isLE ? dst.writeUInt32LE : dst.writeUInt32BE;
        var offset = 0;

        for (var i = 0; i < src.length; i += 2) {
          var code = src.readUInt16LE(i);
          var isHighSurrogate = 0xD800 <= code && code < 0xDC00;
          var isLowSurrogate = 0xDC00 <= code && code < 0xE000;

          if (this.highSurrogate) {
            if (isHighSurrogate || !isLowSurrogate) {
              // There shouldn't be two high surrogates in a row, nor a high surrogate which isn't followed by a low
              // surrogate. If this happens, keep the pending high surrogate as a stand-alone semi-invalid character
              // (technically wrong, but expected by some applications, like Windows file names).
              write32.call(dst, this.highSurrogate, offset);
              offset += 4;
            } else {
              // Create 32-bit value from high and low surrogates;
              var codepoint = (this.highSurrogate - 0xD800 << 10 | code - 0xDC00) + 0x10000;
              write32.call(dst, codepoint, offset);
              offset += 4;
              this.highSurrogate = 0;
              continue;
            }
          }

          if (isHighSurrogate) this.highSurrogate = code;else {
            // Even if the current character is a low surrogate, with no previous high surrogate, we'll
            // encode it as a semi-invalid stand-alone character for the same reasons expressed above for
            // unpaired high surrogates.
            write32.call(dst, code, offset);
            offset += 4;
            this.highSurrogate = 0;
          }
        }

        if (offset < dst.length) dst = dst.slice(0, offset);
        return dst;
      };

      Utf32Encoder.prototype.end = function () {
        // Treat any leftover high surrogate as a semi-valid independent character.
        if (!this.highSurrogate) return;
        var buf = Buffer.alloc(4);
        if (this.isLE) buf.writeUInt32LE(this.highSurrogate, 0);else buf.writeUInt32BE(this.highSurrogate, 0);
        this.highSurrogate = 0;
        return buf;
      }; // -- Decoding


      function Utf32Decoder(options, codec) {
        this.isLE = codec.isLE;
        this.badChar = codec.iconv.defaultCharUnicode.charCodeAt(0);
        this.overflow = [];
      }

      Utf32Decoder.prototype.write = function (src) {
        if (src.length === 0) return '';
        var i = 0;
        var codepoint = 0;
        var dst = Buffer.alloc(src.length + 4);
        var offset = 0;
        var isLE = this.isLE;
        var overflow = this.overflow;
        var badChar = this.badChar;

        if (overflow.length > 0) {
          for (; i < src.length && overflow.length < 4; i++) {
            overflow.push(src[i]);
          }

          if (overflow.length === 4) {
            // NOTE: codepoint is a signed int32 and can be negative.
            // NOTE: We copied this block from below to help V8 optimize it (it works with array, not buffer).
            if (isLE) {
              codepoint = overflow[i] | overflow[i + 1] << 8 | overflow[i + 2] << 16 | overflow[i + 3] << 24;
            } else {
              codepoint = overflow[i + 3] | overflow[i + 2] << 8 | overflow[i + 1] << 16 | overflow[i] << 24;
            }

            overflow.length = 0;
            offset = _writeCodepoint(dst, offset, codepoint, badChar);
          }
        } // Main loop. Should be as optimized as possible.


        for (; i < src.length - 3; i += 4) {
          // NOTE: codepoint is a signed int32 and can be negative.
          if (isLE) {
            codepoint = src[i] | src[i + 1] << 8 | src[i + 2] << 16 | src[i + 3] << 24;
          } else {
            codepoint = src[i + 3] | src[i + 2] << 8 | src[i + 1] << 16 | src[i] << 24;
          }

          offset = _writeCodepoint(dst, offset, codepoint, badChar);
        } // Keep overflowing bytes.


        for (; i < src.length; i++) {
          overflow.push(src[i]);
        }

        return dst.slice(0, offset).toString('ucs2');
      };

      function _writeCodepoint(dst, offset, codepoint, badChar) {
        // NOTE: codepoint is signed int32 and can be negative. We keep it that way to help V8 with optimizations.
        if (codepoint < 0 || codepoint > 0x10FFFF) {
          // Not a valid Unicode codepoint
          codepoint = badChar;
        } // Ephemeral Planes: Write high surrogate.


        if (codepoint >= 0x10000) {
          codepoint -= 0x10000;
          var high = 0xD800 | codepoint >> 10;
          dst[offset++] = high & 0xff;
          dst[offset++] = high >> 8; // Low surrogate is written below.

          var codepoint = 0xDC00 | codepoint & 0x3FF;
        } // Write BMP char or low surrogate.


        dst[offset++] = codepoint & 0xff;
        dst[offset++] = codepoint >> 8;
        return offset;
      }

      ;

      Utf32Decoder.prototype.end = function () {
        this.overflow.length = 0;
      }; // == UTF-32 Auto codec =============================================================
      // Decoder chooses automatically from UTF-32LE and UTF-32BE using BOM and space-based heuristic.
      // Defaults to UTF-32LE. http://en.wikipedia.org/wiki/UTF-32
      // Encoder/decoder default can be changed: iconv.decode(buf, 'utf32', {defaultEncoding: 'utf-32be'});
      // Encoder prepends BOM (which can be overridden with (addBOM: false}).


      exports.utf32 = Utf32AutoCodec;
      exports.ucs4 = 'utf32';

      function Utf32AutoCodec(options, iconv) {
        this.iconv = iconv;
      }

      Utf32AutoCodec.prototype.encoder = Utf32AutoEncoder;
      Utf32AutoCodec.prototype.decoder = Utf32AutoDecoder; // -- Encoding

      function Utf32AutoEncoder(options, codec) {
        options = options || {};
        if (options.addBOM === undefined) options.addBOM = true;
        this.encoder = codec.iconv.getEncoder(options.defaultEncoding || 'utf-32le', options);
      }

      Utf32AutoEncoder.prototype.write = function (str) {
        return this.encoder.write(str);
      };

      Utf32AutoEncoder.prototype.end = function () {
        return this.encoder.end();
      }; // -- Decoding


      function Utf32AutoDecoder(options, codec) {
        this.decoder = null;
        this.initialBufs = [];
        this.initialBufsLen = 0;
        this.options = options || {};
        this.iconv = codec.iconv;
      }

      Utf32AutoDecoder.prototype.write = function (buf) {
        if (!this.decoder) {
          // Codec is not chosen yet. Accumulate initial bytes.
          this.initialBufs.push(buf);
          this.initialBufsLen += buf.length;
          if (this.initialBufsLen < 32) // We need more bytes to use space heuristic (see below)
            return ''; // We have enough bytes -> detect endianness.

          var encoding = detectEncoding(this.initialBufs, this.options.defaultEncoding);
          this.decoder = this.iconv.getDecoder(encoding, this.options);
          var resStr = '';

          for (var i = 0; i < this.initialBufs.length; i++) {
            resStr += this.decoder.write(this.initialBufs[i]);
          }

          this.initialBufs.length = this.initialBufsLen = 0;
          return resStr;
        }

        return this.decoder.write(buf);
      };

      Utf32AutoDecoder.prototype.end = function () {
        if (!this.decoder) {
          var encoding = detectEncoding(this.initialBufs, this.options.defaultEncoding);
          this.decoder = this.iconv.getDecoder(encoding, this.options);
          var resStr = '';

          for (var i = 0; i < this.initialBufs.length; i++) {
            resStr += this.decoder.write(this.initialBufs[i]);
          }

          var trail = this.decoder.end();
          if (trail) resStr += trail;
          this.initialBufs.length = this.initialBufsLen = 0;
          return resStr;
        }

        return this.decoder.end();
      };

      function detectEncoding(bufs, defaultEncoding) {
        var b = [];
        var charsProcessed = 0;
        var invalidLE = 0,
            invalidBE = 0; // Number of invalid chars when decoded as LE or BE.

        var bmpCharsLE = 0,
            bmpCharsBE = 0; // Number of BMP chars when decoded as LE or BE.

        outer_loop: for (var i = 0; i < bufs.length; i++) {
          var buf = bufs[i];

          for (var j = 0; j < buf.length; j++) {
            b.push(buf[j]);

            if (b.length === 4) {
              if (charsProcessed === 0) {
                // Check BOM first.
                if (b[0] === 0xFF && b[1] === 0xFE && b[2] === 0 && b[3] === 0) {
                  return 'utf-32le';
                }

                if (b[0] === 0 && b[1] === 0 && b[2] === 0xFE && b[3] === 0xFF) {
                  return 'utf-32be';
                }
              }

              if (b[0] !== 0 || b[1] > 0x10) invalidBE++;
              if (b[3] !== 0 || b[2] > 0x10) invalidLE++;
              if (b[0] === 0 && b[1] === 0 && (b[2] !== 0 || b[3] !== 0)) bmpCharsBE++;
              if ((b[0] !== 0 || b[1] !== 0) && b[2] === 0 && b[3] === 0) bmpCharsLE++;
              b.length = 0;
              charsProcessed++;

              if (charsProcessed >= 100) {
                break outer_loop;
              }
            }
          }
        } // Make decisions.


        if (bmpCharsBE - invalidBE > bmpCharsLE - invalidLE) return 'utf-32be';
        if (bmpCharsBE - invalidBE < bmpCharsLE - invalidLE) return 'utf-32le'; // Couldn't decide (likely all zeros or not enough data).

        return defaultEncoding || 'utf-32le';
      }
      /***/

    },
    /* 393 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var Buffer = __webpack_require__(39).Buffer; // Note: UTF16-LE (or UCS2) codec is Node.js native. See encodings/internal.js
      // == UTF16-BE codec. ==========================================================


      exports.utf16be = Utf16BECodec;

      function Utf16BECodec() {}

      Utf16BECodec.prototype.encoder = Utf16BEEncoder;
      Utf16BECodec.prototype.decoder = Utf16BEDecoder;
      Utf16BECodec.prototype.bomAware = true; // -- Encoding

      function Utf16BEEncoder() {}

      Utf16BEEncoder.prototype.write = function (str) {
        var buf = Buffer.from(str, 'ucs2');

        for (var i = 0; i < buf.length; i += 2) {
          var tmp = buf[i];
          buf[i] = buf[i + 1];
          buf[i + 1] = tmp;
        }

        return buf;
      };

      Utf16BEEncoder.prototype.end = function () {}; // -- Decoding


      function Utf16BEDecoder() {
        this.overflowByte = -1;
      }

      Utf16BEDecoder.prototype.write = function (buf) {
        if (buf.length == 0) return '';
        var buf2 = Buffer.alloc(buf.length + 1),
            i = 0,
            j = 0;

        if (this.overflowByte !== -1) {
          buf2[0] = buf[0];
          buf2[1] = this.overflowByte;
          i = 1;
          j = 2;
        }

        for (; i < buf.length - 1; i += 2, j += 2) {
          buf2[j] = buf[i + 1];
          buf2[j + 1] = buf[i];
        }

        this.overflowByte = i == buf.length - 1 ? buf[buf.length - 1] : -1;
        return buf2.slice(0, j).toString('ucs2');
      };

      Utf16BEDecoder.prototype.end = function () {
        this.overflowByte = -1;
      }; // == UTF-16 codec =============================================================
      // Decoder chooses automatically from UTF-16LE and UTF-16BE using BOM and space-based heuristic.
      // Defaults to UTF-16LE, as it's prevalent and default in Node.
      // http://en.wikipedia.org/wiki/UTF-16 and http://encoding.spec.whatwg.org/#utf-16le
      // Decoder default can be changed: iconv.decode(buf, 'utf16', {defaultEncoding: 'utf-16be'});
      // Encoder uses UTF-16LE and prepends BOM (which can be overridden with addBOM: false).


      exports.utf16 = Utf16Codec;

      function Utf16Codec(codecOptions, iconv) {
        this.iconv = iconv;
      }

      Utf16Codec.prototype.encoder = Utf16Encoder;
      Utf16Codec.prototype.decoder = Utf16Decoder; // -- Encoding (pass-through)

      function Utf16Encoder(options, codec) {
        options = options || {};
        if (options.addBOM === undefined) options.addBOM = true;
        this.encoder = codec.iconv.getEncoder('utf-16le', options);
      }

      Utf16Encoder.prototype.write = function (str) {
        return this.encoder.write(str);
      };

      Utf16Encoder.prototype.end = function () {
        return this.encoder.end();
      }; // -- Decoding


      function Utf16Decoder(options, codec) {
        this.decoder = null;
        this.initialBufs = [];
        this.initialBufsLen = 0;
        this.options = options || {};
        this.iconv = codec.iconv;
      }

      Utf16Decoder.prototype.write = function (buf) {
        if (!this.decoder) {
          // Codec is not chosen yet. Accumulate initial bytes.
          this.initialBufs.push(buf);
          this.initialBufsLen += buf.length;
          if (this.initialBufsLen < 16) // We need more bytes to use space heuristic (see below)
            return ''; // We have enough bytes -> detect endianness.

          var encoding = detectEncoding(this.initialBufs, this.options.defaultEncoding);
          this.decoder = this.iconv.getDecoder(encoding, this.options);
          var resStr = '';

          for (var i = 0; i < this.initialBufs.length; i++) {
            resStr += this.decoder.write(this.initialBufs[i]);
          }

          this.initialBufs.length = this.initialBufsLen = 0;
          return resStr;
        }

        return this.decoder.write(buf);
      };

      Utf16Decoder.prototype.end = function () {
        if (!this.decoder) {
          var encoding = detectEncoding(this.initialBufs, this.options.defaultEncoding);
          this.decoder = this.iconv.getDecoder(encoding, this.options);
          var resStr = '';

          for (var i = 0; i < this.initialBufs.length; i++) {
            resStr += this.decoder.write(this.initialBufs[i]);
          }

          var trail = this.decoder.end();
          if (trail) resStr += trail;
          this.initialBufs.length = this.initialBufsLen = 0;
          return resStr;
        }

        return this.decoder.end();
      };

      function detectEncoding(bufs, defaultEncoding) {
        var b = [];
        var charsProcessed = 0;
        var asciiCharsLE = 0,
            asciiCharsBE = 0; // Number of ASCII chars when decoded as LE or BE.

        outer_loop: for (var i = 0; i < bufs.length; i++) {
          var buf = bufs[i];

          for (var j = 0; j < buf.length; j++) {
            b.push(buf[j]);

            if (b.length === 2) {
              if (charsProcessed === 0) {
                // Check BOM first.
                if (b[0] === 0xFF && b[1] === 0xFE) return 'utf-16le';
                if (b[0] === 0xFE && b[1] === 0xFF) return 'utf-16be';
              }

              if (b[0] === 0 && b[1] !== 0) asciiCharsBE++;
              if (b[0] !== 0 && b[1] === 0) asciiCharsLE++;
              b.length = 0;
              charsProcessed++;

              if (charsProcessed >= 100) {
                break outer_loop;
              }
            }
          }
        } // Make decisions.
        // Most of the time, the content has ASCII chars (U+00**), but the opposite (U+**00) is uncommon.
        // So, we count ASCII as if it was LE or BE, and decide from that.


        if (asciiCharsBE > asciiCharsLE) return 'utf-16be';
        if (asciiCharsBE < asciiCharsLE) return 'utf-16le'; // Couldn't decide (likely all zeros or not enough data).

        return defaultEncoding || 'utf-16le';
      }
      /***/

    },
    /* 394 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var Buffer = __webpack_require__(39).Buffer; // UTF-7 codec, according to https://tools.ietf.org/html/rfc2152
      // See also below a UTF-7-IMAP codec, according to http://tools.ietf.org/html/rfc3501#section-5.1.3


      exports.utf7 = Utf7Codec;
      exports.unicode11utf7 = 'utf7'; // Alias UNICODE-1-1-UTF-7

      function Utf7Codec(codecOptions, iconv) {
        this.iconv = iconv;
      }

      ;
      Utf7Codec.prototype.encoder = Utf7Encoder;
      Utf7Codec.prototype.decoder = Utf7Decoder;
      Utf7Codec.prototype.bomAware = true; // -- Encoding

      var nonDirectChars = /[^A-Za-z0-9'\(\),-\.\/:\? \n\r\t]+/g;

      function Utf7Encoder(options, codec) {
        this.iconv = codec.iconv;
      }

      Utf7Encoder.prototype.write = function (str) {
        // Naive implementation.
        // Non-direct chars are encoded as "+<base64>-"; single "+" char is encoded as "+-".
        return Buffer.from(str.replace(nonDirectChars, function (chunk) {
          return "+" + (chunk === '+' ? '' : this.iconv.encode(chunk, 'utf16-be').toString('base64').replace(/=+$/, '')) + "-";
        }.bind(this)));
      };

      Utf7Encoder.prototype.end = function () {}; // -- Decoding


      function Utf7Decoder(options, codec) {
        this.iconv = codec.iconv;
        this.inBase64 = false;
        this.base64Accum = '';
      }

      var base64Regex = /[A-Za-z0-9\/+]/;
      var base64Chars = [];

      for (var i = 0; i < 256; i++) {
        base64Chars[i] = base64Regex.test(String.fromCharCode(i));
      }

      var plusChar = '+'.charCodeAt(0),
          minusChar = '-'.charCodeAt(0),
          andChar = '&'.charCodeAt(0);

      Utf7Decoder.prototype.write = function (buf) {
        var res = "",
            lastI = 0,
            inBase64 = this.inBase64,
            base64Accum = this.base64Accum; // The decoder is more involved as we must handle chunks in stream.

        for (var i = 0; i < buf.length; i++) {
          if (!inBase64) {
            // We're in direct mode.
            // Write direct chars until '+'
            if (buf[i] == plusChar) {
              res += this.iconv.decode(buf.slice(lastI, i), "ascii"); // Write direct chars.

              lastI = i + 1;
              inBase64 = true;
            }
          } else {
            // We decode base64.
            if (!base64Chars[buf[i]]) {
              // Base64 ended.
              if (i == lastI && buf[i] == minusChar) {
                // "+-" -> "+"
                res += "+";
              } else {
                var b64str = base64Accum + this.iconv.decode(buf.slice(lastI, i), "ascii");
                res += this.iconv.decode(Buffer.from(b64str, 'base64'), "utf16-be");
              }

              if (buf[i] != minusChar) // Minus is absorbed after base64.
                i--;
              lastI = i + 1;
              inBase64 = false;
              base64Accum = '';
            }
          }
        }

        if (!inBase64) {
          res += this.iconv.decode(buf.slice(lastI), "ascii"); // Write direct chars.
        } else {
          var b64str = base64Accum + this.iconv.decode(buf.slice(lastI), "ascii");
          var canBeDecoded = b64str.length - b64str.length % 8; // Minimal chunk: 2 quads -> 2x3 bytes -> 3 chars.

          base64Accum = b64str.slice(canBeDecoded); // The rest will be decoded in future.

          b64str = b64str.slice(0, canBeDecoded);
          res += this.iconv.decode(Buffer.from(b64str, 'base64'), "utf16-be");
        }

        this.inBase64 = inBase64;
        this.base64Accum = base64Accum;
        return res;
      };

      Utf7Decoder.prototype.end = function () {
        var res = "";
        if (this.inBase64 && this.base64Accum.length > 0) res = this.iconv.decode(Buffer.from(this.base64Accum, 'base64'), "utf16-be");
        this.inBase64 = false;
        this.base64Accum = '';
        return res;
      }; // UTF-7-IMAP codec.
      // RFC3501 Sec. 5.1.3 Modified UTF-7 (http://tools.ietf.org/html/rfc3501#section-5.1.3)
      // Differences:
      //  * Base64 part is started by "&" instead of "+"
      //  * Direct characters are 0x20-0x7E, except "&" (0x26)
      //  * In Base64, "," is used instead of "/"
      //  * Base64 must not be used to represent direct characters.
      //  * No implicit shift back from Base64 (should always end with '-')
      //  * String must end in non-shifted position.
      //  * "-&" while in base64 is not allowed.


      exports.utf7imap = Utf7IMAPCodec;

      function Utf7IMAPCodec(codecOptions, iconv) {
        this.iconv = iconv;
      }

      ;
      Utf7IMAPCodec.prototype.encoder = Utf7IMAPEncoder;
      Utf7IMAPCodec.prototype.decoder = Utf7IMAPDecoder;
      Utf7IMAPCodec.prototype.bomAware = true; // -- Encoding

      function Utf7IMAPEncoder(options, codec) {
        this.iconv = codec.iconv;
        this.inBase64 = false;
        this.base64Accum = Buffer.alloc(6);
        this.base64AccumIdx = 0;
      }

      Utf7IMAPEncoder.prototype.write = function (str) {
        var inBase64 = this.inBase64,
            base64Accum = this.base64Accum,
            base64AccumIdx = this.base64AccumIdx,
            buf = Buffer.alloc(str.length * 5 + 10),
            bufIdx = 0;

        for (var i = 0; i < str.length; i++) {
          var uChar = str.charCodeAt(i);

          if (0x20 <= uChar && uChar <= 0x7E) {
            // Direct character or '&'.
            if (inBase64) {
              if (base64AccumIdx > 0) {
                bufIdx += buf.write(base64Accum.slice(0, base64AccumIdx).toString('base64').replace(/\//g, ',').replace(/=+$/, ''), bufIdx);
                base64AccumIdx = 0;
              }

              buf[bufIdx++] = minusChar; // Write '-', then go to direct mode.

              inBase64 = false;
            }

            if (!inBase64) {
              buf[bufIdx++] = uChar; // Write direct character

              if (uChar === andChar) // Ampersand -> '&-'
                buf[bufIdx++] = minusChar;
            }
          } else {
            // Non-direct character
            if (!inBase64) {
              buf[bufIdx++] = andChar; // Write '&', then go to base64 mode.

              inBase64 = true;
            }

            if (inBase64) {
              base64Accum[base64AccumIdx++] = uChar >> 8;
              base64Accum[base64AccumIdx++] = uChar & 0xFF;

              if (base64AccumIdx == base64Accum.length) {
                bufIdx += buf.write(base64Accum.toString('base64').replace(/\//g, ','), bufIdx);
                base64AccumIdx = 0;
              }
            }
          }
        }

        this.inBase64 = inBase64;
        this.base64AccumIdx = base64AccumIdx;
        return buf.slice(0, bufIdx);
      };

      Utf7IMAPEncoder.prototype.end = function () {
        var buf = Buffer.alloc(10),
            bufIdx = 0;

        if (this.inBase64) {
          if (this.base64AccumIdx > 0) {
            bufIdx += buf.write(this.base64Accum.slice(0, this.base64AccumIdx).toString('base64').replace(/\//g, ',').replace(/=+$/, ''), bufIdx);
            this.base64AccumIdx = 0;
          }

          buf[bufIdx++] = minusChar; // Write '-', then go to direct mode.

          this.inBase64 = false;
        }

        return buf.slice(0, bufIdx);
      }; // -- Decoding


      function Utf7IMAPDecoder(options, codec) {
        this.iconv = codec.iconv;
        this.inBase64 = false;
        this.base64Accum = '';
      }

      var base64IMAPChars = base64Chars.slice();
      base64IMAPChars[','.charCodeAt(0)] = true;

      Utf7IMAPDecoder.prototype.write = function (buf) {
        var res = "",
            lastI = 0,
            inBase64 = this.inBase64,
            base64Accum = this.base64Accum; // The decoder is more involved as we must handle chunks in stream.
        // It is forgiving, closer to standard UTF-7 (for example, '-' is optional at the end).

        for (var i = 0; i < buf.length; i++) {
          if (!inBase64) {
            // We're in direct mode.
            // Write direct chars until '&'
            if (buf[i] == andChar) {
              res += this.iconv.decode(buf.slice(lastI, i), "ascii"); // Write direct chars.

              lastI = i + 1;
              inBase64 = true;
            }
          } else {
            // We decode base64.
            if (!base64IMAPChars[buf[i]]) {
              // Base64 ended.
              if (i == lastI && buf[i] == minusChar) {
                // "&-" -> "&"
                res += "&";
              } else {
                var b64str = base64Accum + this.iconv.decode(buf.slice(lastI, i), "ascii").replace(/,/g, '/');
                res += this.iconv.decode(Buffer.from(b64str, 'base64'), "utf16-be");
              }

              if (buf[i] != minusChar) // Minus may be absorbed after base64.
                i--;
              lastI = i + 1;
              inBase64 = false;
              base64Accum = '';
            }
          }
        }

        if (!inBase64) {
          res += this.iconv.decode(buf.slice(lastI), "ascii"); // Write direct chars.
        } else {
          var b64str = base64Accum + this.iconv.decode(buf.slice(lastI), "ascii").replace(/,/g, '/');
          var canBeDecoded = b64str.length - b64str.length % 8; // Minimal chunk: 2 quads -> 2x3 bytes -> 3 chars.

          base64Accum = b64str.slice(canBeDecoded); // The rest will be decoded in future.

          b64str = b64str.slice(0, canBeDecoded);
          res += this.iconv.decode(Buffer.from(b64str, 'base64'), "utf16-be");
        }

        this.inBase64 = inBase64;
        this.base64Accum = base64Accum;
        return res;
      };

      Utf7IMAPDecoder.prototype.end = function () {
        var res = "";
        if (this.inBase64 && this.base64Accum.length > 0) res = this.iconv.decode(Buffer.from(this.base64Accum, 'base64'), "utf16-be");
        this.inBase64 = false;
        this.base64Accum = '';
        return res;
      };
      /***/

    },
    /* 395 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var Buffer = __webpack_require__(39).Buffer; // Single-byte codec. Needs a 'chars' string parameter that contains 256 or 128 chars that
      // correspond to encoded bytes (if 128 - then lower half is ASCII). 


      exports._sbcs = SBCSCodec;

      function SBCSCodec(codecOptions, iconv) {
        if (!codecOptions) throw new Error("SBCS codec is called without the data."); // Prepare char buffer for decoding.

        if (!codecOptions.chars || codecOptions.chars.length !== 128 && codecOptions.chars.length !== 256) throw new Error("Encoding '" + codecOptions.type + "' has incorrect 'chars' (must be of len 128 or 256)");

        if (codecOptions.chars.length === 128) {
          var asciiString = "";

          for (var i = 0; i < 128; i++) {
            asciiString += String.fromCharCode(i);
          }

          codecOptions.chars = asciiString + codecOptions.chars;
        }

        this.decodeBuf = Buffer.from(codecOptions.chars, 'ucs2'); // Encoding buffer.

        var encodeBuf = Buffer.alloc(65536, iconv.defaultCharSingleByte.charCodeAt(0));

        for (var i = 0; i < codecOptions.chars.length; i++) {
          encodeBuf[codecOptions.chars.charCodeAt(i)] = i;
        }

        this.encodeBuf = encodeBuf;
      }

      SBCSCodec.prototype.encoder = SBCSEncoder;
      SBCSCodec.prototype.decoder = SBCSDecoder;

      function SBCSEncoder(options, codec) {
        this.encodeBuf = codec.encodeBuf;
      }

      SBCSEncoder.prototype.write = function (str) {
        var buf = Buffer.alloc(str.length);

        for (var i = 0; i < str.length; i++) {
          buf[i] = this.encodeBuf[str.charCodeAt(i)];
        }

        return buf;
      };

      SBCSEncoder.prototype.end = function () {};

      function SBCSDecoder(options, codec) {
        this.decodeBuf = codec.decodeBuf;
      }

      SBCSDecoder.prototype.write = function (buf) {
        // Strings are immutable in JS -> we use ucs2 buffer to speed up computations.
        var decodeBuf = this.decodeBuf;
        var newBuf = Buffer.alloc(buf.length * 2);
        var idx1 = 0,
            idx2 = 0;

        for (var i = 0; i < buf.length; i++) {
          idx1 = buf[i] * 2;
          idx2 = i * 2;
          newBuf[idx2] = decodeBuf[idx1];
          newBuf[idx2 + 1] = decodeBuf[idx1 + 1];
        }

        return newBuf.toString('ucs2');
      };

      SBCSDecoder.prototype.end = function () {};
      /***/

    },
    /* 396 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict"; // Manually added data to be used by sbcs codec in addition to generated one.

      module.exports = {
        // Not supported by iconv, not sure why.
        "10029": "maccenteuro",
        "maccenteuro": {
          "type": "_sbcs",
          "chars": "ÄĀāÉĄÖÜáąČäčĆćéŹźĎíďĒēĖóėôöõúĚěü†°Ę£§•¶ß®©™ę¨≠ģĮįĪ≤≥īĶ∂∑łĻļĽľĹĺŅņŃ¬√ńŇ∆«»… ňŐÕőŌ–—“”‘’÷◊ōŔŕŘ‹›řŖŗŠ‚„šŚśÁŤťÍŽžŪÓÔūŮÚůŰűŲųÝýķŻŁżĢˇ"
        },
        "808": "cp808",
        "ibm808": "cp808",
        "cp808": {
          "type": "_sbcs",
          "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёЄєЇїЎў°∙·√№€■ "
        },
        "mik": {
          "type": "_sbcs",
          "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя└┴┬├─┼╣║╚╔╩╦╠═╬┐░▒▓│┤№§╗╝┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
        },
        "cp720": {
          "type": "_sbcs",
          "chars": "\x80\x81\xE9\xE2\x84\xE0\x86\xE7\xEA\xEB\xE8\xEF\xEE\x8D\x8E\x8F\x90\u0651\u0652\xF4\xA4\u0640\xFB\xF9\u0621\u0622\u0623\u0624\xA3\u0625\u0626\u0627\u0628\u0629\u062A\u062B\u062C\u062D\u062E\u062F\u0630\u0631\u0632\u0633\u0634\u0635\xAB\xBB\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u0636\u0637\u0638\u0639\u063A\u0641\xB5\u0642\u0643\u0644\u0645\u0646\u0647\u0648\u0649\u064A\u2261\u064B\u064C\u064D\u064E\u064F\u0650\u2248\xB0\u2219\xB7\u221A\u207F\xB2\u25A0\xA0"
        },
        // Aliases of generated encodings.
        "ascii8bit": "ascii",
        "usascii": "ascii",
        "ansix34": "ascii",
        "ansix341968": "ascii",
        "ansix341986": "ascii",
        "csascii": "ascii",
        "cp367": "ascii",
        "ibm367": "ascii",
        "isoir6": "ascii",
        "iso646us": "ascii",
        "iso646irv": "ascii",
        "us": "ascii",
        "latin1": "iso88591",
        "latin2": "iso88592",
        "latin3": "iso88593",
        "latin4": "iso88594",
        "latin5": "iso88599",
        "latin6": "iso885910",
        "latin7": "iso885913",
        "latin8": "iso885914",
        "latin9": "iso885915",
        "latin10": "iso885916",
        "csisolatin1": "iso88591",
        "csisolatin2": "iso88592",
        "csisolatin3": "iso88593",
        "csisolatin4": "iso88594",
        "csisolatincyrillic": "iso88595",
        "csisolatinarabic": "iso88596",
        "csisolatingreek": "iso88597",
        "csisolatinhebrew": "iso88598",
        "csisolatin5": "iso88599",
        "csisolatin6": "iso885910",
        "l1": "iso88591",
        "l2": "iso88592",
        "l3": "iso88593",
        "l4": "iso88594",
        "l5": "iso88599",
        "l6": "iso885910",
        "l7": "iso885913",
        "l8": "iso885914",
        "l9": "iso885915",
        "l10": "iso885916",
        "isoir14": "iso646jp",
        "isoir57": "iso646cn",
        "isoir100": "iso88591",
        "isoir101": "iso88592",
        "isoir109": "iso88593",
        "isoir110": "iso88594",
        "isoir144": "iso88595",
        "isoir127": "iso88596",
        "isoir126": "iso88597",
        "isoir138": "iso88598",
        "isoir148": "iso88599",
        "isoir157": "iso885910",
        "isoir166": "tis620",
        "isoir179": "iso885913",
        "isoir199": "iso885914",
        "isoir203": "iso885915",
        "isoir226": "iso885916",
        "cp819": "iso88591",
        "ibm819": "iso88591",
        "cyrillic": "iso88595",
        "arabic": "iso88596",
        "arabic8": "iso88596",
        "ecma114": "iso88596",
        "asmo708": "iso88596",
        "greek": "iso88597",
        "greek8": "iso88597",
        "ecma118": "iso88597",
        "elot928": "iso88597",
        "hebrew": "iso88598",
        "hebrew8": "iso88598",
        "turkish": "iso88599",
        "turkish8": "iso88599",
        "thai": "iso885911",
        "thai8": "iso885911",
        "celtic": "iso885914",
        "celtic8": "iso885914",
        "isoceltic": "iso885914",
        "tis6200": "tis620",
        "tis62025291": "tis620",
        "tis62025330": "tis620",
        "10000": "macroman",
        "10006": "macgreek",
        "10007": "maccyrillic",
        "10079": "maciceland",
        "10081": "macturkish",
        "cspc8codepage437": "cp437",
        "cspc775baltic": "cp775",
        "cspc850multilingual": "cp850",
        "cspcp852": "cp852",
        "cspc862latinhebrew": "cp862",
        "cpgr": "cp869",
        "msee": "cp1250",
        "mscyrl": "cp1251",
        "msansi": "cp1252",
        "msgreek": "cp1253",
        "msturk": "cp1254",
        "mshebr": "cp1255",
        "msarab": "cp1256",
        "winbaltrim": "cp1257",
        "cp20866": "koi8r",
        "20866": "koi8r",
        "ibm878": "koi8r",
        "cskoi8r": "koi8r",
        "cp21866": "koi8u",
        "21866": "koi8u",
        "ibm1168": "koi8u",
        "strk10482002": "rk1048",
        "tcvn5712": "tcvn",
        "tcvn57121": "tcvn",
        "gb198880": "iso646cn",
        "cn": "iso646cn",
        "csiso14jisc6220ro": "iso646jp",
        "jisc62201969ro": "iso646jp",
        "jp": "iso646jp",
        "cshproman8": "hproman8",
        "r8": "hproman8",
        "roman8": "hproman8",
        "xroman8": "hproman8",
        "ibm1051": "hproman8",
        "mac": "macintosh",
        "csmacintosh": "macintosh"
      };
      /***/
    },
    /* 397 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict"; // Generated data for sbcs codec. Don't edit manually. Regenerate using generation/gen-sbcs.js script.

      module.exports = {
        "437": "cp437",
        "737": "cp737",
        "775": "cp775",
        "850": "cp850",
        "852": "cp852",
        "855": "cp855",
        "856": "cp856",
        "857": "cp857",
        "858": "cp858",
        "860": "cp860",
        "861": "cp861",
        "862": "cp862",
        "863": "cp863",
        "864": "cp864",
        "865": "cp865",
        "866": "cp866",
        "869": "cp869",
        "874": "windows874",
        "922": "cp922",
        "1046": "cp1046",
        "1124": "cp1124",
        "1125": "cp1125",
        "1129": "cp1129",
        "1133": "cp1133",
        "1161": "cp1161",
        "1162": "cp1162",
        "1163": "cp1163",
        "1250": "windows1250",
        "1251": "windows1251",
        "1252": "windows1252",
        "1253": "windows1253",
        "1254": "windows1254",
        "1255": "windows1255",
        "1256": "windows1256",
        "1257": "windows1257",
        "1258": "windows1258",
        "28591": "iso88591",
        "28592": "iso88592",
        "28593": "iso88593",
        "28594": "iso88594",
        "28595": "iso88595",
        "28596": "iso88596",
        "28597": "iso88597",
        "28598": "iso88598",
        "28599": "iso88599",
        "28600": "iso885910",
        "28601": "iso885911",
        "28603": "iso885913",
        "28604": "iso885914",
        "28605": "iso885915",
        "28606": "iso885916",
        "windows874": {
          "type": "_sbcs",
          "chars": "€����…�����������‘’“”•–—�������� กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����"
        },
        "win874": "windows874",
        "cp874": "windows874",
        "windows1250": {
          "type": "_sbcs",
          "chars": "€�‚�„…†‡�‰Š‹ŚŤŽŹ�‘’“”•–—�™š›śťžź ˇ˘Ł¤Ą¦§¨©Ş«¬­®Ż°±˛ł´µ¶·¸ąş»Ľ˝ľżŔÁÂĂÄĹĆÇČÉĘËĚÍÎĎĐŃŇÓÔŐÖ×ŘŮÚŰÜÝŢßŕáâăäĺćçčéęëěíîďđńňóôőö÷řůúűüýţ˙"
        },
        "win1250": "windows1250",
        "cp1250": "windows1250",
        "windows1251": {
          "type": "_sbcs",
          "chars": "ЂЃ‚ѓ„…†‡€‰Љ‹ЊЌЋЏђ‘’“”•–—�™љ›њќћџ ЎўЈ¤Ґ¦§Ё©Є«¬­®Ї°±Ііґµ¶·ё№є»јЅѕїАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя"
        },
        "win1251": "windows1251",
        "cp1251": "windows1251",
        "windows1252": {
          "type": "_sbcs",
          "chars": "€�‚ƒ„…†‡ˆ‰Š‹Œ�Ž��‘’“”•–—˜™š›œ�žŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
        },
        "win1252": "windows1252",
        "cp1252": "windows1252",
        "windows1253": {
          "type": "_sbcs",
          "chars": "€�‚ƒ„…†‡�‰�‹�����‘’“”•–—�™�›���� ΅Ά£¤¥¦§¨©�«¬­®―°±²³΄µ¶·ΈΉΊ»Ό½ΎΏΐΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡ�ΣΤΥΦΧΨΩΪΫάέήίΰαβγδεζηθικλμνξοπρςστυφχψωϊϋόύώ�"
        },
        "win1253": "windows1253",
        "cp1253": "windows1253",
        "windows1254": {
          "type": "_sbcs",
          "chars": "€�‚ƒ„…†‡ˆ‰Š‹Œ����‘’“”•–—˜™š›œ��Ÿ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏĞÑÒÓÔÕÖ×ØÙÚÛÜİŞßàáâãäåæçèéêëìíîïğñòóôõö÷øùúûüışÿ"
        },
        "win1254": "windows1254",
        "cp1254": "windows1254",
        "windows1255": {
          "type": "_sbcs",
          "chars": "€�‚ƒ„…†‡ˆ‰�‹�����‘’“”•–—˜™�›���� ¡¢£₪¥¦§¨©×«¬­®¯°±²³´µ¶·¸¹÷»¼½¾¿ְֱֲֳִֵֶַָֹֺֻּֽ־ֿ׀ׁׂ׃װױײ׳״�������אבגדהוזחטיךכלםמןנסעףפץצקרשת��‎‏�"
        },
        "win1255": "windows1255",
        "cp1255": "windows1255",
        "windows1256": {
          "type": "_sbcs",
          "chars": "€پ‚ƒ„…†‡ˆ‰ٹ‹Œچژڈگ‘’“”•–—ک™ڑ›œ‌‍ں ،¢£¤¥¦§¨©ھ«¬­®¯°±²³´µ¶·¸¹؛»¼½¾؟ہءآأؤإئابةتثجحخدذرزسشصض×طظعغـفقكàلâمنهوçèéêëىيîïًٌٍَôُِ÷ّùْûü‎‏ے"
        },
        "win1256": "windows1256",
        "cp1256": "windows1256",
        "windows1257": {
          "type": "_sbcs",
          "chars": "€�‚�„…†‡�‰�‹�¨ˇ¸�‘’“”•–—�™�›�¯˛� �¢£¤�¦§Ø©Ŗ«¬­®Æ°±²³´µ¶·ø¹ŗ»¼½¾æĄĮĀĆÄÅĘĒČÉŹĖĢĶĪĻŠŃŅÓŌÕÖ×ŲŁŚŪÜŻŽßąįāćäåęēčéźėģķīļšńņóōõö÷ųłśūüżž˙"
        },
        "win1257": "windows1257",
        "cp1257": "windows1257",
        "windows1258": {
          "type": "_sbcs",
          "chars": "€�‚ƒ„…†‡ˆ‰�‹Œ����‘’“”•–—˜™�›œ��Ÿ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ"
        },
        "win1258": "windows1258",
        "cp1258": "windows1258",
        "iso88591": {
          "type": "_sbcs",
          "chars": " ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
        },
        "cp28591": "iso88591",
        "iso88592": {
          "type": "_sbcs",
          "chars": " Ą˘Ł¤ĽŚ§¨ŠŞŤŹ­ŽŻ°ą˛ł´ľśˇ¸šşťź˝žżŔÁÂĂÄĹĆÇČÉĘËĚÍÎĎĐŃŇÓÔŐÖ×ŘŮÚŰÜÝŢßŕáâăäĺćçčéęëěíîďđńňóôőö÷řůúűüýţ˙"
        },
        "cp28592": "iso88592",
        "iso88593": {
          "type": "_sbcs",
          "chars": " Ħ˘£¤�Ĥ§¨İŞĞĴ­�Ż°ħ²³´µĥ·¸ışğĵ½�żÀÁÂ�ÄĊĈÇÈÉÊËÌÍÎÏ�ÑÒÓÔĠÖ×ĜÙÚÛÜŬŜßàáâ�äċĉçèéêëìíîï�ñòóôġö÷ĝùúûüŭŝ˙"
        },
        "cp28593": "iso88593",
        "iso88594": {
          "type": "_sbcs",
          "chars": " ĄĸŖ¤ĨĻ§¨ŠĒĢŦ­Ž¯°ą˛ŗ´ĩļˇ¸šēģŧŊžŋĀÁÂÃÄÅÆĮČÉĘËĖÍÎĪĐŅŌĶÔÕÖ×ØŲÚÛÜŨŪßāáâãäåæįčéęëėíîīđņōķôõö÷øųúûüũū˙"
        },
        "cp28594": "iso88594",
        "iso88595": {
          "type": "_sbcs",
          "chars": " ЁЂЃЄЅІЇЈЉЊЋЌ­ЎЏАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя№ёђѓєѕіїјљњћќ§ўџ"
        },
        "cp28595": "iso88595",
        "iso88596": {
          "type": "_sbcs",
          "chars": " ���¤�������،­�������������؛���؟�ءآأؤإئابةتثجحخدذرزسشصضطظعغ�����ـفقكلمنهوىيًٌٍَُِّْ�������������"
        },
        "cp28596": "iso88596",
        "iso88597": {
          "type": "_sbcs",
          "chars": " ‘’£€₯¦§¨©ͺ«¬­�―°±²³΄΅Ά·ΈΉΊ»Ό½ΎΏΐΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡ�ΣΤΥΦΧΨΩΪΫάέήίΰαβγδεζηθικλμνξοπρςστυφχψωϊϋόύώ�"
        },
        "cp28597": "iso88597",
        "iso88598": {
          "type": "_sbcs",
          "chars": " �¢£¤¥¦§¨©×«¬­®¯°±²³´µ¶·¸¹÷»¼½¾��������������������������������‗אבגדהוזחטיךכלםמןנסעףפץצקרשת��‎‏�"
        },
        "cp28598": "iso88598",
        "iso88599": {
          "type": "_sbcs",
          "chars": " ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏĞÑÒÓÔÕÖ×ØÙÚÛÜİŞßàáâãäåæçèéêëìíîïğñòóôõö÷øùúûüışÿ"
        },
        "cp28599": "iso88599",
        "iso885910": {
          "type": "_sbcs",
          "chars": " ĄĒĢĪĨĶ§ĻĐŠŦŽ­ŪŊ°ąēģīĩķ·ļđšŧž―ūŋĀÁÂÃÄÅÆĮČÉĘËĖÍÎÏÐŅŌÓÔÕÖŨØŲÚÛÜÝÞßāáâãäåæįčéęëėíîïðņōóôõöũøųúûüýþĸ"
        },
        "cp28600": "iso885910",
        "iso885911": {
          "type": "_sbcs",
          "chars": " กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����"
        },
        "cp28601": "iso885911",
        "iso885913": {
          "type": "_sbcs",
          "chars": " ”¢£¤„¦§Ø©Ŗ«¬­®Æ°±²³“µ¶·ø¹ŗ»¼½¾æĄĮĀĆÄÅĘĒČÉŹĖĢĶĪĻŠŃŅÓŌÕÖ×ŲŁŚŪÜŻŽßąįāćäåęēčéźėģķīļšńņóōõö÷ųłśūüżž’"
        },
        "cp28603": "iso885913",
        "iso885914": {
          "type": "_sbcs",
          "chars": " Ḃḃ£ĊċḊ§Ẁ©ẂḋỲ­®ŸḞḟĠġṀṁ¶ṖẁṗẃṠỳẄẅṡÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏŴÑÒÓÔÕÖṪØÙÚÛÜÝŶßàáâãäåæçèéêëìíîïŵñòóôõöṫøùúûüýŷÿ"
        },
        "cp28604": "iso885914",
        "iso885915": {
          "type": "_sbcs",
          "chars": " ¡¢£€¥Š§š©ª«¬­®¯°±²³Žµ¶·ž¹º»ŒœŸ¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
        },
        "cp28605": "iso885915",
        "iso885916": {
          "type": "_sbcs",
          "chars": " ĄąŁ€„Š§š©Ș«Ź­źŻ°±ČłŽ”¶·žčș»ŒœŸżÀÁÂĂÄĆÆÇÈÉÊËÌÍÎÏĐŃÒÓÔŐÖŚŰÙÚÛÜĘȚßàáâăäćæçèéêëìíîïđńòóôőöśűùúûüęțÿ"
        },
        "cp28606": "iso885916",
        "cp437": {
          "type": "_sbcs",
          "chars": "ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
        },
        "ibm437": "cp437",
        "csibm437": "cp437",
        "cp737": {
          "type": "_sbcs",
          "chars": "ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩαβγδεζηθικλμνξοπρσςτυφχψ░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀ωάέήϊίόύϋώΆΈΉΊΌΎΏ±≥≤ΪΫ÷≈°∙·√ⁿ²■ "
        },
        "ibm737": "cp737",
        "csibm737": "cp737",
        "cp775": {
          "type": "_sbcs",
          "chars": "ĆüéāäģåćłēŖŗīŹÄÅÉæÆōöĢ¢ŚśÖÜø£Ø×¤ĀĪóŻżź”¦©®¬½¼Ł«»░▒▓│┤ĄČĘĖ╣║╗╝ĮŠ┐└┴┬├─┼ŲŪ╚╔╩╦╠═╬Žąčęėįšųūž┘┌█▄▌▐▀ÓßŌŃõÕµńĶķĻļņĒŅ’­±“¾¶§÷„°∙·¹³²■ "
        },
        "ibm775": "cp775",
        "csibm775": "cp775",
        "cp850": {
          "type": "_sbcs",
          "chars": "ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø×ƒáíóúñÑªº¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ðÐÊËÈıÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµþÞÚÛÙýÝ¯´­±‗¾¶§÷¸°¨·¹³²■ "
        },
        "ibm850": "cp850",
        "csibm850": "cp850",
        "cp852": {
          "type": "_sbcs",
          "chars": "ÇüéâäůćçłëŐőîŹÄĆÉĹĺôöĽľŚśÖÜŤťŁ×čáíóúĄąŽžĘę¬źČş«»░▒▓│┤ÁÂĚŞ╣║╗╝Żż┐└┴┬├─┼Ăă╚╔╩╦╠═╬¤đĐĎËďŇÍÎě┘┌█▄ŢŮ▀ÓßÔŃńňŠšŔÚŕŰýÝţ´­˝˛ˇ˘§÷¸°¨˙űŘř■ "
        },
        "ibm852": "cp852",
        "csibm852": "cp852",
        "cp855": {
          "type": "_sbcs",
          "chars": "ђЂѓЃёЁєЄѕЅіІїЇјЈљЉњЊћЋќЌўЎџЏюЮъЪаАбБцЦдДеЕфФгГ«»░▒▓│┤хХиИ╣║╗╝йЙ┐└┴┬├─┼кК╚╔╩╦╠═╬¤лЛмМнНоОп┘┌█▄Пя▀ЯрРсСтТуУжЖвВьЬ№­ыЫзЗшШэЭщЩчЧ§■ "
        },
        "ibm855": "cp855",
        "csibm855": "cp855",
        "cp856": {
          "type": "_sbcs",
          "chars": "אבגדהוזחטיךכלםמןנסעףפץצקרשת�£�×����������®¬½¼�«»░▒▓│┤���©╣║╗╝¢¥┐└┴┬├─┼��╚╔╩╦╠═╬¤���������┘┌█▄¦�▀������µ�������¯´­±‗¾¶§÷¸°¨·¹³²■ "
        },
        "ibm856": "cp856",
        "csibm856": "cp856",
        "cp857": {
          "type": "_sbcs",
          "chars": "ÇüéâäàåçêëèïîıÄÅÉæÆôöòûùİÖÜø£ØŞşáíóúñÑĞğ¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ºªÊËÈ�ÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµ�×ÚÛÙìÿ¯´­±�¾¶§÷¸°¨·¹³²■ "
        },
        "ibm857": "cp857",
        "csibm857": "cp857",
        "cp858": {
          "type": "_sbcs",
          "chars": "ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø×ƒáíóúñÑªº¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ðÐÊËÈ€ÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµþÞÚÛÙýÝ¯´­±‗¾¶§÷¸°¨·¹³²■ "
        },
        "ibm858": "cp858",
        "csibm858": "cp858",
        "cp860": {
          "type": "_sbcs",
          "chars": "ÇüéâãàÁçêÊèÍÔìÃÂÉÀÈôõòÚùÌÕÜ¢£Ù₧ÓáíóúñÑªº¿Ò¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
        },
        "ibm860": "cp860",
        "csibm860": "cp860",
        "cp861": {
          "type": "_sbcs",
          "chars": "ÇüéâäàåçêëèÐðÞÄÅÉæÆôöþûÝýÖÜø£Ø₧ƒáíóúÁÍÓÚ¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
        },
        "ibm861": "cp861",
        "csibm861": "cp861",
        "cp862": {
          "type": "_sbcs",
          "chars": "אבגדהוזחטיךכלםמןנסעףפץצקרשת¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
        },
        "ibm862": "cp862",
        "csibm862": "cp862",
        "cp863": {
          "type": "_sbcs",
          "chars": "ÇüéâÂà¶çêëèïî‗À§ÉÈÊôËÏûù¤ÔÜ¢£ÙÛƒ¦´óú¨¸³¯Î⌐¬½¼¾«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
        },
        "ibm863": "cp863",
        "csibm863": "cp863",
        "cp864": {
          "type": "_sbcs",
          "chars": "\0\x01\x02\x03\x04\x05\x06\x07\b\t\n\x0B\f\r\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F !\"#$\u066A&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\xB0\xB7\u2219\u221A\u2592\u2500\u2502\u253C\u2524\u252C\u251C\u2534\u2510\u250C\u2514\u2518\u03B2\u221E\u03C6\xB1\xBD\xBC\u2248\xAB\xBB\uFEF7\uFEF8\uFFFD\uFFFD\uFEFB\uFEFC\uFFFD\xA0\xAD\uFE82\xA3\xA4\uFE84\uFFFD\uFFFD\uFE8E\uFE8F\uFE95\uFE99\u060C\uFE9D\uFEA1\uFEA5\u0660\u0661\u0662\u0663\u0664\u0665\u0666\u0667\u0668\u0669\uFED1\u061B\uFEB1\uFEB5\uFEB9\u061F\xA2\uFE80\uFE81\uFE83\uFE85\uFECA\uFE8B\uFE8D\uFE91\uFE93\uFE97\uFE9B\uFE9F\uFEA3\uFEA7\uFEA9\uFEAB\uFEAD\uFEAF\uFEB3\uFEB7\uFEBB\uFEBF\uFEC1\uFEC5\uFECB\uFECF\xA6\xAC\xF7\xD7\uFEC9\u0640\uFED3\uFED7\uFEDB\uFEDF\uFEE3\uFEE7\uFEEB\uFEED\uFEEF\uFEF3\uFEBD\uFECC\uFECE\uFECD\uFEE1\uFE7D\u0651\uFEE5\uFEE9\uFEEC\uFEF0\uFEF2\uFED0\uFED5\uFEF5\uFEF6\uFEDD\uFED9\uFEF1\u25A0\uFFFD"
        },
        "ibm864": "cp864",
        "csibm864": "cp864",
        "cp865": {
          "type": "_sbcs",
          "chars": "ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø₧ƒáíóúñÑªº¿⌐¬½¼¡«¤░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
        },
        "ibm865": "cp865",
        "csibm865": "cp865",
        "cp866": {
          "type": "_sbcs",
          "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёЄєЇїЎў°∙·√№¤■ "
        },
        "ibm866": "cp866",
        "csibm866": "cp866",
        "cp869": {
          "type": "_sbcs",
          "chars": "������Ά�·¬¦‘’Έ―ΉΊΪΌ��ΎΫ©Ώ²³ά£έήίϊΐόύΑΒΓΔΕΖΗ½ΘΙ«»░▒▓│┤ΚΛΜΝ╣║╗╝ΞΟ┐└┴┬├─┼ΠΡ╚╔╩╦╠═╬ΣΤΥΦΧΨΩαβγ┘┌█▄δε▀ζηθικλμνξοπρσςτ΄­±υφχ§ψ΅°¨ωϋΰώ■ "
        },
        "ibm869": "cp869",
        "csibm869": "cp869",
        "cp922": {
          "type": "_sbcs",
          "chars": " ¡¢£¤¥¦§¨©ª«¬­®‾°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏŠÑÒÓÔÕÖ×ØÙÚÛÜÝŽßàáâãäåæçèéêëìíîïšñòóôõö÷øùúûüýžÿ"
        },
        "ibm922": "cp922",
        "csibm922": "cp922",
        "cp1046": {
          "type": "_sbcs",
          "chars": "ﺈ×÷ﹱ■│─┐┌└┘ﹹﹻﹽﹿﹷﺊﻰﻳﻲﻎﻏﻐﻶﻸﻺﻼ ¤ﺋﺑﺗﺛﺟﺣ،­ﺧﺳ٠١٢٣٤٥٦٧٨٩ﺷ؛ﺻﺿﻊ؟ﻋءآأؤإئابةتثجحخدذرزسشصضطﻇعغﻌﺂﺄﺎﻓـفقكلمنهوىيًٌٍَُِّْﻗﻛﻟﻵﻷﻹﻻﻣﻧﻬﻩ�"
        },
        "ibm1046": "cp1046",
        "csibm1046": "cp1046",
        "cp1124": {
          "type": "_sbcs",
          "chars": " ЁЂҐЄЅІЇЈЉЊЋЌ­ЎЏАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя№ёђґєѕіїјљњћќ§ўџ"
        },
        "ibm1124": "cp1124",
        "csibm1124": "cp1124",
        "cp1125": {
          "type": "_sbcs",
          "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёҐґЄєІіЇї·√№¤■ "
        },
        "ibm1125": "cp1125",
        "csibm1125": "cp1125",
        "cp1129": {
          "type": "_sbcs",
          "chars": " ¡¢£¤¥¦§œ©ª«¬­®¯°±²³Ÿµ¶·Œ¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ"
        },
        "ibm1129": "cp1129",
        "csibm1129": "cp1129",
        "cp1133": {
          "type": "_sbcs",
          "chars": " ກຂຄງຈສຊຍດຕຖທນບປຜຝພຟມຢຣລວຫອຮ���ຯະາຳິີຶືຸູຼັົຽ���ເແໂໃໄ່້໊໋໌ໍໆ�ໜໝ₭����������������໐໑໒໓໔໕໖໗໘໙��¢¬¦�"
        },
        "ibm1133": "cp1133",
        "csibm1133": "cp1133",
        "cp1161": {
          "type": "_sbcs",
          "chars": "��������������������������������่กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู้๊๋€฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛¢¬¦ "
        },
        "ibm1161": "cp1161",
        "csibm1161": "cp1161",
        "cp1162": {
          "type": "_sbcs",
          "chars": "€…‘’“”•–— กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����"
        },
        "ibm1162": "cp1162",
        "csibm1162": "cp1162",
        "cp1163": {
          "type": "_sbcs",
          "chars": " ¡¢£€¥¦§œ©ª«¬­®¯°±²³Ÿµ¶·Œ¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ"
        },
        "ibm1163": "cp1163",
        "csibm1163": "cp1163",
        "maccroatian": {
          "type": "_sbcs",
          "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®Š™´¨≠ŽØ∞±≤≥∆µ∂∑∏š∫ªºΩžø¿¡¬√ƒ≈Ć«Č… ÀÃÕŒœĐ—“”‘’÷◊�©⁄¤‹›Æ»–·‚„‰ÂćÁčÈÍÎÏÌÓÔđÒÚÛÙıˆ˜¯πË˚¸Êæˇ"
        },
        "maccyrillic": {
          "type": "_sbcs",
          "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°¢£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµ∂ЈЄєЇїЉљЊњјЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю¤"
        },
        "macgreek": {
          "type": "_sbcs",
          "chars": "Ä¹²É³ÖÜ΅àâä΄¨çéèêë£™îï•½‰ôö¦­ùûü†ΓΔΘΛΞΠß®©ΣΪ§≠°·Α±≤≥¥ΒΕΖΗΙΚΜΦΫΨΩάΝ¬ΟΡ≈Τ«»… ΥΧΆΈœ–―“”‘’÷ΉΊΌΎέήίόΏύαβψδεφγηιξκλμνοπώρστθωςχυζϊϋΐΰ�"
        },
        "maciceland": {
          "type": "_sbcs",
          "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûüÝ°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤ÐðÞþý·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"
        },
        "macroman": {
          "type": "_sbcs",
          "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"
        },
        "macromania": {
          "type": "_sbcs",
          "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ĂŞ∞±≤≥¥µ∂∑∏π∫ªºΩăş¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›Ţţ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"
        },
        "macthai": {
          "type": "_sbcs",
          "chars": "«»…“”�•‘’� กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู﻿​–—฿เแโใไๅๆ็่้๊๋์ํ™๏๐๑๒๓๔๕๖๗๘๙®©����"
        },
        "macturkish": {
          "type": "_sbcs",
          "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸĞğİıŞş‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙ�ˆ˜¯˘˙˚¸˝˛ˇ"
        },
        "macukraine": {
          "type": "_sbcs",
          "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°Ґ£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµґЈЄєЇїЉљЊњјЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю¤"
        },
        "koi8r": {
          "type": "_sbcs",
          "chars": "─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ё╓╔╕╖╗╘╙╚╛╜╝╞╟╠╡Ё╢╣╤╥╦╧╨╩╪╫╬©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ"
        },
        "koi8u": {
          "type": "_sbcs",
          "chars": "─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ёє╔ії╗╘╙╚╛ґ╝╞╟╠╡ЁЄ╣ІЇ╦╧╨╩╪Ґ╬©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ"
        },
        "koi8ru": {
          "type": "_sbcs",
          "chars": "─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ёє╔ії╗╘╙╚╛ґў╞╟╠╡ЁЄ╣ІЇ╦╧╨╩╪ҐЎ©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ"
        },
        "koi8t": {
          "type": "_sbcs",
          "chars": "қғ‚Ғ„…†‡�‰ҳ‹ҲҷҶ�Қ‘’“”•–—�™�›�����ӯӮё¤ӣ¦§���«¬­®�°±²Ё�Ӣ¶·�№�»���©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ"
        },
        "armscii8": {
          "type": "_sbcs",
          "chars": " �և։)(»«—.՝,-֊…՜՛՞ԱաԲբԳգԴդԵեԶզԷէԸըԹթԺժԻիԼլԽխԾծԿկՀհՁձՂղՃճՄմՅյՆնՇշՈոՉչՊպՋջՌռՍսՎվՏտՐրՑցՒւՓփՔքՕօՖֆ՚�"
        },
        "rk1048": {
          "type": "_sbcs",
          "chars": "ЂЃ‚ѓ„…†‡€‰Љ‹ЊҚҺЏђ‘’“”•–—�™љ›њқһџ ҰұӘ¤Ө¦§Ё©Ғ«¬­®Ү°±Ііөµ¶·ё№ғ»әҢңүАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя"
        },
        "tcvn": {
          "type": "_sbcs",
          "chars": "\0\xDA\u1EE4\x03\u1EEA\u1EEC\u1EEE\x07\b\t\n\x0B\f\r\x0E\x0F\x10\u1EE8\u1EF0\u1EF2\u1EF6\u1EF8\xDD\u1EF4\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\xC0\u1EA2\xC3\xC1\u1EA0\u1EB6\u1EAC\xC8\u1EBA\u1EBC\xC9\u1EB8\u1EC6\xCC\u1EC8\u0128\xCD\u1ECA\xD2\u1ECE\xD5\xD3\u1ECC\u1ED8\u1EDC\u1EDE\u1EE0\u1EDA\u1EE2\xD9\u1EE6\u0168\xA0\u0102\xC2\xCA\xD4\u01A0\u01AF\u0110\u0103\xE2\xEA\xF4\u01A1\u01B0\u0111\u1EB0\u0300\u0309\u0303\u0301\u0323\xE0\u1EA3\xE3\xE1\u1EA1\u1EB2\u1EB1\u1EB3\u1EB5\u1EAF\u1EB4\u1EAE\u1EA6\u1EA8\u1EAA\u1EA4\u1EC0\u1EB7\u1EA7\u1EA9\u1EAB\u1EA5\u1EAD\xE8\u1EC2\u1EBB\u1EBD\xE9\u1EB9\u1EC1\u1EC3\u1EC5\u1EBF\u1EC7\xEC\u1EC9\u1EC4\u1EBE\u1ED2\u0129\xED\u1ECB\xF2\u1ED4\u1ECF\xF5\xF3\u1ECD\u1ED3\u1ED5\u1ED7\u1ED1\u1ED9\u1EDD\u1EDF\u1EE1\u1EDB\u1EE3\xF9\u1ED6\u1EE7\u0169\xFA\u1EE5\u1EEB\u1EED\u1EEF\u1EE9\u1EF1\u1EF3\u1EF7\u1EF9\xFD\u1EF5\u1ED0"
        },
        "georgianacademy": {
          "type": "_sbcs",
          "chars": "‚ƒ„…†‡ˆ‰Š‹Œ‘’“”•–—˜™š›œŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿აბგდევზთიკლმნოპჟრსტუფქღყშჩცძწჭხჯჰჱჲჳჴჵჶçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
        },
        "georgianps": {
          "type": "_sbcs",
          "chars": "‚ƒ„…†‡ˆ‰Š‹Œ‘’“”•–—˜™š›œŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿აბგდევზჱთიკლმნჲოპჟრსტჳუფქღყშჩცძწჭხჴჯჰჵæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
        },
        "pt154": {
          "type": "_sbcs",
          "chars": "ҖҒӮғ„…ҶҮҲүҠӢҢҚҺҸҗ‘’“”•–—ҳҷҡӣңқһҹ ЎўЈӨҘҰ§Ё©Ә«¬ӯ®Ҝ°ұІіҙө¶·ё№ә»јҪҫҝАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя"
        },
        "viscii": {
          "type": "_sbcs",
          "chars": "\0\x01\u1EB2\x03\x04\u1EB4\u1EAA\x07\b\t\n\x0B\f\r\x0E\x0F\x10\x11\x12\x13\u1EF6\x15\x16\x17\x18\u1EF8\x1A\x1B\x1C\x1D\u1EF4\x1F !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\u1EA0\u1EAE\u1EB0\u1EB6\u1EA4\u1EA6\u1EA8\u1EAC\u1EBC\u1EB8\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EE2\u1EDA\u1EDC\u1EDE\u1ECA\u1ECE\u1ECC\u1EC8\u1EE6\u0168\u1EE4\u1EF2\xD5\u1EAF\u1EB1\u1EB7\u1EA5\u1EA7\u1EA9\u1EAD\u1EBD\u1EB9\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1ED1\u1ED3\u1ED5\u1ED7\u1EE0\u01A0\u1ED9\u1EDD\u1EDF\u1ECB\u1EF0\u1EE8\u1EEA\u1EEC\u01A1\u1EDB\u01AF\xC0\xC1\xC2\xC3\u1EA2\u0102\u1EB3\u1EB5\xC8\xC9\xCA\u1EBA\xCC\xCD\u0128\u1EF3\u0110\u1EE9\xD2\xD3\xD4\u1EA1\u1EF7\u1EEB\u1EED\xD9\xDA\u1EF9\u1EF5\xDD\u1EE1\u01B0\xE0\xE1\xE2\xE3\u1EA3\u0103\u1EEF\u1EAB\xE8\xE9\xEA\u1EBB\xEC\xED\u0129\u1EC9\u0111\u1EF1\xF2\xF3\xF4\xF5\u1ECF\u1ECD\u1EE5\xF9\xFA\u0169\u1EE7\xFD\u1EE3\u1EEE"
        },
        "iso646cn": {
          "type": "_sbcs",
          "chars": "\0\x01\x02\x03\x04\x05\x06\x07\b\t\n\x0B\f\r\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F !\"#\xA5%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}\u203E\x7F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD"
        },
        "iso646jp": {
          "type": "_sbcs",
          "chars": "\0\x01\x02\x03\x04\x05\x06\x07\b\t\n\x0B\f\r\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\xA5]^_`abcdefghijklmnopqrstuvwxyz{|}\u203E\x7F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD"
        },
        "hproman8": {
          "type": "_sbcs",
          "chars": " ÀÂÈÊËÎÏ´ˋˆ¨˜ÙÛ₤¯Ýý°ÇçÑñ¡¿¤£¥§ƒ¢âêôûáéóúàèòùäëöüÅîØÆåíøæÄìÖÜÉïßÔÁÃãÐðÍÌÓÒÕõŠšÚŸÿÞþ·µ¶¾—¼½ªº«■»±�"
        },
        "macintosh": {
          "type": "_sbcs",
          "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"
        },
        "ascii": {
          "type": "_sbcs",
          "chars": "��������������������������������������������������������������������������������������������������������������������������������"
        },
        "tis620": {
          "type": "_sbcs",
          "chars": "���������������������������������กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����"
        }
      };
      /***/
    },
    /* 398 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var Buffer = __webpack_require__(39).Buffer; // Multibyte codec. In this scheme, a character is represented by 1 or more bytes.
      // Our codec supports UTF-16 surrogates, extensions for GB18030 and unicode sequences.
      // To save memory and loading time, we read table files only when requested.


      exports._dbcs = DBCSCodec;
      var UNASSIGNED = -1,
          GB18030_CODE = -2,
          SEQ_START = -10,
          NODE_START = -1000,
          UNASSIGNED_NODE = new Array(0x100),
          DEF_CHAR = -1;

      for (var i = 0; i < 0x100; i++) {
        UNASSIGNED_NODE[i] = UNASSIGNED;
      } // Class DBCSCodec reads and initializes mapping tables.


      function DBCSCodec(codecOptions, iconv) {
        this.encodingName = codecOptions.encodingName;
        if (!codecOptions) throw new Error("DBCS codec is called without the data.");
        if (!codecOptions.table) throw new Error("Encoding '" + this.encodingName + "' has no data."); // Load tables.

        var mappingTable = codecOptions.table(); // Decode tables: MBCS -> Unicode.
        // decodeTables is a trie, encoded as an array of arrays of integers. Internal arrays are trie nodes and all have len = 256.
        // Trie root is decodeTables[0].
        // Values: >=  0 -> unicode character code. can be > 0xFFFF
        //         == UNASSIGNED -> unknown/unassigned sequence.
        //         == GB18030_CODE -> this is the end of a GB18030 4-byte sequence.
        //         <= NODE_START -> index of the next node in our trie to process next byte.
        //         <= SEQ_START  -> index of the start of a character code sequence, in decodeTableSeq.

        this.decodeTables = [];
        this.decodeTables[0] = UNASSIGNED_NODE.slice(0); // Create root node.
        // Sometimes a MBCS char corresponds to a sequence of unicode chars. We store them as arrays of integers here. 

        this.decodeTableSeq = []; // Actual mapping tables consist of chunks. Use them to fill up decode tables.

        for (var i = 0; i < mappingTable.length; i++) {
          this._addDecodeChunk(mappingTable[i]);
        } // Load & create GB18030 tables when needed.


        if (typeof codecOptions.gb18030 === 'function') {
          this.gb18030 = codecOptions.gb18030(); // Load GB18030 ranges.
          // Add GB18030 common decode nodes.

          var commonThirdByteNodeIdx = this.decodeTables.length;
          this.decodeTables.push(UNASSIGNED_NODE.slice(0));
          var commonFourthByteNodeIdx = this.decodeTables.length;
          this.decodeTables.push(UNASSIGNED_NODE.slice(0)); // Fill out the tree

          var firstByteNode = this.decodeTables[0];

          for (var i = 0x81; i <= 0xFE; i++) {
            var secondByteNode = this.decodeTables[NODE_START - firstByteNode[i]];

            for (var j = 0x30; j <= 0x39; j++) {
              if (secondByteNode[j] === UNASSIGNED) {
                secondByteNode[j] = NODE_START - commonThirdByteNodeIdx;
              } else if (secondByteNode[j] > NODE_START) {
                throw new Error("gb18030 decode tables conflict at byte 2");
              }

              var thirdByteNode = this.decodeTables[NODE_START - secondByteNode[j]];

              for (var k = 0x81; k <= 0xFE; k++) {
                if (thirdByteNode[k] === UNASSIGNED) {
                  thirdByteNode[k] = NODE_START - commonFourthByteNodeIdx;
                } else if (thirdByteNode[k] === NODE_START - commonFourthByteNodeIdx) {
                  continue;
                } else if (thirdByteNode[k] > NODE_START) {
                  throw new Error("gb18030 decode tables conflict at byte 3");
                }

                var fourthByteNode = this.decodeTables[NODE_START - thirdByteNode[k]];

                for (var l = 0x30; l <= 0x39; l++) {
                  if (fourthByteNode[l] === UNASSIGNED) fourthByteNode[l] = GB18030_CODE;
                }
              }
            }
          }
        }

        this.defaultCharUnicode = iconv.defaultCharUnicode; // Encode tables: Unicode -> DBCS.
        // `encodeTable` is array mapping from unicode char to encoded char. All its values are integers for performance.
        // Because it can be sparse, it is represented as array of buckets by 256 chars each. Bucket can be null.
        // Values: >=  0 -> it is a normal char. Write the value (if <=256 then 1 byte, if <=65536 then 2 bytes, etc.).
        //         == UNASSIGNED -> no conversion found. Output a default char.
        //         <= SEQ_START  -> it's an index in encodeTableSeq, see below. The character starts a sequence.

        this.encodeTable = []; // `encodeTableSeq` is used when a sequence of unicode characters is encoded as a single code. We use a tree of
        // objects where keys correspond to characters in sequence and leafs are the encoded dbcs values. A special DEF_CHAR key
        // means end of sequence (needed when one sequence is a strict subsequence of another).
        // Objects are kept separately from encodeTable to increase performance.

        this.encodeTableSeq = []; // Some chars can be decoded, but need not be encoded.

        var skipEncodeChars = {};
        if (codecOptions.encodeSkipVals) for (var i = 0; i < codecOptions.encodeSkipVals.length; i++) {
          var val = codecOptions.encodeSkipVals[i];
          if (typeof val === 'number') skipEncodeChars[val] = true;else for (var j = val.from; j <= val.to; j++) {
            skipEncodeChars[j] = true;
          }
        } // Use decode trie to recursively fill out encode tables.

        this._fillEncodeTable(0, 0, skipEncodeChars); // Add more encoding pairs when needed.


        if (codecOptions.encodeAdd) {
          for (var uChar in codecOptions.encodeAdd) {
            if (Object.prototype.hasOwnProperty.call(codecOptions.encodeAdd, uChar)) this._setEncodeChar(uChar.charCodeAt(0), codecOptions.encodeAdd[uChar]);
          }
        }

        this.defCharSB = this.encodeTable[0][iconv.defaultCharSingleByte.charCodeAt(0)];
        if (this.defCharSB === UNASSIGNED) this.defCharSB = this.encodeTable[0]['?'];
        if (this.defCharSB === UNASSIGNED) this.defCharSB = "?".charCodeAt(0);
      }

      DBCSCodec.prototype.encoder = DBCSEncoder;
      DBCSCodec.prototype.decoder = DBCSDecoder; // Decoder helpers

      DBCSCodec.prototype._getDecodeTrieNode = function (addr) {
        var bytes = [];

        for (; addr > 0; addr >>>= 8) {
          bytes.push(addr & 0xFF);
        }

        if (bytes.length == 0) bytes.push(0);
        var node = this.decodeTables[0];

        for (var i = bytes.length - 1; i > 0; i--) {
          // Traverse nodes deeper into the trie.
          var val = node[bytes[i]];

          if (val == UNASSIGNED) {
            // Create new node.
            node[bytes[i]] = NODE_START - this.decodeTables.length;
            this.decodeTables.push(node = UNASSIGNED_NODE.slice(0));
          } else if (val <= NODE_START) {
            // Existing node.
            node = this.decodeTables[NODE_START - val];
          } else throw new Error("Overwrite byte in " + this.encodingName + ", addr: " + addr.toString(16));
        }

        return node;
      };

      DBCSCodec.prototype._addDecodeChunk = function (chunk) {
        // First element of chunk is the hex mbcs code where we start.
        var curAddr = parseInt(chunk[0], 16); // Choose the decoding node where we'll write our chars.

        var writeTable = this._getDecodeTrieNode(curAddr);

        curAddr = curAddr & 0xFF; // Write all other elements of the chunk to the table.

        for (var k = 1; k < chunk.length; k++) {
          var part = chunk[k];

          if (typeof part === "string") {
            // String, write as-is.
            for (var l = 0; l < part.length;) {
              var code = part.charCodeAt(l++);

              if (0xD800 <= code && code < 0xDC00) {
                // Decode surrogate
                var codeTrail = part.charCodeAt(l++);
                if (0xDC00 <= codeTrail && codeTrail < 0xE000) writeTable[curAddr++] = 0x10000 + (code - 0xD800) * 0x400 + (codeTrail - 0xDC00);else throw new Error("Incorrect surrogate pair in " + this.encodingName + " at chunk " + chunk[0]);
              } else if (0x0FF0 < code && code <= 0x0FFF) {
                // Character sequence (our own encoding used)
                var len = 0xFFF - code + 2;
                var seq = [];

                for (var m = 0; m < len; m++) {
                  seq.push(part.charCodeAt(l++));
                } // Simple variation: don't support surrogates or subsequences in seq.


                writeTable[curAddr++] = SEQ_START - this.decodeTableSeq.length;
                this.decodeTableSeq.push(seq);
              } else writeTable[curAddr++] = code; // Basic char

            }
          } else if (typeof part === "number") {
            // Integer, meaning increasing sequence starting with prev character.
            var charCode = writeTable[curAddr - 1] + 1;

            for (var l = 0; l < part; l++) {
              writeTable[curAddr++] = charCode++;
            }
          } else throw new Error("Incorrect type '" + _typeof4(part) + "' given in " + this.encodingName + " at chunk " + chunk[0]);
        }

        if (curAddr > 0xFF) throw new Error("Incorrect chunk in " + this.encodingName + " at addr " + chunk[0] + ": too long" + curAddr);
      }; // Encoder helpers


      DBCSCodec.prototype._getEncodeBucket = function (uCode) {
        var high = uCode >> 8; // This could be > 0xFF because of astral characters.

        if (this.encodeTable[high] === undefined) this.encodeTable[high] = UNASSIGNED_NODE.slice(0); // Create bucket on demand.

        return this.encodeTable[high];
      };

      DBCSCodec.prototype._setEncodeChar = function (uCode, dbcsCode) {
        var bucket = this._getEncodeBucket(uCode);

        var low = uCode & 0xFF;
        if (bucket[low] <= SEQ_START) this.encodeTableSeq[SEQ_START - bucket[low]][DEF_CHAR] = dbcsCode; // There's already a sequence, set a single-char subsequence of it.
        else if (bucket[low] == UNASSIGNED) bucket[low] = dbcsCode;
      };

      DBCSCodec.prototype._setEncodeSequence = function (seq, dbcsCode) {
        // Get the root of character tree according to first character of the sequence.
        var uCode = seq[0];

        var bucket = this._getEncodeBucket(uCode);

        var low = uCode & 0xFF;
        var node;

        if (bucket[low] <= SEQ_START) {
          // There's already a sequence with  - use it.
          node = this.encodeTableSeq[SEQ_START - bucket[low]];
        } else {
          // There was no sequence object - allocate a new one.
          node = {};
          if (bucket[low] !== UNASSIGNED) node[DEF_CHAR] = bucket[low]; // If a char was set before - make it a single-char subsequence.

          bucket[low] = SEQ_START - this.encodeTableSeq.length;
          this.encodeTableSeq.push(node);
        } // Traverse the character tree, allocating new nodes as needed.


        for (var j = 1; j < seq.length - 1; j++) {
          var oldVal = node[uCode];
          if (_typeof4(oldVal) === 'object') node = oldVal;else {
            node = node[uCode] = {};
            if (oldVal !== undefined) node[DEF_CHAR] = oldVal;
          }
        } // Set the leaf to given dbcsCode.


        uCode = seq[seq.length - 1];
        node[uCode] = dbcsCode;
      };

      DBCSCodec.prototype._fillEncodeTable = function (nodeIdx, prefix, skipEncodeChars) {
        var node = this.decodeTables[nodeIdx];
        var hasValues = false;
        var subNodeEmpty = {};

        for (var i = 0; i < 0x100; i++) {
          var uCode = node[i];
          var mbCode = prefix + i;
          if (skipEncodeChars[mbCode]) continue;

          if (uCode >= 0) {
            this._setEncodeChar(uCode, mbCode);

            hasValues = true;
          } else if (uCode <= NODE_START) {
            var subNodeIdx = NODE_START - uCode;

            if (!subNodeEmpty[subNodeIdx]) {
              // Skip empty subtrees (they are too large in gb18030).
              var newPrefix = mbCode << 8 >>> 0; // NOTE: '>>> 0' keeps 32-bit num positive.

              if (this._fillEncodeTable(subNodeIdx, newPrefix, skipEncodeChars)) hasValues = true;else subNodeEmpty[subNodeIdx] = true;
            }
          } else if (uCode <= SEQ_START) {
            this._setEncodeSequence(this.decodeTableSeq[SEQ_START - uCode], mbCode);

            hasValues = true;
          }
        }

        return hasValues;
      }; // == Encoder ==================================================================


      function DBCSEncoder(options, codec) {
        // Encoder state
        this.leadSurrogate = -1;
        this.seqObj = undefined; // Static data

        this.encodeTable = codec.encodeTable;
        this.encodeTableSeq = codec.encodeTableSeq;
        this.defaultCharSingleByte = codec.defCharSB;
        this.gb18030 = codec.gb18030;
      }

      DBCSEncoder.prototype.write = function (str) {
        var newBuf = Buffer.alloc(str.length * (this.gb18030 ? 4 : 3)),
            leadSurrogate = this.leadSurrogate,
            seqObj = this.seqObj,
            nextChar = -1,
            i = 0,
            j = 0;

        while (true) {
          // 0. Get next character.
          if (nextChar === -1) {
            if (i == str.length) break;
            var uCode = str.charCodeAt(i++);
          } else {
            var uCode = nextChar;
            nextChar = -1;
          } // 1. Handle surrogates.


          if (0xD800 <= uCode && uCode < 0xE000) {
            // Char is one of surrogates.
            if (uCode < 0xDC00) {
              // We've got lead surrogate.
              if (leadSurrogate === -1) {
                leadSurrogate = uCode;
                continue;
              } else {
                leadSurrogate = uCode; // Double lead surrogate found.

                uCode = UNASSIGNED;
              }
            } else {
              // We've got trail surrogate.
              if (leadSurrogate !== -1) {
                uCode = 0x10000 + (leadSurrogate - 0xD800) * 0x400 + (uCode - 0xDC00);
                leadSurrogate = -1;
              } else {
                // Incomplete surrogate pair - only trail surrogate found.
                uCode = UNASSIGNED;
              }
            }
          } else if (leadSurrogate !== -1) {
            // Incomplete surrogate pair - only lead surrogate found.
            nextChar = uCode;
            uCode = UNASSIGNED; // Write an error, then current char.

            leadSurrogate = -1;
          } // 2. Convert uCode character.


          var dbcsCode = UNASSIGNED;

          if (seqObj !== undefined && uCode != UNASSIGNED) {
            // We are in the middle of the sequence
            var resCode = seqObj[uCode];

            if (_typeof4(resCode) === 'object') {
              // Sequence continues.
              seqObj = resCode;
              continue;
            } else if (typeof resCode == 'number') {
              // Sequence finished. Write it.
              dbcsCode = resCode;
            } else if (resCode == undefined) {
              // Current character is not part of the sequence.
              // Try default character for this sequence
              resCode = seqObj[DEF_CHAR];

              if (resCode !== undefined) {
                dbcsCode = resCode; // Found. Write it.

                nextChar = uCode; // Current character will be written too in the next iteration.
              } else {// TODO: What if we have no default? (resCode == undefined)
                  // Then, we should write first char of the sequence as-is and try the rest recursively.
                  // Didn't do it for now because no encoding has this situation yet.
                  // Currently, just skip the sequence and write current char.
                }
            }

            seqObj = undefined;
          } else if (uCode >= 0) {
            // Regular character
            var subtable = this.encodeTable[uCode >> 8];
            if (subtable !== undefined) dbcsCode = subtable[uCode & 0xFF];

            if (dbcsCode <= SEQ_START) {
              // Sequence start
              seqObj = this.encodeTableSeq[SEQ_START - dbcsCode];
              continue;
            }

            if (dbcsCode == UNASSIGNED && this.gb18030) {
              // Use GB18030 algorithm to find character(s) to write.
              var idx = findIdx(this.gb18030.uChars, uCode);

              if (idx != -1) {
                var dbcsCode = this.gb18030.gbChars[idx] + (uCode - this.gb18030.uChars[idx]);
                newBuf[j++] = 0x81 + Math.floor(dbcsCode / 12600);
                dbcsCode = dbcsCode % 12600;
                newBuf[j++] = 0x30 + Math.floor(dbcsCode / 1260);
                dbcsCode = dbcsCode % 1260;
                newBuf[j++] = 0x81 + Math.floor(dbcsCode / 10);
                dbcsCode = dbcsCode % 10;
                newBuf[j++] = 0x30 + dbcsCode;
                continue;
              }
            }
          } // 3. Write dbcsCode character.


          if (dbcsCode === UNASSIGNED) dbcsCode = this.defaultCharSingleByte;

          if (dbcsCode < 0x100) {
            newBuf[j++] = dbcsCode;
          } else if (dbcsCode < 0x10000) {
            newBuf[j++] = dbcsCode >> 8; // high byte

            newBuf[j++] = dbcsCode & 0xFF; // low byte
          } else if (dbcsCode < 0x1000000) {
            newBuf[j++] = dbcsCode >> 16;
            newBuf[j++] = dbcsCode >> 8 & 0xFF;
            newBuf[j++] = dbcsCode & 0xFF;
          } else {
            newBuf[j++] = dbcsCode >>> 24;
            newBuf[j++] = dbcsCode >>> 16 & 0xFF;
            newBuf[j++] = dbcsCode >>> 8 & 0xFF;
            newBuf[j++] = dbcsCode & 0xFF;
          }
        }

        this.seqObj = seqObj;
        this.leadSurrogate = leadSurrogate;
        return newBuf.slice(0, j);
      };

      DBCSEncoder.prototype.end = function () {
        if (this.leadSurrogate === -1 && this.seqObj === undefined) return; // All clean. Most often case.

        var newBuf = Buffer.alloc(10),
            j = 0;

        if (this.seqObj) {
          // We're in the sequence.
          var dbcsCode = this.seqObj[DEF_CHAR];

          if (dbcsCode !== undefined) {
            // Write beginning of the sequence.
            if (dbcsCode < 0x100) {
              newBuf[j++] = dbcsCode;
            } else {
              newBuf[j++] = dbcsCode >> 8; // high byte

              newBuf[j++] = dbcsCode & 0xFF; // low byte
            }
          } else {// See todo above.
            }

          this.seqObj = undefined;
        }

        if (this.leadSurrogate !== -1) {
          // Incomplete surrogate pair - only lead surrogate found.
          newBuf[j++] = this.defaultCharSingleByte;
          this.leadSurrogate = -1;
        }

        return newBuf.slice(0, j);
      }; // Export for testing


      DBCSEncoder.prototype.findIdx = findIdx; // == Decoder ==================================================================

      function DBCSDecoder(options, codec) {
        // Decoder state
        this.nodeIdx = 0;
        this.prevBytes = []; // Static data

        this.decodeTables = codec.decodeTables;
        this.decodeTableSeq = codec.decodeTableSeq;
        this.defaultCharUnicode = codec.defaultCharUnicode;
        this.gb18030 = codec.gb18030;
      }

      DBCSDecoder.prototype.write = function (buf) {
        var newBuf = Buffer.alloc(buf.length * 2),
            nodeIdx = this.nodeIdx,
            prevBytes = this.prevBytes,
            prevOffset = this.prevBytes.length,
            seqStart = -this.prevBytes.length,
            // idx of the start of current parsed sequence.
        uCode;

        for (var i = 0, j = 0; i < buf.length; i++) {
          var curByte = i >= 0 ? buf[i] : prevBytes[i + prevOffset]; // Lookup in current trie node.

          var uCode = this.decodeTables[nodeIdx][curByte];

          if (uCode >= 0) {// Normal character, just use it.
          } else if (uCode === UNASSIGNED) {
            // Unknown char.
            // TODO: Callback with seq.
            uCode = this.defaultCharUnicode.charCodeAt(0);
            i = seqStart; // Skip one byte ('i' will be incremented by the for loop) and try to parse again.
          } else if (uCode === GB18030_CODE) {
            if (i >= 3) {
              var ptr = (buf[i - 3] - 0x81) * 12600 + (buf[i - 2] - 0x30) * 1260 + (buf[i - 1] - 0x81) * 10 + (curByte - 0x30);
            } else {
              var ptr = (prevBytes[i - 3 + prevOffset] - 0x81) * 12600 + ((i - 2 >= 0 ? buf[i - 2] : prevBytes[i - 2 + prevOffset]) - 0x30) * 1260 + ((i - 1 >= 0 ? buf[i - 1] : prevBytes[i - 1 + prevOffset]) - 0x81) * 10 + (curByte - 0x30);
            }

            var idx = findIdx(this.gb18030.gbChars, ptr);
            uCode = this.gb18030.uChars[idx] + ptr - this.gb18030.gbChars[idx];
          } else if (uCode <= NODE_START) {
            // Go to next trie node.
            nodeIdx = NODE_START - uCode;
            continue;
          } else if (uCode <= SEQ_START) {
            // Output a sequence of chars.
            var seq = this.decodeTableSeq[SEQ_START - uCode];

            for (var k = 0; k < seq.length - 1; k++) {
              uCode = seq[k];
              newBuf[j++] = uCode & 0xFF;
              newBuf[j++] = uCode >> 8;
            }

            uCode = seq[seq.length - 1];
          } else throw new Error("iconv-lite internal error: invalid decoding table value " + uCode + " at " + nodeIdx + "/" + curByte); // Write the character to buffer, handling higher planes using surrogate pair.


          if (uCode >= 0x10000) {
            uCode -= 0x10000;
            var uCodeLead = 0xD800 | uCode >> 10;
            newBuf[j++] = uCodeLead & 0xFF;
            newBuf[j++] = uCodeLead >> 8;
            uCode = 0xDC00 | uCode & 0x3FF;
          }

          newBuf[j++] = uCode & 0xFF;
          newBuf[j++] = uCode >> 8; // Reset trie node.

          nodeIdx = 0;
          seqStart = i + 1;
        }

        this.nodeIdx = nodeIdx;
        this.prevBytes = seqStart >= 0 ? Array.prototype.slice.call(buf, seqStart) : prevBytes.slice(seqStart + prevOffset).concat(Array.prototype.slice.call(buf));
        return newBuf.slice(0, j).toString('ucs2');
      };

      DBCSDecoder.prototype.end = function () {
        var ret = ''; // Try to parse all remaining chars.

        while (this.prevBytes.length > 0) {
          // Skip 1 character in the buffer.
          ret += this.defaultCharUnicode;
          var bytesArr = this.prevBytes.slice(1); // Parse remaining as usual.

          this.prevBytes = [];
          this.nodeIdx = 0;
          if (bytesArr.length > 0) ret += this.write(bytesArr);
        }

        this.prevBytes = [];
        this.nodeIdx = 0;
        return ret;
      }; // Binary search for GB18030. Returns largest i such that table[i] <= val.


      function findIdx(table, val) {
        if (table[0] > val) return -1;
        var l = 0,
            r = table.length;

        while (l < r - 1) {
          // always table[l] <= val < table[r]
          var mid = l + (r - l + 1 >> 1);
          if (table[mid] <= val) l = mid;else r = mid;
        }

        return l;
      }
      /***/

    },
    /* 399 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict"; // Description of supported double byte encodings and aliases.
      // Tables are not require()-d until they are needed to speed up library load.
      // require()-s are direct to support Browserify.

      module.exports = {
        // == Japanese/ShiftJIS ====================================================
        // All japanese encodings are based on JIS X set of standards:
        // JIS X 0201 - Single-byte encoding of ASCII + ¥ + Kana chars at 0xA1-0xDF.
        // JIS X 0208 - Main set of 6879 characters, placed in 94x94 plane, to be encoded by 2 bytes. 
        //              Has several variations in 1978, 1983, 1990 and 1997.
        // JIS X 0212 - Supplementary plane of 6067 chars in 94x94 plane. 1990. Effectively dead.
        // JIS X 0213 - Extension and modern replacement of 0208 and 0212. Total chars: 11233.
        //              2 planes, first is superset of 0208, second - revised 0212.
        //              Introduced in 2000, revised 2004. Some characters are in Unicode Plane 2 (0x2xxxx)
        // Byte encodings are:
        //  * Shift_JIS: Compatible with 0201, uses not defined chars in top half as lead bytes for double-byte
        //               encoding of 0208. Lead byte ranges: 0x81-0x9F, 0xE0-0xEF; Trail byte ranges: 0x40-0x7E, 0x80-0x9E, 0x9F-0xFC.
        //               Windows CP932 is a superset of Shift_JIS. Some companies added more chars, notably KDDI.
        //  * EUC-JP:    Up to 3 bytes per character. Used mostly on *nixes.
        //               0x00-0x7F       - lower part of 0201
        //               0x8E, 0xA1-0xDF - upper part of 0201
        //               (0xA1-0xFE)x2   - 0208 plane (94x94).
        //               0x8F, (0xA1-0xFE)x2 - 0212 plane (94x94).
        //  * JIS X 208: 7-bit, direct encoding of 0208. Byte ranges: 0x21-0x7E (94 values). Uncommon.
        //               Used as-is in ISO2022 family.
        //  * ISO2022-JP: Stateful encoding, with escape sequences to switch between ASCII, 
        //                0201-1976 Roman, 0208-1978, 0208-1983.
        //  * ISO2022-JP-1: Adds esc seq for 0212-1990.
        //  * ISO2022-JP-2: Adds esc seq for GB2313-1980, KSX1001-1992, ISO8859-1, ISO8859-7.
        //  * ISO2022-JP-3: Adds esc seq for 0201-1976 Kana set, 0213-2000 Planes 1, 2.
        //  * ISO2022-JP-2004: Adds 0213-2004 Plane 1.
        //
        // After JIS X 0213 appeared, Shift_JIS-2004, EUC-JISX0213 and ISO2022-JP-2004 followed, with just changing the planes.
        //
        // Overall, it seems that it's a mess :( http://www8.plala.or.jp/tkubota1/unicode-symbols-map2.html
        'shiftjis': {
          type: '_dbcs',
          table: function table() {
            return __webpack_require__(400);
          },
          encodeAdd: {
            "\xA5": 0x5C,
            "\u203E": 0x7E
          },
          encodeSkipVals: [{
            from: 0xED40,
            to: 0xF940
          }]
        },
        'csshiftjis': 'shiftjis',
        'mskanji': 'shiftjis',
        'sjis': 'shiftjis',
        'windows31j': 'shiftjis',
        'ms31j': 'shiftjis',
        'xsjis': 'shiftjis',
        'windows932': 'shiftjis',
        'ms932': 'shiftjis',
        '932': 'shiftjis',
        'cp932': 'shiftjis',
        'eucjp': {
          type: '_dbcs',
          table: function table() {
            return __webpack_require__(401);
          },
          encodeAdd: {
            "\xA5": 0x5C,
            "\u203E": 0x7E
          }
        },
        // TODO: KDDI extension to Shift_JIS
        // TODO: IBM CCSID 942 = CP932, but F0-F9 custom chars and other char changes.
        // TODO: IBM CCSID 943 = Shift_JIS = CP932 with original Shift_JIS lower 128 chars.
        // == Chinese/GBK ==========================================================
        // http://en.wikipedia.org/wiki/GBK
        // We mostly implement W3C recommendation: https://www.w3.org/TR/encoding/#gbk-encoder
        // Oldest GB2312 (1981, ~7600 chars) is a subset of CP936
        'gb2312': 'cp936',
        'gb231280': 'cp936',
        'gb23121980': 'cp936',
        'csgb2312': 'cp936',
        'csiso58gb231280': 'cp936',
        'euccn': 'cp936',
        // Microsoft's CP936 is a subset and approximation of GBK.
        'windows936': 'cp936',
        'ms936': 'cp936',
        '936': 'cp936',
        'cp936': {
          type: '_dbcs',
          table: function table() {
            return __webpack_require__(171);
          }
        },
        // GBK (~22000 chars) is an extension of CP936 that added user-mapped chars and some other.
        'gbk': {
          type: '_dbcs',
          table: function table() {
            return __webpack_require__(171).concat(__webpack_require__(250));
          }
        },
        'xgbk': 'gbk',
        'isoir58': 'gbk',
        // GB18030 is an algorithmic extension of GBK.
        // Main source: https://www.w3.org/TR/encoding/#gbk-encoder
        // http://icu-project.org/docs/papers/gb18030.html
        // http://source.icu-project.org/repos/icu/data/trunk/charset/data/xml/gb-18030-2000.xml
        // http://www.khngai.com/chinese/charmap/tblgbk.php?page=0
        'gb18030': {
          type: '_dbcs',
          table: function table() {
            return __webpack_require__(171).concat(__webpack_require__(250));
          },
          gb18030: function gb18030() {
            return __webpack_require__(402);
          },
          encodeSkipVals: [0x80],
          encodeAdd: {
            '€': 0xA2E3
          }
        },
        'chinese': 'gb18030',
        // == Korean ===============================================================
        // EUC-KR, KS_C_5601 and KS X 1001 are exactly the same.
        'windows949': 'cp949',
        'ms949': 'cp949',
        '949': 'cp949',
        'cp949': {
          type: '_dbcs',
          table: function table() {
            return __webpack_require__(403);
          }
        },
        'cseuckr': 'cp949',
        'csksc56011987': 'cp949',
        'euckr': 'cp949',
        'isoir149': 'cp949',
        'korean': 'cp949',
        'ksc56011987': 'cp949',
        'ksc56011989': 'cp949',
        'ksc5601': 'cp949',
        // == Big5/Taiwan/Hong Kong ================================================
        // There are lots of tables for Big5 and cp950. Please see the following links for history:
        // http://moztw.org/docs/big5/  http://www.haible.de/bruno/charsets/conversion-tables/Big5.html
        // Variations, in roughly number of defined chars:
        //  * Windows CP 950: Microsoft variant of Big5. Canonical: http://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/CP950.TXT
        //  * Windows CP 951: Microsoft variant of Big5-HKSCS-2001. Seems to be never public. http://me.abelcheung.org/articles/research/what-is-cp951/
        //  * Big5-2003 (Taiwan standard) almost superset of cp950.
        //  * Unicode-at-on (UAO) / Mozilla 1.8. Falling out of use on the Web. Not supported by other browsers.
        //  * Big5-HKSCS (-2001, -2004, -2008). Hong Kong standard. 
        //    many unicode code points moved from PUA to Supplementary plane (U+2XXXX) over the years.
        //    Plus, it has 4 combining sequences.
        //    Seems that Mozilla refused to support it for 10 yrs. https://bugzilla.mozilla.org/show_bug.cgi?id=162431 https://bugzilla.mozilla.org/show_bug.cgi?id=310299
        //    because big5-hkscs is the only encoding to include astral characters in non-algorithmic way.
        //    Implementations are not consistent within browsers; sometimes labeled as just big5.
        //    MS Internet Explorer switches from big5 to big5-hkscs when a patch applied.
        //    Great discussion & recap of what's going on https://bugzilla.mozilla.org/show_bug.cgi?id=912470#c31
        //    In the encoder, it might make sense to support encoding old PUA mappings to Big5 bytes seq-s.
        //    Official spec: http://www.ogcio.gov.hk/en/business/tech_promotion/ccli/terms/doc/2003cmp_2008.txt
        //                   http://www.ogcio.gov.hk/tc/business/tech_promotion/ccli/terms/doc/hkscs-2008-big5-iso.txt
        // 
        // Current understanding of how to deal with Big5(-HKSCS) is in the Encoding Standard, http://encoding.spec.whatwg.org/#big5-encoder
        // Unicode mapping (http://www.unicode.org/Public/MAPPINGS/OBSOLETE/EASTASIA/OTHER/BIG5.TXT) is said to be wrong.
        'windows950': 'cp950',
        'ms950': 'cp950',
        '950': 'cp950',
        'cp950': {
          type: '_dbcs',
          table: function table() {
            return __webpack_require__(251);
          }
        },
        // Big5 has many variations and is an extension of cp950. We use Encoding Standard's as a consensus.
        'big5': 'big5hkscs',
        'big5hkscs': {
          type: '_dbcs',
          table: function table() {
            return __webpack_require__(251).concat(__webpack_require__(404));
          },
          encodeSkipVals: [0xa2cc]
        },
        'cnbig5': 'big5hkscs',
        'csbig5': 'big5hkscs',
        'xxbig5': 'big5hkscs'
      };
      /***/
    },
    /* 400 */

    /***/
    function (module) {
      module.exports = JSON.parse("[[\"0\",\"\\u0000\",128],[\"a1\",\"\uFF61\",62],[\"8140\",\"\u3000\u3001\u3002\uFF0C\uFF0E\u30FB\uFF1A\uFF1B\uFF1F\uFF01\u309B\u309C\xB4\uFF40\xA8\uFF3E\uFFE3\uFF3F\u30FD\u30FE\u309D\u309E\u3003\u4EDD\u3005\u3006\u3007\u30FC\u2015\u2010\uFF0F\uFF3C\uFF5E\u2225\uFF5C\u2026\u2025\u2018\u2019\u201C\u201D\uFF08\uFF09\u3014\u3015\uFF3B\uFF3D\uFF5B\uFF5D\u3008\",9,\"\uFF0B\uFF0D\xB1\xD7\"],[\"8180\",\"\xF7\uFF1D\u2260\uFF1C\uFF1E\u2266\u2267\u221E\u2234\u2642\u2640\xB0\u2032\u2033\u2103\uFFE5\uFF04\uFFE0\uFFE1\uFF05\uFF03\uFF06\uFF0A\uFF20\xA7\u2606\u2605\u25CB\u25CF\u25CE\u25C7\u25C6\u25A1\u25A0\u25B3\u25B2\u25BD\u25BC\u203B\u3012\u2192\u2190\u2191\u2193\u3013\"],[\"81b8\",\"\u2208\u220B\u2286\u2287\u2282\u2283\u222A\u2229\"],[\"81c8\",\"\u2227\u2228\uFFE2\u21D2\u21D4\u2200\u2203\"],[\"81da\",\"\u2220\u22A5\u2312\u2202\u2207\u2261\u2252\u226A\u226B\u221A\u223D\u221D\u2235\u222B\u222C\"],[\"81f0\",\"\u212B\u2030\u266F\u266D\u266A\u2020\u2021\xB6\"],[\"81fc\",\"\u25EF\"],[\"824f\",\"\uFF10\",9],[\"8260\",\"\uFF21\",25],[\"8281\",\"\uFF41\",25],[\"829f\",\"\u3041\",82],[\"8340\",\"\u30A1\",62],[\"8380\",\"\u30E0\",22],[\"839f\",\"\u0391\",16,\"\u03A3\",6],[\"83bf\",\"\u03B1\",16,\"\u03C3\",6],[\"8440\",\"\u0410\",5,\"\u0401\u0416\",25],[\"8470\",\"\u0430\",5,\"\u0451\u0436\",7],[\"8480\",\"\u043E\",17],[\"849f\",\"\u2500\u2502\u250C\u2510\u2518\u2514\u251C\u252C\u2524\u2534\u253C\u2501\u2503\u250F\u2513\u251B\u2517\u2523\u2533\u252B\u253B\u254B\u2520\u252F\u2528\u2537\u253F\u251D\u2530\u2525\u2538\u2542\"],[\"8740\",\"\u2460\",19,\"\u2160\",9],[\"875f\",\"\u3349\u3314\u3322\u334D\u3318\u3327\u3303\u3336\u3351\u3357\u330D\u3326\u3323\u332B\u334A\u333B\u339C\u339D\u339E\u338E\u338F\u33C4\u33A1\"],[\"877e\",\"\u337B\"],[\"8780\",\"\u301D\u301F\u2116\u33CD\u2121\u32A4\",4,\"\u3231\u3232\u3239\u337E\u337D\u337C\u2252\u2261\u222B\u222E\u2211\u221A\u22A5\u2220\u221F\u22BF\u2235\u2229\u222A\"],[\"889f\",\"\u4E9C\u5516\u5A03\u963F\u54C0\u611B\u6328\u59F6\u9022\u8475\u831C\u7A50\u60AA\u63E1\u6E25\u65ED\u8466\u82A6\u9BF5\u6893\u5727\u65A1\u6271\u5B9B\u59D0\u867B\u98F4\u7D62\u7DBE\u9B8E\u6216\u7C9F\u88B7\u5B89\u5EB5\u6309\u6697\u6848\u95C7\u978D\u674F\u4EE5\u4F0A\u4F4D\u4F9D\u5049\u56F2\u5937\u59D4\u5A01\u5C09\u60DF\u610F\u6170\u6613\u6905\u70BA\u754F\u7570\u79FB\u7DAD\u7DEF\u80C3\u840E\u8863\u8B02\u9055\u907A\u533B\u4E95\u4EA5\u57DF\u80B2\u90C1\u78EF\u4E00\u58F1\u6EA2\u9038\u7A32\u8328\u828B\u9C2F\u5141\u5370\u54BD\u54E1\u56E0\u59FB\u5F15\u98F2\u6DEB\u80E4\u852D\"],[\"8940\",\"\u9662\u9670\u96A0\u97FB\u540B\u53F3\u5B87\u70CF\u7FBD\u8FC2\u96E8\u536F\u9D5C\u7ABA\u4E11\u7893\u81FC\u6E26\u5618\u5504\u6B1D\u851A\u9C3B\u59E5\u53A9\u6D66\u74DC\u958F\u5642\u4E91\u904B\u96F2\u834F\u990C\u53E1\u55B6\u5B30\u5F71\u6620\u66F3\u6804\u6C38\u6CF3\u6D29\u745B\u76C8\u7A4E\u9834\u82F1\u885B\u8A60\u92ED\u6DB2\u75AB\u76CA\u99C5\u60A6\u8B01\u8D8A\u95B2\u698E\u53AD\u5186\"],[\"8980\",\"\u5712\u5830\u5944\u5BB4\u5EF6\u6028\u63A9\u63F4\u6CBF\u6F14\u708E\u7114\u7159\u71D5\u733F\u7E01\u8276\u82D1\u8597\u9060\u925B\u9D1B\u5869\u65BC\u6C5A\u7525\u51F9\u592E\u5965\u5F80\u5FDC\u62BC\u65FA\u6A2A\u6B27\u6BB4\u738B\u7FC1\u8956\u9D2C\u9D0E\u9EC4\u5CA1\u6C96\u837B\u5104\u5C4B\u61B6\u81C6\u6876\u7261\u4E59\u4FFA\u5378\u6069\u6E29\u7A4F\u97F3\u4E0B\u5316\u4EEE\u4F55\u4F3D\u4FA1\u4F73\u52A0\u53EF\u5609\u590F\u5AC1\u5BB6\u5BE1\u79D1\u6687\u679C\u67B6\u6B4C\u6CB3\u706B\u73C2\u798D\u79BE\u7A3C\u7B87\u82B1\u82DB\u8304\u8377\u83EF\u83D3\u8766\u8AB2\u5629\u8CA8\u8FE6\u904E\u971E\u868A\u4FC4\u5CE8\u6211\u7259\u753B\u81E5\u82BD\u86FE\u8CC0\u96C5\u9913\u99D5\u4ECB\u4F1A\u89E3\u56DE\u584A\u58CA\u5EFB\u5FEB\u602A\u6094\u6062\u61D0\u6212\u62D0\u6539\"],[\"8a40\",\"\u9B41\u6666\u68B0\u6D77\u7070\u754C\u7686\u7D75\u82A5\u87F9\u958B\u968E\u8C9D\u51F1\u52BE\u5916\u54B3\u5BB3\u5D16\u6168\u6982\u6DAF\u788D\u84CB\u8857\u8A72\u93A7\u9AB8\u6D6C\u99A8\u86D9\u57A3\u67FF\u86CE\u920E\u5283\u5687\u5404\u5ED3\u62E1\u64B9\u683C\u6838\u6BBB\u7372\u78BA\u7A6B\u899A\u89D2\u8D6B\u8F03\u90ED\u95A3\u9694\u9769\u5B66\u5CB3\u697D\u984D\u984E\u639B\u7B20\u6A2B\"],[\"8a80\",\"\u6A7F\u68B6\u9C0D\u6F5F\u5272\u559D\u6070\u62EC\u6D3B\u6E07\u6ED1\u845B\u8910\u8F44\u4E14\u9C39\u53F6\u691B\u6A3A\u9784\u682A\u515C\u7AC3\u84B2\u91DC\u938C\u565B\u9D28\u6822\u8305\u8431\u7CA5\u5208\u82C5\u74E6\u4E7E\u4F83\u51A0\u5BD2\u520A\u52D8\u52E7\u5DFB\u559A\u582A\u59E6\u5B8C\u5B98\u5BDB\u5E72\u5E79\u60A3\u611F\u6163\u61BE\u63DB\u6562\u67D1\u6853\u68FA\u6B3E\u6B53\u6C57\u6F22\u6F97\u6F45\u74B0\u7518\u76E3\u770B\u7AFF\u7BA1\u7C21\u7DE9\u7F36\u7FF0\u809D\u8266\u839E\u89B3\u8ACC\u8CAB\u9084\u9451\u9593\u9591\u95A2\u9665\u97D3\u9928\u8218\u4E38\u542B\u5CB8\u5DCC\u73A9\u764C\u773C\u5CA9\u7FEB\u8D0B\u96C1\u9811\u9854\u9858\u4F01\u4F0E\u5371\u559C\u5668\u57FA\u5947\u5B09\u5BC4\u5C90\u5E0C\u5E7E\u5FCC\u63EE\u673A\u65D7\u65E2\u671F\u68CB\u68C4\"],[\"8b40\",\"\u6A5F\u5E30\u6BC5\u6C17\u6C7D\u757F\u7948\u5B63\u7A00\u7D00\u5FBD\u898F\u8A18\u8CB4\u8D77\u8ECC\u8F1D\u98E2\u9A0E\u9B3C\u4E80\u507D\u5100\u5993\u5B9C\u622F\u6280\u64EC\u6B3A\u72A0\u7591\u7947\u7FA9\u87FB\u8ABC\u8B70\u63AC\u83CA\u97A0\u5409\u5403\u55AB\u6854\u6A58\u8A70\u7827\u6775\u9ECD\u5374\u5BA2\u811A\u8650\u9006\u4E18\u4E45\u4EC7\u4F11\u53CA\u5438\u5BAE\u5F13\u6025\u6551\"],[\"8b80\",\"\u673D\u6C42\u6C72\u6CE3\u7078\u7403\u7A76\u7AAE\u7B08\u7D1A\u7CFE\u7D66\u65E7\u725B\u53BB\u5C45\u5DE8\u62D2\u62E0\u6319\u6E20\u865A\u8A31\u8DDD\u92F8\u6F01\u79A6\u9B5A\u4EA8\u4EAB\u4EAC\u4F9B\u4FA0\u50D1\u5147\u7AF6\u5171\u51F6\u5354\u5321\u537F\u53EB\u55AC\u5883\u5CE1\u5F37\u5F4A\u602F\u6050\u606D\u631F\u6559\u6A4B\u6CC1\u72C2\u72ED\u77EF\u80F8\u8105\u8208\u854E\u90F7\u93E1\u97FF\u9957\u9A5A\u4EF0\u51DD\u5C2D\u6681\u696D\u5C40\u66F2\u6975\u7389\u6850\u7C81\u50C5\u52E4\u5747\u5DFE\u9326\u65A4\u6B23\u6B3D\u7434\u7981\u79BD\u7B4B\u7DCA\u82B9\u83CC\u887F\u895F\u8B39\u8FD1\u91D1\u541F\u9280\u4E5D\u5036\u53E5\u533A\u72D7\u7396\u77E9\u82E6\u8EAF\u99C6\u99C8\u99D2\u5177\u611A\u865E\u55B0\u7A7A\u5076\u5BD3\u9047\u9685\u4E32\u6ADB\u91E7\u5C51\u5C48\"],[\"8c40\",\"\u6398\u7A9F\u6C93\u9774\u8F61\u7AAA\u718A\u9688\u7C82\u6817\u7E70\u6851\u936C\u52F2\u541B\u85AB\u8A13\u7FA4\u8ECD\u90E1\u5366\u8888\u7941\u4FC2\u50BE\u5211\u5144\u5553\u572D\u73EA\u578B\u5951\u5F62\u5F84\u6075\u6176\u6167\u61A9\u63B2\u643A\u656C\u666F\u6842\u6E13\u7566\u7A3D\u7CFB\u7D4C\u7D99\u7E4B\u7F6B\u830E\u834A\u86CD\u8A08\u8A63\u8B66\u8EFD\u981A\u9D8F\u82B8\u8FCE\u9BE8\"],[\"8c80\",\"\u5287\u621F\u6483\u6FC0\u9699\u6841\u5091\u6B20\u6C7A\u6F54\u7A74\u7D50\u8840\u8A23\u6708\u4EF6\u5039\u5026\u5065\u517C\u5238\u5263\u55A7\u570F\u5805\u5ACC\u5EFA\u61B2\u61F8\u62F3\u6372\u691C\u6A29\u727D\u72AC\u732E\u7814\u786F\u7D79\u770C\u80A9\u898B\u8B19\u8CE2\u8ED2\u9063\u9375\u967A\u9855\u9A13\u9E78\u5143\u539F\u53B3\u5E7B\u5F26\u6E1B\u6E90\u7384\u73FE\u7D43\u8237\u8A00\u8AFA\u9650\u4E4E\u500B\u53E4\u547C\u56FA\u59D1\u5B64\u5DF1\u5EAB\u5F27\u6238\u6545\u67AF\u6E56\u72D0\u7CCA\u88B4\u80A1\u80E1\u83F0\u864E\u8A87\u8DE8\u9237\u96C7\u9867\u9F13\u4E94\u4E92\u4F0D\u5348\u5449\u543E\u5A2F\u5F8C\u5FA1\u609F\u68A7\u6A8E\u745A\u7881\u8A9E\u8AA4\u8B77\u9190\u4E5E\u9BC9\u4EA4\u4F7C\u4FAF\u5019\u5016\u5149\u516C\u529F\u52B9\u52FE\u539A\u53E3\u5411\"],[\"8d40\",\"\u540E\u5589\u5751\u57A2\u597D\u5B54\u5B5D\u5B8F\u5DE5\u5DE7\u5DF7\u5E78\u5E83\u5E9A\u5EB7\u5F18\u6052\u614C\u6297\u62D8\u63A7\u653B\u6602\u6643\u66F4\u676D\u6821\u6897\u69CB\u6C5F\u6D2A\u6D69\u6E2F\u6E9D\u7532\u7687\u786C\u7A3F\u7CE0\u7D05\u7D18\u7D5E\u7DB1\u8015\u8003\u80AF\u80B1\u8154\u818F\u822A\u8352\u884C\u8861\u8B1B\u8CA2\u8CFC\u90CA\u9175\u9271\u783F\u92FC\u95A4\u964D\"],[\"8d80\",\"\u9805\u9999\u9AD8\u9D3B\u525B\u52AB\u53F7\u5408\u58D5\u62F7\u6FE0\u8C6A\u8F5F\u9EB9\u514B\u523B\u544A\u56FD\u7A40\u9177\u9D60\u9ED2\u7344\u6F09\u8170\u7511\u5FFD\u60DA\u9AA8\u72DB\u8FBC\u6B64\u9803\u4ECA\u56F0\u5764\u58BE\u5A5A\u6068\u61C7\u660F\u6606\u6839\u68B1\u6DF7\u75D5\u7D3A\u826E\u9B42\u4E9B\u4F50\u53C9\u5506\u5D6F\u5DE6\u5DEE\u67FB\u6C99\u7473\u7802\u8A50\u9396\u88DF\u5750\u5EA7\u632B\u50B5\u50AC\u518D\u6700\u54C9\u585E\u59BB\u5BB0\u5F69\u624D\u63A1\u683D\u6B73\u6E08\u707D\u91C7\u7280\u7815\u7826\u796D\u658E\u7D30\u83DC\u88C1\u8F09\u969B\u5264\u5728\u6750\u7F6A\u8CA1\u51B4\u5742\u962A\u583A\u698A\u80B4\u54B2\u5D0E\u57FC\u7895\u9DFA\u4F5C\u524A\u548B\u643E\u6628\u6714\u67F5\u7A84\u7B56\u7D22\u932F\u685C\u9BAD\u7B39\u5319\u518A\u5237\"],[\"8e40\",\"\u5BDF\u62F6\u64AE\u64E6\u672D\u6BBA\u85A9\u96D1\u7690\u9BD6\u634C\u9306\u9BAB\u76BF\u6652\u4E09\u5098\u53C2\u5C71\u60E8\u6492\u6563\u685F\u71E6\u73CA\u7523\u7B97\u7E82\u8695\u8B83\u8CDB\u9178\u9910\u65AC\u66AB\u6B8B\u4ED5\u4ED4\u4F3A\u4F7F\u523A\u53F8\u53F2\u55E3\u56DB\u58EB\u59CB\u59C9\u59FF\u5B50\u5C4D\u5E02\u5E2B\u5FD7\u601D\u6307\u652F\u5B5C\u65AF\u65BD\u65E8\u679D\u6B62\"],[\"8e80\",\"\u6B7B\u6C0F\u7345\u7949\u79C1\u7CF8\u7D19\u7D2B\u80A2\u8102\u81F3\u8996\u8A5E\u8A69\u8A66\u8A8C\u8AEE\u8CC7\u8CDC\u96CC\u98FC\u6B6F\u4E8B\u4F3C\u4F8D\u5150\u5B57\u5BFA\u6148\u6301\u6642\u6B21\u6ECB\u6CBB\u723E\u74BD\u75D4\u78C1\u793A\u800C\u8033\u81EA\u8494\u8F9E\u6C50\u9E7F\u5F0F\u8B58\u9D2B\u7AFA\u8EF8\u5B8D\u96EB\u4E03\u53F1\u57F7\u5931\u5AC9\u5BA4\u6089\u6E7F\u6F06\u75BE\u8CEA\u5B9F\u8500\u7BE0\u5072\u67F4\u829D\u5C61\u854A\u7E1E\u820E\u5199\u5C04\u6368\u8D66\u659C\u716E\u793E\u7D17\u8005\u8B1D\u8ECA\u906E\u86C7\u90AA\u501F\u52FA\u5C3A\u6753\u707C\u7235\u914C\u91C8\u932B\u82E5\u5BC2\u5F31\u60F9\u4E3B\u53D6\u5B88\u624B\u6731\u6B8A\u72E9\u73E0\u7A2E\u816B\u8DA3\u9152\u9996\u5112\u53D7\u546A\u5BFF\u6388\u6A39\u7DAC\u9700\u56DA\u53CE\u5468\"],[\"8f40\",\"\u5B97\u5C31\u5DDE\u4FEE\u6101\u62FE\u6D32\u79C0\u79CB\u7D42\u7E4D\u7FD2\u81ED\u821F\u8490\u8846\u8972\u8B90\u8E74\u8F2F\u9031\u914B\u916C\u96C6\u919C\u4EC0\u4F4F\u5145\u5341\u5F93\u620E\u67D4\u6C41\u6E0B\u7363\u7E26\u91CD\u9283\u53D4\u5919\u5BBF\u6DD1\u795D\u7E2E\u7C9B\u587E\u719F\u51FA\u8853\u8FF0\u4FCA\u5CFB\u6625\u77AC\u7AE3\u821C\u99FF\u51C6\u5FAA\u65EC\u696F\u6B89\u6DF3\"],[\"8f80\",\"\u6E96\u6F64\u76FE\u7D14\u5DE1\u9075\u9187\u9806\u51E6\u521D\u6240\u6691\u66D9\u6E1A\u5EB6\u7DD2\u7F72\u66F8\u85AF\u85F7\u8AF8\u52A9\u53D9\u5973\u5E8F\u5F90\u6055\u92E4\u9664\u50B7\u511F\u52DD\u5320\u5347\u53EC\u54E8\u5546\u5531\u5617\u5968\u59BE\u5A3C\u5BB5\u5C06\u5C0F\u5C11\u5C1A\u5E84\u5E8A\u5EE0\u5F70\u627F\u6284\u62DB\u638C\u6377\u6607\u660C\u662D\u6676\u677E\u68A2\u6A1F\u6A35\u6CBC\u6D88\u6E09\u6E58\u713C\u7126\u7167\u75C7\u7701\u785D\u7901\u7965\u79F0\u7AE0\u7B11\u7CA7\u7D39\u8096\u83D6\u848B\u8549\u885D\u88F3\u8A1F\u8A3C\u8A54\u8A73\u8C61\u8CDE\u91A4\u9266\u937E\u9418\u969C\u9798\u4E0A\u4E08\u4E1E\u4E57\u5197\u5270\u57CE\u5834\u58CC\u5B22\u5E38\u60C5\u64FE\u6761\u6756\u6D44\u72B6\u7573\u7A63\u84B8\u8B72\u91B8\u9320\u5631\u57F4\u98FE\"],[\"9040\",\"\u62ED\u690D\u6B96\u71ED\u7E54\u8077\u8272\u89E6\u98DF\u8755\u8FB1\u5C3B\u4F38\u4FE1\u4FB5\u5507\u5A20\u5BDD\u5BE9\u5FC3\u614E\u632F\u65B0\u664B\u68EE\u699B\u6D78\u6DF1\u7533\u75B9\u771F\u795E\u79E6\u7D33\u81E3\u82AF\u85AA\u89AA\u8A3A\u8EAB\u8F9B\u9032\u91DD\u9707\u4EBA\u4EC1\u5203\u5875\u58EC\u5C0B\u751A\u5C3D\u814E\u8A0A\u8FC5\u9663\u976D\u7B25\u8ACF\u9808\u9162\u56F3\u53A8\"],[\"9080\",\"\u9017\u5439\u5782\u5E25\u63A8\u6C34\u708A\u7761\u7C8B\u7FE0\u8870\u9042\u9154\u9310\u9318\u968F\u745E\u9AC4\u5D07\u5D69\u6570\u67A2\u8DA8\u96DB\u636E\u6749\u6919\u83C5\u9817\u96C0\u88FE\u6F84\u647A\u5BF8\u4E16\u702C\u755D\u662F\u51C4\u5236\u52E2\u59D3\u5F81\u6027\u6210\u653F\u6574\u661F\u6674\u68F2\u6816\u6B63\u6E05\u7272\u751F\u76DB\u7CBE\u8056\u58F0\u88FD\u897F\u8AA0\u8A93\u8ACB\u901D\u9192\u9752\u9759\u6589\u7A0E\u8106\u96BB\u5E2D\u60DC\u621A\u65A5\u6614\u6790\u77F3\u7A4D\u7C4D\u7E3E\u810A\u8CAC\u8D64\u8DE1\u8E5F\u78A9\u5207\u62D9\u63A5\u6442\u6298\u8A2D\u7A83\u7BC0\u8AAC\u96EA\u7D76\u820C\u8749\u4ED9\u5148\u5343\u5360\u5BA3\u5C02\u5C16\u5DDD\u6226\u6247\u64B0\u6813\u6834\u6CC9\u6D45\u6D17\u67D3\u6F5C\u714E\u717D\u65CB\u7A7F\u7BAD\u7DDA\"],[\"9140\",\"\u7E4A\u7FA8\u817A\u821B\u8239\u85A6\u8A6E\u8CCE\u8DF5\u9078\u9077\u92AD\u9291\u9583\u9BAE\u524D\u5584\u6F38\u7136\u5168\u7985\u7E55\u81B3\u7CCE\u564C\u5851\u5CA8\u63AA\u66FE\u66FD\u695A\u72D9\u758F\u758E\u790E\u7956\u79DF\u7C97\u7D20\u7D44\u8607\u8A34\u963B\u9061\u9F20\u50E7\u5275\u53CC\u53E2\u5009\u55AA\u58EE\u594F\u723D\u5B8B\u5C64\u531D\u60E3\u60F3\u635C\u6383\u633F\u63BB\"],[\"9180\",\"\u64CD\u65E9\u66F9\u5DE3\u69CD\u69FD\u6F15\u71E5\u4E89\u75E9\u76F8\u7A93\u7CDF\u7DCF\u7D9C\u8061\u8349\u8358\u846C\u84BC\u85FB\u88C5\u8D70\u9001\u906D\u9397\u971C\u9A12\u50CF\u5897\u618E\u81D3\u8535\u8D08\u9020\u4FC3\u5074\u5247\u5373\u606F\u6349\u675F\u6E2C\u8DB3\u901F\u4FD7\u5C5E\u8CCA\u65CF\u7D9A\u5352\u8896\u5176\u63C3\u5B58\u5B6B\u5C0A\u640D\u6751\u905C\u4ED6\u591A\u592A\u6C70\u8A51\u553E\u5815\u59A5\u60F0\u6253\u67C1\u8235\u6955\u9640\u99C4\u9A28\u4F53\u5806\u5BFE\u8010\u5CB1\u5E2F\u5F85\u6020\u614B\u6234\u66FF\u6CF0\u6EDE\u80CE\u817F\u82D4\u888B\u8CB8\u9000\u902E\u968A\u9EDB\u9BDB\u4EE3\u53F0\u5927\u7B2C\u918D\u984C\u9DF9\u6EDD\u7027\u5353\u5544\u5B85\u6258\u629E\u62D3\u6CA2\u6FEF\u7422\u8A17\u9438\u6FC1\u8AFE\u8338\u51E7\u86F8\u53EA\"],[\"9240\",\"\u53E9\u4F46\u9054\u8FB0\u596A\u8131\u5DFD\u7AEA\u8FBF\u68DA\u8C37\u72F8\u9C48\u6A3D\u8AB0\u4E39\u5358\u5606\u5766\u62C5\u63A2\u65E6\u6B4E\u6DE1\u6E5B\u70AD\u77ED\u7AEF\u7BAA\u7DBB\u803D\u80C6\u86CB\u8A95\u935B\u56E3\u58C7\u5F3E\u65AD\u6696\u6A80\u6BB5\u7537\u8AC7\u5024\u77E5\u5730\u5F1B\u6065\u667A\u6C60\u75F4\u7A1A\u7F6E\u81F4\u8718\u9045\u99B3\u7BC9\u755C\u7AF9\u7B51\u84C4\"],[\"9280\",\"\u9010\u79E9\u7A92\u8336\u5AE1\u7740\u4E2D\u4EF2\u5B99\u5FE0\u62BD\u663C\u67F1\u6CE8\u866B\u8877\u8A3B\u914E\u92F3\u99D0\u6A17\u7026\u732A\u82E7\u8457\u8CAF\u4E01\u5146\u51CB\u558B\u5BF5\u5E16\u5E33\u5E81\u5F14\u5F35\u5F6B\u5FB4\u61F2\u6311\u66A2\u671D\u6F6E\u7252\u753A\u773A\u8074\u8139\u8178\u8776\u8ABF\u8ADC\u8D85\u8DF3\u929A\u9577\u9802\u9CE5\u52C5\u6357\u76F4\u6715\u6C88\u73CD\u8CC3\u93AE\u9673\u6D25\u589C\u690E\u69CC\u8FFD\u939A\u75DB\u901A\u585A\u6802\u63B4\u69FB\u4F43\u6F2C\u67D8\u8FBB\u8526\u7DB4\u9354\u693F\u6F70\u576A\u58F7\u5B2C\u7D2C\u722A\u540A\u91E3\u9DB4\u4EAD\u4F4E\u505C\u5075\u5243\u8C9E\u5448\u5824\u5B9A\u5E1D\u5E95\u5EAD\u5EF7\u5F1F\u608C\u62B5\u633A\u63D0\u68AF\u6C40\u7887\u798E\u7A0B\u7DE0\u8247\u8A02\u8AE6\u8E44\u9013\"],[\"9340\",\"\u90B8\u912D\u91D8\u9F0E\u6CE5\u6458\u64E2\u6575\u6EF4\u7684\u7B1B\u9069\u93D1\u6EBA\u54F2\u5FB9\u64A4\u8F4D\u8FED\u9244\u5178\u586B\u5929\u5C55\u5E97\u6DFB\u7E8F\u751C\u8CBC\u8EE2\u985B\u70B9\u4F1D\u6BBF\u6FB1\u7530\u96FB\u514E\u5410\u5835\u5857\u59AC\u5C60\u5F92\u6597\u675C\u6E21\u767B\u83DF\u8CED\u9014\u90FD\u934D\u7825\u783A\u52AA\u5EA6\u571F\u5974\u6012\u5012\u515A\u51AC\"],[\"9380\",\"\u51CD\u5200\u5510\u5854\u5858\u5957\u5B95\u5CF6\u5D8B\u60BC\u6295\u642D\u6771\u6843\u68BC\u68DF\u76D7\u6DD8\u6E6F\u6D9B\u706F\u71C8\u5F53\u75D8\u7977\u7B49\u7B54\u7B52\u7CD6\u7D71\u5230\u8463\u8569\u85E4\u8A0E\u8B04\u8C46\u8E0F\u9003\u900F\u9419\u9676\u982D\u9A30\u95D8\u50CD\u52D5\u540C\u5802\u5C0E\u61A7\u649E\u6D1E\u77B3\u7AE5\u80F4\u8404\u9053\u9285\u5CE0\u9D07\u533F\u5F97\u5FB3\u6D9C\u7279\u7763\u79BF\u7BE4\u6BD2\u72EC\u8AAD\u6803\u6A61\u51F8\u7A81\u6934\u5C4A\u9CF6\u82EB\u5BC5\u9149\u701E\u5678\u5C6F\u60C7\u6566\u6C8C\u8C5A\u9041\u9813\u5451\u66C7\u920D\u5948\u90A3\u5185\u4E4D\u51EA\u8599\u8B0E\u7058\u637A\u934B\u6962\u99B4\u7E04\u7577\u5357\u6960\u8EDF\u96E3\u6C5D\u4E8C\u5C3C\u5F10\u8FE9\u5302\u8CD1\u8089\u8679\u5EFF\u65E5\u4E73\u5165\"],[\"9440\",\"\u5982\u5C3F\u97EE\u4EFB\u598A\u5FCD\u8A8D\u6FE1\u79B0\u7962\u5BE7\u8471\u732B\u71B1\u5E74\u5FF5\u637B\u649A\u71C3\u7C98\u4E43\u5EFC\u4E4B\u57DC\u56A2\u60A9\u6FC3\u7D0D\u80FD\u8133\u81BF\u8FB2\u8997\u86A4\u5DF4\u628A\u64AD\u8987\u6777\u6CE2\u6D3E\u7436\u7834\u5A46\u7F75\u82AD\u99AC\u4FF3\u5EC3\u62DD\u6392\u6557\u676F\u76C3\u724C\u80CC\u80BA\u8F29\u914D\u500D\u57F9\u5A92\u6885\"],[\"9480\",\"\u6973\u7164\u72FD\u8CB7\u58F2\u8CE0\u966A\u9019\u877F\u79E4\u77E7\u8429\u4F2F\u5265\u535A\u62CD\u67CF\u6CCA\u767D\u7B94\u7C95\u8236\u8584\u8FEB\u66DD\u6F20\u7206\u7E1B\u83AB\u99C1\u9EA6\u51FD\u7BB1\u7872\u7BB8\u8087\u7B48\u6AE8\u5E61\u808C\u7551\u7560\u516B\u9262\u6E8C\u767A\u9197\u9AEA\u4F10\u7F70\u629C\u7B4F\u95A5\u9CE9\u567A\u5859\u86E4\u96BC\u4F34\u5224\u534A\u53CD\u53DB\u5E06\u642C\u6591\u677F\u6C3E\u6C4E\u7248\u72AF\u73ED\u7554\u7E41\u822C\u85E9\u8CA9\u7BC4\u91C6\u7169\u9812\u98EF\u633D\u6669\u756A\u76E4\u78D0\u8543\u86EE\u532A\u5351\u5426\u5983\u5E87\u5F7C\u60B2\u6249\u6279\u62AB\u6590\u6BD4\u6CCC\u75B2\u76AE\u7891\u79D8\u7DCB\u7F77\u80A5\u88AB\u8AB9\u8CBB\u907F\u975E\u98DB\u6A0B\u7C38\u5099\u5C3E\u5FAE\u6787\u6BD8\u7435\u7709\u7F8E\"],[\"9540\",\"\u9F3B\u67CA\u7A17\u5339\u758B\u9AED\u5F66\u819D\u83F1\u8098\u5F3C\u5FC5\u7562\u7B46\u903C\u6867\u59EB\u5A9B\u7D10\u767E\u8B2C\u4FF5\u5F6A\u6A19\u6C37\u6F02\u74E2\u7968\u8868\u8A55\u8C79\u5EDF\u63CF\u75C5\u79D2\u82D7\u9328\u92F2\u849C\u86ED\u9C2D\u54C1\u5F6C\u658C\u6D5C\u7015\u8CA7\u8CD3\u983B\u654F\u74F6\u4E0D\u4ED8\u57E0\u592B\u5A66\u5BCC\u51A8\u5E03\u5E9C\u6016\u6276\u6577\"],[\"9580\",\"\u65A7\u666E\u6D6E\u7236\u7B26\u8150\u819A\u8299\u8B5C\u8CA0\u8CE6\u8D74\u961C\u9644\u4FAE\u64AB\u6B66\u821E\u8461\u856A\u90E8\u5C01\u6953\u98A8\u847A\u8557\u4F0F\u526F\u5FA9\u5E45\u670D\u798F\u8179\u8907\u8986\u6DF5\u5F17\u6255\u6CB8\u4ECF\u7269\u9B92\u5206\u543B\u5674\u58B3\u61A4\u626E\u711A\u596E\u7C89\u7CDE\u7D1B\u96F0\u6587\u805E\u4E19\u4F75\u5175\u5840\u5E63\u5E73\u5F0A\u67C4\u4E26\u853D\u9589\u965B\u7C73\u9801\u50FB\u58C1\u7656\u78A7\u5225\u77A5\u8511\u7B86\u504F\u5909\u7247\u7BC7\u7DE8\u8FBA\u8FD4\u904D\u4FBF\u52C9\u5A29\u5F01\u97AD\u4FDD\u8217\u92EA\u5703\u6355\u6B69\u752B\u88DC\u8F14\u7A42\u52DF\u5893\u6155\u620A\u66AE\u6BCD\u7C3F\u83E9\u5023\u4FF8\u5305\u5446\u5831\u5949\u5B9D\u5CF0\u5CEF\u5D29\u5E96\u62B1\u6367\u653E\u65B9\u670B\"],[\"9640\",\"\u6CD5\u6CE1\u70F9\u7832\u7E2B\u80DE\u82B3\u840C\u84EC\u8702\u8912\u8A2A\u8C4A\u90A6\u92D2\u98FD\u9CF3\u9D6C\u4E4F\u4EA1\u508D\u5256\u574A\u59A8\u5E3D\u5FD8\u5FD9\u623F\u66B4\u671B\u67D0\u68D2\u5192\u7D21\u80AA\u81A8\u8B00\u8C8C\u8CBF\u927E\u9632\u5420\u982C\u5317\u50D5\u535C\u58A8\u64B2\u6734\u7267\u7766\u7A46\u91E6\u52C3\u6CA1\u6B86\u5800\u5E4C\u5954\u672C\u7FFB\u51E1\u76C6\"],[\"9680\",\"\u6469\u78E8\u9B54\u9EBB\u57CB\u59B9\u6627\u679A\u6BCE\u54E9\u69D9\u5E55\u819C\u6795\u9BAA\u67FE\u9C52\u685D\u4EA6\u4FE3\u53C8\u62B9\u672B\u6CAB\u8FC4\u4FAD\u7E6D\u9EBF\u4E07\u6162\u6E80\u6F2B\u8513\u5473\u672A\u9B45\u5DF3\u7B95\u5CAC\u5BC6\u871C\u6E4A\u84D1\u7A14\u8108\u5999\u7C8D\u6C11\u7720\u52D9\u5922\u7121\u725F\u77DB\u9727\u9D61\u690B\u5A7F\u5A18\u51A5\u540D\u547D\u660E\u76DF\u8FF7\u9298\u9CF4\u59EA\u725D\u6EC5\u514D\u68C9\u7DBF\u7DEC\u9762\u9EBA\u6478\u6A21\u8302\u5984\u5B5F\u6BDB\u731B\u76F2\u7DB2\u8017\u8499\u5132\u6728\u9ED9\u76EE\u6762\u52FF\u9905\u5C24\u623B\u7C7E\u8CB0\u554F\u60B6\u7D0B\u9580\u5301\u4E5F\u51B6\u591C\u723A\u8036\u91CE\u5F25\u77E2\u5384\u5F79\u7D04\u85AC\u8A33\u8E8D\u9756\u67F3\u85AE\u9453\u6109\u6108\u6CB9\u7652\"],[\"9740\",\"\u8AED\u8F38\u552F\u4F51\u512A\u52C7\u53CB\u5BA5\u5E7D\u60A0\u6182\u63D6\u6709\u67DA\u6E67\u6D8C\u7336\u7337\u7531\u7950\u88D5\u8A98\u904A\u9091\u90F5\u96C4\u878D\u5915\u4E88\u4F59\u4E0E\u8A89\u8F3F\u9810\u50AD\u5E7C\u5996\u5BB9\u5EB8\u63DA\u63FA\u64C1\u66DC\u694A\u69D8\u6D0B\u6EB6\u7194\u7528\u7AAF\u7F8A\u8000\u8449\u84C9\u8981\u8B21\u8E0A\u9065\u967D\u990A\u617E\u6291\u6B32\"],[\"9780\",\"\u6C83\u6D74\u7FCC\u7FFC\u6DC0\u7F85\u87BA\u88F8\u6765\u83B1\u983C\u96F7\u6D1B\u7D61\u843D\u916A\u4E71\u5375\u5D50\u6B04\u6FEB\u85CD\u862D\u89A7\u5229\u540F\u5C65\u674E\u68A8\u7406\u7483\u75E2\u88CF\u88E1\u91CC\u96E2\u9678\u5F8B\u7387\u7ACB\u844E\u63A0\u7565\u5289\u6D41\u6E9C\u7409\u7559\u786B\u7C92\u9686\u7ADC\u9F8D\u4FB6\u616E\u65C5\u865C\u4E86\u4EAE\u50DA\u4E21\u51CC\u5BEE\u6599\u6881\u6DBC\u731F\u7642\u77AD\u7A1C\u7CE7\u826F\u8AD2\u907C\u91CF\u9675\u9818\u529B\u7DD1\u502B\u5398\u6797\u6DCB\u71D0\u7433\u81E8\u8F2A\u96A3\u9C57\u9E9F\u7460\u5841\u6D99\u7D2F\u985E\u4EE4\u4F36\u4F8B\u51B7\u52B1\u5DBA\u601C\u73B2\u793C\u82D3\u9234\u96B7\u96F6\u970A\u9E97\u9F62\u66A6\u6B74\u5217\u52A3\u70C8\u88C2\u5EC9\u604B\u6190\u6F23\u7149\u7C3E\u7DF4\u806F\"],[\"9840\",\"\u84EE\u9023\u932C\u5442\u9B6F\u6AD3\u7089\u8CC2\u8DEF\u9732\u52B4\u5A41\u5ECA\u5F04\u6717\u697C\u6994\u6D6A\u6F0F\u7262\u72FC\u7BED\u8001\u807E\u874B\u90CE\u516D\u9E93\u7984\u808B\u9332\u8AD6\u502D\u548C\u8A71\u6B6A\u8CC4\u8107\u60D1\u67A0\u9DF2\u4E99\u4E98\u9C10\u8A6B\u85C1\u8568\u6900\u6E7E\u7897\u8155\"],[\"989f\",\"\u5F0C\u4E10\u4E15\u4E2A\u4E31\u4E36\u4E3C\u4E3F\u4E42\u4E56\u4E58\u4E82\u4E85\u8C6B\u4E8A\u8212\u5F0D\u4E8E\u4E9E\u4E9F\u4EA0\u4EA2\u4EB0\u4EB3\u4EB6\u4ECE\u4ECD\u4EC4\u4EC6\u4EC2\u4ED7\u4EDE\u4EED\u4EDF\u4EF7\u4F09\u4F5A\u4F30\u4F5B\u4F5D\u4F57\u4F47\u4F76\u4F88\u4F8F\u4F98\u4F7B\u4F69\u4F70\u4F91\u4F6F\u4F86\u4F96\u5118\u4FD4\u4FDF\u4FCE\u4FD8\u4FDB\u4FD1\u4FDA\u4FD0\u4FE4\u4FE5\u501A\u5028\u5014\u502A\u5025\u5005\u4F1C\u4FF6\u5021\u5029\u502C\u4FFE\u4FEF\u5011\u5006\u5043\u5047\u6703\u5055\u5050\u5048\u505A\u5056\u506C\u5078\u5080\u509A\u5085\u50B4\u50B2\"],[\"9940\",\"\u50C9\u50CA\u50B3\u50C2\u50D6\u50DE\u50E5\u50ED\u50E3\u50EE\u50F9\u50F5\u5109\u5101\u5102\u5116\u5115\u5114\u511A\u5121\u513A\u5137\u513C\u513B\u513F\u5140\u5152\u514C\u5154\u5162\u7AF8\u5169\u516A\u516E\u5180\u5182\u56D8\u518C\u5189\u518F\u5191\u5193\u5195\u5196\u51A4\u51A6\u51A2\u51A9\u51AA\u51AB\u51B3\u51B1\u51B2\u51B0\u51B5\u51BD\u51C5\u51C9\u51DB\u51E0\u8655\u51E9\u51ED\"],[\"9980\",\"\u51F0\u51F5\u51FE\u5204\u520B\u5214\u520E\u5227\u522A\u522E\u5233\u5239\u524F\u5244\u524B\u524C\u525E\u5254\u526A\u5274\u5269\u5273\u527F\u527D\u528D\u5294\u5292\u5271\u5288\u5291\u8FA8\u8FA7\u52AC\u52AD\u52BC\u52B5\u52C1\u52CD\u52D7\u52DE\u52E3\u52E6\u98ED\u52E0\u52F3\u52F5\u52F8\u52F9\u5306\u5308\u7538\u530D\u5310\u530F\u5315\u531A\u5323\u532F\u5331\u5333\u5338\u5340\u5346\u5345\u4E17\u5349\u534D\u51D6\u535E\u5369\u536E\u5918\u537B\u5377\u5382\u5396\u53A0\u53A6\u53A5\u53AE\u53B0\u53B6\u53C3\u7C12\u96D9\u53DF\u66FC\u71EE\u53EE\u53E8\u53ED\u53FA\u5401\u543D\u5440\u542C\u542D\u543C\u542E\u5436\u5429\u541D\u544E\u548F\u5475\u548E\u545F\u5471\u5477\u5470\u5492\u547B\u5480\u5476\u5484\u5490\u5486\u54C7\u54A2\u54B8\u54A5\u54AC\u54C4\u54C8\u54A8\"],[\"9a40\",\"\u54AB\u54C2\u54A4\u54BE\u54BC\u54D8\u54E5\u54E6\u550F\u5514\u54FD\u54EE\u54ED\u54FA\u54E2\u5539\u5540\u5563\u554C\u552E\u555C\u5545\u5556\u5557\u5538\u5533\u555D\u5599\u5580\u54AF\u558A\u559F\u557B\u557E\u5598\u559E\u55AE\u557C\u5583\u55A9\u5587\u55A8\u55DA\u55C5\u55DF\u55C4\u55DC\u55E4\u55D4\u5614\u55F7\u5616\u55FE\u55FD\u561B\u55F9\u564E\u5650\u71DF\u5634\u5636\u5632\u5638\"],[\"9a80\",\"\u566B\u5664\u562F\u566C\u566A\u5686\u5680\u568A\u56A0\u5694\u568F\u56A5\u56AE\u56B6\u56B4\u56C2\u56BC\u56C1\u56C3\u56C0\u56C8\u56CE\u56D1\u56D3\u56D7\u56EE\u56F9\u5700\u56FF\u5704\u5709\u5708\u570B\u570D\u5713\u5718\u5716\u55C7\u571C\u5726\u5737\u5738\u574E\u573B\u5740\u574F\u5769\u57C0\u5788\u5761\u577F\u5789\u5793\u57A0\u57B3\u57A4\u57AA\u57B0\u57C3\u57C6\u57D4\u57D2\u57D3\u580A\u57D6\u57E3\u580B\u5819\u581D\u5872\u5821\u5862\u584B\u5870\u6BC0\u5852\u583D\u5879\u5885\u58B9\u589F\u58AB\u58BA\u58DE\u58BB\u58B8\u58AE\u58C5\u58D3\u58D1\u58D7\u58D9\u58D8\u58E5\u58DC\u58E4\u58DF\u58EF\u58FA\u58F9\u58FB\u58FC\u58FD\u5902\u590A\u5910\u591B\u68A6\u5925\u592C\u592D\u5932\u5938\u593E\u7AD2\u5955\u5950\u594E\u595A\u5958\u5962\u5960\u5967\u596C\u5969\"],[\"9b40\",\"\u5978\u5981\u599D\u4F5E\u4FAB\u59A3\u59B2\u59C6\u59E8\u59DC\u598D\u59D9\u59DA\u5A25\u5A1F\u5A11\u5A1C\u5A09\u5A1A\u5A40\u5A6C\u5A49\u5A35\u5A36\u5A62\u5A6A\u5A9A\u5ABC\u5ABE\u5ACB\u5AC2\u5ABD\u5AE3\u5AD7\u5AE6\u5AE9\u5AD6\u5AFA\u5AFB\u5B0C\u5B0B\u5B16\u5B32\u5AD0\u5B2A\u5B36\u5B3E\u5B43\u5B45\u5B40\u5B51\u5B55\u5B5A\u5B5B\u5B65\u5B69\u5B70\u5B73\u5B75\u5B78\u6588\u5B7A\u5B80\"],[\"9b80\",\"\u5B83\u5BA6\u5BB8\u5BC3\u5BC7\u5BC9\u5BD4\u5BD0\u5BE4\u5BE6\u5BE2\u5BDE\u5BE5\u5BEB\u5BF0\u5BF6\u5BF3\u5C05\u5C07\u5C08\u5C0D\u5C13\u5C20\u5C22\u5C28\u5C38\u5C39\u5C41\u5C46\u5C4E\u5C53\u5C50\u5C4F\u5B71\u5C6C\u5C6E\u4E62\u5C76\u5C79\u5C8C\u5C91\u5C94\u599B\u5CAB\u5CBB\u5CB6\u5CBC\u5CB7\u5CC5\u5CBE\u5CC7\u5CD9\u5CE9\u5CFD\u5CFA\u5CED\u5D8C\u5CEA\u5D0B\u5D15\u5D17\u5D5C\u5D1F\u5D1B\u5D11\u5D14\u5D22\u5D1A\u5D19\u5D18\u5D4C\u5D52\u5D4E\u5D4B\u5D6C\u5D73\u5D76\u5D87\u5D84\u5D82\u5DA2\u5D9D\u5DAC\u5DAE\u5DBD\u5D90\u5DB7\u5DBC\u5DC9\u5DCD\u5DD3\u5DD2\u5DD6\u5DDB\u5DEB\u5DF2\u5DF5\u5E0B\u5E1A\u5E19\u5E11\u5E1B\u5E36\u5E37\u5E44\u5E43\u5E40\u5E4E\u5E57\u5E54\u5E5F\u5E62\u5E64\u5E47\u5E75\u5E76\u5E7A\u9EBC\u5E7F\u5EA0\u5EC1\u5EC2\u5EC8\u5ED0\u5ECF\"],[\"9c40\",\"\u5ED6\u5EE3\u5EDD\u5EDA\u5EDB\u5EE2\u5EE1\u5EE8\u5EE9\u5EEC\u5EF1\u5EF3\u5EF0\u5EF4\u5EF8\u5EFE\u5F03\u5F09\u5F5D\u5F5C\u5F0B\u5F11\u5F16\u5F29\u5F2D\u5F38\u5F41\u5F48\u5F4C\u5F4E\u5F2F\u5F51\u5F56\u5F57\u5F59\u5F61\u5F6D\u5F73\u5F77\u5F83\u5F82\u5F7F\u5F8A\u5F88\u5F91\u5F87\u5F9E\u5F99\u5F98\u5FA0\u5FA8\u5FAD\u5FBC\u5FD6\u5FFB\u5FE4\u5FF8\u5FF1\u5FDD\u60B3\u5FFF\u6021\u6060\"],[\"9c80\",\"\u6019\u6010\u6029\u600E\u6031\u601B\u6015\u602B\u6026\u600F\u603A\u605A\u6041\u606A\u6077\u605F\u604A\u6046\u604D\u6063\u6043\u6064\u6042\u606C\u606B\u6059\u6081\u608D\u60E7\u6083\u609A\u6084\u609B\u6096\u6097\u6092\u60A7\u608B\u60E1\u60B8\u60E0\u60D3\u60B4\u5FF0\u60BD\u60C6\u60B5\u60D8\u614D\u6115\u6106\u60F6\u60F7\u6100\u60F4\u60FA\u6103\u6121\u60FB\u60F1\u610D\u610E\u6147\u613E\u6128\u6127\u614A\u613F\u613C\u612C\u6134\u613D\u6142\u6144\u6173\u6177\u6158\u6159\u615A\u616B\u6174\u616F\u6165\u6171\u615F\u615D\u6153\u6175\u6199\u6196\u6187\u61AC\u6194\u619A\u618A\u6191\u61AB\u61AE\u61CC\u61CA\u61C9\u61F7\u61C8\u61C3\u61C6\u61BA\u61CB\u7F79\u61CD\u61E6\u61E3\u61F6\u61FA\u61F4\u61FF\u61FD\u61FC\u61FE\u6200\u6208\u6209\u620D\u620C\u6214\u621B\"],[\"9d40\",\"\u621E\u6221\u622A\u622E\u6230\u6232\u6233\u6241\u624E\u625E\u6263\u625B\u6260\u6268\u627C\u6282\u6289\u627E\u6292\u6293\u6296\u62D4\u6283\u6294\u62D7\u62D1\u62BB\u62CF\u62FF\u62C6\u64D4\u62C8\u62DC\u62CC\u62CA\u62C2\u62C7\u629B\u62C9\u630C\u62EE\u62F1\u6327\u6302\u6308\u62EF\u62F5\u6350\u633E\u634D\u641C\u634F\u6396\u638E\u6380\u63AB\u6376\u63A3\u638F\u6389\u639F\u63B5\u636B\"],[\"9d80\",\"\u6369\u63BE\u63E9\u63C0\u63C6\u63E3\u63C9\u63D2\u63F6\u63C4\u6416\u6434\u6406\u6413\u6426\u6436\u651D\u6417\u6428\u640F\u6467\u646F\u6476\u644E\u652A\u6495\u6493\u64A5\u64A9\u6488\u64BC\u64DA\u64D2\u64C5\u64C7\u64BB\u64D8\u64C2\u64F1\u64E7\u8209\u64E0\u64E1\u62AC\u64E3\u64EF\u652C\u64F6\u64F4\u64F2\u64FA\u6500\u64FD\u6518\u651C\u6505\u6524\u6523\u652B\u6534\u6535\u6537\u6536\u6538\u754B\u6548\u6556\u6555\u654D\u6558\u655E\u655D\u6572\u6578\u6582\u6583\u8B8A\u659B\u659F\u65AB\u65B7\u65C3\u65C6\u65C1\u65C4\u65CC\u65D2\u65DB\u65D9\u65E0\u65E1\u65F1\u6772\u660A\u6603\u65FB\u6773\u6635\u6636\u6634\u661C\u664F\u6644\u6649\u6641\u665E\u665D\u6664\u6667\u6668\u665F\u6662\u6670\u6683\u6688\u668E\u6689\u6684\u6698\u669D\u66C1\u66B9\u66C9\u66BE\u66BC\"],[\"9e40\",\"\u66C4\u66B8\u66D6\u66DA\u66E0\u663F\u66E6\u66E9\u66F0\u66F5\u66F7\u670F\u6716\u671E\u6726\u6727\u9738\u672E\u673F\u6736\u6741\u6738\u6737\u6746\u675E\u6760\u6759\u6763\u6764\u6789\u6770\u67A9\u677C\u676A\u678C\u678B\u67A6\u67A1\u6785\u67B7\u67EF\u67B4\u67EC\u67B3\u67E9\u67B8\u67E4\u67DE\u67DD\u67E2\u67EE\u67B9\u67CE\u67C6\u67E7\u6A9C\u681E\u6846\u6829\u6840\u684D\u6832\u684E\"],[\"9e80\",\"\u68B3\u682B\u6859\u6863\u6877\u687F\u689F\u688F\u68AD\u6894\u689D\u689B\u6883\u6AAE\u68B9\u6874\u68B5\u68A0\u68BA\u690F\u688D\u687E\u6901\u68CA\u6908\u68D8\u6922\u6926\u68E1\u690C\u68CD\u68D4\u68E7\u68D5\u6936\u6912\u6904\u68D7\u68E3\u6925\u68F9\u68E0\u68EF\u6928\u692A\u691A\u6923\u6921\u68C6\u6979\u6977\u695C\u6978\u696B\u6954\u697E\u696E\u6939\u6974\u693D\u6959\u6930\u6961\u695E\u695D\u6981\u696A\u69B2\u69AE\u69D0\u69BF\u69C1\u69D3\u69BE\u69CE\u5BE8\u69CA\u69DD\u69BB\u69C3\u69A7\u6A2E\u6991\u69A0\u699C\u6995\u69B4\u69DE\u69E8\u6A02\u6A1B\u69FF\u6B0A\u69F9\u69F2\u69E7\u6A05\u69B1\u6A1E\u69ED\u6A14\u69EB\u6A0A\u6A12\u6AC1\u6A23\u6A13\u6A44\u6A0C\u6A72\u6A36\u6A78\u6A47\u6A62\u6A59\u6A66\u6A48\u6A38\u6A22\u6A90\u6A8D\u6AA0\u6A84\u6AA2\u6AA3\"],[\"9f40\",\"\u6A97\u8617\u6ABB\u6AC3\u6AC2\u6AB8\u6AB3\u6AAC\u6ADE\u6AD1\u6ADF\u6AAA\u6ADA\u6AEA\u6AFB\u6B05\u8616\u6AFA\u6B12\u6B16\u9B31\u6B1F\u6B38\u6B37\u76DC\u6B39\u98EE\u6B47\u6B43\u6B49\u6B50\u6B59\u6B54\u6B5B\u6B5F\u6B61\u6B78\u6B79\u6B7F\u6B80\u6B84\u6B83\u6B8D\u6B98\u6B95\u6B9E\u6BA4\u6BAA\u6BAB\u6BAF\u6BB2\u6BB1\u6BB3\u6BB7\u6BBC\u6BC6\u6BCB\u6BD3\u6BDF\u6BEC\u6BEB\u6BF3\u6BEF\"],[\"9f80\",\"\u9EBE\u6C08\u6C13\u6C14\u6C1B\u6C24\u6C23\u6C5E\u6C55\u6C62\u6C6A\u6C82\u6C8D\u6C9A\u6C81\u6C9B\u6C7E\u6C68\u6C73\u6C92\u6C90\u6CC4\u6CF1\u6CD3\u6CBD\u6CD7\u6CC5\u6CDD\u6CAE\u6CB1\u6CBE\u6CBA\u6CDB\u6CEF\u6CD9\u6CEA\u6D1F\u884D\u6D36\u6D2B\u6D3D\u6D38\u6D19\u6D35\u6D33\u6D12\u6D0C\u6D63\u6D93\u6D64\u6D5A\u6D79\u6D59\u6D8E\u6D95\u6FE4\u6D85\u6DF9\u6E15\u6E0A\u6DB5\u6DC7\u6DE6\u6DB8\u6DC6\u6DEC\u6DDE\u6DCC\u6DE8\u6DD2\u6DC5\u6DFA\u6DD9\u6DE4\u6DD5\u6DEA\u6DEE\u6E2D\u6E6E\u6E2E\u6E19\u6E72\u6E5F\u6E3E\u6E23\u6E6B\u6E2B\u6E76\u6E4D\u6E1F\u6E43\u6E3A\u6E4E\u6E24\u6EFF\u6E1D\u6E38\u6E82\u6EAA\u6E98\u6EC9\u6EB7\u6ED3\u6EBD\u6EAF\u6EC4\u6EB2\u6ED4\u6ED5\u6E8F\u6EA5\u6EC2\u6E9F\u6F41\u6F11\u704C\u6EEC\u6EF8\u6EFE\u6F3F\u6EF2\u6F31\u6EEF\u6F32\u6ECC\"],[\"e040\",\"\u6F3E\u6F13\u6EF7\u6F86\u6F7A\u6F78\u6F81\u6F80\u6F6F\u6F5B\u6FF3\u6F6D\u6F82\u6F7C\u6F58\u6F8E\u6F91\u6FC2\u6F66\u6FB3\u6FA3\u6FA1\u6FA4\u6FB9\u6FC6\u6FAA\u6FDF\u6FD5\u6FEC\u6FD4\u6FD8\u6FF1\u6FEE\u6FDB\u7009\u700B\u6FFA\u7011\u7001\u700F\u6FFE\u701B\u701A\u6F74\u701D\u7018\u701F\u7030\u703E\u7032\u7051\u7063\u7099\u7092\u70AF\u70F1\u70AC\u70B8\u70B3\u70AE\u70DF\u70CB\u70DD\"],[\"e080\",\"\u70D9\u7109\u70FD\u711C\u7119\u7165\u7155\u7188\u7166\u7162\u714C\u7156\u716C\u718F\u71FB\u7184\u7195\u71A8\u71AC\u71D7\u71B9\u71BE\u71D2\u71C9\u71D4\u71CE\u71E0\u71EC\u71E7\u71F5\u71FC\u71F9\u71FF\u720D\u7210\u721B\u7228\u722D\u722C\u7230\u7232\u723B\u723C\u723F\u7240\u7246\u724B\u7258\u7274\u727E\u7282\u7281\u7287\u7292\u7296\u72A2\u72A7\u72B9\u72B2\u72C3\u72C6\u72C4\u72CE\u72D2\u72E2\u72E0\u72E1\u72F9\u72F7\u500F\u7317\u730A\u731C\u7316\u731D\u7334\u732F\u7329\u7325\u733E\u734E\u734F\u9ED8\u7357\u736A\u7368\u7370\u7378\u7375\u737B\u737A\u73C8\u73B3\u73CE\u73BB\u73C0\u73E5\u73EE\u73DE\u74A2\u7405\u746F\u7425\u73F8\u7432\u743A\u7455\u743F\u745F\u7459\u7441\u745C\u7469\u7470\u7463\u746A\u7476\u747E\u748B\u749E\u74A7\u74CA\u74CF\u74D4\u73F1\"],[\"e140\",\"\u74E0\u74E3\u74E7\u74E9\u74EE\u74F2\u74F0\u74F1\u74F8\u74F7\u7504\u7503\u7505\u750C\u750E\u750D\u7515\u7513\u751E\u7526\u752C\u753C\u7544\u754D\u754A\u7549\u755B\u7546\u755A\u7569\u7564\u7567\u756B\u756D\u7578\u7576\u7586\u7587\u7574\u758A\u7589\u7582\u7594\u759A\u759D\u75A5\u75A3\u75C2\u75B3\u75C3\u75B5\u75BD\u75B8\u75BC\u75B1\u75CD\u75CA\u75D2\u75D9\u75E3\u75DE\u75FE\u75FF\"],[\"e180\",\"\u75FC\u7601\u75F0\u75FA\u75F2\u75F3\u760B\u760D\u7609\u761F\u7627\u7620\u7621\u7622\u7624\u7634\u7630\u763B\u7647\u7648\u7646\u765C\u7658\u7661\u7662\u7668\u7669\u766A\u7667\u766C\u7670\u7672\u7676\u7678\u767C\u7680\u7683\u7688\u768B\u768E\u7696\u7693\u7699\u769A\u76B0\u76B4\u76B8\u76B9\u76BA\u76C2\u76CD\u76D6\u76D2\u76DE\u76E1\u76E5\u76E7\u76EA\u862F\u76FB\u7708\u7707\u7704\u7729\u7724\u771E\u7725\u7726\u771B\u7737\u7738\u7747\u775A\u7768\u776B\u775B\u7765\u777F\u777E\u7779\u778E\u778B\u7791\u77A0\u779E\u77B0\u77B6\u77B9\u77BF\u77BC\u77BD\u77BB\u77C7\u77CD\u77D7\u77DA\u77DC\u77E3\u77EE\u77FC\u780C\u7812\u7926\u7820\u792A\u7845\u788E\u7874\u7886\u787C\u789A\u788C\u78A3\u78B5\u78AA\u78AF\u78D1\u78C6\u78CB\u78D4\u78BE\u78BC\u78C5\u78CA\u78EC\"],[\"e240\",\"\u78E7\u78DA\u78FD\u78F4\u7907\u7912\u7911\u7919\u792C\u792B\u7940\u7960\u7957\u795F\u795A\u7955\u7953\u797A\u797F\u798A\u799D\u79A7\u9F4B\u79AA\u79AE\u79B3\u79B9\u79BA\u79C9\u79D5\u79E7\u79EC\u79E1\u79E3\u7A08\u7A0D\u7A18\u7A19\u7A20\u7A1F\u7980\u7A31\u7A3B\u7A3E\u7A37\u7A43\u7A57\u7A49\u7A61\u7A62\u7A69\u9F9D\u7A70\u7A79\u7A7D\u7A88\u7A97\u7A95\u7A98\u7A96\u7AA9\u7AC8\u7AB0\"],[\"e280\",\"\u7AB6\u7AC5\u7AC4\u7ABF\u9083\u7AC7\u7ACA\u7ACD\u7ACF\u7AD5\u7AD3\u7AD9\u7ADA\u7ADD\u7AE1\u7AE2\u7AE6\u7AED\u7AF0\u7B02\u7B0F\u7B0A\u7B06\u7B33\u7B18\u7B19\u7B1E\u7B35\u7B28\u7B36\u7B50\u7B7A\u7B04\u7B4D\u7B0B\u7B4C\u7B45\u7B75\u7B65\u7B74\u7B67\u7B70\u7B71\u7B6C\u7B6E\u7B9D\u7B98\u7B9F\u7B8D\u7B9C\u7B9A\u7B8B\u7B92\u7B8F\u7B5D\u7B99\u7BCB\u7BC1\u7BCC\u7BCF\u7BB4\u7BC6\u7BDD\u7BE9\u7C11\u7C14\u7BE6\u7BE5\u7C60\u7C00\u7C07\u7C13\u7BF3\u7BF7\u7C17\u7C0D\u7BF6\u7C23\u7C27\u7C2A\u7C1F\u7C37\u7C2B\u7C3D\u7C4C\u7C43\u7C54\u7C4F\u7C40\u7C50\u7C58\u7C5F\u7C64\u7C56\u7C65\u7C6C\u7C75\u7C83\u7C90\u7CA4\u7CAD\u7CA2\u7CAB\u7CA1\u7CA8\u7CB3\u7CB2\u7CB1\u7CAE\u7CB9\u7CBD\u7CC0\u7CC5\u7CC2\u7CD8\u7CD2\u7CDC\u7CE2\u9B3B\u7CEF\u7CF2\u7CF4\u7CF6\u7CFA\u7D06\"],[\"e340\",\"\u7D02\u7D1C\u7D15\u7D0A\u7D45\u7D4B\u7D2E\u7D32\u7D3F\u7D35\u7D46\u7D73\u7D56\u7D4E\u7D72\u7D68\u7D6E\u7D4F\u7D63\u7D93\u7D89\u7D5B\u7D8F\u7D7D\u7D9B\u7DBA\u7DAE\u7DA3\u7DB5\u7DC7\u7DBD\u7DAB\u7E3D\u7DA2\u7DAF\u7DDC\u7DB8\u7D9F\u7DB0\u7DD8\u7DDD\u7DE4\u7DDE\u7DFB\u7DF2\u7DE1\u7E05\u7E0A\u7E23\u7E21\u7E12\u7E31\u7E1F\u7E09\u7E0B\u7E22\u7E46\u7E66\u7E3B\u7E35\u7E39\u7E43\u7E37\"],[\"e380\",\"\u7E32\u7E3A\u7E67\u7E5D\u7E56\u7E5E\u7E59\u7E5A\u7E79\u7E6A\u7E69\u7E7C\u7E7B\u7E83\u7DD5\u7E7D\u8FAE\u7E7F\u7E88\u7E89\u7E8C\u7E92\u7E90\u7E93\u7E94\u7E96\u7E8E\u7E9B\u7E9C\u7F38\u7F3A\u7F45\u7F4C\u7F4D\u7F4E\u7F50\u7F51\u7F55\u7F54\u7F58\u7F5F\u7F60\u7F68\u7F69\u7F67\u7F78\u7F82\u7F86\u7F83\u7F88\u7F87\u7F8C\u7F94\u7F9E\u7F9D\u7F9A\u7FA3\u7FAF\u7FB2\u7FB9\u7FAE\u7FB6\u7FB8\u8B71\u7FC5\u7FC6\u7FCA\u7FD5\u7FD4\u7FE1\u7FE6\u7FE9\u7FF3\u7FF9\u98DC\u8006\u8004\u800B\u8012\u8018\u8019\u801C\u8021\u8028\u803F\u803B\u804A\u8046\u8052\u8058\u805A\u805F\u8062\u8068\u8073\u8072\u8070\u8076\u8079\u807D\u807F\u8084\u8086\u8085\u809B\u8093\u809A\u80AD\u5190\u80AC\u80DB\u80E5\u80D9\u80DD\u80C4\u80DA\u80D6\u8109\u80EF\u80F1\u811B\u8129\u8123\u812F\u814B\"],[\"e440\",\"\u968B\u8146\u813E\u8153\u8151\u80FC\u8171\u816E\u8165\u8166\u8174\u8183\u8188\u818A\u8180\u8182\u81A0\u8195\u81A4\u81A3\u815F\u8193\u81A9\u81B0\u81B5\u81BE\u81B8\u81BD\u81C0\u81C2\u81BA\u81C9\u81CD\u81D1\u81D9\u81D8\u81C8\u81DA\u81DF\u81E0\u81E7\u81FA\u81FB\u81FE\u8201\u8202\u8205\u8207\u820A\u820D\u8210\u8216\u8229\u822B\u8238\u8233\u8240\u8259\u8258\u825D\u825A\u825F\u8264\"],[\"e480\",\"\u8262\u8268\u826A\u826B\u822E\u8271\u8277\u8278\u827E\u828D\u8292\u82AB\u829F\u82BB\u82AC\u82E1\u82E3\u82DF\u82D2\u82F4\u82F3\u82FA\u8393\u8303\u82FB\u82F9\u82DE\u8306\u82DC\u8309\u82D9\u8335\u8334\u8316\u8332\u8331\u8340\u8339\u8350\u8345\u832F\u832B\u8317\u8318\u8385\u839A\u83AA\u839F\u83A2\u8396\u8323\u838E\u8387\u838A\u837C\u83B5\u8373\u8375\u83A0\u8389\u83A8\u83F4\u8413\u83EB\u83CE\u83FD\u8403\u83D8\u840B\u83C1\u83F7\u8407\u83E0\u83F2\u840D\u8422\u8420\u83BD\u8438\u8506\u83FB\u846D\u842A\u843C\u855A\u8484\u8477\u846B\u84AD\u846E\u8482\u8469\u8446\u842C\u846F\u8479\u8435\u84CA\u8462\u84B9\u84BF\u849F\u84D9\u84CD\u84BB\u84DA\u84D0\u84C1\u84C6\u84D6\u84A1\u8521\u84FF\u84F4\u8517\u8518\u852C\u851F\u8515\u8514\u84FC\u8540\u8563\u8558\u8548\"],[\"e540\",\"\u8541\u8602\u854B\u8555\u8580\u85A4\u8588\u8591\u858A\u85A8\u856D\u8594\u859B\u85EA\u8587\u859C\u8577\u857E\u8590\u85C9\u85BA\u85CF\u85B9\u85D0\u85D5\u85DD\u85E5\u85DC\u85F9\u860A\u8613\u860B\u85FE\u85FA\u8606\u8622\u861A\u8630\u863F\u864D\u4E55\u8654\u865F\u8667\u8671\u8693\u86A3\u86A9\u86AA\u868B\u868C\u86B6\u86AF\u86C4\u86C6\u86B0\u86C9\u8823\u86AB\u86D4\u86DE\u86E9\u86EC\"],[\"e580\",\"\u86DF\u86DB\u86EF\u8712\u8706\u8708\u8700\u8703\u86FB\u8711\u8709\u870D\u86F9\u870A\u8734\u873F\u8737\u873B\u8725\u8729\u871A\u8760\u875F\u8778\u874C\u874E\u8774\u8757\u8768\u876E\u8759\u8753\u8763\u876A\u8805\u87A2\u879F\u8782\u87AF\u87CB\u87BD\u87C0\u87D0\u96D6\u87AB\u87C4\u87B3\u87C7\u87C6\u87BB\u87EF\u87F2\u87E0\u880F\u880D\u87FE\u87F6\u87F7\u880E\u87D2\u8811\u8816\u8815\u8822\u8821\u8831\u8836\u8839\u8827\u883B\u8844\u8842\u8852\u8859\u885E\u8862\u886B\u8881\u887E\u889E\u8875\u887D\u88B5\u8872\u8882\u8897\u8892\u88AE\u8899\u88A2\u888D\u88A4\u88B0\u88BF\u88B1\u88C3\u88C4\u88D4\u88D8\u88D9\u88DD\u88F9\u8902\u88FC\u88F4\u88E8\u88F2\u8904\u890C\u890A\u8913\u8943\u891E\u8925\u892A\u892B\u8941\u8944\u893B\u8936\u8938\u894C\u891D\u8960\u895E\"],[\"e640\",\"\u8966\u8964\u896D\u896A\u896F\u8974\u8977\u897E\u8983\u8988\u898A\u8993\u8998\u89A1\u89A9\u89A6\u89AC\u89AF\u89B2\u89BA\u89BD\u89BF\u89C0\u89DA\u89DC\u89DD\u89E7\u89F4\u89F8\u8A03\u8A16\u8A10\u8A0C\u8A1B\u8A1D\u8A25\u8A36\u8A41\u8A5B\u8A52\u8A46\u8A48\u8A7C\u8A6D\u8A6C\u8A62\u8A85\u8A82\u8A84\u8AA8\u8AA1\u8A91\u8AA5\u8AA6\u8A9A\u8AA3\u8AC4\u8ACD\u8AC2\u8ADA\u8AEB\u8AF3\u8AE7\"],[\"e680\",\"\u8AE4\u8AF1\u8B14\u8AE0\u8AE2\u8AF7\u8ADE\u8ADB\u8B0C\u8B07\u8B1A\u8AE1\u8B16\u8B10\u8B17\u8B20\u8B33\u97AB\u8B26\u8B2B\u8B3E\u8B28\u8B41\u8B4C\u8B4F\u8B4E\u8B49\u8B56\u8B5B\u8B5A\u8B6B\u8B5F\u8B6C\u8B6F\u8B74\u8B7D\u8B80\u8B8C\u8B8E\u8B92\u8B93\u8B96\u8B99\u8B9A\u8C3A\u8C41\u8C3F\u8C48\u8C4C\u8C4E\u8C50\u8C55\u8C62\u8C6C\u8C78\u8C7A\u8C82\u8C89\u8C85\u8C8A\u8C8D\u8C8E\u8C94\u8C7C\u8C98\u621D\u8CAD\u8CAA\u8CBD\u8CB2\u8CB3\u8CAE\u8CB6\u8CC8\u8CC1\u8CE4\u8CE3\u8CDA\u8CFD\u8CFA\u8CFB\u8D04\u8D05\u8D0A\u8D07\u8D0F\u8D0D\u8D10\u9F4E\u8D13\u8CCD\u8D14\u8D16\u8D67\u8D6D\u8D71\u8D73\u8D81\u8D99\u8DC2\u8DBE\u8DBA\u8DCF\u8DDA\u8DD6\u8DCC\u8DDB\u8DCB\u8DEA\u8DEB\u8DDF\u8DE3\u8DFC\u8E08\u8E09\u8DFF\u8E1D\u8E1E\u8E10\u8E1F\u8E42\u8E35\u8E30\u8E34\u8E4A\"],[\"e740\",\"\u8E47\u8E49\u8E4C\u8E50\u8E48\u8E59\u8E64\u8E60\u8E2A\u8E63\u8E55\u8E76\u8E72\u8E7C\u8E81\u8E87\u8E85\u8E84\u8E8B\u8E8A\u8E93\u8E91\u8E94\u8E99\u8EAA\u8EA1\u8EAC\u8EB0\u8EC6\u8EB1\u8EBE\u8EC5\u8EC8\u8ECB\u8EDB\u8EE3\u8EFC\u8EFB\u8EEB\u8EFE\u8F0A\u8F05\u8F15\u8F12\u8F19\u8F13\u8F1C\u8F1F\u8F1B\u8F0C\u8F26\u8F33\u8F3B\u8F39\u8F45\u8F42\u8F3E\u8F4C\u8F49\u8F46\u8F4E\u8F57\u8F5C\"],[\"e780\",\"\u8F62\u8F63\u8F64\u8F9C\u8F9F\u8FA3\u8FAD\u8FAF\u8FB7\u8FDA\u8FE5\u8FE2\u8FEA\u8FEF\u9087\u8FF4\u9005\u8FF9\u8FFA\u9011\u9015\u9021\u900D\u901E\u9016\u900B\u9027\u9036\u9035\u9039\u8FF8\u904F\u9050\u9051\u9052\u900E\u9049\u903E\u9056\u9058\u905E\u9068\u906F\u9076\u96A8\u9072\u9082\u907D\u9081\u9080\u908A\u9089\u908F\u90A8\u90AF\u90B1\u90B5\u90E2\u90E4\u6248\u90DB\u9102\u9112\u9119\u9132\u9130\u914A\u9156\u9158\u9163\u9165\u9169\u9173\u9172\u918B\u9189\u9182\u91A2\u91AB\u91AF\u91AA\u91B5\u91B4\u91BA\u91C0\u91C1\u91C9\u91CB\u91D0\u91D6\u91DF\u91E1\u91DB\u91FC\u91F5\u91F6\u921E\u91FF\u9214\u922C\u9215\u9211\u925E\u9257\u9245\u9249\u9264\u9248\u9295\u923F\u924B\u9250\u929C\u9296\u9293\u929B\u925A\u92CF\u92B9\u92B7\u92E9\u930F\u92FA\u9344\u932E\"],[\"e840\",\"\u9319\u9322\u931A\u9323\u933A\u9335\u933B\u935C\u9360\u937C\u936E\u9356\u93B0\u93AC\u93AD\u9394\u93B9\u93D6\u93D7\u93E8\u93E5\u93D8\u93C3\u93DD\u93D0\u93C8\u93E4\u941A\u9414\u9413\u9403\u9407\u9410\u9436\u942B\u9435\u9421\u943A\u9441\u9452\u9444\u945B\u9460\u9462\u945E\u946A\u9229\u9470\u9475\u9477\u947D\u945A\u947C\u947E\u9481\u947F\u9582\u9587\u958A\u9594\u9596\u9598\u9599\"],[\"e880\",\"\u95A0\u95A8\u95A7\u95AD\u95BC\u95BB\u95B9\u95BE\u95CA\u6FF6\u95C3\u95CD\u95CC\u95D5\u95D4\u95D6\u95DC\u95E1\u95E5\u95E2\u9621\u9628\u962E\u962F\u9642\u964C\u964F\u964B\u9677\u965C\u965E\u965D\u965F\u9666\u9672\u966C\u968D\u9698\u9695\u9697\u96AA\u96A7\u96B1\u96B2\u96B0\u96B4\u96B6\u96B8\u96B9\u96CE\u96CB\u96C9\u96CD\u894D\u96DC\u970D\u96D5\u96F9\u9704\u9706\u9708\u9713\u970E\u9711\u970F\u9716\u9719\u9724\u972A\u9730\u9739\u973D\u973E\u9744\u9746\u9748\u9742\u9749\u975C\u9760\u9764\u9766\u9768\u52D2\u976B\u9771\u9779\u9785\u977C\u9781\u977A\u9786\u978B\u978F\u9790\u979C\u97A8\u97A6\u97A3\u97B3\u97B4\u97C3\u97C6\u97C8\u97CB\u97DC\u97ED\u9F4F\u97F2\u7ADF\u97F6\u97F5\u980F\u980C\u9838\u9824\u9821\u9837\u983D\u9846\u984F\u984B\u986B\u986F\u9870\"],[\"e940\",\"\u9871\u9874\u9873\u98AA\u98AF\u98B1\u98B6\u98C4\u98C3\u98C6\u98E9\u98EB\u9903\u9909\u9912\u9914\u9918\u9921\u991D\u991E\u9924\u9920\u992C\u992E\u993D\u993E\u9942\u9949\u9945\u9950\u994B\u9951\u9952\u994C\u9955\u9997\u9998\u99A5\u99AD\u99AE\u99BC\u99DF\u99DB\u99DD\u99D8\u99D1\u99ED\u99EE\u99F1\u99F2\u99FB\u99F8\u9A01\u9A0F\u9A05\u99E2\u9A19\u9A2B\u9A37\u9A45\u9A42\u9A40\u9A43\"],[\"e980\",\"\u9A3E\u9A55\u9A4D\u9A5B\u9A57\u9A5F\u9A62\u9A65\u9A64\u9A69\u9A6B\u9A6A\u9AAD\u9AB0\u9ABC\u9AC0\u9ACF\u9AD1\u9AD3\u9AD4\u9ADE\u9ADF\u9AE2\u9AE3\u9AE6\u9AEF\u9AEB\u9AEE\u9AF4\u9AF1\u9AF7\u9AFB\u9B06\u9B18\u9B1A\u9B1F\u9B22\u9B23\u9B25\u9B27\u9B28\u9B29\u9B2A\u9B2E\u9B2F\u9B32\u9B44\u9B43\u9B4F\u9B4D\u9B4E\u9B51\u9B58\u9B74\u9B93\u9B83\u9B91\u9B96\u9B97\u9B9F\u9BA0\u9BA8\u9BB4\u9BC0\u9BCA\u9BB9\u9BC6\u9BCF\u9BD1\u9BD2\u9BE3\u9BE2\u9BE4\u9BD4\u9BE1\u9C3A\u9BF2\u9BF1\u9BF0\u9C15\u9C14\u9C09\u9C13\u9C0C\u9C06\u9C08\u9C12\u9C0A\u9C04\u9C2E\u9C1B\u9C25\u9C24\u9C21\u9C30\u9C47\u9C32\u9C46\u9C3E\u9C5A\u9C60\u9C67\u9C76\u9C78\u9CE7\u9CEC\u9CF0\u9D09\u9D08\u9CEB\u9D03\u9D06\u9D2A\u9D26\u9DAF\u9D23\u9D1F\u9D44\u9D15\u9D12\u9D41\u9D3F\u9D3E\u9D46\u9D48\"],[\"ea40\",\"\u9D5D\u9D5E\u9D64\u9D51\u9D50\u9D59\u9D72\u9D89\u9D87\u9DAB\u9D6F\u9D7A\u9D9A\u9DA4\u9DA9\u9DB2\u9DC4\u9DC1\u9DBB\u9DB8\u9DBA\u9DC6\u9DCF\u9DC2\u9DD9\u9DD3\u9DF8\u9DE6\u9DED\u9DEF\u9DFD\u9E1A\u9E1B\u9E1E\u9E75\u9E79\u9E7D\u9E81\u9E88\u9E8B\u9E8C\u9E92\u9E95\u9E91\u9E9D\u9EA5\u9EA9\u9EB8\u9EAA\u9EAD\u9761\u9ECC\u9ECE\u9ECF\u9ED0\u9ED4\u9EDC\u9EDE\u9EDD\u9EE0\u9EE5\u9EE8\u9EEF\"],[\"ea80\",\"\u9EF4\u9EF6\u9EF7\u9EF9\u9EFB\u9EFC\u9EFD\u9F07\u9F08\u76B7\u9F15\u9F21\u9F2C\u9F3E\u9F4A\u9F52\u9F54\u9F63\u9F5F\u9F60\u9F61\u9F66\u9F67\u9F6C\u9F6A\u9F77\u9F72\u9F76\u9F95\u9F9C\u9FA0\u582F\u69C7\u9059\u7464\u51DC\u7199\"],[\"ed40\",\"\u7E8A\u891C\u9348\u9288\u84DC\u4FC9\u70BB\u6631\u68C8\u92F9\u66FB\u5F45\u4E28\u4EE1\u4EFC\u4F00\u4F03\u4F39\u4F56\u4F92\u4F8A\u4F9A\u4F94\u4FCD\u5040\u5022\u4FFF\u501E\u5046\u5070\u5042\u5094\u50F4\u50D8\u514A\u5164\u519D\u51BE\u51EC\u5215\u529C\u52A6\u52C0\u52DB\u5300\u5307\u5324\u5372\u5393\u53B2\u53DD\uFA0E\u549C\u548A\u54A9\u54FF\u5586\u5759\u5765\u57AC\u57C8\u57C7\uFA0F\"],[\"ed80\",\"\uFA10\u589E\u58B2\u590B\u5953\u595B\u595D\u5963\u59A4\u59BA\u5B56\u5BC0\u752F\u5BD8\u5BEC\u5C1E\u5CA6\u5CBA\u5CF5\u5D27\u5D53\uFA11\u5D42\u5D6D\u5DB8\u5DB9\u5DD0\u5F21\u5F34\u5F67\u5FB7\u5FDE\u605D\u6085\u608A\u60DE\u60D5\u6120\u60F2\u6111\u6137\u6130\u6198\u6213\u62A6\u63F5\u6460\u649D\u64CE\u654E\u6600\u6615\u663B\u6609\u662E\u661E\u6624\u6665\u6657\u6659\uFA12\u6673\u6699\u66A0\u66B2\u66BF\u66FA\u670E\uF929\u6766\u67BB\u6852\u67C0\u6801\u6844\u68CF\uFA13\u6968\uFA14\u6998\u69E2\u6A30\u6A6B\u6A46\u6A73\u6A7E\u6AE2\u6AE4\u6BD6\u6C3F\u6C5C\u6C86\u6C6F\u6CDA\u6D04\u6D87\u6D6F\u6D96\u6DAC\u6DCF\u6DF8\u6DF2\u6DFC\u6E39\u6E5C\u6E27\u6E3C\u6EBF\u6F88\u6FB5\u6FF5\u7005\u7007\u7028\u7085\u70AB\u710F\u7104\u715C\u7146\u7147\uFA15\u71C1\u71FE\u72B1\"],[\"ee40\",\"\u72BE\u7324\uFA16\u7377\u73BD\u73C9\u73D6\u73E3\u73D2\u7407\u73F5\u7426\u742A\u7429\u742E\u7462\u7489\u749F\u7501\u756F\u7682\u769C\u769E\u769B\u76A6\uFA17\u7746\u52AF\u7821\u784E\u7864\u787A\u7930\uFA18\uFA19\uFA1A\u7994\uFA1B\u799B\u7AD1\u7AE7\uFA1C\u7AEB\u7B9E\uFA1D\u7D48\u7D5C\u7DB7\u7DA0\u7DD6\u7E52\u7F47\u7FA1\uFA1E\u8301\u8362\u837F\u83C7\u83F6\u8448\u84B4\u8553\u8559\"],[\"ee80\",\"\u856B\uFA1F\u85B0\uFA20\uFA21\u8807\u88F5\u8A12\u8A37\u8A79\u8AA7\u8ABE\u8ADF\uFA22\u8AF6\u8B53\u8B7F\u8CF0\u8CF4\u8D12\u8D76\uFA23\u8ECF\uFA24\uFA25\u9067\u90DE\uFA26\u9115\u9127\u91DA\u91D7\u91DE\u91ED\u91EE\u91E4\u91E5\u9206\u9210\u920A\u923A\u9240\u923C\u924E\u9259\u9251\u9239\u9267\u92A7\u9277\u9278\u92E7\u92D7\u92D9\u92D0\uFA27\u92D5\u92E0\u92D3\u9325\u9321\u92FB\uFA28\u931E\u92FF\u931D\u9302\u9370\u9357\u93A4\u93C6\u93DE\u93F8\u9431\u9445\u9448\u9592\uF9DC\uFA29\u969D\u96AF\u9733\u973B\u9743\u974D\u974F\u9751\u9755\u9857\u9865\uFA2A\uFA2B\u9927\uFA2C\u999E\u9A4E\u9AD9\u9ADC\u9B75\u9B72\u9B8F\u9BB1\u9BBB\u9C00\u9D70\u9D6B\uFA2D\u9E19\u9ED1\"],[\"eeef\",\"\u2170\",9,\"\uFFE2\uFFE4\uFF07\uFF02\"],[\"f040\",\"\uE000\",62],[\"f080\",\"\uE03F\",124],[\"f140\",\"\uE0BC\",62],[\"f180\",\"\uE0FB\",124],[\"f240\",\"\uE178\",62],[\"f280\",\"\uE1B7\",124],[\"f340\",\"\uE234\",62],[\"f380\",\"\uE273\",124],[\"f440\",\"\uE2F0\",62],[\"f480\",\"\uE32F\",124],[\"f540\",\"\uE3AC\",62],[\"f580\",\"\uE3EB\",124],[\"f640\",\"\uE468\",62],[\"f680\",\"\uE4A7\",124],[\"f740\",\"\uE524\",62],[\"f780\",\"\uE563\",124],[\"f840\",\"\uE5E0\",62],[\"f880\",\"\uE61F\",124],[\"f940\",\"\uE69C\"],[\"fa40\",\"\u2170\",9,\"\u2160\",9,\"\uFFE2\uFFE4\uFF07\uFF02\u3231\u2116\u2121\u2235\u7E8A\u891C\u9348\u9288\u84DC\u4FC9\u70BB\u6631\u68C8\u92F9\u66FB\u5F45\u4E28\u4EE1\u4EFC\u4F00\u4F03\u4F39\u4F56\u4F92\u4F8A\u4F9A\u4F94\u4FCD\u5040\u5022\u4FFF\u501E\u5046\u5070\u5042\u5094\u50F4\u50D8\u514A\"],[\"fa80\",\"\u5164\u519D\u51BE\u51EC\u5215\u529C\u52A6\u52C0\u52DB\u5300\u5307\u5324\u5372\u5393\u53B2\u53DD\uFA0E\u549C\u548A\u54A9\u54FF\u5586\u5759\u5765\u57AC\u57C8\u57C7\uFA0F\uFA10\u589E\u58B2\u590B\u5953\u595B\u595D\u5963\u59A4\u59BA\u5B56\u5BC0\u752F\u5BD8\u5BEC\u5C1E\u5CA6\u5CBA\u5CF5\u5D27\u5D53\uFA11\u5D42\u5D6D\u5DB8\u5DB9\u5DD0\u5F21\u5F34\u5F67\u5FB7\u5FDE\u605D\u6085\u608A\u60DE\u60D5\u6120\u60F2\u6111\u6137\u6130\u6198\u6213\u62A6\u63F5\u6460\u649D\u64CE\u654E\u6600\u6615\u663B\u6609\u662E\u661E\u6624\u6665\u6657\u6659\uFA12\u6673\u6699\u66A0\u66B2\u66BF\u66FA\u670E\uF929\u6766\u67BB\u6852\u67C0\u6801\u6844\u68CF\uFA13\u6968\uFA14\u6998\u69E2\u6A30\u6A6B\u6A46\u6A73\u6A7E\u6AE2\u6AE4\u6BD6\u6C3F\u6C5C\u6C86\u6C6F\u6CDA\u6D04\u6D87\u6D6F\"],[\"fb40\",\"\u6D96\u6DAC\u6DCF\u6DF8\u6DF2\u6DFC\u6E39\u6E5C\u6E27\u6E3C\u6EBF\u6F88\u6FB5\u6FF5\u7005\u7007\u7028\u7085\u70AB\u710F\u7104\u715C\u7146\u7147\uFA15\u71C1\u71FE\u72B1\u72BE\u7324\uFA16\u7377\u73BD\u73C9\u73D6\u73E3\u73D2\u7407\u73F5\u7426\u742A\u7429\u742E\u7462\u7489\u749F\u7501\u756F\u7682\u769C\u769E\u769B\u76A6\uFA17\u7746\u52AF\u7821\u784E\u7864\u787A\u7930\uFA18\uFA19\"],[\"fb80\",\"\uFA1A\u7994\uFA1B\u799B\u7AD1\u7AE7\uFA1C\u7AEB\u7B9E\uFA1D\u7D48\u7D5C\u7DB7\u7DA0\u7DD6\u7E52\u7F47\u7FA1\uFA1E\u8301\u8362\u837F\u83C7\u83F6\u8448\u84B4\u8553\u8559\u856B\uFA1F\u85B0\uFA20\uFA21\u8807\u88F5\u8A12\u8A37\u8A79\u8AA7\u8ABE\u8ADF\uFA22\u8AF6\u8B53\u8B7F\u8CF0\u8CF4\u8D12\u8D76\uFA23\u8ECF\uFA24\uFA25\u9067\u90DE\uFA26\u9115\u9127\u91DA\u91D7\u91DE\u91ED\u91EE\u91E4\u91E5\u9206\u9210\u920A\u923A\u9240\u923C\u924E\u9259\u9251\u9239\u9267\u92A7\u9277\u9278\u92E7\u92D7\u92D9\u92D0\uFA27\u92D5\u92E0\u92D3\u9325\u9321\u92FB\uFA28\u931E\u92FF\u931D\u9302\u9370\u9357\u93A4\u93C6\u93DE\u93F8\u9431\u9445\u9448\u9592\uF9DC\uFA29\u969D\u96AF\u9733\u973B\u9743\u974D\u974F\u9751\u9755\u9857\u9865\uFA2A\uFA2B\u9927\uFA2C\u999E\u9A4E\u9AD9\"],[\"fc40\",\"\u9ADC\u9B75\u9B72\u9B8F\u9BB1\u9BBB\u9C00\u9D70\u9D6B\uFA2D\u9E19\u9ED1\"]]");
      /***/
    },
    /* 401 */

    /***/
    function (module) {
      module.exports = JSON.parse("[[\"0\",\"\\u0000\",127],[\"8ea1\",\"\uFF61\",62],[\"a1a1\",\"\u3000\u3001\u3002\uFF0C\uFF0E\u30FB\uFF1A\uFF1B\uFF1F\uFF01\u309B\u309C\xB4\uFF40\xA8\uFF3E\uFFE3\uFF3F\u30FD\u30FE\u309D\u309E\u3003\u4EDD\u3005\u3006\u3007\u30FC\u2015\u2010\uFF0F\uFF3C\uFF5E\u2225\uFF5C\u2026\u2025\u2018\u2019\u201C\u201D\uFF08\uFF09\u3014\u3015\uFF3B\uFF3D\uFF5B\uFF5D\u3008\",9,\"\uFF0B\uFF0D\xB1\xD7\xF7\uFF1D\u2260\uFF1C\uFF1E\u2266\u2267\u221E\u2234\u2642\u2640\xB0\u2032\u2033\u2103\uFFE5\uFF04\uFFE0\uFFE1\uFF05\uFF03\uFF06\uFF0A\uFF20\xA7\u2606\u2605\u25CB\u25CF\u25CE\u25C7\"],[\"a2a1\",\"\u25C6\u25A1\u25A0\u25B3\u25B2\u25BD\u25BC\u203B\u3012\u2192\u2190\u2191\u2193\u3013\"],[\"a2ba\",\"\u2208\u220B\u2286\u2287\u2282\u2283\u222A\u2229\"],[\"a2ca\",\"\u2227\u2228\uFFE2\u21D2\u21D4\u2200\u2203\"],[\"a2dc\",\"\u2220\u22A5\u2312\u2202\u2207\u2261\u2252\u226A\u226B\u221A\u223D\u221D\u2235\u222B\u222C\"],[\"a2f2\",\"\u212B\u2030\u266F\u266D\u266A\u2020\u2021\xB6\"],[\"a2fe\",\"\u25EF\"],[\"a3b0\",\"\uFF10\",9],[\"a3c1\",\"\uFF21\",25],[\"a3e1\",\"\uFF41\",25],[\"a4a1\",\"\u3041\",82],[\"a5a1\",\"\u30A1\",85],[\"a6a1\",\"\u0391\",16,\"\u03A3\",6],[\"a6c1\",\"\u03B1\",16,\"\u03C3\",6],[\"a7a1\",\"\u0410\",5,\"\u0401\u0416\",25],[\"a7d1\",\"\u0430\",5,\"\u0451\u0436\",25],[\"a8a1\",\"\u2500\u2502\u250C\u2510\u2518\u2514\u251C\u252C\u2524\u2534\u253C\u2501\u2503\u250F\u2513\u251B\u2517\u2523\u2533\u252B\u253B\u254B\u2520\u252F\u2528\u2537\u253F\u251D\u2530\u2525\u2538\u2542\"],[\"ada1\",\"\u2460\",19,\"\u2160\",9],[\"adc0\",\"\u3349\u3314\u3322\u334D\u3318\u3327\u3303\u3336\u3351\u3357\u330D\u3326\u3323\u332B\u334A\u333B\u339C\u339D\u339E\u338E\u338F\u33C4\u33A1\"],[\"addf\",\"\u337B\u301D\u301F\u2116\u33CD\u2121\u32A4\",4,\"\u3231\u3232\u3239\u337E\u337D\u337C\u2252\u2261\u222B\u222E\u2211\u221A\u22A5\u2220\u221F\u22BF\u2235\u2229\u222A\"],[\"b0a1\",\"\u4E9C\u5516\u5A03\u963F\u54C0\u611B\u6328\u59F6\u9022\u8475\u831C\u7A50\u60AA\u63E1\u6E25\u65ED\u8466\u82A6\u9BF5\u6893\u5727\u65A1\u6271\u5B9B\u59D0\u867B\u98F4\u7D62\u7DBE\u9B8E\u6216\u7C9F\u88B7\u5B89\u5EB5\u6309\u6697\u6848\u95C7\u978D\u674F\u4EE5\u4F0A\u4F4D\u4F9D\u5049\u56F2\u5937\u59D4\u5A01\u5C09\u60DF\u610F\u6170\u6613\u6905\u70BA\u754F\u7570\u79FB\u7DAD\u7DEF\u80C3\u840E\u8863\u8B02\u9055\u907A\u533B\u4E95\u4EA5\u57DF\u80B2\u90C1\u78EF\u4E00\u58F1\u6EA2\u9038\u7A32\u8328\u828B\u9C2F\u5141\u5370\u54BD\u54E1\u56E0\u59FB\u5F15\u98F2\u6DEB\u80E4\u852D\"],[\"b1a1\",\"\u9662\u9670\u96A0\u97FB\u540B\u53F3\u5B87\u70CF\u7FBD\u8FC2\u96E8\u536F\u9D5C\u7ABA\u4E11\u7893\u81FC\u6E26\u5618\u5504\u6B1D\u851A\u9C3B\u59E5\u53A9\u6D66\u74DC\u958F\u5642\u4E91\u904B\u96F2\u834F\u990C\u53E1\u55B6\u5B30\u5F71\u6620\u66F3\u6804\u6C38\u6CF3\u6D29\u745B\u76C8\u7A4E\u9834\u82F1\u885B\u8A60\u92ED\u6DB2\u75AB\u76CA\u99C5\u60A6\u8B01\u8D8A\u95B2\u698E\u53AD\u5186\u5712\u5830\u5944\u5BB4\u5EF6\u6028\u63A9\u63F4\u6CBF\u6F14\u708E\u7114\u7159\u71D5\u733F\u7E01\u8276\u82D1\u8597\u9060\u925B\u9D1B\u5869\u65BC\u6C5A\u7525\u51F9\u592E\u5965\u5F80\u5FDC\"],[\"b2a1\",\"\u62BC\u65FA\u6A2A\u6B27\u6BB4\u738B\u7FC1\u8956\u9D2C\u9D0E\u9EC4\u5CA1\u6C96\u837B\u5104\u5C4B\u61B6\u81C6\u6876\u7261\u4E59\u4FFA\u5378\u6069\u6E29\u7A4F\u97F3\u4E0B\u5316\u4EEE\u4F55\u4F3D\u4FA1\u4F73\u52A0\u53EF\u5609\u590F\u5AC1\u5BB6\u5BE1\u79D1\u6687\u679C\u67B6\u6B4C\u6CB3\u706B\u73C2\u798D\u79BE\u7A3C\u7B87\u82B1\u82DB\u8304\u8377\u83EF\u83D3\u8766\u8AB2\u5629\u8CA8\u8FE6\u904E\u971E\u868A\u4FC4\u5CE8\u6211\u7259\u753B\u81E5\u82BD\u86FE\u8CC0\u96C5\u9913\u99D5\u4ECB\u4F1A\u89E3\u56DE\u584A\u58CA\u5EFB\u5FEB\u602A\u6094\u6062\u61D0\u6212\u62D0\u6539\"],[\"b3a1\",\"\u9B41\u6666\u68B0\u6D77\u7070\u754C\u7686\u7D75\u82A5\u87F9\u958B\u968E\u8C9D\u51F1\u52BE\u5916\u54B3\u5BB3\u5D16\u6168\u6982\u6DAF\u788D\u84CB\u8857\u8A72\u93A7\u9AB8\u6D6C\u99A8\u86D9\u57A3\u67FF\u86CE\u920E\u5283\u5687\u5404\u5ED3\u62E1\u64B9\u683C\u6838\u6BBB\u7372\u78BA\u7A6B\u899A\u89D2\u8D6B\u8F03\u90ED\u95A3\u9694\u9769\u5B66\u5CB3\u697D\u984D\u984E\u639B\u7B20\u6A2B\u6A7F\u68B6\u9C0D\u6F5F\u5272\u559D\u6070\u62EC\u6D3B\u6E07\u6ED1\u845B\u8910\u8F44\u4E14\u9C39\u53F6\u691B\u6A3A\u9784\u682A\u515C\u7AC3\u84B2\u91DC\u938C\u565B\u9D28\u6822\u8305\u8431\"],[\"b4a1\",\"\u7CA5\u5208\u82C5\u74E6\u4E7E\u4F83\u51A0\u5BD2\u520A\u52D8\u52E7\u5DFB\u559A\u582A\u59E6\u5B8C\u5B98\u5BDB\u5E72\u5E79\u60A3\u611F\u6163\u61BE\u63DB\u6562\u67D1\u6853\u68FA\u6B3E\u6B53\u6C57\u6F22\u6F97\u6F45\u74B0\u7518\u76E3\u770B\u7AFF\u7BA1\u7C21\u7DE9\u7F36\u7FF0\u809D\u8266\u839E\u89B3\u8ACC\u8CAB\u9084\u9451\u9593\u9591\u95A2\u9665\u97D3\u9928\u8218\u4E38\u542B\u5CB8\u5DCC\u73A9\u764C\u773C\u5CA9\u7FEB\u8D0B\u96C1\u9811\u9854\u9858\u4F01\u4F0E\u5371\u559C\u5668\u57FA\u5947\u5B09\u5BC4\u5C90\u5E0C\u5E7E\u5FCC\u63EE\u673A\u65D7\u65E2\u671F\u68CB\u68C4\"],[\"b5a1\",\"\u6A5F\u5E30\u6BC5\u6C17\u6C7D\u757F\u7948\u5B63\u7A00\u7D00\u5FBD\u898F\u8A18\u8CB4\u8D77\u8ECC\u8F1D\u98E2\u9A0E\u9B3C\u4E80\u507D\u5100\u5993\u5B9C\u622F\u6280\u64EC\u6B3A\u72A0\u7591\u7947\u7FA9\u87FB\u8ABC\u8B70\u63AC\u83CA\u97A0\u5409\u5403\u55AB\u6854\u6A58\u8A70\u7827\u6775\u9ECD\u5374\u5BA2\u811A\u8650\u9006\u4E18\u4E45\u4EC7\u4F11\u53CA\u5438\u5BAE\u5F13\u6025\u6551\u673D\u6C42\u6C72\u6CE3\u7078\u7403\u7A76\u7AAE\u7B08\u7D1A\u7CFE\u7D66\u65E7\u725B\u53BB\u5C45\u5DE8\u62D2\u62E0\u6319\u6E20\u865A\u8A31\u8DDD\u92F8\u6F01\u79A6\u9B5A\u4EA8\u4EAB\u4EAC\"],[\"b6a1\",\"\u4F9B\u4FA0\u50D1\u5147\u7AF6\u5171\u51F6\u5354\u5321\u537F\u53EB\u55AC\u5883\u5CE1\u5F37\u5F4A\u602F\u6050\u606D\u631F\u6559\u6A4B\u6CC1\u72C2\u72ED\u77EF\u80F8\u8105\u8208\u854E\u90F7\u93E1\u97FF\u9957\u9A5A\u4EF0\u51DD\u5C2D\u6681\u696D\u5C40\u66F2\u6975\u7389\u6850\u7C81\u50C5\u52E4\u5747\u5DFE\u9326\u65A4\u6B23\u6B3D\u7434\u7981\u79BD\u7B4B\u7DCA\u82B9\u83CC\u887F\u895F\u8B39\u8FD1\u91D1\u541F\u9280\u4E5D\u5036\u53E5\u533A\u72D7\u7396\u77E9\u82E6\u8EAF\u99C6\u99C8\u99D2\u5177\u611A\u865E\u55B0\u7A7A\u5076\u5BD3\u9047\u9685\u4E32\u6ADB\u91E7\u5C51\u5C48\"],[\"b7a1\",\"\u6398\u7A9F\u6C93\u9774\u8F61\u7AAA\u718A\u9688\u7C82\u6817\u7E70\u6851\u936C\u52F2\u541B\u85AB\u8A13\u7FA4\u8ECD\u90E1\u5366\u8888\u7941\u4FC2\u50BE\u5211\u5144\u5553\u572D\u73EA\u578B\u5951\u5F62\u5F84\u6075\u6176\u6167\u61A9\u63B2\u643A\u656C\u666F\u6842\u6E13\u7566\u7A3D\u7CFB\u7D4C\u7D99\u7E4B\u7F6B\u830E\u834A\u86CD\u8A08\u8A63\u8B66\u8EFD\u981A\u9D8F\u82B8\u8FCE\u9BE8\u5287\u621F\u6483\u6FC0\u9699\u6841\u5091\u6B20\u6C7A\u6F54\u7A74\u7D50\u8840\u8A23\u6708\u4EF6\u5039\u5026\u5065\u517C\u5238\u5263\u55A7\u570F\u5805\u5ACC\u5EFA\u61B2\u61F8\u62F3\u6372\"],[\"b8a1\",\"\u691C\u6A29\u727D\u72AC\u732E\u7814\u786F\u7D79\u770C\u80A9\u898B\u8B19\u8CE2\u8ED2\u9063\u9375\u967A\u9855\u9A13\u9E78\u5143\u539F\u53B3\u5E7B\u5F26\u6E1B\u6E90\u7384\u73FE\u7D43\u8237\u8A00\u8AFA\u9650\u4E4E\u500B\u53E4\u547C\u56FA\u59D1\u5B64\u5DF1\u5EAB\u5F27\u6238\u6545\u67AF\u6E56\u72D0\u7CCA\u88B4\u80A1\u80E1\u83F0\u864E\u8A87\u8DE8\u9237\u96C7\u9867\u9F13\u4E94\u4E92\u4F0D\u5348\u5449\u543E\u5A2F\u5F8C\u5FA1\u609F\u68A7\u6A8E\u745A\u7881\u8A9E\u8AA4\u8B77\u9190\u4E5E\u9BC9\u4EA4\u4F7C\u4FAF\u5019\u5016\u5149\u516C\u529F\u52B9\u52FE\u539A\u53E3\u5411\"],[\"b9a1\",\"\u540E\u5589\u5751\u57A2\u597D\u5B54\u5B5D\u5B8F\u5DE5\u5DE7\u5DF7\u5E78\u5E83\u5E9A\u5EB7\u5F18\u6052\u614C\u6297\u62D8\u63A7\u653B\u6602\u6643\u66F4\u676D\u6821\u6897\u69CB\u6C5F\u6D2A\u6D69\u6E2F\u6E9D\u7532\u7687\u786C\u7A3F\u7CE0\u7D05\u7D18\u7D5E\u7DB1\u8015\u8003\u80AF\u80B1\u8154\u818F\u822A\u8352\u884C\u8861\u8B1B\u8CA2\u8CFC\u90CA\u9175\u9271\u783F\u92FC\u95A4\u964D\u9805\u9999\u9AD8\u9D3B\u525B\u52AB\u53F7\u5408\u58D5\u62F7\u6FE0\u8C6A\u8F5F\u9EB9\u514B\u523B\u544A\u56FD\u7A40\u9177\u9D60\u9ED2\u7344\u6F09\u8170\u7511\u5FFD\u60DA\u9AA8\u72DB\u8FBC\"],[\"baa1\",\"\u6B64\u9803\u4ECA\u56F0\u5764\u58BE\u5A5A\u6068\u61C7\u660F\u6606\u6839\u68B1\u6DF7\u75D5\u7D3A\u826E\u9B42\u4E9B\u4F50\u53C9\u5506\u5D6F\u5DE6\u5DEE\u67FB\u6C99\u7473\u7802\u8A50\u9396\u88DF\u5750\u5EA7\u632B\u50B5\u50AC\u518D\u6700\u54C9\u585E\u59BB\u5BB0\u5F69\u624D\u63A1\u683D\u6B73\u6E08\u707D\u91C7\u7280\u7815\u7826\u796D\u658E\u7D30\u83DC\u88C1\u8F09\u969B\u5264\u5728\u6750\u7F6A\u8CA1\u51B4\u5742\u962A\u583A\u698A\u80B4\u54B2\u5D0E\u57FC\u7895\u9DFA\u4F5C\u524A\u548B\u643E\u6628\u6714\u67F5\u7A84\u7B56\u7D22\u932F\u685C\u9BAD\u7B39\u5319\u518A\u5237\"],[\"bba1\",\"\u5BDF\u62F6\u64AE\u64E6\u672D\u6BBA\u85A9\u96D1\u7690\u9BD6\u634C\u9306\u9BAB\u76BF\u6652\u4E09\u5098\u53C2\u5C71\u60E8\u6492\u6563\u685F\u71E6\u73CA\u7523\u7B97\u7E82\u8695\u8B83\u8CDB\u9178\u9910\u65AC\u66AB\u6B8B\u4ED5\u4ED4\u4F3A\u4F7F\u523A\u53F8\u53F2\u55E3\u56DB\u58EB\u59CB\u59C9\u59FF\u5B50\u5C4D\u5E02\u5E2B\u5FD7\u601D\u6307\u652F\u5B5C\u65AF\u65BD\u65E8\u679D\u6B62\u6B7B\u6C0F\u7345\u7949\u79C1\u7CF8\u7D19\u7D2B\u80A2\u8102\u81F3\u8996\u8A5E\u8A69\u8A66\u8A8C\u8AEE\u8CC7\u8CDC\u96CC\u98FC\u6B6F\u4E8B\u4F3C\u4F8D\u5150\u5B57\u5BFA\u6148\u6301\u6642\"],[\"bca1\",\"\u6B21\u6ECB\u6CBB\u723E\u74BD\u75D4\u78C1\u793A\u800C\u8033\u81EA\u8494\u8F9E\u6C50\u9E7F\u5F0F\u8B58\u9D2B\u7AFA\u8EF8\u5B8D\u96EB\u4E03\u53F1\u57F7\u5931\u5AC9\u5BA4\u6089\u6E7F\u6F06\u75BE\u8CEA\u5B9F\u8500\u7BE0\u5072\u67F4\u829D\u5C61\u854A\u7E1E\u820E\u5199\u5C04\u6368\u8D66\u659C\u716E\u793E\u7D17\u8005\u8B1D\u8ECA\u906E\u86C7\u90AA\u501F\u52FA\u5C3A\u6753\u707C\u7235\u914C\u91C8\u932B\u82E5\u5BC2\u5F31\u60F9\u4E3B\u53D6\u5B88\u624B\u6731\u6B8A\u72E9\u73E0\u7A2E\u816B\u8DA3\u9152\u9996\u5112\u53D7\u546A\u5BFF\u6388\u6A39\u7DAC\u9700\u56DA\u53CE\u5468\"],[\"bda1\",\"\u5B97\u5C31\u5DDE\u4FEE\u6101\u62FE\u6D32\u79C0\u79CB\u7D42\u7E4D\u7FD2\u81ED\u821F\u8490\u8846\u8972\u8B90\u8E74\u8F2F\u9031\u914B\u916C\u96C6\u919C\u4EC0\u4F4F\u5145\u5341\u5F93\u620E\u67D4\u6C41\u6E0B\u7363\u7E26\u91CD\u9283\u53D4\u5919\u5BBF\u6DD1\u795D\u7E2E\u7C9B\u587E\u719F\u51FA\u8853\u8FF0\u4FCA\u5CFB\u6625\u77AC\u7AE3\u821C\u99FF\u51C6\u5FAA\u65EC\u696F\u6B89\u6DF3\u6E96\u6F64\u76FE\u7D14\u5DE1\u9075\u9187\u9806\u51E6\u521D\u6240\u6691\u66D9\u6E1A\u5EB6\u7DD2\u7F72\u66F8\u85AF\u85F7\u8AF8\u52A9\u53D9\u5973\u5E8F\u5F90\u6055\u92E4\u9664\u50B7\u511F\"],[\"bea1\",\"\u52DD\u5320\u5347\u53EC\u54E8\u5546\u5531\u5617\u5968\u59BE\u5A3C\u5BB5\u5C06\u5C0F\u5C11\u5C1A\u5E84\u5E8A\u5EE0\u5F70\u627F\u6284\u62DB\u638C\u6377\u6607\u660C\u662D\u6676\u677E\u68A2\u6A1F\u6A35\u6CBC\u6D88\u6E09\u6E58\u713C\u7126\u7167\u75C7\u7701\u785D\u7901\u7965\u79F0\u7AE0\u7B11\u7CA7\u7D39\u8096\u83D6\u848B\u8549\u885D\u88F3\u8A1F\u8A3C\u8A54\u8A73\u8C61\u8CDE\u91A4\u9266\u937E\u9418\u969C\u9798\u4E0A\u4E08\u4E1E\u4E57\u5197\u5270\u57CE\u5834\u58CC\u5B22\u5E38\u60C5\u64FE\u6761\u6756\u6D44\u72B6\u7573\u7A63\u84B8\u8B72\u91B8\u9320\u5631\u57F4\u98FE\"],[\"bfa1\",\"\u62ED\u690D\u6B96\u71ED\u7E54\u8077\u8272\u89E6\u98DF\u8755\u8FB1\u5C3B\u4F38\u4FE1\u4FB5\u5507\u5A20\u5BDD\u5BE9\u5FC3\u614E\u632F\u65B0\u664B\u68EE\u699B\u6D78\u6DF1\u7533\u75B9\u771F\u795E\u79E6\u7D33\u81E3\u82AF\u85AA\u89AA\u8A3A\u8EAB\u8F9B\u9032\u91DD\u9707\u4EBA\u4EC1\u5203\u5875\u58EC\u5C0B\u751A\u5C3D\u814E\u8A0A\u8FC5\u9663\u976D\u7B25\u8ACF\u9808\u9162\u56F3\u53A8\u9017\u5439\u5782\u5E25\u63A8\u6C34\u708A\u7761\u7C8B\u7FE0\u8870\u9042\u9154\u9310\u9318\u968F\u745E\u9AC4\u5D07\u5D69\u6570\u67A2\u8DA8\u96DB\u636E\u6749\u6919\u83C5\u9817\u96C0\u88FE\"],[\"c0a1\",\"\u6F84\u647A\u5BF8\u4E16\u702C\u755D\u662F\u51C4\u5236\u52E2\u59D3\u5F81\u6027\u6210\u653F\u6574\u661F\u6674\u68F2\u6816\u6B63\u6E05\u7272\u751F\u76DB\u7CBE\u8056\u58F0\u88FD\u897F\u8AA0\u8A93\u8ACB\u901D\u9192\u9752\u9759\u6589\u7A0E\u8106\u96BB\u5E2D\u60DC\u621A\u65A5\u6614\u6790\u77F3\u7A4D\u7C4D\u7E3E\u810A\u8CAC\u8D64\u8DE1\u8E5F\u78A9\u5207\u62D9\u63A5\u6442\u6298\u8A2D\u7A83\u7BC0\u8AAC\u96EA\u7D76\u820C\u8749\u4ED9\u5148\u5343\u5360\u5BA3\u5C02\u5C16\u5DDD\u6226\u6247\u64B0\u6813\u6834\u6CC9\u6D45\u6D17\u67D3\u6F5C\u714E\u717D\u65CB\u7A7F\u7BAD\u7DDA\"],[\"c1a1\",\"\u7E4A\u7FA8\u817A\u821B\u8239\u85A6\u8A6E\u8CCE\u8DF5\u9078\u9077\u92AD\u9291\u9583\u9BAE\u524D\u5584\u6F38\u7136\u5168\u7985\u7E55\u81B3\u7CCE\u564C\u5851\u5CA8\u63AA\u66FE\u66FD\u695A\u72D9\u758F\u758E\u790E\u7956\u79DF\u7C97\u7D20\u7D44\u8607\u8A34\u963B\u9061\u9F20\u50E7\u5275\u53CC\u53E2\u5009\u55AA\u58EE\u594F\u723D\u5B8B\u5C64\u531D\u60E3\u60F3\u635C\u6383\u633F\u63BB\u64CD\u65E9\u66F9\u5DE3\u69CD\u69FD\u6F15\u71E5\u4E89\u75E9\u76F8\u7A93\u7CDF\u7DCF\u7D9C\u8061\u8349\u8358\u846C\u84BC\u85FB\u88C5\u8D70\u9001\u906D\u9397\u971C\u9A12\u50CF\u5897\u618E\"],[\"c2a1\",\"\u81D3\u8535\u8D08\u9020\u4FC3\u5074\u5247\u5373\u606F\u6349\u675F\u6E2C\u8DB3\u901F\u4FD7\u5C5E\u8CCA\u65CF\u7D9A\u5352\u8896\u5176\u63C3\u5B58\u5B6B\u5C0A\u640D\u6751\u905C\u4ED6\u591A\u592A\u6C70\u8A51\u553E\u5815\u59A5\u60F0\u6253\u67C1\u8235\u6955\u9640\u99C4\u9A28\u4F53\u5806\u5BFE\u8010\u5CB1\u5E2F\u5F85\u6020\u614B\u6234\u66FF\u6CF0\u6EDE\u80CE\u817F\u82D4\u888B\u8CB8\u9000\u902E\u968A\u9EDB\u9BDB\u4EE3\u53F0\u5927\u7B2C\u918D\u984C\u9DF9\u6EDD\u7027\u5353\u5544\u5B85\u6258\u629E\u62D3\u6CA2\u6FEF\u7422\u8A17\u9438\u6FC1\u8AFE\u8338\u51E7\u86F8\u53EA\"],[\"c3a1\",\"\u53E9\u4F46\u9054\u8FB0\u596A\u8131\u5DFD\u7AEA\u8FBF\u68DA\u8C37\u72F8\u9C48\u6A3D\u8AB0\u4E39\u5358\u5606\u5766\u62C5\u63A2\u65E6\u6B4E\u6DE1\u6E5B\u70AD\u77ED\u7AEF\u7BAA\u7DBB\u803D\u80C6\u86CB\u8A95\u935B\u56E3\u58C7\u5F3E\u65AD\u6696\u6A80\u6BB5\u7537\u8AC7\u5024\u77E5\u5730\u5F1B\u6065\u667A\u6C60\u75F4\u7A1A\u7F6E\u81F4\u8718\u9045\u99B3\u7BC9\u755C\u7AF9\u7B51\u84C4\u9010\u79E9\u7A92\u8336\u5AE1\u7740\u4E2D\u4EF2\u5B99\u5FE0\u62BD\u663C\u67F1\u6CE8\u866B\u8877\u8A3B\u914E\u92F3\u99D0\u6A17\u7026\u732A\u82E7\u8457\u8CAF\u4E01\u5146\u51CB\u558B\u5BF5\"],[\"c4a1\",\"\u5E16\u5E33\u5E81\u5F14\u5F35\u5F6B\u5FB4\u61F2\u6311\u66A2\u671D\u6F6E\u7252\u753A\u773A\u8074\u8139\u8178\u8776\u8ABF\u8ADC\u8D85\u8DF3\u929A\u9577\u9802\u9CE5\u52C5\u6357\u76F4\u6715\u6C88\u73CD\u8CC3\u93AE\u9673\u6D25\u589C\u690E\u69CC\u8FFD\u939A\u75DB\u901A\u585A\u6802\u63B4\u69FB\u4F43\u6F2C\u67D8\u8FBB\u8526\u7DB4\u9354\u693F\u6F70\u576A\u58F7\u5B2C\u7D2C\u722A\u540A\u91E3\u9DB4\u4EAD\u4F4E\u505C\u5075\u5243\u8C9E\u5448\u5824\u5B9A\u5E1D\u5E95\u5EAD\u5EF7\u5F1F\u608C\u62B5\u633A\u63D0\u68AF\u6C40\u7887\u798E\u7A0B\u7DE0\u8247\u8A02\u8AE6\u8E44\u9013\"],[\"c5a1\",\"\u90B8\u912D\u91D8\u9F0E\u6CE5\u6458\u64E2\u6575\u6EF4\u7684\u7B1B\u9069\u93D1\u6EBA\u54F2\u5FB9\u64A4\u8F4D\u8FED\u9244\u5178\u586B\u5929\u5C55\u5E97\u6DFB\u7E8F\u751C\u8CBC\u8EE2\u985B\u70B9\u4F1D\u6BBF\u6FB1\u7530\u96FB\u514E\u5410\u5835\u5857\u59AC\u5C60\u5F92\u6597\u675C\u6E21\u767B\u83DF\u8CED\u9014\u90FD\u934D\u7825\u783A\u52AA\u5EA6\u571F\u5974\u6012\u5012\u515A\u51AC\u51CD\u5200\u5510\u5854\u5858\u5957\u5B95\u5CF6\u5D8B\u60BC\u6295\u642D\u6771\u6843\u68BC\u68DF\u76D7\u6DD8\u6E6F\u6D9B\u706F\u71C8\u5F53\u75D8\u7977\u7B49\u7B54\u7B52\u7CD6\u7D71\u5230\"],[\"c6a1\",\"\u8463\u8569\u85E4\u8A0E\u8B04\u8C46\u8E0F\u9003\u900F\u9419\u9676\u982D\u9A30\u95D8\u50CD\u52D5\u540C\u5802\u5C0E\u61A7\u649E\u6D1E\u77B3\u7AE5\u80F4\u8404\u9053\u9285\u5CE0\u9D07\u533F\u5F97\u5FB3\u6D9C\u7279\u7763\u79BF\u7BE4\u6BD2\u72EC\u8AAD\u6803\u6A61\u51F8\u7A81\u6934\u5C4A\u9CF6\u82EB\u5BC5\u9149\u701E\u5678\u5C6F\u60C7\u6566\u6C8C\u8C5A\u9041\u9813\u5451\u66C7\u920D\u5948\u90A3\u5185\u4E4D\u51EA\u8599\u8B0E\u7058\u637A\u934B\u6962\u99B4\u7E04\u7577\u5357\u6960\u8EDF\u96E3\u6C5D\u4E8C\u5C3C\u5F10\u8FE9\u5302\u8CD1\u8089\u8679\u5EFF\u65E5\u4E73\u5165\"],[\"c7a1\",\"\u5982\u5C3F\u97EE\u4EFB\u598A\u5FCD\u8A8D\u6FE1\u79B0\u7962\u5BE7\u8471\u732B\u71B1\u5E74\u5FF5\u637B\u649A\u71C3\u7C98\u4E43\u5EFC\u4E4B\u57DC\u56A2\u60A9\u6FC3\u7D0D\u80FD\u8133\u81BF\u8FB2\u8997\u86A4\u5DF4\u628A\u64AD\u8987\u6777\u6CE2\u6D3E\u7436\u7834\u5A46\u7F75\u82AD\u99AC\u4FF3\u5EC3\u62DD\u6392\u6557\u676F\u76C3\u724C\u80CC\u80BA\u8F29\u914D\u500D\u57F9\u5A92\u6885\u6973\u7164\u72FD\u8CB7\u58F2\u8CE0\u966A\u9019\u877F\u79E4\u77E7\u8429\u4F2F\u5265\u535A\u62CD\u67CF\u6CCA\u767D\u7B94\u7C95\u8236\u8584\u8FEB\u66DD\u6F20\u7206\u7E1B\u83AB\u99C1\u9EA6\"],[\"c8a1\",\"\u51FD\u7BB1\u7872\u7BB8\u8087\u7B48\u6AE8\u5E61\u808C\u7551\u7560\u516B\u9262\u6E8C\u767A\u9197\u9AEA\u4F10\u7F70\u629C\u7B4F\u95A5\u9CE9\u567A\u5859\u86E4\u96BC\u4F34\u5224\u534A\u53CD\u53DB\u5E06\u642C\u6591\u677F\u6C3E\u6C4E\u7248\u72AF\u73ED\u7554\u7E41\u822C\u85E9\u8CA9\u7BC4\u91C6\u7169\u9812\u98EF\u633D\u6669\u756A\u76E4\u78D0\u8543\u86EE\u532A\u5351\u5426\u5983\u5E87\u5F7C\u60B2\u6249\u6279\u62AB\u6590\u6BD4\u6CCC\u75B2\u76AE\u7891\u79D8\u7DCB\u7F77\u80A5\u88AB\u8AB9\u8CBB\u907F\u975E\u98DB\u6A0B\u7C38\u5099\u5C3E\u5FAE\u6787\u6BD8\u7435\u7709\u7F8E\"],[\"c9a1\",\"\u9F3B\u67CA\u7A17\u5339\u758B\u9AED\u5F66\u819D\u83F1\u8098\u5F3C\u5FC5\u7562\u7B46\u903C\u6867\u59EB\u5A9B\u7D10\u767E\u8B2C\u4FF5\u5F6A\u6A19\u6C37\u6F02\u74E2\u7968\u8868\u8A55\u8C79\u5EDF\u63CF\u75C5\u79D2\u82D7\u9328\u92F2\u849C\u86ED\u9C2D\u54C1\u5F6C\u658C\u6D5C\u7015\u8CA7\u8CD3\u983B\u654F\u74F6\u4E0D\u4ED8\u57E0\u592B\u5A66\u5BCC\u51A8\u5E03\u5E9C\u6016\u6276\u6577\u65A7\u666E\u6D6E\u7236\u7B26\u8150\u819A\u8299\u8B5C\u8CA0\u8CE6\u8D74\u961C\u9644\u4FAE\u64AB\u6B66\u821E\u8461\u856A\u90E8\u5C01\u6953\u98A8\u847A\u8557\u4F0F\u526F\u5FA9\u5E45\u670D\"],[\"caa1\",\"\u798F\u8179\u8907\u8986\u6DF5\u5F17\u6255\u6CB8\u4ECF\u7269\u9B92\u5206\u543B\u5674\u58B3\u61A4\u626E\u711A\u596E\u7C89\u7CDE\u7D1B\u96F0\u6587\u805E\u4E19\u4F75\u5175\u5840\u5E63\u5E73\u5F0A\u67C4\u4E26\u853D\u9589\u965B\u7C73\u9801\u50FB\u58C1\u7656\u78A7\u5225\u77A5\u8511\u7B86\u504F\u5909\u7247\u7BC7\u7DE8\u8FBA\u8FD4\u904D\u4FBF\u52C9\u5A29\u5F01\u97AD\u4FDD\u8217\u92EA\u5703\u6355\u6B69\u752B\u88DC\u8F14\u7A42\u52DF\u5893\u6155\u620A\u66AE\u6BCD\u7C3F\u83E9\u5023\u4FF8\u5305\u5446\u5831\u5949\u5B9D\u5CF0\u5CEF\u5D29\u5E96\u62B1\u6367\u653E\u65B9\u670B\"],[\"cba1\",\"\u6CD5\u6CE1\u70F9\u7832\u7E2B\u80DE\u82B3\u840C\u84EC\u8702\u8912\u8A2A\u8C4A\u90A6\u92D2\u98FD\u9CF3\u9D6C\u4E4F\u4EA1\u508D\u5256\u574A\u59A8\u5E3D\u5FD8\u5FD9\u623F\u66B4\u671B\u67D0\u68D2\u5192\u7D21\u80AA\u81A8\u8B00\u8C8C\u8CBF\u927E\u9632\u5420\u982C\u5317\u50D5\u535C\u58A8\u64B2\u6734\u7267\u7766\u7A46\u91E6\u52C3\u6CA1\u6B86\u5800\u5E4C\u5954\u672C\u7FFB\u51E1\u76C6\u6469\u78E8\u9B54\u9EBB\u57CB\u59B9\u6627\u679A\u6BCE\u54E9\u69D9\u5E55\u819C\u6795\u9BAA\u67FE\u9C52\u685D\u4EA6\u4FE3\u53C8\u62B9\u672B\u6CAB\u8FC4\u4FAD\u7E6D\u9EBF\u4E07\u6162\u6E80\"],[\"cca1\",\"\u6F2B\u8513\u5473\u672A\u9B45\u5DF3\u7B95\u5CAC\u5BC6\u871C\u6E4A\u84D1\u7A14\u8108\u5999\u7C8D\u6C11\u7720\u52D9\u5922\u7121\u725F\u77DB\u9727\u9D61\u690B\u5A7F\u5A18\u51A5\u540D\u547D\u660E\u76DF\u8FF7\u9298\u9CF4\u59EA\u725D\u6EC5\u514D\u68C9\u7DBF\u7DEC\u9762\u9EBA\u6478\u6A21\u8302\u5984\u5B5F\u6BDB\u731B\u76F2\u7DB2\u8017\u8499\u5132\u6728\u9ED9\u76EE\u6762\u52FF\u9905\u5C24\u623B\u7C7E\u8CB0\u554F\u60B6\u7D0B\u9580\u5301\u4E5F\u51B6\u591C\u723A\u8036\u91CE\u5F25\u77E2\u5384\u5F79\u7D04\u85AC\u8A33\u8E8D\u9756\u67F3\u85AE\u9453\u6109\u6108\u6CB9\u7652\"],[\"cda1\",\"\u8AED\u8F38\u552F\u4F51\u512A\u52C7\u53CB\u5BA5\u5E7D\u60A0\u6182\u63D6\u6709\u67DA\u6E67\u6D8C\u7336\u7337\u7531\u7950\u88D5\u8A98\u904A\u9091\u90F5\u96C4\u878D\u5915\u4E88\u4F59\u4E0E\u8A89\u8F3F\u9810\u50AD\u5E7C\u5996\u5BB9\u5EB8\u63DA\u63FA\u64C1\u66DC\u694A\u69D8\u6D0B\u6EB6\u7194\u7528\u7AAF\u7F8A\u8000\u8449\u84C9\u8981\u8B21\u8E0A\u9065\u967D\u990A\u617E\u6291\u6B32\u6C83\u6D74\u7FCC\u7FFC\u6DC0\u7F85\u87BA\u88F8\u6765\u83B1\u983C\u96F7\u6D1B\u7D61\u843D\u916A\u4E71\u5375\u5D50\u6B04\u6FEB\u85CD\u862D\u89A7\u5229\u540F\u5C65\u674E\u68A8\u7406\u7483\"],[\"cea1\",\"\u75E2\u88CF\u88E1\u91CC\u96E2\u9678\u5F8B\u7387\u7ACB\u844E\u63A0\u7565\u5289\u6D41\u6E9C\u7409\u7559\u786B\u7C92\u9686\u7ADC\u9F8D\u4FB6\u616E\u65C5\u865C\u4E86\u4EAE\u50DA\u4E21\u51CC\u5BEE\u6599\u6881\u6DBC\u731F\u7642\u77AD\u7A1C\u7CE7\u826F\u8AD2\u907C\u91CF\u9675\u9818\u529B\u7DD1\u502B\u5398\u6797\u6DCB\u71D0\u7433\u81E8\u8F2A\u96A3\u9C57\u9E9F\u7460\u5841\u6D99\u7D2F\u985E\u4EE4\u4F36\u4F8B\u51B7\u52B1\u5DBA\u601C\u73B2\u793C\u82D3\u9234\u96B7\u96F6\u970A\u9E97\u9F62\u66A6\u6B74\u5217\u52A3\u70C8\u88C2\u5EC9\u604B\u6190\u6F23\u7149\u7C3E\u7DF4\u806F\"],[\"cfa1\",\"\u84EE\u9023\u932C\u5442\u9B6F\u6AD3\u7089\u8CC2\u8DEF\u9732\u52B4\u5A41\u5ECA\u5F04\u6717\u697C\u6994\u6D6A\u6F0F\u7262\u72FC\u7BED\u8001\u807E\u874B\u90CE\u516D\u9E93\u7984\u808B\u9332\u8AD6\u502D\u548C\u8A71\u6B6A\u8CC4\u8107\u60D1\u67A0\u9DF2\u4E99\u4E98\u9C10\u8A6B\u85C1\u8568\u6900\u6E7E\u7897\u8155\"],[\"d0a1\",\"\u5F0C\u4E10\u4E15\u4E2A\u4E31\u4E36\u4E3C\u4E3F\u4E42\u4E56\u4E58\u4E82\u4E85\u8C6B\u4E8A\u8212\u5F0D\u4E8E\u4E9E\u4E9F\u4EA0\u4EA2\u4EB0\u4EB3\u4EB6\u4ECE\u4ECD\u4EC4\u4EC6\u4EC2\u4ED7\u4EDE\u4EED\u4EDF\u4EF7\u4F09\u4F5A\u4F30\u4F5B\u4F5D\u4F57\u4F47\u4F76\u4F88\u4F8F\u4F98\u4F7B\u4F69\u4F70\u4F91\u4F6F\u4F86\u4F96\u5118\u4FD4\u4FDF\u4FCE\u4FD8\u4FDB\u4FD1\u4FDA\u4FD0\u4FE4\u4FE5\u501A\u5028\u5014\u502A\u5025\u5005\u4F1C\u4FF6\u5021\u5029\u502C\u4FFE\u4FEF\u5011\u5006\u5043\u5047\u6703\u5055\u5050\u5048\u505A\u5056\u506C\u5078\u5080\u509A\u5085\u50B4\u50B2\"],[\"d1a1\",\"\u50C9\u50CA\u50B3\u50C2\u50D6\u50DE\u50E5\u50ED\u50E3\u50EE\u50F9\u50F5\u5109\u5101\u5102\u5116\u5115\u5114\u511A\u5121\u513A\u5137\u513C\u513B\u513F\u5140\u5152\u514C\u5154\u5162\u7AF8\u5169\u516A\u516E\u5180\u5182\u56D8\u518C\u5189\u518F\u5191\u5193\u5195\u5196\u51A4\u51A6\u51A2\u51A9\u51AA\u51AB\u51B3\u51B1\u51B2\u51B0\u51B5\u51BD\u51C5\u51C9\u51DB\u51E0\u8655\u51E9\u51ED\u51F0\u51F5\u51FE\u5204\u520B\u5214\u520E\u5227\u522A\u522E\u5233\u5239\u524F\u5244\u524B\u524C\u525E\u5254\u526A\u5274\u5269\u5273\u527F\u527D\u528D\u5294\u5292\u5271\u5288\u5291\u8FA8\"],[\"d2a1\",\"\u8FA7\u52AC\u52AD\u52BC\u52B5\u52C1\u52CD\u52D7\u52DE\u52E3\u52E6\u98ED\u52E0\u52F3\u52F5\u52F8\u52F9\u5306\u5308\u7538\u530D\u5310\u530F\u5315\u531A\u5323\u532F\u5331\u5333\u5338\u5340\u5346\u5345\u4E17\u5349\u534D\u51D6\u535E\u5369\u536E\u5918\u537B\u5377\u5382\u5396\u53A0\u53A6\u53A5\u53AE\u53B0\u53B6\u53C3\u7C12\u96D9\u53DF\u66FC\u71EE\u53EE\u53E8\u53ED\u53FA\u5401\u543D\u5440\u542C\u542D\u543C\u542E\u5436\u5429\u541D\u544E\u548F\u5475\u548E\u545F\u5471\u5477\u5470\u5492\u547B\u5480\u5476\u5484\u5490\u5486\u54C7\u54A2\u54B8\u54A5\u54AC\u54C4\u54C8\u54A8\"],[\"d3a1\",\"\u54AB\u54C2\u54A4\u54BE\u54BC\u54D8\u54E5\u54E6\u550F\u5514\u54FD\u54EE\u54ED\u54FA\u54E2\u5539\u5540\u5563\u554C\u552E\u555C\u5545\u5556\u5557\u5538\u5533\u555D\u5599\u5580\u54AF\u558A\u559F\u557B\u557E\u5598\u559E\u55AE\u557C\u5583\u55A9\u5587\u55A8\u55DA\u55C5\u55DF\u55C4\u55DC\u55E4\u55D4\u5614\u55F7\u5616\u55FE\u55FD\u561B\u55F9\u564E\u5650\u71DF\u5634\u5636\u5632\u5638\u566B\u5664\u562F\u566C\u566A\u5686\u5680\u568A\u56A0\u5694\u568F\u56A5\u56AE\u56B6\u56B4\u56C2\u56BC\u56C1\u56C3\u56C0\u56C8\u56CE\u56D1\u56D3\u56D7\u56EE\u56F9\u5700\u56FF\u5704\u5709\"],[\"d4a1\",\"\u5708\u570B\u570D\u5713\u5718\u5716\u55C7\u571C\u5726\u5737\u5738\u574E\u573B\u5740\u574F\u5769\u57C0\u5788\u5761\u577F\u5789\u5793\u57A0\u57B3\u57A4\u57AA\u57B0\u57C3\u57C6\u57D4\u57D2\u57D3\u580A\u57D6\u57E3\u580B\u5819\u581D\u5872\u5821\u5862\u584B\u5870\u6BC0\u5852\u583D\u5879\u5885\u58B9\u589F\u58AB\u58BA\u58DE\u58BB\u58B8\u58AE\u58C5\u58D3\u58D1\u58D7\u58D9\u58D8\u58E5\u58DC\u58E4\u58DF\u58EF\u58FA\u58F9\u58FB\u58FC\u58FD\u5902\u590A\u5910\u591B\u68A6\u5925\u592C\u592D\u5932\u5938\u593E\u7AD2\u5955\u5950\u594E\u595A\u5958\u5962\u5960\u5967\u596C\u5969\"],[\"d5a1\",\"\u5978\u5981\u599D\u4F5E\u4FAB\u59A3\u59B2\u59C6\u59E8\u59DC\u598D\u59D9\u59DA\u5A25\u5A1F\u5A11\u5A1C\u5A09\u5A1A\u5A40\u5A6C\u5A49\u5A35\u5A36\u5A62\u5A6A\u5A9A\u5ABC\u5ABE\u5ACB\u5AC2\u5ABD\u5AE3\u5AD7\u5AE6\u5AE9\u5AD6\u5AFA\u5AFB\u5B0C\u5B0B\u5B16\u5B32\u5AD0\u5B2A\u5B36\u5B3E\u5B43\u5B45\u5B40\u5B51\u5B55\u5B5A\u5B5B\u5B65\u5B69\u5B70\u5B73\u5B75\u5B78\u6588\u5B7A\u5B80\u5B83\u5BA6\u5BB8\u5BC3\u5BC7\u5BC9\u5BD4\u5BD0\u5BE4\u5BE6\u5BE2\u5BDE\u5BE5\u5BEB\u5BF0\u5BF6\u5BF3\u5C05\u5C07\u5C08\u5C0D\u5C13\u5C20\u5C22\u5C28\u5C38\u5C39\u5C41\u5C46\u5C4E\u5C53\"],[\"d6a1\",\"\u5C50\u5C4F\u5B71\u5C6C\u5C6E\u4E62\u5C76\u5C79\u5C8C\u5C91\u5C94\u599B\u5CAB\u5CBB\u5CB6\u5CBC\u5CB7\u5CC5\u5CBE\u5CC7\u5CD9\u5CE9\u5CFD\u5CFA\u5CED\u5D8C\u5CEA\u5D0B\u5D15\u5D17\u5D5C\u5D1F\u5D1B\u5D11\u5D14\u5D22\u5D1A\u5D19\u5D18\u5D4C\u5D52\u5D4E\u5D4B\u5D6C\u5D73\u5D76\u5D87\u5D84\u5D82\u5DA2\u5D9D\u5DAC\u5DAE\u5DBD\u5D90\u5DB7\u5DBC\u5DC9\u5DCD\u5DD3\u5DD2\u5DD6\u5DDB\u5DEB\u5DF2\u5DF5\u5E0B\u5E1A\u5E19\u5E11\u5E1B\u5E36\u5E37\u5E44\u5E43\u5E40\u5E4E\u5E57\u5E54\u5E5F\u5E62\u5E64\u5E47\u5E75\u5E76\u5E7A\u9EBC\u5E7F\u5EA0\u5EC1\u5EC2\u5EC8\u5ED0\u5ECF\"],[\"d7a1\",\"\u5ED6\u5EE3\u5EDD\u5EDA\u5EDB\u5EE2\u5EE1\u5EE8\u5EE9\u5EEC\u5EF1\u5EF3\u5EF0\u5EF4\u5EF8\u5EFE\u5F03\u5F09\u5F5D\u5F5C\u5F0B\u5F11\u5F16\u5F29\u5F2D\u5F38\u5F41\u5F48\u5F4C\u5F4E\u5F2F\u5F51\u5F56\u5F57\u5F59\u5F61\u5F6D\u5F73\u5F77\u5F83\u5F82\u5F7F\u5F8A\u5F88\u5F91\u5F87\u5F9E\u5F99\u5F98\u5FA0\u5FA8\u5FAD\u5FBC\u5FD6\u5FFB\u5FE4\u5FF8\u5FF1\u5FDD\u60B3\u5FFF\u6021\u6060\u6019\u6010\u6029\u600E\u6031\u601B\u6015\u602B\u6026\u600F\u603A\u605A\u6041\u606A\u6077\u605F\u604A\u6046\u604D\u6063\u6043\u6064\u6042\u606C\u606B\u6059\u6081\u608D\u60E7\u6083\u609A\"],[\"d8a1\",\"\u6084\u609B\u6096\u6097\u6092\u60A7\u608B\u60E1\u60B8\u60E0\u60D3\u60B4\u5FF0\u60BD\u60C6\u60B5\u60D8\u614D\u6115\u6106\u60F6\u60F7\u6100\u60F4\u60FA\u6103\u6121\u60FB\u60F1\u610D\u610E\u6147\u613E\u6128\u6127\u614A\u613F\u613C\u612C\u6134\u613D\u6142\u6144\u6173\u6177\u6158\u6159\u615A\u616B\u6174\u616F\u6165\u6171\u615F\u615D\u6153\u6175\u6199\u6196\u6187\u61AC\u6194\u619A\u618A\u6191\u61AB\u61AE\u61CC\u61CA\u61C9\u61F7\u61C8\u61C3\u61C6\u61BA\u61CB\u7F79\u61CD\u61E6\u61E3\u61F6\u61FA\u61F4\u61FF\u61FD\u61FC\u61FE\u6200\u6208\u6209\u620D\u620C\u6214\u621B\"],[\"d9a1\",\"\u621E\u6221\u622A\u622E\u6230\u6232\u6233\u6241\u624E\u625E\u6263\u625B\u6260\u6268\u627C\u6282\u6289\u627E\u6292\u6293\u6296\u62D4\u6283\u6294\u62D7\u62D1\u62BB\u62CF\u62FF\u62C6\u64D4\u62C8\u62DC\u62CC\u62CA\u62C2\u62C7\u629B\u62C9\u630C\u62EE\u62F1\u6327\u6302\u6308\u62EF\u62F5\u6350\u633E\u634D\u641C\u634F\u6396\u638E\u6380\u63AB\u6376\u63A3\u638F\u6389\u639F\u63B5\u636B\u6369\u63BE\u63E9\u63C0\u63C6\u63E3\u63C9\u63D2\u63F6\u63C4\u6416\u6434\u6406\u6413\u6426\u6436\u651D\u6417\u6428\u640F\u6467\u646F\u6476\u644E\u652A\u6495\u6493\u64A5\u64A9\u6488\u64BC\"],[\"daa1\",\"\u64DA\u64D2\u64C5\u64C7\u64BB\u64D8\u64C2\u64F1\u64E7\u8209\u64E0\u64E1\u62AC\u64E3\u64EF\u652C\u64F6\u64F4\u64F2\u64FA\u6500\u64FD\u6518\u651C\u6505\u6524\u6523\u652B\u6534\u6535\u6537\u6536\u6538\u754B\u6548\u6556\u6555\u654D\u6558\u655E\u655D\u6572\u6578\u6582\u6583\u8B8A\u659B\u659F\u65AB\u65B7\u65C3\u65C6\u65C1\u65C4\u65CC\u65D2\u65DB\u65D9\u65E0\u65E1\u65F1\u6772\u660A\u6603\u65FB\u6773\u6635\u6636\u6634\u661C\u664F\u6644\u6649\u6641\u665E\u665D\u6664\u6667\u6668\u665F\u6662\u6670\u6683\u6688\u668E\u6689\u6684\u6698\u669D\u66C1\u66B9\u66C9\u66BE\u66BC\"],[\"dba1\",\"\u66C4\u66B8\u66D6\u66DA\u66E0\u663F\u66E6\u66E9\u66F0\u66F5\u66F7\u670F\u6716\u671E\u6726\u6727\u9738\u672E\u673F\u6736\u6741\u6738\u6737\u6746\u675E\u6760\u6759\u6763\u6764\u6789\u6770\u67A9\u677C\u676A\u678C\u678B\u67A6\u67A1\u6785\u67B7\u67EF\u67B4\u67EC\u67B3\u67E9\u67B8\u67E4\u67DE\u67DD\u67E2\u67EE\u67B9\u67CE\u67C6\u67E7\u6A9C\u681E\u6846\u6829\u6840\u684D\u6832\u684E\u68B3\u682B\u6859\u6863\u6877\u687F\u689F\u688F\u68AD\u6894\u689D\u689B\u6883\u6AAE\u68B9\u6874\u68B5\u68A0\u68BA\u690F\u688D\u687E\u6901\u68CA\u6908\u68D8\u6922\u6926\u68E1\u690C\u68CD\"],[\"dca1\",\"\u68D4\u68E7\u68D5\u6936\u6912\u6904\u68D7\u68E3\u6925\u68F9\u68E0\u68EF\u6928\u692A\u691A\u6923\u6921\u68C6\u6979\u6977\u695C\u6978\u696B\u6954\u697E\u696E\u6939\u6974\u693D\u6959\u6930\u6961\u695E\u695D\u6981\u696A\u69B2\u69AE\u69D0\u69BF\u69C1\u69D3\u69BE\u69CE\u5BE8\u69CA\u69DD\u69BB\u69C3\u69A7\u6A2E\u6991\u69A0\u699C\u6995\u69B4\u69DE\u69E8\u6A02\u6A1B\u69FF\u6B0A\u69F9\u69F2\u69E7\u6A05\u69B1\u6A1E\u69ED\u6A14\u69EB\u6A0A\u6A12\u6AC1\u6A23\u6A13\u6A44\u6A0C\u6A72\u6A36\u6A78\u6A47\u6A62\u6A59\u6A66\u6A48\u6A38\u6A22\u6A90\u6A8D\u6AA0\u6A84\u6AA2\u6AA3\"],[\"dda1\",\"\u6A97\u8617\u6ABB\u6AC3\u6AC2\u6AB8\u6AB3\u6AAC\u6ADE\u6AD1\u6ADF\u6AAA\u6ADA\u6AEA\u6AFB\u6B05\u8616\u6AFA\u6B12\u6B16\u9B31\u6B1F\u6B38\u6B37\u76DC\u6B39\u98EE\u6B47\u6B43\u6B49\u6B50\u6B59\u6B54\u6B5B\u6B5F\u6B61\u6B78\u6B79\u6B7F\u6B80\u6B84\u6B83\u6B8D\u6B98\u6B95\u6B9E\u6BA4\u6BAA\u6BAB\u6BAF\u6BB2\u6BB1\u6BB3\u6BB7\u6BBC\u6BC6\u6BCB\u6BD3\u6BDF\u6BEC\u6BEB\u6BF3\u6BEF\u9EBE\u6C08\u6C13\u6C14\u6C1B\u6C24\u6C23\u6C5E\u6C55\u6C62\u6C6A\u6C82\u6C8D\u6C9A\u6C81\u6C9B\u6C7E\u6C68\u6C73\u6C92\u6C90\u6CC4\u6CF1\u6CD3\u6CBD\u6CD7\u6CC5\u6CDD\u6CAE\u6CB1\u6CBE\"],[\"dea1\",\"\u6CBA\u6CDB\u6CEF\u6CD9\u6CEA\u6D1F\u884D\u6D36\u6D2B\u6D3D\u6D38\u6D19\u6D35\u6D33\u6D12\u6D0C\u6D63\u6D93\u6D64\u6D5A\u6D79\u6D59\u6D8E\u6D95\u6FE4\u6D85\u6DF9\u6E15\u6E0A\u6DB5\u6DC7\u6DE6\u6DB8\u6DC6\u6DEC\u6DDE\u6DCC\u6DE8\u6DD2\u6DC5\u6DFA\u6DD9\u6DE4\u6DD5\u6DEA\u6DEE\u6E2D\u6E6E\u6E2E\u6E19\u6E72\u6E5F\u6E3E\u6E23\u6E6B\u6E2B\u6E76\u6E4D\u6E1F\u6E43\u6E3A\u6E4E\u6E24\u6EFF\u6E1D\u6E38\u6E82\u6EAA\u6E98\u6EC9\u6EB7\u6ED3\u6EBD\u6EAF\u6EC4\u6EB2\u6ED4\u6ED5\u6E8F\u6EA5\u6EC2\u6E9F\u6F41\u6F11\u704C\u6EEC\u6EF8\u6EFE\u6F3F\u6EF2\u6F31\u6EEF\u6F32\u6ECC\"],[\"dfa1\",\"\u6F3E\u6F13\u6EF7\u6F86\u6F7A\u6F78\u6F81\u6F80\u6F6F\u6F5B\u6FF3\u6F6D\u6F82\u6F7C\u6F58\u6F8E\u6F91\u6FC2\u6F66\u6FB3\u6FA3\u6FA1\u6FA4\u6FB9\u6FC6\u6FAA\u6FDF\u6FD5\u6FEC\u6FD4\u6FD8\u6FF1\u6FEE\u6FDB\u7009\u700B\u6FFA\u7011\u7001\u700F\u6FFE\u701B\u701A\u6F74\u701D\u7018\u701F\u7030\u703E\u7032\u7051\u7063\u7099\u7092\u70AF\u70F1\u70AC\u70B8\u70B3\u70AE\u70DF\u70CB\u70DD\u70D9\u7109\u70FD\u711C\u7119\u7165\u7155\u7188\u7166\u7162\u714C\u7156\u716C\u718F\u71FB\u7184\u7195\u71A8\u71AC\u71D7\u71B9\u71BE\u71D2\u71C9\u71D4\u71CE\u71E0\u71EC\u71E7\u71F5\u71FC\"],[\"e0a1\",\"\u71F9\u71FF\u720D\u7210\u721B\u7228\u722D\u722C\u7230\u7232\u723B\u723C\u723F\u7240\u7246\u724B\u7258\u7274\u727E\u7282\u7281\u7287\u7292\u7296\u72A2\u72A7\u72B9\u72B2\u72C3\u72C6\u72C4\u72CE\u72D2\u72E2\u72E0\u72E1\u72F9\u72F7\u500F\u7317\u730A\u731C\u7316\u731D\u7334\u732F\u7329\u7325\u733E\u734E\u734F\u9ED8\u7357\u736A\u7368\u7370\u7378\u7375\u737B\u737A\u73C8\u73B3\u73CE\u73BB\u73C0\u73E5\u73EE\u73DE\u74A2\u7405\u746F\u7425\u73F8\u7432\u743A\u7455\u743F\u745F\u7459\u7441\u745C\u7469\u7470\u7463\u746A\u7476\u747E\u748B\u749E\u74A7\u74CA\u74CF\u74D4\u73F1\"],[\"e1a1\",\"\u74E0\u74E3\u74E7\u74E9\u74EE\u74F2\u74F0\u74F1\u74F8\u74F7\u7504\u7503\u7505\u750C\u750E\u750D\u7515\u7513\u751E\u7526\u752C\u753C\u7544\u754D\u754A\u7549\u755B\u7546\u755A\u7569\u7564\u7567\u756B\u756D\u7578\u7576\u7586\u7587\u7574\u758A\u7589\u7582\u7594\u759A\u759D\u75A5\u75A3\u75C2\u75B3\u75C3\u75B5\u75BD\u75B8\u75BC\u75B1\u75CD\u75CA\u75D2\u75D9\u75E3\u75DE\u75FE\u75FF\u75FC\u7601\u75F0\u75FA\u75F2\u75F3\u760B\u760D\u7609\u761F\u7627\u7620\u7621\u7622\u7624\u7634\u7630\u763B\u7647\u7648\u7646\u765C\u7658\u7661\u7662\u7668\u7669\u766A\u7667\u766C\u7670\"],[\"e2a1\",\"\u7672\u7676\u7678\u767C\u7680\u7683\u7688\u768B\u768E\u7696\u7693\u7699\u769A\u76B0\u76B4\u76B8\u76B9\u76BA\u76C2\u76CD\u76D6\u76D2\u76DE\u76E1\u76E5\u76E7\u76EA\u862F\u76FB\u7708\u7707\u7704\u7729\u7724\u771E\u7725\u7726\u771B\u7737\u7738\u7747\u775A\u7768\u776B\u775B\u7765\u777F\u777E\u7779\u778E\u778B\u7791\u77A0\u779E\u77B0\u77B6\u77B9\u77BF\u77BC\u77BD\u77BB\u77C7\u77CD\u77D7\u77DA\u77DC\u77E3\u77EE\u77FC\u780C\u7812\u7926\u7820\u792A\u7845\u788E\u7874\u7886\u787C\u789A\u788C\u78A3\u78B5\u78AA\u78AF\u78D1\u78C6\u78CB\u78D4\u78BE\u78BC\u78C5\u78CA\u78EC\"],[\"e3a1\",\"\u78E7\u78DA\u78FD\u78F4\u7907\u7912\u7911\u7919\u792C\u792B\u7940\u7960\u7957\u795F\u795A\u7955\u7953\u797A\u797F\u798A\u799D\u79A7\u9F4B\u79AA\u79AE\u79B3\u79B9\u79BA\u79C9\u79D5\u79E7\u79EC\u79E1\u79E3\u7A08\u7A0D\u7A18\u7A19\u7A20\u7A1F\u7980\u7A31\u7A3B\u7A3E\u7A37\u7A43\u7A57\u7A49\u7A61\u7A62\u7A69\u9F9D\u7A70\u7A79\u7A7D\u7A88\u7A97\u7A95\u7A98\u7A96\u7AA9\u7AC8\u7AB0\u7AB6\u7AC5\u7AC4\u7ABF\u9083\u7AC7\u7ACA\u7ACD\u7ACF\u7AD5\u7AD3\u7AD9\u7ADA\u7ADD\u7AE1\u7AE2\u7AE6\u7AED\u7AF0\u7B02\u7B0F\u7B0A\u7B06\u7B33\u7B18\u7B19\u7B1E\u7B35\u7B28\u7B36\u7B50\"],[\"e4a1\",\"\u7B7A\u7B04\u7B4D\u7B0B\u7B4C\u7B45\u7B75\u7B65\u7B74\u7B67\u7B70\u7B71\u7B6C\u7B6E\u7B9D\u7B98\u7B9F\u7B8D\u7B9C\u7B9A\u7B8B\u7B92\u7B8F\u7B5D\u7B99\u7BCB\u7BC1\u7BCC\u7BCF\u7BB4\u7BC6\u7BDD\u7BE9\u7C11\u7C14\u7BE6\u7BE5\u7C60\u7C00\u7C07\u7C13\u7BF3\u7BF7\u7C17\u7C0D\u7BF6\u7C23\u7C27\u7C2A\u7C1F\u7C37\u7C2B\u7C3D\u7C4C\u7C43\u7C54\u7C4F\u7C40\u7C50\u7C58\u7C5F\u7C64\u7C56\u7C65\u7C6C\u7C75\u7C83\u7C90\u7CA4\u7CAD\u7CA2\u7CAB\u7CA1\u7CA8\u7CB3\u7CB2\u7CB1\u7CAE\u7CB9\u7CBD\u7CC0\u7CC5\u7CC2\u7CD8\u7CD2\u7CDC\u7CE2\u9B3B\u7CEF\u7CF2\u7CF4\u7CF6\u7CFA\u7D06\"],[\"e5a1\",\"\u7D02\u7D1C\u7D15\u7D0A\u7D45\u7D4B\u7D2E\u7D32\u7D3F\u7D35\u7D46\u7D73\u7D56\u7D4E\u7D72\u7D68\u7D6E\u7D4F\u7D63\u7D93\u7D89\u7D5B\u7D8F\u7D7D\u7D9B\u7DBA\u7DAE\u7DA3\u7DB5\u7DC7\u7DBD\u7DAB\u7E3D\u7DA2\u7DAF\u7DDC\u7DB8\u7D9F\u7DB0\u7DD8\u7DDD\u7DE4\u7DDE\u7DFB\u7DF2\u7DE1\u7E05\u7E0A\u7E23\u7E21\u7E12\u7E31\u7E1F\u7E09\u7E0B\u7E22\u7E46\u7E66\u7E3B\u7E35\u7E39\u7E43\u7E37\u7E32\u7E3A\u7E67\u7E5D\u7E56\u7E5E\u7E59\u7E5A\u7E79\u7E6A\u7E69\u7E7C\u7E7B\u7E83\u7DD5\u7E7D\u8FAE\u7E7F\u7E88\u7E89\u7E8C\u7E92\u7E90\u7E93\u7E94\u7E96\u7E8E\u7E9B\u7E9C\u7F38\u7F3A\"],[\"e6a1\",\"\u7F45\u7F4C\u7F4D\u7F4E\u7F50\u7F51\u7F55\u7F54\u7F58\u7F5F\u7F60\u7F68\u7F69\u7F67\u7F78\u7F82\u7F86\u7F83\u7F88\u7F87\u7F8C\u7F94\u7F9E\u7F9D\u7F9A\u7FA3\u7FAF\u7FB2\u7FB9\u7FAE\u7FB6\u7FB8\u8B71\u7FC5\u7FC6\u7FCA\u7FD5\u7FD4\u7FE1\u7FE6\u7FE9\u7FF3\u7FF9\u98DC\u8006\u8004\u800B\u8012\u8018\u8019\u801C\u8021\u8028\u803F\u803B\u804A\u8046\u8052\u8058\u805A\u805F\u8062\u8068\u8073\u8072\u8070\u8076\u8079\u807D\u807F\u8084\u8086\u8085\u809B\u8093\u809A\u80AD\u5190\u80AC\u80DB\u80E5\u80D9\u80DD\u80C4\u80DA\u80D6\u8109\u80EF\u80F1\u811B\u8129\u8123\u812F\u814B\"],[\"e7a1\",\"\u968B\u8146\u813E\u8153\u8151\u80FC\u8171\u816E\u8165\u8166\u8174\u8183\u8188\u818A\u8180\u8182\u81A0\u8195\u81A4\u81A3\u815F\u8193\u81A9\u81B0\u81B5\u81BE\u81B8\u81BD\u81C0\u81C2\u81BA\u81C9\u81CD\u81D1\u81D9\u81D8\u81C8\u81DA\u81DF\u81E0\u81E7\u81FA\u81FB\u81FE\u8201\u8202\u8205\u8207\u820A\u820D\u8210\u8216\u8229\u822B\u8238\u8233\u8240\u8259\u8258\u825D\u825A\u825F\u8264\u8262\u8268\u826A\u826B\u822E\u8271\u8277\u8278\u827E\u828D\u8292\u82AB\u829F\u82BB\u82AC\u82E1\u82E3\u82DF\u82D2\u82F4\u82F3\u82FA\u8393\u8303\u82FB\u82F9\u82DE\u8306\u82DC\u8309\u82D9\"],[\"e8a1\",\"\u8335\u8334\u8316\u8332\u8331\u8340\u8339\u8350\u8345\u832F\u832B\u8317\u8318\u8385\u839A\u83AA\u839F\u83A2\u8396\u8323\u838E\u8387\u838A\u837C\u83B5\u8373\u8375\u83A0\u8389\u83A8\u83F4\u8413\u83EB\u83CE\u83FD\u8403\u83D8\u840B\u83C1\u83F7\u8407\u83E0\u83F2\u840D\u8422\u8420\u83BD\u8438\u8506\u83FB\u846D\u842A\u843C\u855A\u8484\u8477\u846B\u84AD\u846E\u8482\u8469\u8446\u842C\u846F\u8479\u8435\u84CA\u8462\u84B9\u84BF\u849F\u84D9\u84CD\u84BB\u84DA\u84D0\u84C1\u84C6\u84D6\u84A1\u8521\u84FF\u84F4\u8517\u8518\u852C\u851F\u8515\u8514\u84FC\u8540\u8563\u8558\u8548\"],[\"e9a1\",\"\u8541\u8602\u854B\u8555\u8580\u85A4\u8588\u8591\u858A\u85A8\u856D\u8594\u859B\u85EA\u8587\u859C\u8577\u857E\u8590\u85C9\u85BA\u85CF\u85B9\u85D0\u85D5\u85DD\u85E5\u85DC\u85F9\u860A\u8613\u860B\u85FE\u85FA\u8606\u8622\u861A\u8630\u863F\u864D\u4E55\u8654\u865F\u8667\u8671\u8693\u86A3\u86A9\u86AA\u868B\u868C\u86B6\u86AF\u86C4\u86C6\u86B0\u86C9\u8823\u86AB\u86D4\u86DE\u86E9\u86EC\u86DF\u86DB\u86EF\u8712\u8706\u8708\u8700\u8703\u86FB\u8711\u8709\u870D\u86F9\u870A\u8734\u873F\u8737\u873B\u8725\u8729\u871A\u8760\u875F\u8778\u874C\u874E\u8774\u8757\u8768\u876E\u8759\"],[\"eaa1\",\"\u8753\u8763\u876A\u8805\u87A2\u879F\u8782\u87AF\u87CB\u87BD\u87C0\u87D0\u96D6\u87AB\u87C4\u87B3\u87C7\u87C6\u87BB\u87EF\u87F2\u87E0\u880F\u880D\u87FE\u87F6\u87F7\u880E\u87D2\u8811\u8816\u8815\u8822\u8821\u8831\u8836\u8839\u8827\u883B\u8844\u8842\u8852\u8859\u885E\u8862\u886B\u8881\u887E\u889E\u8875\u887D\u88B5\u8872\u8882\u8897\u8892\u88AE\u8899\u88A2\u888D\u88A4\u88B0\u88BF\u88B1\u88C3\u88C4\u88D4\u88D8\u88D9\u88DD\u88F9\u8902\u88FC\u88F4\u88E8\u88F2\u8904\u890C\u890A\u8913\u8943\u891E\u8925\u892A\u892B\u8941\u8944\u893B\u8936\u8938\u894C\u891D\u8960\u895E\"],[\"eba1\",\"\u8966\u8964\u896D\u896A\u896F\u8974\u8977\u897E\u8983\u8988\u898A\u8993\u8998\u89A1\u89A9\u89A6\u89AC\u89AF\u89B2\u89BA\u89BD\u89BF\u89C0\u89DA\u89DC\u89DD\u89E7\u89F4\u89F8\u8A03\u8A16\u8A10\u8A0C\u8A1B\u8A1D\u8A25\u8A36\u8A41\u8A5B\u8A52\u8A46\u8A48\u8A7C\u8A6D\u8A6C\u8A62\u8A85\u8A82\u8A84\u8AA8\u8AA1\u8A91\u8AA5\u8AA6\u8A9A\u8AA3\u8AC4\u8ACD\u8AC2\u8ADA\u8AEB\u8AF3\u8AE7\u8AE4\u8AF1\u8B14\u8AE0\u8AE2\u8AF7\u8ADE\u8ADB\u8B0C\u8B07\u8B1A\u8AE1\u8B16\u8B10\u8B17\u8B20\u8B33\u97AB\u8B26\u8B2B\u8B3E\u8B28\u8B41\u8B4C\u8B4F\u8B4E\u8B49\u8B56\u8B5B\u8B5A\u8B6B\"],[\"eca1\",\"\u8B5F\u8B6C\u8B6F\u8B74\u8B7D\u8B80\u8B8C\u8B8E\u8B92\u8B93\u8B96\u8B99\u8B9A\u8C3A\u8C41\u8C3F\u8C48\u8C4C\u8C4E\u8C50\u8C55\u8C62\u8C6C\u8C78\u8C7A\u8C82\u8C89\u8C85\u8C8A\u8C8D\u8C8E\u8C94\u8C7C\u8C98\u621D\u8CAD\u8CAA\u8CBD\u8CB2\u8CB3\u8CAE\u8CB6\u8CC8\u8CC1\u8CE4\u8CE3\u8CDA\u8CFD\u8CFA\u8CFB\u8D04\u8D05\u8D0A\u8D07\u8D0F\u8D0D\u8D10\u9F4E\u8D13\u8CCD\u8D14\u8D16\u8D67\u8D6D\u8D71\u8D73\u8D81\u8D99\u8DC2\u8DBE\u8DBA\u8DCF\u8DDA\u8DD6\u8DCC\u8DDB\u8DCB\u8DEA\u8DEB\u8DDF\u8DE3\u8DFC\u8E08\u8E09\u8DFF\u8E1D\u8E1E\u8E10\u8E1F\u8E42\u8E35\u8E30\u8E34\u8E4A\"],[\"eda1\",\"\u8E47\u8E49\u8E4C\u8E50\u8E48\u8E59\u8E64\u8E60\u8E2A\u8E63\u8E55\u8E76\u8E72\u8E7C\u8E81\u8E87\u8E85\u8E84\u8E8B\u8E8A\u8E93\u8E91\u8E94\u8E99\u8EAA\u8EA1\u8EAC\u8EB0\u8EC6\u8EB1\u8EBE\u8EC5\u8EC8\u8ECB\u8EDB\u8EE3\u8EFC\u8EFB\u8EEB\u8EFE\u8F0A\u8F05\u8F15\u8F12\u8F19\u8F13\u8F1C\u8F1F\u8F1B\u8F0C\u8F26\u8F33\u8F3B\u8F39\u8F45\u8F42\u8F3E\u8F4C\u8F49\u8F46\u8F4E\u8F57\u8F5C\u8F62\u8F63\u8F64\u8F9C\u8F9F\u8FA3\u8FAD\u8FAF\u8FB7\u8FDA\u8FE5\u8FE2\u8FEA\u8FEF\u9087\u8FF4\u9005\u8FF9\u8FFA\u9011\u9015\u9021\u900D\u901E\u9016\u900B\u9027\u9036\u9035\u9039\u8FF8\"],[\"eea1\",\"\u904F\u9050\u9051\u9052\u900E\u9049\u903E\u9056\u9058\u905E\u9068\u906F\u9076\u96A8\u9072\u9082\u907D\u9081\u9080\u908A\u9089\u908F\u90A8\u90AF\u90B1\u90B5\u90E2\u90E4\u6248\u90DB\u9102\u9112\u9119\u9132\u9130\u914A\u9156\u9158\u9163\u9165\u9169\u9173\u9172\u918B\u9189\u9182\u91A2\u91AB\u91AF\u91AA\u91B5\u91B4\u91BA\u91C0\u91C1\u91C9\u91CB\u91D0\u91D6\u91DF\u91E1\u91DB\u91FC\u91F5\u91F6\u921E\u91FF\u9214\u922C\u9215\u9211\u925E\u9257\u9245\u9249\u9264\u9248\u9295\u923F\u924B\u9250\u929C\u9296\u9293\u929B\u925A\u92CF\u92B9\u92B7\u92E9\u930F\u92FA\u9344\u932E\"],[\"efa1\",\"\u9319\u9322\u931A\u9323\u933A\u9335\u933B\u935C\u9360\u937C\u936E\u9356\u93B0\u93AC\u93AD\u9394\u93B9\u93D6\u93D7\u93E8\u93E5\u93D8\u93C3\u93DD\u93D0\u93C8\u93E4\u941A\u9414\u9413\u9403\u9407\u9410\u9436\u942B\u9435\u9421\u943A\u9441\u9452\u9444\u945B\u9460\u9462\u945E\u946A\u9229\u9470\u9475\u9477\u947D\u945A\u947C\u947E\u9481\u947F\u9582\u9587\u958A\u9594\u9596\u9598\u9599\u95A0\u95A8\u95A7\u95AD\u95BC\u95BB\u95B9\u95BE\u95CA\u6FF6\u95C3\u95CD\u95CC\u95D5\u95D4\u95D6\u95DC\u95E1\u95E5\u95E2\u9621\u9628\u962E\u962F\u9642\u964C\u964F\u964B\u9677\u965C\u965E\"],[\"f0a1\",\"\u965D\u965F\u9666\u9672\u966C\u968D\u9698\u9695\u9697\u96AA\u96A7\u96B1\u96B2\u96B0\u96B4\u96B6\u96B8\u96B9\u96CE\u96CB\u96C9\u96CD\u894D\u96DC\u970D\u96D5\u96F9\u9704\u9706\u9708\u9713\u970E\u9711\u970F\u9716\u9719\u9724\u972A\u9730\u9739\u973D\u973E\u9744\u9746\u9748\u9742\u9749\u975C\u9760\u9764\u9766\u9768\u52D2\u976B\u9771\u9779\u9785\u977C\u9781\u977A\u9786\u978B\u978F\u9790\u979C\u97A8\u97A6\u97A3\u97B3\u97B4\u97C3\u97C6\u97C8\u97CB\u97DC\u97ED\u9F4F\u97F2\u7ADF\u97F6\u97F5\u980F\u980C\u9838\u9824\u9821\u9837\u983D\u9846\u984F\u984B\u986B\u986F\u9870\"],[\"f1a1\",\"\u9871\u9874\u9873\u98AA\u98AF\u98B1\u98B6\u98C4\u98C3\u98C6\u98E9\u98EB\u9903\u9909\u9912\u9914\u9918\u9921\u991D\u991E\u9924\u9920\u992C\u992E\u993D\u993E\u9942\u9949\u9945\u9950\u994B\u9951\u9952\u994C\u9955\u9997\u9998\u99A5\u99AD\u99AE\u99BC\u99DF\u99DB\u99DD\u99D8\u99D1\u99ED\u99EE\u99F1\u99F2\u99FB\u99F8\u9A01\u9A0F\u9A05\u99E2\u9A19\u9A2B\u9A37\u9A45\u9A42\u9A40\u9A43\u9A3E\u9A55\u9A4D\u9A5B\u9A57\u9A5F\u9A62\u9A65\u9A64\u9A69\u9A6B\u9A6A\u9AAD\u9AB0\u9ABC\u9AC0\u9ACF\u9AD1\u9AD3\u9AD4\u9ADE\u9ADF\u9AE2\u9AE3\u9AE6\u9AEF\u9AEB\u9AEE\u9AF4\u9AF1\u9AF7\"],[\"f2a1\",\"\u9AFB\u9B06\u9B18\u9B1A\u9B1F\u9B22\u9B23\u9B25\u9B27\u9B28\u9B29\u9B2A\u9B2E\u9B2F\u9B32\u9B44\u9B43\u9B4F\u9B4D\u9B4E\u9B51\u9B58\u9B74\u9B93\u9B83\u9B91\u9B96\u9B97\u9B9F\u9BA0\u9BA8\u9BB4\u9BC0\u9BCA\u9BB9\u9BC6\u9BCF\u9BD1\u9BD2\u9BE3\u9BE2\u9BE4\u9BD4\u9BE1\u9C3A\u9BF2\u9BF1\u9BF0\u9C15\u9C14\u9C09\u9C13\u9C0C\u9C06\u9C08\u9C12\u9C0A\u9C04\u9C2E\u9C1B\u9C25\u9C24\u9C21\u9C30\u9C47\u9C32\u9C46\u9C3E\u9C5A\u9C60\u9C67\u9C76\u9C78\u9CE7\u9CEC\u9CF0\u9D09\u9D08\u9CEB\u9D03\u9D06\u9D2A\u9D26\u9DAF\u9D23\u9D1F\u9D44\u9D15\u9D12\u9D41\u9D3F\u9D3E\u9D46\u9D48\"],[\"f3a1\",\"\u9D5D\u9D5E\u9D64\u9D51\u9D50\u9D59\u9D72\u9D89\u9D87\u9DAB\u9D6F\u9D7A\u9D9A\u9DA4\u9DA9\u9DB2\u9DC4\u9DC1\u9DBB\u9DB8\u9DBA\u9DC6\u9DCF\u9DC2\u9DD9\u9DD3\u9DF8\u9DE6\u9DED\u9DEF\u9DFD\u9E1A\u9E1B\u9E1E\u9E75\u9E79\u9E7D\u9E81\u9E88\u9E8B\u9E8C\u9E92\u9E95\u9E91\u9E9D\u9EA5\u9EA9\u9EB8\u9EAA\u9EAD\u9761\u9ECC\u9ECE\u9ECF\u9ED0\u9ED4\u9EDC\u9EDE\u9EDD\u9EE0\u9EE5\u9EE8\u9EEF\u9EF4\u9EF6\u9EF7\u9EF9\u9EFB\u9EFC\u9EFD\u9F07\u9F08\u76B7\u9F15\u9F21\u9F2C\u9F3E\u9F4A\u9F52\u9F54\u9F63\u9F5F\u9F60\u9F61\u9F66\u9F67\u9F6C\u9F6A\u9F77\u9F72\u9F76\u9F95\u9F9C\u9FA0\"],[\"f4a1\",\"\u582F\u69C7\u9059\u7464\u51DC\u7199\"],[\"f9a1\",\"\u7E8A\u891C\u9348\u9288\u84DC\u4FC9\u70BB\u6631\u68C8\u92F9\u66FB\u5F45\u4E28\u4EE1\u4EFC\u4F00\u4F03\u4F39\u4F56\u4F92\u4F8A\u4F9A\u4F94\u4FCD\u5040\u5022\u4FFF\u501E\u5046\u5070\u5042\u5094\u50F4\u50D8\u514A\u5164\u519D\u51BE\u51EC\u5215\u529C\u52A6\u52C0\u52DB\u5300\u5307\u5324\u5372\u5393\u53B2\u53DD\uFA0E\u549C\u548A\u54A9\u54FF\u5586\u5759\u5765\u57AC\u57C8\u57C7\uFA0F\uFA10\u589E\u58B2\u590B\u5953\u595B\u595D\u5963\u59A4\u59BA\u5B56\u5BC0\u752F\u5BD8\u5BEC\u5C1E\u5CA6\u5CBA\u5CF5\u5D27\u5D53\uFA11\u5D42\u5D6D\u5DB8\u5DB9\u5DD0\u5F21\u5F34\u5F67\u5FB7\"],[\"faa1\",\"\u5FDE\u605D\u6085\u608A\u60DE\u60D5\u6120\u60F2\u6111\u6137\u6130\u6198\u6213\u62A6\u63F5\u6460\u649D\u64CE\u654E\u6600\u6615\u663B\u6609\u662E\u661E\u6624\u6665\u6657\u6659\uFA12\u6673\u6699\u66A0\u66B2\u66BF\u66FA\u670E\uF929\u6766\u67BB\u6852\u67C0\u6801\u6844\u68CF\uFA13\u6968\uFA14\u6998\u69E2\u6A30\u6A6B\u6A46\u6A73\u6A7E\u6AE2\u6AE4\u6BD6\u6C3F\u6C5C\u6C86\u6C6F\u6CDA\u6D04\u6D87\u6D6F\u6D96\u6DAC\u6DCF\u6DF8\u6DF2\u6DFC\u6E39\u6E5C\u6E27\u6E3C\u6EBF\u6F88\u6FB5\u6FF5\u7005\u7007\u7028\u7085\u70AB\u710F\u7104\u715C\u7146\u7147\uFA15\u71C1\u71FE\u72B1\"],[\"fba1\",\"\u72BE\u7324\uFA16\u7377\u73BD\u73C9\u73D6\u73E3\u73D2\u7407\u73F5\u7426\u742A\u7429\u742E\u7462\u7489\u749F\u7501\u756F\u7682\u769C\u769E\u769B\u76A6\uFA17\u7746\u52AF\u7821\u784E\u7864\u787A\u7930\uFA18\uFA19\uFA1A\u7994\uFA1B\u799B\u7AD1\u7AE7\uFA1C\u7AEB\u7B9E\uFA1D\u7D48\u7D5C\u7DB7\u7DA0\u7DD6\u7E52\u7F47\u7FA1\uFA1E\u8301\u8362\u837F\u83C7\u83F6\u8448\u84B4\u8553\u8559\u856B\uFA1F\u85B0\uFA20\uFA21\u8807\u88F5\u8A12\u8A37\u8A79\u8AA7\u8ABE\u8ADF\uFA22\u8AF6\u8B53\u8B7F\u8CF0\u8CF4\u8D12\u8D76\uFA23\u8ECF\uFA24\uFA25\u9067\u90DE\uFA26\u9115\u9127\u91DA\"],[\"fca1\",\"\u91D7\u91DE\u91ED\u91EE\u91E4\u91E5\u9206\u9210\u920A\u923A\u9240\u923C\u924E\u9259\u9251\u9239\u9267\u92A7\u9277\u9278\u92E7\u92D7\u92D9\u92D0\uFA27\u92D5\u92E0\u92D3\u9325\u9321\u92FB\uFA28\u931E\u92FF\u931D\u9302\u9370\u9357\u93A4\u93C6\u93DE\u93F8\u9431\u9445\u9448\u9592\uF9DC\uFA29\u969D\u96AF\u9733\u973B\u9743\u974D\u974F\u9751\u9755\u9857\u9865\uFA2A\uFA2B\u9927\uFA2C\u999E\u9A4E\u9AD9\u9ADC\u9B75\u9B72\u9B8F\u9BB1\u9BBB\u9C00\u9D70\u9D6B\uFA2D\u9E19\u9ED1\"],[\"fcf1\",\"\u2170\",9,\"\uFFE2\uFFE4\uFF07\uFF02\"],[\"8fa2af\",\"\u02D8\u02C7\xB8\u02D9\u02DD\xAF\u02DB\u02DA\uFF5E\u0384\u0385\"],[\"8fa2c2\",\"\xA1\xA6\xBF\"],[\"8fa2eb\",\"\xBA\xAA\xA9\xAE\u2122\xA4\u2116\"],[\"8fa6e1\",\"\u0386\u0388\u0389\u038A\u03AA\"],[\"8fa6e7\",\"\u038C\"],[\"8fa6e9\",\"\u038E\u03AB\"],[\"8fa6ec\",\"\u038F\"],[\"8fa6f1\",\"\u03AC\u03AD\u03AE\u03AF\u03CA\u0390\u03CC\u03C2\u03CD\u03CB\u03B0\u03CE\"],[\"8fa7c2\",\"\u0402\",10,\"\u040E\u040F\"],[\"8fa7f2\",\"\u0452\",10,\"\u045E\u045F\"],[\"8fa9a1\",\"\xC6\u0110\"],[\"8fa9a4\",\"\u0126\"],[\"8fa9a6\",\"\u0132\"],[\"8fa9a8\",\"\u0141\u013F\"],[\"8fa9ab\",\"\u014A\xD8\u0152\"],[\"8fa9af\",\"\u0166\xDE\"],[\"8fa9c1\",\"\xE6\u0111\xF0\u0127\u0131\u0133\u0138\u0142\u0140\u0149\u014B\xF8\u0153\xDF\u0167\xFE\"],[\"8faaa1\",\"\xC1\xC0\xC4\xC2\u0102\u01CD\u0100\u0104\xC5\xC3\u0106\u0108\u010C\xC7\u010A\u010E\xC9\xC8\xCB\xCA\u011A\u0116\u0112\u0118\"],[\"8faaba\",\"\u011C\u011E\u0122\u0120\u0124\xCD\xCC\xCF\xCE\u01CF\u0130\u012A\u012E\u0128\u0134\u0136\u0139\u013D\u013B\u0143\u0147\u0145\xD1\xD3\xD2\xD6\xD4\u01D1\u0150\u014C\xD5\u0154\u0158\u0156\u015A\u015C\u0160\u015E\u0164\u0162\xDA\xD9\xDC\xDB\u016C\u01D3\u0170\u016A\u0172\u016E\u0168\u01D7\u01DB\u01D9\u01D5\u0174\xDD\u0178\u0176\u0179\u017D\u017B\"],[\"8faba1\",\"\xE1\xE0\xE4\xE2\u0103\u01CE\u0101\u0105\xE5\xE3\u0107\u0109\u010D\xE7\u010B\u010F\xE9\xE8\xEB\xEA\u011B\u0117\u0113\u0119\u01F5\u011D\u011F\"],[\"8fabbd\",\"\u0121\u0125\xED\xEC\xEF\xEE\u01D0\"],[\"8fabc5\",\"\u012B\u012F\u0129\u0135\u0137\u013A\u013E\u013C\u0144\u0148\u0146\xF1\xF3\xF2\xF6\xF4\u01D2\u0151\u014D\xF5\u0155\u0159\u0157\u015B\u015D\u0161\u015F\u0165\u0163\xFA\xF9\xFC\xFB\u016D\u01D4\u0171\u016B\u0173\u016F\u0169\u01D8\u01DC\u01DA\u01D6\u0175\xFD\xFF\u0177\u017A\u017E\u017C\"],[\"8fb0a1\",\"\u4E02\u4E04\u4E05\u4E0C\u4E12\u4E1F\u4E23\u4E24\u4E28\u4E2B\u4E2E\u4E2F\u4E30\u4E35\u4E40\u4E41\u4E44\u4E47\u4E51\u4E5A\u4E5C\u4E63\u4E68\u4E69\u4E74\u4E75\u4E79\u4E7F\u4E8D\u4E96\u4E97\u4E9D\u4EAF\u4EB9\u4EC3\u4ED0\u4EDA\u4EDB\u4EE0\u4EE1\u4EE2\u4EE8\u4EEF\u4EF1\u4EF3\u4EF5\u4EFD\u4EFE\u4EFF\u4F00\u4F02\u4F03\u4F08\u4F0B\u4F0C\u4F12\u4F15\u4F16\u4F17\u4F19\u4F2E\u4F31\u4F60\u4F33\u4F35\u4F37\u4F39\u4F3B\u4F3E\u4F40\u4F42\u4F48\u4F49\u4F4B\u4F4C\u4F52\u4F54\u4F56\u4F58\u4F5F\u4F63\u4F6A\u4F6C\u4F6E\u4F71\u4F77\u4F78\u4F79\u4F7A\u4F7D\u4F7E\u4F81\u4F82\u4F84\"],[\"8fb1a1\",\"\u4F85\u4F89\u4F8A\u4F8C\u4F8E\u4F90\u4F92\u4F93\u4F94\u4F97\u4F99\u4F9A\u4F9E\u4F9F\u4FB2\u4FB7\u4FB9\u4FBB\u4FBC\u4FBD\u4FBE\u4FC0\u4FC1\u4FC5\u4FC6\u4FC8\u4FC9\u4FCB\u4FCC\u4FCD\u4FCF\u4FD2\u4FDC\u4FE0\u4FE2\u4FF0\u4FF2\u4FFC\u4FFD\u4FFF\u5000\u5001\u5004\u5007\u500A\u500C\u500E\u5010\u5013\u5017\u5018\u501B\u501C\u501D\u501E\u5022\u5027\u502E\u5030\u5032\u5033\u5035\u5040\u5041\u5042\u5045\u5046\u504A\u504C\u504E\u5051\u5052\u5053\u5057\u5059\u505F\u5060\u5062\u5063\u5066\u5067\u506A\u506D\u5070\u5071\u503B\u5081\u5083\u5084\u5086\u508A\u508E\u508F\u5090\"],[\"8fb2a1\",\"\u5092\u5093\u5094\u5096\u509B\u509C\u509E\",4,\"\u50AA\u50AF\u50B0\u50B9\u50BA\u50BD\u50C0\u50C3\u50C4\u50C7\u50CC\u50CE\u50D0\u50D3\u50D4\u50D8\u50DC\u50DD\u50DF\u50E2\u50E4\u50E6\u50E8\u50E9\u50EF\u50F1\u50F6\u50FA\u50FE\u5103\u5106\u5107\u5108\u510B\u510C\u510D\u510E\u50F2\u5110\u5117\u5119\u511B\u511C\u511D\u511E\u5123\u5127\u5128\u512C\u512D\u512F\u5131\u5133\u5134\u5135\u5138\u5139\u5142\u514A\u514F\u5153\u5155\u5157\u5158\u515F\u5164\u5166\u517E\u5183\u5184\u518B\u518E\u5198\u519D\u51A1\u51A3\u51AD\u51B8\u51BA\u51BC\u51BE\u51BF\u51C2\"],[\"8fb3a1\",\"\u51C8\u51CF\u51D1\u51D2\u51D3\u51D5\u51D8\u51DE\u51E2\u51E5\u51EE\u51F2\u51F3\u51F4\u51F7\u5201\u5202\u5205\u5212\u5213\u5215\u5216\u5218\u5222\u5228\u5231\u5232\u5235\u523C\u5245\u5249\u5255\u5257\u5258\u525A\u525C\u525F\u5260\u5261\u5266\u526E\u5277\u5278\u5279\u5280\u5282\u5285\u528A\u528C\u5293\u5295\u5296\u5297\u5298\u529A\u529C\u52A4\u52A5\u52A6\u52A7\u52AF\u52B0\u52B6\u52B7\u52B8\u52BA\u52BB\u52BD\u52C0\u52C4\u52C6\u52C8\u52CC\u52CF\u52D1\u52D4\u52D6\u52DB\u52DC\u52E1\u52E5\u52E8\u52E9\u52EA\u52EC\u52F0\u52F1\u52F4\u52F6\u52F7\u5300\u5303\u530A\u530B\"],[\"8fb4a1\",\"\u530C\u5311\u5313\u5318\u531B\u531C\u531E\u531F\u5325\u5327\u5328\u5329\u532B\u532C\u532D\u5330\u5332\u5335\u533C\u533D\u533E\u5342\u534C\u534B\u5359\u535B\u5361\u5363\u5365\u536C\u536D\u5372\u5379\u537E\u5383\u5387\u5388\u538E\u5393\u5394\u5399\u539D\u53A1\u53A4\u53AA\u53AB\u53AF\u53B2\u53B4\u53B5\u53B7\u53B8\u53BA\u53BD\u53C0\u53C5\u53CF\u53D2\u53D3\u53D5\u53DA\u53DD\u53DE\u53E0\u53E6\u53E7\u53F5\u5402\u5413\u541A\u5421\u5427\u5428\u542A\u542F\u5431\u5434\u5435\u5443\u5444\u5447\u544D\u544F\u545E\u5462\u5464\u5466\u5467\u5469\u546B\u546D\u546E\u5474\u547F\"],[\"8fb5a1\",\"\u5481\u5483\u5485\u5488\u5489\u548D\u5491\u5495\u5496\u549C\u549F\u54A1\u54A6\u54A7\u54A9\u54AA\u54AD\u54AE\u54B1\u54B7\u54B9\u54BA\u54BB\u54BF\u54C6\u54CA\u54CD\u54CE\u54E0\u54EA\u54EC\u54EF\u54F6\u54FC\u54FE\u54FF\u5500\u5501\u5505\u5508\u5509\u550C\u550D\u550E\u5515\u552A\u552B\u5532\u5535\u5536\u553B\u553C\u553D\u5541\u5547\u5549\u554A\u554D\u5550\u5551\u5558\u555A\u555B\u555E\u5560\u5561\u5564\u5566\u557F\u5581\u5582\u5586\u5588\u558E\u558F\u5591\u5592\u5593\u5594\u5597\u55A3\u55A4\u55AD\u55B2\u55BF\u55C1\u55C3\u55C6\u55C9\u55CB\u55CC\u55CE\u55D1\u55D2\"],[\"8fb6a1\",\"\u55D3\u55D7\u55D8\u55DB\u55DE\u55E2\u55E9\u55F6\u55FF\u5605\u5608\u560A\u560D\",5,\"\u5619\u562C\u5630\u5633\u5635\u5637\u5639\u563B\u563C\u563D\u563F\u5640\u5641\u5643\u5644\u5646\u5649\u564B\u564D\u564F\u5654\u565E\u5660\u5661\u5662\u5663\u5666\u5669\u566D\u566F\u5671\u5672\u5675\u5684\u5685\u5688\u568B\u568C\u5695\u5699\u569A\u569D\u569E\u569F\u56A6\u56A7\u56A8\u56A9\u56AB\u56AC\u56AD\u56B1\u56B3\u56B7\u56BE\u56C5\u56C9\u56CA\u56CB\u56CF\u56D0\u56CC\u56CD\u56D9\u56DC\u56DD\u56DF\u56E1\u56E4\",4,\"\u56F1\u56EB\u56ED\"],[\"8fb7a1\",\"\u56F6\u56F7\u5701\u5702\u5707\u570A\u570C\u5711\u5715\u571A\u571B\u571D\u5720\u5722\u5723\u5724\u5725\u5729\u572A\u572C\u572E\u572F\u5733\u5734\u573D\u573E\u573F\u5745\u5746\u574C\u574D\u5752\u5762\u5765\u5767\u5768\u576B\u576D\",4,\"\u5773\u5774\u5775\u5777\u5779\u577A\u577B\u577C\u577E\u5781\u5783\u578C\u5794\u5797\u5799\u579A\u579C\u579D\u579E\u579F\u57A1\u5795\u57A7\u57A8\u57A9\u57AC\u57B8\u57BD\u57C7\u57C8\u57CC\u57CF\u57D5\u57DD\u57DE\u57E4\u57E6\u57E7\u57E9\u57ED\u57F0\u57F5\u57F6\u57F8\u57FD\u57FE\u57FF\u5803\u5804\u5808\u5809\u57E1\"],[\"8fb8a1\",\"\u580C\u580D\u581B\u581E\u581F\u5820\u5826\u5827\u582D\u5832\u5839\u583F\u5849\u584C\u584D\u584F\u5850\u5855\u585F\u5861\u5864\u5867\u5868\u5878\u587C\u587F\u5880\u5881\u5887\u5888\u5889\u588A\u588C\u588D\u588F\u5890\u5894\u5896\u589D\u58A0\u58A1\u58A2\u58A6\u58A9\u58B1\u58B2\u58C4\u58BC\u58C2\u58C8\u58CD\u58CE\u58D0\u58D2\u58D4\u58D6\u58DA\u58DD\u58E1\u58E2\u58E9\u58F3\u5905\u5906\u590B\u590C\u5912\u5913\u5914\u8641\u591D\u5921\u5923\u5924\u5928\u592F\u5930\u5933\u5935\u5936\u593F\u5943\u5946\u5952\u5953\u5959\u595B\u595D\u595E\u595F\u5961\u5963\u596B\u596D\"],[\"8fb9a1\",\"\u596F\u5972\u5975\u5976\u5979\u597B\u597C\u598B\u598C\u598E\u5992\u5995\u5997\u599F\u59A4\u59A7\u59AD\u59AE\u59AF\u59B0\u59B3\u59B7\u59BA\u59BC\u59C1\u59C3\u59C4\u59C8\u59CA\u59CD\u59D2\u59DD\u59DE\u59DF\u59E3\u59E4\u59E7\u59EE\u59EF\u59F1\u59F2\u59F4\u59F7\u5A00\u5A04\u5A0C\u5A0D\u5A0E\u5A12\u5A13\u5A1E\u5A23\u5A24\u5A27\u5A28\u5A2A\u5A2D\u5A30\u5A44\u5A45\u5A47\u5A48\u5A4C\u5A50\u5A55\u5A5E\u5A63\u5A65\u5A67\u5A6D\u5A77\u5A7A\u5A7B\u5A7E\u5A8B\u5A90\u5A93\u5A96\u5A99\u5A9C\u5A9E\u5A9F\u5AA0\u5AA2\u5AA7\u5AAC\u5AB1\u5AB2\u5AB3\u5AB5\u5AB8\u5ABA\u5ABB\u5ABF\"],[\"8fbaa1\",\"\u5AC4\u5AC6\u5AC8\u5ACF\u5ADA\u5ADC\u5AE0\u5AE5\u5AEA\u5AEE\u5AF5\u5AF6\u5AFD\u5B00\u5B01\u5B08\u5B17\u5B34\u5B19\u5B1B\u5B1D\u5B21\u5B25\u5B2D\u5B38\u5B41\u5B4B\u5B4C\u5B52\u5B56\u5B5E\u5B68\u5B6E\u5B6F\u5B7C\u5B7D\u5B7E\u5B7F\u5B81\u5B84\u5B86\u5B8A\u5B8E\u5B90\u5B91\u5B93\u5B94\u5B96\u5BA8\u5BA9\u5BAC\u5BAD\u5BAF\u5BB1\u5BB2\u5BB7\u5BBA\u5BBC\u5BC0\u5BC1\u5BCD\u5BCF\u5BD6\",4,\"\u5BE0\u5BEF\u5BF1\u5BF4\u5BFD\u5C0C\u5C17\u5C1E\u5C1F\u5C23\u5C26\u5C29\u5C2B\u5C2C\u5C2E\u5C30\u5C32\u5C35\u5C36\u5C59\u5C5A\u5C5C\u5C62\u5C63\u5C67\u5C68\u5C69\"],[\"8fbba1\",\"\u5C6D\u5C70\u5C74\u5C75\u5C7A\u5C7B\u5C7C\u5C7D\u5C87\u5C88\u5C8A\u5C8F\u5C92\u5C9D\u5C9F\u5CA0\u5CA2\u5CA3\u5CA6\u5CAA\u5CB2\u5CB4\u5CB5\u5CBA\u5CC9\u5CCB\u5CD2\u5CDD\u5CD7\u5CEE\u5CF1\u5CF2\u5CF4\u5D01\u5D06\u5D0D\u5D12\u5D2B\u5D23\u5D24\u5D26\u5D27\u5D31\u5D34\u5D39\u5D3D\u5D3F\u5D42\u5D43\u5D46\u5D48\u5D55\u5D51\u5D59\u5D4A\u5D5F\u5D60\u5D61\u5D62\u5D64\u5D6A\u5D6D\u5D70\u5D79\u5D7A\u5D7E\u5D7F\u5D81\u5D83\u5D88\u5D8A\u5D92\u5D93\u5D94\u5D95\u5D99\u5D9B\u5D9F\u5DA0\u5DA7\u5DAB\u5DB0\u5DB4\u5DB8\u5DB9\u5DC3\u5DC7\u5DCB\u5DD0\u5DCE\u5DD8\u5DD9\u5DE0\u5DE4\"],[\"8fbca1\",\"\u5DE9\u5DF8\u5DF9\u5E00\u5E07\u5E0D\u5E12\u5E14\u5E15\u5E18\u5E1F\u5E20\u5E2E\u5E28\u5E32\u5E35\u5E3E\u5E4B\u5E50\u5E49\u5E51\u5E56\u5E58\u5E5B\u5E5C\u5E5E\u5E68\u5E6A\",4,\"\u5E70\u5E80\u5E8B\u5E8E\u5EA2\u5EA4\u5EA5\u5EA8\u5EAA\u5EAC\u5EB1\u5EB3\u5EBD\u5EBE\u5EBF\u5EC6\u5ECC\u5ECB\u5ECE\u5ED1\u5ED2\u5ED4\u5ED5\u5EDC\u5EDE\u5EE5\u5EEB\u5F02\u5F06\u5F07\u5F08\u5F0E\u5F19\u5F1C\u5F1D\u5F21\u5F22\u5F23\u5F24\u5F28\u5F2B\u5F2C\u5F2E\u5F30\u5F34\u5F36\u5F3B\u5F3D\u5F3F\u5F40\u5F44\u5F45\u5F47\u5F4D\u5F50\u5F54\u5F58\u5F5B\u5F60\u5F63\u5F64\u5F67\"],[\"8fbda1\",\"\u5F6F\u5F72\u5F74\u5F75\u5F78\u5F7A\u5F7D\u5F7E\u5F89\u5F8D\u5F8F\u5F96\u5F9C\u5F9D\u5FA2\u5FA7\u5FAB\u5FA4\u5FAC\u5FAF\u5FB0\u5FB1\u5FB8\u5FC4\u5FC7\u5FC8\u5FC9\u5FCB\u5FD0\",4,\"\u5FDE\u5FE1\u5FE2\u5FE8\u5FE9\u5FEA\u5FEC\u5FED\u5FEE\u5FEF\u5FF2\u5FF3\u5FF6\u5FFA\u5FFC\u6007\u600A\u600D\u6013\u6014\u6017\u6018\u601A\u601F\u6024\u602D\u6033\u6035\u6040\u6047\u6048\u6049\u604C\u6051\u6054\u6056\u6057\u605D\u6061\u6067\u6071\u607E\u607F\u6082\u6086\u6088\u608A\u608E\u6091\u6093\u6095\u6098\u609D\u609E\u60A2\u60A4\u60A5\u60A8\u60B0\u60B1\u60B7\"],[\"8fbea1\",\"\u60BB\u60BE\u60C2\u60C4\u60C8\u60C9\u60CA\u60CB\u60CE\u60CF\u60D4\u60D5\u60D9\u60DB\u60DD\u60DE\u60E2\u60E5\u60F2\u60F5\u60F8\u60FC\u60FD\u6102\u6107\u610A\u610C\u6110\",4,\"\u6116\u6117\u6119\u611C\u611E\u6122\u612A\u612B\u6130\u6131\u6135\u6136\u6137\u6139\u6141\u6145\u6146\u6149\u615E\u6160\u616C\u6172\u6178\u617B\u617C\u617F\u6180\u6181\u6183\u6184\u618B\u618D\u6192\u6193\u6197\u6198\u619C\u619D\u619F\u61A0\u61A5\u61A8\u61AA\u61AD\u61B8\u61B9\u61BC\u61C0\u61C1\u61C2\u61CE\u61CF\u61D5\u61DC\u61DD\u61DE\u61DF\u61E1\u61E2\u61E7\u61E9\u61E5\"],[\"8fbfa1\",\"\u61EC\u61ED\u61EF\u6201\u6203\u6204\u6207\u6213\u6215\u621C\u6220\u6222\u6223\u6227\u6229\u622B\u6239\u623D\u6242\u6243\u6244\u6246\u624C\u6250\u6251\u6252\u6254\u6256\u625A\u625C\u6264\u626D\u626F\u6273\u627A\u627D\u628D\u628E\u628F\u6290\u62A6\u62A8\u62B3\u62B6\u62B7\u62BA\u62BE\u62BF\u62C4\u62CE\u62D5\u62D6\u62DA\u62EA\u62F2\u62F4\u62FC\u62FD\u6303\u6304\u630A\u630B\u630D\u6310\u6313\u6316\u6318\u6329\u632A\u632D\u6335\u6336\u6339\u633C\u6341\u6342\u6343\u6344\u6346\u634A\u634B\u634E\u6352\u6353\u6354\u6358\u635B\u6365\u6366\u636C\u636D\u6371\u6374\u6375\"],[\"8fc0a1\",\"\u6378\u637C\u637D\u637F\u6382\u6384\u6387\u638A\u6390\u6394\u6395\u6399\u639A\u639E\u63A4\u63A6\u63AD\u63AE\u63AF\u63BD\u63C1\u63C5\u63C8\u63CE\u63D1\u63D3\u63D4\u63D5\u63DC\u63E0\u63E5\u63EA\u63EC\u63F2\u63F3\u63F5\u63F8\u63F9\u6409\u640A\u6410\u6412\u6414\u6418\u641E\u6420\u6422\u6424\u6425\u6429\u642A\u642F\u6430\u6435\u643D\u643F\u644B\u644F\u6451\u6452\u6453\u6454\u645A\u645B\u645C\u645D\u645F\u6460\u6461\u6463\u646D\u6473\u6474\u647B\u647D\u6485\u6487\u648F\u6490\u6491\u6498\u6499\u649B\u649D\u649F\u64A1\u64A3\u64A6\u64A8\u64AC\u64B3\u64BD\u64BE\u64BF\"],[\"8fc1a1\",\"\u64C4\u64C9\u64CA\u64CB\u64CC\u64CE\u64D0\u64D1\u64D5\u64D7\u64E4\u64E5\u64E9\u64EA\u64ED\u64F0\u64F5\u64F7\u64FB\u64FF\u6501\u6504\u6508\u6509\u650A\u650F\u6513\u6514\u6516\u6519\u651B\u651E\u651F\u6522\u6526\u6529\u652E\u6531\u653A\u653C\u653D\u6543\u6547\u6549\u6550\u6552\u6554\u655F\u6560\u6567\u656B\u657A\u657D\u6581\u6585\u658A\u6592\u6595\u6598\u659D\u65A0\u65A3\u65A6\u65AE\u65B2\u65B3\u65B4\u65BF\u65C2\u65C8\u65C9\u65CE\u65D0\u65D4\u65D6\u65D8\u65DF\u65F0\u65F2\u65F4\u65F5\u65F9\u65FE\u65FF\u6600\u6604\u6608\u6609\u660D\u6611\u6612\u6615\u6616\u661D\"],[\"8fc2a1\",\"\u661E\u6621\u6622\u6623\u6624\u6626\u6629\u662A\u662B\u662C\u662E\u6630\u6631\u6633\u6639\u6637\u6640\u6645\u6646\u664A\u664C\u6651\u664E\u6657\u6658\u6659\u665B\u665C\u6660\u6661\u66FB\u666A\u666B\u666C\u667E\u6673\u6675\u667F\u6677\u6678\u6679\u667B\u6680\u667C\u668B\u668C\u668D\u6690\u6692\u6699\u669A\u669B\u669C\u669F\u66A0\u66A4\u66AD\u66B1\u66B2\u66B5\u66BB\u66BF\u66C0\u66C2\u66C3\u66C8\u66CC\u66CE\u66CF\u66D4\u66DB\u66DF\u66E8\u66EB\u66EC\u66EE\u66FA\u6705\u6707\u670E\u6713\u6719\u671C\u6720\u6722\u6733\u673E\u6745\u6747\u6748\u674C\u6754\u6755\u675D\"],[\"8fc3a1\",\"\u6766\u676C\u676E\u6774\u6776\u677B\u6781\u6784\u678E\u678F\u6791\u6793\u6796\u6798\u6799\u679B\u67B0\u67B1\u67B2\u67B5\u67BB\u67BC\u67BD\u67F9\u67C0\u67C2\u67C3\u67C5\u67C8\u67C9\u67D2\u67D7\u67D9\u67DC\u67E1\u67E6\u67F0\u67F2\u67F6\u67F7\u6852\u6814\u6819\u681D\u681F\u6828\u6827\u682C\u682D\u682F\u6830\u6831\u6833\u683B\u683F\u6844\u6845\u684A\u684C\u6855\u6857\u6858\u685B\u686B\u686E\",4,\"\u6875\u6879\u687A\u687B\u687C\u6882\u6884\u6886\u6888\u6896\u6898\u689A\u689C\u68A1\u68A3\u68A5\u68A9\u68AA\u68AE\u68B2\u68BB\u68C5\u68C8\u68CC\u68CF\"],[\"8fc4a1\",\"\u68D0\u68D1\u68D3\u68D6\u68D9\u68DC\u68DD\u68E5\u68E8\u68EA\u68EB\u68EC\u68ED\u68F0\u68F1\u68F5\u68F6\u68FB\u68FC\u68FD\u6906\u6909\u690A\u6910\u6911\u6913\u6916\u6917\u6931\u6933\u6935\u6938\u693B\u6942\u6945\u6949\u694E\u6957\u695B\u6963\u6964\u6965\u6966\u6968\u6969\u696C\u6970\u6971\u6972\u697A\u697B\u697F\u6980\u698D\u6992\u6996\u6998\u69A1\u69A5\u69A6\u69A8\u69AB\u69AD\u69AF\u69B7\u69B8\u69BA\u69BC\u69C5\u69C8\u69D1\u69D6\u69D7\u69E2\u69E5\u69EE\u69EF\u69F1\u69F3\u69F5\u69FE\u6A00\u6A01\u6A03\u6A0F\u6A11\u6A15\u6A1A\u6A1D\u6A20\u6A24\u6A28\u6A30\u6A32\"],[\"8fc5a1\",\"\u6A34\u6A37\u6A3B\u6A3E\u6A3F\u6A45\u6A46\u6A49\u6A4A\u6A4E\u6A50\u6A51\u6A52\u6A55\u6A56\u6A5B\u6A64\u6A67\u6A6A\u6A71\u6A73\u6A7E\u6A81\u6A83\u6A86\u6A87\u6A89\u6A8B\u6A91\u6A9B\u6A9D\u6A9E\u6A9F\u6AA5\u6AAB\u6AAF\u6AB0\u6AB1\u6AB4\u6ABD\u6ABE\u6ABF\u6AC6\u6AC9\u6AC8\u6ACC\u6AD0\u6AD4\u6AD5\u6AD6\u6ADC\u6ADD\u6AE4\u6AE7\u6AEC\u6AF0\u6AF1\u6AF2\u6AFC\u6AFD\u6B02\u6B03\u6B06\u6B07\u6B09\u6B0F\u6B10\u6B11\u6B17\u6B1B\u6B1E\u6B24\u6B28\u6B2B\u6B2C\u6B2F\u6B35\u6B36\u6B3B\u6B3F\u6B46\u6B4A\u6B4D\u6B52\u6B56\u6B58\u6B5D\u6B60\u6B67\u6B6B\u6B6E\u6B70\u6B75\u6B7D\"],[\"8fc6a1\",\"\u6B7E\u6B82\u6B85\u6B97\u6B9B\u6B9F\u6BA0\u6BA2\u6BA3\u6BA8\u6BA9\u6BAC\u6BAD\u6BAE\u6BB0\u6BB8\u6BB9\u6BBD\u6BBE\u6BC3\u6BC4\u6BC9\u6BCC\u6BD6\u6BDA\u6BE1\u6BE3\u6BE6\u6BE7\u6BEE\u6BF1\u6BF7\u6BF9\u6BFF\u6C02\u6C04\u6C05\u6C09\u6C0D\u6C0E\u6C10\u6C12\u6C19\u6C1F\u6C26\u6C27\u6C28\u6C2C\u6C2E\u6C33\u6C35\u6C36\u6C3A\u6C3B\u6C3F\u6C4A\u6C4B\u6C4D\u6C4F\u6C52\u6C54\u6C59\u6C5B\u6C5C\u6C6B\u6C6D\u6C6F\u6C74\u6C76\u6C78\u6C79\u6C7B\u6C85\u6C86\u6C87\u6C89\u6C94\u6C95\u6C97\u6C98\u6C9C\u6C9F\u6CB0\u6CB2\u6CB4\u6CC2\u6CC6\u6CCD\u6CCF\u6CD0\u6CD1\u6CD2\u6CD4\u6CD6\"],[\"8fc7a1\",\"\u6CDA\u6CDC\u6CE0\u6CE7\u6CE9\u6CEB\u6CEC\u6CEE\u6CF2\u6CF4\u6D04\u6D07\u6D0A\u6D0E\u6D0F\u6D11\u6D13\u6D1A\u6D26\u6D27\u6D28\u6C67\u6D2E\u6D2F\u6D31\u6D39\u6D3C\u6D3F\u6D57\u6D5E\u6D5F\u6D61\u6D65\u6D67\u6D6F\u6D70\u6D7C\u6D82\u6D87\u6D91\u6D92\u6D94\u6D96\u6D97\u6D98\u6DAA\u6DAC\u6DB4\u6DB7\u6DB9\u6DBD\u6DBF\u6DC4\u6DC8\u6DCA\u6DCE\u6DCF\u6DD6\u6DDB\u6DDD\u6DDF\u6DE0\u6DE2\u6DE5\u6DE9\u6DEF\u6DF0\u6DF4\u6DF6\u6DFC\u6E00\u6E04\u6E1E\u6E22\u6E27\u6E32\u6E36\u6E39\u6E3B\u6E3C\u6E44\u6E45\u6E48\u6E49\u6E4B\u6E4F\u6E51\u6E52\u6E53\u6E54\u6E57\u6E5C\u6E5D\u6E5E\"],[\"8fc8a1\",\"\u6E62\u6E63\u6E68\u6E73\u6E7B\u6E7D\u6E8D\u6E93\u6E99\u6EA0\u6EA7\u6EAD\u6EAE\u6EB1\u6EB3\u6EBB\u6EBF\u6EC0\u6EC1\u6EC3\u6EC7\u6EC8\u6ECA\u6ECD\u6ECE\u6ECF\u6EEB\u6EED\u6EEE\u6EF9\u6EFB\u6EFD\u6F04\u6F08\u6F0A\u6F0C\u6F0D\u6F16\u6F18\u6F1A\u6F1B\u6F26\u6F29\u6F2A\u6F2F\u6F30\u6F33\u6F36\u6F3B\u6F3C\u6F2D\u6F4F\u6F51\u6F52\u6F53\u6F57\u6F59\u6F5A\u6F5D\u6F5E\u6F61\u6F62\u6F68\u6F6C\u6F7D\u6F7E\u6F83\u6F87\u6F88\u6F8B\u6F8C\u6F8D\u6F90\u6F92\u6F93\u6F94\u6F96\u6F9A\u6F9F\u6FA0\u6FA5\u6FA6\u6FA7\u6FA8\u6FAE\u6FAF\u6FB0\u6FB5\u6FB6\u6FBC\u6FC5\u6FC7\u6FC8\u6FCA\"],[\"8fc9a1\",\"\u6FDA\u6FDE\u6FE8\u6FE9\u6FF0\u6FF5\u6FF9\u6FFC\u6FFD\u7000\u7005\u7006\u7007\u700D\u7017\u7020\u7023\u702F\u7034\u7037\u7039\u703C\u7043\u7044\u7048\u7049\u704A\u704B\u7054\u7055\u705D\u705E\u704E\u7064\u7065\u706C\u706E\u7075\u7076\u707E\u7081\u7085\u7086\u7094\",4,\"\u709B\u70A4\u70AB\u70B0\u70B1\u70B4\u70B7\u70CA\u70D1\u70D3\u70D4\u70D5\u70D6\u70D8\u70DC\u70E4\u70FA\u7103\",4,\"\u710B\u710C\u710F\u711E\u7120\u712B\u712D\u712F\u7130\u7131\u7138\u7141\u7145\u7146\u7147\u714A\u714B\u7150\u7152\u7157\u715A\u715C\u715E\u7160\"],[\"8fcaa1\",\"\u7168\u7179\u7180\u7185\u7187\u718C\u7192\u719A\u719B\u71A0\u71A2\u71AF\u71B0\u71B2\u71B3\u71BA\u71BF\u71C0\u71C1\u71C4\u71CB\u71CC\u71D3\u71D6\u71D9\u71DA\u71DC\u71F8\u71FE\u7200\u7207\u7208\u7209\u7213\u7217\u721A\u721D\u721F\u7224\u722B\u722F\u7234\u7238\u7239\u7241\u7242\u7243\u7245\u724E\u724F\u7250\u7253\u7255\u7256\u725A\u725C\u725E\u7260\u7263\u7268\u726B\u726E\u726F\u7271\u7277\u7278\u727B\u727C\u727F\u7284\u7289\u728D\u728E\u7293\u729B\u72A8\u72AD\u72AE\u72B1\u72B4\u72BE\u72C1\u72C7\u72C9\u72CC\u72D5\u72D6\u72D8\u72DF\u72E5\u72F3\u72F4\u72FA\u72FB\"],[\"8fcba1\",\"\u72FE\u7302\u7304\u7305\u7307\u730B\u730D\u7312\u7313\u7318\u7319\u731E\u7322\u7324\u7327\u7328\u732C\u7331\u7332\u7335\u733A\u733B\u733D\u7343\u734D\u7350\u7352\u7356\u7358\u735D\u735E\u735F\u7360\u7366\u7367\u7369\u736B\u736C\u736E\u736F\u7371\u7377\u7379\u737C\u7380\u7381\u7383\u7385\u7386\u738E\u7390\u7393\u7395\u7397\u7398\u739C\u739E\u739F\u73A0\u73A2\u73A5\u73A6\u73AA\u73AB\u73AD\u73B5\u73B7\u73B9\u73BC\u73BD\u73BF\u73C5\u73C6\u73C9\u73CB\u73CC\u73CF\u73D2\u73D3\u73D6\u73D9\u73DD\u73E1\u73E3\u73E6\u73E7\u73E9\u73F4\u73F5\u73F7\u73F9\u73FA\u73FB\u73FD\"],[\"8fcca1\",\"\u73FF\u7400\u7401\u7404\u7407\u740A\u7411\u741A\u741B\u7424\u7426\u7428\",9,\"\u7439\u7440\u7443\u7444\u7446\u7447\u744B\u744D\u7451\u7452\u7457\u745D\u7462\u7466\u7467\u7468\u746B\u746D\u746E\u7471\u7472\u7480\u7481\u7485\u7486\u7487\u7489\u748F\u7490\u7491\u7492\u7498\u7499\u749A\u749C\u749F\u74A0\u74A1\u74A3\u74A6\u74A8\u74A9\u74AA\u74AB\u74AE\u74AF\u74B1\u74B2\u74B5\u74B9\u74BB\u74BF\u74C8\u74C9\u74CC\u74D0\u74D3\u74D8\u74DA\u74DB\u74DE\u74DF\u74E4\u74E8\u74EA\u74EB\u74EF\u74F4\u74FA\u74FB\u74FC\u74FF\u7506\"],[\"8fcda1\",\"\u7512\u7516\u7517\u7520\u7521\u7524\u7527\u7529\u752A\u752F\u7536\u7539\u753D\u753E\u753F\u7540\u7543\u7547\u7548\u754E\u7550\u7552\u7557\u755E\u755F\u7561\u756F\u7571\u7579\",5,\"\u7581\u7585\u7590\u7592\u7593\u7595\u7599\u759C\u75A2\u75A4\u75B4\u75BA\u75BF\u75C0\u75C1\u75C4\u75C6\u75CC\u75CE\u75CF\u75D7\u75DC\u75DF\u75E0\u75E1\u75E4\u75E7\u75EC\u75EE\u75EF\u75F1\u75F9\u7600\u7602\u7603\u7604\u7607\u7608\u760A\u760C\u760F\u7612\u7613\u7615\u7616\u7619\u761B\u761C\u761D\u761E\u7623\u7625\u7626\u7629\u762D\u7632\u7633\u7635\u7638\u7639\"],[\"8fcea1\",\"\u763A\u763C\u764A\u7640\u7641\u7643\u7644\u7645\u7649\u764B\u7655\u7659\u765F\u7664\u7665\u766D\u766E\u766F\u7671\u7674\u7681\u7685\u768C\u768D\u7695\u769B\u769C\u769D\u769F\u76A0\u76A2\",6,\"\u76AA\u76AD\u76BD\u76C1\u76C5\u76C9\u76CB\u76CC\u76CE\u76D4\u76D9\u76E0\u76E6\u76E8\u76EC\u76F0\u76F1\u76F6\u76F9\u76FC\u7700\u7706\u770A\u770E\u7712\u7714\u7715\u7717\u7719\u771A\u771C\u7722\u7728\u772D\u772E\u772F\u7734\u7735\u7736\u7739\u773D\u773E\u7742\u7745\u7746\u774A\u774D\u774E\u774F\u7752\u7756\u7757\u775C\u775E\u775F\u7760\u7762\"],[\"8fcfa1\",\"\u7764\u7767\u776A\u776C\u7770\u7772\u7773\u7774\u777A\u777D\u7780\u7784\u778C\u778D\u7794\u7795\u7796\u779A\u779F\u77A2\u77A7\u77AA\u77AE\u77AF\u77B1\u77B5\u77BE\u77C3\u77C9\u77D1\u77D2\u77D5\u77D9\u77DE\u77DF\u77E0\u77E4\u77E6\u77EA\u77EC\u77F0\u77F1\u77F4\u77F8\u77FB\u7805\u7806\u7809\u780D\u780E\u7811\u781D\u7821\u7822\u7823\u782D\u782E\u7830\u7835\u7837\u7843\u7844\u7847\u7848\u784C\u784E\u7852\u785C\u785E\u7860\u7861\u7863\u7864\u7868\u786A\u786E\u787A\u787E\u788A\u788F\u7894\u7898\u78A1\u789D\u789E\u789F\u78A4\u78A8\u78AC\u78AD\u78B0\u78B1\u78B2\u78B3\"],[\"8fd0a1\",\"\u78BB\u78BD\u78BF\u78C7\u78C8\u78C9\u78CC\u78CE\u78D2\u78D3\u78D5\u78D6\u78E4\u78DB\u78DF\u78E0\u78E1\u78E6\u78EA\u78F2\u78F3\u7900\u78F6\u78F7\u78FA\u78FB\u78FF\u7906\u790C\u7910\u791A\u791C\u791E\u791F\u7920\u7925\u7927\u7929\u792D\u7931\u7934\u7935\u793B\u793D\u793F\u7944\u7945\u7946\u794A\u794B\u794F\u7951\u7954\u7958\u795B\u795C\u7967\u7969\u796B\u7972\u7979\u797B\u797C\u797E\u798B\u798C\u7991\u7993\u7994\u7995\u7996\u7998\u799B\u799C\u79A1\u79A8\u79A9\u79AB\u79AF\u79B1\u79B4\u79B8\u79BB\u79C2\u79C4\u79C7\u79C8\u79CA\u79CF\u79D4\u79D6\u79DA\u79DD\u79DE\"],[\"8fd1a1\",\"\u79E0\u79E2\u79E5\u79EA\u79EB\u79ED\u79F1\u79F8\u79FC\u7A02\u7A03\u7A07\u7A09\u7A0A\u7A0C\u7A11\u7A15\u7A1B\u7A1E\u7A21\u7A27\u7A2B\u7A2D\u7A2F\u7A30\u7A34\u7A35\u7A38\u7A39\u7A3A\u7A44\u7A45\u7A47\u7A48\u7A4C\u7A55\u7A56\u7A59\u7A5C\u7A5D\u7A5F\u7A60\u7A65\u7A67\u7A6A\u7A6D\u7A75\u7A78\u7A7E\u7A80\u7A82\u7A85\u7A86\u7A8A\u7A8B\u7A90\u7A91\u7A94\u7A9E\u7AA0\u7AA3\u7AAC\u7AB3\u7AB5\u7AB9\u7ABB\u7ABC\u7AC6\u7AC9\u7ACC\u7ACE\u7AD1\u7ADB\u7AE8\u7AE9\u7AEB\u7AEC\u7AF1\u7AF4\u7AFB\u7AFD\u7AFE\u7B07\u7B14\u7B1F\u7B23\u7B27\u7B29\u7B2A\u7B2B\u7B2D\u7B2E\u7B2F\u7B30\"],[\"8fd2a1\",\"\u7B31\u7B34\u7B3D\u7B3F\u7B40\u7B41\u7B47\u7B4E\u7B55\u7B60\u7B64\u7B66\u7B69\u7B6A\u7B6D\u7B6F\u7B72\u7B73\u7B77\u7B84\u7B89\u7B8E\u7B90\u7B91\u7B96\u7B9B\u7B9E\u7BA0\u7BA5\u7BAC\u7BAF\u7BB0\u7BB2\u7BB5\u7BB6\u7BBA\u7BBB\u7BBC\u7BBD\u7BC2\u7BC5\u7BC8\u7BCA\u7BD4\u7BD6\u7BD7\u7BD9\u7BDA\u7BDB\u7BE8\u7BEA\u7BF2\u7BF4\u7BF5\u7BF8\u7BF9\u7BFA\u7BFC\u7BFE\u7C01\u7C02\u7C03\u7C04\u7C06\u7C09\u7C0B\u7C0C\u7C0E\u7C0F\u7C19\u7C1B\u7C20\u7C25\u7C26\u7C28\u7C2C\u7C31\u7C33\u7C34\u7C36\u7C39\u7C3A\u7C46\u7C4A\u7C55\u7C51\u7C52\u7C53\u7C59\",5],[\"8fd3a1\",\"\u7C61\u7C63\u7C67\u7C69\u7C6D\u7C6E\u7C70\u7C72\u7C79\u7C7C\u7C7D\u7C86\u7C87\u7C8F\u7C94\u7C9E\u7CA0\u7CA6\u7CB0\u7CB6\u7CB7\u7CBA\u7CBB\u7CBC\u7CBF\u7CC4\u7CC7\u7CC8\u7CC9\u7CCD\u7CCF\u7CD3\u7CD4\u7CD5\u7CD7\u7CD9\u7CDA\u7CDD\u7CE6\u7CE9\u7CEB\u7CF5\u7D03\u7D07\u7D08\u7D09\u7D0F\u7D11\u7D12\u7D13\u7D16\u7D1D\u7D1E\u7D23\u7D26\u7D2A\u7D2D\u7D31\u7D3C\u7D3D\u7D3E\u7D40\u7D41\u7D47\u7D48\u7D4D\u7D51\u7D53\u7D57\u7D59\u7D5A\u7D5C\u7D5D\u7D65\u7D67\u7D6A\u7D70\u7D78\u7D7A\u7D7B\u7D7F\u7D81\u7D82\u7D83\u7D85\u7D86\u7D88\u7D8B\u7D8C\u7D8D\u7D91\u7D96\u7D97\u7D9D\"],[\"8fd4a1\",\"\u7D9E\u7DA6\u7DA7\u7DAA\u7DB3\u7DB6\u7DB7\u7DB9\u7DC2\",4,\"\u7DCC\u7DCD\u7DCE\u7DD7\u7DD9\u7E00\u7DE2\u7DE5\u7DE6\u7DEA\u7DEB\u7DED\u7DF1\u7DF5\u7DF6\u7DF9\u7DFA\u7E08\u7E10\u7E11\u7E15\u7E17\u7E1C\u7E1D\u7E20\u7E27\u7E28\u7E2C\u7E2D\u7E2F\u7E33\u7E36\u7E3F\u7E44\u7E45\u7E47\u7E4E\u7E50\u7E52\u7E58\u7E5F\u7E61\u7E62\u7E65\u7E6B\u7E6E\u7E6F\u7E73\u7E78\u7E7E\u7E81\u7E86\u7E87\u7E8A\u7E8D\u7E91\u7E95\u7E98\u7E9A\u7E9D\u7E9E\u7F3C\u7F3B\u7F3D\u7F3E\u7F3F\u7F43\u7F44\u7F47\u7F4F\u7F52\u7F53\u7F5B\u7F5C\u7F5D\u7F61\u7F63\u7F64\u7F65\u7F66\u7F6D\"],[\"8fd5a1\",\"\u7F71\u7F7D\u7F7E\u7F7F\u7F80\u7F8B\u7F8D\u7F8F\u7F90\u7F91\u7F96\u7F97\u7F9C\u7FA1\u7FA2\u7FA6\u7FAA\u7FAD\u7FB4\u7FBC\u7FBF\u7FC0\u7FC3\u7FC8\u7FCE\u7FCF\u7FDB\u7FDF\u7FE3\u7FE5\u7FE8\u7FEC\u7FEE\u7FEF\u7FF2\u7FFA\u7FFD\u7FFE\u7FFF\u8007\u8008\u800A\u800D\u800E\u800F\u8011\u8013\u8014\u8016\u801D\u801E\u801F\u8020\u8024\u8026\u802C\u802E\u8030\u8034\u8035\u8037\u8039\u803A\u803C\u803E\u8040\u8044\u8060\u8064\u8066\u806D\u8071\u8075\u8081\u8088\u808E\u809C\u809E\u80A6\u80A7\u80AB\u80B8\u80B9\u80C8\u80CD\u80CF\u80D2\u80D4\u80D5\u80D7\u80D8\u80E0\u80ED\u80EE\"],[\"8fd6a1\",\"\u80F0\u80F2\u80F3\u80F6\u80F9\u80FA\u80FE\u8103\u810B\u8116\u8117\u8118\u811C\u811E\u8120\u8124\u8127\u812C\u8130\u8135\u813A\u813C\u8145\u8147\u814A\u814C\u8152\u8157\u8160\u8161\u8167\u8168\u8169\u816D\u816F\u8177\u8181\u8190\u8184\u8185\u8186\u818B\u818E\u8196\u8198\u819B\u819E\u81A2\u81AE\u81B2\u81B4\u81BB\u81CB\u81C3\u81C5\u81CA\u81CE\u81CF\u81D5\u81D7\u81DB\u81DD\u81DE\u81E1\u81E4\u81EB\u81EC\u81F0\u81F1\u81F2\u81F5\u81F6\u81F8\u81F9\u81FD\u81FF\u8200\u8203\u820F\u8213\u8214\u8219\u821A\u821D\u8221\u8222\u8228\u8232\u8234\u823A\u8243\u8244\u8245\u8246\"],[\"8fd7a1\",\"\u824B\u824E\u824F\u8251\u8256\u825C\u8260\u8263\u8267\u826D\u8274\u827B\u827D\u827F\u8280\u8281\u8283\u8284\u8287\u8289\u828A\u828E\u8291\u8294\u8296\u8298\u829A\u829B\u82A0\u82A1\u82A3\u82A4\u82A7\u82A8\u82A9\u82AA\u82AE\u82B0\u82B2\u82B4\u82B7\u82BA\u82BC\u82BE\u82BF\u82C6\u82D0\u82D5\u82DA\u82E0\u82E2\u82E4\u82E8\u82EA\u82ED\u82EF\u82F6\u82F7\u82FD\u82FE\u8300\u8301\u8307\u8308\u830A\u830B\u8354\u831B\u831D\u831E\u831F\u8321\u8322\u832C\u832D\u832E\u8330\u8333\u8337\u833A\u833C\u833D\u8342\u8343\u8344\u8347\u834D\u834E\u8351\u8355\u8356\u8357\u8370\u8378\"],[\"8fd8a1\",\"\u837D\u837F\u8380\u8382\u8384\u8386\u838D\u8392\u8394\u8395\u8398\u8399\u839B\u839C\u839D\u83A6\u83A7\u83A9\u83AC\u83BE\u83BF\u83C0\u83C7\u83C9\u83CF\u83D0\u83D1\u83D4\u83DD\u8353\u83E8\u83EA\u83F6\u83F8\u83F9\u83FC\u8401\u8406\u840A\u840F\u8411\u8415\u8419\u83AD\u842F\u8439\u8445\u8447\u8448\u844A\u844D\u844F\u8451\u8452\u8456\u8458\u8459\u845A\u845C\u8460\u8464\u8465\u8467\u846A\u8470\u8473\u8474\u8476\u8478\u847C\u847D\u8481\u8485\u8492\u8493\u8495\u849E\u84A6\u84A8\u84A9\u84AA\u84AF\u84B1\u84B4\u84BA\u84BD\u84BE\u84C0\u84C2\u84C7\u84C8\u84CC\u84CF\u84D3\"],[\"8fd9a1\",\"\u84DC\u84E7\u84EA\u84EF\u84F0\u84F1\u84F2\u84F7\u8532\u84FA\u84FB\u84FD\u8502\u8503\u8507\u850C\u850E\u8510\u851C\u851E\u8522\u8523\u8524\u8525\u8527\u852A\u852B\u852F\u8533\u8534\u8536\u853F\u8546\u854F\",4,\"\u8556\u8559\u855C\",6,\"\u8564\u856B\u856F\u8579\u857A\u857B\u857D\u857F\u8581\u8585\u8586\u8589\u858B\u858C\u858F\u8593\u8598\u859D\u859F\u85A0\u85A2\u85A5\u85A7\u85B4\u85B6\u85B7\u85B8\u85BC\u85BD\u85BE\u85BF\u85C2\u85C7\u85CA\u85CB\u85CE\u85AD\u85D8\u85DA\u85DF\u85E0\u85E6\u85E8\u85ED\u85F3\u85F6\u85FC\"],[\"8fdaa1\",\"\u85FF\u8600\u8604\u8605\u860D\u860E\u8610\u8611\u8612\u8618\u8619\u861B\u861E\u8621\u8627\u8629\u8636\u8638\u863A\u863C\u863D\u8640\u8642\u8646\u8652\u8653\u8656\u8657\u8658\u8659\u865D\u8660\",4,\"\u8669\u866C\u866F\u8675\u8676\u8677\u867A\u868D\u8691\u8696\u8698\u869A\u869C\u86A1\u86A6\u86A7\u86A8\u86AD\u86B1\u86B3\u86B4\u86B5\u86B7\u86B8\u86B9\u86BF\u86C0\u86C1\u86C3\u86C5\u86D1\u86D2\u86D5\u86D7\u86DA\u86DC\u86E0\u86E3\u86E5\u86E7\u8688\u86FA\u86FC\u86FD\u8704\u8705\u8707\u870B\u870E\u870F\u8710\u8713\u8714\u8719\u871E\u871F\u8721\u8723\"],[\"8fdba1\",\"\u8728\u872E\u872F\u8731\u8732\u8739\u873A\u873C\u873D\u873E\u8740\u8743\u8745\u874D\u8758\u875D\u8761\u8764\u8765\u876F\u8771\u8772\u877B\u8783\",6,\"\u878B\u878C\u8790\u8793\u8795\u8797\u8798\u8799\u879E\u87A0\u87A3\u87A7\u87AC\u87AD\u87AE\u87B1\u87B5\u87BE\u87BF\u87C1\u87C8\u87C9\u87CA\u87CE\u87D5\u87D6\u87D9\u87DA\u87DC\u87DF\u87E2\u87E3\u87E4\u87EA\u87EB\u87ED\u87F1\u87F3\u87F8\u87FA\u87FF\u8801\u8803\u8806\u8809\u880A\u880B\u8810\u8819\u8812\u8813\u8814\u8818\u881A\u881B\u881C\u881E\u881F\u8828\u882D\u882E\u8830\u8832\u8835\"],[\"8fdca1\",\"\u883A\u883C\u8841\u8843\u8845\u8848\u8849\u884A\u884B\u884E\u8851\u8855\u8856\u8858\u885A\u885C\u885F\u8860\u8864\u8869\u8871\u8879\u887B\u8880\u8898\u889A\u889B\u889C\u889F\u88A0\u88A8\u88AA\u88BA\u88BD\u88BE\u88C0\u88CA\",4,\"\u88D1\u88D2\u88D3\u88DB\u88DE\u88E7\u88EF\u88F0\u88F1\u88F5\u88F7\u8901\u8906\u890D\u890E\u890F\u8915\u8916\u8918\u8919\u891A\u891C\u8920\u8926\u8927\u8928\u8930\u8931\u8932\u8935\u8939\u893A\u893E\u8940\u8942\u8945\u8946\u8949\u894F\u8952\u8957\u895A\u895B\u895C\u8961\u8962\u8963\u896B\u896E\u8970\u8973\u8975\u897A\"],[\"8fdda1\",\"\u897B\u897C\u897D\u8989\u898D\u8990\u8994\u8995\u899B\u899C\u899F\u89A0\u89A5\u89B0\u89B4\u89B5\u89B6\u89B7\u89BC\u89D4\",4,\"\u89E5\u89E9\u89EB\u89ED\u89F1\u89F3\u89F6\u89F9\u89FD\u89FF\u8A04\u8A05\u8A07\u8A0F\u8A11\u8A12\u8A14\u8A15\u8A1E\u8A20\u8A22\u8A24\u8A26\u8A2B\u8A2C\u8A2F\u8A35\u8A37\u8A3D\u8A3E\u8A40\u8A43\u8A45\u8A47\u8A49\u8A4D\u8A4E\u8A53\u8A56\u8A57\u8A58\u8A5C\u8A5D\u8A61\u8A65\u8A67\u8A75\u8A76\u8A77\u8A79\u8A7A\u8A7B\u8A7E\u8A7F\u8A80\u8A83\u8A86\u8A8B\u8A8F\u8A90\u8A92\u8A96\u8A97\u8A99\u8A9F\u8AA7\u8AA9\u8AAE\u8AAF\u8AB3\"],[\"8fdea1\",\"\u8AB6\u8AB7\u8ABB\u8ABE\u8AC3\u8AC6\u8AC8\u8AC9\u8ACA\u8AD1\u8AD3\u8AD4\u8AD5\u8AD7\u8ADD\u8ADF\u8AEC\u8AF0\u8AF4\u8AF5\u8AF6\u8AFC\u8AFF\u8B05\u8B06\u8B0B\u8B11\u8B1C\u8B1E\u8B1F\u8B0A\u8B2D\u8B30\u8B37\u8B3C\u8B42\",4,\"\u8B48\u8B52\u8B53\u8B54\u8B59\u8B4D\u8B5E\u8B63\u8B6D\u8B76\u8B78\u8B79\u8B7C\u8B7E\u8B81\u8B84\u8B85\u8B8B\u8B8D\u8B8F\u8B94\u8B95\u8B9C\u8B9E\u8B9F\u8C38\u8C39\u8C3D\u8C3E\u8C45\u8C47\u8C49\u8C4B\u8C4F\u8C51\u8C53\u8C54\u8C57\u8C58\u8C5B\u8C5D\u8C59\u8C63\u8C64\u8C66\u8C68\u8C69\u8C6D\u8C73\u8C75\u8C76\u8C7B\u8C7E\u8C86\"],[\"8fdfa1\",\"\u8C87\u8C8B\u8C90\u8C92\u8C93\u8C99\u8C9B\u8C9C\u8CA4\u8CB9\u8CBA\u8CC5\u8CC6\u8CC9\u8CCB\u8CCF\u8CD6\u8CD5\u8CD9\u8CDD\u8CE1\u8CE8\u8CEC\u8CEF\u8CF0\u8CF2\u8CF5\u8CF7\u8CF8\u8CFE\u8CFF\u8D01\u8D03\u8D09\u8D12\u8D17\u8D1B\u8D65\u8D69\u8D6C\u8D6E\u8D7F\u8D82\u8D84\u8D88\u8D8D\u8D90\u8D91\u8D95\u8D9E\u8D9F\u8DA0\u8DA6\u8DAB\u8DAC\u8DAF\u8DB2\u8DB5\u8DB7\u8DB9\u8DBB\u8DC0\u8DC5\u8DC6\u8DC7\u8DC8\u8DCA\u8DCE\u8DD1\u8DD4\u8DD5\u8DD7\u8DD9\u8DE4\u8DE5\u8DE7\u8DEC\u8DF0\u8DBC\u8DF1\u8DF2\u8DF4\u8DFD\u8E01\u8E04\u8E05\u8E06\u8E0B\u8E11\u8E14\u8E16\u8E20\u8E21\u8E22\"],[\"8fe0a1\",\"\u8E23\u8E26\u8E27\u8E31\u8E33\u8E36\u8E37\u8E38\u8E39\u8E3D\u8E40\u8E41\u8E4B\u8E4D\u8E4E\u8E4F\u8E54\u8E5B\u8E5C\u8E5D\u8E5E\u8E61\u8E62\u8E69\u8E6C\u8E6D\u8E6F\u8E70\u8E71\u8E79\u8E7A\u8E7B\u8E82\u8E83\u8E89\u8E90\u8E92\u8E95\u8E9A\u8E9B\u8E9D\u8E9E\u8EA2\u8EA7\u8EA9\u8EAD\u8EAE\u8EB3\u8EB5\u8EBA\u8EBB\u8EC0\u8EC1\u8EC3\u8EC4\u8EC7\u8ECF\u8ED1\u8ED4\u8EDC\u8EE8\u8EEE\u8EF0\u8EF1\u8EF7\u8EF9\u8EFA\u8EED\u8F00\u8F02\u8F07\u8F08\u8F0F\u8F10\u8F16\u8F17\u8F18\u8F1E\u8F20\u8F21\u8F23\u8F25\u8F27\u8F28\u8F2C\u8F2D\u8F2E\u8F34\u8F35\u8F36\u8F37\u8F3A\u8F40\u8F41\"],[\"8fe1a1\",\"\u8F43\u8F47\u8F4F\u8F51\",4,\"\u8F58\u8F5D\u8F5E\u8F65\u8F9D\u8FA0\u8FA1\u8FA4\u8FA5\u8FA6\u8FB5\u8FB6\u8FB8\u8FBE\u8FC0\u8FC1\u8FC6\u8FCA\u8FCB\u8FCD\u8FD0\u8FD2\u8FD3\u8FD5\u8FE0\u8FE3\u8FE4\u8FE8\u8FEE\u8FF1\u8FF5\u8FF6\u8FFB\u8FFE\u9002\u9004\u9008\u900C\u9018\u901B\u9028\u9029\u902F\u902A\u902C\u902D\u9033\u9034\u9037\u903F\u9043\u9044\u904C\u905B\u905D\u9062\u9066\u9067\u906C\u9070\u9074\u9079\u9085\u9088\u908B\u908C\u908E\u9090\u9095\u9097\u9098\u9099\u909B\u90A0\u90A1\u90A2\u90A5\u90B0\u90B2\u90B3\u90B4\u90B6\u90BD\u90CC\u90BE\u90C3\"],[\"8fe2a1\",\"\u90C4\u90C5\u90C7\u90C8\u90D5\u90D7\u90D8\u90D9\u90DC\u90DD\u90DF\u90E5\u90D2\u90F6\u90EB\u90EF\u90F0\u90F4\u90FE\u90FF\u9100\u9104\u9105\u9106\u9108\u910D\u9110\u9114\u9116\u9117\u9118\u911A\u911C\u911E\u9120\u9125\u9122\u9123\u9127\u9129\u912E\u912F\u9131\u9134\u9136\u9137\u9139\u913A\u913C\u913D\u9143\u9147\u9148\u914F\u9153\u9157\u9159\u915A\u915B\u9161\u9164\u9167\u916D\u9174\u9179\u917A\u917B\u9181\u9183\u9185\u9186\u918A\u918E\u9191\u9193\u9194\u9195\u9198\u919E\u91A1\u91A6\u91A8\u91AC\u91AD\u91AE\u91B0\u91B1\u91B2\u91B3\u91B6\u91BB\u91BC\u91BD\u91BF\"],[\"8fe3a1\",\"\u91C2\u91C3\u91C5\u91D3\u91D4\u91D7\u91D9\u91DA\u91DE\u91E4\u91E5\u91E9\u91EA\u91EC\",5,\"\u91F7\u91F9\u91FB\u91FD\u9200\u9201\u9204\u9205\u9206\u9207\u9209\u920A\u920C\u9210\u9212\u9213\u9216\u9218\u921C\u921D\u9223\u9224\u9225\u9226\u9228\u922E\u922F\u9230\u9233\u9235\u9236\u9238\u9239\u923A\u923C\u923E\u9240\u9242\u9243\u9246\u9247\u924A\u924D\u924E\u924F\u9251\u9258\u9259\u925C\u925D\u9260\u9261\u9265\u9267\u9268\u9269\u926E\u926F\u9270\u9275\",4,\"\u927B\u927C\u927D\u927F\u9288\u9289\u928A\u928D\u928E\u9292\u9297\"],[\"8fe4a1\",\"\u9299\u929F\u92A0\u92A4\u92A5\u92A7\u92A8\u92AB\u92AF\u92B2\u92B6\u92B8\u92BA\u92BB\u92BC\u92BD\u92BF\",4,\"\u92C5\u92C6\u92C7\u92C8\u92CB\u92CC\u92CD\u92CE\u92D0\u92D3\u92D5\u92D7\u92D8\u92D9\u92DC\u92DD\u92DF\u92E0\u92E1\u92E3\u92E5\u92E7\u92E8\u92EC\u92EE\u92F0\u92F9\u92FB\u92FF\u9300\u9302\u9308\u930D\u9311\u9314\u9315\u931C\u931D\u931E\u931F\u9321\u9324\u9325\u9327\u9329\u932A\u9333\u9334\u9336\u9337\u9347\u9348\u9349\u9350\u9351\u9352\u9355\u9357\u9358\u935A\u935E\u9364\u9365\u9367\u9369\u936A\u936D\u936F\u9370\u9371\u9373\u9374\u9376\"],[\"8fe5a1\",\"\u937A\u937D\u937F\u9380\u9381\u9382\u9388\u938A\u938B\u938D\u938F\u9392\u9395\u9398\u939B\u939E\u93A1\u93A3\u93A4\u93A6\u93A8\u93AB\u93B4\u93B5\u93B6\u93BA\u93A9\u93C1\u93C4\u93C5\u93C6\u93C7\u93C9\",4,\"\u93D3\u93D9\u93DC\u93DE\u93DF\u93E2\u93E6\u93E7\u93F9\u93F7\u93F8\u93FA\u93FB\u93FD\u9401\u9402\u9404\u9408\u9409\u940D\u940E\u940F\u9415\u9416\u9417\u941F\u942E\u942F\u9431\u9432\u9433\u9434\u943B\u943F\u943D\u9443\u9445\u9448\u944A\u944C\u9455\u9459\u945C\u945F\u9461\u9463\u9468\u946B\u946D\u946E\u946F\u9471\u9472\u9484\u9483\u9578\u9579\"],[\"8fe6a1\",\"\u957E\u9584\u9588\u958C\u958D\u958E\u959D\u959E\u959F\u95A1\u95A6\u95A9\u95AB\u95AC\u95B4\u95B6\u95BA\u95BD\u95BF\u95C6\u95C8\u95C9\u95CB\u95D0\u95D1\u95D2\u95D3\u95D9\u95DA\u95DD\u95DE\u95DF\u95E0\u95E4\u95E6\u961D\u961E\u9622\u9624\u9625\u9626\u962C\u9631\u9633\u9637\u9638\u9639\u963A\u963C\u963D\u9641\u9652\u9654\u9656\u9657\u9658\u9661\u966E\u9674\u967B\u967C\u967E\u967F\u9681\u9682\u9683\u9684\u9689\u9691\u9696\u969A\u969D\u969F\u96A4\u96A5\u96A6\u96A9\u96AE\u96AF\u96B3\u96BA\u96CA\u96D2\u5DB2\u96D8\u96DA\u96DD\u96DE\u96DF\u96E9\u96EF\u96F1\u96FA\u9702\"],[\"8fe7a1\",\"\u9703\u9705\u9709\u971A\u971B\u971D\u9721\u9722\u9723\u9728\u9731\u9733\u9741\u9743\u974A\u974E\u974F\u9755\u9757\u9758\u975A\u975B\u9763\u9767\u976A\u976E\u9773\u9776\u9777\u9778\u977B\u977D\u977F\u9780\u9789\u9795\u9796\u9797\u9799\u979A\u979E\u979F\u97A2\u97AC\u97AE\u97B1\u97B2\u97B5\u97B6\u97B8\u97B9\u97BA\u97BC\u97BE\u97BF\u97C1\u97C4\u97C5\u97C7\u97C9\u97CA\u97CC\u97CD\u97CE\u97D0\u97D1\u97D4\u97D7\u97D8\u97D9\u97DD\u97DE\u97E0\u97DB\u97E1\u97E4\u97EF\u97F1\u97F4\u97F7\u97F8\u97FA\u9807\u980A\u9819\u980D\u980E\u9814\u9816\u981C\u981E\u9820\u9823\u9826\"],[\"8fe8a1\",\"\u982B\u982E\u982F\u9830\u9832\u9833\u9835\u9825\u983E\u9844\u9847\u984A\u9851\u9852\u9853\u9856\u9857\u9859\u985A\u9862\u9863\u9865\u9866\u986A\u986C\u98AB\u98AD\u98AE\u98B0\u98B4\u98B7\u98B8\u98BA\u98BB\u98BF\u98C2\u98C5\u98C8\u98CC\u98E1\u98E3\u98E5\u98E6\u98E7\u98EA\u98F3\u98F6\u9902\u9907\u9908\u9911\u9915\u9916\u9917\u991A\u991B\u991C\u991F\u9922\u9926\u9927\u992B\u9931\",4,\"\u9939\u993A\u993B\u993C\u9940\u9941\u9946\u9947\u9948\u994D\u994E\u9954\u9958\u9959\u995B\u995C\u995E\u995F\u9960\u999B\u999D\u999F\u99A6\u99B0\u99B1\u99B2\u99B5\"],[\"8fe9a1\",\"\u99B9\u99BA\u99BD\u99BF\u99C3\u99C9\u99D3\u99D4\u99D9\u99DA\u99DC\u99DE\u99E7\u99EA\u99EB\u99EC\u99F0\u99F4\u99F5\u99F9\u99FD\u99FE\u9A02\u9A03\u9A04\u9A0B\u9A0C\u9A10\u9A11\u9A16\u9A1E\u9A20\u9A22\u9A23\u9A24\u9A27\u9A2D\u9A2E\u9A33\u9A35\u9A36\u9A38\u9A47\u9A41\u9A44\u9A4A\u9A4B\u9A4C\u9A4E\u9A51\u9A54\u9A56\u9A5D\u9AAA\u9AAC\u9AAE\u9AAF\u9AB2\u9AB4\u9AB5\u9AB6\u9AB9\u9ABB\u9ABE\u9ABF\u9AC1\u9AC3\u9AC6\u9AC8\u9ACE\u9AD0\u9AD2\u9AD5\u9AD6\u9AD7\u9ADB\u9ADC\u9AE0\u9AE4\u9AE5\u9AE7\u9AE9\u9AEC\u9AF2\u9AF3\u9AF5\u9AF9\u9AFA\u9AFD\u9AFF\",4],[\"8feaa1\",\"\u9B04\u9B05\u9B08\u9B09\u9B0B\u9B0C\u9B0D\u9B0E\u9B10\u9B12\u9B16\u9B19\u9B1B\u9B1C\u9B20\u9B26\u9B2B\u9B2D\u9B33\u9B34\u9B35\u9B37\u9B39\u9B3A\u9B3D\u9B48\u9B4B\u9B4C\u9B55\u9B56\u9B57\u9B5B\u9B5E\u9B61\u9B63\u9B65\u9B66\u9B68\u9B6A\",4,\"\u9B73\u9B75\u9B77\u9B78\u9B79\u9B7F\u9B80\u9B84\u9B85\u9B86\u9B87\u9B89\u9B8A\u9B8B\u9B8D\u9B8F\u9B90\u9B94\u9B9A\u9B9D\u9B9E\u9BA6\u9BA7\u9BA9\u9BAC\u9BB0\u9BB1\u9BB2\u9BB7\u9BB8\u9BBB\u9BBC\u9BBE\u9BBF\u9BC1\u9BC7\u9BC8\u9BCE\u9BD0\u9BD7\u9BD8\u9BDD\u9BDF\u9BE5\u9BE7\u9BEA\u9BEB\u9BEF\u9BF3\u9BF7\u9BF8\"],[\"8feba1\",\"\u9BF9\u9BFA\u9BFD\u9BFF\u9C00\u9C02\u9C0B\u9C0F\u9C11\u9C16\u9C18\u9C19\u9C1A\u9C1C\u9C1E\u9C22\u9C23\u9C26\",4,\"\u9C31\u9C35\u9C36\u9C37\u9C3D\u9C41\u9C43\u9C44\u9C45\u9C49\u9C4A\u9C4E\u9C4F\u9C50\u9C53\u9C54\u9C56\u9C58\u9C5B\u9C5D\u9C5E\u9C5F\u9C63\u9C69\u9C6A\u9C5C\u9C6B\u9C68\u9C6E\u9C70\u9C72\u9C75\u9C77\u9C7B\u9CE6\u9CF2\u9CF7\u9CF9\u9D0B\u9D02\u9D11\u9D17\u9D18\u9D1C\u9D1D\u9D1E\u9D2F\u9D30\u9D32\u9D33\u9D34\u9D3A\u9D3C\u9D45\u9D3D\u9D42\u9D43\u9D47\u9D4A\u9D53\u9D54\u9D5F\u9D63\u9D62\u9D65\u9D69\u9D6A\u9D6B\u9D70\u9D76\u9D77\u9D7B\"],[\"8feca1\",\"\u9D7C\u9D7E\u9D83\u9D84\u9D86\u9D8A\u9D8D\u9D8E\u9D92\u9D93\u9D95\u9D96\u9D97\u9D98\u9DA1\u9DAA\u9DAC\u9DAE\u9DB1\u9DB5\u9DB9\u9DBC\u9DBF\u9DC3\u9DC7\u9DC9\u9DCA\u9DD4\u9DD5\u9DD6\u9DD7\u9DDA\u9DDE\u9DDF\u9DE0\u9DE5\u9DE7\u9DE9\u9DEB\u9DEE\u9DF0\u9DF3\u9DF4\u9DFE\u9E0A\u9E02\u9E07\u9E0E\u9E10\u9E11\u9E12\u9E15\u9E16\u9E19\u9E1C\u9E1D\u9E7A\u9E7B\u9E7C\u9E80\u9E82\u9E83\u9E84\u9E85\u9E87\u9E8E\u9E8F\u9E96\u9E98\u9E9B\u9E9E\u9EA4\u9EA8\u9EAC\u9EAE\u9EAF\u9EB0\u9EB3\u9EB4\u9EB5\u9EC6\u9EC8\u9ECB\u9ED5\u9EDF\u9EE4\u9EE7\u9EEC\u9EED\u9EEE\u9EF0\u9EF1\u9EF2\u9EF5\"],[\"8feda1\",\"\u9EF8\u9EFF\u9F02\u9F03\u9F09\u9F0F\u9F10\u9F11\u9F12\u9F14\u9F16\u9F17\u9F19\u9F1A\u9F1B\u9F1F\u9F22\u9F26\u9F2A\u9F2B\u9F2F\u9F31\u9F32\u9F34\u9F37\u9F39\u9F3A\u9F3C\u9F3D\u9F3F\u9F41\u9F43\",4,\"\u9F53\u9F55\u9F56\u9F57\u9F58\u9F5A\u9F5D\u9F5E\u9F68\u9F69\u9F6D\",4,\"\u9F73\u9F75\u9F7A\u9F7D\u9F8F\u9F90\u9F91\u9F92\u9F94\u9F96\u9F97\u9F9E\u9FA1\u9FA2\u9FA3\u9FA5\"]]");
      /***/
    },
    /* 402 */

    /***/
    function (module) {
      module.exports = JSON.parse("{\"uChars\":[128,165,169,178,184,216,226,235,238,244,248,251,253,258,276,284,300,325,329,334,364,463,465,467,469,471,473,475,477,506,594,610,712,716,730,930,938,962,970,1026,1104,1106,8209,8215,8218,8222,8231,8241,8244,8246,8252,8365,8452,8454,8458,8471,8482,8556,8570,8596,8602,8713,8720,8722,8726,8731,8737,8740,8742,8748,8751,8760,8766,8777,8781,8787,8802,8808,8816,8854,8858,8870,8896,8979,9322,9372,9548,9588,9616,9622,9634,9652,9662,9672,9676,9680,9702,9735,9738,9793,9795,11906,11909,11913,11917,11928,11944,11947,11951,11956,11960,11964,11979,12284,12292,12312,12319,12330,12351,12436,12447,12535,12543,12586,12842,12850,12964,13200,13215,13218,13253,13263,13267,13270,13384,13428,13727,13839,13851,14617,14703,14801,14816,14964,15183,15471,15585,16471,16736,17208,17325,17330,17374,17623,17997,18018,18212,18218,18301,18318,18760,18811,18814,18820,18823,18844,18848,18872,19576,19620,19738,19887,40870,59244,59336,59367,59413,59417,59423,59431,59437,59443,59452,59460,59478,59493,63789,63866,63894,63976,63986,64016,64018,64021,64025,64034,64037,64042,65074,65093,65107,65112,65127,65132,65375,65510,65536],\"gbChars\":[0,36,38,45,50,81,89,95,96,100,103,104,105,109,126,133,148,172,175,179,208,306,307,308,309,310,311,312,313,341,428,443,544,545,558,741,742,749,750,805,819,820,7922,7924,7925,7927,7934,7943,7944,7945,7950,8062,8148,8149,8152,8164,8174,8236,8240,8262,8264,8374,8380,8381,8384,8388,8390,8392,8393,8394,8396,8401,8406,8416,8419,8424,8437,8439,8445,8482,8485,8496,8521,8603,8936,8946,9046,9050,9063,9066,9076,9092,9100,9108,9111,9113,9131,9162,9164,9218,9219,11329,11331,11334,11336,11346,11361,11363,11366,11370,11372,11375,11389,11682,11686,11687,11692,11694,11714,11716,11723,11725,11730,11736,11982,11989,12102,12336,12348,12350,12384,12393,12395,12397,12510,12553,12851,12962,12973,13738,13823,13919,13933,14080,14298,14585,14698,15583,15847,16318,16434,16438,16481,16729,17102,17122,17315,17320,17402,17418,17859,17909,17911,17915,17916,17936,17939,17961,18664,18703,18814,18962,19043,33469,33470,33471,33484,33485,33490,33497,33501,33505,33513,33520,33536,33550,37845,37921,37948,38029,38038,38064,38065,38066,38069,38075,38076,38078,39108,39109,39113,39114,39115,39116,39265,39394,189000]}");
      /***/
    },
    /* 403 */

    /***/
    function (module) {
      module.exports = JSON.parse("[[\"0\",\"\\u0000\",127],[\"8141\",\"\uAC02\uAC03\uAC05\uAC06\uAC0B\",4,\"\uAC18\uAC1E\uAC1F\uAC21\uAC22\uAC23\uAC25\",6,\"\uAC2E\uAC32\uAC33\uAC34\"],[\"8161\",\"\uAC35\uAC36\uAC37\uAC3A\uAC3B\uAC3D\uAC3E\uAC3F\uAC41\",9,\"\uAC4C\uAC4E\",5,\"\uAC55\"],[\"8181\",\"\uAC56\uAC57\uAC59\uAC5A\uAC5B\uAC5D\",18,\"\uAC72\uAC73\uAC75\uAC76\uAC79\uAC7B\",4,\"\uAC82\uAC87\uAC88\uAC8D\uAC8E\uAC8F\uAC91\uAC92\uAC93\uAC95\",6,\"\uAC9E\uACA2\",5,\"\uACAB\uACAD\uACAE\uACB1\",6,\"\uACBA\uACBE\uACBF\uACC0\uACC2\uACC3\uACC5\uACC6\uACC7\uACC9\uACCA\uACCB\uACCD\",7,\"\uACD6\uACD8\",7,\"\uACE2\uACE3\uACE5\uACE6\uACE9\uACEB\uACED\uACEE\uACF2\uACF4\uACF7\",4,\"\uACFE\uACFF\uAD01\uAD02\uAD03\uAD05\uAD07\",4,\"\uAD0E\uAD10\uAD12\uAD13\"],[\"8241\",\"\uAD14\uAD15\uAD16\uAD17\uAD19\uAD1A\uAD1B\uAD1D\uAD1E\uAD1F\uAD21\",7,\"\uAD2A\uAD2B\uAD2E\",5],[\"8261\",\"\uAD36\uAD37\uAD39\uAD3A\uAD3B\uAD3D\",6,\"\uAD46\uAD48\uAD4A\",5,\"\uAD51\uAD52\uAD53\uAD55\uAD56\uAD57\"],[\"8281\",\"\uAD59\",7,\"\uAD62\uAD64\",7,\"\uAD6E\uAD6F\uAD71\uAD72\uAD77\uAD78\uAD79\uAD7A\uAD7E\uAD80\uAD83\",4,\"\uAD8A\uAD8B\uAD8D\uAD8E\uAD8F\uAD91\",10,\"\uAD9E\",5,\"\uADA5\",17,\"\uADB8\",7,\"\uADC2\uADC3\uADC5\uADC6\uADC7\uADC9\",6,\"\uADD2\uADD4\",7,\"\uADDD\uADDE\uADDF\uADE1\uADE2\uADE3\uADE5\",18],[\"8341\",\"\uADFA\uADFB\uADFD\uADFE\uAE02\",5,\"\uAE0A\uAE0C\uAE0E\",5,\"\uAE15\",7],[\"8361\",\"\uAE1D\",18,\"\uAE32\uAE33\uAE35\uAE36\uAE39\uAE3B\uAE3C\"],[\"8381\",\"\uAE3D\uAE3E\uAE3F\uAE42\uAE44\uAE47\uAE48\uAE49\uAE4B\uAE4F\uAE51\uAE52\uAE53\uAE55\uAE57\",4,\"\uAE5E\uAE62\uAE63\uAE64\uAE66\uAE67\uAE6A\uAE6B\uAE6D\uAE6E\uAE6F\uAE71\",6,\"\uAE7A\uAE7E\",5,\"\uAE86\",5,\"\uAE8D\",46,\"\uAEBF\uAEC1\uAEC2\uAEC3\uAEC5\",6,\"\uAECE\uAED2\",5,\"\uAEDA\uAEDB\uAEDD\",8],[\"8441\",\"\uAEE6\uAEE7\uAEE9\uAEEA\uAEEC\uAEEE\",5,\"\uAEF5\uAEF6\uAEF7\uAEF9\uAEFA\uAEFB\uAEFD\",8],[\"8461\",\"\uAF06\uAF09\uAF0A\uAF0B\uAF0C\uAF0E\uAF0F\uAF11\",18],[\"8481\",\"\uAF24\",7,\"\uAF2E\uAF2F\uAF31\uAF33\uAF35\",6,\"\uAF3E\uAF40\uAF44\uAF45\uAF46\uAF47\uAF4A\",5,\"\uAF51\",10,\"\uAF5E\",5,\"\uAF66\",18,\"\uAF7A\",5,\"\uAF81\uAF82\uAF83\uAF85\uAF86\uAF87\uAF89\",6,\"\uAF92\uAF93\uAF94\uAF96\",5,\"\uAF9D\",26,\"\uAFBA\uAFBB\uAFBD\uAFBE\"],[\"8541\",\"\uAFBF\uAFC1\",5,\"\uAFCA\uAFCC\uAFCF\",4,\"\uAFD5\",6,\"\uAFDD\",4],[\"8561\",\"\uAFE2\",5,\"\uAFEA\",5,\"\uAFF2\uAFF3\uAFF5\uAFF6\uAFF7\uAFF9\",6,\"\uB002\uB003\"],[\"8581\",\"\uB005\",6,\"\uB00D\uB00E\uB00F\uB011\uB012\uB013\uB015\",6,\"\uB01E\",9,\"\uB029\",26,\"\uB046\uB047\uB049\uB04B\uB04D\uB04F\uB050\uB051\uB052\uB056\uB058\uB05A\uB05B\uB05C\uB05E\",29,\"\uB07E\uB07F\uB081\uB082\uB083\uB085\",6,\"\uB08E\uB090\uB092\",5,\"\uB09B\uB09D\uB09E\uB0A3\uB0A4\"],[\"8641\",\"\uB0A5\uB0A6\uB0A7\uB0AA\uB0B0\uB0B2\uB0B6\uB0B7\uB0B9\uB0BA\uB0BB\uB0BD\",6,\"\uB0C6\uB0CA\",5,\"\uB0D2\"],[\"8661\",\"\uB0D3\uB0D5\uB0D6\uB0D7\uB0D9\",6,\"\uB0E1\uB0E2\uB0E3\uB0E4\uB0E6\",10],[\"8681\",\"\uB0F1\",22,\"\uB10A\uB10D\uB10E\uB10F\uB111\uB114\uB115\uB116\uB117\uB11A\uB11E\",4,\"\uB126\uB127\uB129\uB12A\uB12B\uB12D\",6,\"\uB136\uB13A\",5,\"\uB142\uB143\uB145\uB146\uB147\uB149\",6,\"\uB152\uB153\uB156\uB157\uB159\uB15A\uB15B\uB15D\uB15E\uB15F\uB161\",22,\"\uB17A\uB17B\uB17D\uB17E\uB17F\uB181\uB183\",4,\"\uB18A\uB18C\uB18E\uB18F\uB190\uB191\uB195\uB196\uB197\uB199\uB19A\uB19B\uB19D\"],[\"8741\",\"\uB19E\",9,\"\uB1A9\",15],[\"8761\",\"\uB1B9\",18,\"\uB1CD\uB1CE\uB1CF\uB1D1\uB1D2\uB1D3\uB1D5\"],[\"8781\",\"\uB1D6\",5,\"\uB1DE\uB1E0\",7,\"\uB1EA\uB1EB\uB1ED\uB1EE\uB1EF\uB1F1\",7,\"\uB1FA\uB1FC\uB1FE\",5,\"\uB206\uB207\uB209\uB20A\uB20D\",6,\"\uB216\uB218\uB21A\",5,\"\uB221\",18,\"\uB235\",6,\"\uB23D\",26,\"\uB259\uB25A\uB25B\uB25D\uB25E\uB25F\uB261\",6,\"\uB26A\",4],[\"8841\",\"\uB26F\",4,\"\uB276\",5,\"\uB27D\",6,\"\uB286\uB287\uB288\uB28A\",4],[\"8861\",\"\uB28F\uB292\uB293\uB295\uB296\uB297\uB29B\",4,\"\uB2A2\uB2A4\uB2A7\uB2A8\uB2A9\uB2AB\uB2AD\uB2AE\uB2AF\uB2B1\uB2B2\uB2B3\uB2B5\uB2B6\uB2B7\"],[\"8881\",\"\uB2B8\",15,\"\uB2CA\uB2CB\uB2CD\uB2CE\uB2CF\uB2D1\uB2D3\",4,\"\uB2DA\uB2DC\uB2DE\uB2DF\uB2E0\uB2E1\uB2E3\uB2E7\uB2E9\uB2EA\uB2F0\uB2F1\uB2F2\uB2F6\uB2FC\uB2FD\uB2FE\uB302\uB303\uB305\uB306\uB307\uB309\",6,\"\uB312\uB316\",5,\"\uB31D\",54,\"\uB357\uB359\uB35A\uB35D\uB360\uB361\uB362\uB363\"],[\"8941\",\"\uB366\uB368\uB36A\uB36C\uB36D\uB36F\uB372\uB373\uB375\uB376\uB377\uB379\",6,\"\uB382\uB386\",5,\"\uB38D\"],[\"8961\",\"\uB38E\uB38F\uB391\uB392\uB393\uB395\",10,\"\uB3A2\",5,\"\uB3A9\uB3AA\uB3AB\uB3AD\"],[\"8981\",\"\uB3AE\",21,\"\uB3C6\uB3C7\uB3C9\uB3CA\uB3CD\uB3CF\uB3D1\uB3D2\uB3D3\uB3D6\uB3D8\uB3DA\uB3DC\uB3DE\uB3DF\uB3E1\uB3E2\uB3E3\uB3E5\uB3E6\uB3E7\uB3E9\",18,\"\uB3FD\",18,\"\uB411\",6,\"\uB419\uB41A\uB41B\uB41D\uB41E\uB41F\uB421\",6,\"\uB42A\uB42C\",7,\"\uB435\",15],[\"8a41\",\"\uB445\",10,\"\uB452\uB453\uB455\uB456\uB457\uB459\",6,\"\uB462\uB464\uB466\"],[\"8a61\",\"\uB467\",4,\"\uB46D\",18,\"\uB481\uB482\"],[\"8a81\",\"\uB483\",4,\"\uB489\",19,\"\uB49E\",5,\"\uB4A5\uB4A6\uB4A7\uB4A9\uB4AA\uB4AB\uB4AD\",7,\"\uB4B6\uB4B8\uB4BA\",5,\"\uB4C1\uB4C2\uB4C3\uB4C5\uB4C6\uB4C7\uB4C9\",6,\"\uB4D1\uB4D2\uB4D3\uB4D4\uB4D6\",5,\"\uB4DE\uB4DF\uB4E1\uB4E2\uB4E5\uB4E7\",4,\"\uB4EE\uB4F0\uB4F2\",5,\"\uB4F9\",26,\"\uB516\uB517\uB519\uB51A\uB51D\"],[\"8b41\",\"\uB51E\",5,\"\uB526\uB52B\",4,\"\uB532\uB533\uB535\uB536\uB537\uB539\",6,\"\uB542\uB546\"],[\"8b61\",\"\uB547\uB548\uB549\uB54A\uB54E\uB54F\uB551\uB552\uB553\uB555\",6,\"\uB55E\uB562\",8],[\"8b81\",\"\uB56B\",52,\"\uB5A2\uB5A3\uB5A5\uB5A6\uB5A7\uB5A9\uB5AC\uB5AD\uB5AE\uB5AF\uB5B2\uB5B6\",4,\"\uB5BE\uB5BF\uB5C1\uB5C2\uB5C3\uB5C5\",6,\"\uB5CE\uB5D2\",5,\"\uB5D9\",18,\"\uB5ED\",18],[\"8c41\",\"\uB600\",15,\"\uB612\uB613\uB615\uB616\uB617\uB619\",4],[\"8c61\",\"\uB61E\",6,\"\uB626\",5,\"\uB62D\",6,\"\uB635\",5],[\"8c81\",\"\uB63B\",12,\"\uB649\",26,\"\uB665\uB666\uB667\uB669\",50,\"\uB69E\uB69F\uB6A1\uB6A2\uB6A3\uB6A5\",5,\"\uB6AD\uB6AE\uB6AF\uB6B0\uB6B2\",16],[\"8d41\",\"\uB6C3\",16,\"\uB6D5\",8],[\"8d61\",\"\uB6DE\",17,\"\uB6F1\uB6F2\uB6F3\uB6F5\uB6F6\uB6F7\uB6F9\uB6FA\"],[\"8d81\",\"\uB6FB\",4,\"\uB702\uB703\uB704\uB706\",33,\"\uB72A\uB72B\uB72D\uB72E\uB731\",6,\"\uB73A\uB73C\",7,\"\uB745\uB746\uB747\uB749\uB74A\uB74B\uB74D\",6,\"\uB756\",9,\"\uB761\uB762\uB763\uB765\uB766\uB767\uB769\",6,\"\uB772\uB774\uB776\",5,\"\uB77E\uB77F\uB781\uB782\uB783\uB785\",6,\"\uB78E\uB793\uB794\uB795\uB79A\uB79B\uB79D\uB79E\"],[\"8e41\",\"\uB79F\uB7A1\",6,\"\uB7AA\uB7AE\",5,\"\uB7B6\uB7B7\uB7B9\",8],[\"8e61\",\"\uB7C2\",4,\"\uB7C8\uB7CA\",19],[\"8e81\",\"\uB7DE\",13,\"\uB7EE\uB7EF\uB7F1\uB7F2\uB7F3\uB7F5\",6,\"\uB7FE\uB802\",4,\"\uB80A\uB80B\uB80D\uB80E\uB80F\uB811\",6,\"\uB81A\uB81C\uB81E\",5,\"\uB826\uB827\uB829\uB82A\uB82B\uB82D\",6,\"\uB836\uB83A\",5,\"\uB841\uB842\uB843\uB845\",11,\"\uB852\uB854\",7,\"\uB85E\uB85F\uB861\uB862\uB863\uB865\",6,\"\uB86E\uB870\uB872\",5,\"\uB879\uB87A\uB87B\uB87D\",7],[\"8f41\",\"\uB885\",7,\"\uB88E\",17],[\"8f61\",\"\uB8A0\",7,\"\uB8A9\",6,\"\uB8B1\uB8B2\uB8B3\uB8B5\uB8B6\uB8B7\uB8B9\",4],[\"8f81\",\"\uB8BE\uB8BF\uB8C2\uB8C4\uB8C6\",5,\"\uB8CD\uB8CE\uB8CF\uB8D1\uB8D2\uB8D3\uB8D5\",7,\"\uB8DE\uB8E0\uB8E2\",5,\"\uB8EA\uB8EB\uB8ED\uB8EE\uB8EF\uB8F1\",6,\"\uB8FA\uB8FC\uB8FE\",5,\"\uB905\",18,\"\uB919\",6,\"\uB921\",26,\"\uB93E\uB93F\uB941\uB942\uB943\uB945\",6,\"\uB94D\uB94E\uB950\uB952\",5],[\"9041\",\"\uB95A\uB95B\uB95D\uB95E\uB95F\uB961\",6,\"\uB96A\uB96C\uB96E\",5,\"\uB976\uB977\uB979\uB97A\uB97B\uB97D\"],[\"9061\",\"\uB97E\",5,\"\uB986\uB988\uB98B\uB98C\uB98F\",15],[\"9081\",\"\uB99F\",12,\"\uB9AE\uB9AF\uB9B1\uB9B2\uB9B3\uB9B5\",6,\"\uB9BE\uB9C0\uB9C2\",5,\"\uB9CA\uB9CB\uB9CD\uB9D3\",4,\"\uB9DA\uB9DC\uB9DF\uB9E0\uB9E2\uB9E6\uB9E7\uB9E9\uB9EA\uB9EB\uB9ED\",6,\"\uB9F6\uB9FB\",4,\"\uBA02\",5,\"\uBA09\",11,\"\uBA16\",33,\"\uBA3A\uBA3B\uBA3D\uBA3E\uBA3F\uBA41\uBA43\uBA44\uBA45\uBA46\"],[\"9141\",\"\uBA47\uBA4A\uBA4C\uBA4F\uBA50\uBA51\uBA52\uBA56\uBA57\uBA59\uBA5A\uBA5B\uBA5D\",6,\"\uBA66\uBA6A\",5],[\"9161\",\"\uBA72\uBA73\uBA75\uBA76\uBA77\uBA79\",9,\"\uBA86\uBA88\uBA89\uBA8A\uBA8B\uBA8D\",5],[\"9181\",\"\uBA93\",20,\"\uBAAA\uBAAD\uBAAE\uBAAF\uBAB1\uBAB3\",4,\"\uBABA\uBABC\uBABE\",5,\"\uBAC5\uBAC6\uBAC7\uBAC9\",14,\"\uBADA\",33,\"\uBAFD\uBAFE\uBAFF\uBB01\uBB02\uBB03\uBB05\",7,\"\uBB0E\uBB10\uBB12\",5,\"\uBB19\uBB1A\uBB1B\uBB1D\uBB1E\uBB1F\uBB21\",6],[\"9241\",\"\uBB28\uBB2A\uBB2C\",7,\"\uBB37\uBB39\uBB3A\uBB3F\",4,\"\uBB46\uBB48\uBB4A\uBB4B\uBB4C\uBB4E\uBB51\uBB52\"],[\"9261\",\"\uBB53\uBB55\uBB56\uBB57\uBB59\",7,\"\uBB62\uBB64\",7,\"\uBB6D\",4],[\"9281\",\"\uBB72\",21,\"\uBB89\uBB8A\uBB8B\uBB8D\uBB8E\uBB8F\uBB91\",18,\"\uBBA5\uBBA6\uBBA7\uBBA9\uBBAA\uBBAB\uBBAD\",6,\"\uBBB5\uBBB6\uBBB8\",7,\"\uBBC1\uBBC2\uBBC3\uBBC5\uBBC6\uBBC7\uBBC9\",6,\"\uBBD1\uBBD2\uBBD4\",35,\"\uBBFA\uBBFB\uBBFD\uBBFE\uBC01\"],[\"9341\",\"\uBC03\",4,\"\uBC0A\uBC0E\uBC10\uBC12\uBC13\uBC19\uBC1A\uBC20\uBC21\uBC22\uBC23\uBC26\uBC28\uBC2A\uBC2B\uBC2C\uBC2E\uBC2F\uBC32\uBC33\uBC35\"],[\"9361\",\"\uBC36\uBC37\uBC39\",6,\"\uBC42\uBC46\uBC47\uBC48\uBC4A\uBC4B\uBC4E\uBC4F\uBC51\",8],[\"9381\",\"\uBC5A\uBC5B\uBC5C\uBC5E\",37,\"\uBC86\uBC87\uBC89\uBC8A\uBC8D\uBC8F\",4,\"\uBC96\uBC98\uBC9B\",4,\"\uBCA2\uBCA3\uBCA5\uBCA6\uBCA9\",6,\"\uBCB2\uBCB6\",5,\"\uBCBE\uBCBF\uBCC1\uBCC2\uBCC3\uBCC5\",7,\"\uBCCE\uBCD2\uBCD3\uBCD4\uBCD6\uBCD7\uBCD9\uBCDA\uBCDB\uBCDD\",22,\"\uBCF7\uBCF9\uBCFA\uBCFB\uBCFD\"],[\"9441\",\"\uBCFE\",5,\"\uBD06\uBD08\uBD0A\",5,\"\uBD11\uBD12\uBD13\uBD15\",8],[\"9461\",\"\uBD1E\",5,\"\uBD25\",6,\"\uBD2D\",12],[\"9481\",\"\uBD3A\",5,\"\uBD41\",6,\"\uBD4A\uBD4B\uBD4D\uBD4E\uBD4F\uBD51\",6,\"\uBD5A\",9,\"\uBD65\uBD66\uBD67\uBD69\",22,\"\uBD82\uBD83\uBD85\uBD86\uBD8B\",4,\"\uBD92\uBD94\uBD96\uBD97\uBD98\uBD9B\uBD9D\",6,\"\uBDA5\",10,\"\uBDB1\",6,\"\uBDB9\",24],[\"9541\",\"\uBDD2\uBDD3\uBDD6\uBDD7\uBDD9\uBDDA\uBDDB\uBDDD\",11,\"\uBDEA\",5,\"\uBDF1\"],[\"9561\",\"\uBDF2\uBDF3\uBDF5\uBDF6\uBDF7\uBDF9\",6,\"\uBE01\uBE02\uBE04\uBE06\",5,\"\uBE0E\uBE0F\uBE11\uBE12\uBE13\"],[\"9581\",\"\uBE15\",6,\"\uBE1E\uBE20\",35,\"\uBE46\uBE47\uBE49\uBE4A\uBE4B\uBE4D\uBE4F\",4,\"\uBE56\uBE58\uBE5C\uBE5D\uBE5E\uBE5F\uBE62\uBE63\uBE65\uBE66\uBE67\uBE69\uBE6B\",4,\"\uBE72\uBE76\",4,\"\uBE7E\uBE7F\uBE81\uBE82\uBE83\uBE85\",6,\"\uBE8E\uBE92\",5,\"\uBE9A\",13,\"\uBEA9\",14],[\"9641\",\"\uBEB8\",23,\"\uBED2\uBED3\"],[\"9661\",\"\uBED5\uBED6\uBED9\",6,\"\uBEE1\uBEE2\uBEE6\",5,\"\uBEED\",8],[\"9681\",\"\uBEF6\",10,\"\uBF02\",5,\"\uBF0A\",13,\"\uBF1A\uBF1E\",33,\"\uBF42\uBF43\uBF45\uBF46\uBF47\uBF49\",6,\"\uBF52\uBF53\uBF54\uBF56\",44],[\"9741\",\"\uBF83\",16,\"\uBF95\",8],[\"9761\",\"\uBF9E\",17,\"\uBFB1\",7],[\"9781\",\"\uBFB9\",11,\"\uBFC6\",5,\"\uBFCE\uBFCF\uBFD1\uBFD2\uBFD3\uBFD5\",6,\"\uBFDD\uBFDE\uBFE0\uBFE2\",89,\"\uC03D\uC03E\uC03F\"],[\"9841\",\"\uC040\",16,\"\uC052\",5,\"\uC059\uC05A\uC05B\"],[\"9861\",\"\uC05D\uC05E\uC05F\uC061\",6,\"\uC06A\",15],[\"9881\",\"\uC07A\",21,\"\uC092\uC093\uC095\uC096\uC097\uC099\",6,\"\uC0A2\uC0A4\uC0A6\",5,\"\uC0AE\uC0B1\uC0B2\uC0B7\",4,\"\uC0BE\uC0C2\uC0C3\uC0C4\uC0C6\uC0C7\uC0CA\uC0CB\uC0CD\uC0CE\uC0CF\uC0D1\",6,\"\uC0DA\uC0DE\",5,\"\uC0E6\uC0E7\uC0E9\uC0EA\uC0EB\uC0ED\",6,\"\uC0F6\uC0F8\uC0FA\",5,\"\uC101\uC102\uC103\uC105\uC106\uC107\uC109\",6,\"\uC111\uC112\uC113\uC114\uC116\",5,\"\uC121\uC122\uC125\uC128\uC129\uC12A\uC12B\uC12E\"],[\"9941\",\"\uC132\uC133\uC134\uC135\uC137\uC13A\uC13B\uC13D\uC13E\uC13F\uC141\",6,\"\uC14A\uC14E\",5,\"\uC156\uC157\"],[\"9961\",\"\uC159\uC15A\uC15B\uC15D\",6,\"\uC166\uC16A\",5,\"\uC171\uC172\uC173\uC175\uC176\uC177\uC179\uC17A\uC17B\"],[\"9981\",\"\uC17C\",8,\"\uC186\",5,\"\uC18F\uC191\uC192\uC193\uC195\uC197\",4,\"\uC19E\uC1A0\uC1A2\uC1A3\uC1A4\uC1A6\uC1A7\uC1AA\uC1AB\uC1AD\uC1AE\uC1AF\uC1B1\",11,\"\uC1BE\",5,\"\uC1C5\uC1C6\uC1C7\uC1C9\uC1CA\uC1CB\uC1CD\",6,\"\uC1D5\uC1D6\uC1D9\",6,\"\uC1E1\uC1E2\uC1E3\uC1E5\uC1E6\uC1E7\uC1E9\",6,\"\uC1F2\uC1F4\",7,\"\uC1FE\uC1FF\uC201\uC202\uC203\uC205\",6,\"\uC20E\uC210\uC212\",5,\"\uC21A\uC21B\uC21D\uC21E\uC221\uC222\uC223\"],[\"9a41\",\"\uC224\uC225\uC226\uC227\uC22A\uC22C\uC22E\uC230\uC233\uC235\",16],[\"9a61\",\"\uC246\uC247\uC249\",6,\"\uC252\uC253\uC255\uC256\uC257\uC259\",6,\"\uC261\uC262\uC263\uC264\uC266\"],[\"9a81\",\"\uC267\",4,\"\uC26E\uC26F\uC271\uC272\uC273\uC275\",6,\"\uC27E\uC280\uC282\",5,\"\uC28A\",5,\"\uC291\",6,\"\uC299\uC29A\uC29C\uC29E\",5,\"\uC2A6\uC2A7\uC2A9\uC2AA\uC2AB\uC2AE\",5,\"\uC2B6\uC2B8\uC2BA\",33,\"\uC2DE\uC2DF\uC2E1\uC2E2\uC2E5\",5,\"\uC2EE\uC2F0\uC2F2\uC2F3\uC2F4\uC2F5\uC2F7\uC2FA\uC2FD\uC2FE\uC2FF\uC301\",6,\"\uC30A\uC30B\uC30E\uC30F\"],[\"9b41\",\"\uC310\uC311\uC312\uC316\uC317\uC319\uC31A\uC31B\uC31D\",6,\"\uC326\uC327\uC32A\",8],[\"9b61\",\"\uC333\",17,\"\uC346\",7],[\"9b81\",\"\uC34E\",25,\"\uC36A\uC36B\uC36D\uC36E\uC36F\uC371\uC373\",4,\"\uC37A\uC37B\uC37E\",5,\"\uC385\uC386\uC387\uC389\uC38A\uC38B\uC38D\",50,\"\uC3C1\",22,\"\uC3DA\"],[\"9c41\",\"\uC3DB\uC3DD\uC3DE\uC3E1\uC3E3\",4,\"\uC3EA\uC3EB\uC3EC\uC3EE\",5,\"\uC3F6\uC3F7\uC3F9\",5],[\"9c61\",\"\uC3FF\",8,\"\uC409\",6,\"\uC411\",9],[\"9c81\",\"\uC41B\",8,\"\uC425\",6,\"\uC42D\uC42E\uC42F\uC431\uC432\uC433\uC435\",6,\"\uC43E\",9,\"\uC449\",26,\"\uC466\uC467\uC469\uC46A\uC46B\uC46D\",6,\"\uC476\uC477\uC478\uC47A\",5,\"\uC481\",18,\"\uC495\",6,\"\uC49D\",12],[\"9d41\",\"\uC4AA\",13,\"\uC4B9\uC4BA\uC4BB\uC4BD\",8],[\"9d61\",\"\uC4C6\",25],[\"9d81\",\"\uC4E0\",8,\"\uC4EA\",5,\"\uC4F2\uC4F3\uC4F5\uC4F6\uC4F7\uC4F9\uC4FB\uC4FC\uC4FD\uC4FE\uC502\",9,\"\uC50D\uC50E\uC50F\uC511\uC512\uC513\uC515\",6,\"\uC51D\",10,\"\uC52A\uC52B\uC52D\uC52E\uC52F\uC531\",6,\"\uC53A\uC53C\uC53E\",5,\"\uC546\uC547\uC54B\uC54F\uC550\uC551\uC552\uC556\uC55A\uC55B\uC55C\uC55F\uC562\uC563\uC565\uC566\uC567\uC569\",6,\"\uC572\uC576\",5,\"\uC57E\uC57F\uC581\uC582\uC583\uC585\uC586\uC588\uC589\uC58A\uC58B\uC58E\uC590\uC592\uC593\uC594\"],[\"9e41\",\"\uC596\uC599\uC59A\uC59B\uC59D\uC59E\uC59F\uC5A1\",7,\"\uC5AA\",9,\"\uC5B6\"],[\"9e61\",\"\uC5B7\uC5BA\uC5BF\",4,\"\uC5CB\uC5CD\uC5CF\uC5D2\uC5D3\uC5D5\uC5D6\uC5D7\uC5D9\",6,\"\uC5E2\uC5E4\uC5E6\uC5E7\"],[\"9e81\",\"\uC5E8\uC5E9\uC5EA\uC5EB\uC5EF\uC5F1\uC5F2\uC5F3\uC5F5\uC5F8\uC5F9\uC5FA\uC5FB\uC602\uC603\uC604\uC609\uC60A\uC60B\uC60D\uC60E\uC60F\uC611\",6,\"\uC61A\uC61D\",6,\"\uC626\uC627\uC629\uC62A\uC62B\uC62F\uC631\uC632\uC636\uC638\uC63A\uC63C\uC63D\uC63E\uC63F\uC642\uC643\uC645\uC646\uC647\uC649\",6,\"\uC652\uC656\",5,\"\uC65E\uC65F\uC661\",10,\"\uC66D\uC66E\uC670\uC672\",5,\"\uC67A\uC67B\uC67D\uC67E\uC67F\uC681\",6,\"\uC68A\uC68C\uC68E\",5,\"\uC696\uC697\uC699\uC69A\uC69B\uC69D\",6,\"\uC6A6\"],[\"9f41\",\"\uC6A8\uC6AA\",5,\"\uC6B2\uC6B3\uC6B5\uC6B6\uC6B7\uC6BB\",4,\"\uC6C2\uC6C4\uC6C6\",5,\"\uC6CE\"],[\"9f61\",\"\uC6CF\uC6D1\uC6D2\uC6D3\uC6D5\",6,\"\uC6DE\uC6DF\uC6E2\",5,\"\uC6EA\uC6EB\uC6ED\uC6EE\uC6EF\uC6F1\uC6F2\"],[\"9f81\",\"\uC6F3\",4,\"\uC6FA\uC6FB\uC6FC\uC6FE\",5,\"\uC706\uC707\uC709\uC70A\uC70B\uC70D\",6,\"\uC716\uC718\uC71A\",5,\"\uC722\uC723\uC725\uC726\uC727\uC729\",6,\"\uC732\uC734\uC736\uC738\uC739\uC73A\uC73B\uC73E\uC73F\uC741\uC742\uC743\uC745\",4,\"\uC74B\uC74E\uC750\uC759\uC75A\uC75B\uC75D\uC75E\uC75F\uC761\",6,\"\uC769\uC76A\uC76C\",7,\"\uC776\uC777\uC779\uC77A\uC77B\uC77F\uC780\uC781\uC782\uC786\uC78B\uC78C\uC78D\uC78F\uC792\uC793\uC795\uC799\uC79B\",4,\"\uC7A2\uC7A7\",4,\"\uC7AE\uC7AF\uC7B1\uC7B2\uC7B3\uC7B5\uC7B6\uC7B7\"],[\"a041\",\"\uC7B8\uC7B9\uC7BA\uC7BB\uC7BE\uC7C2\",5,\"\uC7CA\uC7CB\uC7CD\uC7CF\uC7D1\",6,\"\uC7D9\uC7DA\uC7DB\uC7DC\"],[\"a061\",\"\uC7DE\",5,\"\uC7E5\uC7E6\uC7E7\uC7E9\uC7EA\uC7EB\uC7ED\",13],[\"a081\",\"\uC7FB\",4,\"\uC802\uC803\uC805\uC806\uC807\uC809\uC80B\",4,\"\uC812\uC814\uC817\",4,\"\uC81E\uC81F\uC821\uC822\uC823\uC825\",6,\"\uC82E\uC830\uC832\",5,\"\uC839\uC83A\uC83B\uC83D\uC83E\uC83F\uC841\",6,\"\uC84A\uC84B\uC84E\",5,\"\uC855\",26,\"\uC872\uC873\uC875\uC876\uC877\uC879\uC87B\",4,\"\uC882\uC884\uC888\uC889\uC88A\uC88E\",5,\"\uC895\",7,\"\uC89E\uC8A0\uC8A2\uC8A3\uC8A4\"],[\"a141\",\"\uC8A5\uC8A6\uC8A7\uC8A9\",18,\"\uC8BE\uC8BF\uC8C0\uC8C1\"],[\"a161\",\"\uC8C2\uC8C3\uC8C5\uC8C6\uC8C7\uC8C9\uC8CA\uC8CB\uC8CD\",6,\"\uC8D6\uC8D8\uC8DA\",5,\"\uC8E2\uC8E3\uC8E5\"],[\"a181\",\"\uC8E6\",14,\"\uC8F6\",5,\"\uC8FE\uC8FF\uC901\uC902\uC903\uC907\",4,\"\uC90E\u3000\u3001\u3002\xB7\u2025\u2026\xA8\u3003\xAD\u2015\u2225\uFF3C\u223C\u2018\u2019\u201C\u201D\u3014\u3015\u3008\",9,\"\xB1\xD7\xF7\u2260\u2264\u2265\u221E\u2234\xB0\u2032\u2033\u2103\u212B\uFFE0\uFFE1\uFFE5\u2642\u2640\u2220\u22A5\u2312\u2202\u2207\u2261\u2252\xA7\u203B\u2606\u2605\u25CB\u25CF\u25CE\u25C7\u25C6\u25A1\u25A0\u25B3\u25B2\u25BD\u25BC\u2192\u2190\u2191\u2193\u2194\u3013\u226A\u226B\u221A\u223D\u221D\u2235\u222B\u222C\u2208\u220B\u2286\u2287\u2282\u2283\u222A\u2229\u2227\u2228\uFFE2\"],[\"a241\",\"\uC910\uC912\",5,\"\uC919\",18],[\"a261\",\"\uC92D\",6,\"\uC935\",18],[\"a281\",\"\uC948\",7,\"\uC952\uC953\uC955\uC956\uC957\uC959\",6,\"\uC962\uC964\",7,\"\uC96D\uC96E\uC96F\u21D2\u21D4\u2200\u2203\xB4\uFF5E\u02C7\u02D8\u02DD\u02DA\u02D9\xB8\u02DB\xA1\xBF\u02D0\u222E\u2211\u220F\xA4\u2109\u2030\u25C1\u25C0\u25B7\u25B6\u2664\u2660\u2661\u2665\u2667\u2663\u2299\u25C8\u25A3\u25D0\u25D1\u2592\u25A4\u25A5\u25A8\u25A7\u25A6\u25A9\u2668\u260F\u260E\u261C\u261E\xB6\u2020\u2021\u2195\u2197\u2199\u2196\u2198\u266D\u2669\u266A\u266C\u327F\u321C\u2116\u33C7\u2122\u33C2\u33D8\u2121\u20AC\xAE\"],[\"a341\",\"\uC971\uC972\uC973\uC975\",6,\"\uC97D\",10,\"\uC98A\uC98B\uC98D\uC98E\uC98F\"],[\"a361\",\"\uC991\",6,\"\uC99A\uC99C\uC99E\",16],[\"a381\",\"\uC9AF\",16,\"\uC9C2\uC9C3\uC9C5\uC9C6\uC9C9\uC9CB\",4,\"\uC9D2\uC9D4\uC9D7\uC9D8\uC9DB\uFF01\",58,\"\uFFE6\uFF3D\",32,\"\uFFE3\"],[\"a441\",\"\uC9DE\uC9DF\uC9E1\uC9E3\uC9E5\uC9E6\uC9E8\uC9E9\uC9EA\uC9EB\uC9EE\uC9F2\",5,\"\uC9FA\uC9FB\uC9FD\uC9FE\uC9FF\uCA01\uCA02\uCA03\uCA04\"],[\"a461\",\"\uCA05\uCA06\uCA07\uCA0A\uCA0E\",5,\"\uCA15\uCA16\uCA17\uCA19\",12],[\"a481\",\"\uCA26\uCA27\uCA28\uCA2A\",28,\"\u3131\",93],[\"a541\",\"\uCA47\",4,\"\uCA4E\uCA4F\uCA51\uCA52\uCA53\uCA55\",6,\"\uCA5E\uCA62\",5,\"\uCA69\uCA6A\"],[\"a561\",\"\uCA6B\",17,\"\uCA7E\",5,\"\uCA85\uCA86\"],[\"a581\",\"\uCA87\",16,\"\uCA99\",14,\"\u2170\",9],[\"a5b0\",\"\u2160\",9],[\"a5c1\",\"\u0391\",16,\"\u03A3\",6],[\"a5e1\",\"\u03B1\",16,\"\u03C3\",6],[\"a641\",\"\uCAA8\",19,\"\uCABE\uCABF\uCAC1\uCAC2\uCAC3\uCAC5\"],[\"a661\",\"\uCAC6\",5,\"\uCACE\uCAD0\uCAD2\uCAD4\uCAD5\uCAD6\uCAD7\uCADA\",5,\"\uCAE1\",6],[\"a681\",\"\uCAE8\uCAE9\uCAEA\uCAEB\uCAED\",6,\"\uCAF5\",18,\"\uCB09\uCB0A\u2500\u2502\u250C\u2510\u2518\u2514\u251C\u252C\u2524\u2534\u253C\u2501\u2503\u250F\u2513\u251B\u2517\u2523\u2533\u252B\u253B\u254B\u2520\u252F\u2528\u2537\u253F\u251D\u2530\u2525\u2538\u2542\u2512\u2511\u251A\u2519\u2516\u2515\u250E\u250D\u251E\u251F\u2521\u2522\u2526\u2527\u2529\u252A\u252D\u252E\u2531\u2532\u2535\u2536\u2539\u253A\u253D\u253E\u2540\u2541\u2543\",7],[\"a741\",\"\uCB0B\",4,\"\uCB11\uCB12\uCB13\uCB15\uCB16\uCB17\uCB19\",6,\"\uCB22\",7],[\"a761\",\"\uCB2A\",22,\"\uCB42\uCB43\uCB44\"],[\"a781\",\"\uCB45\uCB46\uCB47\uCB4A\uCB4B\uCB4D\uCB4E\uCB4F\uCB51\",6,\"\uCB5A\uCB5B\uCB5C\uCB5E\",5,\"\uCB65\",7,\"\u3395\u3396\u3397\u2113\u3398\u33C4\u33A3\u33A4\u33A5\u33A6\u3399\",9,\"\u33CA\u338D\u338E\u338F\u33CF\u3388\u3389\u33C8\u33A7\u33A8\u33B0\",9,\"\u3380\",4,\"\u33BA\",5,\"\u3390\",4,\"\u2126\u33C0\u33C1\u338A\u338B\u338C\u33D6\u33C5\u33AD\u33AE\u33AF\u33DB\u33A9\u33AA\u33AB\u33AC\u33DD\u33D0\u33D3\u33C3\u33C9\u33DC\u33C6\"],[\"a841\",\"\uCB6D\",10,\"\uCB7A\",14],[\"a861\",\"\uCB89\",18,\"\uCB9D\",6],[\"a881\",\"\uCBA4\",19,\"\uCBB9\",11,\"\xC6\xD0\xAA\u0126\"],[\"a8a6\",\"\u0132\"],[\"a8a8\",\"\u013F\u0141\xD8\u0152\xBA\xDE\u0166\u014A\"],[\"a8b1\",\"\u3260\",27,\"\u24D0\",25,\"\u2460\",14,\"\xBD\u2153\u2154\xBC\xBE\u215B\u215C\u215D\u215E\"],[\"a941\",\"\uCBC5\",14,\"\uCBD5\",10],[\"a961\",\"\uCBE0\uCBE1\uCBE2\uCBE3\uCBE5\uCBE6\uCBE8\uCBEA\",18],[\"a981\",\"\uCBFD\",14,\"\uCC0E\uCC0F\uCC11\uCC12\uCC13\uCC15\",6,\"\uCC1E\uCC1F\uCC20\uCC23\uCC24\xE6\u0111\xF0\u0127\u0131\u0133\u0138\u0140\u0142\xF8\u0153\xDF\xFE\u0167\u014B\u0149\u3200\",27,\"\u249C\",25,\"\u2474\",14,\"\xB9\xB2\xB3\u2074\u207F\u2081\u2082\u2083\u2084\"],[\"aa41\",\"\uCC25\uCC26\uCC2A\uCC2B\uCC2D\uCC2F\uCC31\",6,\"\uCC3A\uCC3F\",4,\"\uCC46\uCC47\uCC49\uCC4A\uCC4B\uCC4D\uCC4E\"],[\"aa61\",\"\uCC4F\",4,\"\uCC56\uCC5A\",5,\"\uCC61\uCC62\uCC63\uCC65\uCC67\uCC69\",6,\"\uCC71\uCC72\"],[\"aa81\",\"\uCC73\uCC74\uCC76\",29,\"\u3041\",82],[\"ab41\",\"\uCC94\uCC95\uCC96\uCC97\uCC9A\uCC9B\uCC9D\uCC9E\uCC9F\uCCA1\",6,\"\uCCAA\uCCAE\",5,\"\uCCB6\uCCB7\uCCB9\"],[\"ab61\",\"\uCCBA\uCCBB\uCCBD\",6,\"\uCCC6\uCCC8\uCCCA\",5,\"\uCCD1\uCCD2\uCCD3\uCCD5\",5],[\"ab81\",\"\uCCDB\",8,\"\uCCE5\",6,\"\uCCED\uCCEE\uCCEF\uCCF1\",12,\"\u30A1\",85],[\"ac41\",\"\uCCFE\uCCFF\uCD00\uCD02\",5,\"\uCD0A\uCD0B\uCD0D\uCD0E\uCD0F\uCD11\",6,\"\uCD1A\uCD1C\uCD1E\uCD1F\uCD20\"],[\"ac61\",\"\uCD21\uCD22\uCD23\uCD25\uCD26\uCD27\uCD29\uCD2A\uCD2B\uCD2D\",11,\"\uCD3A\",4],[\"ac81\",\"\uCD3F\",28,\"\uCD5D\uCD5E\uCD5F\u0410\",5,\"\u0401\u0416\",25],[\"acd1\",\"\u0430\",5,\"\u0451\u0436\",25],[\"ad41\",\"\uCD61\uCD62\uCD63\uCD65\",6,\"\uCD6E\uCD70\uCD72\",5,\"\uCD79\",7],[\"ad61\",\"\uCD81\",6,\"\uCD89\",10,\"\uCD96\uCD97\uCD99\uCD9A\uCD9B\uCD9D\uCD9E\uCD9F\"],[\"ad81\",\"\uCDA0\uCDA1\uCDA2\uCDA3\uCDA6\uCDA8\uCDAA\",5,\"\uCDB1\",18,\"\uCDC5\"],[\"ae41\",\"\uCDC6\",5,\"\uCDCD\uCDCE\uCDCF\uCDD1\",16],[\"ae61\",\"\uCDE2\",5,\"\uCDE9\uCDEA\uCDEB\uCDED\uCDEE\uCDEF\uCDF1\",6,\"\uCDFA\uCDFC\uCDFE\",4],[\"ae81\",\"\uCE03\uCE05\uCE06\uCE07\uCE09\uCE0A\uCE0B\uCE0D\",6,\"\uCE15\uCE16\uCE17\uCE18\uCE1A\",5,\"\uCE22\uCE23\uCE25\uCE26\uCE27\uCE29\uCE2A\uCE2B\"],[\"af41\",\"\uCE2C\uCE2D\uCE2E\uCE2F\uCE32\uCE34\uCE36\",19],[\"af61\",\"\uCE4A\",13,\"\uCE5A\uCE5B\uCE5D\uCE5E\uCE62\",5,\"\uCE6A\uCE6C\"],[\"af81\",\"\uCE6E\",5,\"\uCE76\uCE77\uCE79\uCE7A\uCE7B\uCE7D\",6,\"\uCE86\uCE88\uCE8A\",5,\"\uCE92\uCE93\uCE95\uCE96\uCE97\uCE99\"],[\"b041\",\"\uCE9A\",5,\"\uCEA2\uCEA6\",5,\"\uCEAE\",12],[\"b061\",\"\uCEBB\",5,\"\uCEC2\",19],[\"b081\",\"\uCED6\",13,\"\uCEE6\uCEE7\uCEE9\uCEEA\uCEED\",6,\"\uCEF6\uCEFA\",5,\"\uAC00\uAC01\uAC04\uAC07\uAC08\uAC09\uAC0A\uAC10\",7,\"\uAC19\",4,\"\uAC20\uAC24\uAC2C\uAC2D\uAC2F\uAC30\uAC31\uAC38\uAC39\uAC3C\uAC40\uAC4B\uAC4D\uAC54\uAC58\uAC5C\uAC70\uAC71\uAC74\uAC77\uAC78\uAC7A\uAC80\uAC81\uAC83\uAC84\uAC85\uAC86\uAC89\uAC8A\uAC8B\uAC8C\uAC90\uAC94\uAC9C\uAC9D\uAC9F\uACA0\uACA1\uACA8\uACA9\uACAA\uACAC\uACAF\uACB0\uACB8\uACB9\uACBB\uACBC\uACBD\uACC1\uACC4\uACC8\uACCC\uACD5\uACD7\uACE0\uACE1\uACE4\uACE7\uACE8\uACEA\uACEC\uACEF\uACF0\uACF1\uACF3\uACF5\uACF6\uACFC\uACFD\uAD00\uAD04\uAD06\"],[\"b141\",\"\uCF02\uCF03\uCF05\uCF06\uCF07\uCF09\",6,\"\uCF12\uCF14\uCF16\",5,\"\uCF1D\uCF1E\uCF1F\uCF21\uCF22\uCF23\"],[\"b161\",\"\uCF25\",6,\"\uCF2E\uCF32\",5,\"\uCF39\",11],[\"b181\",\"\uCF45\",14,\"\uCF56\uCF57\uCF59\uCF5A\uCF5B\uCF5D\",6,\"\uCF66\uCF68\uCF6A\uCF6B\uCF6C\uAD0C\uAD0D\uAD0F\uAD11\uAD18\uAD1C\uAD20\uAD29\uAD2C\uAD2D\uAD34\uAD35\uAD38\uAD3C\uAD44\uAD45\uAD47\uAD49\uAD50\uAD54\uAD58\uAD61\uAD63\uAD6C\uAD6D\uAD70\uAD73\uAD74\uAD75\uAD76\uAD7B\uAD7C\uAD7D\uAD7F\uAD81\uAD82\uAD88\uAD89\uAD8C\uAD90\uAD9C\uAD9D\uADA4\uADB7\uADC0\uADC1\uADC4\uADC8\uADD0\uADD1\uADD3\uADDC\uADE0\uADE4\uADF8\uADF9\uADFC\uADFF\uAE00\uAE01\uAE08\uAE09\uAE0B\uAE0D\uAE14\uAE30\uAE31\uAE34\uAE37\uAE38\uAE3A\uAE40\uAE41\uAE43\uAE45\uAE46\uAE4A\uAE4C\uAE4D\uAE4E\uAE50\uAE54\uAE56\uAE5C\uAE5D\uAE5F\uAE60\uAE61\uAE65\uAE68\uAE69\uAE6C\uAE70\uAE78\"],[\"b241\",\"\uCF6D\uCF6E\uCF6F\uCF72\uCF73\uCF75\uCF76\uCF77\uCF79\",6,\"\uCF81\uCF82\uCF83\uCF84\uCF86\",5,\"\uCF8D\"],[\"b261\",\"\uCF8E\",18,\"\uCFA2\",5,\"\uCFA9\"],[\"b281\",\"\uCFAA\",5,\"\uCFB1\",18,\"\uCFC5\",6,\"\uAE79\uAE7B\uAE7C\uAE7D\uAE84\uAE85\uAE8C\uAEBC\uAEBD\uAEBE\uAEC0\uAEC4\uAECC\uAECD\uAECF\uAED0\uAED1\uAED8\uAED9\uAEDC\uAEE8\uAEEB\uAEED\uAEF4\uAEF8\uAEFC\uAF07\uAF08\uAF0D\uAF10\uAF2C\uAF2D\uAF30\uAF32\uAF34\uAF3C\uAF3D\uAF3F\uAF41\uAF42\uAF43\uAF48\uAF49\uAF50\uAF5C\uAF5D\uAF64\uAF65\uAF79\uAF80\uAF84\uAF88\uAF90\uAF91\uAF95\uAF9C\uAFB8\uAFB9\uAFBC\uAFC0\uAFC7\uAFC8\uAFC9\uAFCB\uAFCD\uAFCE\uAFD4\uAFDC\uAFE8\uAFE9\uAFF0\uAFF1\uAFF4\uAFF8\uB000\uB001\uB004\uB00C\uB010\uB014\uB01C\uB01D\uB028\uB044\uB045\uB048\uB04A\uB04C\uB04E\uB053\uB054\uB055\uB057\uB059\"],[\"b341\",\"\uCFCC\",19,\"\uCFE2\uCFE3\uCFE5\uCFE6\uCFE7\uCFE9\"],[\"b361\",\"\uCFEA\",5,\"\uCFF2\uCFF4\uCFF6\",5,\"\uCFFD\uCFFE\uCFFF\uD001\uD002\uD003\uD005\",5],[\"b381\",\"\uD00B\",5,\"\uD012\",5,\"\uD019\",19,\"\uB05D\uB07C\uB07D\uB080\uB084\uB08C\uB08D\uB08F\uB091\uB098\uB099\uB09A\uB09C\uB09F\uB0A0\uB0A1\uB0A2\uB0A8\uB0A9\uB0AB\",4,\"\uB0B1\uB0B3\uB0B4\uB0B5\uB0B8\uB0BC\uB0C4\uB0C5\uB0C7\uB0C8\uB0C9\uB0D0\uB0D1\uB0D4\uB0D8\uB0E0\uB0E5\uB108\uB109\uB10B\uB10C\uB110\uB112\uB113\uB118\uB119\uB11B\uB11C\uB11D\uB123\uB124\uB125\uB128\uB12C\uB134\uB135\uB137\uB138\uB139\uB140\uB141\uB144\uB148\uB150\uB151\uB154\uB155\uB158\uB15C\uB160\uB178\uB179\uB17C\uB180\uB182\uB188\uB189\uB18B\uB18D\uB192\uB193\uB194\uB198\uB19C\uB1A8\uB1CC\uB1D0\uB1D4\uB1DC\uB1DD\"],[\"b441\",\"\uD02E\",5,\"\uD036\uD037\uD039\uD03A\uD03B\uD03D\",6,\"\uD046\uD048\uD04A\",5],[\"b461\",\"\uD051\uD052\uD053\uD055\uD056\uD057\uD059\",6,\"\uD061\",10,\"\uD06E\uD06F\"],[\"b481\",\"\uD071\uD072\uD073\uD075\",6,\"\uD07E\uD07F\uD080\uD082\",18,\"\uB1DF\uB1E8\uB1E9\uB1EC\uB1F0\uB1F9\uB1FB\uB1FD\uB204\uB205\uB208\uB20B\uB20C\uB214\uB215\uB217\uB219\uB220\uB234\uB23C\uB258\uB25C\uB260\uB268\uB269\uB274\uB275\uB27C\uB284\uB285\uB289\uB290\uB291\uB294\uB298\uB299\uB29A\uB2A0\uB2A1\uB2A3\uB2A5\uB2A6\uB2AA\uB2AC\uB2B0\uB2B4\uB2C8\uB2C9\uB2CC\uB2D0\uB2D2\uB2D8\uB2D9\uB2DB\uB2DD\uB2E2\uB2E4\uB2E5\uB2E6\uB2E8\uB2EB\",4,\"\uB2F3\uB2F4\uB2F5\uB2F7\",4,\"\uB2FF\uB300\uB301\uB304\uB308\uB310\uB311\uB313\uB314\uB315\uB31C\uB354\uB355\uB356\uB358\uB35B\uB35C\uB35E\uB35F\uB364\uB365\"],[\"b541\",\"\uD095\",14,\"\uD0A6\uD0A7\uD0A9\uD0AA\uD0AB\uD0AD\",5],[\"b561\",\"\uD0B3\uD0B6\uD0B8\uD0BA\",5,\"\uD0C2\uD0C3\uD0C5\uD0C6\uD0C7\uD0CA\",5,\"\uD0D2\uD0D6\",4],[\"b581\",\"\uD0DB\uD0DE\uD0DF\uD0E1\uD0E2\uD0E3\uD0E5\",6,\"\uD0EE\uD0F2\",5,\"\uD0F9\",11,\"\uB367\uB369\uB36B\uB36E\uB370\uB371\uB374\uB378\uB380\uB381\uB383\uB384\uB385\uB38C\uB390\uB394\uB3A0\uB3A1\uB3A8\uB3AC\uB3C4\uB3C5\uB3C8\uB3CB\uB3CC\uB3CE\uB3D0\uB3D4\uB3D5\uB3D7\uB3D9\uB3DB\uB3DD\uB3E0\uB3E4\uB3E8\uB3FC\uB410\uB418\uB41C\uB420\uB428\uB429\uB42B\uB434\uB450\uB451\uB454\uB458\uB460\uB461\uB463\uB465\uB46C\uB480\uB488\uB49D\uB4A4\uB4A8\uB4AC\uB4B5\uB4B7\uB4B9\uB4C0\uB4C4\uB4C8\uB4D0\uB4D5\uB4DC\uB4DD\uB4E0\uB4E3\uB4E4\uB4E6\uB4EC\uB4ED\uB4EF\uB4F1\uB4F8\uB514\uB515\uB518\uB51B\uB51C\uB524\uB525\uB527\uB528\uB529\uB52A\uB530\uB531\uB534\uB538\"],[\"b641\",\"\uD105\",7,\"\uD10E\",17],[\"b661\",\"\uD120\",15,\"\uD132\uD133\uD135\uD136\uD137\uD139\uD13B\uD13C\uD13D\uD13E\"],[\"b681\",\"\uD13F\uD142\uD146\",5,\"\uD14E\uD14F\uD151\uD152\uD153\uD155\",6,\"\uD15E\uD160\uD162\",5,\"\uD169\uD16A\uD16B\uD16D\uB540\uB541\uB543\uB544\uB545\uB54B\uB54C\uB54D\uB550\uB554\uB55C\uB55D\uB55F\uB560\uB561\uB5A0\uB5A1\uB5A4\uB5A8\uB5AA\uB5AB\uB5B0\uB5B1\uB5B3\uB5B4\uB5B5\uB5BB\uB5BC\uB5BD\uB5C0\uB5C4\uB5CC\uB5CD\uB5CF\uB5D0\uB5D1\uB5D8\uB5EC\uB610\uB611\uB614\uB618\uB625\uB62C\uB634\uB648\uB664\uB668\uB69C\uB69D\uB6A0\uB6A4\uB6AB\uB6AC\uB6B1\uB6D4\uB6F0\uB6F4\uB6F8\uB700\uB701\uB705\uB728\uB729\uB72C\uB72F\uB730\uB738\uB739\uB73B\uB744\uB748\uB74C\uB754\uB755\uB760\uB764\uB768\uB770\uB771\uB773\uB775\uB77C\uB77D\uB780\uB784\uB78C\uB78D\uB78F\uB790\uB791\uB792\uB796\uB797\"],[\"b741\",\"\uD16E\",13,\"\uD17D\",6,\"\uD185\uD186\uD187\uD189\uD18A\"],[\"b761\",\"\uD18B\",20,\"\uD1A2\uD1A3\uD1A5\uD1A6\uD1A7\"],[\"b781\",\"\uD1A9\",6,\"\uD1B2\uD1B4\uD1B6\uD1B7\uD1B8\uD1B9\uD1BB\uD1BD\uD1BE\uD1BF\uD1C1\",14,\"\uB798\uB799\uB79C\uB7A0\uB7A8\uB7A9\uB7AB\uB7AC\uB7AD\uB7B4\uB7B5\uB7B8\uB7C7\uB7C9\uB7EC\uB7ED\uB7F0\uB7F4\uB7FC\uB7FD\uB7FF\uB800\uB801\uB807\uB808\uB809\uB80C\uB810\uB818\uB819\uB81B\uB81D\uB824\uB825\uB828\uB82C\uB834\uB835\uB837\uB838\uB839\uB840\uB844\uB851\uB853\uB85C\uB85D\uB860\uB864\uB86C\uB86D\uB86F\uB871\uB878\uB87C\uB88D\uB8A8\uB8B0\uB8B4\uB8B8\uB8C0\uB8C1\uB8C3\uB8C5\uB8CC\uB8D0\uB8D4\uB8DD\uB8DF\uB8E1\uB8E8\uB8E9\uB8EC\uB8F0\uB8F8\uB8F9\uB8FB\uB8FD\uB904\uB918\uB920\uB93C\uB93D\uB940\uB944\uB94C\uB94F\uB951\uB958\uB959\uB95C\uB960\uB968\uB969\"],[\"b841\",\"\uD1D0\",7,\"\uD1D9\",17],[\"b861\",\"\uD1EB\",8,\"\uD1F5\uD1F6\uD1F7\uD1F9\",13],[\"b881\",\"\uD208\uD20A\",5,\"\uD211\",24,\"\uB96B\uB96D\uB974\uB975\uB978\uB97C\uB984\uB985\uB987\uB989\uB98A\uB98D\uB98E\uB9AC\uB9AD\uB9B0\uB9B4\uB9BC\uB9BD\uB9BF\uB9C1\uB9C8\uB9C9\uB9CC\uB9CE\",4,\"\uB9D8\uB9D9\uB9DB\uB9DD\uB9DE\uB9E1\uB9E3\uB9E4\uB9E5\uB9E8\uB9EC\uB9F4\uB9F5\uB9F7\uB9F8\uB9F9\uB9FA\uBA00\uBA01\uBA08\uBA15\uBA38\uBA39\uBA3C\uBA40\uBA42\uBA48\uBA49\uBA4B\uBA4D\uBA4E\uBA53\uBA54\uBA55\uBA58\uBA5C\uBA64\uBA65\uBA67\uBA68\uBA69\uBA70\uBA71\uBA74\uBA78\uBA83\uBA84\uBA85\uBA87\uBA8C\uBAA8\uBAA9\uBAAB\uBAAC\uBAB0\uBAB2\uBAB8\uBAB9\uBABB\uBABD\uBAC4\uBAC8\uBAD8\uBAD9\uBAFC\"],[\"b941\",\"\uD22A\uD22B\uD22E\uD22F\uD231\uD232\uD233\uD235\",6,\"\uD23E\uD240\uD242\",5,\"\uD249\uD24A\uD24B\uD24C\"],[\"b961\",\"\uD24D\",14,\"\uD25D\",6,\"\uD265\uD266\uD267\uD268\"],[\"b981\",\"\uD269\",22,\"\uD282\uD283\uD285\uD286\uD287\uD289\uD28A\uD28B\uD28C\uBB00\uBB04\uBB0D\uBB0F\uBB11\uBB18\uBB1C\uBB20\uBB29\uBB2B\uBB34\uBB35\uBB36\uBB38\uBB3B\uBB3C\uBB3D\uBB3E\uBB44\uBB45\uBB47\uBB49\uBB4D\uBB4F\uBB50\uBB54\uBB58\uBB61\uBB63\uBB6C\uBB88\uBB8C\uBB90\uBBA4\uBBA8\uBBAC\uBBB4\uBBB7\uBBC0\uBBC4\uBBC8\uBBD0\uBBD3\uBBF8\uBBF9\uBBFC\uBBFF\uBC00\uBC02\uBC08\uBC09\uBC0B\uBC0C\uBC0D\uBC0F\uBC11\uBC14\",4,\"\uBC1B\",4,\"\uBC24\uBC25\uBC27\uBC29\uBC2D\uBC30\uBC31\uBC34\uBC38\uBC40\uBC41\uBC43\uBC44\uBC45\uBC49\uBC4C\uBC4D\uBC50\uBC5D\uBC84\uBC85\uBC88\uBC8B\uBC8C\uBC8E\uBC94\uBC95\uBC97\"],[\"ba41\",\"\uD28D\uD28E\uD28F\uD292\uD293\uD294\uD296\",5,\"\uD29D\uD29E\uD29F\uD2A1\uD2A2\uD2A3\uD2A5\",6,\"\uD2AD\"],[\"ba61\",\"\uD2AE\uD2AF\uD2B0\uD2B2\",5,\"\uD2BA\uD2BB\uD2BD\uD2BE\uD2C1\uD2C3\",4,\"\uD2CA\uD2CC\",5],[\"ba81\",\"\uD2D2\uD2D3\uD2D5\uD2D6\uD2D7\uD2D9\uD2DA\uD2DB\uD2DD\",6,\"\uD2E6\",9,\"\uD2F2\uD2F3\uD2F5\uD2F6\uD2F7\uD2F9\uD2FA\uBC99\uBC9A\uBCA0\uBCA1\uBCA4\uBCA7\uBCA8\uBCB0\uBCB1\uBCB3\uBCB4\uBCB5\uBCBC\uBCBD\uBCC0\uBCC4\uBCCD\uBCCF\uBCD0\uBCD1\uBCD5\uBCD8\uBCDC\uBCF4\uBCF5\uBCF6\uBCF8\uBCFC\uBD04\uBD05\uBD07\uBD09\uBD10\uBD14\uBD24\uBD2C\uBD40\uBD48\uBD49\uBD4C\uBD50\uBD58\uBD59\uBD64\uBD68\uBD80\uBD81\uBD84\uBD87\uBD88\uBD89\uBD8A\uBD90\uBD91\uBD93\uBD95\uBD99\uBD9A\uBD9C\uBDA4\uBDB0\uBDB8\uBDD4\uBDD5\uBDD8\uBDDC\uBDE9\uBDF0\uBDF4\uBDF8\uBE00\uBE03\uBE05\uBE0C\uBE0D\uBE10\uBE14\uBE1C\uBE1D\uBE1F\uBE44\uBE45\uBE48\uBE4C\uBE4E\uBE54\uBE55\uBE57\uBE59\uBE5A\uBE5B\uBE60\uBE61\uBE64\"],[\"bb41\",\"\uD2FB\",4,\"\uD302\uD304\uD306\",5,\"\uD30F\uD311\uD312\uD313\uD315\uD317\",4,\"\uD31E\uD322\uD323\"],[\"bb61\",\"\uD324\uD326\uD327\uD32A\uD32B\uD32D\uD32E\uD32F\uD331\",6,\"\uD33A\uD33E\",5,\"\uD346\uD347\uD348\uD349\"],[\"bb81\",\"\uD34A\",31,\"\uBE68\uBE6A\uBE70\uBE71\uBE73\uBE74\uBE75\uBE7B\uBE7C\uBE7D\uBE80\uBE84\uBE8C\uBE8D\uBE8F\uBE90\uBE91\uBE98\uBE99\uBEA8\uBED0\uBED1\uBED4\uBED7\uBED8\uBEE0\uBEE3\uBEE4\uBEE5\uBEEC\uBF01\uBF08\uBF09\uBF18\uBF19\uBF1B\uBF1C\uBF1D\uBF40\uBF41\uBF44\uBF48\uBF50\uBF51\uBF55\uBF94\uBFB0\uBFC5\uBFCC\uBFCD\uBFD0\uBFD4\uBFDC\uBFDF\uBFE1\uC03C\uC051\uC058\uC05C\uC060\uC068\uC069\uC090\uC091\uC094\uC098\uC0A0\uC0A1\uC0A3\uC0A5\uC0AC\uC0AD\uC0AF\uC0B0\uC0B3\uC0B4\uC0B5\uC0B6\uC0BC\uC0BD\uC0BF\uC0C0\uC0C1\uC0C5\uC0C8\uC0C9\uC0CC\uC0D0\uC0D8\uC0D9\uC0DB\uC0DC\uC0DD\uC0E4\"],[\"bc41\",\"\uD36A\",17,\"\uD37E\uD37F\uD381\uD382\uD383\uD385\uD386\uD387\"],[\"bc61\",\"\uD388\uD389\uD38A\uD38B\uD38E\uD392\",5,\"\uD39A\uD39B\uD39D\uD39E\uD39F\uD3A1\",6,\"\uD3AA\uD3AC\uD3AE\"],[\"bc81\",\"\uD3AF\",4,\"\uD3B5\uD3B6\uD3B7\uD3B9\uD3BA\uD3BB\uD3BD\",6,\"\uD3C6\uD3C7\uD3CA\",5,\"\uD3D1\",5,\"\uC0E5\uC0E8\uC0EC\uC0F4\uC0F5\uC0F7\uC0F9\uC100\uC104\uC108\uC110\uC115\uC11C\",4,\"\uC123\uC124\uC126\uC127\uC12C\uC12D\uC12F\uC130\uC131\uC136\uC138\uC139\uC13C\uC140\uC148\uC149\uC14B\uC14C\uC14D\uC154\uC155\uC158\uC15C\uC164\uC165\uC167\uC168\uC169\uC170\uC174\uC178\uC185\uC18C\uC18D\uC18E\uC190\uC194\uC196\uC19C\uC19D\uC19F\uC1A1\uC1A5\uC1A8\uC1A9\uC1AC\uC1B0\uC1BD\uC1C4\uC1C8\uC1CC\uC1D4\uC1D7\uC1D8\uC1E0\uC1E4\uC1E8\uC1F0\uC1F1\uC1F3\uC1FC\uC1FD\uC200\uC204\uC20C\uC20D\uC20F\uC211\uC218\uC219\uC21C\uC21F\uC220\uC228\uC229\uC22B\uC22D\"],[\"bd41\",\"\uD3D7\uD3D9\",7,\"\uD3E2\uD3E4\",7,\"\uD3EE\uD3EF\uD3F1\uD3F2\uD3F3\uD3F5\uD3F6\uD3F7\"],[\"bd61\",\"\uD3F8\uD3F9\uD3FA\uD3FB\uD3FE\uD400\uD402\",5,\"\uD409\",13],[\"bd81\",\"\uD417\",5,\"\uD41E\",25,\"\uC22F\uC231\uC232\uC234\uC248\uC250\uC251\uC254\uC258\uC260\uC265\uC26C\uC26D\uC270\uC274\uC27C\uC27D\uC27F\uC281\uC288\uC289\uC290\uC298\uC29B\uC29D\uC2A4\uC2A5\uC2A8\uC2AC\uC2AD\uC2B4\uC2B5\uC2B7\uC2B9\uC2DC\uC2DD\uC2E0\uC2E3\uC2E4\uC2EB\uC2EC\uC2ED\uC2EF\uC2F1\uC2F6\uC2F8\uC2F9\uC2FB\uC2FC\uC300\uC308\uC309\uC30C\uC30D\uC313\uC314\uC315\uC318\uC31C\uC324\uC325\uC328\uC329\uC345\uC368\uC369\uC36C\uC370\uC372\uC378\uC379\uC37C\uC37D\uC384\uC388\uC38C\uC3C0\uC3D8\uC3D9\uC3DC\uC3DF\uC3E0\uC3E2\uC3E8\uC3E9\uC3ED\uC3F4\uC3F5\uC3F8\uC408\uC410\uC424\uC42C\uC430\"],[\"be41\",\"\uD438\",7,\"\uD441\uD442\uD443\uD445\",14],[\"be61\",\"\uD454\",7,\"\uD45D\uD45E\uD45F\uD461\uD462\uD463\uD465\",7,\"\uD46E\uD470\uD471\uD472\"],[\"be81\",\"\uD473\",4,\"\uD47A\uD47B\uD47D\uD47E\uD481\uD483\",4,\"\uD48A\uD48C\uD48E\",5,\"\uD495\",8,\"\uC434\uC43C\uC43D\uC448\uC464\uC465\uC468\uC46C\uC474\uC475\uC479\uC480\uC494\uC49C\uC4B8\uC4BC\uC4E9\uC4F0\uC4F1\uC4F4\uC4F8\uC4FA\uC4FF\uC500\uC501\uC50C\uC510\uC514\uC51C\uC528\uC529\uC52C\uC530\uC538\uC539\uC53B\uC53D\uC544\uC545\uC548\uC549\uC54A\uC54C\uC54D\uC54E\uC553\uC554\uC555\uC557\uC558\uC559\uC55D\uC55E\uC560\uC561\uC564\uC568\uC570\uC571\uC573\uC574\uC575\uC57C\uC57D\uC580\uC584\uC587\uC58C\uC58D\uC58F\uC591\uC595\uC597\uC598\uC59C\uC5A0\uC5A9\uC5B4\uC5B5\uC5B8\uC5B9\uC5BB\uC5BC\uC5BD\uC5BE\uC5C4\",6,\"\uC5CC\uC5CE\"],[\"bf41\",\"\uD49E\",10,\"\uD4AA\",14],[\"bf61\",\"\uD4B9\",18,\"\uD4CD\uD4CE\uD4CF\uD4D1\uD4D2\uD4D3\uD4D5\"],[\"bf81\",\"\uD4D6\",5,\"\uD4DD\uD4DE\uD4E0\",7,\"\uD4E9\uD4EA\uD4EB\uD4ED\uD4EE\uD4EF\uD4F1\",6,\"\uD4F9\uD4FA\uD4FC\uC5D0\uC5D1\uC5D4\uC5D8\uC5E0\uC5E1\uC5E3\uC5E5\uC5EC\uC5ED\uC5EE\uC5F0\uC5F4\uC5F6\uC5F7\uC5FC\",5,\"\uC605\uC606\uC607\uC608\uC60C\uC610\uC618\uC619\uC61B\uC61C\uC624\uC625\uC628\uC62C\uC62D\uC62E\uC630\uC633\uC634\uC635\uC637\uC639\uC63B\uC640\uC641\uC644\uC648\uC650\uC651\uC653\uC654\uC655\uC65C\uC65D\uC660\uC66C\uC66F\uC671\uC678\uC679\uC67C\uC680\uC688\uC689\uC68B\uC68D\uC694\uC695\uC698\uC69C\uC6A4\uC6A5\uC6A7\uC6A9\uC6B0\uC6B1\uC6B4\uC6B8\uC6B9\uC6BA\uC6C0\uC6C1\uC6C3\uC6C5\uC6CC\uC6CD\uC6D0\uC6D4\uC6DC\uC6DD\uC6E0\uC6E1\uC6E8\"],[\"c041\",\"\uD4FE\",5,\"\uD505\uD506\uD507\uD509\uD50A\uD50B\uD50D\",6,\"\uD516\uD518\",5],[\"c061\",\"\uD51E\",25],[\"c081\",\"\uD538\uD539\uD53A\uD53B\uD53E\uD53F\uD541\uD542\uD543\uD545\",6,\"\uD54E\uD550\uD552\",5,\"\uD55A\uD55B\uD55D\uD55E\uD55F\uD561\uD562\uD563\uC6E9\uC6EC\uC6F0\uC6F8\uC6F9\uC6FD\uC704\uC705\uC708\uC70C\uC714\uC715\uC717\uC719\uC720\uC721\uC724\uC728\uC730\uC731\uC733\uC735\uC737\uC73C\uC73D\uC740\uC744\uC74A\uC74C\uC74D\uC74F\uC751\",7,\"\uC75C\uC760\uC768\uC76B\uC774\uC775\uC778\uC77C\uC77D\uC77E\uC783\uC784\uC785\uC787\uC788\uC789\uC78A\uC78E\uC790\uC791\uC794\uC796\uC797\uC798\uC79A\uC7A0\uC7A1\uC7A3\uC7A4\uC7A5\uC7A6\uC7AC\uC7AD\uC7B0\uC7B4\uC7BC\uC7BD\uC7BF\uC7C0\uC7C1\uC7C8\uC7C9\uC7CC\uC7CE\uC7D0\uC7D8\uC7DD\uC7E4\uC7E8\uC7EC\uC800\uC801\uC804\uC808\uC80A\"],[\"c141\",\"\uD564\uD566\uD567\uD56A\uD56C\uD56E\",5,\"\uD576\uD577\uD579\uD57A\uD57B\uD57D\",6,\"\uD586\uD58A\uD58B\"],[\"c161\",\"\uD58C\uD58D\uD58E\uD58F\uD591\",19,\"\uD5A6\uD5A7\"],[\"c181\",\"\uD5A8\",31,\"\uC810\uC811\uC813\uC815\uC816\uC81C\uC81D\uC820\uC824\uC82C\uC82D\uC82F\uC831\uC838\uC83C\uC840\uC848\uC849\uC84C\uC84D\uC854\uC870\uC871\uC874\uC878\uC87A\uC880\uC881\uC883\uC885\uC886\uC887\uC88B\uC88C\uC88D\uC894\uC89D\uC89F\uC8A1\uC8A8\uC8BC\uC8BD\uC8C4\uC8C8\uC8CC\uC8D4\uC8D5\uC8D7\uC8D9\uC8E0\uC8E1\uC8E4\uC8F5\uC8FC\uC8FD\uC900\uC904\uC905\uC906\uC90C\uC90D\uC90F\uC911\uC918\uC92C\uC934\uC950\uC951\uC954\uC958\uC960\uC961\uC963\uC96C\uC970\uC974\uC97C\uC988\uC989\uC98C\uC990\uC998\uC999\uC99B\uC99D\uC9C0\uC9C1\uC9C4\uC9C7\uC9C8\uC9CA\uC9D0\uC9D1\uC9D3\"],[\"c241\",\"\uD5CA\uD5CB\uD5CD\uD5CE\uD5CF\uD5D1\uD5D3\",4,\"\uD5DA\uD5DC\uD5DE\",5,\"\uD5E6\uD5E7\uD5E9\uD5EA\uD5EB\uD5ED\uD5EE\"],[\"c261\",\"\uD5EF\",4,\"\uD5F6\uD5F8\uD5FA\",5,\"\uD602\uD603\uD605\uD606\uD607\uD609\",6,\"\uD612\"],[\"c281\",\"\uD616\",5,\"\uD61D\uD61E\uD61F\uD621\uD622\uD623\uD625\",7,\"\uD62E\",9,\"\uD63A\uD63B\uC9D5\uC9D6\uC9D9\uC9DA\uC9DC\uC9DD\uC9E0\uC9E2\uC9E4\uC9E7\uC9EC\uC9ED\uC9EF\uC9F0\uC9F1\uC9F8\uC9F9\uC9FC\uCA00\uCA08\uCA09\uCA0B\uCA0C\uCA0D\uCA14\uCA18\uCA29\uCA4C\uCA4D\uCA50\uCA54\uCA5C\uCA5D\uCA5F\uCA60\uCA61\uCA68\uCA7D\uCA84\uCA98\uCABC\uCABD\uCAC0\uCAC4\uCACC\uCACD\uCACF\uCAD1\uCAD3\uCAD8\uCAD9\uCAE0\uCAEC\uCAF4\uCB08\uCB10\uCB14\uCB18\uCB20\uCB21\uCB41\uCB48\uCB49\uCB4C\uCB50\uCB58\uCB59\uCB5D\uCB64\uCB78\uCB79\uCB9C\uCBB8\uCBD4\uCBE4\uCBE7\uCBE9\uCC0C\uCC0D\uCC10\uCC14\uCC1C\uCC1D\uCC21\uCC22\uCC27\uCC28\uCC29\uCC2C\uCC2E\uCC30\uCC38\uCC39\uCC3B\"],[\"c341\",\"\uD63D\uD63E\uD63F\uD641\uD642\uD643\uD644\uD646\uD647\uD64A\uD64C\uD64E\uD64F\uD650\uD652\uD653\uD656\uD657\uD659\uD65A\uD65B\uD65D\",4],[\"c361\",\"\uD662\",4,\"\uD668\uD66A\",5,\"\uD672\uD673\uD675\",11],[\"c381\",\"\uD681\uD682\uD684\uD686\",5,\"\uD68E\uD68F\uD691\uD692\uD693\uD695\",7,\"\uD69E\uD6A0\uD6A2\",5,\"\uD6A9\uD6AA\uCC3C\uCC3D\uCC3E\uCC44\uCC45\uCC48\uCC4C\uCC54\uCC55\uCC57\uCC58\uCC59\uCC60\uCC64\uCC66\uCC68\uCC70\uCC75\uCC98\uCC99\uCC9C\uCCA0\uCCA8\uCCA9\uCCAB\uCCAC\uCCAD\uCCB4\uCCB5\uCCB8\uCCBC\uCCC4\uCCC5\uCCC7\uCCC9\uCCD0\uCCD4\uCCE4\uCCEC\uCCF0\uCD01\uCD08\uCD09\uCD0C\uCD10\uCD18\uCD19\uCD1B\uCD1D\uCD24\uCD28\uCD2C\uCD39\uCD5C\uCD60\uCD64\uCD6C\uCD6D\uCD6F\uCD71\uCD78\uCD88\uCD94\uCD95\uCD98\uCD9C\uCDA4\uCDA5\uCDA7\uCDA9\uCDB0\uCDC4\uCDCC\uCDD0\uCDE8\uCDEC\uCDF0\uCDF8\uCDF9\uCDFB\uCDFD\uCE04\uCE08\uCE0C\uCE14\uCE19\uCE20\uCE21\uCE24\uCE28\uCE30\uCE31\uCE33\uCE35\"],[\"c441\",\"\uD6AB\uD6AD\uD6AE\uD6AF\uD6B1\",7,\"\uD6BA\uD6BC\",7,\"\uD6C6\uD6C7\uD6C9\uD6CA\uD6CB\"],[\"c461\",\"\uD6CD\uD6CE\uD6CF\uD6D0\uD6D2\uD6D3\uD6D5\uD6D6\uD6D8\uD6DA\",5,\"\uD6E1\uD6E2\uD6E3\uD6E5\uD6E6\uD6E7\uD6E9\",4],[\"c481\",\"\uD6EE\uD6EF\uD6F1\uD6F2\uD6F3\uD6F4\uD6F6\",5,\"\uD6FE\uD6FF\uD701\uD702\uD703\uD705\",11,\"\uD712\uD713\uD714\uCE58\uCE59\uCE5C\uCE5F\uCE60\uCE61\uCE68\uCE69\uCE6B\uCE6D\uCE74\uCE75\uCE78\uCE7C\uCE84\uCE85\uCE87\uCE89\uCE90\uCE91\uCE94\uCE98\uCEA0\uCEA1\uCEA3\uCEA4\uCEA5\uCEAC\uCEAD\uCEC1\uCEE4\uCEE5\uCEE8\uCEEB\uCEEC\uCEF4\uCEF5\uCEF7\uCEF8\uCEF9\uCF00\uCF01\uCF04\uCF08\uCF10\uCF11\uCF13\uCF15\uCF1C\uCF20\uCF24\uCF2C\uCF2D\uCF2F\uCF30\uCF31\uCF38\uCF54\uCF55\uCF58\uCF5C\uCF64\uCF65\uCF67\uCF69\uCF70\uCF71\uCF74\uCF78\uCF80\uCF85\uCF8C\uCFA1\uCFA8\uCFB0\uCFC4\uCFE0\uCFE1\uCFE4\uCFE8\uCFF0\uCFF1\uCFF3\uCFF5\uCFFC\uD000\uD004\uD011\uD018\uD02D\uD034\uD035\uD038\uD03C\"],[\"c541\",\"\uD715\uD716\uD717\uD71A\uD71B\uD71D\uD71E\uD71F\uD721\",6,\"\uD72A\uD72C\uD72E\",5,\"\uD736\uD737\uD739\"],[\"c561\",\"\uD73A\uD73B\uD73D\",6,\"\uD745\uD746\uD748\uD74A\",5,\"\uD752\uD753\uD755\uD75A\",4],[\"c581\",\"\uD75F\uD762\uD764\uD766\uD767\uD768\uD76A\uD76B\uD76D\uD76E\uD76F\uD771\uD772\uD773\uD775\",6,\"\uD77E\uD77F\uD780\uD782\",5,\"\uD78A\uD78B\uD044\uD045\uD047\uD049\uD050\uD054\uD058\uD060\uD06C\uD06D\uD070\uD074\uD07C\uD07D\uD081\uD0A4\uD0A5\uD0A8\uD0AC\uD0B4\uD0B5\uD0B7\uD0B9\uD0C0\uD0C1\uD0C4\uD0C8\uD0C9\uD0D0\uD0D1\uD0D3\uD0D4\uD0D5\uD0DC\uD0DD\uD0E0\uD0E4\uD0EC\uD0ED\uD0EF\uD0F0\uD0F1\uD0F8\uD10D\uD130\uD131\uD134\uD138\uD13A\uD140\uD141\uD143\uD144\uD145\uD14C\uD14D\uD150\uD154\uD15C\uD15D\uD15F\uD161\uD168\uD16C\uD17C\uD184\uD188\uD1A0\uD1A1\uD1A4\uD1A8\uD1B0\uD1B1\uD1B3\uD1B5\uD1BA\uD1BC\uD1C0\uD1D8\uD1F4\uD1F8\uD207\uD209\uD210\uD22C\uD22D\uD230\uD234\uD23C\uD23D\uD23F\uD241\uD248\uD25C\"],[\"c641\",\"\uD78D\uD78E\uD78F\uD791\",6,\"\uD79A\uD79C\uD79E\",5],[\"c6a1\",\"\uD264\uD280\uD281\uD284\uD288\uD290\uD291\uD295\uD29C\uD2A0\uD2A4\uD2AC\uD2B1\uD2B8\uD2B9\uD2BC\uD2BF\uD2C0\uD2C2\uD2C8\uD2C9\uD2CB\uD2D4\uD2D8\uD2DC\uD2E4\uD2E5\uD2F0\uD2F1\uD2F4\uD2F8\uD300\uD301\uD303\uD305\uD30C\uD30D\uD30E\uD310\uD314\uD316\uD31C\uD31D\uD31F\uD320\uD321\uD325\uD328\uD329\uD32C\uD330\uD338\uD339\uD33B\uD33C\uD33D\uD344\uD345\uD37C\uD37D\uD380\uD384\uD38C\uD38D\uD38F\uD390\uD391\uD398\uD399\uD39C\uD3A0\uD3A8\uD3A9\uD3AB\uD3AD\uD3B4\uD3B8\uD3BC\uD3C4\uD3C5\uD3C8\uD3C9\uD3D0\uD3D8\uD3E1\uD3E3\uD3EC\uD3ED\uD3F0\uD3F4\uD3FC\uD3FD\uD3FF\uD401\"],[\"c7a1\",\"\uD408\uD41D\uD440\uD444\uD45C\uD460\uD464\uD46D\uD46F\uD478\uD479\uD47C\uD47F\uD480\uD482\uD488\uD489\uD48B\uD48D\uD494\uD4A9\uD4CC\uD4D0\uD4D4\uD4DC\uD4DF\uD4E8\uD4EC\uD4F0\uD4F8\uD4FB\uD4FD\uD504\uD508\uD50C\uD514\uD515\uD517\uD53C\uD53D\uD540\uD544\uD54C\uD54D\uD54F\uD551\uD558\uD559\uD55C\uD560\uD565\uD568\uD569\uD56B\uD56D\uD574\uD575\uD578\uD57C\uD584\uD585\uD587\uD588\uD589\uD590\uD5A5\uD5C8\uD5C9\uD5CC\uD5D0\uD5D2\uD5D8\uD5D9\uD5DB\uD5DD\uD5E4\uD5E5\uD5E8\uD5EC\uD5F4\uD5F5\uD5F7\uD5F9\uD600\uD601\uD604\uD608\uD610\uD611\uD613\uD614\uD615\uD61C\uD620\"],[\"c8a1\",\"\uD624\uD62D\uD638\uD639\uD63C\uD640\uD645\uD648\uD649\uD64B\uD64D\uD651\uD654\uD655\uD658\uD65C\uD667\uD669\uD670\uD671\uD674\uD683\uD685\uD68C\uD68D\uD690\uD694\uD69D\uD69F\uD6A1\uD6A8\uD6AC\uD6B0\uD6B9\uD6BB\uD6C4\uD6C5\uD6C8\uD6CC\uD6D1\uD6D4\uD6D7\uD6D9\uD6E0\uD6E4\uD6E8\uD6F0\uD6F5\uD6FC\uD6FD\uD700\uD704\uD711\uD718\uD719\uD71C\uD720\uD728\uD729\uD72B\uD72D\uD734\uD735\uD738\uD73C\uD744\uD747\uD749\uD750\uD751\uD754\uD756\uD757\uD758\uD759\uD760\uD761\uD763\uD765\uD769\uD76C\uD770\uD774\uD77C\uD77D\uD781\uD788\uD789\uD78C\uD790\uD798\uD799\uD79B\uD79D\"],[\"caa1\",\"\u4F3D\u4F73\u5047\u50F9\u52A0\u53EF\u5475\u54E5\u5609\u5AC1\u5BB6\u6687\u67B6\u67B7\u67EF\u6B4C\u73C2\u75C2\u7A3C\u82DB\u8304\u8857\u8888\u8A36\u8CC8\u8DCF\u8EFB\u8FE6\u99D5\u523B\u5374\u5404\u606A\u6164\u6BBC\u73CF\u811A\u89BA\u89D2\u95A3\u4F83\u520A\u58BE\u5978\u59E6\u5E72\u5E79\u61C7\u63C0\u6746\u67EC\u687F\u6F97\u764E\u770B\u78F5\u7A08\u7AFF\u7C21\u809D\u826E\u8271\u8AEB\u9593\u4E6B\u559D\u66F7\u6E34\u78A3\u7AED\u845B\u8910\u874E\u97A8\u52D8\u574E\u582A\u5D4C\u611F\u61BE\u6221\u6562\u67D1\u6A44\u6E1B\u7518\u75B3\u76E3\u77B0\u7D3A\u90AF\u9451\u9452\u9F95\"],[\"cba1\",\"\u5323\u5CAC\u7532\u80DB\u9240\u9598\u525B\u5808\u59DC\u5CA1\u5D17\u5EB7\u5F3A\u5F4A\u6177\u6C5F\u757A\u7586\u7CE0\u7D73\u7DB1\u7F8C\u8154\u8221\u8591\u8941\u8B1B\u92FC\u964D\u9C47\u4ECB\u4EF7\u500B\u51F1\u584F\u6137\u613E\u6168\u6539\u69EA\u6F11\u75A5\u7686\u76D6\u7B87\u82A5\u84CB\uF900\u93A7\u958B\u5580\u5BA2\u5751\uF901\u7CB3\u7FB9\u91B5\u5028\u53BB\u5C45\u5DE8\u62D2\u636E\u64DA\u64E7\u6E20\u70AC\u795B\u8DDD\u8E1E\uF902\u907D\u9245\u92F8\u4E7E\u4EF6\u5065\u5DFE\u5EFA\u6106\u6957\u8171\u8654\u8E47\u9375\u9A2B\u4E5E\u5091\u6770\u6840\u5109\u528D\u5292\u6AA2\"],[\"cca1\",\"\u77BC\u9210\u9ED4\u52AB\u602F\u8FF2\u5048\u61A9\u63ED\u64CA\u683C\u6A84\u6FC0\u8188\u89A1\u9694\u5805\u727D\u72AC\u7504\u7D79\u7E6D\u80A9\u898B\u8B74\u9063\u9D51\u6289\u6C7A\u6F54\u7D50\u7F3A\u8A23\u517C\u614A\u7B9D\u8B19\u9257\u938C\u4EAC\u4FD3\u501E\u50BE\u5106\u52C1\u52CD\u537F\u5770\u5883\u5E9A\u5F91\u6176\u61AC\u64CE\u656C\u666F\u66BB\u66F4\u6897\u6D87\u7085\u70F1\u749F\u74A5\u74CA\u75D9\u786C\u78EC\u7ADF\u7AF6\u7D45\u7D93\u8015\u803F\u811B\u8396\u8B66\u8F15\u9015\u93E1\u9803\u9838\u9A5A\u9BE8\u4FC2\u5553\u583A\u5951\u5B63\u5C46\u60B8\u6212\u6842\u68B0\"],[\"cda1\",\"\u68E8\u6EAA\u754C\u7678\u78CE\u7A3D\u7CFB\u7E6B\u7E7C\u8A08\u8AA1\u8C3F\u968E\u9DC4\u53E4\u53E9\u544A\u5471\u56FA\u59D1\u5B64\u5C3B\u5EAB\u62F7\u6537\u6545\u6572\u66A0\u67AF\u69C1\u6CBD\u75FC\u7690\u777E\u7A3F\u7F94\u8003\u80A1\u818F\u82E6\u82FD\u83F0\u85C1\u8831\u88B4\u8AA5\uF903\u8F9C\u932E\u96C7\u9867\u9AD8\u9F13\u54ED\u659B\u66F2\u688F\u7A40\u8C37\u9D60\u56F0\u5764\u5D11\u6606\u68B1\u68CD\u6EFE\u7428\u889E\u9BE4\u6C68\uF904\u9AA8\u4F9B\u516C\u5171\u529F\u5B54\u5DE5\u6050\u606D\u62F1\u63A7\u653B\u73D9\u7A7A\u86A3\u8CA2\u978F\u4E32\u5BE1\u6208\u679C\u74DC\"],[\"cea1\",\"\u79D1\u83D3\u8A87\u8AB2\u8DE8\u904E\u934B\u9846\u5ED3\u69E8\u85FF\u90ED\uF905\u51A0\u5B98\u5BEC\u6163\u68FA\u6B3E\u704C\u742F\u74D8\u7BA1\u7F50\u83C5\u89C0\u8CAB\u95DC\u9928\u522E\u605D\u62EC\u9002\u4F8A\u5149\u5321\u58D9\u5EE3\u66E0\u6D38\u709A\u72C2\u73D6\u7B50\u80F1\u945B\u5366\u639B\u7F6B\u4E56\u5080\u584A\u58DE\u602A\u6127\u62D0\u69D0\u9B41\u5B8F\u7D18\u80B1\u8F5F\u4EA4\u50D1\u54AC\u55AC\u5B0C\u5DA0\u5DE7\u652A\u654E\u6821\u6A4B\u72E1\u768E\u77EF\u7D5E\u7FF9\u81A0\u854E\u86DF\u8F03\u8F4E\u90CA\u9903\u9A55\u9BAB\u4E18\u4E45\u4E5D\u4EC7\u4FF1\u5177\u52FE\"],[\"cfa1\",\"\u5340\u53E3\u53E5\u548E\u5614\u5775\u57A2\u5BC7\u5D87\u5ED0\u61FC\u62D8\u6551\u67B8\u67E9\u69CB\u6B50\u6BC6\u6BEC\u6C42\u6E9D\u7078\u72D7\u7396\u7403\u77BF\u77E9\u7A76\u7D7F\u8009\u81FC\u8205\u820A\u82DF\u8862\u8B33\u8CFC\u8EC0\u9011\u90B1\u9264\u92B6\u99D2\u9A45\u9CE9\u9DD7\u9F9C\u570B\u5C40\u83CA\u97A0\u97AB\u9EB4\u541B\u7A98\u7FA4\u88D9\u8ECD\u90E1\u5800\u5C48\u6398\u7A9F\u5BAE\u5F13\u7A79\u7AAE\u828E\u8EAC\u5026\u5238\u52F8\u5377\u5708\u62F3\u6372\u6B0A\u6DC3\u7737\u53A5\u7357\u8568\u8E76\u95D5\u673A\u6AC3\u6F70\u8A6D\u8ECC\u994B\uF906\u6677\u6B78\u8CB4\"],[\"d0a1\",\"\u9B3C\uF907\u53EB\u572D\u594E\u63C6\u69FB\u73EA\u7845\u7ABA\u7AC5\u7CFE\u8475\u898F\u8D73\u9035\u95A8\u52FB\u5747\u7547\u7B60\u83CC\u921E\uF908\u6A58\u514B\u524B\u5287\u621F\u68D8\u6975\u9699\u50C5\u52A4\u52E4\u61C3\u65A4\u6839\u69FF\u747E\u7B4B\u82B9\u83EB\u89B2\u8B39\u8FD1\u9949\uF909\u4ECA\u5997\u64D2\u6611\u6A8E\u7434\u7981\u79BD\u82A9\u887E\u887F\u895F\uF90A\u9326\u4F0B\u53CA\u6025\u6271\u6C72\u7D1A\u7D66\u4E98\u5162\u77DC\u80AF\u4F01\u4F0E\u5176\u5180\u55DC\u5668\u573B\u57FA\u57FC\u5914\u5947\u5993\u5BC4\u5C90\u5D0E\u5DF1\u5E7E\u5FCC\u6280\u65D7\u65E3\"],[\"d1a1\",\"\u671E\u671F\u675E\u68CB\u68C4\u6A5F\u6B3A\u6C23\u6C7D\u6C82\u6DC7\u7398\u7426\u742A\u7482\u74A3\u7578\u757F\u7881\u78EF\u7941\u7947\u7948\u797A\u7B95\u7D00\u7DBA\u7F88\u8006\u802D\u808C\u8A18\u8B4F\u8C48\u8D77\u9321\u9324\u98E2\u9951\u9A0E\u9A0F\u9A65\u9E92\u7DCA\u4F76\u5409\u62EE\u6854\u91D1\u55AB\u513A\uF90B\uF90C\u5A1C\u61E6\uF90D\u62CF\u62FF\uF90E\",5,\"\u90A3\uF914\",4,\"\u8AFE\uF919\uF91A\uF91B\uF91C\u6696\uF91D\u7156\uF91E\uF91F\u96E3\uF920\u634F\u637A\u5357\uF921\u678F\u6960\u6E73\uF922\u7537\uF923\uF924\uF925\"],[\"d2a1\",\"\u7D0D\uF926\uF927\u8872\u56CA\u5A18\uF928\",4,\"\u4E43\uF92D\u5167\u5948\u67F0\u8010\uF92E\u5973\u5E74\u649A\u79CA\u5FF5\u606C\u62C8\u637B\u5BE7\u5BD7\u52AA\uF92F\u5974\u5F29\u6012\uF930\uF931\uF932\u7459\uF933\",5,\"\u99D1\uF939\",10,\"\u6FC3\uF944\uF945\u81BF\u8FB2\u60F1\uF946\uF947\u8166\uF948\uF949\u5C3F\uF94A\",7,\"\u5AE9\u8A25\u677B\u7D10\uF952\",5,\"\u80FD\uF958\uF959\u5C3C\u6CE5\u533F\u6EBA\u591A\u8336\"],[\"d3a1\",\"\u4E39\u4EB6\u4F46\u55AE\u5718\u58C7\u5F56\u65B7\u65E6\u6A80\u6BB5\u6E4D\u77ED\u7AEF\u7C1E\u7DDE\u86CB\u8892\u9132\u935B\u64BB\u6FBE\u737A\u75B8\u9054\u5556\u574D\u61BA\u64D4\u66C7\u6DE1\u6E5B\u6F6D\u6FB9\u75F0\u8043\u81BD\u8541\u8983\u8AC7\u8B5A\u931F\u6C93\u7553\u7B54\u8E0F\u905D\u5510\u5802\u5858\u5E62\u6207\u649E\u68E0\u7576\u7CD6\u87B3\u9EE8\u4EE3\u5788\u576E\u5927\u5C0D\u5CB1\u5E36\u5F85\u6234\u64E1\u73B3\u81FA\u888B\u8CB8\u968A\u9EDB\u5B85\u5FB7\u60B3\u5012\u5200\u5230\u5716\u5835\u5857\u5C0E\u5C60\u5CF6\u5D8B\u5EA6\u5F92\u60BC\u6311\u6389\u6417\u6843\"],[\"d4a1\",\"\u68F9\u6AC2\u6DD8\u6E21\u6ED4\u6FE4\u71FE\u76DC\u7779\u79B1\u7A3B\u8404\u89A9\u8CED\u8DF3\u8E48\u9003\u9014\u9053\u90FD\u934D\u9676\u97DC\u6BD2\u7006\u7258\u72A2\u7368\u7763\u79BF\u7BE4\u7E9B\u8B80\u58A9\u60C7\u6566\u65FD\u66BE\u6C8C\u711E\u71C9\u8C5A\u9813\u4E6D\u7A81\u4EDD\u51AC\u51CD\u52D5\u540C\u61A7\u6771\u6850\u68DF\u6D1E\u6F7C\u75BC\u77B3\u7AE5\u80F4\u8463\u9285\u515C\u6597\u675C\u6793\u75D8\u7AC7\u8373\uF95A\u8C46\u9017\u982D\u5C6F\u81C0\u829A\u9041\u906F\u920D\u5F97\u5D9D\u6A59\u71C8\u767B\u7B49\u85E4\u8B04\u9127\u9A30\u5587\u61F6\uF95B\u7669\u7F85\"],[\"d5a1\",\"\u863F\u87BA\u88F8\u908F\uF95C\u6D1B\u70D9\u73DE\u7D61\u843D\uF95D\u916A\u99F1\uF95E\u4E82\u5375\u6B04\u6B12\u703E\u721B\u862D\u9E1E\u524C\u8FA3\u5D50\u64E5\u652C\u6B16\u6FEB\u7C43\u7E9C\u85CD\u8964\u89BD\u62C9\u81D8\u881F\u5ECA\u6717\u6D6A\u72FC\u7405\u746F\u8782\u90DE\u4F86\u5D0D\u5FA0\u840A\u51B7\u63A0\u7565\u4EAE\u5006\u5169\u51C9\u6881\u6A11\u7CAE\u7CB1\u7CE7\u826F\u8AD2\u8F1B\u91CF\u4FB6\u5137\u52F5\u5442\u5EEC\u616E\u623E\u65C5\u6ADA\u6FFE\u792A\u85DC\u8823\u95AD\u9A62\u9A6A\u9E97\u9ECE\u529B\u66C6\u6B77\u701D\u792B\u8F62\u9742\u6190\u6200\u6523\u6F23\"],[\"d6a1\",\"\u7149\u7489\u7DF4\u806F\u84EE\u8F26\u9023\u934A\u51BD\u5217\u52A3\u6D0C\u70C8\u88C2\u5EC9\u6582\u6BAE\u6FC2\u7C3E\u7375\u4EE4\u4F36\u56F9\uF95F\u5CBA\u5DBA\u601C\u73B2\u7B2D\u7F9A\u7FCE\u8046\u901E\u9234\u96F6\u9748\u9818\u9F61\u4F8B\u6FA7\u79AE\u91B4\u96B7\u52DE\uF960\u6488\u64C4\u6AD3\u6F5E\u7018\u7210\u76E7\u8001\u8606\u865C\u8DEF\u8F05\u9732\u9B6F\u9DFA\u9E75\u788C\u797F\u7DA0\u83C9\u9304\u9E7F\u9E93\u8AD6\u58DF\u5F04\u6727\u7027\u74CF\u7C60\u807E\u5121\u7028\u7262\u78CA\u8CC2\u8CDA\u8CF4\u96F7\u4E86\u50DA\u5BEE\u5ED6\u6599\u71CE\u7642\u77AD\u804A\u84FC\"],[\"d7a1\",\"\u907C\u9B27\u9F8D\u58D8\u5A41\u5C62\u6A13\u6DDA\u6F0F\u763B\u7D2F\u7E37\u851E\u8938\u93E4\u964B\u5289\u65D2\u67F3\u69B4\u6D41\u6E9C\u700F\u7409\u7460\u7559\u7624\u786B\u8B2C\u985E\u516D\u622E\u9678\u4F96\u502B\u5D19\u6DEA\u7DB8\u8F2A\u5F8B\u6144\u6817\uF961\u9686\u52D2\u808B\u51DC\u51CC\u695E\u7A1C\u7DBE\u83F1\u9675\u4FDA\u5229\u5398\u540F\u550E\u5C65\u60A7\u674E\u68A8\u6D6C\u7281\u72F8\u7406\u7483\uF962\u75E2\u7C6C\u7F79\u7FB8\u8389\u88CF\u88E1\u91CC\u91D0\u96E2\u9BC9\u541D\u6F7E\u71D0\u7498\u85FA\u8EAA\u96A3\u9C57\u9E9F\u6797\u6DCB\u7433\u81E8\u9716\u782C\"],[\"d8a1\",\"\u7ACB\u7B20\u7C92\u6469\u746A\u75F2\u78BC\u78E8\u99AC\u9B54\u9EBB\u5BDE\u5E55\u6F20\u819C\u83AB\u9088\u4E07\u534D\u5A29\u5DD2\u5F4E\u6162\u633D\u6669\u66FC\u6EFF\u6F2B\u7063\u779E\u842C\u8513\u883B\u8F13\u9945\u9C3B\u551C\u62B9\u672B\u6CAB\u8309\u896A\u977A\u4EA1\u5984\u5FD8\u5FD9\u671B\u7DB2\u7F54\u8292\u832B\u83BD\u8F1E\u9099\u57CB\u59B9\u5A92\u5BD0\u6627\u679A\u6885\u6BCF\u7164\u7F75\u8CB7\u8CE3\u9081\u9B45\u8108\u8C8A\u964C\u9A40\u9EA5\u5B5F\u6C13\u731B\u76F2\u76DF\u840C\u51AA\u8993\u514D\u5195\u52C9\u68C9\u6C94\u7704\u7720\u7DBF\u7DEC\u9762\u9EB5\u6EC5\"],[\"d9a1\",\"\u8511\u51A5\u540D\u547D\u660E\u669D\u6927\u6E9F\u76BF\u7791\u8317\u84C2\u879F\u9169\u9298\u9CF4\u8882\u4FAE\u5192\u52DF\u59C6\u5E3D\u6155\u6478\u6479\u66AE\u67D0\u6A21\u6BCD\u6BDB\u725F\u7261\u7441\u7738\u77DB\u8017\u82BC\u8305\u8B00\u8B28\u8C8C\u6728\u6C90\u7267\u76EE\u7766\u7A46\u9DA9\u6B7F\u6C92\u5922\u6726\u8499\u536F\u5893\u5999\u5EDF\u63CF\u6634\u6773\u6E3A\u732B\u7AD7\u82D7\u9328\u52D9\u5DEB\u61AE\u61CB\u620A\u62C7\u64AB\u65E0\u6959\u6B66\u6BCB\u7121\u73F7\u755D\u7E46\u821E\u8302\u856A\u8AA3\u8CBF\u9727\u9D61\u58A8\u9ED8\u5011\u520E\u543B\u554F\u6587\"],[\"daa1\",\"\u6C76\u7D0A\u7D0B\u805E\u868A\u9580\u96EF\u52FF\u6C95\u7269\u5473\u5A9A\u5C3E\u5D4B\u5F4C\u5FAE\u672A\u68B6\u6963\u6E3C\u6E44\u7709\u7C73\u7F8E\u8587\u8B0E\u8FF7\u9761\u9EF4\u5CB7\u60B6\u610D\u61AB\u654F\u65FB\u65FC\u6C11\u6CEF\u739F\u73C9\u7DE1\u9594\u5BC6\u871C\u8B10\u525D\u535A\u62CD\u640F\u64B2\u6734\u6A38\u6CCA\u73C0\u749E\u7B94\u7C95\u7E1B\u818A\u8236\u8584\u8FEB\u96F9\u99C1\u4F34\u534A\u53CD\u53DB\u62CC\u642C\u6500\u6591\u69C3\u6CEE\u6F58\u73ED\u7554\u7622\u76E4\u76FC\u78D0\u78FB\u792C\u7D46\u822C\u87E0\u8FD4\u9812\u98EF\u52C3\u62D4\u64A5\u6E24\u6F51\"],[\"dba1\",\"\u767C\u8DCB\u91B1\u9262\u9AEE\u9B43\u5023\u508D\u574A\u59A8\u5C28\u5E47\u5F77\u623F\u653E\u65B9\u65C1\u6609\u678B\u699C\u6EC2\u78C5\u7D21\u80AA\u8180\u822B\u82B3\u84A1\u868C\u8A2A\u8B17\u90A6\u9632\u9F90\u500D\u4FF3\uF963\u57F9\u5F98\u62DC\u6392\u676F\u6E43\u7119\u76C3\u80CC\u80DA\u88F4\u88F5\u8919\u8CE0\u8F29\u914D\u966A\u4F2F\u4F70\u5E1B\u67CF\u6822\u767D\u767E\u9B44\u5E61\u6A0A\u7169\u71D4\u756A\uF964\u7E41\u8543\u85E9\u98DC\u4F10\u7B4F\u7F70\u95A5\u51E1\u5E06\u68B5\u6C3E\u6C4E\u6CDB\u72AF\u7BC4\u8303\u6CD5\u743A\u50FB\u5288\u58C1\u64D8\u6A97\u74A7\u7656\"],[\"dca1\",\"\u78A7\u8617\u95E2\u9739\uF965\u535E\u5F01\u8B8A\u8FA8\u8FAF\u908A\u5225\u77A5\u9C49\u9F08\u4E19\u5002\u5175\u5C5B\u5E77\u661E\u663A\u67C4\u68C5\u70B3\u7501\u75C5\u79C9\u7ADD\u8F27\u9920\u9A08\u4FDD\u5821\u5831\u5BF6\u666E\u6B65\u6D11\u6E7A\u6F7D\u73E4\u752B\u83E9\u88DC\u8913\u8B5C\u8F14\u4F0F\u50D5\u5310\u535C\u5B93\u5FA9\u670D\u798F\u8179\u832F\u8514\u8907\u8986\u8F39\u8F3B\u99A5\u9C12\u672C\u4E76\u4FF8\u5949\u5C01\u5CEF\u5CF0\u6367\u68D2\u70FD\u71A2\u742B\u7E2B\u84EC\u8702\u9022\u92D2\u9CF3\u4E0D\u4ED8\u4FEF\u5085\u5256\u526F\u5426\u5490\u57E0\u592B\u5A66\"],[\"dda1\",\"\u5B5A\u5B75\u5BCC\u5E9C\uF966\u6276\u6577\u65A7\u6D6E\u6EA5\u7236\u7B26\u7C3F\u7F36\u8150\u8151\u819A\u8240\u8299\u83A9\u8A03\u8CA0\u8CE6\u8CFB\u8D74\u8DBA\u90E8\u91DC\u961C\u9644\u99D9\u9CE7\u5317\u5206\u5429\u5674\u58B3\u5954\u596E\u5FFF\u61A4\u626E\u6610\u6C7E\u711A\u76C6\u7C89\u7CDE\u7D1B\u82AC\u8CC1\u96F0\uF967\u4F5B\u5F17\u5F7F\u62C2\u5D29\u670B\u68DA\u787C\u7E43\u9D6C\u4E15\u5099\u5315\u532A\u5351\u5983\u5A62\u5E87\u60B2\u618A\u6249\u6279\u6590\u6787\u69A7\u6BD4\u6BD6\u6BD7\u6BD8\u6CB8\uF968\u7435\u75FA\u7812\u7891\u79D5\u79D8\u7C83\u7DCB\u7FE1\u80A5\"],[\"dea1\",\"\u813E\u81C2\u83F2\u871A\u88E8\u8AB9\u8B6C\u8CBB\u9119\u975E\u98DB\u9F3B\u56AC\u5B2A\u5F6C\u658C\u6AB3\u6BAF\u6D5C\u6FF1\u7015\u725D\u73AD\u8CA7\u8CD3\u983B\u6191\u6C37\u8058\u9A01\u4E4D\u4E8B\u4E9B\u4ED5\u4F3A\u4F3C\u4F7F\u4FDF\u50FF\u53F2\u53F8\u5506\u55E3\u56DB\u58EB\u5962\u5A11\u5BEB\u5BFA\u5C04\u5DF3\u5E2B\u5F99\u601D\u6368\u659C\u65AF\u67F6\u67FB\u68AD\u6B7B\u6C99\u6CD7\u6E23\u7009\u7345\u7802\u793E\u7940\u7960\u79C1\u7BE9\u7D17\u7D72\u8086\u820D\u838E\u84D1\u86C7\u88DF\u8A50\u8A5E\u8B1D\u8CDC\u8D66\u8FAD\u90AA\u98FC\u99DF\u9E9D\u524A\uF969\u6714\uF96A\"],[\"dfa1\",\"\u5098\u522A\u5C71\u6563\u6C55\u73CA\u7523\u759D\u7B97\u849C\u9178\u9730\u4E77\u6492\u6BBA\u715E\u85A9\u4E09\uF96B\u6749\u68EE\u6E17\u829F\u8518\u886B\u63F7\u6F81\u9212\u98AF\u4E0A\u50B7\u50CF\u511F\u5546\u55AA\u5617\u5B40\u5C19\u5CE0\u5E38\u5E8A\u5EA0\u5EC2\u60F3\u6851\u6A61\u6E58\u723D\u7240\u72C0\u76F8\u7965\u7BB1\u7FD4\u88F3\u89F4\u8A73\u8C61\u8CDE\u971C\u585E\u74BD\u8CFD\u55C7\uF96C\u7A61\u7D22\u8272\u7272\u751F\u7525\uF96D\u7B19\u5885\u58FB\u5DBC\u5E8F\u5EB6\u5F90\u6055\u6292\u637F\u654D\u6691\u66D9\u66F8\u6816\u68F2\u7280\u745E\u7B6E\u7D6E\u7DD6\u7F72\"],[\"e0a1\",\"\u80E5\u8212\u85AF\u897F\u8A93\u901D\u92E4\u9ECD\u9F20\u5915\u596D\u5E2D\u60DC\u6614\u6673\u6790\u6C50\u6DC5\u6F5F\u77F3\u78A9\u84C6\u91CB\u932B\u4ED9\u50CA\u5148\u5584\u5B0B\u5BA3\u6247\u657E\u65CB\u6E32\u717D\u7401\u7444\u7487\u74BF\u766C\u79AA\u7DDA\u7E55\u7FA8\u817A\u81B3\u8239\u861A\u87EC\u8A75\u8DE3\u9078\u9291\u9425\u994D\u9BAE\u5368\u5C51\u6954\u6CC4\u6D29\u6E2B\u820C\u859B\u893B\u8A2D\u8AAA\u96EA\u9F67\u5261\u66B9\u6BB2\u7E96\u87FE\u8D0D\u9583\u965D\u651D\u6D89\u71EE\uF96E\u57CE\u59D3\u5BAC\u6027\u60FA\u6210\u661F\u665F\u7329\u73F9\u76DB\u7701\u7B6C\"],[\"e1a1\",\"\u8056\u8072\u8165\u8AA0\u9192\u4E16\u52E2\u6B72\u6D17\u7A05\u7B39\u7D30\uF96F\u8CB0\u53EC\u562F\u5851\u5BB5\u5C0F\u5C11\u5DE2\u6240\u6383\u6414\u662D\u68B3\u6CBC\u6D88\u6EAF\u701F\u70A4\u71D2\u7526\u758F\u758E\u7619\u7B11\u7BE0\u7C2B\u7D20\u7D39\u852C\u856D\u8607\u8A34\u900D\u9061\u90B5\u92B7\u97F6\u9A37\u4FD7\u5C6C\u675F\u6D91\u7C9F\u7E8C\u8B16\u8D16\u901F\u5B6B\u5DFD\u640D\u84C0\u905C\u98E1\u7387\u5B8B\u609A\u677E\u6DDE\u8A1F\u8AA6\u9001\u980C\u5237\uF970\u7051\u788E\u9396\u8870\u91D7\u4FEE\u53D7\u55FD\u56DA\u5782\u58FD\u5AC2\u5B88\u5CAB\u5CC0\u5E25\u6101\"],[\"e2a1\",\"\u620D\u624B\u6388\u641C\u6536\u6578\u6A39\u6B8A\u6C34\u6D19\u6F31\u71E7\u72E9\u7378\u7407\u74B2\u7626\u7761\u79C0\u7A57\u7AEA\u7CB9\u7D8F\u7DAC\u7E61\u7F9E\u8129\u8331\u8490\u84DA\u85EA\u8896\u8AB0\u8B90\u8F38\u9042\u9083\u916C\u9296\u92B9\u968B\u96A7\u96A8\u96D6\u9700\u9808\u9996\u9AD3\u9B1A\u53D4\u587E\u5919\u5B70\u5BBF\u6DD1\u6F5A\u719F\u7421\u74B9\u8085\u83FD\u5DE1\u5F87\u5FAA\u6042\u65EC\u6812\u696F\u6A53\u6B89\u6D35\u6DF3\u73E3\u76FE\u77AC\u7B4D\u7D14\u8123\u821C\u8340\u84F4\u8563\u8A62\u8AC4\u9187\u931E\u9806\u99B4\u620C\u8853\u8FF0\u9265\u5D07\u5D27\"],[\"e3a1\",\"\u5D69\u745F\u819D\u8768\u6FD5\u62FE\u7FD2\u8936\u8972\u4E1E\u4E58\u50E7\u52DD\u5347\u627F\u6607\u7E69\u8805\u965E\u4F8D\u5319\u5636\u59CB\u5AA4\u5C38\u5C4E\u5C4D\u5E02\u5F11\u6043\u65BD\u662F\u6642\u67BE\u67F4\u731C\u77E2\u793A\u7FC5\u8494\u84CD\u8996\u8A66\u8A69\u8AE1\u8C55\u8C7A\u57F4\u5BD4\u5F0F\u606F\u62ED\u690D\u6B96\u6E5C\u7184\u7BD2\u8755\u8B58\u8EFE\u98DF\u98FE\u4F38\u4F81\u4FE1\u547B\u5A20\u5BB8\u613C\u65B0\u6668\u71FC\u7533\u795E\u7D33\u814E\u81E3\u8398\u85AA\u85CE\u8703\u8A0A\u8EAB\u8F9B\uF971\u8FC5\u5931\u5BA4\u5BE6\u6089\u5BE9\u5C0B\u5FC3\u6C81\"],[\"e4a1\",\"\uF972\u6DF1\u700B\u751A\u82AF\u8AF6\u4EC0\u5341\uF973\u96D9\u6C0F\u4E9E\u4FC4\u5152\u555E\u5A25\u5CE8\u6211\u7259\u82BD\u83AA\u86FE\u8859\u8A1D\u963F\u96C5\u9913\u9D09\u9D5D\u580A\u5CB3\u5DBD\u5E44\u60E1\u6115\u63E1\u6A02\u6E25\u9102\u9354\u984E\u9C10\u9F77\u5B89\u5CB8\u6309\u664F\u6848\u773C\u96C1\u978D\u9854\u9B9F\u65A1\u8B01\u8ECB\u95BC\u5535\u5CA9\u5DD6\u5EB5\u6697\u764C\u83F4\u95C7\u58D3\u62BC\u72CE\u9D28\u4EF0\u592E\u600F\u663B\u6B83\u79E7\u9D26\u5393\u54C0\u57C3\u5D16\u611B\u66D6\u6DAF\u788D\u827E\u9698\u9744\u5384\u627C\u6396\u6DB2\u7E0A\u814B\u984D\"],[\"e5a1\",\"\u6AFB\u7F4C\u9DAF\u9E1A\u4E5F\u503B\u51B6\u591C\u60F9\u63F6\u6930\u723A\u8036\uF974\u91CE\u5F31\uF975\uF976\u7D04\u82E5\u846F\u84BB\u85E5\u8E8D\uF977\u4F6F\uF978\uF979\u58E4\u5B43\u6059\u63DA\u6518\u656D\u6698\uF97A\u694A\u6A23\u6D0B\u7001\u716C\u75D2\u760D\u79B3\u7A70\uF97B\u7F8A\uF97C\u8944\uF97D\u8B93\u91C0\u967D\uF97E\u990A\u5704\u5FA1\u65BC\u6F01\u7600\u79A6\u8A9E\u99AD\u9B5A\u9F6C\u5104\u61B6\u6291\u6A8D\u81C6\u5043\u5830\u5F66\u7109\u8A00\u8AFA\u5B7C\u8616\u4FFA\u513C\u56B4\u5944\u63A9\u6DF9\u5DAA\u696D\u5186\u4E88\u4F59\uF97F\uF980\uF981\u5982\uF982\"],[\"e6a1\",\"\uF983\u6B5F\u6C5D\uF984\u74B5\u7916\uF985\u8207\u8245\u8339\u8F3F\u8F5D\uF986\u9918\uF987\uF988\uF989\u4EA6\uF98A\u57DF\u5F79\u6613\uF98B\uF98C\u75AB\u7E79\u8B6F\uF98D\u9006\u9A5B\u56A5\u5827\u59F8\u5A1F\u5BB4\uF98E\u5EF6\uF98F\uF990\u6350\u633B\uF991\u693D\u6C87\u6CBF\u6D8E\u6D93\u6DF5\u6F14\uF992\u70DF\u7136\u7159\uF993\u71C3\u71D5\uF994\u784F\u786F\uF995\u7B75\u7DE3\uF996\u7E2F\uF997\u884D\u8EDF\uF998\uF999\uF99A\u925B\uF99B\u9CF6\uF99C\uF99D\uF99E\u6085\u6D85\uF99F\u71B1\uF9A0\uF9A1\u95B1\u53AD\uF9A2\uF9A3\uF9A4\u67D3\uF9A5\u708E\u7130\u7430\u8276\u82D2\"],[\"e7a1\",\"\uF9A6\u95BB\u9AE5\u9E7D\u66C4\uF9A7\u71C1\u8449\uF9A8\uF9A9\u584B\uF9AA\uF9AB\u5DB8\u5F71\uF9AC\u6620\u668E\u6979\u69AE\u6C38\u6CF3\u6E36\u6F41\u6FDA\u701B\u702F\u7150\u71DF\u7370\uF9AD\u745B\uF9AE\u74D4\u76C8\u7A4E\u7E93\uF9AF\uF9B0\u82F1\u8A60\u8FCE\uF9B1\u9348\uF9B2\u9719\uF9B3\uF9B4\u4E42\u502A\uF9B5\u5208\u53E1\u66F3\u6C6D\u6FCA\u730A\u777F\u7A62\u82AE\u85DD\u8602\uF9B6\u88D4\u8A63\u8B7D\u8C6B\uF9B7\u92B3\uF9B8\u9713\u9810\u4E94\u4F0D\u4FC9\u50B2\u5348\u543E\u5433\u55DA\u5862\u58BA\u5967\u5A1B\u5BE4\u609F\uF9B9\u61CA\u6556\u65FF\u6664\u68A7\u6C5A\u6FB3\"],[\"e8a1\",\"\u70CF\u71AC\u7352\u7B7D\u8708\u8AA4\u9C32\u9F07\u5C4B\u6C83\u7344\u7389\u923A\u6EAB\u7465\u761F\u7A69\u7E15\u860A\u5140\u58C5\u64C1\u74EE\u7515\u7670\u7FC1\u9095\u96CD\u9954\u6E26\u74E6\u7AA9\u7AAA\u81E5\u86D9\u8778\u8A1B\u5A49\u5B8C\u5B9B\u68A1\u6900\u6D63\u73A9\u7413\u742C\u7897\u7DE9\u7FEB\u8118\u8155\u839E\u8C4C\u962E\u9811\u66F0\u5F80\u65FA\u6789\u6C6A\u738B\u502D\u5A03\u6B6A\u77EE\u5916\u5D6C\u5DCD\u7325\u754F\uF9BA\uF9BB\u50E5\u51F9\u582F\u592D\u5996\u59DA\u5BE5\uF9BC\uF9BD\u5DA2\u62D7\u6416\u6493\u64FE\uF9BE\u66DC\uF9BF\u6A48\uF9C0\u71FF\u7464\uF9C1\"],[\"e9a1\",\"\u7A88\u7AAF\u7E47\u7E5E\u8000\u8170\uF9C2\u87EF\u8981\u8B20\u9059\uF9C3\u9080\u9952\u617E\u6B32\u6D74\u7E1F\u8925\u8FB1\u4FD1\u50AD\u5197\u52C7\u57C7\u5889\u5BB9\u5EB8\u6142\u6995\u6D8C\u6E67\u6EB6\u7194\u7462\u7528\u752C\u8073\u8338\u84C9\u8E0A\u9394\u93DE\uF9C4\u4E8E\u4F51\u5076\u512A\u53C8\u53CB\u53F3\u5B87\u5BD3\u5C24\u611A\u6182\u65F4\u725B\u7397\u7440\u76C2\u7950\u7991\u79B9\u7D06\u7FBD\u828B\u85D5\u865E\u8FC2\u9047\u90F5\u91EA\u9685\u96E8\u96E9\u52D6\u5F67\u65ED\u6631\u682F\u715C\u7A36\u90C1\u980A\u4E91\uF9C5\u6A52\u6B9E\u6F90\u7189\u8018\u82B8\u8553\"],[\"eaa1\",\"\u904B\u9695\u96F2\u97FB\u851A\u9B31\u4E90\u718A\u96C4\u5143\u539F\u54E1\u5713\u5712\u57A3\u5A9B\u5AC4\u5BC3\u6028\u613F\u63F4\u6C85\u6D39\u6E72\u6E90\u7230\u733F\u7457\u82D1\u8881\u8F45\u9060\uF9C6\u9662\u9858\u9D1B\u6708\u8D8A\u925E\u4F4D\u5049\u50DE\u5371\u570D\u59D4\u5A01\u5C09\u6170\u6690\u6E2D\u7232\u744B\u7DEF\u80C3\u840E\u8466\u853F\u875F\u885B\u8918\u8B02\u9055\u97CB\u9B4F\u4E73\u4F91\u5112\u516A\uF9C7\u552F\u55A9\u5B7A\u5BA5\u5E7C\u5E7D\u5EBE\u60A0\u60DF\u6108\u6109\u63C4\u6538\u6709\uF9C8\u67D4\u67DA\uF9C9\u6961\u6962\u6CB9\u6D27\uF9CA\u6E38\uF9CB\"],[\"eba1\",\"\u6FE1\u7336\u7337\uF9CC\u745C\u7531\uF9CD\u7652\uF9CE\uF9CF\u7DAD\u81FE\u8438\u88D5\u8A98\u8ADB\u8AED\u8E30\u8E42\u904A\u903E\u907A\u9149\u91C9\u936E\uF9D0\uF9D1\u5809\uF9D2\u6BD3\u8089\u80B2\uF9D3\uF9D4\u5141\u596B\u5C39\uF9D5\uF9D6\u6F64\u73A7\u80E4\u8D07\uF9D7\u9217\u958F\uF9D8\uF9D9\uF9DA\uF9DB\u807F\u620E\u701C\u7D68\u878D\uF9DC\u57A0\u6069\u6147\u6BB7\u8ABE\u9280\u96B1\u4E59\u541F\u6DEB\u852D\u9670\u97F3\u98EE\u63D6\u6CE3\u9091\u51DD\u61C9\u81BA\u9DF9\u4F9D\u501A\u5100\u5B9C\u610F\u61FF\u64EC\u6905\u6BC5\u7591\u77E3\u7FA9\u8264\u858F\u87FB\u8863\u8ABC\"],[\"eca1\",\"\u8B70\u91AB\u4E8C\u4EE5\u4F0A\uF9DD\uF9DE\u5937\u59E8\uF9DF\u5DF2\u5F1B\u5F5B\u6021\uF9E0\uF9E1\uF9E2\uF9E3\u723E\u73E5\uF9E4\u7570\u75CD\uF9E5\u79FB\uF9E6\u800C\u8033\u8084\u82E1\u8351\uF9E7\uF9E8\u8CBD\u8CB3\u9087\uF9E9\uF9EA\u98F4\u990C\uF9EB\uF9EC\u7037\u76CA\u7FCA\u7FCC\u7FFC\u8B1A\u4EBA\u4EC1\u5203\u5370\uF9ED\u54BD\u56E0\u59FB\u5BC5\u5F15\u5FCD\u6E6E\uF9EE\uF9EF\u7D6A\u8335\uF9F0\u8693\u8A8D\uF9F1\u976D\u9777\uF9F2\uF9F3\u4E00\u4F5A\u4F7E\u58F9\u65E5\u6EA2\u9038\u93B0\u99B9\u4EFB\u58EC\u598A\u59D9\u6041\uF9F4\uF9F5\u7A14\uF9F6\u834F\u8CC3\u5165\u5344\"],[\"eda1\",\"\uF9F7\uF9F8\uF9F9\u4ECD\u5269\u5B55\u82BF\u4ED4\u523A\u54A8\u59C9\u59FF\u5B50\u5B57\u5B5C\u6063\u6148\u6ECB\u7099\u716E\u7386\u74F7\u75B5\u78C1\u7D2B\u8005\u81EA\u8328\u8517\u85C9\u8AEE\u8CC7\u96CC\u4F5C\u52FA\u56BC\u65AB\u6628\u707C\u70B8\u7235\u7DBD\u828D\u914C\u96C0\u9D72\u5B71\u68E7\u6B98\u6F7A\u76DE\u5C91\u66AB\u6F5B\u7BB4\u7C2A\u8836\u96DC\u4E08\u4ED7\u5320\u5834\u58BB\u58EF\u596C\u5C07\u5E33\u5E84\u5F35\u638C\u66B2\u6756\u6A1F\u6AA3\u6B0C\u6F3F\u7246\uF9FA\u7350\u748B\u7AE0\u7CA7\u8178\u81DF\u81E7\u838A\u846C\u8523\u8594\u85CF\u88DD\u8D13\u91AC\u9577\"],[\"eea1\",\"\u969C\u518D\u54C9\u5728\u5BB0\u624D\u6750\u683D\u6893\u6E3D\u6ED3\u707D\u7E21\u88C1\u8CA1\u8F09\u9F4B\u9F4E\u722D\u7B8F\u8ACD\u931A\u4F47\u4F4E\u5132\u5480\u59D0\u5E95\u62B5\u6775\u696E\u6A17\u6CAE\u6E1A\u72D9\u732A\u75BD\u7BB8\u7D35\u82E7\u83F9\u8457\u85F7\u8A5B\u8CAF\u8E87\u9019\u90B8\u96CE\u9F5F\u52E3\u540A\u5AE1\u5BC2\u6458\u6575\u6EF4\u72C4\uF9FB\u7684\u7A4D\u7B1B\u7C4D\u7E3E\u7FDF\u837B\u8B2B\u8CCA\u8D64\u8DE1\u8E5F\u8FEA\u8FF9\u9069\u93D1\u4F43\u4F7A\u50B3\u5168\u5178\u524D\u526A\u5861\u587C\u5960\u5C08\u5C55\u5EDB\u609B\u6230\u6813\u6BBF\u6C08\u6FB1\"],[\"efa1\",\"\u714E\u7420\u7530\u7538\u7551\u7672\u7B4C\u7B8B\u7BAD\u7BC6\u7E8F\u8A6E\u8F3E\u8F49\u923F\u9293\u9322\u942B\u96FB\u985A\u986B\u991E\u5207\u622A\u6298\u6D59\u7664\u7ACA\u7BC0\u7D76\u5360\u5CBE\u5E97\u6F38\u70B9\u7C98\u9711\u9B8E\u9EDE\u63A5\u647A\u8776\u4E01\u4E95\u4EAD\u505C\u5075\u5448\u59C3\u5B9A\u5E40\u5EAD\u5EF7\u5F81\u60C5\u633A\u653F\u6574\u65CC\u6676\u6678\u67FE\u6968\u6A89\u6B63\u6C40\u6DC0\u6DE8\u6E1F\u6E5E\u701E\u70A1\u738E\u73FD\u753A\u775B\u7887\u798E\u7A0B\u7A7D\u7CBE\u7D8E\u8247\u8A02\u8AEA\u8C9E\u912D\u914A\u91D8\u9266\u92CC\u9320\u9706\u9756\"],[\"f0a1\",\"\u975C\u9802\u9F0E\u5236\u5291\u557C\u5824\u5E1D\u5F1F\u608C\u63D0\u68AF\u6FDF\u796D\u7B2C\u81CD\u85BA\u88FD\u8AF8\u8E44\u918D\u9664\u969B\u973D\u984C\u9F4A\u4FCE\u5146\u51CB\u52A9\u5632\u5F14\u5F6B\u63AA\u64CD\u65E9\u6641\u66FA\u66F9\u671D\u689D\u68D7\u69FD\u6F15\u6F6E\u7167\u71E5\u722A\u74AA\u773A\u7956\u795A\u79DF\u7A20\u7A95\u7C97\u7CDF\u7D44\u7E70\u8087\u85FB\u86A4\u8A54\u8ABF\u8D99\u8E81\u9020\u906D\u91E3\u963B\u96D5\u9CE5\u65CF\u7C07\u8DB3\u93C3\u5B58\u5C0A\u5352\u62D9\u731D\u5027\u5B97\u5F9E\u60B0\u616B\u68D5\u6DD9\u742E\u7A2E\u7D42\u7D9C\u7E31\u816B\"],[\"f1a1\",\"\u8E2A\u8E35\u937E\u9418\u4F50\u5750\u5DE6\u5EA7\u632B\u7F6A\u4E3B\u4F4F\u4F8F\u505A\u59DD\u80C4\u546A\u5468\u55FE\u594F\u5B99\u5DDE\u5EDA\u665D\u6731\u67F1\u682A\u6CE8\u6D32\u6E4A\u6F8D\u70B7\u73E0\u7587\u7C4C\u7D02\u7D2C\u7DA2\u821F\u86DB\u8A3B\u8A85\u8D70\u8E8A\u8F33\u9031\u914E\u9152\u9444\u99D0\u7AF9\u7CA5\u4FCA\u5101\u51C6\u57C8\u5BEF\u5CFB\u6659\u6A3D\u6D5A\u6E96\u6FEC\u710C\u756F\u7AE3\u8822\u9021\u9075\u96CB\u99FF\u8301\u4E2D\u4EF2\u8846\u91CD\u537D\u6ADB\u696B\u6C41\u847A\u589E\u618E\u66FE\u62EF\u70DD\u7511\u75C7\u7E52\u84B8\u8B49\u8D08\u4E4B\u53EA\"],[\"f2a1\",\"\u54AB\u5730\u5740\u5FD7\u6301\u6307\u646F\u652F\u65E8\u667A\u679D\u67B3\u6B62\u6C60\u6C9A\u6F2C\u77E5\u7825\u7949\u7957\u7D19\u80A2\u8102\u81F3\u829D\u82B7\u8718\u8A8C\uF9FC\u8D04\u8DBE\u9072\u76F4\u7A19\u7A37\u7E54\u8077\u5507\u55D4\u5875\u632F\u6422\u6649\u664B\u686D\u699B\u6B84\u6D25\u6EB1\u73CD\u7468\u74A1\u755B\u75B9\u76E1\u771E\u778B\u79E6\u7E09\u7E1D\u81FB\u852F\u8897\u8A3A\u8CD1\u8EEB\u8FB0\u9032\u93AD\u9663\u9673\u9707\u4F84\u53F1\u59EA\u5AC9\u5E19\u684E\u74C6\u75BE\u79E9\u7A92\u81A3\u86ED\u8CEA\u8DCC\u8FED\u659F\u6715\uF9FD\u57F7\u6F57\u7DDD\u8F2F\"],[\"f3a1\",\"\u93F6\u96C6\u5FB5\u61F2\u6F84\u4E14\u4F98\u501F\u53C9\u55DF\u5D6F\u5DEE\u6B21\u6B64\u78CB\u7B9A\uF9FE\u8E49\u8ECA\u906E\u6349\u643E\u7740\u7A84\u932F\u947F\u9F6A\u64B0\u6FAF\u71E6\u74A8\u74DA\u7AC4\u7C12\u7E82\u7CB2\u7E98\u8B9A\u8D0A\u947D\u9910\u994C\u5239\u5BDF\u64E6\u672D\u7D2E\u50ED\u53C3\u5879\u6158\u6159\u61FA\u65AC\u7AD9\u8B92\u8B96\u5009\u5021\u5275\u5531\u5A3C\u5EE0\u5F70\u6134\u655E\u660C\u6636\u66A2\u69CD\u6EC4\u6F32\u7316\u7621\u7A93\u8139\u8259\u83D6\u84BC\u50B5\u57F0\u5BC0\u5BE8\u5F69\u63A1\u7826\u7DB5\u83DC\u8521\u91C7\u91F5\u518A\u67F5\u7B56\"],[\"f4a1\",\"\u8CAC\u51C4\u59BB\u60BD\u8655\u501C\uF9FF\u5254\u5C3A\u617D\u621A\u62D3\u64F2\u65A5\u6ECC\u7620\u810A\u8E60\u965F\u96BB\u4EDF\u5343\u5598\u5929\u5DDD\u64C5\u6CC9\u6DFA\u7394\u7A7F\u821B\u85A6\u8CE4\u8E10\u9077\u91E7\u95E1\u9621\u97C6\u51F8\u54F2\u5586\u5FB9\u64A4\u6F88\u7DB4\u8F1F\u8F4D\u9435\u50C9\u5C16\u6CBE\u6DFB\u751B\u77BB\u7C3D\u7C64\u8A79\u8AC2\u581E\u59BE\u5E16\u6377\u7252\u758A\u776B\u8ADC\u8CBC\u8F12\u5EF3\u6674\u6DF8\u807D\u83C1\u8ACB\u9751\u9BD6\uFA00\u5243\u66FF\u6D95\u6EEF\u7DE0\u8AE6\u902E\u905E\u9AD4\u521D\u527F\u54E8\u6194\u6284\u62DB\u68A2\"],[\"f5a1\",\"\u6912\u695A\u6A35\u7092\u7126\u785D\u7901\u790E\u79D2\u7A0D\u8096\u8278\u82D5\u8349\u8549\u8C82\u8D85\u9162\u918B\u91AE\u4FC3\u56D1\u71ED\u77D7\u8700\u89F8\u5BF8\u5FD6\u6751\u90A8\u53E2\u585A\u5BF5\u60A4\u6181\u6460\u7E3D\u8070\u8525\u9283\u64AE\u50AC\u5D14\u6700\u589C\u62BD\u63A8\u690E\u6978\u6A1E\u6E6B\u76BA\u79CB\u82BB\u8429\u8ACF\u8DA8\u8FFD\u9112\u914B\u919C\u9310\u9318\u939A\u96DB\u9A36\u9C0D\u4E11\u755C\u795D\u7AFA\u7B51\u7BC9\u7E2E\u84C4\u8E59\u8E74\u8EF8\u9010\u6625\u693F\u7443\u51FA\u672E\u9EDC\u5145\u5FE0\u6C96\u87F2\u885D\u8877\u60B4\u81B5\u8403\"],[\"f6a1\",\"\u8D05\u53D6\u5439\u5634\u5A36\u5C31\u708A\u7FE0\u805A\u8106\u81ED\u8DA3\u9189\u9A5F\u9DF2\u5074\u4EC4\u53A0\u60FB\u6E2C\u5C64\u4F88\u5024\u55E4\u5CD9\u5E5F\u6065\u6894\u6CBB\u6DC4\u71BE\u75D4\u75F4\u7661\u7A1A\u7A49\u7DC7\u7DFB\u7F6E\u81F4\u86A9\u8F1C\u96C9\u99B3\u9F52\u5247\u52C5\u98ED\u89AA\u4E03\u67D2\u6F06\u4FB5\u5BE2\u6795\u6C88\u6D78\u741B\u7827\u91DD\u937C\u87C4\u79E4\u7A31\u5FEB\u4ED6\u54A4\u553E\u58AE\u59A5\u60F0\u6253\u62D6\u6736\u6955\u8235\u9640\u99B1\u99DD\u502C\u5353\u5544\u577C\uFA01\u6258\uFA02\u64E2\u666B\u67DD\u6FC1\u6FEF\u7422\u7438\u8A17\"],[\"f7a1\",\"\u9438\u5451\u5606\u5766\u5F48\u619A\u6B4E\u7058\u70AD\u7DBB\u8A95\u596A\u812B\u63A2\u7708\u803D\u8CAA\u5854\u642D\u69BB\u5B95\u5E11\u6E6F\uFA03\u8569\u514C\u53F0\u592A\u6020\u614B\u6B86\u6C70\u6CF0\u7B1E\u80CE\u82D4\u8DC6\u90B0\u98B1\uFA04\u64C7\u6FA4\u6491\u6504\u514E\u5410\u571F\u8A0E\u615F\u6876\uFA05\u75DB\u7B52\u7D71\u901A\u5806\u69CC\u817F\u892A\u9000\u9839\u5078\u5957\u59AC\u6295\u900F\u9B2A\u615D\u7279\u95D6\u5761\u5A46\u5DF4\u628A\u64AD\u64FA\u6777\u6CE2\u6D3E\u722C\u7436\u7834\u7F77\u82AD\u8DDB\u9817\u5224\u5742\u677F\u7248\u74E3\u8CA9\u8FA6\u9211\"],[\"f8a1\",\"\u962A\u516B\u53ED\u634C\u4F69\u5504\u6096\u6557\u6C9B\u6D7F\u724C\u72FD\u7A17\u8987\u8C9D\u5F6D\u6F8E\u70F9\u81A8\u610E\u4FBF\u504F\u6241\u7247\u7BC7\u7DE8\u7FE9\u904D\u97AD\u9A19\u8CB6\u576A\u5E73\u67B0\u840D\u8A55\u5420\u5B16\u5E63\u5EE2\u5F0A\u6583\u80BA\u853D\u9589\u965B\u4F48\u5305\u530D\u530F\u5486\u54FA\u5703\u5E03\u6016\u629B\u62B1\u6355\uFA06\u6CE1\u6D66\u75B1\u7832\u80DE\u812F\u82DE\u8461\u84B2\u888D\u8912\u900B\u92EA\u98FD\u9B91\u5E45\u66B4\u66DD\u7011\u7206\uFA07\u4FF5\u527D\u5F6A\u6153\u6753\u6A19\u6F02\u74E2\u7968\u8868\u8C79\u98C7\u98C4\u9A43\"],[\"f9a1\",\"\u54C1\u7A1F\u6953\u8AF7\u8C4A\u98A8\u99AE\u5F7C\u62AB\u75B2\u76AE\u88AB\u907F\u9642\u5339\u5F3C\u5FC5\u6CCC\u73CC\u7562\u758B\u7B46\u82FE\u999D\u4E4F\u903C\u4E0B\u4F55\u53A6\u590F\u5EC8\u6630\u6CB3\u7455\u8377\u8766\u8CC0\u9050\u971E\u9C15\u58D1\u5B78\u8650\u8B14\u9DB4\u5BD2\u6068\u608D\u65F1\u6C57\u6F22\u6FA3\u701A\u7F55\u7FF0\u9591\u9592\u9650\u97D3\u5272\u8F44\u51FD\u542B\u54B8\u5563\u558A\u6ABB\u6DB5\u7DD8\u8266\u929C\u9677\u9E79\u5408\u54C8\u76D2\u86E4\u95A4\u95D4\u965C\u4EA2\u4F09\u59EE\u5AE6\u5DF7\u6052\u6297\u676D\u6841\u6C86\u6E2F\u7F38\u809B\u822A\"],[\"faa1\",\"\uFA08\uFA09\u9805\u4EA5\u5055\u54B3\u5793\u595A\u5B69\u5BB3\u61C8\u6977\u6D77\u7023\u87F9\u89E3\u8A72\u8AE7\u9082\u99ED\u9AB8\u52BE\u6838\u5016\u5E78\u674F\u8347\u884C\u4EAB\u5411\u56AE\u73E6\u9115\u97FF\u9909\u9957\u9999\u5653\u589F\u865B\u8A31\u61B2\u6AF6\u737B\u8ED2\u6B47\u96AA\u9A57\u5955\u7200\u8D6B\u9769\u4FD4\u5CF4\u5F26\u61F8\u665B\u6CEB\u70AB\u7384\u73B9\u73FE\u7729\u774D\u7D43\u7D62\u7E23\u8237\u8852\uFA0A\u8CE2\u9249\u986F\u5B51\u7A74\u8840\u9801\u5ACC\u4FE0\u5354\u593E\u5CFD\u633E\u6D79\u72F9\u8105\u8107\u83A2\u92CF\u9830\u4EA8\u5144\u5211\u578B\"],[\"fba1\",\"\u5F62\u6CC2\u6ECE\u7005\u7050\u70AF\u7192\u73E9\u7469\u834A\u87A2\u8861\u9008\u90A2\u93A3\u99A8\u516E\u5F57\u60E0\u6167\u66B3\u8559\u8E4A\u91AF\u978B\u4E4E\u4E92\u547C\u58D5\u58FA\u597D\u5CB5\u5F27\u6236\u6248\u660A\u6667\u6BEB\u6D69\u6DCF\u6E56\u6EF8\u6F94\u6FE0\u6FE9\u705D\u72D0\u7425\u745A\u74E0\u7693\u795C\u7CCA\u7E1E\u80E1\u82A6\u846B\u84BF\u864E\u865F\u8774\u8B77\u8C6A\u93AC\u9800\u9865\u60D1\u6216\u9177\u5A5A\u660F\u6DF7\u6E3E\u743F\u9B42\u5FFD\u60DA\u7B0F\u54C4\u5F18\u6C5E\u6CD3\u6D2A\u70D8\u7D05\u8679\u8A0C\u9D3B\u5316\u548C\u5B05\u6A3A\u706B\u7575\"],[\"fca1\",\"\u798D\u79BE\u82B1\u83EF\u8A71\u8B41\u8CA8\u9774\uFA0B\u64F4\u652B\u78BA\u78BB\u7A6B\u4E38\u559A\u5950\u5BA6\u5E7B\u60A3\u63DB\u6B61\u6665\u6853\u6E19\u7165\u74B0\u7D08\u9084\u9A69\u9C25\u6D3B\u6ED1\u733E\u8C41\u95CA\u51F0\u5E4C\u5FA8\u604D\u60F6\u6130\u614C\u6643\u6644\u69A5\u6CC1\u6E5F\u6EC9\u6F62\u714C\u749C\u7687\u7BC1\u7C27\u8352\u8757\u9051\u968D\u9EC3\u532F\u56DE\u5EFB\u5F8A\u6062\u6094\u61F7\u6666\u6703\u6A9C\u6DEE\u6FAE\u7070\u736A\u7E6A\u81BE\u8334\u86D4\u8AA8\u8CC4\u5283\u7372\u5B96\u6A6B\u9404\u54EE\u5686\u5B5D\u6548\u6585\u66C9\u689F\u6D8D\u6DC6\"],[\"fda1\",\"\u723B\u80B4\u9175\u9A4D\u4FAF\u5019\u539A\u540E\u543C\u5589\u55C5\u5E3F\u5F8C\u673D\u7166\u73DD\u9005\u52DB\u52F3\u5864\u58CE\u7104\u718F\u71FB\u85B0\u8A13\u6688\u85A8\u55A7\u6684\u714A\u8431\u5349\u5599\u6BC1\u5F59\u5FBD\u63EE\u6689\u7147\u8AF1\u8F1D\u9EBE\u4F11\u643A\u70CB\u7566\u8667\u6064\u8B4E\u9DF8\u5147\u51F6\u5308\u6D36\u80F8\u9ED1\u6615\u6B23\u7098\u75D5\u5403\u5C79\u7D07\u8A16\u6B20\u6B3D\u6B46\u5438\u6070\u6D3D\u7FD5\u8208\u50D6\u51DE\u559C\u566B\u56CD\u59EC\u5B09\u5E0C\u6199\u6198\u6231\u665E\u66E6\u7199\u71B9\u71BA\u72A7\u79A7\u7A00\u7FB2\u8A70\"]]");
      /***/
    },
    /* 404 */

    /***/
    function (module) {
      module.exports = JSON.parse("[[\"8740\",\"䏰䰲䘃䖦䕸𧉧䵷䖳𧲱䳢𧳅㮕䜶䝄䱇䱀𤊿𣘗𧍒𦺋𧃒䱗𪍑䝏䗚䲅𧱬䴇䪤䚡𦬣爥𥩔𡩣𣸆𣽡晍囻\"],[\"8767\",\"綕夝𨮹㷴霴𧯯寛𡵞媤㘥𩺰嫑宷峼杮薓𩥅瑡璝㡵𡵓𣚞𦀡㻬\"],[\"87a1\",\"𥣞㫵竼龗𤅡𨤍𣇪𠪊𣉞䌊蒄龖鐯䤰蘓墖靊鈘秐稲晠権袝瑌篅枂稬剏遆㓦珄𥶹瓆鿇垳䤯呌䄱𣚎堘穲𧭥讏䚮𦺈䆁𥶙箮𢒼鿈𢓁𢓉𢓌鿉蔄𣖻䂴鿊䓡𪷿拁灮鿋\"],[\"8840\",\"㇀\",4,\"𠄌㇅𠃑𠃍㇆㇇𠃋𡿨㇈𠃊㇉㇊㇋㇌𠄎㇍㇎ĀÁǍÀĒÉĚÈŌÓǑÒ࿿Ê̄Ế࿿Ê̌ỀÊāáǎàɑēéěèīíǐìōóǒòūúǔùǖǘǚ\"],[\"88a1\",\"ǜü࿿ê̄ế࿿ê̌ềêɡ⏚⏛\"],[\"8940\",\"𪎩𡅅\"],[\"8943\",\"攊\"],[\"8946\",\"丽滝鵎釟\"],[\"894c\",\"𧜵撑会伨侨兖兴农凤务动医华发变团声处备夲头学实実岚庆总斉柾栄桥济炼电纤纬纺织经统缆缷艺苏药视设询车轧轮\"],[\"89a1\",\"琑糼緍楆竉刧\"],[\"89ab\",\"醌碸酞肼\"],[\"89b0\",\"贋胶𠧧\"],[\"89b5\",\"肟黇䳍鷉鸌䰾𩷶𧀎鸊𪄳㗁\"],[\"89c1\",\"溚舾甙\"],[\"89c5\",\"䤑马骏龙禇𨑬𡷊𠗐𢫦两亁亀亇亿仫伷㑌侽㹈倃傈㑽㒓㒥円夅凛凼刅争剹劐匧㗇厩㕑厰㕓参吣㕭㕲㚁咓咣咴咹哐哯唘唣唨㖘唿㖥㖿嗗㗅\"],[\"8a40\",\"𧶄唥\"],[\"8a43\",\"𠱂𠴕𥄫喐𢳆㧬𠍁蹆𤶸𩓥䁓𨂾睺𢰸㨴䟕𨅝𦧲𤷪擝𠵼𠾴𠳕𡃴撍蹾𠺖𠰋𠽤𢲩𨉖𤓓\"],[\"8a64\",\"𠵆𩩍𨃩䟴𤺧𢳂骲㩧𩗴㿭㔆𥋇𩟔𧣈𢵄鵮頕\"],[\"8a76\",\"䏙𦂥撴哣𢵌𢯊𡁷㧻𡁯\"],[\"8aa1\",\"𦛚𦜖𧦠擪𥁒𠱃蹨𢆡𨭌𠜱\"],[\"8aac\",\"䠋𠆩㿺塳𢶍\"],[\"8ab2\",\"𤗈𠓼𦂗𠽌𠶖啹䂻䎺\"],[\"8abb\",\"䪴𢩦𡂝膪飵𠶜捹㧾𢝵跀嚡摼㹃\"],[\"8ac9\",\"𪘁𠸉𢫏𢳉\"],[\"8ace\",\"𡃈𣧂㦒㨆𨊛㕸𥹉𢃇噒𠼱𢲲𩜠㒼氽𤸻\"],[\"8adf\",\"𧕴𢺋𢈈𪙛𨳍𠹺𠰴𦠜羓𡃏𢠃𢤹㗻𥇣𠺌𠾍𠺪㾓𠼰𠵇𡅏𠹌\"],[\"8af6\",\"𠺫𠮩𠵈𡃀𡄽㿹𢚖搲𠾭\"],[\"8b40\",\"𣏴𧘹𢯎𠵾𠵿𢱑𢱕㨘𠺘𡃇𠼮𪘲𦭐𨳒𨶙𨳊閪哌苄喹\"],[\"8b55\",\"𩻃鰦骶𧝞𢷮煀腭胬尜𦕲脴㞗卟𨂽醶𠻺𠸏𠹷𠻻㗝𤷫㘉𠳖嚯𢞵𡃉𠸐𠹸𡁸𡅈𨈇𡑕𠹹𤹐𢶤婔𡀝𡀞𡃵𡃶垜𠸑\"],[\"8ba1\",\"𧚔𨋍𠾵𠹻𥅾㜃𠾶𡆀𥋘𪊽𤧚𡠺𤅷𨉼墙剨㘚𥜽箲孨䠀䬬鼧䧧鰟鮍𥭴𣄽嗻㗲嚉丨夂𡯁屮靑𠂆乛亻㔾尣彑忄㣺扌攵歺氵氺灬爫丬犭𤣩罒礻糹罓𦉪㓁\"],[\"8bde\",\"𦍋耂肀𦘒𦥑卝衤见𧢲讠贝钅镸长门𨸏韦页风飞饣𩠐鱼鸟黄歯龜丷𠂇阝户钢\"],[\"8c40\",\"倻淾𩱳龦㷉袏𤅎灷峵䬠𥇍㕙𥴰愢𨨲辧釶熑朙玺𣊁𪄇㲋𡦀䬐磤琂冮𨜏䀉橣𪊺䈣蘏𠩯稪𩥇𨫪靕灍匤𢁾鏴盙𨧣龧矝亣俰傼丯众龨吴綋墒壐𡶶庒庙忂𢜒斋\"],[\"8ca1\",\"𣏹椙橃𣱣泿\"],[\"8ca7\",\"爀𤔅玌㻛𤨓嬕璹讃𥲤𥚕窓篬糃繬苸薗龩袐龪躹龫迏蕟駠鈡龬𨶹𡐿䁱䊢娚\"],[\"8cc9\",\"顨杫䉶圽\"],[\"8cce\",\"藖𤥻芿𧄍䲁𦵴嵻𦬕𦾾龭龮宖龯曧繛湗秊㶈䓃𣉖𢞖䎚䔶\"],[\"8ce6\",\"峕𣬚諹屸㴒𣕑嵸龲煗䕘𤃬𡸣䱷㥸㑊𠆤𦱁諌侴𠈹妿腬顖𩣺弻\"],[\"8d40\",\"𠮟\"],[\"8d42\",\"𢇁𨥭䄂䚻𩁹㼇龳𪆵䃸㟖䛷𦱆䅼𨚲𧏿䕭㣔𥒚䕡䔛䶉䱻䵶䗪㿈𤬏㙡䓞䒽䇭崾嵈嵖㷼㠏嶤嶹㠠㠸幂庽弥徃㤈㤔㤿㥍惗愽峥㦉憷憹懏㦸戬抐拥挘㧸嚱\"],[\"8da1\",\"㨃揢揻搇摚㩋擀崕嘡龟㪗斆㪽旿晓㫲暒㬢朖㭂枤栀㭘桊梄㭲㭱㭻椉楃牜楤榟榅㮼槖㯝橥橴橱檂㯬檙㯲檫檵櫔櫶殁毁毪汵沪㳋洂洆洦涁㳯涤涱渕渘温溆𨧀溻滢滚齿滨滩漤漴㵆𣽁澁澾㵪㵵熷岙㶊瀬㶑灐灔灯灿炉𠌥䏁㗱𠻘\"],[\"8e40\",\"𣻗垾𦻓焾𥟠㙎榢𨯩孴穉𥣡𩓙穥穽𥦬窻窰竂竃燑𦒍䇊竚竝竪䇯咲𥰁笋筕笩𥌎𥳾箢筯莜𥮴𦱿篐萡箒箸𥴠㶭𥱥蒒篺簆簵𥳁籄粃𤢂粦晽𤕸糉糇糦籴糳糵糎\"],[\"8ea1\",\"繧䔝𦹄絝𦻖璍綉綫焵綳緒𤁗𦀩緤㴓緵𡟹緥𨍭縝𦄡𦅚繮纒䌫鑬縧罀罁罇礶𦋐駡羗𦍑羣𡙡𠁨䕜𣝦䔃𨌺翺𦒉者耈耝耨耯𪂇𦳃耻耼聡𢜔䦉𦘦𣷣𦛨朥肧𨩈脇脚墰𢛶汿𦒘𤾸擧𡒊舘𡡞橓𤩥𤪕䑺舩𠬍𦩒𣵾俹𡓽蓢荢𦬊𤦧𣔰𡝳𣷸芪椛芳䇛\"],[\"8f40\",\"蕋苐茚𠸖𡞴㛁𣅽𣕚艻苢茘𣺋𦶣𦬅𦮗𣗎㶿茝嗬莅䔋𦶥莬菁菓㑾𦻔橗蕚㒖𦹂𢻯葘𥯤葱㷓䓤檧葊𣲵祘蒨𦮖𦹷𦹃蓞萏莑䒠蒓蓤𥲑䉀𥳀䕃蔴嫲𦺙䔧蕳䔖枿蘖\"],[\"8fa1\",\"𨘥𨘻藁𧂈蘂𡖂𧃍䕫䕪蘨㙈𡢢号𧎚虾蝱𪃸蟮𢰧螱蟚蠏噡虬桖䘏衅衆𧗠𣶹𧗤衞袜䙛袴袵揁装睷𧜏覇覊覦覩覧覼𨨥觧𧤤𧪽誜瞓釾誐𧩙竩𧬺𣾏䜓𧬸煼謌謟𥐰𥕥謿譌譍誩𤩺讐讛誯𡛟䘕衏貛𧵔𧶏貫㜥𧵓賖𧶘𧶽贒贃𡤐賛灜贑𤳉㻐起\"],[\"9040\",\"趩𨀂𡀔𤦊㭼𨆼𧄌竧躭躶軃鋔輙輭𨍥𨐒辥錃𪊟𠩐辳䤪𨧞𨔽𣶻廸𣉢迹𪀔𨚼𨔁𢌥㦀𦻗逷𨔼𧪾遡𨕬𨘋邨𨜓郄𨛦邮都酧㫰醩釄粬𨤳𡺉鈎沟鉁鉢𥖹銹𨫆𣲛𨬌𥗛\"],[\"90a1\",\"𠴱錬鍫𨫡𨯫炏嫃𨫢𨫥䥥鉄𨯬𨰹𨯿鍳鑛躼閅閦鐦閠濶䊹𢙺𨛘𡉼𣸮䧟氜陻隖䅬隣𦻕懚隶磵𨫠隽双䦡𦲸𠉴𦐐𩂯𩃥𤫑𡤕𣌊霱虂霶䨏䔽䖅𤫩灵孁霛靜𩇕靗孊𩇫靟鐥僐𣂷𣂼鞉鞟鞱鞾韀韒韠𥑬韮琜𩐳響韵𩐝𧥺䫑頴頳顋顦㬎𧅵㵑𠘰𤅜\"],[\"9140\",\"𥜆飊颷飈飇䫿𦴧𡛓喰飡飦飬鍸餹𤨩䭲𩡗𩤅駵騌騻騐驘𥜥㛄𩂱𩯕髠髢𩬅髴䰎鬔鬭𨘀倴鬴𦦨㣃𣁽魐魀𩴾婅𡡣鮎𤉋鰂鯿鰌𩹨鷔𩾷𪆒𪆫𪃡𪄣𪇟鵾鶃𪄴鸎梈\"],[\"91a1\",\"鷄𢅛𪆓𪈠𡤻𪈳鴹𪂹𪊴麐麕麞麢䴴麪麯𤍤黁㭠㧥㴝伲㞾𨰫鼂鼈䮖鐤𦶢鼗鼖鼹嚟嚊齅馸𩂋韲葿齢齩竜龎爖䮾𤥵𤦻煷𤧸𤍈𤩑玞𨯚𡣺禟𨥾𨸶鍩鏳𨩄鋬鎁鏋𨥬𤒹爗㻫睲穃烐𤑳𤏸煾𡟯炣𡢾𣖙㻇𡢅𥐯𡟸㜢𡛻𡠹㛡𡝴𡣑𥽋㜣𡛀坛𤨥𡏾𡊨\"],[\"9240\",\"𡏆𡒶蔃𣚦蔃葕𤦔𧅥𣸱𥕜𣻻𧁒䓴𣛮𩦝𦼦柹㜳㰕㷧塬𡤢栐䁗𣜿𤃡𤂋𤄏𦰡哋嚞𦚱嚒𠿟𠮨𠸍鏆𨬓鎜仸儫㠙𤐶亼𠑥𠍿佋侊𥙑婨𠆫𠏋㦙𠌊𠐔㐵伩𠋀𨺳𠉵諚𠈌亘\"],[\"92a1\",\"働儍侢伃𤨎𣺊佂倮偬傁俌俥偘僼兙兛兝兞湶𣖕𣸹𣺿浲𡢄𣺉冨凃𠗠䓝𠒣𠒒𠒑赺𨪜𠜎剙劤𠡳勡鍮䙺熌𤎌𠰠𤦬𡃤槑𠸝瑹㻞璙琔瑖玘䮎𤪼𤂍叐㖄爏𤃉喴𠍅响𠯆圝鉝雴鍦埝垍坿㘾壋媙𨩆𡛺𡝯𡜐娬妸銏婾嫏娒𥥆𡧳𡡡𤊕㛵洅瑃娡𥺃\"],[\"9340\",\"媁𨯗𠐓鏠璌𡌃焅䥲鐈𨧻鎽㞠尞岞幞幈𡦖𡥼𣫮廍孏𡤃𡤄㜁𡢠㛝𡛾㛓脪𨩇𡶺𣑲𨦨弌弎𡤧𡞫婫𡜻孄蘔𧗽衠恾𢡠𢘫忛㺸𢖯𢖾𩂈𦽳懀𠀾𠁆𢘛憙憘恵𢲛𢴇𤛔𩅍\"],[\"93a1\",\"摱𤙥𢭪㨩𢬢𣑐𩣪𢹸挷𪑛撶挱揑𤧣𢵧护𢲡搻敫楲㯴𣂎𣊭𤦉𣊫唍𣋠𡣙𩐿曎𣊉𣆳㫠䆐𥖄𨬢𥖏𡛼𥕛𥐥磮𣄃𡠪𣈴㑤𣈏𣆂𤋉暎𦴤晫䮓昰𧡰𡷫晣𣋒𣋡昞𥡲㣑𣠺𣞼㮙𣞢𣏾瓐㮖枏𤘪梶栞㯄檾㡣𣟕𤒇樳橒櫉欅𡤒攑梘橌㯗橺歗𣿀𣲚鎠鋲𨯪𨫋\"],[\"9440\",\"銉𨀞𨧜鑧涥漋𤧬浧𣽿㶏渄𤀼娽渊塇洤硂焻𤌚𤉶烱牐犇犔𤞏𤜥兹𤪤𠗫瑺𣻸𣙟𤩊𤤗𥿡㼆㺱𤫟𨰣𣼵悧㻳瓌琼鎇琷䒟𦷪䕑疃㽣𤳙𤴆㽘畕癳𪗆㬙瑨𨫌𤦫𤦎㫻\"],[\"94a1\",\"㷍𤩎㻿𤧅𤣳釺圲鍂𨫣𡡤僟𥈡𥇧睸𣈲眎眏睻𤚗𣞁㩞𤣰琸璛㺿𤪺𤫇䃈𤪖𦆮錇𥖁砞碍碈磒珐祙𧝁𥛣䄎禛蒖禥樭𣻺稺秴䅮𡛦䄲鈵秱𠵌𤦌𠊙𣶺𡝮㖗啫㕰㚪𠇔𠰍竢婙𢛵𥪯𥪜娍𠉛磰娪𥯆竾䇹籝籭䈑𥮳𥺼𥺦糍𤧹𡞰粎籼粮檲緜縇緓罎𦉡\"],[\"9540\",\"𦅜𧭈綗𥺂䉪𦭵𠤖柖𠁎𣗏埄𦐒𦏸𤥢翝笧𠠬𥫩𥵃笌𥸎駦虅驣樜𣐿㧢𤧷𦖭騟𦖠蒀𧄧𦳑䓪脷䐂胆脉腂𦞴飃𦩂艢艥𦩑葓𦶧蘐𧈛媆䅿𡡀嬫𡢡嫤𡣘蚠蜨𣶏蠭𧐢娂\"],[\"95a1\",\"衮佅袇袿裦襥襍𥚃襔𧞅𧞄𨯵𨯙𨮜𨧹㺭蒣䛵䛏㟲訽訜𩑈彍鈫𤊄旔焩烄𡡅鵭貟賩𧷜妚矃姰䍮㛔踪躧𤰉輰轊䋴汘澻𢌡䢛潹溋𡟚鯩㚵𤤯邻邗啱䤆醻鐄𨩋䁢𨫼鐧𨰝𨰻蓥訫閙閧閗閖𨴴瑅㻂𤣿𤩂𤏪㻧𣈥随𨻧𨹦𨹥㻌𤧭𤩸𣿮琒瑫㻼靁𩂰\"],[\"9640\",\"桇䨝𩂓𥟟靝鍨𨦉𨰦𨬯𦎾銺嬑譩䤼珹𤈛鞛靱餸𠼦巁𨯅𤪲頟𩓚鋶𩗗釥䓀𨭐𤩧𨭤飜𨩅㼀鈪䤥萔餻饍𧬆㷽馛䭯馪驜𨭥𥣈檏騡嫾騯𩣱䮐𩥈馼䮽䮗鍽塲𡌂堢𤦸\"],[\"96a1\",\"𡓨硄𢜟𣶸棅㵽鑘㤧慐𢞁𢥫愇鱏鱓鱻鰵鰐魿鯏𩸭鮟𪇵𪃾鴡䲮𤄄鸘䲰鴌𪆴𪃭𪃳𩤯鶥蒽𦸒𦿟𦮂藼䔳𦶤𦺄𦷰萠藮𦸀𣟗𦁤秢𣖜𣙀䤭𤧞㵢鏛銾鍈𠊿碹鉷鑍俤㑀遤𥕝砽硔碶硋𡝗𣇉𤥁㚚佲濚濙瀞瀞吔𤆵垻壳垊鴖埗焴㒯𤆬燫𦱀𤾗嬨𡞵𨩉\"],[\"9740\",\"愌嫎娋䊼𤒈㜬䭻𨧼鎻鎸𡣖𠼝葲𦳀𡐓𤋺𢰦𤏁妔𣶷𦝁綨𦅛𦂤𤦹𤦋𨧺鋥珢㻩璴𨭣𡢟㻡𤪳櫘珳珻㻖𤨾𤪔𡟙𤩦𠎧𡐤𤧥瑈𤤖炥𤥶銄珦鍟𠓾錱𨫎𨨖鎆𨯧𥗕䤵𨪂煫\"],[\"97a1\",\"𤥃𠳿嚤𠘚𠯫𠲸唂秄𡟺緾𡛂𤩐𡡒䔮鐁㜊𨫀𤦭妰𡢿𡢃𧒄媡㛢𣵛㚰鉟婹𨪁𡡢鍴㳍𠪴䪖㦊僴㵩㵌𡎜煵䋻𨈘渏𩃤䓫浗𧹏灧沯㳖𣿭𣸭渂漌㵯𠏵畑㚼㓈䚀㻚䡱姄鉮䤾轁𨰜𦯀堒埈㛖𡑒烾𤍢𤩱𢿣𡊰𢎽梹楧𡎘𣓥𧯴𣛟𨪃𣟖𣏺𤲟樚𣚭𦲷萾䓟䓎\"],[\"9840\",\"𦴦𦵑𦲂𦿞漗𧄉茽𡜺菭𦲀𧁓𡟛妉媂𡞳婡婱𡤅𤇼㜭姯𡜼㛇熎鎐暚𤊥婮娫𤊓樫𣻹𧜶𤑛𤋊焝𤉙𨧡侰𦴨峂𤓎𧹍𤎽樌𤉖𡌄炦焳𤏩㶥泟勇𤩏繥姫崯㷳彜𤩝𡟟綤萦\"],[\"98a1\",\"咅𣫺𣌀𠈔坾𠣕𠘙㿥𡾞𪊶瀃𩅛嵰玏糓𨩙𩐠俈翧狍猐𧫴猸猹𥛶獁獈㺩𧬘遬燵𤣲珡臶㻊県㻑沢国琙琞琟㻢㻰㻴㻺瓓㼎㽓畂畭畲疍㽼痈痜㿀癍㿗癴㿜発𤽜熈嘣覀塩䀝睃䀹条䁅㗛瞘䁪䁯属瞾矋売砘点砜䂨砹硇硑硦葈𥔵礳栃礲䄃\"],[\"9940\",\"䄉禑禙辻稆込䅧窑䆲窼艹䇄竏竛䇏両筢筬筻簒簛䉠䉺类粜䊌粸䊔糭输烀𠳏総緔緐緽羮羴犟䎗耠耥笹耮耱联㷌垴炠肷胩䏭脌猪脎脒畠脔䐁㬹腖腙腚\"],[\"99a1\",\"䐓堺腼膄䐥膓䐭膥埯臁臤艔䒏芦艶苊苘苿䒰荗险榊萅烵葤惣蒈䔄蒾蓡蓸蔐蔸蕒䔻蕯蕰藠䕷虲蚒蚲蛯际螋䘆䘗袮裿褤襇覑𧥧訩訸誔誴豑賔賲贜䞘塟跃䟭仮踺嗘坔蹱嗵躰䠷軎転軤軭軲辷迁迊迌逳駄䢭飠鈓䤞鈨鉘鉫銱銮銿\"],[\"9a40\",\"鋣鋫鋳鋴鋽鍃鎄鎭䥅䥑麿鐗匁鐝鐭鐾䥪鑔鑹锭関䦧间阳䧥枠䨤靀䨵鞲韂噔䫤惨颹䬙飱塄餎餙冴餜餷饂饝饢䭰駅䮝騼鬏窃魩鮁鯝鯱鯴䱭鰠㝯𡯂鵉鰺\"],[\"9aa1\",\"黾噐鶓鶽鷀鷼银辶鹻麬麱麽黆铜黢黱黸竈齄𠂔𠊷𠎠椚铃妬𠓗塀铁㞹𠗕𠘕𠙶𡚺块煳𠫂𠫍𠮿呪吆𠯋咞𠯻𠰻𠱓𠱥𠱼惧𠲍噺𠲵𠳝𠳭𠵯𠶲𠷈楕鰯螥𠸄𠸎𠻗𠾐𠼭𠹳尠𠾼帋𡁜𡁏𡁶朞𡁻𡂈𡂖㙇𡂿𡃓𡄯𡄻卤蒭𡋣𡍵𡌶讁𡕷𡘙𡟃𡟇乸炻𡠭𡥪\"],[\"9b40\",\"𡨭𡩅𡰪𡱰𡲬𡻈拃𡻕𡼕熘桕𢁅槩㛈𢉼𢏗𢏺𢜪𢡱𢥏苽𢥧𢦓𢫕覥𢫨辠𢬎鞸𢬿顇骽𢱌\"],[\"9b62\",\"𢲈𢲷𥯨𢴈𢴒𢶷𢶕𢹂𢽴𢿌𣀳𣁦𣌟𣏞徱晈暿𧩹𣕧𣗳爁𤦺矗𣘚𣜖纇𠍆墵朎\"],[\"9ba1\",\"椘𣪧𧙗𥿢𣸑𣺹𧗾𢂚䣐䪸𤄙𨪚𤋮𤌍𤀻𤌴𤎖𤩅𠗊凒𠘑妟𡺨㮾𣳿𤐄𤓖垈𤙴㦛𤜯𨗨𩧉㝢𢇃譞𨭎駖𤠒𤣻𤨕爉𤫀𠱸奥𤺥𤾆𠝹軚𥀬劏圿煱𥊙𥐙𣽊𤪧喼𥑆𥑮𦭒釔㑳𥔿𧘲𥕞䜘𥕢𥕦𥟇𤤿𥡝偦㓻𣏌惞𥤃䝼𨥈𥪮𥮉𥰆𡶐垡煑澶𦄂𧰒遖𦆲𤾚譢𦐂𦑊\"],[\"9c40\",\"嵛𦯷輶𦒄𡤜諪𤧶𦒈𣿯𦔒䯀𦖿𦚵𢜛鑥𥟡憕娧晉侻嚹𤔡𦛼乪𤤴陖涏𦲽㘘襷𦞙𦡮𦐑𦡞營𦣇筂𩃀𠨑𦤦鄄𦤹穅鷰𦧺騦𦨭㙟𦑩𠀡禃𦨴𦭛崬𣔙菏𦮝䛐𦲤画补𦶮墶\"],[\"9ca1\",\"㜜𢖍𧁋𧇍㱔𧊀𧊅銁𢅺𧊋錰𧋦𤧐氹钟𧑐𠻸蠧裵𢤦𨑳𡞱溸𤨪𡠠㦤㚹尐秣䔿暶𩲭𩢤襃𧟌𧡘囖䃟𡘊㦡𣜯𨃨𡏅熭荦𧧝𩆨婧䲷𧂯𨦫𧧽𧨊𧬋𧵦𤅺筃祾𨀉澵𪋟樃𨌘厢𦸇鎿栶靝𨅯𨀣𦦵𡏭𣈯𨁈嶅𨰰𨂃圕頣𨥉嶫𤦈斾槕叒𤪥𣾁㰑朶𨂐𨃴𨄮𡾡𨅏\"],[\"9d40\",\"𨆉𨆯𨈚𨌆𨌯𨎊㗊𨑨𨚪䣺揦𨥖砈鉕𨦸䏲𨧧䏟𨧨𨭆𨯔姸𨰉輋𨿅𩃬筑𩄐𩄼㷷𩅞𤫊运犏嚋𩓧𩗩𩖰𩖸𩜲𩣑𩥉𩥪𩧃𩨨𩬎𩵚𩶛纟𩻸𩼣䲤镇𪊓熢𪋿䶑递𪗋䶜𠲜达嗁\"],[\"9da1\",\"辺𢒰边𤪓䔉繿潖檱仪㓤𨬬𧢝㜺躀𡟵𨀤𨭬𨮙𧨾𦚯㷫𧙕𣲷𥘵𥥖亚𥺁𦉘嚿𠹭踎孭𣺈𤲞揞拐𡟶𡡻攰嘭𥱊吚𥌑㷆𩶘䱽嘢嘞罉𥻘奵𣵀蝰东𠿪𠵉𣚺脗鵞贘瘻鱅癎瞹鍅吲腈苷嘥脲萘肽嗪祢噃吖𠺝㗎嘅嗱曱𨋢㘭甴嗰喺咗啲𠱁𠲖廐𥅈𠹶𢱢\"],[\"9e40\",\"𠺢麫絚嗞𡁵抝靭咔賍燶酶揼掹揾啩𢭃鱲𢺳冚㓟𠶧冧呍唞唓癦踭𦢊疱肶蠄螆裇膶萜𡃁䓬猄𤜆宐茋𦢓噻𢛴𧴯𤆣𧵳𦻐𧊶酰𡇙鈈𣳼𪚩𠺬𠻹牦𡲢䝎𤿂𧿹𠿫䃺\"],[\"9ea1\",\"鱝攟𢶠䣳𤟠𩵼𠿬𠸊恢𧖣𠿭\"],[\"9ead\",\"𦁈𡆇熣纎鵐业丄㕷嬍沲卧㚬㧜卽㚥𤘘墚𤭮舭呋垪𥪕𠥹\"],[\"9ec5\",\"㩒𢑥獴𩺬䴉鯭𣳾𩼰䱛𤾩𩖞𩿞葜𣶶𧊲𦞳𣜠挮紥𣻷𣸬㨪逈勌㹴㙺䗩𠒎癀嫰𠺶硺𧼮墧䂿噼鮋嵴癔𪐴麅䳡痹㟻愙𣃚𤏲\"],[\"9ef5\",\"噝𡊩垧𤥣𩸆刴𧂮㖭汊鵼\"],[\"9f40\",\"籖鬹埞𡝬屓擓𩓐𦌵𧅤蚭𠴨𦴢𤫢𠵱\"],[\"9f4f\",\"凾𡼏嶎霃𡷑麁遌笟鬂峑箣扨挵髿篏鬪籾鬮籂粆鰕篼鬉鼗鰛𤤾齚啳寃俽麘俲剠㸆勑坧偖妷帒韈鶫轜呩鞴饀鞺匬愰\"],[\"9fa1\",\"椬叚鰊鴂䰻陁榀傦畆𡝭駚剳\"],[\"9fae\",\"酙隁酜\"],[\"9fb2\",\"酑𨺗捿𦴣櫊嘑醎畺抅𠏼獏籰𥰡𣳽\"],[\"9fc1\",\"𤤙盖鮝个𠳔莾衂\"],[\"9fc9\",\"届槀僭坺刟巵从氱𠇲伹咜哚劚趂㗾弌㗳\"],[\"9fdb\",\"歒酼龥鮗頮颴骺麨麄煺笔\"],[\"9fe7\",\"毺蠘罸\"],[\"9feb\",\"嘠𪙊蹷齓\"],[\"9ff0\",\"跔蹏鸜踁抂𨍽踨蹵竓𤩷稾磘泪詧瘇\"],[\"a040\",\"𨩚鼦泎蟖痃𪊲硓咢贌狢獱謭猂瓱賫𤪻蘯徺袠䒷\"],[\"a055\",\"𡠻𦸅\"],[\"a058\",\"詾𢔛\"],[\"a05b\",\"惽癧髗鵄鍮鮏蟵\"],[\"a063\",\"蠏賷猬霡鮰㗖犲䰇籑饊𦅙慙䰄麖慽\"],[\"a073\",\"坟慯抦戹拎㩜懢厪𣏵捤栂㗒\"],[\"a0a1\",\"嵗𨯂迚𨸹\"],[\"a0a6\",\"僙𡵆礆匲阸𠼻䁥\"],[\"a0ae\",\"矾\"],[\"a0b0\",\"糂𥼚糚稭聦聣絍甅瓲覔舚朌聢𧒆聛瓰脃眤覉𦟌畓𦻑螩蟎臈螌詉貭譃眫瓸蓚㘵榲趦\"],[\"a0d4\",\"覩瑨涹蟁𤀑瓧㷛煶悤憜㳑煢恷\"],[\"a0e2\",\"罱𨬭牐惩䭾删㰘𣳇𥻗𧙖𥔱𡥄𡋾𩤃𦷜𧂭峁𦆭𨨏𣙷𠃮𦡆𤼎䕢嬟𦍌齐麦𦉫\"],[\"a3c0\",\"␀\",31,\"␡\"],[\"c6a1\",\"①\",9,\"⑴\",9,\"ⅰ\",9,\"丶丿亅亠冂冖冫勹匸卩厶夊宀巛⼳广廴彐彡攴无疒癶辵隶¨ˆヽヾゝゞ〃仝々〆〇ー［］✽ぁ\",23],[\"c740\",\"す\",58,\"ァアィイ\"],[\"c7a1\",\"ゥ\",81,\"А\",5,\"ЁЖ\",4],[\"c840\",\"Л\",26,\"ёж\",25,\"⇧↸↹㇏𠃌乚𠂊刂䒑\"],[\"c8a1\",\"龰冈龱𧘇\"],[\"c8cd\",\"￢￤＇＂㈱№℡゛゜⺀⺄⺆⺇⺈⺊⺌⺍⺕⺜⺝⺥⺧⺪⺬⺮⺶⺼⺾⻆⻊⻌⻍⻏⻖⻗⻞⻣\"],[\"c8f5\",\"ʃɐɛɔɵœøŋʊɪ\"],[\"f9fe\",\"￭\"],[\"fa40\",\"𠕇鋛𠗟𣿅蕌䊵珯况㙉𤥂𨧤鍄𡧛苮𣳈砼杄拟𤤳𨦪𠊠𦮳𡌅侫𢓭倈𦴩𧪄𣘀𤪱𢔓倩𠍾徤𠎀𠍇滛𠐟偽儁㑺儎顬㝃萖𤦤𠒇兠𣎴兪𠯿𢃼𠋥𢔰𠖎𣈳𡦃宂蝽𠖳𣲙冲冸\"],[\"faa1\",\"鴴凉减凑㳜凓𤪦决凢卂凭菍椾𣜭彻刋刦刼劵剗劔効勅簕蕂勠蘍𦬓包𨫞啉滙𣾀𠥔𣿬匳卄𠯢泋𡜦栛珕恊㺪㣌𡛨燝䒢卭却𨚫卾卿𡖖𡘓矦厓𨪛厠厫厮玧𥝲㽙玜叁叅汉义埾叙㪫𠮏叠𣿫𢶣叶𠱷吓灹唫晗浛呭𦭓𠵴啝咏咤䞦𡜍𠻝㶴𠵍\"],[\"fb40\",\"𨦼𢚘啇䳭启琗喆喩嘅𡣗𤀺䕒𤐵暳𡂴嘷曍𣊊暤暭噍噏磱囱鞇叾圀囯园𨭦㘣𡉏坆𤆥汮炋坂㚱𦱾埦𡐖堃𡑔𤍣堦𤯵塜墪㕡壠壜𡈼壻寿坃𪅐𤉸鏓㖡够梦㛃湙\"],[\"fba1\",\"𡘾娤啓𡚒蔅姉𠵎𦲁𦴪𡟜姙𡟻𡞲𦶦浱𡠨𡛕姹𦹅媫婣㛦𤦩婷㜈媖瑥嫓𦾡𢕔㶅𡤑㜲𡚸広勐孶斈孼𧨎䀄䡝𠈄寕慠𡨴𥧌𠖥寳宝䴐尅𡭄尓珎尔𡲥𦬨屉䣝岅峩峯嶋𡷹𡸷崐崘嵆𡺤岺巗苼㠭𤤁𢁉𢅳芇㠶㯂帮檊幵幺𤒼𠳓厦亷廐厨𡝱帉廴𨒂\"],[\"fc40\",\"廹廻㢠廼栾鐛弍𠇁弢㫞䢮𡌺强𦢈𢏐彘𢑱彣鞽𦹮彲鍀𨨶徧嶶㵟𥉐𡽪𧃸𢙨釖𠊞𨨩怱暅𡡷㥣㷇㘹垐𢞴祱㹀悞悤悳𤦂𤦏𧩓璤僡媠慤萤慂慈𦻒憁凴𠙖憇宪𣾷\"],[\"fca1\",\"𢡟懓𨮝𩥝懐㤲𢦀𢣁怣慜攞掋𠄘担𡝰拕𢸍捬𤧟㨗搸揸𡎎𡟼撐澊𢸶頔𤂌𥜝擡擥鑻㩦携㩗敍漖𤨨𤨣斅敭敟𣁾斵𤥀䬷旑䃘𡠩无旣忟𣐀昘𣇷𣇸晄𣆤𣆥晋𠹵晧𥇦晳晴𡸽𣈱𨗴𣇈𥌓矅𢣷馤朂𤎜𤨡㬫槺𣟂杞杧杢𤇍𩃭柗䓩栢湐鈼栁𣏦𦶠桝\"],[\"fd40\",\"𣑯槡樋𨫟楳棃𣗍椁椀㴲㨁𣘼㮀枬楡𨩊䋼椶榘㮡𠏉荣傐槹𣙙𢄪橅𣜃檝㯳枱櫈𩆜㰍欝𠤣惞欵歴𢟍溵𣫛𠎵𡥘㝀吡𣭚毡𣻼毜氷𢒋𤣱𦭑汚舦汹𣶼䓅𣶽𤆤𤤌𤤀\"],[\"fda1\",\"𣳉㛥㳫𠴲鮃𣇹𢒑羏样𦴥𦶡𦷫涖浜湼漄𤥿𤂅𦹲蔳𦽴凇沜渝萮𨬡港𣸯瑓𣾂秌湏媑𣁋濸㜍澝𣸰滺𡒗𤀽䕕鏰潄潜㵎潴𩅰㴻澟𤅄濓𤂑𤅕𤀹𣿰𣾴𤄿凟𤅖𤅗𤅀𦇝灋灾炧炁烌烕烖烟䄄㷨熴熖𤉷焫煅媈煊煮岜𤍥煏鍢𤋁焬𤑚𤨧𤨢熺𨯨炽爎\"],[\"fe40\",\"鑂爕夑鑃爤鍁𥘅爮牀𤥴梽牕牗㹕𣁄栍漽犂猪猫𤠣𨠫䣭𨠄猨献珏玪𠰺𦨮珉瑉𤇢𡛧𤨤昣㛅𤦷𤦍𤧻珷琕椃𤨦琹𠗃㻗瑜𢢭瑠𨺲瑇珤瑶莹瑬㜰瑴鏱樬璂䥓𤪌\"],[\"fea1\",\"𤅟𤩹𨮏孆𨰃𡢞瓈𡦈甎瓩甞𨻙𡩋寗𨺬鎅畍畊畧畮𤾂㼄𤴓疎瑝疞疴瘂瘬癑癏癯癶𦏵皐臯㟸𦤑𦤎皡皥皷盌𦾟葢𥂝𥅽𡸜眞眦着撯𥈠睘𣊬瞯𨥤𨥨𡛁矴砉𡍶𤨒棊碯磇磓隥礮𥗠磗礴碱𧘌辸袄𨬫𦂃𢘜禆褀椂禀𥡗禝𧬹礼禩渪𧄦㺨秆𩄍秔\"]]");
      /***/
    },
    /* 405 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var Buffer = __webpack_require__(39).Buffer; // NOTE: Due to 'stream' module being pretty large (~100Kb, significant in browser environments), 
      // we opt to dependency-inject it instead of creating a hard dependency.


      module.exports = function (stream_module) {
        var Transform = stream_module.Transform; // == Encoder stream =======================================================

        function IconvLiteEncoderStream(conv, options) {
          this.conv = conv;
          options = options || {};
          options.decodeStrings = false; // We accept only strings, so we don't need to decode them.

          Transform.call(this, options);
        }

        IconvLiteEncoderStream.prototype = Object.create(Transform.prototype, {
          constructor: {
            value: IconvLiteEncoderStream
          }
        });

        IconvLiteEncoderStream.prototype._transform = function (chunk, encoding, done) {
          if (typeof chunk != 'string') return done(new Error("Iconv encoding stream needs strings as its input."));

          try {
            var res = this.conv.write(chunk);
            if (res && res.length) this.push(res);
            done();
          } catch (e) {
            done(e);
          }
        };

        IconvLiteEncoderStream.prototype._flush = function (done) {
          try {
            var res = this.conv.end();
            if (res && res.length) this.push(res);
            done();
          } catch (e) {
            done(e);
          }
        };

        IconvLiteEncoderStream.prototype.collect = function (cb) {
          var chunks = [];
          this.on('error', cb);
          this.on('data', function (chunk) {
            chunks.push(chunk);
          });
          this.on('end', function () {
            cb(null, Buffer.concat(chunks));
          });
          return this;
        }; // == Decoder stream =======================================================


        function IconvLiteDecoderStream(conv, options) {
          this.conv = conv;
          options = options || {};
          options.encoding = this.encoding = 'utf8'; // We output strings.

          Transform.call(this, options);
        }

        IconvLiteDecoderStream.prototype = Object.create(Transform.prototype, {
          constructor: {
            value: IconvLiteDecoderStream
          }
        });

        IconvLiteDecoderStream.prototype._transform = function (chunk, encoding, done) {
          if (!Buffer.isBuffer(chunk) && !(chunk instanceof Uint8Array)) return done(new Error("Iconv decoding stream needs buffers as its input."));

          try {
            var res = this.conv.write(chunk);
            if (res && res.length) this.push(res, this.encoding);
            done();
          } catch (e) {
            done(e);
          }
        };

        IconvLiteDecoderStream.prototype._flush = function (done) {
          try {
            var res = this.conv.end();
            if (res && res.length) this.push(res, this.encoding);
            done();
          } catch (e) {
            done(e);
          }
        };

        IconvLiteDecoderStream.prototype.collect = function (cb) {
          var res = '';
          this.on('error', cb);
          this.on('data', function (chunk) {
            res += chunk;
          });
          this.on('end', function () {
            cb(null, res);
          });
          return this;
        };

        return {
          IconvLiteEncoderStream: IconvLiteEncoderStream,
          IconvLiteDecoderStream: IconvLiteDecoderStream
        };
      };
      /***/

    },
    /* 406 */

    /***/
    function (module, exports) {
      /* (ignored) */

      /***/
    },
    /* 407 */

    /***/
    function (module, exports, __webpack_require__) {
      // Generated by CoffeeScript 1.7.1
      (function () {
        var ArrayT,
            LazyArray,
            LazyArrayT,
            NumberT,
            inspect,
            utils,
            __hasProp = {}.hasOwnProperty,
            __extends = function __extends(child, parent) {
          for (var key in parent) {
            if (__hasProp.call(parent, key)) child[key] = parent[key];
          }

          function ctor() {
            this.constructor = child;
          }

          ctor.prototype = parent.prototype;
          child.prototype = new ctor();
          child.__super__ = parent.prototype;
          return child;
        };

        ArrayT = __webpack_require__(252);
        NumberT = __webpack_require__(89).Number;
        utils = __webpack_require__(40);
        inspect = __webpack_require__(166).inspect;

        LazyArrayT = function (_super) {
          __extends(LazyArrayT, _super);

          function LazyArrayT() {
            return LazyArrayT.__super__.constructor.apply(this, arguments);
          }

          LazyArrayT.prototype.decode = function (stream, parent) {
            var length, pos, res;
            pos = stream.pos;
            length = utils.resolveLength(this.length, stream, parent);

            if (this.length instanceof NumberT) {
              parent = {
                parent: parent,
                _startOffset: pos,
                _currentOffset: 0,
                _length: length
              };
            }

            res = new LazyArray(this.type, length, stream, parent);
            stream.pos += length * this.type.size(null, parent);
            return res;
          };

          LazyArrayT.prototype.size = function (val, ctx) {
            if (val instanceof LazyArray) {
              val = val.toArray();
            }

            return LazyArrayT.__super__.size.call(this, val, ctx);
          };

          LazyArrayT.prototype.encode = function (stream, val, ctx) {
            if (val instanceof LazyArray) {
              val = val.toArray();
            }

            return LazyArrayT.__super__.encode.call(this, stream, val, ctx);
          };

          return LazyArrayT;
        }(ArrayT);

        LazyArray = function () {
          function LazyArray(type, length, stream, ctx) {
            this.type = type;
            this.length = length;
            this.stream = stream;
            this.ctx = ctx;
            this.base = this.stream.pos;
            this.items = [];
          }

          LazyArray.prototype.get = function (index) {
            var pos;

            if (index < 0 || index >= this.length) {
              return void 0;
            }

            if (this.items[index] == null) {
              pos = this.stream.pos;
              this.stream.pos = this.base + this.type.size(null, this.ctx) * index;
              this.items[index] = this.type.decode(this.stream, this.ctx);
              this.stream.pos = pos;
            }

            return this.items[index];
          };

          LazyArray.prototype.toArray = function () {
            var i, _i, _ref, _results;

            _results = [];

            for (i = _i = 0, _ref = this.length; _i < _ref; i = _i += 1) {
              _results.push(this.get(i));
            }

            return _results;
          };

          LazyArray.prototype.inspect = function () {
            return inspect(this.toArray());
          };

          return LazyArray;
        }();

        module.exports = LazyArrayT;
      }).call(this);
      /***/
    },
    /* 408 */

    /***/
    function (module, exports) {
      // Generated by CoffeeScript 1.7.1
      (function () {
        var Bitfield;

        Bitfield = function () {
          function Bitfield(type, flags) {
            this.type = type;
            this.flags = flags != null ? flags : [];
          }

          Bitfield.prototype.decode = function (stream) {
            var flag, i, res, val, _i, _len, _ref;

            val = this.type.decode(stream);
            res = {};
            _ref = this.flags;

            for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
              flag = _ref[i];

              if (flag != null) {
                res[flag] = !!(val & 1 << i);
              }
            }

            return res;
          };

          Bitfield.prototype.size = function () {
            return this.type.size();
          };

          Bitfield.prototype.encode = function (stream, keys) {
            var flag, i, val, _i, _len, _ref;

            val = 0;
            _ref = this.flags;

            for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
              flag = _ref[i];

              if (flag != null) {
                if (keys[flag]) {
                  val |= 1 << i;
                }
              }
            }

            return this.type.encode(stream, val);
          };

          return Bitfield;
        }();

        module.exports = Bitfield;
      }).call(this);
      /***/
    },
    /* 409 */

    /***/
    function (module, exports) {
      // Generated by CoffeeScript 1.7.1
      (function () {
        var BooleanT;

        BooleanT = function () {
          function BooleanT(type) {
            this.type = type;
          }

          BooleanT.prototype.decode = function (stream, parent) {
            return !!this.type.decode(stream, parent);
          };

          BooleanT.prototype.size = function (val, parent) {
            return this.type.size(val, parent);
          };

          BooleanT.prototype.encode = function (stream, val, parent) {
            return this.type.encode(stream, +val, parent);
          };

          return BooleanT;
        }();

        module.exports = BooleanT;
      }).call(this);
      /***/
    },
    /* 410 */

    /***/
    function (module, exports, __webpack_require__) {
      // Generated by CoffeeScript 1.7.1
      (function () {
        var BufferT, NumberT, utils;
        utils = __webpack_require__(40);
        NumberT = __webpack_require__(89).Number;

        BufferT = function () {
          function BufferT(length) {
            this.length = length;
          }

          BufferT.prototype.decode = function (stream, parent) {
            var length;
            length = utils.resolveLength(this.length, stream, parent);
            return stream.readBuffer(length);
          };

          BufferT.prototype.size = function (val, parent) {
            if (!val) {
              return utils.resolveLength(this.length, null, parent);
            }

            return val.length;
          };

          BufferT.prototype.encode = function (stream, buf, parent) {
            if (this.length instanceof NumberT) {
              this.length.encode(stream, buf.length);
            }

            return stream.writeBuffer(buf);
          };

          return BufferT;
        }();

        module.exports = BufferT;
      }).call(this);
      /***/
    },
    /* 411 */

    /***/
    function (module, exports) {
      // Generated by CoffeeScript 1.7.1
      (function () {
        var Enum;

        Enum = function () {
          function Enum(type, options) {
            this.type = type;
            this.options = options != null ? options : [];
          }

          Enum.prototype.decode = function (stream) {
            var index;
            index = this.type.decode(stream);
            return this.options[index] || index;
          };

          Enum.prototype.size = function () {
            return this.type.size();
          };

          Enum.prototype.encode = function (stream, val) {
            var index;
            index = this.options.indexOf(val);

            if (index === -1) {
              throw new Error("Unknown option in enum: " + val);
            }

            return this.type.encode(stream, index);
          };

          return Enum;
        }();

        module.exports = Enum;
      }).call(this);
      /***/
    },
    /* 412 */

    /***/
    function (module, exports) {
      // Generated by CoffeeScript 1.7.1
      (function () {
        var Optional;

        Optional = function () {
          function Optional(type, condition) {
            this.type = type;
            this.condition = condition != null ? condition : true;
          }

          Optional.prototype.decode = function (stream, parent) {
            var condition;
            condition = this.condition;

            if (typeof condition === 'function') {
              condition = condition.call(parent, parent);
            }

            if (condition) {
              return this.type.decode(stream, parent);
            }
          };

          Optional.prototype.size = function (val, parent) {
            var condition;
            condition = this.condition;

            if (typeof condition === 'function') {
              condition = condition.call(parent, parent);
            }

            if (condition) {
              return this.type.size(val, parent);
            } else {
              return 0;
            }
          };

          Optional.prototype.encode = function (stream, val, parent) {
            var condition;
            condition = this.condition;

            if (typeof condition === 'function') {
              condition = condition.call(parent, parent);
            }

            if (condition) {
              return this.type.encode(stream, val, parent);
            }
          };

          return Optional;
        }();

        module.exports = Optional;
      }).call(this);
      /***/
    },
    /* 413 */

    /***/
    function (module, exports, __webpack_require__) {
      // Generated by CoffeeScript 1.7.1
      (function () {
        var Reserved, utils;
        utils = __webpack_require__(40);

        Reserved = function () {
          function Reserved(type, count) {
            this.type = type;
            this.count = count != null ? count : 1;
          }

          Reserved.prototype.decode = function (stream, parent) {
            stream.pos += this.size(null, parent);
            return void 0;
          };

          Reserved.prototype.size = function (data, parent) {
            var count;
            count = utils.resolveLength(this.count, null, parent);
            return this.type.size() * count;
          };

          Reserved.prototype.encode = function (stream, val, parent) {
            return stream.fill(0, this.size(val, parent));
          };

          return Reserved;
        }();

        module.exports = Reserved;
      }).call(this);
      /***/
    },
    /* 414 */

    /***/
    function (module, exports, __webpack_require__) {
      /* WEBPACK VAR INJECTION */
      (function (Buffer) {
        // Generated by CoffeeScript 1.7.1
        (function () {
          var NumberT, StringT, utils;
          NumberT = __webpack_require__(89).Number;
          utils = __webpack_require__(40);

          StringT = function () {
            function StringT(length, encoding) {
              this.length = length;
              this.encoding = encoding != null ? encoding : 'ascii';
            }

            StringT.prototype.decode = function (stream, parent) {
              var buffer, encoding, length, pos, string;

              length = function () {
                if (this.length != null) {
                  return utils.resolveLength(this.length, stream, parent);
                } else {
                  buffer = stream.buffer, length = stream.length, pos = stream.pos;

                  while (pos < length && buffer[pos] !== 0x00) {
                    ++pos;
                  }

                  return pos - stream.pos;
                }
              }.call(this);

              encoding = this.encoding;

              if (typeof encoding === 'function') {
                encoding = encoding.call(parent, parent) || 'ascii';
              }

              string = stream.readString(length, encoding);

              if (this.length == null && stream.pos < stream.length) {
                stream.pos++;
              }

              return string;
            };

            StringT.prototype.size = function (val, parent) {
              var encoding, size;

              if (!val) {
                return utils.resolveLength(this.length, null, parent);
              }

              encoding = this.encoding;

              if (typeof encoding === 'function') {
                encoding = encoding.call(parent != null ? parent.val : void 0, parent != null ? parent.val : void 0) || 'ascii';
              }

              if (encoding === 'utf16be') {
                encoding = 'utf16le';
              }

              size = Buffer.byteLength(val, encoding);

              if (this.length instanceof NumberT) {
                size += this.length.size();
              }

              if (this.length == null) {
                size++;
              }

              return size;
            };

            StringT.prototype.encode = function (stream, val, parent) {
              var encoding;
              encoding = this.encoding;

              if (typeof encoding === 'function') {
                encoding = encoding.call(parent != null ? parent.val : void 0, parent != null ? parent.val : void 0) || 'ascii';
              }

              if (this.length instanceof NumberT) {
                this.length.encode(stream, Buffer.byteLength(val, encoding));
              }

              stream.writeString(val, encoding);

              if (this.length == null) {
                return stream.writeUInt8(0x00);
              }
            };

            return StringT;
          }();

          module.exports = StringT;
        }).call(this);
        /* WEBPACK VAR INJECTION */
      }).call(this, __webpack_require__(10).Buffer);
      /***/
    },
    /* 415 */

    /***/
    function (module, exports, __webpack_require__) {
      // Generated by CoffeeScript 1.7.1
      (function () {
        var Struct,
            VersionedStruct,
            __hasProp = {}.hasOwnProperty,
            __extends = function __extends(child, parent) {
          for (var key in parent) {
            if (__hasProp.call(parent, key)) child[key] = parent[key];
          }

          function ctor() {
            this.constructor = child;
          }

          ctor.prototype = parent.prototype;
          child.prototype = new ctor();
          child.__super__ = parent.prototype;
          return child;
        };

        Struct = __webpack_require__(253);

        VersionedStruct = function (_super) {
          __extends(VersionedStruct, _super);

          function VersionedStruct(type, versions) {
            this.type = type;
            this.versions = versions != null ? versions : {};

            if (typeof this.type === 'string') {
              this.versionGetter = new Function('parent', "return parent." + this.type);
              this.versionSetter = new Function('parent', 'version', "return parent." + this.type + " = version");
            }
          }

          VersionedStruct.prototype.decode = function (stream, parent, length) {
            var fields, res, _ref;

            if (length == null) {
              length = 0;
            }

            res = this._setup(stream, parent, length);

            if (typeof this.type === 'string') {
              res.version = this.versionGetter(parent);
            } else {
              res.version = this.type.decode(stream);
            }

            if (this.versions.header) {
              this._parseFields(stream, res, this.versions.header);
            }

            fields = this.versions[res.version];

            if (fields == null) {
              throw new Error("Unknown version " + res.version);
            }

            if (fields instanceof VersionedStruct) {
              return fields.decode(stream, parent);
            }

            this._parseFields(stream, res, fields);

            if ((_ref = this.process) != null) {
              _ref.call(res, stream);
            }

            return res;
          };

          VersionedStruct.prototype.size = function (val, parent, includePointers) {
            var ctx, fields, key, size, type, _ref;

            if (includePointers == null) {
              includePointers = true;
            }

            if (!val) {
              throw new Error('Not a fixed size');
            }

            ctx = {
              parent: parent,
              val: val,
              pointerSize: 0
            };
            size = 0;

            if (typeof this.type !== 'string') {
              size += this.type.size(val.version, ctx);
            }

            if (this.versions.header) {
              _ref = this.versions.header;

              for (key in _ref) {
                type = _ref[key];

                if (type.size != null) {
                  size += type.size(val[key], ctx);
                }
              }
            }

            fields = this.versions[val.version];

            if (fields == null) {
              throw new Error("Unknown version " + val.version);
            }

            for (key in fields) {
              type = fields[key];

              if (type.size != null) {
                size += type.size(val[key], ctx);
              }
            }

            if (includePointers) {
              size += ctx.pointerSize;
            }

            return size;
          };

          VersionedStruct.prototype.encode = function (stream, val, parent) {
            var ctx, fields, i, key, ptr, type, _ref, _ref1;

            if ((_ref = this.preEncode) != null) {
              _ref.call(val, stream);
            }

            ctx = {
              pointers: [],
              startOffset: stream.pos,
              parent: parent,
              val: val,
              pointerSize: 0
            };
            ctx.pointerOffset = stream.pos + this.size(val, ctx, false);

            if (typeof this.type !== 'string') {
              this.type.encode(stream, val.version);
            }

            if (this.versions.header) {
              _ref1 = this.versions.header;

              for (key in _ref1) {
                type = _ref1[key];

                if (type.encode != null) {
                  type.encode(stream, val[key], ctx);
                }
              }
            }

            fields = this.versions[val.version];

            for (key in fields) {
              type = fields[key];

              if (type.encode != null) {
                type.encode(stream, val[key], ctx);
              }
            }

            i = 0;

            while (i < ctx.pointers.length) {
              ptr = ctx.pointers[i++];
              ptr.type.encode(stream, ptr.val, ptr.parent);
            }
          };

          return VersionedStruct;
        }(Struct);

        module.exports = VersionedStruct;
      }).call(this);
      /***/
    },
    /* 416 */

    /***/
    function (module, exports, __webpack_require__) {
      // Generated by CoffeeScript 1.7.1
      (function () {
        var Pointer, VoidPointer, utils;
        utils = __webpack_require__(40);

        Pointer = function () {
          function Pointer(offsetType, type, options) {
            var _base, _base1, _base2, _base3;

            this.offsetType = offsetType;
            this.type = type;
            this.options = options != null ? options : {};

            if (this.type === 'void') {
              this.type = null;
            }

            if ((_base = this.options).type == null) {
              _base.type = 'local';
            }

            if ((_base1 = this.options).allowNull == null) {
              _base1.allowNull = true;
            }

            if ((_base2 = this.options).nullValue == null) {
              _base2.nullValue = 0;
            }

            if ((_base3 = this.options).lazy == null) {
              _base3.lazy = false;
            }

            if (this.options.relativeTo) {
              this.relativeToGetter = new Function('ctx', "return ctx." + this.options.relativeTo);
            }
          }

          Pointer.prototype.decode = function (stream, ctx) {
            var c, decodeValue, offset, ptr, relative, val;
            offset = this.offsetType.decode(stream, ctx);

            if (offset === this.options.nullValue && this.options.allowNull) {
              return null;
            }

            relative = function () {
              switch (this.options.type) {
                case 'local':
                  return ctx._startOffset;

                case 'immediate':
                  return stream.pos - this.offsetType.size();

                case 'parent':
                  return ctx.parent._startOffset;

                default:
                  c = ctx;

                  while (c.parent) {
                    c = c.parent;
                  }

                  return c._startOffset || 0;
              }
            }.call(this);

            if (this.options.relativeTo) {
              relative += this.relativeToGetter(ctx);
            }

            ptr = offset + relative;

            if (this.type != null) {
              val = null;

              decodeValue = function (_this) {
                return function () {
                  var pos;

                  if (val != null) {
                    return val;
                  }

                  pos = stream.pos;
                  stream.pos = ptr;
                  val = _this.type.decode(stream, ctx);
                  stream.pos = pos;
                  return val;
                };
              }(this);

              if (this.options.lazy) {
                return new utils.PropertyDescriptor({
                  get: decodeValue
                });
              }

              return decodeValue();
            } else {
              return ptr;
            }
          };

          Pointer.prototype.size = function (val, ctx) {
            var parent, type;
            parent = ctx;

            switch (this.options.type) {
              case 'local':
              case 'immediate':
                break;

              case 'parent':
                ctx = ctx.parent;
                break;

              default:
                while (ctx.parent) {
                  ctx = ctx.parent;
                }

            }

            type = this.type;

            if (type == null) {
              if (!(val instanceof VoidPointer)) {
                throw new Error("Must be a VoidPointer");
              }

              type = val.type;
              val = val.value;
            }

            if (val && ctx) {
              ctx.pointerSize += type.size(val, parent);
            }

            return this.offsetType.size();
          };

          Pointer.prototype.encode = function (stream, val, ctx) {
            var parent, relative, type;
            parent = ctx;

            if (val == null) {
              this.offsetType.encode(stream, this.options.nullValue);
              return;
            }

            switch (this.options.type) {
              case 'local':
                relative = ctx.startOffset;
                break;

              case 'immediate':
                relative = stream.pos + this.offsetType.size(val, parent);
                break;

              case 'parent':
                ctx = ctx.parent;
                relative = ctx.startOffset;
                break;

              default:
                relative = 0;

                while (ctx.parent) {
                  ctx = ctx.parent;
                }

            }

            if (this.options.relativeTo) {
              relative += this.relativeToGetter(parent.val);
            }

            this.offsetType.encode(stream, ctx.pointerOffset - relative);
            type = this.type;

            if (type == null) {
              if (!(val instanceof VoidPointer)) {
                throw new Error("Must be a VoidPointer");
              }

              type = val.type;
              val = val.value;
            }

            ctx.pointers.push({
              type: type,
              val: val,
              parent: parent
            });
            return ctx.pointerOffset += type.size(val, parent);
          };

          return Pointer;
        }();

        VoidPointer = function () {
          function VoidPointer(type, value) {
            this.type = type;
            this.value = value;
          }

          return VoidPointer;
        }();

        exports.Pointer = Pointer;
        exports.VoidPointer = VoidPointer;
      }).call(this);
      /***/
    },
    /* 417 */

    /***/
    function (module, exports, __webpack_require__) {
      module.exports = {
        "default": __webpack_require__(418),
        __esModule: true
      };
      /***/
    },
    /* 418 */

    /***/
    function (module, exports, __webpack_require__) {
      __webpack_require__(419);

      var $Object = __webpack_require__(7).Object;

      module.exports = function getOwnPropertyDescriptor(it, key) {
        return $Object.getOwnPropertyDescriptor(it, key);
      };
      /***/

    },
    /* 419 */

    /***/
    function (module, exports, __webpack_require__) {
      // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
      var toIObject = __webpack_require__(50);

      var $getOwnPropertyDescriptor = __webpack_require__(174).f;

      __webpack_require__(177)('getOwnPropertyDescriptor', function () {
        return function getOwnPropertyDescriptor(it, key) {
          return $getOwnPropertyDescriptor(toIObject(it), key);
        };
      });
      /***/

    },
    /* 420 */

    /***/
    function (module, exports, __webpack_require__) {
      module.exports = {
        "default": __webpack_require__(421),
        __esModule: true
      };
      /***/
    },
    /* 421 */

    /***/
    function (module, exports, __webpack_require__) {
      __webpack_require__(102);

      __webpack_require__(91);

      module.exports = __webpack_require__(428);
      /***/
    },
    /* 422 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var addToUnscopables = __webpack_require__(423);

      var step = __webpack_require__(255);

      var Iterators = __webpack_require__(103);

      var toIObject = __webpack_require__(50); // 22.1.3.4 Array.prototype.entries()
      // 22.1.3.13 Array.prototype.keys()
      // 22.1.3.29 Array.prototype.values()
      // 22.1.3.30 Array.prototype[@@iterator]()


      module.exports = __webpack_require__(178)(Array, 'Array', function (iterated, kind) {
        this._t = toIObject(iterated); // target

        this._i = 0; // next index

        this._k = kind; // kind
        // 22.1.5.2.1 %ArrayIteratorPrototype%.next()
      }, function () {
        var O = this._t;
        var kind = this._k;
        var index = this._i++;

        if (!O || index >= O.length) {
          this._t = undefined;
          return step(1);
        }

        if (kind == 'keys') return step(0, index);
        if (kind == 'values') return step(0, O[index]);
        return step(0, [index, O[index]]);
      }, 'values'); // argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)

      Iterators.Arguments = Iterators.Array;
      addToUnscopables('keys');
      addToUnscopables('values');
      addToUnscopables('entries');
      /***/
    },
    /* 423 */

    /***/
    function (module, exports) {
      module.exports = function () {
        /* empty */
      };
      /***/

    },
    /* 424 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var create = __webpack_require__(129);

      var descriptor = __webpack_require__(100);

      var setToStringTag = __webpack_require__(106);

      var IteratorPrototype = {}; // 25.1.2.1.1 %IteratorPrototype%[@@iterator]()

      __webpack_require__(41)(IteratorPrototype, __webpack_require__(21)('iterator'), function () {
        return this;
      });

      module.exports = function (Constructor, NAME, next) {
        Constructor.prototype = create(IteratorPrototype, {
          next: descriptor(1, next)
        });
        setToStringTag(Constructor, NAME + ' Iterator');
      };
      /***/

    },
    /* 425 */

    /***/
    function (module, exports, __webpack_require__) {
      // false -> Array#indexOf
      // true  -> Array#includes
      var toIObject = __webpack_require__(50);

      var toLength = __webpack_require__(130);

      var toAbsoluteIndex = __webpack_require__(259);

      module.exports = function (IS_INCLUDES) {
        return function ($this, el, fromIndex) {
          var O = toIObject($this);
          var length = toLength(O.length);
          var index = toAbsoluteIndex(fromIndex, length);
          var value; // Array#includes uses SameValueZero equality algorithm
          // eslint-disable-next-line no-self-compare

          if (IS_INCLUDES && el != el) while (length > index) {
            value = O[index++]; // eslint-disable-next-line no-self-compare

            if (value != value) return true; // Array#indexOf ignores holes, Array#includes - not
          } else for (; length > index; index++) {
            if (IS_INCLUDES || index in O) {
              if (O[index] === el) return IS_INCLUDES || index || 0;
            }
          }
          return !IS_INCLUDES && -1;
        };
      };
      /***/

    },
    /* 426 */

    /***/
    function (module, exports, __webpack_require__) {
      // 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
      var has = __webpack_require__(51);

      var toObject = __webpack_require__(90);

      var IE_PROTO = __webpack_require__(180)('IE_PROTO');

      var ObjectProto = Object.prototype;

      module.exports = Object.getPrototypeOf || function (O) {
        O = toObject(O);
        if (has(O, IE_PROTO)) return O[IE_PROTO];

        if (typeof O.constructor == 'function' && O instanceof O.constructor) {
          return O.constructor.prototype;
        }

        return O instanceof Object ? ObjectProto : null;
      };
      /***/

    },
    /* 427 */

    /***/
    function (module, exports, __webpack_require__) {
      var toInteger = __webpack_require__(179);

      var defined = __webpack_require__(173); // true  -> String#at
      // false -> String#codePointAt


      module.exports = function (TO_STRING) {
        return function (that, pos) {
          var s = String(defined(that));
          var i = toInteger(pos);
          var l = s.length;
          var a, b;
          if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
          a = s.charCodeAt(i);
          return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff ? TO_STRING ? s.charAt(i) : a : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
        };
      };
      /***/

    },
    /* 428 */

    /***/
    function (module, exports, __webpack_require__) {
      var anObject = __webpack_require__(29);

      var get = __webpack_require__(183);

      module.exports = __webpack_require__(7).getIterator = function (it) {
        var iterFn = get(it);
        if (typeof iterFn != 'function') throw TypeError(it + ' is not iterable!');
        return anObject(iterFn.call(it));
      };
      /***/

    },
    /* 429 */

    /***/
    function (module, exports, __webpack_require__) {
      module.exports = {
        "default": __webpack_require__(430),
        __esModule: true
      };
      /***/
    },
    /* 430 */

    /***/
    function (module, exports, __webpack_require__) {
      __webpack_require__(431);

      module.exports = __webpack_require__(7).Object.freeze;
      /***/
    },
    /* 431 */

    /***/
    function (module, exports, __webpack_require__) {
      // 19.1.2.5 Object.freeze(O)
      var isObject = __webpack_require__(22);

      var meta = __webpack_require__(132).onFreeze;

      __webpack_require__(177)('freeze', function ($freeze) {
        return function freeze(it) {
          return $freeze && isObject(it) ? $freeze(meta(it)) : it;
        };
      });
      /***/

    },
    /* 432 */

    /***/
    function (module, exports, __webpack_require__) {
      module.exports = {
        "default": __webpack_require__(433),
        __esModule: true
      };
      /***/
    },
    /* 433 */

    /***/
    function (module, exports, __webpack_require__) {
      __webpack_require__(91);

      __webpack_require__(102);

      module.exports = __webpack_require__(186).f('iterator');
      /***/
    },
    /* 434 */

    /***/
    function (module, exports, __webpack_require__) {
      module.exports = {
        "default": __webpack_require__(435),
        __esModule: true
      };
      /***/
    },
    /* 435 */

    /***/
    function (module, exports, __webpack_require__) {
      __webpack_require__(436);

      __webpack_require__(133);

      __webpack_require__(439);

      __webpack_require__(440);

      module.exports = __webpack_require__(7).Symbol;
      /***/
    },
    /* 436 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict"; // ECMAScript 6 symbols shim

      var global = __webpack_require__(17);

      var has = __webpack_require__(51);

      var DESCRIPTORS = __webpack_require__(23);

      var $export = __webpack_require__(9);

      var redefine = __webpack_require__(256);

      var META = __webpack_require__(132).KEY;

      var $fails = __webpack_require__(52);

      var shared = __webpack_require__(181);

      var setToStringTag = __webpack_require__(106);

      var uid = __webpack_require__(131);

      var wks = __webpack_require__(21);

      var wksExt = __webpack_require__(186);

      var wksDefine = __webpack_require__(187);

      var enumKeys = __webpack_require__(437);

      var isArray = __webpack_require__(261);

      var anObject = __webpack_require__(29);

      var isObject = __webpack_require__(22);

      var toObject = __webpack_require__(90);

      var toIObject = __webpack_require__(50);

      var toPrimitive = __webpack_require__(175);

      var createDesc = __webpack_require__(100);

      var _create = __webpack_require__(129);

      var gOPNExt = __webpack_require__(438);

      var $GOPD = __webpack_require__(174);

      var $GOPS = __webpack_require__(188);

      var $DP = __webpack_require__(26);

      var $keys = __webpack_require__(105);

      var gOPD = $GOPD.f;
      var dP = $DP.f;
      var gOPN = gOPNExt.f;
      var $Symbol = global.Symbol;
      var $JSON = global.JSON;

      var _stringify = $JSON && $JSON.stringify;

      var PROTOTYPE = 'prototype';
      var HIDDEN = wks('_hidden');
      var TO_PRIMITIVE = wks('toPrimitive');
      var isEnum = {}.propertyIsEnumerable;
      var SymbolRegistry = shared('symbol-registry');
      var AllSymbols = shared('symbols');
      var OPSymbols = shared('op-symbols');
      var ObjectProto = Object[PROTOTYPE];
      var USE_NATIVE = typeof $Symbol == 'function' && !!$GOPS.f;
      var QObject = global.QObject; // Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173

      var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild; // fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687

      var setSymbolDesc = DESCRIPTORS && $fails(function () {
        return _create(dP({}, 'a', {
          get: function get() {
            return dP(this, 'a', {
              value: 7
            }).a;
          }
        })).a != 7;
      }) ? function (it, key, D) {
        var protoDesc = gOPD(ObjectProto, key);
        if (protoDesc) delete ObjectProto[key];
        dP(it, key, D);
        if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
      } : dP;

      var wrap = function wrap(tag) {
        var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);

        sym._k = tag;
        return sym;
      };

      var isSymbol = USE_NATIVE && _typeof4($Symbol.iterator) == 'symbol' ? function (it) {
        return _typeof4(it) == 'symbol';
      } : function (it) {
        return it instanceof $Symbol;
      };

      var $defineProperty = function defineProperty(it, key, D) {
        if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
        anObject(it);
        key = toPrimitive(key, true);
        anObject(D);

        if (has(AllSymbols, key)) {
          if (!D.enumerable) {
            if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
            it[HIDDEN][key] = true;
          } else {
            if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
            D = _create(D, {
              enumerable: createDesc(0, false)
            });
          }

          return setSymbolDesc(it, key, D);
        }

        return dP(it, key, D);
      };

      var $defineProperties = function defineProperties(it, P) {
        anObject(it);
        var keys = enumKeys(P = toIObject(P));
        var i = 0;
        var l = keys.length;
        var key;

        while (l > i) {
          $defineProperty(it, key = keys[i++], P[key]);
        }

        return it;
      };

      var $create = function create(it, P) {
        return P === undefined ? _create(it) : $defineProperties(_create(it), P);
      };

      var $propertyIsEnumerable = function propertyIsEnumerable(key) {
        var E = isEnum.call(this, key = toPrimitive(key, true));
        if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
        return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
      };

      var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
        it = toIObject(it);
        key = toPrimitive(key, true);
        if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
        var D = gOPD(it, key);
        if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
        return D;
      };

      var $getOwnPropertyNames = function getOwnPropertyNames(it) {
        var names = gOPN(toIObject(it));
        var result = [];
        var i = 0;
        var key;

        while (names.length > i) {
          if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
        }

        return result;
      };

      var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
        var IS_OP = it === ObjectProto;
        var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
        var result = [];
        var i = 0;
        var key;

        while (names.length > i) {
          if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
        }

        return result;
      }; // 19.4.1.1 Symbol([description])


      if (!USE_NATIVE) {
        $Symbol = function _Symbol7() {
          if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
          var tag = uid(arguments.length > 0 ? arguments[0] : undefined);

          var $set = function $set(value) {
            if (this === ObjectProto) $set.call(OPSymbols, value);
            if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
            setSymbolDesc(this, tag, createDesc(1, value));
          };

          if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, {
            configurable: true,
            set: $set
          });
          return wrap(tag);
        };

        redefine($Symbol[PROTOTYPE], 'toString', function toString() {
          return this._k;
        });
        $GOPD.f = $getOwnPropertyDescriptor;
        $DP.f = $defineProperty;
        __webpack_require__(262).f = gOPNExt.f = $getOwnPropertyNames;
        __webpack_require__(128).f = $propertyIsEnumerable;
        $GOPS.f = $getOwnPropertySymbols;

        if (DESCRIPTORS && !__webpack_require__(104)) {
          redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
        }

        wksExt.f = function (name) {
          return wrap(wks(name));
        };
      }

      $export($export.G + $export.W + $export.F * !USE_NATIVE, {
        Symbol: $Symbol
      });

      for (var es6Symbols = // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
      'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'.split(','), j = 0; es6Symbols.length > j;) {
        wks(es6Symbols[j++]);
      }

      for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) {
        wksDefine(wellKnownSymbols[k++]);
      }

      $export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
        // 19.4.2.1 Symbol.for(key)
        'for': function _for(key) {
          return has(SymbolRegistry, key += '') ? SymbolRegistry[key] : SymbolRegistry[key] = $Symbol(key);
        },
        // 19.4.2.5 Symbol.keyFor(sym)
        keyFor: function keyFor(sym) {
          if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');

          for (var key in SymbolRegistry) {
            if (SymbolRegistry[key] === sym) return key;
          }
        },
        useSetter: function useSetter() {
          setter = true;
        },
        useSimple: function useSimple() {
          setter = false;
        }
      });
      $export($export.S + $export.F * !USE_NATIVE, 'Object', {
        // 19.1.2.2 Object.create(O [, Properties])
        create: $create,
        // 19.1.2.4 Object.defineProperty(O, P, Attributes)
        defineProperty: $defineProperty,
        // 19.1.2.3 Object.defineProperties(O, Properties)
        defineProperties: $defineProperties,
        // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
        getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
        // 19.1.2.7 Object.getOwnPropertyNames(O)
        getOwnPropertyNames: $getOwnPropertyNames,
        // 19.1.2.8 Object.getOwnPropertySymbols(O)
        getOwnPropertySymbols: $getOwnPropertySymbols
      }); // Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
      // https://bugs.chromium.org/p/v8/issues/detail?id=3443

      var FAILS_ON_PRIMITIVES = $fails(function () {
        $GOPS.f(1);
      });
      $export($export.S + $export.F * FAILS_ON_PRIMITIVES, 'Object', {
        getOwnPropertySymbols: function getOwnPropertySymbols(it) {
          return $GOPS.f(toObject(it));
        }
      }); // 24.3.2 JSON.stringify(value [, replacer [, space]])

      $JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
        var S = $Symbol(); // MS Edge converts symbol values to JSON as {}
        // WebKit converts symbol values to JSON as null
        // V8 throws on boxed symbols

        return _stringify([S]) != '[null]' || _stringify({
          a: S
        }) != '{}' || _stringify(Object(S)) != '{}';
      })), 'JSON', {
        stringify: function stringify(it) {
          var args = [it];
          var i = 1;
          var replacer, $replacer;

          while (arguments.length > i) {
            args.push(arguments[i++]);
          }

          $replacer = replacer = args[1];
          if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined

          if (!isArray(replacer)) replacer = function replacer(key, value) {
            if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
            if (!isSymbol(value)) return value;
          };
          args[1] = replacer;
          return _stringify.apply($JSON, args);
        }
      }); // 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)

      $Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(41)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf); // 19.4.3.5 Symbol.prototype[@@toStringTag]

      setToStringTag($Symbol, 'Symbol'); // 20.2.1.9 Math[@@toStringTag]

      setToStringTag(Math, 'Math', true); // 24.3.3 JSON[@@toStringTag]

      setToStringTag(global.JSON, 'JSON', true);
      /***/
    },
    /* 437 */

    /***/
    function (module, exports, __webpack_require__) {
      // all enumerable object keys, includes symbols
      var getKeys = __webpack_require__(105);

      var gOPS = __webpack_require__(188);

      var pIE = __webpack_require__(128);

      module.exports = function (it) {
        var result = getKeys(it);
        var getSymbols = gOPS.f;

        if (getSymbols) {
          var symbols = getSymbols(it);
          var isEnum = pIE.f;
          var i = 0;
          var key;

          while (symbols.length > i) {
            if (isEnum.call(it, key = symbols[i++])) result.push(key);
          }
        }

        return result;
      };
      /***/

    },
    /* 438 */

    /***/
    function (module, exports, __webpack_require__) {
      // fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
      var toIObject = __webpack_require__(50);

      var gOPN = __webpack_require__(262).f;

      var toString = {}.toString;
      var windowNames = (typeof window === "undefined" ? "undefined" : _typeof4(window)) == 'object' && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];

      var getWindowNames = function getWindowNames(it) {
        try {
          return gOPN(it);
        } catch (e) {
          return windowNames.slice();
        }
      };

      module.exports.f = function getOwnPropertyNames(it) {
        return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
      };
      /***/

    },
    /* 439 */

    /***/
    function (module, exports, __webpack_require__) {
      __webpack_require__(187)('asyncIterator');
      /***/

    },
    /* 440 */

    /***/
    function (module, exports, __webpack_require__) {
      __webpack_require__(187)('observable');
      /***/

    },
    /* 441 */

    /***/
    function (module, exports, __webpack_require__) {
      module.exports = {
        "default": __webpack_require__(442),
        __esModule: true
      };
      /***/
    },
    /* 442 */

    /***/
    function (module, exports, __webpack_require__) {
      __webpack_require__(443);

      module.exports = __webpack_require__(7).Object.keys;
      /***/
    },
    /* 443 */

    /***/
    function (module, exports, __webpack_require__) {
      // 19.1.2.14 Object.keys(O)
      var toObject = __webpack_require__(90);

      var $keys = __webpack_require__(105);

      __webpack_require__(177)('keys', function () {
        return function keys(it) {
          return $keys(toObject(it));
        };
      });
      /***/

    },
    /* 444 */

    /***/
    function (module, exports, __webpack_require__) {
      __webpack_require__(445);

      var $Object = __webpack_require__(7).Object;

      module.exports = function defineProperty(it, key, desc) {
        return $Object.defineProperty(it, key, desc);
      };
      /***/

    },
    /* 445 */

    /***/
    function (module, exports, __webpack_require__) {
      var $export = __webpack_require__(9); // 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)


      $export($export.S + $export.F * !__webpack_require__(23), 'Object', {
        defineProperty: __webpack_require__(26).f
      });
      /***/
    },
    /* 446 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      exports.__esModule = true;

      exports.default = function (instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      };
      /***/

    },
    /* 447 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      exports.__esModule = true;

      var _defineProperty = __webpack_require__(263);

      var _defineProperty2 = _interopRequireDefault(_defineProperty);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          default: obj
        };
      }

      exports.default = function () {
        function defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            (0, _defineProperty2.default)(target, descriptor.key, descriptor);
          }
        }

        return function (Constructor, protoProps, staticProps) {
          if (protoProps) defineProperties(Constructor.prototype, protoProps);
          if (staticProps) defineProperties(Constructor, staticProps);
          return Constructor;
        };
      }();
      /***/

    },
    /* 448 */

    /***/
    function (module, exports, __webpack_require__) {
      module.exports = {
        "default": __webpack_require__(449),
        __esModule: true
      };
      /***/
    },
    /* 449 */

    /***/
    function (module, exports, __webpack_require__) {
      __webpack_require__(133);

      __webpack_require__(91);

      __webpack_require__(102);

      __webpack_require__(450);

      __webpack_require__(454);

      __webpack_require__(456);

      __webpack_require__(457);

      module.exports = __webpack_require__(7).Map;
      /***/
    },
    /* 450 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var strong = __webpack_require__(264);

      var validate = __webpack_require__(191);

      var MAP = 'Map'; // 23.1 Map Objects

      module.exports = __webpack_require__(268)(MAP, function (get) {
        return function Map() {
          return get(this, arguments.length > 0 ? arguments[0] : undefined);
        };
      }, {
        // 23.1.3.6 Map.prototype.get(key)
        get: function get(key) {
          var entry = strong.getEntry(validate(this, MAP), key);
          return entry && entry.v;
        },
        // 23.1.3.9 Map.prototype.set(key, value)
        set: function set(key, value) {
          return strong.def(validate(this, MAP), key === 0 ? 0 : key, value);
        }
      }, strong, true);
      /***/
    },
    /* 451 */

    /***/
    function (module, exports, __webpack_require__) {
      // 0 -> Array#forEach
      // 1 -> Array#map
      // 2 -> Array#filter
      // 3 -> Array#some
      // 4 -> Array#every
      // 5 -> Array#find
      // 6 -> Array#findIndex
      var ctx = __webpack_require__(33);

      var IObject = __webpack_require__(172);

      var toObject = __webpack_require__(90);

      var toLength = __webpack_require__(130);

      var asc = __webpack_require__(452);

      module.exports = function (TYPE, $create) {
        var IS_MAP = TYPE == 1;
        var IS_FILTER = TYPE == 2;
        var IS_SOME = TYPE == 3;
        var IS_EVERY = TYPE == 4;
        var IS_FIND_INDEX = TYPE == 6;
        var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
        var create = $create || asc;
        return function ($this, callbackfn, that) {
          var O = toObject($this);
          var self = IObject(O);
          var f = ctx(callbackfn, that, 3);
          var length = toLength(self.length);
          var index = 0;
          var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
          var val, res;

          for (; length > index; index++) {
            if (NO_HOLES || index in self) {
              val = self[index];
              res = f(val, index, O);

              if (TYPE) {
                if (IS_MAP) result[index] = res; // map
                else if (res) switch (TYPE) {
                    case 3:
                      return true;
                    // some

                    case 5:
                      return val;
                    // find

                    case 6:
                      return index;
                    // findIndex

                    case 2:
                      result.push(val);
                    // filter
                  } else if (IS_EVERY) return false; // every
              }
            }
          }

          return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
        };
      };
      /***/

    },
    /* 452 */

    /***/
    function (module, exports, __webpack_require__) {
      // 9.4.2.3 ArraySpeciesCreate(originalArray, length)
      var speciesConstructor = __webpack_require__(453);

      module.exports = function (original, length) {
        return new (speciesConstructor(original))(length);
      };
      /***/

    },
    /* 453 */

    /***/
    function (module, exports, __webpack_require__) {
      var isObject = __webpack_require__(22);

      var isArray = __webpack_require__(261);

      var SPECIES = __webpack_require__(21)('species');

      module.exports = function (original) {
        var C;

        if (isArray(original)) {
          C = original.constructor; // cross-realm fallback

          if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;

          if (isObject(C)) {
            C = C[SPECIES];
            if (C === null) C = undefined;
          }
        }

        return C === undefined ? Array : C;
      };
      /***/

    },
    /* 454 */

    /***/
    function (module, exports, __webpack_require__) {
      // https://github.com/DavidBruant/Map-Set.prototype.toJSON
      var $export = __webpack_require__(9);

      $export($export.P + $export.R, 'Map', {
        toJSON: __webpack_require__(269)('Map')
      });
      /***/
    },
    /* 455 */

    /***/
    function (module, exports, __webpack_require__) {
      var forOf = __webpack_require__(107);

      module.exports = function (iter, ITERATOR) {
        var result = [];
        forOf(iter, false, result.push, result, ITERATOR);
        return result;
      };
      /***/

    },
    /* 456 */

    /***/
    function (module, exports, __webpack_require__) {
      // https://tc39.github.io/proposal-setmap-offrom/#sec-map.of
      __webpack_require__(270)('Map');
      /***/

    },
    /* 457 */

    /***/
    function (module, exports, __webpack_require__) {
      // https://tc39.github.io/proposal-setmap-offrom/#sec-map.from
      __webpack_require__(271)('Map');
      /***/

    },
    /* 458 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      exports.__esModule = true;

      var _typeof2 = __webpack_require__(185);

      var _typeof3 = _interopRequireDefault(_typeof2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          default: obj
        };
      }

      exports.default = function (self, call) {
        if (!self) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
      };
      /***/

    },
    /* 459 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      exports.__esModule = true;

      var _setPrototypeOf = __webpack_require__(460);

      var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);

      var _create = __webpack_require__(464);

      var _create2 = _interopRequireDefault(_create);

      var _typeof2 = __webpack_require__(185);

      var _typeof3 = _interopRequireDefault(_typeof2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          default: obj
        };
      }

      exports.default = function (subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
        }

        subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
        if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;
      };
      /***/

    },
    /* 460 */

    /***/
    function (module, exports, __webpack_require__) {
      module.exports = {
        "default": __webpack_require__(461),
        __esModule: true
      };
      /***/
    },
    /* 461 */

    /***/
    function (module, exports, __webpack_require__) {
      __webpack_require__(462);

      module.exports = __webpack_require__(7).Object.setPrototypeOf;
      /***/
    },
    /* 462 */

    /***/
    function (module, exports, __webpack_require__) {
      // 19.1.3.19 Object.setPrototypeOf(O, proto)
      var $export = __webpack_require__(9);

      $export($export.S, 'Object', {
        setPrototypeOf: __webpack_require__(463).set
      });
      /***/
    },
    /* 463 */

    /***/
    function (module, exports, __webpack_require__) {
      // Works with __proto__ only. Old v8 can't work with null proto objects.

      /* eslint-disable no-proto */
      var isObject = __webpack_require__(22);

      var anObject = __webpack_require__(29);

      var check = function check(O, proto) {
        anObject(O);
        if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
      };

      module.exports = {
        set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
        function (test, buggy, set) {
          try {
            set = __webpack_require__(33)(Function.call, __webpack_require__(174).f(Object.prototype, '__proto__').set, 2);
            set(test, []);
            buggy = !(test instanceof Array);
          } catch (e) {
            buggy = true;
          }

          return function setPrototypeOf(O, proto) {
            check(O, proto);
            if (buggy) O.__proto__ = proto;else set(O, proto);
            return O;
          };
        }({}, false) : undefined),
        check: check
      };
      /***/
    },
    /* 464 */

    /***/
    function (module, exports, __webpack_require__) {
      module.exports = {
        "default": __webpack_require__(465),
        __esModule: true
      };
      /***/
    },
    /* 465 */

    /***/
    function (module, exports, __webpack_require__) {
      __webpack_require__(466);

      var $Object = __webpack_require__(7).Object;

      module.exports = function create(P, D) {
        return $Object.create(P, D);
      };
      /***/

    },
    /* 466 */

    /***/
    function (module, exports, __webpack_require__) {
      var $export = __webpack_require__(9); // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])


      $export($export.S, 'Object', {
        create: __webpack_require__(129)
      });
      /***/
    },
    /* 467 */

    /***/
    function (module, exports, __webpack_require__) {
      module.exports = {
        "default": __webpack_require__(468),
        __esModule: true
      };
      /***/
    },
    /* 468 */

    /***/
    function (module, exports, __webpack_require__) {
      __webpack_require__(469);

      var $Object = __webpack_require__(7).Object;

      module.exports = function defineProperties(T, D) {
        return $Object.defineProperties(T, D);
      };
      /***/

    },
    /* 469 */

    /***/
    function (module, exports, __webpack_require__) {
      var $export = __webpack_require__(9); // 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)


      $export($export.S + $export.F * !__webpack_require__(23), 'Object', {
        defineProperties: __webpack_require__(257)
      });
      /***/
    },
    /* 470 */

    /***/
    function (module, exports, __webpack_require__) {
      var objectKeys = __webpack_require__(272);

      var isArguments = __webpack_require__(472);

      var is = __webpack_require__(473);

      var isRegex = __webpack_require__(478);

      var flags = __webpack_require__(479);

      var isDate = __webpack_require__(481);

      var getTime = Date.prototype.getTime;

      function deepEqual(actual, expected, options) {
        var opts = options || {}; // 7.1. All identical values are equivalent, as determined by ===.

        if (opts.strict ? is(actual, expected) : actual === expected) {
          return true;
        } // 7.3. Other pairs that do not both pass typeof value == 'object', equivalence is determined by ==.


        if (!actual || !expected || _typeof4(actual) !== 'object' && _typeof4(expected) !== 'object') {
          return opts.strict ? is(actual, expected) : actual == expected;
        }
        /*
         * 7.4. For all other Object pairs, including Array objects, equivalence is
         * determined by having the same number of owned properties (as verified
         * with Object.prototype.hasOwnProperty.call), the same set of keys
         * (although not necessarily the same order), equivalent values for every
         * corresponding key, and an identical 'prototype' property. Note: this
         * accounts for both named and indexed properties on Arrays.
         */
        // eslint-disable-next-line no-use-before-define


        return objEquiv(actual, expected, opts);
      }

      function isUndefinedOrNull(value) {
        return value === null || value === undefined;
      }

      function isBuffer(x) {
        if (!x || _typeof4(x) !== 'object' || typeof x.length !== 'number') {
          return false;
        }

        if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {
          return false;
        }

        if (x.length > 0 && typeof x[0] !== 'number') {
          return false;
        }

        return true;
      }

      function objEquiv(a, b, opts) {
        /* eslint max-statements: [2, 50] */
        var i, key;

        if (_typeof4(a) !== _typeof4(b)) {
          return false;
        }

        if (isUndefinedOrNull(a) || isUndefinedOrNull(b)) {
          return false;
        } // an identical 'prototype' property.


        if (a.prototype !== b.prototype) {
          return false;
        }

        if (isArguments(a) !== isArguments(b)) {
          return false;
        }

        var aIsRegex = isRegex(a);
        var bIsRegex = isRegex(b);

        if (aIsRegex !== bIsRegex) {
          return false;
        }

        if (aIsRegex || bIsRegex) {
          return a.source === b.source && flags(a) === flags(b);
        }

        if (isDate(a) && isDate(b)) {
          return getTime.call(a) === getTime.call(b);
        }

        var aIsBuffer = isBuffer(a);
        var bIsBuffer = isBuffer(b);

        if (aIsBuffer !== bIsBuffer) {
          return false;
        }

        if (aIsBuffer || bIsBuffer) {
          // && would work too, because both are true or both false here
          if (a.length !== b.length) {
            return false;
          }

          for (i = 0; i < a.length; i++) {
            if (a[i] !== b[i]) {
              return false;
            }
          }

          return true;
        }

        if (_typeof4(a) !== _typeof4(b)) {
          return false;
        }

        try {
          var ka = objectKeys(a);
          var kb = objectKeys(b);
        } catch (e) {
          // happens when one is a string literal and the other isn't
          return false;
        } // having the same number of owned properties (keys incorporates hasOwnProperty)


        if (ka.length !== kb.length) {
          return false;
        } // the same set of keys (although not necessarily the same order),


        ka.sort();
        kb.sort(); // ~~~cheap key test

        for (i = ka.length - 1; i >= 0; i--) {
          if (ka[i] != kb[i]) {
            return false;
          }
        } // equivalent values for every corresponding key, and ~~~possibly expensive deep test


        for (i = ka.length - 1; i >= 0; i--) {
          key = ka[i];

          if (!deepEqual(a[key], b[key], opts)) {
            return false;
          }
        }

        return true;
      }

      module.exports = deepEqual;
      /***/
    },
    /* 471 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var keysShim;

      if (!Object.keys) {
        // modified from https://github.com/es-shims/es5-shim
        var has = Object.prototype.hasOwnProperty;
        var toStr = Object.prototype.toString;

        var isArgs = __webpack_require__(273); // eslint-disable-line global-require


        var isEnumerable = Object.prototype.propertyIsEnumerable;
        var hasDontEnumBug = !isEnumerable.call({
          toString: null
        }, 'toString');
        var hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');
        var dontEnums = ['toString', 'toLocaleString', 'valueOf', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'constructor'];

        var equalsConstructorPrototype = function equalsConstructorPrototype(o) {
          var ctor = o.constructor;
          return ctor && ctor.prototype === o;
        };

        var excludedKeys = {
          $applicationCache: true,
          $console: true,
          $external: true,
          $frame: true,
          $frameElement: true,
          $frames: true,
          $innerHeight: true,
          $innerWidth: true,
          $onmozfullscreenchange: true,
          $onmozfullscreenerror: true,
          $outerHeight: true,
          $outerWidth: true,
          $pageXOffset: true,
          $pageYOffset: true,
          $parent: true,
          $scrollLeft: true,
          $scrollTop: true,
          $scrollX: true,
          $scrollY: true,
          $self: true,
          $webkitIndexedDB: true,
          $webkitStorageInfo: true,
          $window: true
        };

        var hasAutomationEqualityBug = function () {
          /* global window */
          if (typeof window === 'undefined') {
            return false;
          }

          for (var k in window) {
            try {
              if (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && _typeof4(window[k]) === 'object') {
                try {
                  equalsConstructorPrototype(window[k]);
                } catch (e) {
                  return true;
                }
              }
            } catch (e) {
              return true;
            }
          }

          return false;
        }();

        var equalsConstructorPrototypeIfNotBuggy = function equalsConstructorPrototypeIfNotBuggy(o) {
          /* global window */
          if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
            return equalsConstructorPrototype(o);
          }

          try {
            return equalsConstructorPrototype(o);
          } catch (e) {
            return false;
          }
        };

        keysShim = function keys(object) {
          var isObject = object !== null && _typeof4(object) === 'object';
          var isFunction = toStr.call(object) === '[object Function]';
          var isArguments = isArgs(object);
          var isString = isObject && toStr.call(object) === '[object String]';
          var theKeys = [];

          if (!isObject && !isFunction && !isArguments) {
            throw new TypeError('Object.keys called on a non-object');
          }

          var skipProto = hasProtoEnumBug && isFunction;

          if (isString && object.length > 0 && !has.call(object, 0)) {
            for (var i = 0; i < object.length; ++i) {
              theKeys.push(String(i));
            }
          }

          if (isArguments && object.length > 0) {
            for (var j = 0; j < object.length; ++j) {
              theKeys.push(String(j));
            }
          } else {
            for (var name in object) {
              if (!(skipProto && name === 'prototype') && has.call(object, name)) {
                theKeys.push(String(name));
              }
            }
          }

          if (hasDontEnumBug) {
            var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

            for (var k = 0; k < dontEnums.length; ++k) {
              if (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {
                theKeys.push(dontEnums[k]);
              }
            }
          }

          return theKeys;
        };
      }

      module.exports = keysShim;
      /***/
    },
    /* 472 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var hasToStringTag = typeof Symbol === 'function' && _typeof4(Symbol.toStringTag) === 'symbol';
      var toStr = Object.prototype.toString;

      var isStandardArguments = function isArguments(value) {
        if (hasToStringTag && value && _typeof4(value) === 'object' && Symbol.toStringTag in value) {
          return false;
        }

        return toStr.call(value) === '[object Arguments]';
      };

      var isLegacyArguments = function isArguments(value) {
        if (isStandardArguments(value)) {
          return true;
        }

        return value !== null && _typeof4(value) === 'object' && typeof value.length === 'number' && value.length >= 0 && toStr.call(value) !== '[object Array]' && toStr.call(value.callee) === '[object Function]';
      };

      var supportsStandardArguments = function () {
        return isStandardArguments(arguments);
      }();

      isStandardArguments.isLegacyArguments = isLegacyArguments; // for tests

      module.exports = supportsStandardArguments ? isStandardArguments : isLegacyArguments;
      /***/
    },
    /* 473 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var define = __webpack_require__(108);

      var callBind = __webpack_require__(274);

      var implementation = __webpack_require__(277);

      var getPolyfill = __webpack_require__(278);

      var shim = __webpack_require__(477);

      var polyfill = callBind(getPolyfill(), Object);
      define(polyfill, {
        getPolyfill: getPolyfill,
        implementation: implementation,
        shim: shim
      });
      module.exports = polyfill;
      /***/
    },
    /* 474 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";
      /* eslint no-invalid-this: 1 */

      var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
      var slice = Array.prototype.slice;
      var toStr = Object.prototype.toString;
      var funcType = '[object Function]';

      module.exports = function bind(that) {
        var target = this;

        if (typeof target !== 'function' || toStr.call(target) !== funcType) {
          throw new TypeError(ERROR_MESSAGE + target);
        }

        var args = slice.call(arguments, 1);
        var bound;

        var binder = function binder() {
          if (this instanceof bound) {
            var result = target.apply(this, args.concat(slice.call(arguments)));

            if (Object(result) === result) {
              return result;
            }

            return this;
          } else {
            return target.apply(that, args.concat(slice.call(arguments)));
          }
        };

        var boundLength = Math.max(0, target.length - args.length);
        var boundArgs = [];

        for (var i = 0; i < boundLength; i++) {
          boundArgs.push('$' + i);
        }

        bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

        if (target.prototype) {
          var Empty = function Empty() {};

          Empty.prototype = target.prototype;
          bound.prototype = new Empty();
          Empty.prototype = null;
        }

        return bound;
      };
      /***/

    },
    /* 475 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";
      /* globals
      	Atomics,
      	SharedArrayBuffer,
      */

      var undefined;
      var $TypeError = TypeError;
      var $gOPD = Object.getOwnPropertyDescriptor;

      if ($gOPD) {
        try {
          $gOPD({}, '');
        } catch (e) {
          $gOPD = null; // this is IE 8, which has a broken gOPD
        }
      }

      var throwTypeError = function throwTypeError() {
        throw new $TypeError();
      };

      var ThrowTypeError = $gOPD ? function () {
        try {
          // eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
          arguments.callee; // IE 8 does not throw here

          return throwTypeError;
        } catch (calleeThrows) {
          try {
            // IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
            return $gOPD(arguments, 'callee').get;
          } catch (gOPDthrows) {
            return throwTypeError;
          }
        }
      }() : throwTypeError;

      var hasSymbols = __webpack_require__(276)();

      var getProto = Object.getPrototypeOf || function (x) {
        return x.__proto__;
      }; // eslint-disable-line no-proto


      var generator; // = function * () {};

      var generatorFunction = generator ? getProto(generator) : undefined;
      var asyncFn; // async function() {};

      var asyncFunction = asyncFn ? asyncFn.constructor : undefined;
      var asyncGen; // async function * () {};

      var asyncGenFunction = asyncGen ? getProto(asyncGen) : undefined;
      var asyncGenIterator = asyncGen ? asyncGen() : undefined;
      var TypedArray = typeof Uint8Array === 'undefined' ? undefined : getProto(Uint8Array);
      var INTRINSICS = {
        '%Array%': Array,
        '%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer,
        '%ArrayBufferPrototype%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer.prototype,
        '%ArrayIteratorPrototype%': hasSymbols ? getProto([][Symbol.iterator]()) : undefined,
        '%ArrayPrototype%': Array.prototype,
        '%ArrayProto_entries%': Array.prototype.entries,
        '%ArrayProto_forEach%': Array.prototype.forEach,
        '%ArrayProto_keys%': Array.prototype.keys,
        '%ArrayProto_values%': Array.prototype.values,
        '%AsyncFromSyncIteratorPrototype%': undefined,
        '%AsyncFunction%': asyncFunction,
        '%AsyncFunctionPrototype%': asyncFunction ? asyncFunction.prototype : undefined,
        '%AsyncGenerator%': asyncGen ? getProto(asyncGenIterator) : undefined,
        '%AsyncGeneratorFunction%': asyncGenFunction,
        '%AsyncGeneratorPrototype%': asyncGenFunction ? asyncGenFunction.prototype : undefined,
        '%AsyncIteratorPrototype%': asyncGenIterator && hasSymbols && Symbol.asyncIterator ? asyncGenIterator[Symbol.asyncIterator]() : undefined,
        '%Atomics%': typeof Atomics === 'undefined' ? undefined : Atomics,
        '%Boolean%': Boolean,
        '%BooleanPrototype%': Boolean.prototype,
        '%DataView%': typeof DataView === 'undefined' ? undefined : DataView,
        '%DataViewPrototype%': typeof DataView === 'undefined' ? undefined : DataView.prototype,
        '%Date%': Date,
        '%DatePrototype%': Date.prototype,
        '%decodeURI%': decodeURI,
        '%decodeURIComponent%': decodeURIComponent,
        '%encodeURI%': encodeURI,
        '%encodeURIComponent%': encodeURIComponent,
        '%Error%': Error,
        '%ErrorPrototype%': Error.prototype,
        '%eval%': eval,
        // eslint-disable-line no-eval
        '%EvalError%': EvalError,
        '%EvalErrorPrototype%': EvalError.prototype,
        '%Float32Array%': typeof Float32Array === 'undefined' ? undefined : Float32Array,
        '%Float32ArrayPrototype%': typeof Float32Array === 'undefined' ? undefined : Float32Array.prototype,
        '%Float64Array%': typeof Float64Array === 'undefined' ? undefined : Float64Array,
        '%Float64ArrayPrototype%': typeof Float64Array === 'undefined' ? undefined : Float64Array.prototype,
        '%Function%': Function,
        '%FunctionPrototype%': Function.prototype,
        '%Generator%': generator ? getProto(generator()) : undefined,
        '%GeneratorFunction%': generatorFunction,
        '%GeneratorPrototype%': generatorFunction ? generatorFunction.prototype : undefined,
        '%Int8Array%': typeof Int8Array === 'undefined' ? undefined : Int8Array,
        '%Int8ArrayPrototype%': typeof Int8Array === 'undefined' ? undefined : Int8Array.prototype,
        '%Int16Array%': typeof Int16Array === 'undefined' ? undefined : Int16Array,
        '%Int16ArrayPrototype%': typeof Int16Array === 'undefined' ? undefined : Int8Array.prototype,
        '%Int32Array%': typeof Int32Array === 'undefined' ? undefined : Int32Array,
        '%Int32ArrayPrototype%': typeof Int32Array === 'undefined' ? undefined : Int32Array.prototype,
        '%isFinite%': isFinite,
        '%isNaN%': isNaN,
        '%IteratorPrototype%': hasSymbols ? getProto(getProto([][Symbol.iterator]())) : undefined,
        '%JSON%': (typeof JSON === "undefined" ? "undefined" : _typeof4(JSON)) === 'object' ? JSON : undefined,
        '%JSONParse%': (typeof JSON === "undefined" ? "undefined" : _typeof4(JSON)) === 'object' ? JSON.parse : undefined,
        '%Map%': typeof Map === 'undefined' ? undefined : Map,
        '%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols ? undefined : getProto(new Map()[Symbol.iterator]()),
        '%MapPrototype%': typeof Map === 'undefined' ? undefined : Map.prototype,
        '%Math%': Math,
        '%Number%': Number,
        '%NumberPrototype%': Number.prototype,
        '%Object%': Object,
        '%ObjectPrototype%': Object.prototype,
        '%ObjProto_toString%': Object.prototype.toString,
        '%ObjProto_valueOf%': Object.prototype.valueOf,
        '%parseFloat%': parseFloat,
        '%parseInt%': parseInt,
        '%Promise%': typeof Promise === 'undefined' ? undefined : Promise,
        '%PromisePrototype%': typeof Promise === 'undefined' ? undefined : Promise.prototype,
        '%PromiseProto_then%': typeof Promise === 'undefined' ? undefined : Promise.prototype.then,
        '%Promise_all%': typeof Promise === 'undefined' ? undefined : Promise.all,
        '%Promise_reject%': typeof Promise === 'undefined' ? undefined : Promise.reject,
        '%Promise_resolve%': typeof Promise === 'undefined' ? undefined : Promise.resolve,
        '%Proxy%': typeof Proxy === 'undefined' ? undefined : Proxy,
        '%RangeError%': RangeError,
        '%RangeErrorPrototype%': RangeError.prototype,
        '%ReferenceError%': ReferenceError,
        '%ReferenceErrorPrototype%': ReferenceError.prototype,
        '%Reflect%': typeof Reflect === 'undefined' ? undefined : Reflect,
        '%RegExp%': RegExp,
        '%RegExpPrototype%': RegExp.prototype,
        '%Set%': typeof Set === 'undefined' ? undefined : Set,
        '%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols ? undefined : getProto(new Set()[Symbol.iterator]()),
        '%SetPrototype%': typeof Set === 'undefined' ? undefined : Set.prototype,
        '%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer,
        '%SharedArrayBufferPrototype%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer.prototype,
        '%String%': String,
        '%StringIteratorPrototype%': hasSymbols ? getProto(''[Symbol.iterator]()) : undefined,
        '%StringPrototype%': String.prototype,
        '%Symbol%': hasSymbols ? Symbol : undefined,
        '%SymbolPrototype%': hasSymbols ? Symbol.prototype : undefined,
        '%SyntaxError%': SyntaxError,
        '%SyntaxErrorPrototype%': SyntaxError.prototype,
        '%ThrowTypeError%': ThrowTypeError,
        '%TypedArray%': TypedArray,
        '%TypedArrayPrototype%': TypedArray ? TypedArray.prototype : undefined,
        '%TypeError%': $TypeError,
        '%TypeErrorPrototype%': $TypeError.prototype,
        '%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array,
        '%Uint8ArrayPrototype%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array.prototype,
        '%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray,
        '%Uint8ClampedArrayPrototype%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray.prototype,
        '%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array,
        '%Uint16ArrayPrototype%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array.prototype,
        '%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array,
        '%Uint32ArrayPrototype%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array.prototype,
        '%URIError%': URIError,
        '%URIErrorPrototype%': URIError.prototype,
        '%WeakMap%': typeof WeakMap === 'undefined' ? undefined : WeakMap,
        '%WeakMapPrototype%': typeof WeakMap === 'undefined' ? undefined : WeakMap.prototype,
        '%WeakSet%': typeof WeakSet === 'undefined' ? undefined : WeakSet,
        '%WeakSetPrototype%': typeof WeakSet === 'undefined' ? undefined : WeakSet.prototype
      };

      var bind = __webpack_require__(275);

      var $replace = bind.call(Function.call, String.prototype.replace);
      /* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */

      var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
      var reEscapeChar = /\\(\\)?/g;
      /** Used to match backslashes in property paths. */

      var stringToPath = function stringToPath(string) {
        var result = [];
        $replace(string, rePropName, function (match, number, quote, subString) {
          result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;
        });
        return result;
      };
      /* end adaptation */


      var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
        if (!(name in INTRINSICS)) {
          throw new SyntaxError('intrinsic ' + name + ' does not exist!');
        } // istanbul ignore if // hopefully this is impossible to test :-)


        if (typeof INTRINSICS[name] === 'undefined' && !allowMissing) {
          throw new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
        }

        return INTRINSICS[name];
      };

      module.exports = function GetIntrinsic(name, allowMissing) {
        if (typeof name !== 'string' || name.length === 0) {
          throw new TypeError('intrinsic name must be a non-empty string');
        }

        if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
          throw new TypeError('"allowMissing" argument must be a boolean');
        }

        var parts = stringToPath(name);
        var value = getBaseIntrinsic('%' + (parts.length > 0 ? parts[0] : '') + '%', allowMissing);

        for (var i = 1; i < parts.length; i += 1) {
          if (value != null) {
            if ($gOPD && i + 1 >= parts.length) {
              var desc = $gOPD(value, parts[i]);

              if (!allowMissing && !(parts[i] in value)) {
                throw new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');
              }

              value = desc ? desc.get || desc.value : value[parts[i]];
            } else {
              value = value[parts[i]];
            }
          }
        }

        return value;
      };
      /***/

    },
    /* 476 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";
      /* eslint complexity: [2, 18], max-statements: [2, 33] */

      module.exports = function hasSymbols() {
        if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') {
          return false;
        }

        if (_typeof4(Symbol.iterator) === 'symbol') {
          return true;
        }

        var obj = {};
        var sym = Symbol('test');
        var symObj = Object(sym);

        if (typeof sym === 'string') {
          return false;
        }

        if (Object.prototype.toString.call(sym) !== '[object Symbol]') {
          return false;
        }

        if (Object.prototype.toString.call(symObj) !== '[object Symbol]') {
          return false;
        } // temp disabled per https://github.com/ljharb/object.assign/issues/17
        // if (sym instanceof Symbol) { return false; }
        // temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
        // if (!(symObj instanceof Symbol)) { return false; }
        // if (typeof Symbol.prototype.toString !== 'function') { return false; }
        // if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }


        var symVal = 42;
        obj[sym] = symVal;

        for (sym in obj) {
          return false;
        } // eslint-disable-line no-restricted-syntax


        if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) {
          return false;
        }

        if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) {
          return false;
        }

        var syms = Object.getOwnPropertySymbols(obj);

        if (syms.length !== 1 || syms[0] !== sym) {
          return false;
        }

        if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {
          return false;
        }

        if (typeof Object.getOwnPropertyDescriptor === 'function') {
          var descriptor = Object.getOwnPropertyDescriptor(obj, sym);

          if (descriptor.value !== symVal || descriptor.enumerable !== true) {
            return false;
          }
        }

        return true;
      };
      /***/

    },
    /* 477 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var getPolyfill = __webpack_require__(278);

      var define = __webpack_require__(108);

      module.exports = function shimObjectIs() {
        var polyfill = getPolyfill();
        define(Object, {
          is: polyfill
        }, {
          is: function testObjectIs() {
            return Object.is !== polyfill;
          }
        });
        return polyfill;
      };
      /***/

    },
    /* 478 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var hasSymbols = __webpack_require__(276)();

      var hasToStringTag = hasSymbols && _typeof4(Symbol.toStringTag) === 'symbol';
      var regexExec;
      var isRegexMarker;
      var badStringifier;

      if (hasToStringTag) {
        regexExec = Function.call.bind(RegExp.prototype.exec);
        isRegexMarker = {};

        var throwRegexMarker = function throwRegexMarker() {
          throw isRegexMarker;
        };

        badStringifier = {
          toString: throwRegexMarker,
          valueOf: throwRegexMarker
        };

        if (_typeof4(Symbol.toPrimitive) === 'symbol') {
          badStringifier[Symbol.toPrimitive] = throwRegexMarker;
        }
      }

      var toStr = Object.prototype.toString;
      var regexClass = '[object RegExp]';
      module.exports = hasToStringTag // eslint-disable-next-line consistent-return
      ? function isRegex(value) {
        if (!value || _typeof4(value) !== 'object') {
          return false;
        }

        try {
          regexExec(value, badStringifier);
        } catch (e) {
          return e === isRegexMarker;
        }
      } : function isRegex(value) {
        // In older browsers, typeof regex incorrectly returns 'function'
        if (!value || _typeof4(value) !== 'object' && typeof value !== 'function') {
          return false;
        }

        return toStr.call(value) === regexClass;
      };
      /***/
    },
    /* 479 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var define = __webpack_require__(108);

      var callBind = __webpack_require__(274);

      var implementation = __webpack_require__(279);

      var getPolyfill = __webpack_require__(280);

      var shim = __webpack_require__(480);

      var flagsBound = callBind(implementation);
      define(flagsBound, {
        getPolyfill: getPolyfill,
        implementation: implementation,
        shim: shim
      });
      module.exports = flagsBound;
      /***/
    },
    /* 480 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var supportsDescriptors = __webpack_require__(108).supportsDescriptors;

      var getPolyfill = __webpack_require__(280);

      var gOPD = Object.getOwnPropertyDescriptor;
      var defineProperty = Object.defineProperty;
      var TypeErr = TypeError;
      var getProto = Object.getPrototypeOf;
      var regex = /a/;

      module.exports = function shimFlags() {
        if (!supportsDescriptors || !getProto) {
          throw new TypeErr('RegExp.prototype.flags requires a true ES5 environment that supports property descriptors');
        }

        var polyfill = getPolyfill();
        var proto = getProto(regex);
        var descriptor = gOPD(proto, 'flags');

        if (!descriptor || descriptor.get !== polyfill) {
          defineProperty(proto, 'flags', {
            configurable: true,
            enumerable: false,
            get: polyfill
          });
        }

        return polyfill;
      };
      /***/

    },
    /* 481 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var getDay = Date.prototype.getDay;

      var tryDateObject = function tryDateGetDayCall(value) {
        try {
          getDay.call(value);
          return true;
        } catch (e) {
          return false;
        }
      };

      var toStr = Object.prototype.toString;
      var dateClass = '[object Date]';
      var hasToStringTag = typeof Symbol === 'function' && _typeof4(Symbol.toStringTag) === 'symbol';

      module.exports = function isDateObject(value) {
        if (_typeof4(value) !== 'object' || value === null) {
          return false;
        }

        return hasToStringTag ? tryDateObject(value) : toStr.call(value) === dateClass;
      };
      /***/

    },
    /* 482 */

    /***/
    function (module, exports, __webpack_require__) {
      module.exports = {
        "default": __webpack_require__(483),
        __esModule: true
      };
      /***/
    },
    /* 483 */

    /***/
    function (module, exports, __webpack_require__) {
      __webpack_require__(484);

      module.exports = __webpack_require__(7).Object.assign;
      /***/
    },
    /* 484 */

    /***/
    function (module, exports, __webpack_require__) {
      // 19.1.3.1 Object.assign(target, source)
      var $export = __webpack_require__(9);

      $export($export.S + $export.F, 'Object', {
        assign: __webpack_require__(485)
      });
      /***/
    },
    /* 485 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict"; // 19.1.2.1 Object.assign(target, source, ...)

      var DESCRIPTORS = __webpack_require__(23);

      var getKeys = __webpack_require__(105);

      var gOPS = __webpack_require__(188);

      var pIE = __webpack_require__(128);

      var toObject = __webpack_require__(90);

      var IObject = __webpack_require__(172);

      var $assign = Object.assign; // should work with symbols and should have deterministic property order (V8 bug)

      module.exports = !$assign || __webpack_require__(52)(function () {
        var A = {};
        var B = {}; // eslint-disable-next-line no-undef

        var S = Symbol();
        var K = 'abcdefghijklmnopqrst';
        A[S] = 7;
        K.split('').forEach(function (k) {
          B[k] = k;
        });
        return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
      }) ? function assign(target, source) {
        // eslint-disable-line no-unused-vars
        var T = toObject(target);
        var aLen = arguments.length;
        var index = 1;
        var getSymbols = gOPS.f;
        var isEnum = pIE.f;

        while (aLen > index) {
          var S = IObject(arguments[index++]);
          var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
          var length = keys.length;
          var j = 0;
          var key;

          while (length > j) {
            key = keys[j++];
            if (!DESCRIPTORS || isEnum.call(S, key)) T[key] = S[key];
          }
        }

        return T;
      } : $assign;
      /***/
    },
    /* 486 */

    /***/
    function (module, exports, __webpack_require__) {
      module.exports = {
        "default": __webpack_require__(487),
        __esModule: true
      };
      /***/
    },
    /* 487 */

    /***/
    function (module, exports, __webpack_require__) {
      __webpack_require__(488);

      module.exports = __webpack_require__(7).String.fromCodePoint;
      /***/
    },
    /* 488 */

    /***/
    function (module, exports, __webpack_require__) {
      var $export = __webpack_require__(9);

      var toAbsoluteIndex = __webpack_require__(259);

      var fromCharCode = String.fromCharCode;
      var $fromCodePoint = String.fromCodePoint; // length should be 1, old FF problem

      $export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
        // 21.1.2.2 String.fromCodePoint(...codePoints)
        fromCodePoint: function fromCodePoint(x) {
          // eslint-disable-line no-unused-vars
          var res = [];
          var aLen = arguments.length;
          var i = 0;
          var code;

          while (aLen > i) {
            code = +arguments[i++];
            if (toAbsoluteIndex(code, 0x10ffff) !== code) throw RangeError(code + ' is not a valid code point');
            res.push(code < 0x10000 ? fromCharCode(code) : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00));
          }

          return res.join('');
        }
      });
      /***/
    },
    /* 489 */

    /***/
    function (module, exports, __webpack_require__) {
      module.exports = {
        "default": __webpack_require__(490),
        __esModule: true
      };
      /***/
    },
    /* 490 */

    /***/
    function (module, exports, __webpack_require__) {
      __webpack_require__(91);

      __webpack_require__(491);

      module.exports = __webpack_require__(7).Array.from;
      /***/
    },
    /* 491 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var ctx = __webpack_require__(33);

      var $export = __webpack_require__(9);

      var toObject = __webpack_require__(90);

      var call = __webpack_require__(265);

      var isArrayIter = __webpack_require__(266);

      var toLength = __webpack_require__(130);

      var createProperty = __webpack_require__(492);

      var getIterFn = __webpack_require__(183);

      $export($export.S + $export.F * !__webpack_require__(281)(function (iter) {
        Array.from(iter);
      }), 'Array', {
        // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
        from: function from(arrayLike
        /* , mapfn = undefined, thisArg = undefined */
        ) {
          var O = toObject(arrayLike);
          var C = typeof this == 'function' ? this : Array;
          var aLen = arguments.length;
          var mapfn = aLen > 1 ? arguments[1] : undefined;
          var mapping = mapfn !== undefined;
          var index = 0;
          var iterFn = getIterFn(O);
          var length, result, step, iterator;
          if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2); // if object isn't iterable or it's array with default iterator - use simple case

          if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
            for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
              createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
            }
          } else {
            length = toLength(O.length);

            for (result = new C(length); length > index; index++) {
              createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
            }
          }

          result.length = index;
          return result;
        }
      });
      /***/
    },
    /* 492 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var $defineProperty = __webpack_require__(26);

      var createDesc = __webpack_require__(100);

      module.exports = function (object, index, value) {
        if (index in object) $defineProperty.f(object, index, createDesc(0, value));else object[index] = value;
      };
      /***/

    },
    /* 493 */

    /***/
    function (module, exports, __webpack_require__) {
      module.exports = {
        "default": __webpack_require__(494),
        __esModule: true
      };
      /***/
    },
    /* 494 */

    /***/
    function (module, exports, __webpack_require__) {
      __webpack_require__(133);

      __webpack_require__(91);

      __webpack_require__(102);

      __webpack_require__(495);

      __webpack_require__(496);

      __webpack_require__(497);

      __webpack_require__(498);

      module.exports = __webpack_require__(7).Set;
      /***/
    },
    /* 495 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var strong = __webpack_require__(264);

      var validate = __webpack_require__(191);

      var SET = 'Set'; // 23.2 Set Objects

      module.exports = __webpack_require__(268)(SET, function (get) {
        return function Set() {
          return get(this, arguments.length > 0 ? arguments[0] : undefined);
        };
      }, {
        // 23.2.3.1 Set.prototype.add(value)
        add: function add(value) {
          return strong.def(validate(this, SET), value = value === 0 ? 0 : value, value);
        }
      }, strong);
      /***/
    },
    /* 496 */

    /***/
    function (module, exports, __webpack_require__) {
      // https://github.com/DavidBruant/Map-Set.prototype.toJSON
      var $export = __webpack_require__(9);

      $export($export.P + $export.R, 'Set', {
        toJSON: __webpack_require__(269)('Set')
      });
      /***/
    },
    /* 497 */

    /***/
    function (module, exports, __webpack_require__) {
      // https://tc39.github.io/proposal-setmap-offrom/#sec-set.of
      __webpack_require__(270)('Set');
      /***/

    },
    /* 498 */

    /***/
    function (module, exports, __webpack_require__) {
      // https://tc39.github.io/proposal-setmap-offrom/#sec-set.from
      __webpack_require__(271)('Set');
      /***/

    },
    /* 499 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      __webpack_require__(500);

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;

      var _unicodeTrie = _interopRequireDefault(__webpack_require__(501));

      var _base64Js = _interopRequireDefault(__webpack_require__(503));

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          default: obj
        };
      }

      var categories = ["Cc", "Zs", "Po", "Sc", "Ps", "Pe", "Sm", "Pd", "Nd", "Lu", "Sk", "Pc", "Ll", "So", "Lo", "Pi", "Cf", "No", "Pf", "Lt", "Lm", "Mn", "Me", "Mc", "Nl", "Zl", "Zp", "Cs", "Co"];
      var combiningClasses = ["Not_Reordered", "Above", "Above_Right", "Below", "Attached_Above_Right", "Attached_Below", "Overlay", "Iota_Subscript", "Double_Below", "Double_Above", "Below_Right", "Above_Left", "CCC10", "CCC11", "CCC12", "CCC13", "CCC14", "CCC15", "CCC16", "CCC17", "CCC18", "CCC19", "CCC20", "CCC21", "CCC22", "CCC23", "CCC24", "CCC25", "CCC30", "CCC31", "CCC32", "CCC27", "CCC28", "CCC29", "CCC33", "CCC34", "CCC35", "CCC36", "Nukta", "Virama", "CCC84", "CCC91", "CCC103", "CCC107", "CCC118", "CCC122", "CCC129", "CCC130", "CCC132", "Attached_Above", "Below_Left", "Left", "Kana_Voicing", "CCC26", "Right"];
      var scripts = ["Common", "Latin", "Bopomofo", "Inherited", "Greek", "Coptic", "Cyrillic", "Armenian", "Hebrew", "Arabic", "Syriac", "Thaana", "Nko", "Samaritan", "Mandaic", "Devanagari", "Bengali", "Gurmukhi", "Gujarati", "Oriya", "Tamil", "Telugu", "Kannada", "Malayalam", "Sinhala", "Thai", "Lao", "Tibetan", "Myanmar", "Georgian", "Hangul", "Ethiopic", "Cherokee", "Canadian_Aboriginal", "Ogham", "Runic", "Tagalog", "Hanunoo", "Buhid", "Tagbanwa", "Khmer", "Mongolian", "Limbu", "Tai_Le", "New_Tai_Lue", "Buginese", "Tai_Tham", "Balinese", "Sundanese", "Batak", "Lepcha", "Ol_Chiki", "Braille", "Glagolitic", "Tifinagh", "Han", "Hiragana", "Katakana", "Yi", "Lisu", "Vai", "Bamum", "Syloti_Nagri", "Phags_Pa", "Saurashtra", "Kayah_Li", "Rejang", "Javanese", "Cham", "Tai_Viet", "Meetei_Mayek", "null", "Linear_B", "Lycian", "Carian", "Old_Italic", "Gothic", "Old_Permic", "Ugaritic", "Old_Persian", "Deseret", "Shavian", "Osmanya", "Osage", "Elbasan", "Caucasian_Albanian", "Linear_A", "Cypriot", "Imperial_Aramaic", "Palmyrene", "Nabataean", "Hatran", "Phoenician", "Lydian", "Meroitic_Hieroglyphs", "Meroitic_Cursive", "Kharoshthi", "Old_South_Arabian", "Old_North_Arabian", "Manichaean", "Avestan", "Inscriptional_Parthian", "Inscriptional_Pahlavi", "Psalter_Pahlavi", "Old_Turkic", "Old_Hungarian", "Hanifi_Rohingya", "Old_Sogdian", "Sogdian", "Elymaic", "Brahmi", "Kaithi", "Sora_Sompeng", "Chakma", "Mahajani", "Sharada", "Khojki", "Multani", "Khudawadi", "Grantha", "Newa", "Tirhuta", "Siddham", "Modi", "Takri", "Ahom", "Dogra", "Warang_Citi", "Nandinagari", "Zanabazar_Square", "Soyombo", "Pau_Cin_Hau", "Bhaiksuki", "Marchen", "Masaram_Gondi", "Gunjala_Gondi", "Makasar", "Cuneiform", "Egyptian_Hieroglyphs", "Anatolian_Hieroglyphs", "Mro", "Bassa_Vah", "Pahawh_Hmong", "Medefaidrin", "Miao", "Tangut", "Nushu", "Duployan", "SignWriting", "Nyiakeng_Puachue_Hmong", "Wancho", "Mende_Kikakui", "Adlam"];
      var eaw = ["N", "Na", "A", "W", "H", "F"];
      var data = {
        categories: categories,
        combiningClasses: combiningClasses,
        scripts: scripts,
        eaw: eaw
      };
      var data$1 = "";
      var trieData = {
        data: data$1
      };

      var log2 = Math.log2 || function (n) {
        return Math.log(n) / Math.LN2;
      };

      var bits = function bits(n) {
        return log2(n) + 1 | 0;
      };

      var buildUnicodeProperties = function buildUnicodeProperties(data, trie) {
        // compute the number of bits stored for each field
        var CATEGORY_BITS = bits(data.categories.length - 1);
        var COMBINING_BITS = bits(data.combiningClasses.length - 1);
        var SCRIPT_BITS = bits(data.scripts.length - 1);
        var EAW_BITS = bits(data.eaw.length - 1);
        var NUMBER_BITS = 10; // compute shift and mask values for each field

        var CATEGORY_SHIFT = COMBINING_BITS + SCRIPT_BITS + EAW_BITS + NUMBER_BITS;
        var COMBINING_SHIFT = SCRIPT_BITS + EAW_BITS + NUMBER_BITS;
        var SCRIPT_SHIFT = EAW_BITS + NUMBER_BITS;
        var EAW_SHIFT = NUMBER_BITS;
        var CATEGORY_MASK = (1 << CATEGORY_BITS) - 1;
        var COMBINING_MASK = (1 << COMBINING_BITS) - 1;
        var SCRIPT_MASK = (1 << SCRIPT_BITS) - 1;
        var EAW_MASK = (1 << EAW_BITS) - 1;
        var NUMBER_MASK = (1 << NUMBER_BITS) - 1;

        var getCategory = function getCategory(codePoint) {
          var val = trie.get(codePoint);
          return data.categories[val >> CATEGORY_SHIFT & CATEGORY_MASK];
        };

        var getCombiningClass = function getCombiningClass(codePoint) {
          var val = trie.get(codePoint);
          return data.combiningClasses[val >> COMBINING_SHIFT & COMBINING_MASK];
        };

        var getScript = function getScript(codePoint) {
          var val = trie.get(codePoint);
          return data.scripts[val >> SCRIPT_SHIFT & SCRIPT_MASK];
        };

        var getEastAsianWidth = function getEastAsianWidth(codePoint) {
          var val = trie.get(codePoint);
          return data.eaw[val >> EAW_SHIFT & EAW_MASK];
        };

        var getNumericValue = function getNumericValue(codePoint) {
          var val = trie.get(codePoint);
          var num = val & NUMBER_MASK;

          if (num === 0) {
            return null;
          } else if (num <= 50) {
            return num - 1;
          } else if (num < 0x1e0) {
            var numerator = (num >> 4) - 12;
            var denominator = (num & 0xf) + 1;
            return numerator / denominator;
          } else if (num < 0x300) {
            val = (num >> 5) - 14;
            var exp = (num & 0x1f) + 2;

            while (exp > 0) {
              val *= 10;
              exp--;
            }

            return val;
          } else {
            val = (num >> 2) - 0xbf;

            var _exp = (num & 3) + 1;

            while (_exp > 0) {
              val *= 60;
              _exp--;
            }

            return val;
          }
        };

        var isAlphabetic = function isAlphabetic(codePoint) {
          var category = getCategory(codePoint);
          return category === 'Lu' || category === 'Ll' || category === 'Lt' || category === 'Lm' || category === 'Lo' || category === 'Nl';
        };

        var isDigit = function isDigit(codePoint) {
          return getCategory(codePoint) === 'Nd';
        };

        var isPunctuation = function isPunctuation(codePoint) {
          var category = getCategory(codePoint);
          return category === 'Pc' || category === 'Pd' || category === 'Pe' || category === 'Pf' || category === 'Pi' || category === 'Po' || category === 'Ps';
        };

        var isLowerCase = function isLowerCase(codePoint) {
          return getCategory(codePoint) === 'Ll';
        };

        var isUpperCase = function isUpperCase(codePoint) {
          return getCategory(codePoint) === 'Lu';
        };

        var isTitleCase = function isTitleCase(codePoint) {
          return getCategory(codePoint) === 'Lt';
        };

        var isWhiteSpace = function isWhiteSpace(codePoint) {
          var category = getCategory(codePoint);
          return category === 'Zs' || category === 'Zl' || category === 'Zp';
        };

        var isBaseForm = function isBaseForm(codePoint) {
          var category = getCategory(codePoint);
          return category === 'Nd' || category === 'No' || category === 'Nl' || category === 'Lu' || category === 'Ll' || category === 'Lt' || category === 'Lm' || category === 'Lo' || category === 'Me' || category === 'Mc';
        };

        var isMark = function isMark(codePoint) {
          var category = getCategory(codePoint);
          return category === 'Mn' || category === 'Me' || category === 'Mc';
        };

        return {
          getCategory: getCategory,
          getCombiningClass: getCombiningClass,
          getScript: getScript,
          getEastAsianWidth: getEastAsianWidth,
          getNumericValue: getNumericValue,
          isAlphabetic: isAlphabetic,
          isDigit: isDigit,
          isPunctuation: isPunctuation,
          isLowerCase: isLowerCase,
          isUpperCase: isUpperCase,
          isTitleCase: isTitleCase,
          isWhiteSpace: isWhiteSpace,
          isBaseForm: isBaseForm,
          isMark: isMark
        };
      };

      var trie = new _unicodeTrie.default(_base64Js.default.toByteArray(trieData.data));
      var unicodeProperties = buildUnicodeProperties(data, trie);
      var _default = unicodeProperties;
      exports.default = _default;
      /***/
    },
    /* 500 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(1);

      var log = Math.log;
      var LN2 = Math.LN2; // `Math.log2` method
      // https://tc39.github.io/ecma262/#sec-math.log2

      $({
        target: 'Math',
        stat: true
      }, {
        log2: function log2(x) {
          return log(x) / LN2;
        }
      });
      /***/
    },
    /* 501 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      __webpack_require__(28);

      __webpack_require__(46);

      __webpack_require__(61);

      __webpack_require__(32);

      __webpack_require__(62);

      __webpack_require__(134);

      __webpack_require__(63);

      __webpack_require__(64);

      __webpack_require__(65);

      __webpack_require__(66);

      __webpack_require__(67);

      __webpack_require__(68);

      __webpack_require__(69);

      __webpack_require__(70);

      __webpack_require__(71);

      __webpack_require__(72);

      __webpack_require__(73);

      __webpack_require__(74);

      __webpack_require__(75);

      __webpack_require__(76);

      __webpack_require__(77);

      __webpack_require__(78);

      __webpack_require__(79);

      __webpack_require__(80);

      __webpack_require__(81);

      __webpack_require__(82);

      __webpack_require__(83);

      __webpack_require__(84);

      __webpack_require__(85);

      var inflate = __webpack_require__(135);

      var _require = __webpack_require__(502),
          swap32LE = _require.swap32LE; // Shift size for getting the index-1 table offset.


      var SHIFT_1 = 6 + 5; // Shift size for getting the index-2 table offset.

      var SHIFT_2 = 5; // Difference between the two shift sizes,
      // for getting an index-1 offset from an index-2 offset. 6=11-5

      var SHIFT_1_2 = SHIFT_1 - SHIFT_2; // Number of index-1 entries for the BMP. 32=0x20
      // This part of the index-1 table is omitted from the serialized form.

      var OMITTED_BMP_INDEX_1_LENGTH = 0x10000 >> SHIFT_1; // Number of entries in an index-2 block. 64=0x40

      var INDEX_2_BLOCK_LENGTH = 1 << SHIFT_1_2; // Mask for getting the lower bits for the in-index-2-block offset. */

      var INDEX_2_MASK = INDEX_2_BLOCK_LENGTH - 1; // Shift size for shifting left the index array values.
      // Increases possible data size with 16-bit index values at the cost
      // of compactability.
      // This requires data blocks to be aligned by DATA_GRANULARITY.

      var INDEX_SHIFT = 2; // Number of entries in a data block. 32=0x20

      var DATA_BLOCK_LENGTH = 1 << SHIFT_2; // Mask for getting the lower bits for the in-data-block offset.

      var DATA_MASK = DATA_BLOCK_LENGTH - 1; // The part of the index-2 table for U+D800..U+DBFF stores values for
      // lead surrogate code _units_ not code _points_.
      // Values for lead surrogate code _points_ are indexed with this portion of the table.
      // Length=32=0x20=0x400>>SHIFT_2. (There are 1024=0x400 lead surrogates.)

      var LSCP_INDEX_2_OFFSET = 0x10000 >> SHIFT_2;
      var LSCP_INDEX_2_LENGTH = 0x400 >> SHIFT_2; // Count the lengths of both BMP pieces. 2080=0x820

      var INDEX_2_BMP_LENGTH = LSCP_INDEX_2_OFFSET + LSCP_INDEX_2_LENGTH; // The 2-byte UTF-8 version of the index-2 table follows at offset 2080=0x820.
      // Length 32=0x20 for lead bytes C0..DF, regardless of SHIFT_2.

      var UTF8_2B_INDEX_2_OFFSET = INDEX_2_BMP_LENGTH;
      var UTF8_2B_INDEX_2_LENGTH = 0x800 >> 6; // U+0800 is the first code point after 2-byte UTF-8
      // The index-1 table, only used for supplementary code points, at offset 2112=0x840.
      // Variable length, for code points up to highStart, where the last single-value range starts.
      // Maximum length 512=0x200=0x100000>>SHIFT_1.
      // (For 0x100000 supplementary code points U+10000..U+10ffff.)
      //
      // The part of the index-2 table for supplementary code points starts
      // after this index-1 table.
      //
      // Both the index-1 table and the following part of the index-2 table
      // are omitted completely if there is only BMP data.

      var INDEX_1_OFFSET = UTF8_2B_INDEX_2_OFFSET + UTF8_2B_INDEX_2_LENGTH; // The alignment size of a data block. Also the granularity for compaction.

      var DATA_GRANULARITY = 1 << INDEX_SHIFT;

      var UnicodeTrie = /*#__PURE__*/function () {
        function UnicodeTrie(data) {
          var isBuffer = typeof data.readUInt32BE === 'function' && typeof data.slice === 'function';

          if (isBuffer || data instanceof Uint8Array) {
            // read binary format
            var uncompressedLength;

            if (isBuffer) {
              this.highStart = data.readUInt32LE(0);
              this.errorValue = data.readUInt32LE(4);
              uncompressedLength = data.readUInt32LE(8);
              data = data.slice(12);
            } else {
              var view = new DataView(data.buffer);
              this.highStart = view.getUint32(0, true);
              this.errorValue = view.getUint32(4, true);
              uncompressedLength = view.getUint32(8, true);
              data = data.subarray(12);
            } // double inflate the actual trie data


            data = inflate(data, new Uint8Array(uncompressedLength));
            data = inflate(data, new Uint8Array(uncompressedLength)); // swap bytes from little-endian

            swap32LE(data);
            this.data = new Uint32Array(data.buffer);
          } else {
            // pre-parsed data
            var _data = data;
            this.data = _data.data;
            this.highStart = _data.highStart;
            this.errorValue = _data.errorValue;
          }
        }

        var _proto = UnicodeTrie.prototype;

        _proto.get = function get(codePoint) {
          var index;

          if (codePoint < 0 || codePoint > 0x10ffff) {
            return this.errorValue;
          }

          if (codePoint < 0xd800 || codePoint > 0xdbff && codePoint <= 0xffff) {
            // Ordinary BMP code point, excluding leading surrogates.
            // BMP uses a single level lookup.  BMP index starts at offset 0 in the index.
            // data is stored in the index array itself.
            index = (this.data[codePoint >> SHIFT_2] << INDEX_SHIFT) + (codePoint & DATA_MASK);
            return this.data[index];
          }

          if (codePoint <= 0xffff) {
            // Lead Surrogate Code Point.  A Separate index section is stored for
            // lead surrogate code units and code points.
            //   The main index has the code unit data.
            //   For this function, we need the code point data.
            index = (this.data[LSCP_INDEX_2_OFFSET + (codePoint - 0xd800 >> SHIFT_2)] << INDEX_SHIFT) + (codePoint & DATA_MASK);
            return this.data[index];
          }

          if (codePoint < this.highStart) {
            // Supplemental code point, use two-level lookup.
            index = this.data[INDEX_1_OFFSET - OMITTED_BMP_INDEX_1_LENGTH + (codePoint >> SHIFT_1)];
            index = this.data[index + (codePoint >> SHIFT_2 & INDEX_2_MASK)];
            index = (index << INDEX_SHIFT) + (codePoint & DATA_MASK);
            return this.data[index];
          }

          return this.data[this.data.length - DATA_GRANULARITY];
        };

        return UnicodeTrie;
      }();

      module.exports = UnicodeTrie;
      /***/
    },
    /* 502 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      __webpack_require__(28);

      __webpack_require__(61);

      __webpack_require__(32);

      __webpack_require__(62);

      __webpack_require__(134);

      __webpack_require__(63);

      __webpack_require__(64);

      __webpack_require__(65);

      __webpack_require__(66);

      __webpack_require__(67);

      __webpack_require__(68);

      __webpack_require__(69);

      __webpack_require__(70);

      __webpack_require__(71);

      __webpack_require__(72);

      __webpack_require__(73);

      __webpack_require__(74);

      __webpack_require__(75);

      __webpack_require__(76);

      __webpack_require__(77);

      __webpack_require__(78);

      __webpack_require__(79);

      __webpack_require__(80);

      __webpack_require__(81);

      __webpack_require__(82);

      __webpack_require__(83);

      __webpack_require__(84);

      __webpack_require__(85);

      var isBigEndian = new Uint8Array(new Uint32Array([0x12345678]).buffer)[0] === 0x12;

      var swap = function swap(b, n, m) {
        var i = b[n];
        b[n] = b[m];
        b[m] = i;
      };

      var swap32 = function swap32(array) {
        var len = array.length;

        for (var i = 0; i < len; i += 4) {
          swap(array, i, i + 3);
          swap(array, i + 1, i + 2);
        }
      };

      var swap32LE = function swap32LE(array) {
        if (isBigEndian) {
          swap32(array);
        }
      };

      module.exports = {
        swap32LE: swap32LE
      };
      /***/
    },
    /* 503 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      __webpack_require__(192);

      __webpack_require__(28);

      __webpack_require__(219);

      __webpack_require__(61);

      __webpack_require__(32);

      __webpack_require__(62);

      __webpack_require__(63);

      __webpack_require__(64);

      __webpack_require__(65);

      __webpack_require__(66);

      __webpack_require__(67);

      __webpack_require__(68);

      __webpack_require__(69);

      __webpack_require__(70);

      __webpack_require__(71);

      __webpack_require__(72);

      __webpack_require__(73);

      __webpack_require__(74);

      __webpack_require__(75);

      __webpack_require__(76);

      __webpack_require__(77);

      __webpack_require__(78);

      __webpack_require__(79);

      __webpack_require__(80);

      __webpack_require__(81);

      __webpack_require__(82);

      __webpack_require__(83);

      __webpack_require__(84);

      __webpack_require__(85);

      exports.byteLength = byteLength;
      exports.toByteArray = toByteArray;
      exports.fromByteArray = fromByteArray;
      var lookup = [];
      var revLookup = [];
      var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
      var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

      for (var i = 0, len = code.length; i < len; ++i) {
        lookup[i] = code[i];
        revLookup[code.charCodeAt(i)] = i;
      } // Support decoding URL-safe base64 strings, as Node.js does.
      // See: https://en.wikipedia.org/wiki/Base64#URL_applications


      revLookup['-'.charCodeAt(0)] = 62;
      revLookup['_'.charCodeAt(0)] = 63;

      function getLens(b64) {
        var len = b64.length;

        if (len % 4 > 0) {
          throw new Error('Invalid string. Length must be a multiple of 4');
        } // Trim off extra bytes after placeholder bytes are found
        // See: https://github.com/beatgammit/base64-js/issues/42


        var validLen = b64.indexOf('=');
        if (validLen === -1) validLen = len;
        var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
        return [validLen, placeHoldersLen];
      } // base64 is 4/3 + up to two characters of the original data


      function byteLength(b64) {
        var lens = getLens(b64);
        var validLen = lens[0];
        var placeHoldersLen = lens[1];
        return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
      }

      function _byteLength(b64, validLen, placeHoldersLen) {
        return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
      }

      function toByteArray(b64) {
        var tmp;
        var lens = getLens(b64);
        var validLen = lens[0];
        var placeHoldersLen = lens[1];
        var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
        var curByte = 0; // if there are placeholders, only get up to the last complete 4 chars

        var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
        var i;

        for (i = 0; i < len; i += 4) {
          tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
          arr[curByte++] = tmp >> 16 & 0xFF;
          arr[curByte++] = tmp >> 8 & 0xFF;
          arr[curByte++] = tmp & 0xFF;
        }

        if (placeHoldersLen === 2) {
          tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
          arr[curByte++] = tmp & 0xFF;
        }

        if (placeHoldersLen === 1) {
          tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
          arr[curByte++] = tmp >> 8 & 0xFF;
          arr[curByte++] = tmp & 0xFF;
        }

        return arr;
      }

      function tripletToBase64(num) {
        return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
      }

      function encodeChunk(uint8, start, end) {
        var tmp;
        var output = [];

        for (var i = start; i < end; i += 3) {
          tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
          output.push(tripletToBase64(tmp));
        }

        return output.join('');
      }

      function fromByteArray(uint8) {
        var tmp;
        var len = uint8.length;
        var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes

        var parts = [];
        var maxChunkLength = 16383; // must be multiple of 3
        // go through the array every three bytes, we'll deal with trailing stuff later

        for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
          parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
        } // pad the end with zeros, but make sure to not forget the extra bytes


        if (extraBytes === 1) {
          tmp = uint8[len - 1];
          parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + '==');
        } else if (extraBytes === 2) {
          tmp = (uint8[len - 2] << 8) + uint8[len - 1];
          parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + '=');
        }

        return parts.join('');
      }
      /***/

    },
    /* 504 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      __webpack_require__(28);

      __webpack_require__(46);

      __webpack_require__(61);

      __webpack_require__(32);

      __webpack_require__(62);

      __webpack_require__(134);

      __webpack_require__(63);

      __webpack_require__(64);

      __webpack_require__(65);

      __webpack_require__(66);

      __webpack_require__(67);

      __webpack_require__(68);

      __webpack_require__(69);

      __webpack_require__(70);

      __webpack_require__(71);

      __webpack_require__(72);

      __webpack_require__(73);

      __webpack_require__(74);

      __webpack_require__(75);

      __webpack_require__(76);

      __webpack_require__(77);

      __webpack_require__(78);

      __webpack_require__(79);

      __webpack_require__(80);

      __webpack_require__(81);

      __webpack_require__(82);

      __webpack_require__(83);

      __webpack_require__(84);

      __webpack_require__(85); // Generated by CoffeeScript 1.7.1


      var UnicodeTrie, inflate;
      inflate = __webpack_require__(135);

      UnicodeTrie = function () {
        var DATA_BLOCK_LENGTH, DATA_GRANULARITY, DATA_MASK, INDEX_1_OFFSET, INDEX_2_BLOCK_LENGTH, INDEX_2_BMP_LENGTH, INDEX_2_MASK, INDEX_SHIFT, LSCP_INDEX_2_LENGTH, LSCP_INDEX_2_OFFSET, OMITTED_BMP_INDEX_1_LENGTH, SHIFT_1, SHIFT_1_2, SHIFT_2, UTF8_2B_INDEX_2_LENGTH, UTF8_2B_INDEX_2_OFFSET;
        SHIFT_1 = 6 + 5;
        SHIFT_2 = 5;
        SHIFT_1_2 = SHIFT_1 - SHIFT_2;
        OMITTED_BMP_INDEX_1_LENGTH = 0x10000 >> SHIFT_1;
        INDEX_2_BLOCK_LENGTH = 1 << SHIFT_1_2;
        INDEX_2_MASK = INDEX_2_BLOCK_LENGTH - 1;
        INDEX_SHIFT = 2;
        DATA_BLOCK_LENGTH = 1 << SHIFT_2;
        DATA_MASK = DATA_BLOCK_LENGTH - 1;
        LSCP_INDEX_2_OFFSET = 0x10000 >> SHIFT_2;
        LSCP_INDEX_2_LENGTH = 0x400 >> SHIFT_2;
        INDEX_2_BMP_LENGTH = LSCP_INDEX_2_OFFSET + LSCP_INDEX_2_LENGTH;
        UTF8_2B_INDEX_2_OFFSET = INDEX_2_BMP_LENGTH;
        UTF8_2B_INDEX_2_LENGTH = 0x800 >> 6;
        INDEX_1_OFFSET = UTF8_2B_INDEX_2_OFFSET + UTF8_2B_INDEX_2_LENGTH;
        DATA_GRANULARITY = 1 << INDEX_SHIFT;

        function UnicodeTrie(data) {
          var isBuffer, uncompressedLength, view;
          isBuffer = typeof data.readUInt32BE === 'function' && typeof data.slice === 'function';

          if (isBuffer || data instanceof Uint8Array) {
            if (isBuffer) {
              this.highStart = data.readUInt32BE(0);
              this.errorValue = data.readUInt32BE(4);
              uncompressedLength = data.readUInt32BE(8);
              data = data.slice(12);
            } else {
              view = new DataView(data.buffer);
              this.highStart = view.getUint32(0);
              this.errorValue = view.getUint32(4);
              uncompressedLength = view.getUint32(8);
              data = data.subarray(12);
            }

            data = inflate(data, new Uint8Array(uncompressedLength));
            data = inflate(data, new Uint8Array(uncompressedLength));
            this.data = new Uint32Array(data.buffer);
          } else {
            this.data = data.data, this.highStart = data.highStart, this.errorValue = data.errorValue;
          }
        }

        UnicodeTrie.prototype.get = function (codePoint) {
          var index;

          if (codePoint < 0 || codePoint > 0x10ffff) {
            return this.errorValue;
          }

          if (codePoint < 0xd800 || codePoint > 0xdbff && codePoint <= 0xffff) {
            index = (this.data[codePoint >> SHIFT_2] << INDEX_SHIFT) + (codePoint & DATA_MASK);
            return this.data[index];
          }

          if (codePoint <= 0xffff) {
            index = (this.data[LSCP_INDEX_2_OFFSET + (codePoint - 0xd800 >> SHIFT_2)] << INDEX_SHIFT) + (codePoint & DATA_MASK);
            return this.data[index];
          }

          if (codePoint < this.highStart) {
            index = this.data[INDEX_1_OFFSET - OMITTED_BMP_INDEX_1_LENGTH + (codePoint >> SHIFT_1)];
            index = this.data[index + (codePoint >> SHIFT_2 & INDEX_2_MASK)];
            index = (index << INDEX_SHIFT) + (codePoint & DATA_MASK);
            return this.data[index];
          }

          return this.data[this.data.length - DATA_GRANULARITY];
        };

        return UnicodeTrie;
      }();

      module.exports = UnicodeTrie;
      /***/
    },
    /* 505 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      __webpack_require__(197);

      __webpack_require__(207);

      __webpack_require__(208);

      __webpack_require__(213);

      __webpack_require__(28);

      __webpack_require__(46);

      __webpack_require__(157);

      __webpack_require__(32);

      __webpack_require__(118);

      __webpack_require__(229);

      __webpack_require__(159);

      __webpack_require__(160);

      __webpack_require__(120);

      __webpack_require__(506);

      function _createForOfIteratorHelperLoose(o, allowArrayLike) {
        var it;

        if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
          if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
            if (it) o = it;
            var i = 0;
            return function () {
              if (i >= o.length) return {
                done: true
              };
              return {
                done: false,
                value: o[i++]
              };
            };
          }

          throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }

        it = o[Symbol.iterator]();
        return it.next.bind(it);
      }

      function _unsupportedIterableToArray(o, minLen) {
        if (!o) return;
        if (typeof o === "string") return _arrayLikeToArray(o, minLen);
        var n = Object.prototype.toString.call(o).slice(8, -1);
        if (n === "Object" && o.constructor) n = o.constructor.name;
        if (n === "Map" || n === "Set") return Array.from(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
      }

      function _arrayLikeToArray(arr, len) {
        if (len == null || len > arr.length) len = arr.length;

        for (var i = 0, arr2 = new Array(len); i < len; i++) {
          arr2[i] = arr[i];
        }

        return arr2;
      }

      var INITIAL_STATE = 1;
      var FAIL_STATE = 0;
      /**
       * A StateMachine represents a deterministic finite automaton.
       * It can perform matches over a sequence of values, similar to a regular expression.
       */

      var StateMachine = /*#__PURE__*/function () {
        function StateMachine(dfa) {
          this.stateTable = dfa.stateTable;
          this.accepting = dfa.accepting;
          this.tags = dfa.tags;
        }
        /**
         * Returns an iterable object that yields pattern matches over the input sequence.
         * Matches are of the form [startIndex, endIndex, tags].
         */


        var _proto = StateMachine.prototype;

        _proto.match = function match(str) {
          var _ref;

          var self = this;
          return _ref = {}, _ref[Symbol.iterator] = /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
            var state, startRun, lastAccepting, lastState, p, c;
            return regeneratorRuntime.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    state = INITIAL_STATE;
                    startRun = null;
                    lastAccepting = null;
                    lastState = null;
                    p = 0;

                  case 5:
                    if (!(p < str.length)) {
                      _context.next = 21;
                      break;
                    }

                    c = str[p];
                    lastState = state;
                    state = self.stateTable[state][c];

                    if (!(state === FAIL_STATE)) {
                      _context.next = 15;
                      break;
                    }

                    if (!(startRun != null && lastAccepting != null && lastAccepting >= startRun)) {
                      _context.next = 13;
                      break;
                    }

                    _context.next = 13;
                    return [startRun, lastAccepting, self.tags[lastState]];

                  case 13:
                    // reset the state as if we started over from the initial state
                    state = self.stateTable[INITIAL_STATE][c];
                    startRun = null;

                  case 15:
                    // start a run if not in the failure state
                    if (state !== FAIL_STATE && startRun == null) {
                      startRun = p;
                    } // if accepting, mark the potential match end


                    if (self.accepting[state]) {
                      lastAccepting = p;
                    } // reset the state to the initial state if we get into the failure state


                    if (state === FAIL_STATE) {
                      state = INITIAL_STATE;
                    }

                  case 18:
                    p++;
                    _context.next = 5;
                    break;

                  case 21:
                    if (!(startRun != null && lastAccepting != null && lastAccepting >= startRun)) {
                      _context.next = 24;
                      break;
                    }

                    _context.next = 24;
                    return [startRun, lastAccepting, self.tags[state]];

                  case 24:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee);
          }), _ref;
        }
        /**
         * For each match over the input sequence, action functions matching
         * the tag definitions in the input pattern are called with the startIndex,
         * endIndex, and sub-match sequence.
         */
        ;

        _proto.apply = function apply(str, actions) {
          for (var _iterator = _createForOfIteratorHelperLoose(this.match(str)), _step; !(_step = _iterator()).done;) {
            var _step$value = _step.value,
                start = _step$value[0],
                end = _step$value[1],
                tags = _step$value[2];

            for (var _iterator2 = _createForOfIteratorHelperLoose(tags), _step2; !(_step2 = _iterator2()).done;) {
              var tag = _step2.value;

              if (typeof actions[tag] === 'function') {
                actions[tag](start, end, str.slice(start, end + 1));
              }
            }
          }
        };

        return StateMachine;
      }();

      module.exports = StateMachine;
      /***/
    },
    /* 506 */

    /***/
    function (module, exports) {
      /**
       * Copyright (c) 2014-present, Facebook, Inc.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       */
      !function (global) {
        "use strict";

        var Op = Object.prototype;
        var hasOwn = Op.hasOwnProperty;
        var undefined; // More compressible than void 0.

        var $Symbol = typeof Symbol === "function" ? Symbol : {};
        var iteratorSymbol = $Symbol.iterator || "@@iterator";
        var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
        var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
        var inModule = _typeof4(module) === "object";
        var runtime = global.regeneratorRuntime;

        if (runtime) {
          if (inModule) {
            // If regeneratorRuntime is defined globally and we're in a module,
            // make the exports object identical to regeneratorRuntime.
            module.exports = runtime;
          } // Don't bother evaluating the rest of this file if the runtime was
          // already defined globally.


          return;
        } // Define the runtime globally (as expected by generated code) as either
        // module.exports (if we're in a module) or a new, empty object.


        runtime = global.regeneratorRuntime = inModule ? module.exports : {};

        function wrap(innerFn, outerFn, self, tryLocsList) {
          // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
          var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
          var generator = Object.create(protoGenerator.prototype);
          var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,
          // .throw, and .return methods.

          generator._invoke = makeInvokeMethod(innerFn, self, context);
          return generator;
        }

        runtime.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion
        // record like context.tryEntries[i].completion. This interface could
        // have been (and was previously) designed to take a closure to be
        // invoked without arguments, but in all the cases we care about we
        // already have an existing method we want to call, so there's no need
        // to create a new function object. We can even get away with assuming
        // the method takes exactly one argument, since that happens to be true
        // in every case, so we don't have to touch the arguments object. The
        // only additional allocation required is the completion record, which
        // has a stable shape and so hopefully should be cheap to allocate.

        function tryCatch(fn, obj, arg) {
          try {
            return {
              type: "normal",
              arg: fn.call(obj, arg)
            };
          } catch (err) {
            return {
              type: "throw",
              arg: err
            };
          }
        }

        var GenStateSuspendedStart = "suspendedStart";
        var GenStateSuspendedYield = "suspendedYield";
        var GenStateExecuting = "executing";
        var GenStateCompleted = "completed"; // Returning this object from the innerFn has the same effect as
        // breaking out of the dispatch switch statement.

        var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and
        // .constructor.prototype properties for functions that return Generator
        // objects. For full spec compliance, you may wish to configure your
        // minifier not to mangle the names of these two functions.

        function Generator() {}

        function GeneratorFunction() {}

        function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that
        // don't natively support it.


        var IteratorPrototype = {};

        IteratorPrototype[iteratorSymbol] = function () {
          return this;
        };

        var getProto = Object.getPrototypeOf;
        var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

        if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
          // This environment has a native %IteratorPrototype%; use it instead
          // of the polyfill.
          IteratorPrototype = NativeIteratorPrototype;
        }

        var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
        GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
        GeneratorFunctionPrototype.constructor = GeneratorFunction;
        GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction"; // Helper for defining the .next, .throw, and .return methods of the
        // Iterator interface in terms of a single ._invoke method.

        function defineIteratorMethods(prototype) {
          ["next", "throw", "return"].forEach(function (method) {
            prototype[method] = function (arg) {
              return this._invoke(method, arg);
            };
          });
        }

        runtime.isGeneratorFunction = function (genFun) {
          var ctor = typeof genFun === "function" && genFun.constructor;
          return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
          // do is to check its .name property.
          (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
        };

        runtime.mark = function (genFun) {
          if (Object.setPrototypeOf) {
            Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
          } else {
            genFun.__proto__ = GeneratorFunctionPrototype;

            if (!(toStringTagSymbol in genFun)) {
              genFun[toStringTagSymbol] = "GeneratorFunction";
            }
          }

          genFun.prototype = Object.create(Gp);
          return genFun;
        }; // Within the body of any async function, `await x` is transformed to
        // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
        // `hasOwn.call(value, "__await")` to determine if the yielded value is
        // meant to be awaited.


        runtime.awrap = function (arg) {
          return {
            __await: arg
          };
        };

        function AsyncIterator(generator) {
          function invoke(method, arg, resolve, reject) {
            var record = tryCatch(generator[method], generator, arg);

            if (record.type === "throw") {
              reject(record.arg);
            } else {
              var result = record.arg;
              var value = result.value;

              if (value && _typeof4(value) === "object" && hasOwn.call(value, "__await")) {
                return Promise.resolve(value.__await).then(function (value) {
                  invoke("next", value, resolve, reject);
                }, function (err) {
                  invoke("throw", err, resolve, reject);
                });
              }

              return Promise.resolve(value).then(function (unwrapped) {
                // When a yielded Promise is resolved, its final value becomes
                // the .value of the Promise<{value,done}> result for the
                // current iteration. If the Promise is rejected, however, the
                // result for this iteration will be rejected with the same
                // reason. Note that rejections of yielded Promises are not
                // thrown back into the generator function, as is the case
                // when an awaited Promise is rejected. This difference in
                // behavior between yield and await is important, because it
                // allows the consumer to decide what to do with the yielded
                // rejection (swallow it and continue, manually .throw it back
                // into the generator, abandon iteration, whatever). With
                // await, by contrast, there is no opportunity to examine the
                // rejection reason outside the generator function, so the
                // only option is to throw it from the await expression, and
                // let the generator function handle the exception.
                result.value = unwrapped;
                resolve(result);
              }, reject);
            }
          }

          var previousPromise;

          function enqueue(method, arg) {
            function callInvokeWithMethodAndArg() {
              return new Promise(function (resolve, reject) {
                invoke(method, arg, resolve, reject);
              });
            }

            return previousPromise = // If enqueue has been called before, then we want to wait until
            // all previous Promises have been resolved before calling invoke,
            // so that results are always delivered in the correct order. If
            // enqueue has not been called before, then it is important to
            // call invoke immediately, without waiting on a callback to fire,
            // so that the async generator function has the opportunity to do
            // any necessary setup in a predictable way. This predictability
            // is why the Promise constructor synchronously invokes its
            // executor callback, and why async functions synchronously
            // execute code before the first await. Since we implement simple
            // async functions in terms of async generators, it is especially
            // important to get this right, even though it requires care.
            previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later
            // invocations of the iterator.
            callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
          } // Define the unified helper method that is used to implement .next,
          // .throw, and .return (see defineIteratorMethods).


          this._invoke = enqueue;
        }

        defineIteratorMethods(AsyncIterator.prototype);

        AsyncIterator.prototype[asyncIteratorSymbol] = function () {
          return this;
        };

        runtime.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of
        // AsyncIterator objects; they just return a Promise for the value of
        // the final result produced by the iterator.

        runtime.async = function (innerFn, outerFn, self, tryLocsList) {
          var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList));
          return runtime.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
          : iter.next().then(function (result) {
            return result.done ? result.value : iter.next();
          });
        };

        function makeInvokeMethod(innerFn, self, context) {
          var state = GenStateSuspendedStart;
          return function invoke(method, arg) {
            if (state === GenStateExecuting) {
              throw new Error("Generator is already running");
            }

            if (state === GenStateCompleted) {
              if (method === "throw") {
                throw arg;
              } // Be forgiving, per 25.3.3.3.3 of the spec:
              // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume


              return doneResult();
            }

            context.method = method;
            context.arg = arg;

            while (true) {
              var delegate = context.delegate;

              if (delegate) {
                var delegateResult = maybeInvokeDelegate(delegate, context);

                if (delegateResult) {
                  if (delegateResult === ContinueSentinel) continue;
                  return delegateResult;
                }
              }

              if (context.method === "next") {
                // Setting context._sent for legacy support of Babel's
                // function.sent implementation.
                context.sent = context._sent = context.arg;
              } else if (context.method === "throw") {
                if (state === GenStateSuspendedStart) {
                  state = GenStateCompleted;
                  throw context.arg;
                }

                context.dispatchException(context.arg);
              } else if (context.method === "return") {
                context.abrupt("return", context.arg);
              }

              state = GenStateExecuting;
              var record = tryCatch(innerFn, self, context);

              if (record.type === "normal") {
                // If an exception is thrown from innerFn, we leave state ===
                // GenStateExecuting and loop back for another invocation.
                state = context.done ? GenStateCompleted : GenStateSuspendedYield;

                if (record.arg === ContinueSentinel) {
                  continue;
                }

                return {
                  value: record.arg,
                  done: context.done
                };
              } else if (record.type === "throw") {
                state = GenStateCompleted; // Dispatch the exception by looping back around to the
                // context.dispatchException(context.arg) call above.

                context.method = "throw";
                context.arg = record.arg;
              }
            }
          };
        } // Call delegate.iterator[context.method](context.arg) and handle the
        // result, either by returning a { value, done } result from the
        // delegate iterator, or by modifying context.method and context.arg,
        // setting context.delegate to null, and returning the ContinueSentinel.


        function maybeInvokeDelegate(delegate, context) {
          var method = delegate.iterator[context.method];

          if (method === undefined) {
            // A .throw or .return when the delegate iterator has no .throw
            // method always terminates the yield* loop.
            context.delegate = null;

            if (context.method === "throw") {
              if (delegate.iterator.return) {
                // If the delegate iterator has a return method, give it a
                // chance to clean up.
                context.method = "return";
                context.arg = undefined;
                maybeInvokeDelegate(delegate, context);

                if (context.method === "throw") {
                  // If maybeInvokeDelegate(context) changed context.method from
                  // "return" to "throw", let that override the TypeError below.
                  return ContinueSentinel;
                }
              }

              context.method = "throw";
              context.arg = new TypeError("The iterator does not provide a 'throw' method");
            }

            return ContinueSentinel;
          }

          var record = tryCatch(method, delegate.iterator, context.arg);

          if (record.type === "throw") {
            context.method = "throw";
            context.arg = record.arg;
            context.delegate = null;
            return ContinueSentinel;
          }

          var info = record.arg;

          if (!info) {
            context.method = "throw";
            context.arg = new TypeError("iterator result is not an object");
            context.delegate = null;
            return ContinueSentinel;
          }

          if (info.done) {
            // Assign the result of the finished delegate to the temporary
            // variable specified by delegate.resultName (see delegateYield).
            context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).

            context.next = delegate.nextLoc; // If context.method was "throw" but the delegate handled the
            // exception, let the outer generator proceed normally. If
            // context.method was "next", forget context.arg since it has been
            // "consumed" by the delegate iterator. If context.method was
            // "return", allow the original .return call to continue in the
            // outer generator.

            if (context.method !== "return") {
              context.method = "next";
              context.arg = undefined;
            }
          } else {
            // Re-yield the result returned by the delegate method.
            return info;
          } // The delegate iterator is finished, so forget it and continue with
          // the outer generator.


          context.delegate = null;
          return ContinueSentinel;
        } // Define Generator.prototype.{next,throw,return} in terms of the
        // unified ._invoke helper method.


        defineIteratorMethods(Gp);
        Gp[toStringTagSymbol] = "Generator"; // A Generator should always return itself as the iterator object when the
        // @@iterator function is called on it. Some browsers' implementations of the
        // iterator prototype chain incorrectly implement this, causing the Generator
        // object to not be returned from this call. This ensures that doesn't happen.
        // See https://github.com/facebook/regenerator/issues/274 for more details.

        Gp[iteratorSymbol] = function () {
          return this;
        };

        Gp.toString = function () {
          return "[object Generator]";
        };

        function pushTryEntry(locs) {
          var entry = {
            tryLoc: locs[0]
          };

          if (1 in locs) {
            entry.catchLoc = locs[1];
          }

          if (2 in locs) {
            entry.finallyLoc = locs[2];
            entry.afterLoc = locs[3];
          }

          this.tryEntries.push(entry);
        }

        function resetTryEntry(entry) {
          var record = entry.completion || {};
          record.type = "normal";
          delete record.arg;
          entry.completion = record;
        }

        function Context(tryLocsList) {
          // The root entry object (effectively a try statement without a catch
          // or a finally block) gives us a place to store values thrown from
          // locations where there is no enclosing try statement.
          this.tryEntries = [{
            tryLoc: "root"
          }];
          tryLocsList.forEach(pushTryEntry, this);
          this.reset(true);
        }

        runtime.keys = function (object) {
          var keys = [];

          for (var key in object) {
            keys.push(key);
          }

          keys.reverse(); // Rather than returning an object with a next method, we keep
          // things simple and return the next function itself.

          return function next() {
            while (keys.length) {
              var key = keys.pop();

              if (key in object) {
                next.value = key;
                next.done = false;
                return next;
              }
            } // To avoid creating an additional object, we just hang the .value
            // and .done properties off the next function object itself. This
            // also ensures that the minifier will not anonymize the function.


            next.done = true;
            return next;
          };
        };

        function values(iterable) {
          if (iterable) {
            var iteratorMethod = iterable[iteratorSymbol];

            if (iteratorMethod) {
              return iteratorMethod.call(iterable);
            }

            if (typeof iterable.next === "function") {
              return iterable;
            }

            if (!isNaN(iterable.length)) {
              var i = -1,
                  next = function next() {
                while (++i < iterable.length) {
                  if (hasOwn.call(iterable, i)) {
                    next.value = iterable[i];
                    next.done = false;
                    return next;
                  }
                }

                next.value = undefined;
                next.done = true;
                return next;
              };

              return next.next = next;
            }
          } // Return an iterator with no values.


          return {
            next: doneResult
          };
        }

        runtime.values = values;

        function doneResult() {
          return {
            value: undefined,
            done: true
          };
        }

        Context.prototype = {
          constructor: Context,
          reset: function reset(skipTempReset) {
            this.prev = 0;
            this.next = 0; // Resetting context._sent for legacy support of Babel's
            // function.sent implementation.

            this.sent = this._sent = undefined;
            this.done = false;
            this.delegate = null;
            this.method = "next";
            this.arg = undefined;
            this.tryEntries.forEach(resetTryEntry);

            if (!skipTempReset) {
              for (var name in this) {
                // Not sure about the optimal order of these conditions:
                if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
                  this[name] = undefined;
                }
              }
            }
          },
          stop: function stop() {
            this.done = true;
            var rootEntry = this.tryEntries[0];
            var rootRecord = rootEntry.completion;

            if (rootRecord.type === "throw") {
              throw rootRecord.arg;
            }

            return this.rval;
          },
          dispatchException: function dispatchException(exception) {
            if (this.done) {
              throw exception;
            }

            var context = this;

            function handle(loc, caught) {
              record.type = "throw";
              record.arg = exception;
              context.next = loc;

              if (caught) {
                // If the dispatched exception was caught by a catch block,
                // then let that catch block handle the exception normally.
                context.method = "next";
                context.arg = undefined;
              }

              return !!caught;
            }

            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
              var entry = this.tryEntries[i];
              var record = entry.completion;

              if (entry.tryLoc === "root") {
                // Exception thrown outside of any try block that could handle
                // it, so set the completion value of the entire function to
                // throw the exception.
                return handle("end");
              }

              if (entry.tryLoc <= this.prev) {
                var hasCatch = hasOwn.call(entry, "catchLoc");
                var hasFinally = hasOwn.call(entry, "finallyLoc");

                if (hasCatch && hasFinally) {
                  if (this.prev < entry.catchLoc) {
                    return handle(entry.catchLoc, true);
                  } else if (this.prev < entry.finallyLoc) {
                    return handle(entry.finallyLoc);
                  }
                } else if (hasCatch) {
                  if (this.prev < entry.catchLoc) {
                    return handle(entry.catchLoc, true);
                  }
                } else if (hasFinally) {
                  if (this.prev < entry.finallyLoc) {
                    return handle(entry.finallyLoc);
                  }
                } else {
                  throw new Error("try statement without catch or finally");
                }
              }
            }
          },
          abrupt: function abrupt(type, arg) {
            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
              var entry = this.tryEntries[i];

              if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
                var finallyEntry = entry;
                break;
              }
            }

            if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
              // Ignore the finally entry if control is not jumping to a
              // location outside the try/catch block.
              finallyEntry = null;
            }

            var record = finallyEntry ? finallyEntry.completion : {};
            record.type = type;
            record.arg = arg;

            if (finallyEntry) {
              this.method = "next";
              this.next = finallyEntry.finallyLoc;
              return ContinueSentinel;
            }

            return this.complete(record);
          },
          complete: function complete(record, afterLoc) {
            if (record.type === "throw") {
              throw record.arg;
            }

            if (record.type === "break" || record.type === "continue") {
              this.next = record.arg;
            } else if (record.type === "return") {
              this.rval = this.arg = record.arg;
              this.method = "return";
              this.next = "end";
            } else if (record.type === "normal" && afterLoc) {
              this.next = afterLoc;
            }

            return ContinueSentinel;
          },
          finish: function finish(finallyLoc) {
            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
              var entry = this.tryEntries[i];

              if (entry.finallyLoc === finallyLoc) {
                this.complete(entry.completion, entry.afterLoc);
                resetTryEntry(entry);
                return ContinueSentinel;
              }
            }
          },
          "catch": function _catch(tryLoc) {
            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
              var entry = this.tryEntries[i];

              if (entry.tryLoc === tryLoc) {
                var record = entry.completion;

                if (record.type === "throw") {
                  var thrown = record.arg;
                  resetTryEntry(entry);
                }

                return thrown;
              }
            } // The context.catch method must only be called with a location
            // argument that corresponds to a known catch block.


            throw new Error("illegal catch attempt");
          },
          delegateYield: function delegateYield(iterable, resultName, nextLoc) {
            this.delegate = {
              iterator: values(iterable),
              resultName: resultName,
              nextLoc: nextLoc
            };

            if (this.method === "next") {
              // Deliberately forget the last sent value so that we don't
              // accidentally pass it on to the delegate.
              this.arg = undefined;
            }

            return ContinueSentinel;
          }
        };
      }( // In sloppy mode, unbound `this` refers to the global object, fallback to
      // Function constructor if we're in global strict mode. That is sadly a form
      // of indirect eval which violates Content Security Policy.
      function () {
        return this;
      }() || Function("return this")());
      /***/
    },
    /* 507 */

    /***/
    function (module, exports, __webpack_require__) {
      module.exports = {
        "default": __webpack_require__(508),
        __esModule: true
      };
      /***/
    },
    /* 508 */

    /***/
    function (module, exports, __webpack_require__) {
      __webpack_require__(509);

      module.exports = Math.pow(2, -52);
      /***/
    },
    /* 509 */

    /***/
    function (module, exports, __webpack_require__) {
      // 20.1.2.1 Number.EPSILON
      var $export = __webpack_require__(9);

      $export($export.S, 'Number', {
        EPSILON: Math.pow(2, -52)
      });
      /***/
    },
    /* 510 */

    /***/
    function (module, exports, __webpack_require__) {
      /* WEBPACK VAR INJECTION */
      (function (Buffer) {
        var clone = function () {
          'use strict';
          /**
           * Clones (copies) an Object using deep copying.
           *
           * This function supports circular references by default, but if you are certain
           * there are no circular references in your object, you can save some CPU time
           * by calling clone(obj, false).
           *
           * Caution: if `circular` is false and `parent` contains circular references,
           * your program may enter an infinite loop and crash.
           *
           * @param `parent` - the object to be cloned
           * @param `circular` - set to true if the object to be cloned may contain
           *    circular references. (optional - true by default)
           * @param `depth` - set to a number if the object is only to be cloned to
           *    a particular depth. (optional - defaults to Infinity)
           * @param `prototype` - sets the prototype to be used when cloning an object.
           *    (optional - defaults to parent prototype).
          */

          function clone(parent, circular, depth, prototype) {
            var filter;

            if (_typeof4(circular) === 'object') {
              depth = circular.depth;
              prototype = circular.prototype;
              filter = circular.filter;
              circular = circular.circular;
            } // maintain two arrays for circular references, where corresponding parents
            // and children have the same index


            var allParents = [];
            var allChildren = [];
            var useBuffer = typeof Buffer != 'undefined';
            if (typeof circular == 'undefined') circular = true;
            if (typeof depth == 'undefined') depth = Infinity; // recurse this function so we don't reset allParents and allChildren

            function _clone(parent, depth) {
              // cloning null always returns null
              if (parent === null) return null;
              if (depth == 0) return parent;
              var child;
              var proto;

              if (_typeof4(parent) != 'object') {
                return parent;
              }

              if (clone.__isArray(parent)) {
                child = [];
              } else if (clone.__isRegExp(parent)) {
                child = new RegExp(parent.source, __getRegExpFlags(parent));
                if (parent.lastIndex) child.lastIndex = parent.lastIndex;
              } else if (clone.__isDate(parent)) {
                child = new Date(parent.getTime());
              } else if (useBuffer && Buffer.isBuffer(parent)) {
                if (Buffer.allocUnsafe) {
                  // Node.js >= 4.5.0
                  child = Buffer.allocUnsafe(parent.length);
                } else {
                  // Older Node.js versions
                  child = new Buffer(parent.length);
                }

                parent.copy(child);
                return child;
              } else {
                if (typeof prototype == 'undefined') {
                  proto = Object.getPrototypeOf(parent);
                  child = Object.create(proto);
                } else {
                  child = Object.create(prototype);
                  proto = prototype;
                }
              }

              if (circular) {
                var index = allParents.indexOf(parent);

                if (index != -1) {
                  return allChildren[index];
                }

                allParents.push(parent);
                allChildren.push(child);
              }

              for (var i in parent) {
                var attrs;

                if (proto) {
                  attrs = Object.getOwnPropertyDescriptor(proto, i);
                }

                if (attrs && attrs.set == null) {
                  continue;
                }

                child[i] = _clone(parent[i], depth - 1);
              }

              return child;
            }

            return _clone(parent, depth);
          }
          /**
           * Simple flat clone using prototype, accepts only objects, usefull for property
           * override on FLAT configuration object (no nested props).
           *
           * USE WITH CAUTION! This may not behave as you wish if you do not know how this
           * works.
           */


          clone.clonePrototype = function clonePrototype(parent) {
            if (parent === null) return null;

            var c = function c() {};

            c.prototype = parent;
            return new c();
          }; // private utility functions


          function __objToStr(o) {
            return Object.prototype.toString.call(o);
          }

          ;
          clone.__objToStr = __objToStr;

          function __isDate(o) {
            return _typeof4(o) === 'object' && __objToStr(o) === '[object Date]';
          }

          ;
          clone.__isDate = __isDate;

          function __isArray(o) {
            return _typeof4(o) === 'object' && __objToStr(o) === '[object Array]';
          }

          ;
          clone.__isArray = __isArray;

          function __isRegExp(o) {
            return _typeof4(o) === 'object' && __objToStr(o) === '[object RegExp]';
          }

          ;
          clone.__isRegExp = __isRegExp;

          function __getRegExpFlags(re) {
            var flags = '';
            if (re.global) flags += 'g';
            if (re.ignoreCase) flags += 'i';
            if (re.multiline) flags += 'm';
            return flags;
          }

          ;
          clone.__getRegExpFlags = __getRegExpFlags;
          return clone;
        }();

        if (true && module.exports) {
          module.exports = clone;
        }
        /* WEBPACK VAR INJECTION */

      }).call(this, __webpack_require__(10).Buffer);
      /***/
    },
    /* 511 */

    /***/
    function (module, exports, __webpack_require__) {
      module.exports = {
        "default": __webpack_require__(512),
        __esModule: true
      };
      /***/
    },
    /* 512 */

    /***/
    function (module, exports, __webpack_require__) {
      __webpack_require__(133);

      __webpack_require__(91);

      __webpack_require__(102);

      __webpack_require__(513);

      __webpack_require__(517);

      __webpack_require__(518);

      module.exports = __webpack_require__(7).Promise;
      /***/
    },
    /* 513 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var LIBRARY = __webpack_require__(104);

      var global = __webpack_require__(17);

      var ctx = __webpack_require__(33);

      var classof = __webpack_require__(184);

      var $export = __webpack_require__(9);

      var isObject = __webpack_require__(22);

      var aFunction = __webpack_require__(101);

      var anInstance = __webpack_require__(190);

      var forOf = __webpack_require__(107);

      var speciesConstructor = __webpack_require__(282);

      var task = __webpack_require__(283).set;

      var microtask = __webpack_require__(515)();

      var newPromiseCapabilityModule = __webpack_require__(193);

      var perform = __webpack_require__(284);

      var userAgent = __webpack_require__(516);

      var promiseResolve = __webpack_require__(285);

      var PROMISE = 'Promise';
      var TypeError = global.TypeError;
      var process = global.process;
      var versions = process && process.versions;
      var v8 = versions && versions.v8 || '';
      var $Promise = global[PROMISE];
      var isNode = classof(process) == 'process';

      var empty = function empty() {
        /* empty */
      };

      var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
      var newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;
      var USE_NATIVE = !!function () {
        try {
          // correct subclassing with @@species support
          var promise = $Promise.resolve(1);

          var FakePromise = (promise.constructor = {})[__webpack_require__(21)('species')] = function (exec) {
            exec(empty, empty);
          }; // unhandled rejections tracking support, NodeJS Promise without it fails @@species test


          return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
          // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
          // we can't detect it synchronously, so just check versions
          && v8.indexOf('6.6') !== 0 && userAgent.indexOf('Chrome/66') === -1;
        } catch (e) {
          /* empty */
        }
      }(); // helpers

      var isThenable = function isThenable(it) {
        var then;
        return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
      };

      var notify = function notify(promise, isReject) {
        if (promise._n) return;
        promise._n = true;
        var chain = promise._c;
        microtask(function () {
          var value = promise._v;
          var ok = promise._s == 1;
          var i = 0;

          var run = function run(reaction) {
            var handler = ok ? reaction.ok : reaction.fail;
            var resolve = reaction.resolve;
            var reject = reaction.reject;
            var domain = reaction.domain;
            var result, then, exited;

            try {
              if (handler) {
                if (!ok) {
                  if (promise._h == 2) onHandleUnhandled(promise);
                  promise._h = 1;
                }

                if (handler === true) result = value;else {
                  if (domain) domain.enter();
                  result = handler(value); // may throw

                  if (domain) {
                    domain.exit();
                    exited = true;
                  }
                }

                if (result === reaction.promise) {
                  reject(TypeError('Promise-chain cycle'));
                } else if (then = isThenable(result)) {
                  then.call(result, resolve, reject);
                } else resolve(result);
              } else reject(value);
            } catch (e) {
              if (domain && !exited) domain.exit();
              reject(e);
            }
          };

          while (chain.length > i) {
            run(chain[i++]);
          } // variable length - can't use forEach


          promise._c = [];
          promise._n = false;
          if (isReject && !promise._h) onUnhandled(promise);
        });
      };

      var onUnhandled = function onUnhandled(promise) {
        task.call(global, function () {
          var value = promise._v;
          var unhandled = isUnhandled(promise);
          var result, handler, console;

          if (unhandled) {
            result = perform(function () {
              if (isNode) {
                process.emit('unhandledRejection', value, promise);
              } else if (handler = global.onunhandledrejection) {
                handler({
                  promise: promise,
                  reason: value
                });
              } else if ((console = global.console) && console.error) {
                console.error('Unhandled promise rejection', value);
              }
            }); // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should

            promise._h = isNode || isUnhandled(promise) ? 2 : 1;
          }

          promise._a = undefined;
          if (unhandled && result.e) throw result.v;
        });
      };

      var isUnhandled = function isUnhandled(promise) {
        return promise._h !== 1 && (promise._a || promise._c).length === 0;
      };

      var onHandleUnhandled = function onHandleUnhandled(promise) {
        task.call(global, function () {
          var handler;

          if (isNode) {
            process.emit('rejectionHandled', promise);
          } else if (handler = global.onrejectionhandled) {
            handler({
              promise: promise,
              reason: promise._v
            });
          }
        });
      };

      var $reject = function $reject(value) {
        var promise = this;
        if (promise._d) return;
        promise._d = true;
        promise = promise._w || promise; // unwrap

        promise._v = value;
        promise._s = 2;
        if (!promise._a) promise._a = promise._c.slice();
        notify(promise, true);
      };

      var $resolve = function $resolve(value) {
        var promise = this;
        var then;
        if (promise._d) return;
        promise._d = true;
        promise = promise._w || promise; // unwrap

        try {
          if (promise === value) throw TypeError("Promise can't be resolved itself");

          if (then = isThenable(value)) {
            microtask(function () {
              var wrapper = {
                _w: promise,
                _d: false
              }; // wrap

              try {
                then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
              } catch (e) {
                $reject.call(wrapper, e);
              }
            });
          } else {
            promise._v = value;
            promise._s = 1;
            notify(promise, false);
          }
        } catch (e) {
          $reject.call({
            _w: promise,
            _d: false
          }, e); // wrap
        }
      }; // constructor polyfill


      if (!USE_NATIVE) {
        // 25.4.3.1 Promise(executor)
        $Promise = function Promise(executor) {
          anInstance(this, $Promise, PROMISE, '_h');
          aFunction(executor);
          Internal.call(this);

          try {
            executor(ctx($resolve, this, 1), ctx($reject, this, 1));
          } catch (err) {
            $reject.call(this, err);
          }
        }; // eslint-disable-next-line no-unused-vars


        Internal = function Promise(executor) {
          this._c = []; // <- awaiting reactions

          this._a = undefined; // <- checked in isUnhandled reactions

          this._s = 0; // <- state

          this._d = false; // <- done

          this._v = undefined; // <- value

          this._h = 0; // <- rejection state, 0 - default, 1 - handled, 2 - unhandled

          this._n = false; // <- notify
        };

        Internal.prototype = __webpack_require__(189)($Promise.prototype, {
          // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
          then: function then(onFulfilled, onRejected) {
            var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
            reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
            reaction.fail = typeof onRejected == 'function' && onRejected;
            reaction.domain = isNode ? process.domain : undefined;

            this._c.push(reaction);

            if (this._a) this._a.push(reaction);
            if (this._s) notify(this, false);
            return reaction.promise;
          },
          // 25.4.5.1 Promise.prototype.catch(onRejected)
          'catch': function _catch(onRejected) {
            return this.then(undefined, onRejected);
          }
        });

        OwnPromiseCapability = function OwnPromiseCapability() {
          var promise = new Internal();
          this.promise = promise;
          this.resolve = ctx($resolve, promise, 1);
          this.reject = ctx($reject, promise, 1);
        };

        newPromiseCapabilityModule.f = newPromiseCapability = function newPromiseCapability(C) {
          return C === $Promise || C === Wrapper ? new OwnPromiseCapability(C) : newGenericPromiseCapability(C);
        };
      }

      $export($export.G + $export.W + $export.F * !USE_NATIVE, {
        Promise: $Promise
      });

      __webpack_require__(106)($Promise, PROMISE);

      __webpack_require__(267)(PROMISE);

      Wrapper = __webpack_require__(7)[PROMISE]; // statics

      $export($export.S + $export.F * !USE_NATIVE, PROMISE, {
        // 25.4.4.5 Promise.reject(r)
        reject: function reject(r) {
          var capability = newPromiseCapability(this);
          var $$reject = capability.reject;
          $$reject(r);
          return capability.promise;
        }
      });
      $export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
        // 25.4.4.6 Promise.resolve(x)
        resolve: function resolve(x) {
          return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);
        }
      });
      $export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(281)(function (iter) {
        $Promise.all(iter)['catch'](empty);
      })), PROMISE, {
        // 25.4.4.1 Promise.all(iterable)
        all: function all(iterable) {
          var C = this;
          var capability = newPromiseCapability(C);
          var resolve = capability.resolve;
          var reject = capability.reject;
          var result = perform(function () {
            var values = [];
            var index = 0;
            var remaining = 1;
            forOf(iterable, false, function (promise) {
              var $index = index++;
              var alreadyCalled = false;
              values.push(undefined);
              remaining++;
              C.resolve(promise).then(function (value) {
                if (alreadyCalled) return;
                alreadyCalled = true;
                values[$index] = value;
                --remaining || resolve(values);
              }, reject);
            });
            --remaining || resolve(values);
          });
          if (result.e) reject(result.v);
          return capability.promise;
        },
        // 25.4.4.4 Promise.race(iterable)
        race: function race(iterable) {
          var C = this;
          var capability = newPromiseCapability(C);
          var reject = capability.reject;
          var result = perform(function () {
            forOf(iterable, false, function (promise) {
              C.resolve(promise).then(capability.resolve, reject);
            });
          });
          if (result.e) reject(result.v);
          return capability.promise;
        }
      });
      /***/
    },
    /* 514 */

    /***/
    function (module, exports) {
      // fast apply, http://jsperf.lnkit.com/fast-apply/5
      module.exports = function (fn, args, that) {
        var un = that === undefined;

        switch (args.length) {
          case 0:
            return un ? fn() : fn.call(that);

          case 1:
            return un ? fn(args[0]) : fn.call(that, args[0]);

          case 2:
            return un ? fn(args[0], args[1]) : fn.call(that, args[0], args[1]);

          case 3:
            return un ? fn(args[0], args[1], args[2]) : fn.call(that, args[0], args[1], args[2]);

          case 4:
            return un ? fn(args[0], args[1], args[2], args[3]) : fn.call(that, args[0], args[1], args[2], args[3]);
        }

        return fn.apply(that, args);
      };
      /***/

    },
    /* 515 */

    /***/
    function (module, exports, __webpack_require__) {
      var global = __webpack_require__(17);

      var macrotask = __webpack_require__(283).set;

      var Observer = global.MutationObserver || global.WebKitMutationObserver;
      var process = global.process;
      var Promise = global.Promise;
      var isNode = __webpack_require__(99)(process) == 'process';

      module.exports = function () {
        var head, last, notify;

        var flush = function flush() {
          var parent, fn;
          if (isNode && (parent = process.domain)) parent.exit();

          while (head) {
            fn = head.fn;
            head = head.next;

            try {
              fn();
            } catch (e) {
              if (head) notify();else last = undefined;
              throw e;
            }
          }

          last = undefined;
          if (parent) parent.enter();
        }; // Node.js


        if (isNode) {
          notify = function notify() {
            process.nextTick(flush);
          }; // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339

        } else if (Observer && !(global.navigator && global.navigator.standalone)) {
          var toggle = true;
          var node = document.createTextNode('');
          new Observer(flush).observe(node, {
            characterData: true
          }); // eslint-disable-line no-new

          notify = function notify() {
            node.data = toggle = !toggle;
          }; // environments with maybe non-completely correct, but existent Promise

        } else if (Promise && Promise.resolve) {
          // Promise.resolve without an argument throws an error in LG WebOS 2
          var promise = Promise.resolve(undefined);

          notify = function notify() {
            promise.then(flush);
          }; // for other environments - macrotask based on:
          // - setImmediate
          // - MessageChannel
          // - window.postMessag
          // - onreadystatechange
          // - setTimeout

        } else {
          notify = function notify() {
            // strange IE + webpack dev server bug - use .call(global)
            macrotask.call(global, flush);
          };
        }

        return function (fn) {
          var task = {
            fn: fn,
            next: undefined
          };
          if (last) last.next = task;

          if (!head) {
            head = task;
            notify();
          }

          last = task;
        };
      };
      /***/

    },
    /* 516 */

    /***/
    function (module, exports, __webpack_require__) {
      var global = __webpack_require__(17);

      var navigator = global.navigator;
      module.exports = navigator && navigator.userAgent || '';
      /***/
    },
    /* 517 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict"; // https://github.com/tc39/proposal-promise-finally

      var $export = __webpack_require__(9);

      var core = __webpack_require__(7);

      var global = __webpack_require__(17);

      var speciesConstructor = __webpack_require__(282);

      var promiseResolve = __webpack_require__(285);

      $export($export.P + $export.R, 'Promise', {
        'finally': function _finally(onFinally) {
          var C = speciesConstructor(this, core.Promise || global.Promise);
          var isFunction = typeof onFinally == 'function';
          return this.then(isFunction ? function (x) {
            return promiseResolve(C, onFinally()).then(function () {
              return x;
            });
          } : onFinally, isFunction ? function (e) {
            return promiseResolve(C, onFinally()).then(function () {
              throw e;
            });
          } : onFinally);
        }
      });
      /***/
    },
    /* 518 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict"; // https://github.com/tc39/proposal-promise-try

      var $export = __webpack_require__(9);

      var newPromiseCapability = __webpack_require__(193);

      var perform = __webpack_require__(284);

      $export($export.S, 'Promise', {
        'try': function _try(callbackfn) {
          var promiseCapability = newPromiseCapability.f(this);
          var result = perform(callbackfn);
          (result.e ? promiseCapability.reject : promiseCapability.resolve)(result.v);
          return promiseCapability.promise;
        }
      });
      /***/
    },
    /* 519 */

    /***/
    function (module, exports, __webpack_require__) {
      module.exports = __webpack_require__(286).BrotliDecompressBuffer;
      /***/
    },
    /* 520 */

    /***/
    function (module, exports) {
      /* Copyright 2013 Google Inc. All Rights Reserved.
      
         Licensed under the Apache License, Version 2.0 (the "License");
         you may not use this file except in compliance with the License.
         You may obtain a copy of the License at
      
         http://www.apache.org/licenses/LICENSE-2.0
      
         Unless required by applicable law or agreed to in writing, software
         distributed under the License is distributed on an "AS IS" BASIS,
         WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         See the License for the specific language governing permissions and
         limitations under the License.
      
         Bit reading helpers
      */
      var BROTLI_READ_SIZE = 4096;
      var BROTLI_IBUF_SIZE = 2 * BROTLI_READ_SIZE + 32;
      var BROTLI_IBUF_MASK = 2 * BROTLI_READ_SIZE - 1;
      var kBitMask = new Uint32Array([0, 1, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 8191, 16383, 32767, 65535, 131071, 262143, 524287, 1048575, 2097151, 4194303, 8388607, 16777215]);
      /* Input byte buffer, consist of a ringbuffer and a "slack" region where */

      /* bytes from the start of the ringbuffer are copied. */

      function BrotliBitReader(input) {
        this.buf_ = new Uint8Array(BROTLI_IBUF_SIZE);
        this.input_ = input;
        /* input callback */

        this.reset();
      }

      BrotliBitReader.READ_SIZE = BROTLI_READ_SIZE;
      BrotliBitReader.IBUF_MASK = BROTLI_IBUF_MASK;

      BrotliBitReader.prototype.reset = function () {
        this.buf_ptr_ = 0;
        /* next input will write here */

        this.val_ = 0;
        /* pre-fetched bits */

        this.pos_ = 0;
        /* byte position in stream */

        this.bit_pos_ = 0;
        /* current bit-reading position in val_ */

        this.bit_end_pos_ = 0;
        /* bit-reading end position from LSB of val_ */

        this.eos_ = 0;
        /* input stream is finished */

        this.readMoreInput();

        for (var i = 0; i < 4; i++) {
          this.val_ |= this.buf_[this.pos_] << 8 * i;
          ++this.pos_;
        }

        return this.bit_end_pos_ > 0;
      };
      /* Fills up the input ringbuffer by calling the input callback.
      
         Does nothing if there are at least 32 bytes present after current position.
      
         Returns 0 if either:
          - the input callback returned an error, or
          - there is no more input and the position is past the end of the stream.
      
         After encountering the end of the input stream, 32 additional zero bytes are
         copied to the ringbuffer, therefore it is safe to call this function after
         every 32 bytes of input is read.
      */


      BrotliBitReader.prototype.readMoreInput = function () {
        if (this.bit_end_pos_ > 256) {
          return;
        } else if (this.eos_) {
          if (this.bit_pos_ > this.bit_end_pos_) throw new Error('Unexpected end of input ' + this.bit_pos_ + ' ' + this.bit_end_pos_);
        } else {
          var dst = this.buf_ptr_;
          var bytes_read = this.input_.read(this.buf_, dst, BROTLI_READ_SIZE);

          if (bytes_read < 0) {
            throw new Error('Unexpected end of input');
          }

          if (bytes_read < BROTLI_READ_SIZE) {
            this.eos_ = 1;
            /* Store 32 bytes of zero after the stream end. */

            for (var p = 0; p < 32; p++) {
              this.buf_[dst + bytes_read + p] = 0;
            }
          }

          if (dst === 0) {
            /* Copy the head of the ringbuffer to the slack region. */
            for (var p = 0; p < 32; p++) {
              this.buf_[(BROTLI_READ_SIZE << 1) + p] = this.buf_[p];
            }

            this.buf_ptr_ = BROTLI_READ_SIZE;
          } else {
            this.buf_ptr_ = 0;
          }

          this.bit_end_pos_ += bytes_read << 3;
        }
      };
      /* Guarantees that there are at least 24 bits in the buffer. */


      BrotliBitReader.prototype.fillBitWindow = function () {
        while (this.bit_pos_ >= 8) {
          this.val_ >>>= 8;
          this.val_ |= this.buf_[this.pos_ & BROTLI_IBUF_MASK] << 24;
          ++this.pos_;
          this.bit_pos_ = this.bit_pos_ - 8 >>> 0;
          this.bit_end_pos_ = this.bit_end_pos_ - 8 >>> 0;
        }
      };
      /* Reads the specified number of bits from Read Buffer. */


      BrotliBitReader.prototype.readBits = function (n_bits) {
        if (32 - this.bit_pos_ < n_bits) {
          this.fillBitWindow();
        }

        var val = this.val_ >>> this.bit_pos_ & kBitMask[n_bits];
        this.bit_pos_ += n_bits;
        return val;
      };

      module.exports = BrotliBitReader;
      /***/
    },
    /* 521 */

    /***/
    function (module, exports, __webpack_require__) {
      var base64 = __webpack_require__(522);

      var fs = __webpack_require__(53);
      /**
       * The normal dictionary-data.js is quite large, which makes it 
       * unsuitable for browser usage. In order to make it smaller, 
       * we read dictionary.bin, which is a compressed version of
       * the dictionary, and on initial load, Brotli decompresses 
       * it's own dictionary. 😜
       */


      exports.init = function () {
        var BrotliDecompressBuffer = __webpack_require__(286).BrotliDecompressBuffer;

        var compressed = base64.toByteArray(__webpack_require__(523));
        return BrotliDecompressBuffer(compressed);
      };
      /***/

    },
    /* 522 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      exports.byteLength = byteLength;
      exports.toByteArray = toByteArray;
      exports.fromByteArray = fromByteArray;
      var lookup = [];
      var revLookup = [];
      var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
      var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

      for (var i = 0, len = code.length; i < len; ++i) {
        lookup[i] = code[i];
        revLookup[code.charCodeAt(i)] = i;
      } // Support decoding URL-safe base64 strings, as Node.js does.
      // See: https://en.wikipedia.org/wiki/Base64#URL_applications


      revLookup['-'.charCodeAt(0)] = 62;
      revLookup['_'.charCodeAt(0)] = 63;

      function getLens(b64) {
        var len = b64.length;

        if (len % 4 > 0) {
          throw new Error('Invalid string. Length must be a multiple of 4');
        } // Trim off extra bytes after placeholder bytes are found
        // See: https://github.com/beatgammit/base64-js/issues/42


        var validLen = b64.indexOf('=');
        if (validLen === -1) validLen = len;
        var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
        return [validLen, placeHoldersLen];
      } // base64 is 4/3 + up to two characters of the original data


      function byteLength(b64) {
        var lens = getLens(b64);
        var validLen = lens[0];
        var placeHoldersLen = lens[1];
        return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
      }

      function _byteLength(b64, validLen, placeHoldersLen) {
        return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
      }

      function toByteArray(b64) {
        var tmp;
        var lens = getLens(b64);
        var validLen = lens[0];
        var placeHoldersLen = lens[1];
        var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
        var curByte = 0; // if there are placeholders, only get up to the last complete 4 chars

        var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
        var i;

        for (i = 0; i < len; i += 4) {
          tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
          arr[curByte++] = tmp >> 16 & 0xFF;
          arr[curByte++] = tmp >> 8 & 0xFF;
          arr[curByte++] = tmp & 0xFF;
        }

        if (placeHoldersLen === 2) {
          tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
          arr[curByte++] = tmp & 0xFF;
        }

        if (placeHoldersLen === 1) {
          tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
          arr[curByte++] = tmp >> 8 & 0xFF;
          arr[curByte++] = tmp & 0xFF;
        }

        return arr;
      }

      function tripletToBase64(num) {
        return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
      }

      function encodeChunk(uint8, start, end) {
        var tmp;
        var output = [];

        for (var i = start; i < end; i += 3) {
          tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
          output.push(tripletToBase64(tmp));
        }

        return output.join('');
      }

      function fromByteArray(uint8) {
        var tmp;
        var len = uint8.length;
        var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes

        var parts = [];
        var maxChunkLength = 16383; // must be multiple of 3
        // go through the array every three bytes, we'll deal with trailing stuff later

        for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
          parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
        } // pad the end with zeros, but make sure to not forget the extra bytes


        if (extraBytes === 1) {
          tmp = uint8[len - 1];
          parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + '==');
        } else if (extraBytes === 2) {
          tmp = (uint8[len - 2] << 8) + uint8[len - 1];
          parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + '=');
        }

        return parts.join('');
      }
      /***/

    },
    /* 523 */

    /***/
    function (module, exports) {
      module.exports = "";
      /***/
    },
    /* 524 */

    /***/
    function (module, exports) {
      /* Copyright 2013 Google Inc. All Rights Reserved.
      
         Licensed under the Apache License, Version 2.0 (the "License");
         you may not use this file except in compliance with the License.
         You may obtain a copy of the License at
      
         http://www.apache.org/licenses/LICENSE-2.0
      
         Unless required by applicable law or agreed to in writing, software
         distributed under the License is distributed on an "AS IS" BASIS,
         WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         See the License for the specific language governing permissions and
         limitations under the License.
      
         Lookup table to map the previous two bytes to a context id.
      
         There are four different context modeling modes defined here:
           CONTEXT_LSB6: context id is the least significant 6 bits of the last byte,
           CONTEXT_MSB6: context id is the most significant 6 bits of the last byte,
           CONTEXT_UTF8: second-order context model tuned for UTF8-encoded text,
           CONTEXT_SIGNED: second-order context model tuned for signed integers.
      
         The context id for the UTF8 context model is calculated as follows. If p1
         and p2 are the previous two bytes, we calcualte the context as
      
           context = kContextLookup[p1] | kContextLookup[p2 + 256].
      
         If the previous two bytes are ASCII characters (i.e. < 128), this will be
         equivalent to
      
           context = 4 * context1(p1) + context2(p2),
      
         where context1 is based on the previous byte in the following way:
      
           0  : non-ASCII control
           1  : \t, \n, \r
           2  : space
           3  : other punctuation
           4  : " '
           5  : %
           6  : ( < [ {
           7  : ) > ] }
           8  : , ; :
           9  : .
           10 : =
           11 : number
           12 : upper-case vowel
           13 : upper-case consonant
           14 : lower-case vowel
           15 : lower-case consonant
      
         and context2 is based on the second last byte:
      
           0 : control, space
           1 : punctuation
           2 : upper-case letter, number
           3 : lower-case letter
      
         If the last byte is ASCII, and the second last byte is not (in a valid UTF8
         stream it will be a continuation byte, value between 128 and 191), the
         context is the same as if the second last byte was an ASCII control or space.
      
         If the last byte is a UTF8 lead byte (value >= 192), then the next byte will
         be a continuation byte and the context id is 2 or 3 depending on the LSB of
         the last byte and to a lesser extent on the second last byte if it is ASCII.
      
         If the last byte is a UTF8 continuation byte, the second last byte can be:
           - continuation byte: the next byte is probably ASCII or lead byte (assuming
             4-byte UTF8 characters are rare) and the context id is 0 or 1.
           - lead byte (192 - 207): next byte is ASCII or lead byte, context is 0 or 1
           - lead byte (208 - 255): next byte is continuation byte, context is 2 or 3
      
         The possible value combinations of the previous two bytes, the range of
         context ids and the type of the next byte is summarized in the table below:
      
         |--------\-----------------------------------------------------------------|
         |         \                         Last byte                              |
         | Second   \---------------------------------------------------------------|
         | last byte \    ASCII            |   cont. byte        |   lead byte      |
         |            \   (0-127)          |   (128-191)         |   (192-)         |
         |=============|===================|=====================|==================|
         |  ASCII      | next: ASCII/lead  |  not valid          |  next: cont.     |
         |  (0-127)    | context: 4 - 63   |                     |  context: 2 - 3  |
         |-------------|-------------------|---------------------|------------------|
         |  cont. byte | next: ASCII/lead  |  next: ASCII/lead   |  next: cont.     |
         |  (128-191)  | context: 4 - 63   |  context: 0 - 1     |  context: 2 - 3  |
         |-------------|-------------------|---------------------|------------------|
         |  lead byte  | not valid         |  next: ASCII/lead   |  not valid       |
         |  (192-207)  |                   |  context: 0 - 1     |                  |
         |-------------|-------------------|---------------------|------------------|
         |  lead byte  | not valid         |  next: cont.        |  not valid       |
         |  (208-)     |                   |  context: 2 - 3     |                  |
         |-------------|-------------------|---------------------|------------------|
      
         The context id for the signed context mode is calculated as:
      
           context = (kContextLookup[512 + p1] << 3) | kContextLookup[512 + p2].
      
         For any context modeling modes, the context ids can be calculated by |-ing
         together two lookups from one table using context model dependent offsets:
      
           context = kContextLookup[offset1 + p1] | kContextLookup[offset2 + p2].
      
         where offset1 and offset2 are dependent on the context mode.
      */
      var CONTEXT_LSB6 = 0;
      var CONTEXT_MSB6 = 1;
      var CONTEXT_UTF8 = 2;
      var CONTEXT_SIGNED = 3;
      /* Common context lookup table for all context modes. */

      exports.lookup = new Uint8Array([
      /* CONTEXT_UTF8, last byte. */

      /* ASCII range. */
      0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 12, 16, 12, 12, 20, 12, 16, 24, 28, 12, 12, 32, 12, 36, 12, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 32, 32, 24, 40, 28, 12, 12, 48, 52, 52, 52, 48, 52, 52, 52, 48, 52, 52, 52, 52, 52, 48, 52, 52, 52, 52, 52, 48, 52, 52, 52, 52, 52, 24, 12, 28, 12, 12, 12, 56, 60, 60, 60, 56, 60, 60, 60, 56, 60, 60, 60, 60, 60, 56, 60, 60, 60, 60, 60, 56, 60, 60, 60, 60, 60, 24, 12, 28, 12, 0,
      /* UTF8 continuation byte range. */
      0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
      /* UTF8 lead byte range. */
      2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
      /* CONTEXT_UTF8 second last byte. */

      /* ASCII range. */
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 0,
      /* UTF8 continuation byte range. */
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* UTF8 lead byte range. */
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
      /* CONTEXT_SIGNED, second last byte. */
      0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7,
      /* CONTEXT_SIGNED, last byte, same as the above values shifted by 3 bits. */
      0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 56,
      /* CONTEXT_LSB6, last byte. */
      0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
      /* CONTEXT_MSB6, last byte. */
      0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 23, 23, 23, 24, 24, 24, 24, 25, 25, 25, 25, 26, 26, 26, 26, 27, 27, 27, 27, 28, 28, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 31, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 40, 40, 40, 40, 41, 41, 41, 41, 42, 42, 42, 42, 43, 43, 43, 43, 44, 44, 44, 44, 45, 45, 45, 45, 46, 46, 46, 46, 47, 47, 47, 47, 48, 48, 48, 48, 49, 49, 49, 49, 50, 50, 50, 50, 51, 51, 51, 51, 52, 52, 52, 52, 53, 53, 53, 53, 54, 54, 54, 54, 55, 55, 55, 55, 56, 56, 56, 56, 57, 57, 57, 57, 58, 58, 58, 58, 59, 59, 59, 59, 60, 60, 60, 60, 61, 61, 61, 61, 62, 62, 62, 62, 63, 63, 63, 63,
      /* CONTEXT_{M,L}SB6, second last byte, */
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
      exports.lookupOffsets = new Uint16Array([
      /* CONTEXT_LSB6 */
      1024, 1536,
      /* CONTEXT_MSB6 */
      1280, 1536,
      /* CONTEXT_UTF8 */
      0, 256,
      /* CONTEXT_SIGNED */
      768, 512]);
      /***/
    },
    /* 525 */

    /***/
    function (module, exports) {
      /* Copyright 2013 Google Inc. All Rights Reserved.
      
         Licensed under the Apache License, Version 2.0 (the "License");
         you may not use this file except in compliance with the License.
         You may obtain a copy of the License at
      
         http://www.apache.org/licenses/LICENSE-2.0
      
         Unless required by applicable law or agreed to in writing, software
         distributed under the License is distributed on an "AS IS" BASIS,
         WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         See the License for the specific language governing permissions and
         limitations under the License.
      
         Lookup tables to map prefix codes to value ranges. This is used during
         decoding of the block lengths, literal insertion lengths and copy lengths.
      */

      /* Represents the range of values belonging to a prefix code: */

      /* [offset, offset + 2^nbits) */
      function PrefixCodeRange(offset, nbits) {
        this.offset = offset;
        this.nbits = nbits;
      }

      exports.kBlockLengthPrefixCode = [new PrefixCodeRange(1, 2), new PrefixCodeRange(5, 2), new PrefixCodeRange(9, 2), new PrefixCodeRange(13, 2), new PrefixCodeRange(17, 3), new PrefixCodeRange(25, 3), new PrefixCodeRange(33, 3), new PrefixCodeRange(41, 3), new PrefixCodeRange(49, 4), new PrefixCodeRange(65, 4), new PrefixCodeRange(81, 4), new PrefixCodeRange(97, 4), new PrefixCodeRange(113, 5), new PrefixCodeRange(145, 5), new PrefixCodeRange(177, 5), new PrefixCodeRange(209, 5), new PrefixCodeRange(241, 6), new PrefixCodeRange(305, 6), new PrefixCodeRange(369, 7), new PrefixCodeRange(497, 8), new PrefixCodeRange(753, 9), new PrefixCodeRange(1265, 10), new PrefixCodeRange(2289, 11), new PrefixCodeRange(4337, 12), new PrefixCodeRange(8433, 13), new PrefixCodeRange(16625, 24)];
      exports.kInsertLengthPrefixCode = [new PrefixCodeRange(0, 0), new PrefixCodeRange(1, 0), new PrefixCodeRange(2, 0), new PrefixCodeRange(3, 0), new PrefixCodeRange(4, 0), new PrefixCodeRange(5, 0), new PrefixCodeRange(6, 1), new PrefixCodeRange(8, 1), new PrefixCodeRange(10, 2), new PrefixCodeRange(14, 2), new PrefixCodeRange(18, 3), new PrefixCodeRange(26, 3), new PrefixCodeRange(34, 4), new PrefixCodeRange(50, 4), new PrefixCodeRange(66, 5), new PrefixCodeRange(98, 5), new PrefixCodeRange(130, 6), new PrefixCodeRange(194, 7), new PrefixCodeRange(322, 8), new PrefixCodeRange(578, 9), new PrefixCodeRange(1090, 10), new PrefixCodeRange(2114, 12), new PrefixCodeRange(6210, 14), new PrefixCodeRange(22594, 24)];
      exports.kCopyLengthPrefixCode = [new PrefixCodeRange(2, 0), new PrefixCodeRange(3, 0), new PrefixCodeRange(4, 0), new PrefixCodeRange(5, 0), new PrefixCodeRange(6, 0), new PrefixCodeRange(7, 0), new PrefixCodeRange(8, 0), new PrefixCodeRange(9, 0), new PrefixCodeRange(10, 1), new PrefixCodeRange(12, 1), new PrefixCodeRange(14, 2), new PrefixCodeRange(18, 2), new PrefixCodeRange(22, 3), new PrefixCodeRange(30, 3), new PrefixCodeRange(38, 4), new PrefixCodeRange(54, 4), new PrefixCodeRange(70, 5), new PrefixCodeRange(102, 5), new PrefixCodeRange(134, 6), new PrefixCodeRange(198, 7), new PrefixCodeRange(326, 8), new PrefixCodeRange(582, 9), new PrefixCodeRange(1094, 10), new PrefixCodeRange(2118, 24)];
      exports.kInsertRangeLut = [0, 0, 8, 8, 0, 16, 8, 16, 16];
      exports.kCopyRangeLut = [0, 8, 0, 8, 16, 0, 16, 8, 16];
      /***/
    },
    /* 526 */

    /***/
    function (module, exports, __webpack_require__) {
      /* Copyright 2013 Google Inc. All Rights Reserved.
      
         Licensed under the Apache License, Version 2.0 (the "License");
         you may not use this file except in compliance with the License.
         You may obtain a copy of the License at
      
         http://www.apache.org/licenses/LICENSE-2.0
      
         Unless required by applicable law or agreed to in writing, software
         distributed under the License is distributed on an "AS IS" BASIS,
         WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         See the License for the specific language governing permissions and
         limitations under the License.
      
         Transformations on dictionary words.
      */
      var BrotliDictionary = __webpack_require__(288);

      var kIdentity = 0;
      var kOmitLast1 = 1;
      var kOmitLast2 = 2;
      var kOmitLast3 = 3;
      var kOmitLast4 = 4;
      var kOmitLast5 = 5;
      var kOmitLast6 = 6;
      var kOmitLast7 = 7;
      var kOmitLast8 = 8;
      var kOmitLast9 = 9;
      var kUppercaseFirst = 10;
      var kUppercaseAll = 11;
      var kOmitFirst1 = 12;
      var kOmitFirst2 = 13;
      var kOmitFirst3 = 14;
      var kOmitFirst4 = 15;
      var kOmitFirst5 = 16;
      var kOmitFirst6 = 17;
      var kOmitFirst7 = 18;
      var kOmitFirst8 = 19;
      var kOmitFirst9 = 20;

      function Transform(prefix, transform, suffix) {
        this.prefix = new Uint8Array(prefix.length);
        this.transform = transform;
        this.suffix = new Uint8Array(suffix.length);

        for (var i = 0; i < prefix.length; i++) {
          this.prefix[i] = prefix.charCodeAt(i);
        }

        for (var i = 0; i < suffix.length; i++) {
          this.suffix[i] = suffix.charCodeAt(i);
        }
      }

      var kTransforms = [new Transform("", kIdentity, ""), new Transform("", kIdentity, " "), new Transform(" ", kIdentity, " "), new Transform("", kOmitFirst1, ""), new Transform("", kUppercaseFirst, " "), new Transform("", kIdentity, " the "), new Transform(" ", kIdentity, ""), new Transform("s ", kIdentity, " "), new Transform("", kIdentity, " of "), new Transform("", kUppercaseFirst, ""), new Transform("", kIdentity, " and "), new Transform("", kOmitFirst2, ""), new Transform("", kOmitLast1, ""), new Transform(", ", kIdentity, " "), new Transform("", kIdentity, ", "), new Transform(" ", kUppercaseFirst, " "), new Transform("", kIdentity, " in "), new Transform("", kIdentity, " to "), new Transform("e ", kIdentity, " "), new Transform("", kIdentity, "\""), new Transform("", kIdentity, "."), new Transform("", kIdentity, "\">"), new Transform("", kIdentity, "\n"), new Transform("", kOmitLast3, ""), new Transform("", kIdentity, "]"), new Transform("", kIdentity, " for "), new Transform("", kOmitFirst3, ""), new Transform("", kOmitLast2, ""), new Transform("", kIdentity, " a "), new Transform("", kIdentity, " that "), new Transform(" ", kUppercaseFirst, ""), new Transform("", kIdentity, ". "), new Transform(".", kIdentity, ""), new Transform(" ", kIdentity, ", "), new Transform("", kOmitFirst4, ""), new Transform("", kIdentity, " with "), new Transform("", kIdentity, "'"), new Transform("", kIdentity, " from "), new Transform("", kIdentity, " by "), new Transform("", kOmitFirst5, ""), new Transform("", kOmitFirst6, ""), new Transform(" the ", kIdentity, ""), new Transform("", kOmitLast4, ""), new Transform("", kIdentity, ". The "), new Transform("", kUppercaseAll, ""), new Transform("", kIdentity, " on "), new Transform("", kIdentity, " as "), new Transform("", kIdentity, " is "), new Transform("", kOmitLast7, ""), new Transform("", kOmitLast1, "ing "), new Transform("", kIdentity, "\n\t"), new Transform("", kIdentity, ":"), new Transform(" ", kIdentity, ". "), new Transform("", kIdentity, "ed "), new Transform("", kOmitFirst9, ""), new Transform("", kOmitFirst7, ""), new Transform("", kOmitLast6, ""), new Transform("", kIdentity, "("), new Transform("", kUppercaseFirst, ", "), new Transform("", kOmitLast8, ""), new Transform("", kIdentity, " at "), new Transform("", kIdentity, "ly "), new Transform(" the ", kIdentity, " of "), new Transform("", kOmitLast5, ""), new Transform("", kOmitLast9, ""), new Transform(" ", kUppercaseFirst, ", "), new Transform("", kUppercaseFirst, "\""), new Transform(".", kIdentity, "("), new Transform("", kUppercaseAll, " "), new Transform("", kUppercaseFirst, "\">"), new Transform("", kIdentity, "=\""), new Transform(" ", kIdentity, "."), new Transform(".com/", kIdentity, ""), new Transform(" the ", kIdentity, " of the "), new Transform("", kUppercaseFirst, "'"), new Transform("", kIdentity, ". This "), new Transform("", kIdentity, ","), new Transform(".", kIdentity, " "), new Transform("", kUppercaseFirst, "("), new Transform("", kUppercaseFirst, "."), new Transform("", kIdentity, " not "), new Transform(" ", kIdentity, "=\""), new Transform("", kIdentity, "er "), new Transform(" ", kUppercaseAll, " "), new Transform("", kIdentity, "al "), new Transform(" ", kUppercaseAll, ""), new Transform("", kIdentity, "='"), new Transform("", kUppercaseAll, "\""), new Transform("", kUppercaseFirst, ". "), new Transform(" ", kIdentity, "("), new Transform("", kIdentity, "ful "), new Transform(" ", kUppercaseFirst, ". "), new Transform("", kIdentity, "ive "), new Transform("", kIdentity, "less "), new Transform("", kUppercaseAll, "'"), new Transform("", kIdentity, "est "), new Transform(" ", kUppercaseFirst, "."), new Transform("", kUppercaseAll, "\">"), new Transform(" ", kIdentity, "='"), new Transform("", kUppercaseFirst, ","), new Transform("", kIdentity, "ize "), new Transform("", kUppercaseAll, "."), new Transform("\xc2\xa0", kIdentity, ""), new Transform(" ", kIdentity, ","), new Transform("", kUppercaseFirst, "=\""), new Transform("", kUppercaseAll, "=\""), new Transform("", kIdentity, "ous "), new Transform("", kUppercaseAll, ", "), new Transform("", kUppercaseFirst, "='"), new Transform(" ", kUppercaseFirst, ","), new Transform(" ", kUppercaseAll, "=\""), new Transform(" ", kUppercaseAll, ", "), new Transform("", kUppercaseAll, ","), new Transform("", kUppercaseAll, "("), new Transform("", kUppercaseAll, ". "), new Transform(" ", kUppercaseAll, "."), new Transform("", kUppercaseAll, "='"), new Transform(" ", kUppercaseAll, ". "), new Transform(" ", kUppercaseFirst, "=\""), new Transform(" ", kUppercaseAll, "='"), new Transform(" ", kUppercaseFirst, "='")];
      exports.kTransforms = kTransforms;
      exports.kNumTransforms = kTransforms.length;

      function ToUpperCase(p, i) {
        if (p[i] < 0xc0) {
          if (p[i] >= 97 && p[i] <= 122) {
            p[i] ^= 32;
          }

          return 1;
        }
        /* An overly simplified uppercasing model for utf-8. */


        if (p[i] < 0xe0) {
          p[i + 1] ^= 32;
          return 2;
        }
        /* An arbitrary transform for three byte characters. */


        p[i + 2] ^= 5;
        return 3;
      }

      exports.transformDictionaryWord = function (dst, idx, word, len, transform) {
        var prefix = kTransforms[transform].prefix;
        var suffix = kTransforms[transform].suffix;
        var t = kTransforms[transform].transform;
        var skip = t < kOmitFirst1 ? 0 : t - (kOmitFirst1 - 1);
        var i = 0;
        var start_idx = idx;
        var uppercase;

        if (skip > len) {
          skip = len;
        }

        var prefix_pos = 0;

        while (prefix_pos < prefix.length) {
          dst[idx++] = prefix[prefix_pos++];
        }

        word += skip;
        len -= skip;

        if (t <= kOmitLast9) {
          len -= t;
        }

        for (i = 0; i < len; i++) {
          dst[idx++] = BrotliDictionary.dictionary[word + i];
        }

        uppercase = idx - len;

        if (t === kUppercaseFirst) {
          ToUpperCase(dst, uppercase);
        } else if (t === kUppercaseAll) {
          while (len > 0) {
            var step = ToUpperCase(dst, uppercase);
            uppercase += step;
            len -= step;
          }
        }

        var suffix_pos = 0;

        while (suffix_pos < suffix.length) {
          dst[idx++] = suffix[suffix_pos++];
        }

        return idx - start_idx;
      };
      /***/

    },
    /* 527 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      __webpack_require__(28);

      __webpack_require__(46);

      __webpack_require__(61);

      __webpack_require__(32);

      __webpack_require__(62);

      __webpack_require__(134);

      __webpack_require__(63);

      __webpack_require__(64);

      __webpack_require__(65);

      __webpack_require__(66);

      __webpack_require__(67);

      __webpack_require__(68);

      __webpack_require__(69);

      __webpack_require__(70);

      __webpack_require__(71);

      __webpack_require__(72);

      __webpack_require__(73);

      __webpack_require__(74);

      __webpack_require__(75);

      __webpack_require__(76);

      __webpack_require__(77);

      __webpack_require__(78);

      __webpack_require__(79);

      __webpack_require__(80);

      __webpack_require__(81);

      __webpack_require__(82);

      __webpack_require__(83);

      __webpack_require__(84);

      __webpack_require__(85);

      var inflate = __webpack_require__(135); // Shift size for getting the index-1 table offset.


      var SHIFT_1 = 6 + 5; // Shift size for getting the index-2 table offset.

      var SHIFT_2 = 5; // Difference between the two shift sizes,
      // for getting an index-1 offset from an index-2 offset. 6=11-5

      var SHIFT_1_2 = SHIFT_1 - SHIFT_2; // Number of index-1 entries for the BMP. 32=0x20
      // This part of the index-1 table is omitted from the serialized form.

      var OMITTED_BMP_INDEX_1_LENGTH = 0x10000 >> SHIFT_1; // Number of entries in an index-2 block. 64=0x40

      var INDEX_2_BLOCK_LENGTH = 1 << SHIFT_1_2; // Mask for getting the lower bits for the in-index-2-block offset. */

      var INDEX_2_MASK = INDEX_2_BLOCK_LENGTH - 1; // Shift size for shifting left the index array values.
      // Increases possible data size with 16-bit index values at the cost
      // of compactability.
      // This requires data blocks to be aligned by DATA_GRANULARITY.

      var INDEX_SHIFT = 2; // Number of entries in a data block. 32=0x20

      var DATA_BLOCK_LENGTH = 1 << SHIFT_2; // Mask for getting the lower bits for the in-data-block offset.

      var DATA_MASK = DATA_BLOCK_LENGTH - 1; // The part of the index-2 table for U+D800..U+DBFF stores values for
      // lead surrogate code _units_ not code _points_.
      // Values for lead surrogate code _points_ are indexed with this portion of the table.
      // Length=32=0x20=0x400>>SHIFT_2. (There are 1024=0x400 lead surrogates.)

      var LSCP_INDEX_2_OFFSET = 0x10000 >> SHIFT_2;
      var LSCP_INDEX_2_LENGTH = 0x400 >> SHIFT_2; // Count the lengths of both BMP pieces. 2080=0x820

      var INDEX_2_BMP_LENGTH = LSCP_INDEX_2_OFFSET + LSCP_INDEX_2_LENGTH; // The 2-byte UTF-8 version of the index-2 table follows at offset 2080=0x820.
      // Length 32=0x20 for lead bytes C0..DF, regardless of SHIFT_2.

      var UTF8_2B_INDEX_2_OFFSET = INDEX_2_BMP_LENGTH;
      var UTF8_2B_INDEX_2_LENGTH = 0x800 >> 6; // U+0800 is the first code point after 2-byte UTF-8
      // The index-1 table, only used for supplementary code points, at offset 2112=0x840.
      // Variable length, for code points up to highStart, where the last single-value range starts.
      // Maximum length 512=0x200=0x100000>>SHIFT_1.
      // (For 0x100000 supplementary code points U+10000..U+10ffff.)
      //
      // The part of the index-2 table for supplementary code points starts
      // after this index-1 table.
      //
      // Both the index-1 table and the following part of the index-2 table
      // are omitted completely if there is only BMP data.

      var INDEX_1_OFFSET = UTF8_2B_INDEX_2_OFFSET + UTF8_2B_INDEX_2_LENGTH; // The alignment size of a data block. Also the granularity for compaction.

      var DATA_GRANULARITY = 1 << INDEX_SHIFT;

      var UnicodeTrie = /*#__PURE__*/function () {
        function UnicodeTrie(data) {
          var isBuffer = typeof data.readUInt32BE === 'function' && typeof data.slice === 'function';

          if (isBuffer || data instanceof Uint8Array) {
            // read binary format
            var uncompressedLength;

            if (isBuffer) {
              this.highStart = data.readUInt32BE(0);
              this.errorValue = data.readUInt32BE(4);
              uncompressedLength = data.readUInt32BE(8);
              data = data.slice(12);
            } else {
              var view = new DataView(data.buffer);
              this.highStart = view.getUint32(0);
              this.errorValue = view.getUint32(4);
              uncompressedLength = view.getUint32(8);
              data = data.subarray(12);
            } // double inflate the actual trie data


            data = inflate(data, new Uint8Array(uncompressedLength));
            data = inflate(data, new Uint8Array(uncompressedLength));
            this.data = new Uint32Array(data.buffer);
          } else {
            // pre-parsed data
            var _data = data;
            this.data = _data.data;
            this.highStart = _data.highStart;
            this.errorValue = _data.errorValue;
          }
        }

        var _proto = UnicodeTrie.prototype;

        _proto.get = function get(codePoint) {
          var index;

          if (codePoint < 0 || codePoint > 0x10ffff) {
            return this.errorValue;
          }

          if (codePoint < 0xd800 || codePoint > 0xdbff && codePoint <= 0xffff) {
            // Ordinary BMP code point, excluding leading surrogates.
            // BMP uses a single level lookup.  BMP index starts at offset 0 in the index.
            // data is stored in the index array itself.
            index = (this.data[codePoint >> SHIFT_2] << INDEX_SHIFT) + (codePoint & DATA_MASK);
            return this.data[index];
          }

          if (codePoint <= 0xffff) {
            // Lead Surrogate Code Point.  A Separate index section is stored for
            // lead surrogate code units and code points.
            //   The main index has the code unit data.
            //   For this function, we need the code point data.
            index = (this.data[LSCP_INDEX_2_OFFSET + (codePoint - 0xd800 >> SHIFT_2)] << INDEX_SHIFT) + (codePoint & DATA_MASK);
            return this.data[index];
          }

          if (codePoint < this.highStart) {
            // Supplemental code point, use two-level lookup.
            index = this.data[INDEX_1_OFFSET - OMITTED_BMP_INDEX_1_LENGTH + (codePoint >> SHIFT_1)];
            index = this.data[index + (codePoint >> SHIFT_2 & INDEX_2_MASK)];
            index = (index << INDEX_SHIFT) + (codePoint & DATA_MASK);
            return this.data[index];
          }

          return this.data[this.data.length - DATA_GRANULARITY];
        };

        return UnicodeTrie;
      }();

      module.exports = UnicodeTrie;
      /***/
    },
    /* 528 */

    /***/
    function (module, exports, __webpack_require__) {
      var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
      ;

      (function (exports) {
        'use strict';

        var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
        var PLUS = '+'.charCodeAt(0);
        var SLASH = '/'.charCodeAt(0);
        var NUMBER = '0'.charCodeAt(0);
        var LOWER = 'a'.charCodeAt(0);
        var UPPER = 'A'.charCodeAt(0);
        var PLUS_URL_SAFE = '-'.charCodeAt(0);
        var SLASH_URL_SAFE = '_'.charCodeAt(0);

        function decode(elt) {
          var code = elt.charCodeAt(0);
          if (code === PLUS || code === PLUS_URL_SAFE) return 62; // '+'

          if (code === SLASH || code === SLASH_URL_SAFE) return 63; // '/'

          if (code < NUMBER) return -1; //no match

          if (code < NUMBER + 10) return code - NUMBER + 26 + 26;
          if (code < UPPER + 26) return code - UPPER;
          if (code < LOWER + 26) return code - LOWER + 26;
        }

        function b64ToByteArray(b64) {
          var i, j, l, tmp, placeHolders, arr;

          if (b64.length % 4 > 0) {
            throw new Error('Invalid string. Length must be a multiple of 4');
          } // the number of equal signs (place holders)
          // if there are two placeholders, than the two characters before it
          // represent one byte
          // if there is only one, then the three characters before it represent 2 bytes
          // this is just a cheap hack to not do indexOf twice


          var len = b64.length;
          placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0; // base64 is 4/3 + up to two characters of the original data

          arr = new Arr(b64.length * 3 / 4 - placeHolders); // if there are placeholders, only get up to the last complete 4 chars

          l = placeHolders > 0 ? b64.length - 4 : b64.length;
          var L = 0;

          function push(v) {
            arr[L++] = v;
          }

          for (i = 0, j = 0; i < l; i += 4, j += 3) {
            tmp = decode(b64.charAt(i)) << 18 | decode(b64.charAt(i + 1)) << 12 | decode(b64.charAt(i + 2)) << 6 | decode(b64.charAt(i + 3));
            push((tmp & 0xFF0000) >> 16);
            push((tmp & 0xFF00) >> 8);
            push(tmp & 0xFF);
          }

          if (placeHolders === 2) {
            tmp = decode(b64.charAt(i)) << 2 | decode(b64.charAt(i + 1)) >> 4;
            push(tmp & 0xFF);
          } else if (placeHolders === 1) {
            tmp = decode(b64.charAt(i)) << 10 | decode(b64.charAt(i + 1)) << 4 | decode(b64.charAt(i + 2)) >> 2;
            push(tmp >> 8 & 0xFF);
            push(tmp & 0xFF);
          }

          return arr;
        }

        function uint8ToBase64(uint8) {
          var i,
              extraBytes = uint8.length % 3,
              // if we have 1 byte left, pad 2 bytes
          output = "",
              temp,
              length;

          function encode(num) {
            return lookup.charAt(num);
          }

          function tripletToBase64(num) {
            return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F);
          } // go through the array every three bytes, we'll deal with trailing stuff later


          for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
            temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];
            output += tripletToBase64(temp);
          } // pad the end with zeros, but make sure to not forget the extra bytes


          switch (extraBytes) {
            case 1:
              temp = uint8[uint8.length - 1];
              output += encode(temp >> 2);
              output += encode(temp << 4 & 0x3F);
              output += '==';
              break;

            case 2:
              temp = (uint8[uint8.length - 2] << 8) + uint8[uint8.length - 1];
              output += encode(temp >> 10);
              output += encode(temp >> 4 & 0x3F);
              output += encode(temp << 2 & 0x3F);
              output += '=';
              break;
          }

          return output;
        }

        exports.toByteArray = b64ToByteArray;
        exports.fromByteArray = uint8ToBase64;
      })(false ? undefined : exports);
      /***/

    },
    /* 529 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict"; // The following break classes are handled by the pair table

      exports.OP = 0; // Opening punctuation

      exports.CL = 1; // Closing punctuation

      exports.CP = 2; // Closing parenthesis

      exports.QU = 3; // Ambiguous quotation

      exports.GL = 4; // Glue

      exports.NS = 5; // Non-starters

      exports.EX = 6; // Exclamation/Interrogation

      exports.SY = 7; // Symbols allowing break after

      exports.IS = 8; // Infix separator

      exports.PR = 9; // Prefix

      exports.PO = 10; // Postfix

      exports.NU = 11; // Numeric

      exports.AL = 12; // Alphabetic

      exports.HL = 13; // Hebrew Letter

      exports.ID = 14; // Ideographic

      exports.IN = 15; // Inseparable characters

      exports.HY = 16; // Hyphen

      exports.BA = 17; // Break after

      exports.BB = 18; // Break before

      exports.B2 = 19; // Break on either side (but not pair)

      exports.ZW = 20; // Zero-width space

      exports.CM = 21; // Combining marks

      exports.WJ = 22; // Word joiner

      exports.H2 = 23; // Hangul LV

      exports.H3 = 24; // Hangul LVT

      exports.JL = 25; // Hangul L Jamo

      exports.JV = 26; // Hangul V Jamo

      exports.JT = 27; // Hangul T Jamo

      exports.RI = 28; // Regional Indicator
      // The following break classes are not handled by the pair table

      exports.AI = 29; // Ambiguous (Alphabetic or Ideograph)

      exports.BK = 30; // Break (mandatory)

      exports.CB = 31; // Contingent break

      exports.CJ = 32; // Conditional Japanese Starter

      exports.CR = 33; // Carriage return

      exports.LF = 34; // Line feed

      exports.NL = 35; // Next line

      exports.SA = 36; // South-East Asian

      exports.SG = 37; // Surrogates

      exports.SP = 38; // Space

      exports.XX = 39; // Unknown

      /***/
    },
    /* 530 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var CI_BRK, CP_BRK, DI_BRK, IN_BRK, PR_BRK;
      exports.DI_BRK = DI_BRK = 0; // Direct break opportunity

      exports.IN_BRK = IN_BRK = 1; // Indirect break opportunity

      exports.CI_BRK = CI_BRK = 2; // Indirect break opportunity for combining marks

      exports.CP_BRK = CP_BRK = 3; // Prohibited break for combining marks

      exports.PR_BRK = PR_BRK = 4; // Prohibited break
      // table generated from http://www.unicode.org/reports/tr14/#Table2

      exports.pairTable = [[PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, CP_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [PR_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, CI_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK], [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, CI_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK], [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, DI_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, DI_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, CI_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, PR_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, CI_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK]];
      /***/
    },
    /* 531 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";
      /* WEBPACK VAR INJECTION */

      (function (Buffer) {
        __webpack_require__(215);

        __webpack_require__(192);

        __webpack_require__(46);
        /*
         * MIT LICENSE
         * Copyright (c) 2011 Devon Govett
         *
         * Permission is hereby granted, free of charge, to any person obtaining a copy of this
         * software and associated documentation files (the "Software"), to deal in the Software
         * without restriction, including without limitation the rights to use, copy, modify, merge,
         * publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons
         * to whom the Software is furnished to do so, subject to the following conditions:
         *
         * The above copyright notice and this permission notice shall be included in all copies or
         * substantial portions of the Software.
         *
         * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
         * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
         * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
         * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
         * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
         */


        var fs = __webpack_require__(53);

        var zlib = __webpack_require__(244);

        module.exports = /*#__PURE__*/function () {
          PNG.decode = function decode(path, fn) {
            return fs.readFile(path, function (err, file) {
              var png = new PNG(file);
              return png.decode(function (pixels) {
                return fn(pixels);
              });
            });
          };

          PNG.load = function load(path) {
            var file = fs.readFileSync(path);
            return new PNG(file);
          };

          function PNG(data) {
            var i;
            this.data = data;
            this.pos = 8; // Skip the default header

            this.palette = [];
            this.imgData = [];
            this.transparency = {};
            this.text = {};

            while (true) {
              var chunkSize = this.readUInt32();
              var section = '';

              for (i = 0; i < 4; i++) {
                section += String.fromCharCode(this.data[this.pos++]);
              }

              switch (section) {
                case 'IHDR':
                  // we can grab  interesting values from here (like width, height, etc)
                  this.width = this.readUInt32();
                  this.height = this.readUInt32();
                  this.bits = this.data[this.pos++];
                  this.colorType = this.data[this.pos++];
                  this.compressionMethod = this.data[this.pos++];
                  this.filterMethod = this.data[this.pos++];
                  this.interlaceMethod = this.data[this.pos++];
                  break;

                case 'PLTE':
                  this.palette = this.read(chunkSize);
                  break;

                case 'IDAT':
                  for (i = 0; i < chunkSize; i++) {
                    this.imgData.push(this.data[this.pos++]);
                  }

                  break;

                case 'tRNS':
                  // This chunk can only occur once and it must occur after the
                  // PLTE chunk and before the IDAT chunk.
                  this.transparency = {};

                  switch (this.colorType) {
                    case 3:
                      // Indexed color, RGB. Each byte in this chunk is an alpha for
                      // the palette index in the PLTE ("palette") chunk up until the
                      // last non-opaque entry. Set up an array, stretching over all
                      // palette entries which will be 0 (opaque) or 1 (transparent).
                      this.transparency.indexed = this.read(chunkSize);
                      var short = 255 - this.transparency.indexed.length;

                      if (short > 0) {
                        for (i = 0; i < short; i++) {
                          this.transparency.indexed.push(255);
                        }
                      }

                      break;

                    case 0:
                      // Greyscale. Corresponding to entries in the PLTE chunk.
                      // Grey is two bytes, range 0 .. (2 ^ bit-depth) - 1
                      this.transparency.grayscale = this.read(chunkSize)[0];
                      break;

                    case 2:
                      // True color with proper alpha channel.
                      this.transparency.rgb = this.read(chunkSize);
                      break;
                  }

                  break;

                case 'tEXt':
                  var text = this.read(chunkSize);
                  var index = text.indexOf(0);
                  var key = String.fromCharCode.apply(String, text.slice(0, index));
                  this.text[key] = String.fromCharCode.apply(String, text.slice(index + 1));
                  break;

                case 'IEND':
                  // we've got everything we need!
                  switch (this.colorType) {
                    case 0:
                    case 3:
                    case 4:
                      this.colors = 1;
                      break;

                    case 2:
                    case 6:
                      this.colors = 3;
                      break;
                  }

                  this.hasAlphaChannel = [4, 6].includes(this.colorType);
                  var colors = this.colors + (this.hasAlphaChannel ? 1 : 0);
                  this.pixelBitlength = this.bits * colors;

                  switch (this.colors) {
                    case 1:
                      this.colorSpace = 'DeviceGray';
                      break;

                    case 3:
                      this.colorSpace = 'DeviceRGB';
                      break;
                  }

                  this.imgData = new Buffer(this.imgData);
                  return;
                  break;

                default:
                  // unknown (or unimportant) section, skip it
                  this.pos += chunkSize;
              }

              this.pos += 4; // Skip the CRC

              if (this.pos > this.data.length) {
                throw new Error('Incomplete or corrupt PNG file');
              }
            }
          }

          var _proto = PNG.prototype;

          _proto.read = function read(bytes) {
            var result = new Array(bytes);

            for (var _i = 0; _i < bytes; _i++) {
              result[_i] = this.data[this.pos++];
            }

            return result;
          };

          _proto.readUInt32 = function readUInt32() {
            var b1 = this.data[this.pos++] << 24;
            var b2 = this.data[this.pos++] << 16;
            var b3 = this.data[this.pos++] << 8;
            var b4 = this.data[this.pos++];
            return b1 | b2 | b3 | b4;
          };

          _proto.readUInt16 = function readUInt16() {
            var b1 = this.data[this.pos++] << 8;
            var b2 = this.data[this.pos++];
            return b1 | b2;
          };

          _proto.decodePixels = function decodePixels(fn) {
            var _this = this;

            return zlib.inflate(this.imgData, function (err, data) {
              if (err) {
                throw err;
              }

              var width = _this.width,
                  height = _this.height;
              var pixelBytes = _this.pixelBitlength / 8;
              var pixels = new Buffer(width * height * pixelBytes);
              var length = data.length;
              var pos = 0;

              function pass(x0, y0, dx, dy, singlePass) {
                if (singlePass === void 0) {
                  singlePass = false;
                }

                var w = Math.ceil((width - x0) / dx);
                var h = Math.ceil((height - y0) / dy);
                var scanlineLength = pixelBytes * w;
                var buffer = singlePass ? pixels : new Buffer(scanlineLength * h);
                var row = 0;
                var c = 0;

                while (row < h && pos < length) {
                  var byte, col, i, left, upper;

                  switch (data[pos++]) {
                    case 0:
                      // None
                      for (i = 0; i < scanlineLength; i++) {
                        buffer[c++] = data[pos++];
                      }

                      break;

                    case 1:
                      // Sub
                      for (i = 0; i < scanlineLength; i++) {
                        byte = data[pos++];
                        left = i < pixelBytes ? 0 : buffer[c - pixelBytes];
                        buffer[c++] = (byte + left) % 256;
                      }

                      break;

                    case 2:
                      // Up
                      for (i = 0; i < scanlineLength; i++) {
                        byte = data[pos++];
                        col = (i - i % pixelBytes) / pixelBytes;
                        upper = row && buffer[(row - 1) * scanlineLength + col * pixelBytes + i % pixelBytes];
                        buffer[c++] = (upper + byte) % 256;
                      }

                      break;

                    case 3:
                      // Average
                      for (i = 0; i < scanlineLength; i++) {
                        byte = data[pos++];
                        col = (i - i % pixelBytes) / pixelBytes;
                        left = i < pixelBytes ? 0 : buffer[c - pixelBytes];
                        upper = row && buffer[(row - 1) * scanlineLength + col * pixelBytes + i % pixelBytes];
                        buffer[c++] = (byte + Math.floor((left + upper) / 2)) % 256;
                      }

                      break;

                    case 4:
                      // Paeth
                      for (i = 0; i < scanlineLength; i++) {
                        var paeth, upperLeft;
                        byte = data[pos++];
                        col = (i - i % pixelBytes) / pixelBytes;
                        left = i < pixelBytes ? 0 : buffer[c - pixelBytes];

                        if (row === 0) {
                          upper = upperLeft = 0;
                        } else {
                          upper = buffer[(row - 1) * scanlineLength + col * pixelBytes + i % pixelBytes];
                          upperLeft = col && buffer[(row - 1) * scanlineLength + (col - 1) * pixelBytes + i % pixelBytes];
                        }

                        var p = left + upper - upperLeft;
                        var pa = Math.abs(p - left);
                        var pb = Math.abs(p - upper);
                        var pc = Math.abs(p - upperLeft);

                        if (pa <= pb && pa <= pc) {
                          paeth = left;
                        } else if (pb <= pc) {
                          paeth = upper;
                        } else {
                          paeth = upperLeft;
                        }

                        buffer[c++] = (byte + paeth) % 256;
                      }

                      break;

                    default:
                      throw new Error("Invalid filter algorithm: " + data[pos - 1]);
                  }

                  if (!singlePass) {
                    var pixelsPos = ((y0 + row * dy) * width + x0) * pixelBytes;
                    var bufferPos = row * scanlineLength;

                    for (i = 0; i < w; i++) {
                      for (var j = 0; j < pixelBytes; j++) {
                        pixels[pixelsPos++] = buffer[bufferPos++];
                      }

                      pixelsPos += (dx - 1) * pixelBytes;
                    }
                  }

                  row++;
                }
              }

              if (_this.interlaceMethod === 1) {
                /*
                  1 6 4 6 2 6 4 6
                  7 7 7 7 7 7 7 7
                  5 6 5 6 5 6 5 6
                  7 7 7 7 7 7 7 7
                  3 6 4 6 3 6 4 6
                  7 7 7 7 7 7 7 7
                  5 6 5 6 5 6 5 6
                  7 7 7 7 7 7 7 7
                */
                pass(0, 0, 8, 8); // 1

                pass(4, 0, 8, 8); // 2

                pass(0, 4, 4, 8); // 3

                pass(2, 0, 4, 4); // 4

                pass(0, 2, 2, 4); // 5

                pass(1, 0, 2, 2); // 6

                pass(0, 1, 1, 2); // 7
              } else {
                pass(0, 0, 1, 1, true);
              }

              return fn(pixels);
            });
          };

          _proto.decodePalette = function decodePalette() {
            var palette = this.palette;
            var length = palette.length;
            var transparency = this.transparency.indexed || [];
            var ret = new Buffer(transparency.length + length);
            var pos = 0;
            var c = 0;

            for (var _i2 = 0; _i2 < length; _i2 += 3) {
              var left;
              ret[pos++] = palette[_i2];
              ret[pos++] = palette[_i2 + 1];
              ret[pos++] = palette[_i2 + 2];
              ret[pos++] = (left = transparency[c++]) != null ? left : 255;
            }

            return ret;
          };

          _proto.copyToImageData = function copyToImageData(imageData, pixels) {
            var j, k;
            var colors = this.colors;
            var palette = null;
            var alpha = this.hasAlphaChannel;

            if (this.palette.length) {
              palette = this._decodedPalette || (this._decodedPalette = this.decodePalette());
              colors = 4;
              alpha = true;
            }

            var data = imageData.data || imageData;
            var length = data.length;
            var input = palette || pixels;
            var i = j = 0;

            if (colors === 1) {
              while (i < length) {
                k = palette ? pixels[i / 4] * 4 : j;
                var v = input[k++];
                data[i++] = v;
                data[i++] = v;
                data[i++] = v;
                data[i++] = alpha ? input[k++] : 255;
                j = k;
              }
            } else {
              while (i < length) {
                k = palette ? pixels[i / 4] * 4 : j;
                data[i++] = input[k++];
                data[i++] = input[k++];
                data[i++] = input[k++];
                data[i++] = alpha ? input[k++] : 255;
                j = k;
              }
            }
          };

          _proto.decode = function decode(fn) {
            var _this2 = this;

            var ret = new Buffer(this.width * this.height * 4);
            return this.decodePixels(function (pixels) {
              _this2.copyToImageData(ret, pixels);

              return fn(ret);
            });
          };

          return PNG;
        }();
        /* WEBPACK VAR INJECTION */

      }).call(this, __webpack_require__(10).Buffer);
      /***/
    },
    /* 532 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var isArray = __webpack_require__(0).isArray;

      function typeName(bold, italics) {
        var type = 'normal';

        if (bold && italics) {
          type = 'bolditalics';
        } else if (bold) {
          type = 'bold';
        } else if (italics) {
          type = 'italics';
        }

        return type;
      }

      function FontProvider(fontDescriptors, pdfKitDoc) {
        this.fonts = {};
        this.pdfKitDoc = pdfKitDoc;
        this.fontCache = {};

        for (var font in fontDescriptors) {
          if (fontDescriptors.hasOwnProperty(font)) {
            var fontDef = fontDescriptors[font];
            this.fonts[font] = {
              normal: fontDef.normal,
              bold: fontDef.bold,
              italics: fontDef.italics,
              bolditalics: fontDef.bolditalics
            };
          }
        }
      }

      FontProvider.prototype.getFontType = function (bold, italics) {
        return typeName(bold, italics);
      };

      FontProvider.prototype.getFontFile = function (familyName, bold, italics) {
        var type = this.getFontType(bold, italics);

        if (!this.fonts[familyName] || !this.fonts[familyName][type]) {
          return null;
        }

        return this.fonts[familyName][type];
      };

      FontProvider.prototype.provideFont = function (familyName, bold, italics) {
        var type = this.getFontType(bold, italics);

        if (this.getFontFile(familyName, bold, italics) === null) {
          throw new Error('Font \'' + familyName + '\' in style \'' + type + '\' is not defined in the font section of the document definition.');
        }

        this.fontCache[familyName] = this.fontCache[familyName] || {};

        if (!this.fontCache[familyName][type]) {
          var def = this.fonts[familyName][type];

          if (!isArray(def)) {
            def = [def];
          }

          this.fontCache[familyName][type] = this.pdfKitDoc.font.apply(this.pdfKitDoc, def)._font;
        }

        return this.fontCache[familyName][type];
      };

      module.exports = FontProvider;
      /***/
    },
    /* 533 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var TraversalTracker = __webpack_require__(291);

      var DocPreprocessor = __webpack_require__(534);

      var DocMeasure = __webpack_require__(535);

      var DocumentContext = __webpack_require__(293);

      var PageElementWriter = __webpack_require__(537);

      var ColumnCalculator = __webpack_require__(195);

      var TableProcessor = __webpack_require__(539);

      var Line = __webpack_require__(294);

      var isString = __webpack_require__(0).isString;

      var isArray = __webpack_require__(0).isArray;

      var isUndefined = __webpack_require__(0).isUndefined;

      var isNull = __webpack_require__(0).isNull;

      var pack = __webpack_require__(0).pack;

      var offsetVector = __webpack_require__(0).offsetVector;

      var fontStringify = __webpack_require__(0).fontStringify;

      var getNodeId = __webpack_require__(0).getNodeId;

      var isFunction = __webpack_require__(0).isFunction;

      var TextTools = __webpack_require__(194);

      var StyleContextStack = __webpack_require__(292);

      var isNumber = __webpack_require__(0).isNumber;

      function addAll(target, otherArray) {
        otherArray.forEach(function (item) {
          target.push(item);
        });
      }
      /**
       * Creates an instance of LayoutBuilder - layout engine which turns document-definition-object
       * into a set of pages, lines, inlines and vectors ready to be rendered into a PDF
       *
       * @param {Object} pageSize - an object defining page width and height
       * @param {Object} pageMargins - an object defining top, left, right and bottom margins
       */


      function LayoutBuilder(pageSize, pageMargins, imageMeasure, svgMeasure) {
        this.pageSize = pageSize;
        this.pageMargins = pageMargins;
        this.tracker = new TraversalTracker();
        this.imageMeasure = imageMeasure;
        this.svgMeasure = svgMeasure;
        this.tableLayouts = {};
      }

      LayoutBuilder.prototype.registerTableLayouts = function (tableLayouts) {
        this.tableLayouts = pack(this.tableLayouts, tableLayouts);
      };
      /**
       * Executes layout engine on document-definition-object and creates an array of pages
       * containing positioned Blocks, Lines and inlines
       *
       * @param {Object} docStructure document-definition-object
       * @param {Object} fontProvider font provider
       * @param {Object} styleDictionary dictionary with style definitions
       * @param {Object} defaultStyle default style definition
       * @return {Array} an array of pages
       */


      LayoutBuilder.prototype.layoutDocument = function (docStructure, fontProvider, styleDictionary, defaultStyle, background, header, footer, images, watermark, pageBreakBeforeFct) {
        function addPageBreaksIfNecessary(linearNodeList, pages) {
          if (!isFunction(pageBreakBeforeFct)) {
            return false;
          }

          linearNodeList = linearNodeList.filter(function (node) {
            return node.positions.length > 0;
          });
          linearNodeList.forEach(function (node) {
            var nodeInfo = {};
            ['id', 'text', 'ul', 'ol', 'table', 'image', 'qr', 'canvas', 'svg', 'columns', 'headlineLevel', 'style', 'pageBreak', 'pageOrientation', 'width', 'height'].forEach(function (key) {
              if (node[key] !== undefined) {
                nodeInfo[key] = node[key];
              }
            });
            nodeInfo.startPosition = node.positions[0];
            nodeInfo.pageNumbers = node.positions.map(function (node) {
              return node.pageNumber;
            }).filter(function (element, position, array) {
              return array.indexOf(element) === position;
            });
            nodeInfo.pages = pages.length;
            nodeInfo.stack = isArray(node.stack);
            node.nodeInfo = nodeInfo;
          });

          for (var index = 0; index < linearNodeList.length; index++) {
            var node = linearNodeList[index];

            if (node.pageBreak !== 'before' && !node.pageBreakCalculated) {
              node.pageBreakCalculated = true;
              var pageNumber = node.nodeInfo.pageNumbers[0];
              var followingNodesOnPage = [];
              var nodesOnNextPage = [];
              var previousNodesOnPage = [];

              for (var ii = index + 1, l = linearNodeList.length; ii < l; ii++) {
                if (linearNodeList[ii].nodeInfo.pageNumbers.indexOf(pageNumber) > -1) {
                  followingNodesOnPage.push(linearNodeList[ii].nodeInfo);
                }

                if (linearNodeList[ii].nodeInfo.pageNumbers.indexOf(pageNumber + 1) > -1) {
                  nodesOnNextPage.push(linearNodeList[ii].nodeInfo);
                }
              }

              for (var ii = 0; ii < index; ii++) {
                if (linearNodeList[ii].nodeInfo.pageNumbers.indexOf(pageNumber) > -1) {
                  previousNodesOnPage.push(linearNodeList[ii].nodeInfo);
                }
              }

              if (pageBreakBeforeFct(node.nodeInfo, followingNodesOnPage, nodesOnNextPage, previousNodesOnPage)) {
                node.pageBreak = 'before';
                return true;
              }
            }
          }

          return false;
        }

        this.docPreprocessor = new DocPreprocessor();
        this.docMeasure = new DocMeasure(fontProvider, styleDictionary, defaultStyle, this.imageMeasure, this.svgMeasure, this.tableLayouts, images);

        function resetXYs(result) {
          result.linearNodeList.forEach(function (node) {
            node.resetXY();
          });
        }

        var result = this.tryLayoutDocument(docStructure, fontProvider, styleDictionary, defaultStyle, background, header, footer, images, watermark);

        while (addPageBreaksIfNecessary(result.linearNodeList, result.pages)) {
          resetXYs(result);
          result = this.tryLayoutDocument(docStructure, fontProvider, styleDictionary, defaultStyle, background, header, footer, images, watermark);
        }

        return result.pages;
      };

      LayoutBuilder.prototype.tryLayoutDocument = function (docStructure, fontProvider, styleDictionary, defaultStyle, background, header, footer, images, watermark, pageBreakBeforeFct) {
        this.linearNodeList = [];
        docStructure = this.docPreprocessor.preprocessDocument(docStructure);
        docStructure = this.docMeasure.measureDocument(docStructure);
        this.writer = new PageElementWriter(new DocumentContext(this.pageSize, this.pageMargins), this.tracker);

        var _this = this;

        this.writer.context().tracker.startTracking('pageAdded', function () {
          _this.addBackground(background);
        });
        this.addBackground(background);
        this.processNode(docStructure);
        this.addHeadersAndFooters(header, footer);

        if (watermark != null) {
          this.addWatermark(watermark, fontProvider, defaultStyle);
        }

        return {
          pages: this.writer.context().pages,
          linearNodeList: this.linearNodeList
        };
      };

      LayoutBuilder.prototype.addBackground = function (background) {
        var backgroundGetter = isFunction(background) ? background : function () {
          return background;
        };
        var context = this.writer.context();
        var pageSize = context.getCurrentPage().pageSize;
        var pageBackground = backgroundGetter(context.page + 1, pageSize);

        if (pageBackground) {
          this.writer.beginUnbreakableBlock(pageSize.width, pageSize.height);
          pageBackground = this.docPreprocessor.preprocessDocument(pageBackground);
          this.processNode(this.docMeasure.measureDocument(pageBackground));
          this.writer.commitUnbreakableBlock(0, 0);
          context.backgroundLength[context.page] += pageBackground.positions.length;
        }
      };

      LayoutBuilder.prototype.addStaticRepeatable = function (headerOrFooter, sizeFunction) {
        this.addDynamicRepeatable(function () {
          return JSON.parse(JSON.stringify(headerOrFooter)); // copy to new object
        }, sizeFunction);
      };

      LayoutBuilder.prototype.addDynamicRepeatable = function (nodeGetter, sizeFunction) {
        var pages = this.writer.context().pages;

        for (var pageIndex = 0, l = pages.length; pageIndex < l; pageIndex++) {
          this.writer.context().page = pageIndex;
          var node = nodeGetter(pageIndex + 1, l, this.writer.context().pages[pageIndex].pageSize);

          if (node) {
            var sizes = sizeFunction(this.writer.context().getCurrentPage().pageSize, this.pageMargins);
            this.writer.beginUnbreakableBlock(sizes.width, sizes.height);
            node = this.docPreprocessor.preprocessDocument(node);
            this.processNode(this.docMeasure.measureDocument(node));
            this.writer.commitUnbreakableBlock(sizes.x, sizes.y);
          }
        }
      };

      LayoutBuilder.prototype.addHeadersAndFooters = function (header, footer) {
        var headerSizeFct = function headerSizeFct(pageSize, pageMargins) {
          return {
            x: 0,
            y: 0,
            width: pageSize.width,
            height: pageMargins.top
          };
        };

        var footerSizeFct = function footerSizeFct(pageSize, pageMargins) {
          return {
            x: 0,
            y: pageSize.height - pageMargins.bottom,
            width: pageSize.width,
            height: pageMargins.bottom
          };
        };

        if (isFunction(header)) {
          this.addDynamicRepeatable(header, headerSizeFct);
        } else if (header) {
          this.addStaticRepeatable(header, headerSizeFct);
        }

        if (isFunction(footer)) {
          this.addDynamicRepeatable(footer, footerSizeFct);
        } else if (footer) {
          this.addStaticRepeatable(footer, footerSizeFct);
        }
      };

      LayoutBuilder.prototype.addWatermark = function (watermark, fontProvider, defaultStyle) {
        if (isString(watermark)) {
          watermark = {
            'text': watermark
          };
        }

        if (!watermark.text) {
          // empty watermark text
          return;
        }

        watermark.font = watermark.font || defaultStyle.font || 'Roboto';
        watermark.fontSize = watermark.fontSize || 'auto';
        watermark.color = watermark.color || 'black';
        watermark.opacity = isNumber(watermark.opacity) ? watermark.opacity : 0.6;
        watermark.bold = watermark.bold || false;
        watermark.italics = watermark.italics || false;
        watermark.angle = !isUndefined(watermark.angle) && !isNull(watermark.angle) ? watermark.angle : null;

        if (watermark.angle === null) {
          watermark.angle = Math.atan2(this.pageSize.height, this.pageSize.width) * -180 / Math.PI;
        }

        if (watermark.fontSize === 'auto') {
          watermark.fontSize = getWatermarkFontSize(this.pageSize, watermark, fontProvider);
        }

        var watermarkObject = {
          text: watermark.text,
          font: fontProvider.provideFont(watermark.font, watermark.bold, watermark.italics),
          fontSize: watermark.fontSize,
          color: watermark.color,
          opacity: watermark.opacity,
          angle: watermark.angle
        };
        watermarkObject._size = getWatermarkSize(watermark, fontProvider);
        var pages = this.writer.context().pages;

        for (var i = 0, l = pages.length; i < l; i++) {
          pages[i].watermark = watermarkObject;
        }

        function getWatermarkSize(watermark, fontProvider) {
          var textTools = new TextTools(fontProvider);
          var styleContextStack = new StyleContextStack(null, {
            font: watermark.font,
            bold: watermark.bold,
            italics: watermark.italics
          });
          styleContextStack.push({
            fontSize: watermark.fontSize
          });
          var size = textTools.sizeOfString(watermark.text, styleContextStack);
          var rotatedSize = textTools.sizeOfRotatedText(watermark.text, watermark.angle, styleContextStack);
          return {
            size: size,
            rotatedSize: rotatedSize
          };
        }

        function getWatermarkFontSize(pageSize, watermark, fontProvider) {
          var textTools = new TextTools(fontProvider);
          var styleContextStack = new StyleContextStack(null, {
            font: watermark.font,
            bold: watermark.bold,
            italics: watermark.italics
          });
          var rotatedSize;
          /**
           * Binary search the best font size.
           * Initial bounds [0, 1000]
           * Break when range < 1
           */

          var a = 0;
          var b = 1000;
          var c = (a + b) / 2;

          while (Math.abs(a - b) > 1) {
            styleContextStack.push({
              fontSize: c
            });
            rotatedSize = textTools.sizeOfRotatedText(watermark.text, watermark.angle, styleContextStack);

            if (rotatedSize.width > pageSize.width) {
              b = c;
              c = (a + b) / 2;
            } else if (rotatedSize.width < pageSize.width) {
              if (rotatedSize.height > pageSize.height) {
                b = c;
                c = (a + b) / 2;
              } else {
                a = c;
                c = (a + b) / 2;
              }
            }

            styleContextStack.pop();
          }
          /*
           End binary search
           */


          return c;
        }
      };

      function decorateNode(node) {
        var x = node.x,
            y = node.y;
        node.positions = [];

        if (isArray(node.canvas)) {
          node.canvas.forEach(function (vector) {
            var x = vector.x,
                y = vector.y,
                x1 = vector.x1,
                y1 = vector.y1,
                x2 = vector.x2,
                y2 = vector.y2;

            vector.resetXY = function () {
              vector.x = x;
              vector.y = y;
              vector.x1 = x1;
              vector.y1 = y1;
              vector.x2 = x2;
              vector.y2 = y2;
            };
          });
        }

        node.resetXY = function () {
          node.x = x;
          node.y = y;

          if (isArray(node.canvas)) {
            node.canvas.forEach(function (vector) {
              vector.resetXY();
            });
          }
        };
      }

      LayoutBuilder.prototype.processNode = function (node) {
        var self = this;
        this.linearNodeList.push(node);
        decorateNode(node);
        applyMargins(function () {
          var unbreakable = node.unbreakable;

          if (unbreakable) {
            self.writer.beginUnbreakableBlock();
          }

          var absPosition = node.absolutePosition;

          if (absPosition) {
            self.writer.context().beginDetachedBlock();
            self.writer.context().moveTo(absPosition.x || 0, absPosition.y || 0);
          }

          var relPosition = node.relativePosition;

          if (relPosition) {
            self.writer.context().beginDetachedBlock();
            self.writer.context().moveToRelative(relPosition.x || 0, relPosition.y || 0);
          }

          if (node.stack) {
            self.processVerticalContainer(node);
          } else if (node.columns) {
            self.processColumns(node);
          } else if (node.ul) {
            self.processList(false, node);
          } else if (node.ol) {
            self.processList(true, node);
          } else if (node.table) {
            self.processTable(node);
          } else if (node.text !== undefined) {
            self.processLeaf(node);
          } else if (node.toc) {
            self.processToc(node);
          } else if (node.image) {
            self.processImage(node);
          } else if (node.svg) {
            self.processSVG(node);
          } else if (node.canvas) {
            self.processCanvas(node);
          } else if (node.qr) {
            self.processQr(node);
          } else if (!node._span) {
            throw 'Unrecognized document structure: ' + JSON.stringify(node, fontStringify);
          }

          if (absPosition || relPosition) {
            self.writer.context().endDetachedBlock();
          }

          if (unbreakable) {
            self.writer.commitUnbreakableBlock();
          }
        });

        function applyMargins(callback) {
          var margin = node._margin;

          if (node.pageBreak === 'before') {
            self.writer.moveToNextPage(node.pageOrientation);
          } else if (node.pageBreak === 'beforeOdd') {
            self.writer.moveToNextPage(node.pageOrientation);

            if ((self.writer.context().page + 1) % 2 === 1) {
              self.writer.moveToNextPage(node.pageOrientation);
            }
          } else if (node.pageBreak === 'beforeEven') {
            self.writer.moveToNextPage(node.pageOrientation);

            if ((self.writer.context().page + 1) % 2 === 0) {
              self.writer.moveToNextPage(node.pageOrientation);
            }
          }

          if (margin) {
            self.writer.context().moveDown(margin[1]);
            self.writer.context().addMargin(margin[0], margin[2]);
          }

          callback();

          if (margin) {
            self.writer.context().addMargin(-margin[0], -margin[2]);
            self.writer.context().moveDown(margin[3]);
          }

          if (node.pageBreak === 'after') {
            self.writer.moveToNextPage(node.pageOrientation);
          } else if (node.pageBreak === 'afterOdd') {
            self.writer.moveToNextPage(node.pageOrientation);

            if ((self.writer.context().page + 1) % 2 === 1) {
              self.writer.moveToNextPage(node.pageOrientation);
            }
          } else if (node.pageBreak === 'afterEven') {
            self.writer.moveToNextPage(node.pageOrientation);

            if ((self.writer.context().page + 1) % 2 === 0) {
              self.writer.moveToNextPage(node.pageOrientation);
            }
          }
        }
      }; // vertical container


      LayoutBuilder.prototype.processVerticalContainer = function (node) {
        var self = this;
        node.stack.forEach(function (item) {
          self.processNode(item);
          addAll(node.positions, item.positions); //TODO: paragraph gap
        });
      }; // columns


      LayoutBuilder.prototype.processColumns = function (columnNode) {
        var columns = columnNode.columns;
        var availableWidth = this.writer.context().availableWidth;
        var gaps = gapArray(columnNode._gap);

        if (gaps) {
          availableWidth -= (gaps.length - 1) * columnNode._gap;
        }

        ColumnCalculator.buildColumnWidths(columns, availableWidth);
        var result = this.processRow(columns, columns, gaps);
        addAll(columnNode.positions, result.positions);

        function gapArray(gap) {
          if (!gap) {
            return null;
          }

          var gaps = [];
          gaps.push(0);

          for (var i = columns.length - 1; i > 0; i--) {
            gaps.push(gap);
          }

          return gaps;
        }
      };

      LayoutBuilder.prototype.processRow = function (columns, widths, gaps, tableBody, tableRow, height) {
        var self = this;
        var pageBreaks = [],
            positions = [];
        this.tracker.auto('pageChanged', storePageBreakData, function () {
          widths = widths || columns;
          self.writer.context().beginColumnGroup();

          for (var i = 0, l = columns.length; i < l; i++) {
            var column = columns[i];
            var width = widths[i]._calcWidth;
            var leftOffset = colLeftOffset(i);

            if (column.colSpan && column.colSpan > 1) {
              for (var j = 1; j < column.colSpan; j++) {
                width += widths[++i]._calcWidth + gaps[i];
              }
            }

            self.writer.context().beginColumn(width, leftOffset, getEndingCell(column, i));

            if (!column._span) {
              self.processNode(column);
              addAll(positions, column.positions);
            } else if (column._columnEndingContext) {
              // row-span ending
              self.writer.context().markEnding(column);
            }
          }

          self.writer.context().completeColumnGroup(height);
        });
        return {
          pageBreaks: pageBreaks,
          positions: positions
        };

        function storePageBreakData(data) {
          var pageDesc;

          for (var i = 0, l = pageBreaks.length; i < l; i++) {
            var desc = pageBreaks[i];

            if (desc.prevPage === data.prevPage) {
              pageDesc = desc;
              break;
            }
          }

          if (!pageDesc) {
            pageDesc = data;
            pageBreaks.push(pageDesc);
          }

          pageDesc.prevY = Math.max(pageDesc.prevY, data.prevY);
          pageDesc.y = Math.min(pageDesc.y, data.y);
        }

        function colLeftOffset(i) {
          if (gaps && gaps.length > i) {
            return gaps[i];
          }

          return 0;
        }

        function getEndingCell(column, columnIndex) {
          if (column.rowSpan && column.rowSpan > 1) {
            var endingRow = tableRow + column.rowSpan - 1;

            if (endingRow >= tableBody.length) {
              throw 'Row span for column ' + columnIndex + ' (with indexes starting from 0) exceeded row count';
            }

            return tableBody[endingRow][columnIndex];
          }

          return null;
        }
      }; // lists


      LayoutBuilder.prototype.processList = function (orderedList, node) {
        var self = this,
            items = orderedList ? node.ol : node.ul,
            gapSize = node._gapSize;
        this.writer.context().addMargin(gapSize.width);
        var nextMarker;
        this.tracker.auto('lineAdded', addMarkerToFirstLeaf, function () {
          items.forEach(function (item) {
            nextMarker = item.listMarker;
            self.processNode(item);
            addAll(node.positions, item.positions);
          });
        });
        this.writer.context().addMargin(-gapSize.width);

        function addMarkerToFirstLeaf(line) {
          // I'm not very happy with the way list processing is implemented
          // (both code and algorithm should be rethinked)
          if (nextMarker) {
            var marker = nextMarker;
            nextMarker = null;

            if (marker.canvas) {
              var vector = marker.canvas[0];
              offsetVector(vector, -marker._minWidth, 0);
              self.writer.addVector(vector);
            } else if (marker._inlines) {
              var markerLine = new Line(self.pageSize.width);
              markerLine.addInline(marker._inlines[0]);
              markerLine.x = -marker._minWidth;
              markerLine.y = line.getAscenderHeight() - markerLine.getAscenderHeight();
              self.writer.addLine(markerLine, true);
            }
          }
        }
      }; // tables


      LayoutBuilder.prototype.processTable = function (tableNode) {
        var processor = new TableProcessor(tableNode);
        processor.beginTable(this.writer);
        var rowHeights = tableNode.table.heights;

        for (var i = 0, l = tableNode.table.body.length; i < l; i++) {
          processor.beginRow(i, this.writer);
          var height;

          if (isFunction(rowHeights)) {
            height = rowHeights(i);
          } else if (isArray(rowHeights)) {
            height = rowHeights[i];
          } else {
            height = rowHeights;
          }

          if (height === 'auto') {
            height = undefined;
          }

          var result = this.processRow(tableNode.table.body[i], tableNode.table.widths, tableNode._offsets.offsets, tableNode.table.body, i, height);
          addAll(tableNode.positions, result.positions);
          processor.endRow(i, this.writer, result.pageBreaks);
        }

        processor.endTable(this.writer);
      }; // leafs (texts)


      LayoutBuilder.prototype.processLeaf = function (node) {
        var line = this.buildNextLine(node);

        if (line && (node.tocItem || node.id)) {
          line._node = node;
        }

        var currentHeight = line ? line.getHeight() : 0;
        var maxHeight = node.maxHeight || -1;

        if (line) {
          var nodeId = getNodeId(node);

          if (nodeId) {
            line.id = nodeId;
          }
        }

        if (node._tocItemRef) {
          line._pageNodeRef = node._tocItemRef;
        }

        if (node._pageRef) {
          line._pageNodeRef = node._pageRef._nodeRef;
        }

        if (line && line.inlines && isArray(line.inlines)) {
          for (var i = 0, l = line.inlines.length; i < l; i++) {
            if (line.inlines[i]._tocItemRef) {
              line.inlines[i]._pageNodeRef = line.inlines[i]._tocItemRef;
            }

            if (line.inlines[i]._pageRef) {
              line.inlines[i]._pageNodeRef = line.inlines[i]._pageRef._nodeRef;
            }
          }
        }

        while (line && (maxHeight === -1 || currentHeight < maxHeight)) {
          var positions = this.writer.addLine(line);
          node.positions.push(positions);
          line = this.buildNextLine(node);

          if (line) {
            currentHeight += line.getHeight();
          }
        }
      };

      LayoutBuilder.prototype.processToc = function (node) {
        if (node.toc.title) {
          this.processNode(node.toc.title);
        }

        if (node.toc._table) {
          this.processNode(node.toc._table);
        }
      };

      LayoutBuilder.prototype.buildNextLine = function (textNode) {
        function cloneInline(inline) {
          var newInline = inline.constructor();

          for (var key in inline) {
            newInline[key] = inline[key];
          }

          return newInline;
        }

        if (!textNode._inlines || textNode._inlines.length === 0) {
          return null;
        }

        var line = new Line(this.writer.context().availableWidth);
        var textTools = new TextTools(null);
        var isForceContinue = false;

        while (textNode._inlines && textNode._inlines.length > 0 && (line.hasEnoughSpaceForInline(textNode._inlines[0], textNode._inlines.slice(1)) || isForceContinue)) {
          var isHardWrap = false;

          var inline = textNode._inlines.shift();

          isForceContinue = false;

          if (!inline.noWrap && inline.text.length > 1 && inline.width > line.getAvailableWidth()) {
            var widthPerChar = inline.width / inline.text.length;
            var maxChars = Math.floor(line.getAvailableWidth() / widthPerChar);

            if (maxChars < 1) {
              maxChars = 1;
            }

            if (maxChars < inline.text.length) {
              var newInline = cloneInline(inline);
              newInline.text = inline.text.substr(maxChars);
              inline.text = inline.text.substr(0, maxChars);
              newInline.width = textTools.widthOfString(newInline.text, newInline.font, newInline.fontSize, newInline.characterSpacing, newInline.fontFeatures);
              inline.width = textTools.widthOfString(inline.text, inline.font, inline.fontSize, inline.characterSpacing, inline.fontFeatures);

              textNode._inlines.unshift(newInline);

              isHardWrap = true;
            }
          }

          line.addInline(inline);
          isForceContinue = inline.noNewLine && !isHardWrap;
        }

        line.lastLineInParagraph = textNode._inlines.length === 0;
        return line;
      }; // images


      LayoutBuilder.prototype.processImage = function (node) {
        var position = this.writer.addImage(node);
        node.positions.push(position);
      };

      LayoutBuilder.prototype.processSVG = function (node) {
        var position = this.writer.addSVG(node);
        node.positions.push(position);
      };

      LayoutBuilder.prototype.processCanvas = function (node) {
        var height = node._minHeight;

        if (node.absolutePosition === undefined && this.writer.context().availableHeight < height) {
          // TODO: support for canvas larger than a page
          // TODO: support for other overflow methods
          this.writer.moveToNextPage();
        }

        this.writer.alignCanvas(node);
        node.canvas.forEach(function (vector) {
          var position = this.writer.addVector(vector);
          node.positions.push(position);
        }, this);
        this.writer.context().moveDown(height);
      };

      LayoutBuilder.prototype.processQr = function (node) {
        var position = this.writer.addQr(node);
        node.positions.push(position);
      };

      module.exports = LayoutBuilder;
      /***/
    },
    /* 534 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";
      /* WEBPACK VAR INJECTION */

      (function (Buffer) {
        var isString = __webpack_require__(0).isString;

        var isNumber = __webpack_require__(0).isNumber;

        var isBoolean = __webpack_require__(0).isBoolean;

        var isArray = __webpack_require__(0).isArray;

        var isUndefined = __webpack_require__(0).isUndefined;

        var fontStringify = __webpack_require__(0).fontStringify;

        function DocPreprocessor() {}

        DocPreprocessor.prototype.preprocessDocument = function (docStructure) {
          this.parentNode = null;
          this.tocs = [];
          this.nodeReferences = [];
          return this.preprocessNode(docStructure);
        };

        DocPreprocessor.prototype.preprocessNode = function (node) {
          // expand shortcuts and casting values
          if (isArray(node)) {
            node = {
              stack: node
            };
          } else if (isString(node)) {
            node = {
              text: node
            };
          } else if (isNumber(node) || isBoolean(node)) {
            node = {
              text: node.toString()
            };
          } else if (node === undefined || node === null) {
            node = {
              text: ''
            };
          } else if (Object.keys(node).length === 0) {
            // empty object
            node = {
              text: ''
            };
          } else if ('text' in node && (node.text === undefined || node.text === null)) {
            node.text = '';
          }

          if (node.columns) {
            return this.preprocessColumns(node);
          } else if (node.stack) {
            return this.preprocessVerticalContainer(node);
          } else if (node.ul) {
            return this.preprocessList(node);
          } else if (node.ol) {
            return this.preprocessList(node);
          } else if (node.table) {
            return this.preprocessTable(node);
          } else if (node.text !== undefined) {
            return this.preprocessText(node);
          } else if (node.toc) {
            return this.preprocessToc(node);
          } else if (node.image) {
            return this.preprocessImage(node);
          } else if (node.svg) {
            return this.preprocessSVG(node);
          } else if (node.canvas) {
            return this.preprocessCanvas(node);
          } else if (node.qr) {
            return this.preprocessQr(node);
          } else if (node.pageReference || node.textReference) {
            return this.preprocessText(node);
          } else {
            throw 'Unrecognized document structure: ' + JSON.stringify(node, fontStringify);
          }
        };

        DocPreprocessor.prototype.preprocessColumns = function (node) {
          var columns = node.columns;

          for (var i = 0, l = columns.length; i < l; i++) {
            columns[i] = this.preprocessNode(columns[i]);
          }

          return node;
        };

        DocPreprocessor.prototype.preprocessVerticalContainer = function (node) {
          var items = node.stack;

          for (var i = 0, l = items.length; i < l; i++) {
            items[i] = this.preprocessNode(items[i]);
          }

          return node;
        };

        DocPreprocessor.prototype.preprocessList = function (node) {
          var items = node.ul || node.ol;

          for (var i = 0, l = items.length; i < l; i++) {
            items[i] = this.preprocessNode(items[i]);
          }

          return node;
        };

        DocPreprocessor.prototype.preprocessTable = function (node) {
          var col, row, cols, rows;

          for (col = 0, cols = node.table.body[0].length; col < cols; col++) {
            for (row = 0, rows = node.table.body.length; row < rows; row++) {
              var rowData = node.table.body[row];
              var data = rowData[col];

              if (data !== undefined) {
                if (data === null) {
                  // transform to object
                  data = '';
                }

                if (!data._span) {
                  rowData[col] = this.preprocessNode(data);
                }
              }
            }
          }

          return node;
        };

        DocPreprocessor.prototype.preprocessText = function (node) {
          if (node.tocItem) {
            if (!isArray(node.tocItem)) {
              node.tocItem = [node.tocItem];
            }

            for (var i = 0, l = node.tocItem.length; i < l; i++) {
              if (!isString(node.tocItem[i])) {
                node.tocItem[i] = '_default_';
              }

              var tocItemId = node.tocItem[i];

              if (!this.tocs[tocItemId]) {
                this.tocs[tocItemId] = {
                  toc: {
                    _items: [],
                    _pseudo: true
                  }
                };
              }

              if (!node.id) {
                node.id = 'toc-' + tocItemId + '-' + this.tocs[tocItemId].toc._items.length;
              }

              var tocItemRef = {
                _nodeRef: this._getNodeForNodeRef(node),
                _textNodeRef: node
              };

              this.tocs[tocItemId].toc._items.push(tocItemRef);
            }
          }

          if (node.id) {
            if (this.nodeReferences[node.id]) {
              if (!this.nodeReferences[node.id]._pseudo) {
                throw "Node id '" + node.id + "' already exists";
              }

              this.nodeReferences[node.id]._nodeRef = this._getNodeForNodeRef(node);
              this.nodeReferences[node.id]._textNodeRef = node;
              this.nodeReferences[node.id]._pseudo = false;
            } else {
              this.nodeReferences[node.id] = {
                _nodeRef: this._getNodeForNodeRef(node),
                _textNodeRef: node
              };
            }
          }

          if (node.pageReference) {
            if (!this.nodeReferences[node.pageReference]) {
              this.nodeReferences[node.pageReference] = {
                _nodeRef: {},
                _textNodeRef: {},
                _pseudo: true
              };
            }

            node.text = '00000';
            node.linkToDestination = node.pageReference;
            node._pageRef = this.nodeReferences[node.pageReference];
          }

          if (node.textReference) {
            if (!this.nodeReferences[node.textReference]) {
              this.nodeReferences[node.textReference] = {
                _nodeRef: {},
                _pseudo: true
              };
            }

            node.text = '';
            node.linkToDestination = node.textReference;
            node._textRef = this.nodeReferences[node.textReference];
          }

          if (node.text && node.text.text) {
            node.text = [this.preprocessNode(node.text)];
          } else if (isArray(node.text)) {
            var isSetParentNode = false;

            if (this.parentNode === null) {
              this.parentNode = node;
              isSetParentNode = true;
            }

            for (var i = 0, l = node.text.length; i < l; i++) {
              node.text[i] = this.preprocessNode(node.text[i]);
            }

            if (isSetParentNode) {
              this.parentNode = null;
            }
          }

          return node;
        };

        DocPreprocessor.prototype.preprocessToc = function (node) {
          if (!node.toc.id) {
            node.toc.id = '_default_';
          }

          node.toc.title = node.toc.title ? this.preprocessNode(node.toc.title) : null;
          node.toc._items = [];

          if (this.tocs[node.toc.id]) {
            if (!this.tocs[node.toc.id].toc._pseudo) {
              throw "TOC '" + node.toc.id + "' already exists";
            }

            node.toc._items = this.tocs[node.toc.id].toc._items;
          }

          this.tocs[node.toc.id] = node;
          return node;
        };

        DocPreprocessor.prototype.preprocessImage = function (node) {
          if (!isUndefined(node.image.type) && !isUndefined(node.image.data) && node.image.type === 'Buffer' && isArray(node.image.data)) {
            node.image = Buffer.from(node.image.data);
          }

          return node;
        };

        DocPreprocessor.prototype.preprocessSVG = function (node) {
          return node;
        };

        DocPreprocessor.prototype.preprocessCanvas = function (node) {
          return node;
        };

        DocPreprocessor.prototype.preprocessQr = function (node) {
          return node;
        };

        DocPreprocessor.prototype._getNodeForNodeRef = function (node) {
          if (this.parentNode) {
            return this.parentNode;
          }

          return node;
        };

        module.exports = DocPreprocessor;
        /* WEBPACK VAR INJECTION */
      }).call(this, __webpack_require__(10).Buffer);
      /***/
    },
    /* 535 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";
      /*eslint no-unused-vars: ["error", {"args": "none"}]*/

      var TextTools = __webpack_require__(194);

      var StyleContextStack = __webpack_require__(292);

      var ColumnCalculator = __webpack_require__(195);

      var isString = __webpack_require__(0).isString;

      var isNumber = __webpack_require__(0).isNumber;

      var isObject = __webpack_require__(0).isObject;

      var isArray = __webpack_require__(0).isArray;

      var fontStringify = __webpack_require__(0).fontStringify;

      var getNodeId = __webpack_require__(0).getNodeId;

      var pack = __webpack_require__(0).pack;

      var qrEncoder = __webpack_require__(536);
      /**
       * @private
       */


      function DocMeasure(fontProvider, styleDictionary, defaultStyle, imageMeasure, svgMeasure, tableLayouts, images) {
        this.textTools = new TextTools(fontProvider);
        this.styleStack = new StyleContextStack(styleDictionary, defaultStyle);
        this.imageMeasure = imageMeasure;
        this.svgMeasure = svgMeasure;
        this.tableLayouts = tableLayouts;
        this.images = images;
        this.autoImageIndex = 1;
      }
      /**
       * Measures all nodes and sets min/max-width properties required for the second
       * layout-pass.
       * @param  {Object} docStructure document-definition-object
       * @return {Object}              document-measurement-object
       */


      DocMeasure.prototype.measureDocument = function (docStructure) {
        return this.measureNode(docStructure);
      };

      DocMeasure.prototype.measureNode = function (node) {
        var self = this;
        return this.styleStack.auto(node, function () {
          // TODO: refactor + rethink whether this is the proper way to handle margins
          node._margin = getNodeMargin(node);

          if (node.columns) {
            return extendMargins(self.measureColumns(node));
          } else if (node.stack) {
            return extendMargins(self.measureVerticalContainer(node));
          } else if (node.ul) {
            return extendMargins(self.measureUnorderedList(node));
          } else if (node.ol) {
            return extendMargins(self.measureOrderedList(node));
          } else if (node.table) {
            return extendMargins(self.measureTable(node));
          } else if (node.text !== undefined) {
            return extendMargins(self.measureLeaf(node));
          } else if (node.toc) {
            return extendMargins(self.measureToc(node));
          } else if (node.image) {
            return extendMargins(self.measureImage(node));
          } else if (node.svg) {
            return extendMargins(self.measureSVG(node));
          } else if (node.canvas) {
            return extendMargins(self.measureCanvas(node));
          } else if (node.qr) {
            return extendMargins(self.measureQr(node));
          } else {
            throw 'Unrecognized document structure: ' + JSON.stringify(node, fontStringify);
          }
        });

        function extendMargins(node) {
          var margin = node._margin;

          if (margin) {
            node._minWidth += margin[0] + margin[2];
            node._maxWidth += margin[0] + margin[2];
          }

          return node;
        }

        function getNodeMargin() {
          function processSingleMargins(node, currentMargin) {
            if (node.marginLeft || node.marginTop || node.marginRight || node.marginBottom) {
              return [node.marginLeft || currentMargin[0] || 0, node.marginTop || currentMargin[1] || 0, node.marginRight || currentMargin[2] || 0, node.marginBottom || currentMargin[3] || 0];
            }

            return currentMargin;
          }

          function flattenStyleArray(styleArray) {
            var flattenedStyles = {};

            for (var i = styleArray.length - 1; i >= 0; i--) {
              var styleName = styleArray[i];
              var style = self.styleStack.styleDictionary[styleName];

              for (var key in style) {
                if (style.hasOwnProperty(key)) {
                  flattenedStyles[key] = style[key];
                }
              }
            }

            return flattenedStyles;
          }

          function convertMargin(margin) {
            if (isNumber(margin)) {
              margin = [margin, margin, margin, margin];
            } else if (isArray(margin)) {
              if (margin.length === 2) {
                margin = [margin[0], margin[1], margin[0], margin[1]];
              }
            }

            return margin;
          }

          var margin = [undefined, undefined, undefined, undefined];

          if (node.style) {
            var styleArray = isArray(node.style) ? node.style : [node.style];
            var flattenedStyleArray = flattenStyleArray(styleArray);

            if (flattenedStyleArray) {
              margin = processSingleMargins(flattenedStyleArray, margin);
            }

            if (flattenedStyleArray.margin) {
              margin = convertMargin(flattenedStyleArray.margin);
            }
          }

          margin = processSingleMargins(node, margin);

          if (node.margin) {
            margin = convertMargin(node.margin);
          }

          if (margin[0] === undefined && margin[1] === undefined && margin[2] === undefined && margin[3] === undefined) {
            return null;
          } else {
            return margin;
          }
        }
      };

      DocMeasure.prototype.convertIfBase64Image = function (node) {
        if (/^data:image\/(jpeg|jpg|png);base64,/.test(node.image)) {
          var label = '$$pdfmake$$' + this.autoImageIndex++;
          this.images[label] = node.image;
          node.image = label;
        }
      };

      DocMeasure.prototype.measureImageWithDimensions = function (node, dimensions) {
        if (node.fit) {
          var factor = dimensions.width / dimensions.height > node.fit[0] / node.fit[1] ? node.fit[0] / dimensions.width : node.fit[1] / dimensions.height;
          node._width = node._minWidth = node._maxWidth = dimensions.width * factor;
          node._height = dimensions.height * factor;
        } else {
          node._width = node._minWidth = node._maxWidth = node.width || dimensions.width;
          node._height = node.height || dimensions.height * node._width / dimensions.width;

          if (isNumber(node.maxWidth) && node.maxWidth < node._width) {
            node._width = node._minWidth = node._maxWidth = node.maxWidth;
            node._height = node._width * dimensions.height / dimensions.width;
          }

          if (isNumber(node.maxHeight) && node.maxHeight < node._height) {
            node._height = node.maxHeight;
            node._width = node._minWidth = node._maxWidth = node._height * dimensions.width / dimensions.height;
          }

          if (isNumber(node.minWidth) && node.minWidth > node._width) {
            node._width = node._minWidth = node._maxWidth = node.minWidth;
            node._height = node._width * dimensions.height / dimensions.width;
          }

          if (isNumber(node.minHeight) && node.minHeight > node._height) {
            node._height = node.minHeight;
            node._width = node._minWidth = node._maxWidth = node._height * dimensions.width / dimensions.height;
          }
        }

        node._alignment = this.styleStack.getProperty('alignment');
      };

      DocMeasure.prototype.measureImage = function (node) {
        if (this.images) {
          this.convertIfBase64Image(node);
        }

        var dimensions = this.imageMeasure.measureImage(node.image);
        this.measureImageWithDimensions(node, dimensions);
        return node;
      };

      DocMeasure.prototype.measureSVG = function (node) {
        var dimensions = this.svgMeasure.measureSVG(node.svg);
        this.measureImageWithDimensions(node, dimensions);
        node.font = this.styleStack.getProperty('font'); // scale SVG based on final dimension

        node.svg = this.svgMeasure.writeDimensions(node.svg, {
          width: node._width,
          height: node._height
        });
        return node;
      };

      DocMeasure.prototype.measureLeaf = function (node) {
        if (node._textRef && node._textRef._textNodeRef.text) {
          node.text = node._textRef._textNodeRef.text;
        } // Make sure style properties of the node itself are considered when building inlines.
        // We could also just pass [node] to buildInlines, but that fails for bullet points.


        var styleStack = this.styleStack.clone();
        styleStack.push(node);
        var data = this.textTools.buildInlines(node.text, styleStack);
        node._inlines = data.items;
        node._minWidth = data.minWidth;
        node._maxWidth = data.maxWidth;
        return node;
      };

      DocMeasure.prototype.measureToc = function (node) {
        if (node.toc.title) {
          node.toc.title = this.measureNode(node.toc.title);
        }

        if (node.toc._items.length > 0) {
          var body = [];
          var textStyle = node.toc.textStyle || {};
          var numberStyle = node.toc.numberStyle || textStyle;
          var textMargin = node.toc.textMargin || [0, 0, 0, 0];

          for (var i = 0, l = node.toc._items.length; i < l; i++) {
            var item = node.toc._items[i];
            var lineStyle = item._textNodeRef.tocStyle || textStyle;
            var lineMargin = item._textNodeRef.tocMargin || textMargin;
            var lineNumberStyle = item._textNodeRef.tocNumberStyle || numberStyle;
            var destination = getNodeId(item._nodeRef);
            body.push([{
              text: item._textNodeRef.text,
              linkToDestination: destination,
              alignment: 'left',
              style: lineStyle,
              margin: lineMargin
            }, {
              text: '00000',
              linkToDestination: destination,
              alignment: 'right',
              _tocItemRef: item._nodeRef,
              style: lineNumberStyle,
              margin: [0, lineMargin[1], 0, lineMargin[3]]
            }]);
          }

          node.toc._table = {
            table: {
              dontBreakRows: true,
              widths: ['*', 'auto'],
              body: body
            },
            layout: 'noBorders'
          };
          node.toc._table = this.measureNode(node.toc._table);
        }

        return node;
      };

      DocMeasure.prototype.measureVerticalContainer = function (node) {
        var items = node.stack;
        node._minWidth = 0;
        node._maxWidth = 0;

        for (var i = 0, l = items.length; i < l; i++) {
          items[i] = this.measureNode(items[i]);
          node._minWidth = Math.max(node._minWidth, items[i]._minWidth);
          node._maxWidth = Math.max(node._maxWidth, items[i]._maxWidth);
        }

        return node;
      };

      DocMeasure.prototype.gapSizeForList = function () {
        return this.textTools.sizeOfString('9. ', this.styleStack);
      };

      DocMeasure.prototype.buildUnorderedMarker = function (styleStack, gapSize, type) {
        function buildDisc(gapSize, color) {
          // TODO: ascender-based calculations
          var radius = gapSize.fontSize / 6;
          return {
            canvas: [{
              x: radius,
              y: gapSize.height / gapSize.lineHeight + gapSize.descender - gapSize.fontSize / 3,
              r1: radius,
              r2: radius,
              type: 'ellipse',
              color: color
            }]
          };
        }

        function buildSquare(gapSize, color) {
          // TODO: ascender-based calculations
          var size = gapSize.fontSize / 3;
          return {
            canvas: [{
              x: 0,
              y: gapSize.height / gapSize.lineHeight + gapSize.descender - gapSize.fontSize / 3 - size / 2,
              h: size,
              w: size,
              type: 'rect',
              color: color
            }]
          };
        }

        function buildCircle(gapSize, color) {
          // TODO: ascender-based calculations
          var radius = gapSize.fontSize / 6;
          return {
            canvas: [{
              x: radius,
              y: gapSize.height / gapSize.lineHeight + gapSize.descender - gapSize.fontSize / 3,
              r1: radius,
              r2: radius,
              type: 'ellipse',
              lineColor: color
            }]
          };
        }

        var marker;
        var color = styleStack.getProperty('markerColor') || styleStack.getProperty('color') || 'black';

        switch (type) {
          case 'circle':
            marker = buildCircle(gapSize, color);
            break;

          case 'square':
            marker = buildSquare(gapSize, color);
            break;

          case 'none':
            marker = {};
            break;

          case 'disc':
          default:
            marker = buildDisc(gapSize, color);
            break;
        }

        marker._minWidth = marker._maxWidth = gapSize.width;
        marker._minHeight = marker._maxHeight = gapSize.height;
        return marker;
      };

      DocMeasure.prototype.buildOrderedMarker = function (counter, styleStack, type, separator) {
        function prepareAlpha(counter) {
          function toAlpha(num) {
            return (num >= 26 ? toAlpha((num / 26 >> 0) - 1) : '') + 'abcdefghijklmnopqrstuvwxyz'[num % 26 >> 0];
          }

          if (counter < 1) {
            return counter.toString();
          }

          return toAlpha(counter - 1);
        }

        function prepareRoman(counter) {
          if (counter < 1 || counter > 4999) {
            return counter.toString();
          }

          var num = counter;
          var lookup = {
            M: 1000,
            CM: 900,
            D: 500,
            CD: 400,
            C: 100,
            XC: 90,
            L: 50,
            XL: 40,
            X: 10,
            IX: 9,
            V: 5,
            IV: 4,
            I: 1
          },
              roman = '',
              i;

          for (i in lookup) {
            while (num >= lookup[i]) {
              roman += i;
              num -= lookup[i];
            }
          }

          return roman;
        }

        function prepareDecimal(counter) {
          return counter.toString();
        }

        var counterText;

        switch (type) {
          case 'none':
            counterText = null;
            break;

          case 'upper-alpha':
            counterText = prepareAlpha(counter).toUpperCase();
            break;

          case 'lower-alpha':
            counterText = prepareAlpha(counter);
            break;

          case 'upper-roman':
            counterText = prepareRoman(counter);
            break;

          case 'lower-roman':
            counterText = prepareRoman(counter).toLowerCase();
            break;

          case 'decimal':
          default:
            counterText = prepareDecimal(counter);
            break;
        }

        if (counterText === null) {
          return {};
        }

        if (separator) {
          if (isArray(separator)) {
            if (separator[0]) {
              counterText = separator[0] + counterText;
            }

            if (separator[1]) {
              counterText += separator[1];
            }

            counterText += ' ';
          } else {
            counterText += separator + ' ';
          }
        }

        var textArray = {
          text: counterText
        };
        var markerColor = styleStack.getProperty('markerColor');

        if (markerColor) {
          textArray.color = markerColor;
        }

        return {
          _inlines: this.textTools.buildInlines(textArray, styleStack).items
        };
      };

      DocMeasure.prototype.measureUnorderedList = function (node) {
        var style = this.styleStack.clone();
        var items = node.ul;
        node.type = node.type || 'disc';
        node._gapSize = this.gapSizeForList();
        node._minWidth = 0;
        node._maxWidth = 0;

        for (var i = 0, l = items.length; i < l; i++) {
          var item = items[i] = this.measureNode(items[i]);

          if (!item.ol && !item.ul) {
            item.listMarker = this.buildUnorderedMarker(style, node._gapSize, item.listType || node.type);
          }

          node._minWidth = Math.max(node._minWidth, items[i]._minWidth + node._gapSize.width);
          node._maxWidth = Math.max(node._maxWidth, items[i]._maxWidth + node._gapSize.width);
        }

        return node;
      };

      DocMeasure.prototype.measureOrderedList = function (node) {
        var style = this.styleStack.clone();
        var items = node.ol;
        node.type = node.type || 'decimal';
        node.separator = node.separator || '.';
        node.reversed = node.reversed || false;

        if (!isNumber(node.start)) {
          node.start = node.reversed ? items.length : 1;
        }

        node._gapSize = this.gapSizeForList();
        node._minWidth = 0;
        node._maxWidth = 0;
        var counter = node.start;

        for (var i = 0, l = items.length; i < l; i++) {
          var item = items[i] = this.measureNode(items[i]);

          if (!item.ol && !item.ul) {
            var counterValue = isNumber(item.counter) ? item.counter : counter;
            item.listMarker = this.buildOrderedMarker(counterValue, style, item.listType || node.type, node.separator);

            if (item.listMarker._inlines) {
              node._gapSize.width = Math.max(node._gapSize.width, item.listMarker._inlines[0].width);
            }
          } // TODO: else - nested lists numbering


          node._minWidth = Math.max(node._minWidth, items[i]._minWidth);
          node._maxWidth = Math.max(node._maxWidth, items[i]._maxWidth);

          if (node.reversed) {
            counter--;
          } else {
            counter++;
          }
        }

        node._minWidth += node._gapSize.width;
        node._maxWidth += node._gapSize.width;

        for (var i = 0, l = items.length; i < l; i++) {
          var item = items[i];

          if (!item.ol && !item.ul) {
            item.listMarker._minWidth = item.listMarker._maxWidth = node._gapSize.width;
          }
        }

        return node;
      };

      DocMeasure.prototype.measureColumns = function (node) {
        var columns = node.columns;
        node._gap = this.styleStack.getProperty('columnGap') || 0;

        for (var i = 0, l = columns.length; i < l; i++) {
          columns[i] = this.measureNode(columns[i]);
        }

        var measures = ColumnCalculator.measureMinMax(columns);
        var numGaps = columns.length > 0 ? columns.length - 1 : 0;
        node._minWidth = measures.min + node._gap * numGaps;
        node._maxWidth = measures.max + node._gap * numGaps;
        return node;
      };

      DocMeasure.prototype.measureTable = function (node) {
        extendTableWidths(node);
        node._layout = getLayout(this.tableLayouts);
        node._offsets = getOffsets(node._layout);
        var colSpans = [];
        var col, row, cols, rows;

        for (col = 0, cols = node.table.body[0].length; col < cols; col++) {
          var c = node.table.widths[col];
          c._minWidth = 0;
          c._maxWidth = 0;

          for (row = 0, rows = node.table.body.length; row < rows; row++) {
            var rowData = node.table.body[row];
            var data = rowData[col];

            if (data === undefined) {
              console.error('Malformed table row ', rowData, 'in node ', node);
              throw 'Malformed table row, a cell is undefined.';
            }

            if (data === null) {
              // transform to object
              data = '';
            }

            if (!data._span) {
              data = rowData[col] = this.styleStack.auto(data, measureCb(this, data));

              if (data.colSpan && data.colSpan > 1) {
                markSpans(rowData, col, data.colSpan);
                colSpans.push({
                  col: col,
                  span: data.colSpan,
                  minWidth: data._minWidth,
                  maxWidth: data._maxWidth
                });
              } else {
                c._minWidth = Math.max(c._minWidth, data._minWidth);
                c._maxWidth = Math.max(c._maxWidth, data._maxWidth);
              }
            }

            if (data.rowSpan && data.rowSpan > 1) {
              markVSpans(node.table, row, col, data.rowSpan);
            }
          }
        }

        extendWidthsForColSpans();
        var measures = ColumnCalculator.measureMinMax(node.table.widths);
        node._minWidth = measures.min + node._offsets.total;
        node._maxWidth = measures.max + node._offsets.total;
        return node;

        function measureCb(_this, data) {
          return function () {
            if (isObject(data)) {
              data.fillColor = _this.styleStack.getProperty('fillColor');
              data.fillOpacity = _this.styleStack.getProperty('fillOpacity');
            }

            return _this.measureNode(data);
          };
        }

        function getLayout(tableLayouts) {
          var layout = node.layout;

          if (isString(layout)) {
            layout = tableLayouts[layout];
          }

          var defaultLayout = {
            hLineWidth: function hLineWidth(i, node) {
              return 1;
            },
            vLineWidth: function vLineWidth(i, node) {
              return 1;
            },
            hLineColor: function hLineColor(i, node) {
              return 'black';
            },
            vLineColor: function vLineColor(i, node) {
              return 'black';
            },
            hLineStyle: function hLineStyle(i, node) {
              return null;
            },
            vLineStyle: function vLineStyle(i, node) {
              return null;
            },
            paddingLeft: function paddingLeft(i, node) {
              return 4;
            },
            paddingRight: function paddingRight(i, node) {
              return 4;
            },
            paddingTop: function paddingTop(i, node) {
              return 2;
            },
            paddingBottom: function paddingBottom(i, node) {
              return 2;
            },
            fillColor: function fillColor(i, node) {
              return null;
            },
            fillOpacity: function fillOpacity(i, node) {
              return 1;
            },
            defaultBorder: true
          };
          return pack(defaultLayout, layout);
        }

        function getOffsets(layout) {
          var offsets = [];
          var totalOffset = 0;
          var prevRightPadding = 0;

          for (var i = 0, l = node.table.widths.length; i < l; i++) {
            var lOffset = prevRightPadding + layout.vLineWidth(i, node) + layout.paddingLeft(i, node);
            offsets.push(lOffset);
            totalOffset += lOffset;
            prevRightPadding = layout.paddingRight(i, node);
          }

          totalOffset += prevRightPadding + layout.vLineWidth(node.table.widths.length, node);
          return {
            total: totalOffset,
            offsets: offsets
          };
        }

        function extendWidthsForColSpans() {
          var q, j;

          for (var i = 0, l = colSpans.length; i < l; i++) {
            var span = colSpans[i];
            var currentMinMax = getMinMax(span.col, span.span, node._offsets);
            var minDifference = span.minWidth - currentMinMax.minWidth;
            var maxDifference = span.maxWidth - currentMinMax.maxWidth;

            if (minDifference > 0) {
              q = minDifference / span.span;

              for (j = 0; j < span.span; j++) {
                node.table.widths[span.col + j]._minWidth += q;
              }
            }

            if (maxDifference > 0) {
              q = maxDifference / span.span;

              for (j = 0; j < span.span; j++) {
                node.table.widths[span.col + j]._maxWidth += q;
              }
            }
          }
        }

        function getMinMax(col, span, offsets) {
          var result = {
            minWidth: 0,
            maxWidth: 0
          };

          for (var i = 0; i < span; i++) {
            result.minWidth += node.table.widths[col + i]._minWidth + (i ? offsets.offsets[col + i] : 0);
            result.maxWidth += node.table.widths[col + i]._maxWidth + (i ? offsets.offsets[col + i] : 0);
          }

          return result;
        }

        function markSpans(rowData, col, span) {
          for (var i = 1; i < span; i++) {
            rowData[col + i] = {
              _span: true,
              _minWidth: 0,
              _maxWidth: 0,
              rowSpan: rowData[col].rowSpan
            };
          }
        }

        function markVSpans(table, row, col, span) {
          for (var i = 1; i < span; i++) {
            table.body[row + i][col] = {
              _span: true,
              _minWidth: 0,
              _maxWidth: 0,
              fillColor: table.body[row][col].fillColor,
              fillOpacity: table.body[row][col].fillOpacity
            };
          }
        }

        function extendTableWidths(node) {
          if (!node.table.widths) {
            node.table.widths = 'auto';
          }

          if (isString(node.table.widths)) {
            node.table.widths = [node.table.widths];

            while (node.table.widths.length < node.table.body[0].length) {
              node.table.widths.push(node.table.widths[node.table.widths.length - 1]);
            }
          }

          for (var i = 0, l = node.table.widths.length; i < l; i++) {
            var w = node.table.widths[i];

            if (isNumber(w) || isString(w)) {
              node.table.widths[i] = {
                width: w
              };
            }
          }
        }
      };

      DocMeasure.prototype.measureCanvas = function (node) {
        var w = 0,
            h = 0;

        for (var i = 0, l = node.canvas.length; i < l; i++) {
          var vector = node.canvas[i];

          switch (vector.type) {
            case 'ellipse':
              w = Math.max(w, vector.x + vector.r1);
              h = Math.max(h, vector.y + vector.r2);
              break;

            case 'rect':
              w = Math.max(w, vector.x + vector.w);
              h = Math.max(h, vector.y + vector.h);
              break;

            case 'line':
              w = Math.max(w, vector.x1, vector.x2);
              h = Math.max(h, vector.y1, vector.y2);
              break;

            case 'polyline':
              for (var i2 = 0, l2 = vector.points.length; i2 < l2; i2++) {
                w = Math.max(w, vector.points[i2].x);
                h = Math.max(h, vector.points[i2].y);
              }

              break;
          }
        }

        node._minWidth = node._maxWidth = w;
        node._minHeight = node._maxHeight = h;
        node._alignment = this.styleStack.getProperty('alignment');
        return node;
      };

      DocMeasure.prototype.measureQr = function (node) {
        node = qrEncoder.measure(node);
        node._alignment = this.styleStack.getProperty('alignment');
        return node;
      };

      module.exports = DocMeasure;
      /***/
    },
    /* 536 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";
      /*eslint no-unused-vars: ["error", {"args": "none"}]*/

      /*eslint no-redeclare: "off"*/

      /* qr.js -- QR code generator in Javascript (revision 2011-01-19)
       * Written by Kang Seonghoon <public+qrjs@mearie.org>.
       *
       * This source code is in the public domain; if your jurisdiction does not
       * recognize the public domain the terms of Creative Commons CC0 license
       * apply. In the other words, you can always do what you want.
       */
      // per-version information (cf. JIS X 0510:2004 pp. 30--36, 71)
      //
      // [0]: the degree of generator polynomial by ECC levels
      // [1]: # of code blocks by ECC levels
      // [2]: left-top positions of alignment patterns
      //
      // the number in this table (in particular, [0]) does not exactly match with
      // the numbers in the specficiation. see augumenteccs below for the reason.

      var VERSIONS = [null, [[10, 7, 17, 13], [1, 1, 1, 1], []], [[16, 10, 28, 22], [1, 1, 1, 1], [4, 16]], [[26, 15, 22, 18], [1, 1, 2, 2], [4, 20]], [[18, 20, 16, 26], [2, 1, 4, 2], [4, 24]], [[24, 26, 22, 18], [2, 1, 4, 4], [4, 28]], [[16, 18, 28, 24], [4, 2, 4, 4], [4, 32]], [[18, 20, 26, 18], [4, 2, 5, 6], [4, 20, 36]], [[22, 24, 26, 22], [4, 2, 6, 6], [4, 22, 40]], [[22, 30, 24, 20], [5, 2, 8, 8], [4, 24, 44]], [[26, 18, 28, 24], [5, 4, 8, 8], [4, 26, 48]], [[30, 20, 24, 28], [5, 4, 11, 8], [4, 28, 52]], [[22, 24, 28, 26], [8, 4, 11, 10], [4, 30, 56]], [[22, 26, 22, 24], [9, 4, 16, 12], [4, 32, 60]], [[24, 30, 24, 20], [9, 4, 16, 16], [4, 24, 44, 64]], [[24, 22, 24, 30], [10, 6, 18, 12], [4, 24, 46, 68]], [[28, 24, 30, 24], [10, 6, 16, 17], [4, 24, 48, 72]], [[28, 28, 28, 28], [11, 6, 19, 16], [4, 28, 52, 76]], [[26, 30, 28, 28], [13, 6, 21, 18], [4, 28, 54, 80]], [[26, 28, 26, 26], [14, 7, 25, 21], [4, 28, 56, 84]], [[26, 28, 28, 30], [16, 8, 25, 20], [4, 32, 60, 88]], [[26, 28, 30, 28], [17, 8, 25, 23], [4, 26, 48, 70, 92]], [[28, 28, 24, 30], [17, 9, 34, 23], [4, 24, 48, 72, 96]], [[28, 30, 30, 30], [18, 9, 30, 25], [4, 28, 52, 76, 100]], [[28, 30, 30, 30], [20, 10, 32, 27], [4, 26, 52, 78, 104]], [[28, 26, 30, 30], [21, 12, 35, 29], [4, 30, 56, 82, 108]], [[28, 28, 30, 28], [23, 12, 37, 34], [4, 28, 56, 84, 112]], [[28, 30, 30, 30], [25, 12, 40, 34], [4, 32, 60, 88, 116]], [[28, 30, 30, 30], [26, 13, 42, 35], [4, 24, 48, 72, 96, 120]], [[28, 30, 30, 30], [28, 14, 45, 38], [4, 28, 52, 76, 100, 124]], [[28, 30, 30, 30], [29, 15, 48, 40], [4, 24, 50, 76, 102, 128]], [[28, 30, 30, 30], [31, 16, 51, 43], [4, 28, 54, 80, 106, 132]], [[28, 30, 30, 30], [33, 17, 54, 45], [4, 32, 58, 84, 110, 136]], [[28, 30, 30, 30], [35, 18, 57, 48], [4, 28, 56, 84, 112, 140]], [[28, 30, 30, 30], [37, 19, 60, 51], [4, 32, 60, 88, 116, 144]], [[28, 30, 30, 30], [38, 19, 63, 53], [4, 28, 52, 76, 100, 124, 148]], [[28, 30, 30, 30], [40, 20, 66, 56], [4, 22, 48, 74, 100, 126, 152]], [[28, 30, 30, 30], [43, 21, 70, 59], [4, 26, 52, 78, 104, 130, 156]], [[28, 30, 30, 30], [45, 22, 74, 62], [4, 30, 56, 82, 108, 134, 160]], [[28, 30, 30, 30], [47, 24, 77, 65], [4, 24, 52, 80, 108, 136, 164]], [[28, 30, 30, 30], [49, 25, 81, 68], [4, 28, 56, 84, 112, 140, 168]]]; // mode constants (cf. Table 2 in JIS X 0510:2004 p. 16)

      var MODE_TERMINATOR = 0;
      var MODE_NUMERIC = 1,
          MODE_ALPHANUMERIC = 2,
          MODE_OCTET = 4,
          MODE_KANJI = 8; // validation regexps

      var NUMERIC_REGEXP = /^\d*$/;
      var ALPHANUMERIC_REGEXP = /^[A-Za-z0-9 $%*+\-./:]*$/;
      var ALPHANUMERIC_OUT_REGEXP = /^[A-Z0-9 $%*+\-./:]*$/; // ECC levels (cf. Table 22 in JIS X 0510:2004 p. 45)

      var ECCLEVEL_L = 1,
          ECCLEVEL_M = 0,
          ECCLEVEL_Q = 3,
          ECCLEVEL_H = 2; // GF(2^8)-to-integer mapping with a reducing polynomial x^8+x^4+x^3+x^2+1
      // invariant: GF256_MAP[GF256_INVMAP[i]] == i for all i in [1,256)

      var GF256_MAP = [],
          GF256_INVMAP = [-1];

      for (var i = 0, v = 1; i < 255; ++i) {
        GF256_MAP.push(v);
        GF256_INVMAP[v] = i;
        v = v * 2 ^ (v >= 128 ? 0x11d : 0);
      } // generator polynomials up to degree 30
      // (should match with polynomials in JIS X 0510:2004 Appendix A)
      //
      // generator polynomial of degree K is product of (x-\alpha^0), (x-\alpha^1),
      // ..., (x-\alpha^(K-1)). by convention, we omit the K-th coefficient (always 1)
      // from the result; also other coefficients are written in terms of the exponent
      // to \alpha to avoid the redundant calculation. (see also calculateecc below.)


      var GF256_GENPOLY = [[]];

      for (var i = 0; i < 30; ++i) {
        var prevpoly = GF256_GENPOLY[i],
            poly = [];

        for (var j = 0; j <= i; ++j) {
          var a = j < i ? GF256_MAP[prevpoly[j]] : 0;
          var b = GF256_MAP[(i + (prevpoly[j - 1] || 0)) % 255];
          poly.push(GF256_INVMAP[a ^ b]);
        }

        GF256_GENPOLY.push(poly);
      } // alphanumeric character mapping (cf. Table 5 in JIS X 0510:2004 p. 19)


      var ALPHANUMERIC_MAP = {};

      for (var i = 0; i < 45; ++i) {
        ALPHANUMERIC_MAP['0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:'.charAt(i)] = i;
      } // mask functions in terms of row # and column #
      // (cf. Table 20 in JIS X 0510:2004 p. 42)

      /*jshint unused: false */


      var MASKFUNCS = [function (i, j) {
        return (i + j) % 2 === 0;
      }, function (i, j) {
        return i % 2 === 0;
      }, function (i, j) {
        return j % 3 === 0;
      }, function (i, j) {
        return (i + j) % 3 === 0;
      }, function (i, j) {
        return ((i / 2 | 0) + (j / 3 | 0)) % 2 === 0;
      }, function (i, j) {
        return i * j % 2 + i * j % 3 === 0;
      }, function (i, j) {
        return (i * j % 2 + i * j % 3) % 2 === 0;
      }, function (i, j) {
        return ((i + j) % 2 + i * j % 3) % 2 === 0;
      }]; // returns true when the version information has to be embeded.

      var needsverinfo = function needsverinfo(ver) {
        return ver > 6;
      }; // returns the size of entire QR code for given version.


      var getsizebyver = function getsizebyver(ver) {
        return 4 * ver + 17;
      }; // returns the number of bits available for code words in this version.


      var nfullbits = function nfullbits(ver) {
        /*
         * |<--------------- n --------------->|
         * |        |<----- n-17 ---->|        |
         * +-------+                ///+-------+ ----
         * |       |                ///|       |    ^
         * |  9x9  |       @@@@@    ///|  9x8  |    |
         * |       | # # # @5x5@ # # # |       |    |
         * +-------+       @@@@@       +-------+    |
         *       #                               ---|
         *                                        ^ |
         *       #                                |
         *     @@@@@       @@@@@       @@@@@      | n
         *     @5x5@       @5x5@       @5x5@   n-17
         *     @@@@@       @@@@@       @@@@@      | |
         *       #                                | |
         * //////                                 v |
         * //////#                               ---|
         * +-------+       @@@@@       @@@@@        |
         * |       |       @5x5@       @5x5@        |
         * |  8x9  |       @@@@@       @@@@@        |
         * |       |                                v
         * +-------+                             ----
         *
         * when the entire code has n^2 modules and there are m^2-3 alignment
         * patterns, we have:
         * - 225 (= 9x9 + 9x8 + 8x9) modules for finder patterns and
         *   format information;
         * - 2n-34 (= 2(n-17)) modules for timing patterns;
         * - 36 (= 3x6 + 6x3) modules for version information, if any;
         * - 25m^2-75 (= (m^2-3)(5x5)) modules for alignment patterns
         *   if any, but 10m-20 (= 2(m-2)x5) of them overlaps with
         *   timing patterns.
         */
        var v = VERSIONS[ver];
        var nbits = 16 * ver * ver + 128 * ver + 64; // finder, timing and format info.

        if (needsverinfo(ver)) nbits -= 36; // version information

        if (v[2].length) {
          // alignment patterns
          nbits -= 25 * v[2].length * v[2].length - 10 * v[2].length - 55;
        }

        return nbits;
      }; // returns the number of bits available for data portions (i.e. excludes ECC
      // bits but includes mode and length bits) in this version and ECC level.


      var ndatabits = function ndatabits(ver, ecclevel) {
        var nbits = nfullbits(ver) & ~7; // no sub-octet code words

        var v = VERSIONS[ver];
        nbits -= 8 * v[0][ecclevel] * v[1][ecclevel]; // ecc bits

        return nbits;
      }; // returns the number of bits required for the length of data.
      // (cf. Table 3 in JIS X 0510:2004 p. 16)


      var ndatalenbits = function ndatalenbits(ver, mode) {
        switch (mode) {
          case MODE_NUMERIC:
            return ver < 10 ? 10 : ver < 27 ? 12 : 14;

          case MODE_ALPHANUMERIC:
            return ver < 10 ? 9 : ver < 27 ? 11 : 13;

          case MODE_OCTET:
            return ver < 10 ? 8 : 16;

          case MODE_KANJI:
            return ver < 10 ? 8 : ver < 27 ? 10 : 12;
        }
      }; // returns the maximum length of data possible in given configuration.


      var getmaxdatalen = function getmaxdatalen(ver, mode, ecclevel) {
        var nbits = ndatabits(ver, ecclevel) - 4 - ndatalenbits(ver, mode); // 4 for mode bits

        switch (mode) {
          case MODE_NUMERIC:
            return (nbits / 10 | 0) * 3 + (nbits % 10 < 4 ? 0 : nbits % 10 < 7 ? 1 : 2);

          case MODE_ALPHANUMERIC:
            return (nbits / 11 | 0) * 2 + (nbits % 11 < 6 ? 0 : 1);

          case MODE_OCTET:
            return nbits / 8 | 0;

          case MODE_KANJI:
            return nbits / 13 | 0;
        }
      }; // checks if the given data can be encoded in given mode, and returns
      // the converted data for the further processing if possible. otherwise
      // returns null.
      //
      // this function does not check the length of data; it is a duty of
      // encode function below (as it depends on the version and ECC level too).


      var validatedata = function validatedata(mode, data) {
        switch (mode) {
          case MODE_NUMERIC:
            if (!data.match(NUMERIC_REGEXP)) return null;
            return data;

          case MODE_ALPHANUMERIC:
            if (!data.match(ALPHANUMERIC_REGEXP)) return null;
            return data.toUpperCase();

          case MODE_OCTET:
            if (typeof data === 'string') {
              // encode as utf-8 string
              var newdata = [];

              for (var i = 0; i < data.length; ++i) {
                var ch = data.charCodeAt(i);

                if (ch < 0x80) {
                  newdata.push(ch);
                } else if (ch < 0x800) {
                  newdata.push(0xc0 | ch >> 6, 0x80 | ch & 0x3f);
                } else if (ch < 0x10000) {
                  newdata.push(0xe0 | ch >> 12, 0x80 | ch >> 6 & 0x3f, 0x80 | ch & 0x3f);
                } else {
                  newdata.push(0xf0 | ch >> 18, 0x80 | ch >> 12 & 0x3f, 0x80 | ch >> 6 & 0x3f, 0x80 | ch & 0x3f);
                }
              }

              return newdata;
            } else {
              return data;
            }

        }
      }; // returns the code words (sans ECC bits) for given data and configurations.
      // requires data to be preprocessed by validatedata. no length check is
      // performed, and everything has to be checked before calling this function.


      var encode = function encode(ver, mode, data, maxbuflen) {
        var buf = [];
        var bits = 0,
            remaining = 8;
        var datalen = data.length; // this function is intentionally no-op when n=0.

        var pack = function pack(x, n) {
          if (n >= remaining) {
            buf.push(bits | x >> (n -= remaining));

            while (n >= 8) {
              buf.push(x >> (n -= 8) & 255);
            }

            bits = 0;
            remaining = 8;
          }

          if (n > 0) bits |= (x & (1 << n) - 1) << (remaining -= n);
        };

        var nlenbits = ndatalenbits(ver, mode);
        pack(mode, 4);
        pack(datalen, nlenbits);

        switch (mode) {
          case MODE_NUMERIC:
            for (var i = 2; i < datalen; i += 3) {
              pack(parseInt(data.substring(i - 2, i + 1), 10), 10);
            }

            pack(parseInt(data.substring(i - 2), 10), [0, 4, 7][datalen % 3]);
            break;

          case MODE_ALPHANUMERIC:
            for (var i = 1; i < datalen; i += 2) {
              pack(ALPHANUMERIC_MAP[data.charAt(i - 1)] * 45 + ALPHANUMERIC_MAP[data.charAt(i)], 11);
            }

            if (datalen % 2 == 1) {
              pack(ALPHANUMERIC_MAP[data.charAt(i - 1)], 6);
            }

            break;

          case MODE_OCTET:
            for (var i = 0; i < datalen; ++i) {
              pack(data[i], 8);
            }

            break;
        } // final bits. it is possible that adding terminator causes the buffer
        // to overflow, but then the buffer truncated to the maximum size will
        // be valid as the truncated terminator mode bits and padding is
        // identical in appearance (cf. JIS X 0510:2004 sec 8.4.8).


        pack(MODE_TERMINATOR, 4);
        if (remaining < 8) buf.push(bits); // the padding to fill up the remaining space. we should not add any
        // words when the overflow already occurred.

        while (buf.length + 1 < maxbuflen) {
          buf.push(0xec, 0x11);
        }

        if (buf.length < maxbuflen) buf.push(0xec);
        return buf;
      }; // calculates ECC code words for given code words and generator polynomial.
      //
      // this is quite similar to CRC calculation as both Reed-Solomon and CRC use
      // the certain kind of cyclic codes, which is effectively the division of
      // zero-augumented polynomial by the generator polynomial. the only difference
      // is that Reed-Solomon uses GF(2^8), instead of CRC's GF(2), and Reed-Solomon
      // uses the different generator polynomial than CRC's.


      var calculateecc = function calculateecc(poly, genpoly) {
        var modulus = poly.slice(0);
        var polylen = poly.length,
            genpolylen = genpoly.length;

        for (var i = 0; i < genpolylen; ++i) {
          modulus.push(0);
        }

        for (var i = 0; i < polylen;) {
          var quotient = GF256_INVMAP[modulus[i++]];

          if (quotient >= 0) {
            for (var j = 0; j < genpolylen; ++j) {
              modulus[i + j] ^= GF256_MAP[(quotient + genpoly[j]) % 255];
            }
          }
        }

        return modulus.slice(polylen);
      }; // auguments ECC code words to given code words. the resulting words are
      // ready to be encoded in the matrix.
      //
      // the much of actual augumenting procedure follows JIS X 0510:2004 sec 8.7.
      // the code is simplified using the fact that the size of each code & ECC
      // blocks is almost same; for example, when we have 4 blocks and 46 data words
      // the number of code words in those blocks are 11, 11, 12, 12 respectively.


      var augumenteccs = function augumenteccs(poly, nblocks, genpoly) {
        var subsizes = [];
        var subsize = poly.length / nblocks | 0,
            subsize0 = 0;
        var pivot = nblocks - poly.length % nblocks;

        for (var i = 0; i < pivot; ++i) {
          subsizes.push(subsize0);
          subsize0 += subsize;
        }

        for (var i = pivot; i < nblocks; ++i) {
          subsizes.push(subsize0);
          subsize0 += subsize + 1;
        }

        subsizes.push(subsize0);
        var eccs = [];

        for (var i = 0; i < nblocks; ++i) {
          eccs.push(calculateecc(poly.slice(subsizes[i], subsizes[i + 1]), genpoly));
        }

        var result = [];
        var nitemsperblock = poly.length / nblocks | 0;

        for (var i = 0; i < nitemsperblock; ++i) {
          for (var j = 0; j < nblocks; ++j) {
            result.push(poly[subsizes[j] + i]);
          }
        }

        for (var j = pivot; j < nblocks; ++j) {
          result.push(poly[subsizes[j + 1] - 1]);
        }

        for (var i = 0; i < genpoly.length; ++i) {
          for (var j = 0; j < nblocks; ++j) {
            result.push(eccs[j][i]);
          }
        }

        return result;
      }; // auguments BCH(p+q,q) code to the polynomial over GF(2), given the proper
      // genpoly. the both input and output are in binary numbers, and unlike
      // calculateecc genpoly should include the 1 bit for the highest degree.
      //
      // actual polynomials used for this procedure are as follows:
      // - p=10, q=5, genpoly=x^10+x^8+x^5+x^4+x^2+x+1 (JIS X 0510:2004 Appendix C)
      // - p=18, q=6, genpoly=x^12+x^11+x^10+x^9+x^8+x^5+x^2+1 (ibid. Appendix D)


      var augumentbch = function augumentbch(poly, p, genpoly, q) {
        var modulus = poly << q;

        for (var i = p - 1; i >= 0; --i) {
          if (modulus >> q + i & 1) modulus ^= genpoly << i;
        }

        return poly << q | modulus;
      }; // creates the base matrix for given version. it returns two matrices, one of
      // them is the actual one and the another represents the "reserved" portion
      // (e.g. finder and timing patterns) of the matrix.
      //
      // some entries in the matrix may be undefined, rather than 0 or 1. this is
      // intentional (no initialization needed!), and putdata below will fill
      // the remaining ones.


      var makebasematrix = function makebasematrix(ver) {
        var v = VERSIONS[ver],
            n = getsizebyver(ver);
        var matrix = [],
            reserved = [];

        for (var i = 0; i < n; ++i) {
          matrix.push([]);
          reserved.push([]);
        }

        var blit = function blit(y, x, h, w, bits) {
          for (var i = 0; i < h; ++i) {
            for (var j = 0; j < w; ++j) {
              matrix[y + i][x + j] = bits[i] >> j & 1;
              reserved[y + i][x + j] = 1;
            }
          }
        }; // finder patterns and a part of timing patterns
        // will also mark the format information area (not yet written) as reserved.


        blit(0, 0, 9, 9, [0x7f, 0x41, 0x5d, 0x5d, 0x5d, 0x41, 0x17f, 0x00, 0x40]);
        blit(n - 8, 0, 8, 9, [0x100, 0x7f, 0x41, 0x5d, 0x5d, 0x5d, 0x41, 0x7f]);
        blit(0, n - 8, 9, 8, [0xfe, 0x82, 0xba, 0xba, 0xba, 0x82, 0xfe, 0x00, 0x00]); // the rest of timing patterns

        for (var i = 9; i < n - 8; ++i) {
          matrix[6][i] = matrix[i][6] = ~i & 1;
          reserved[6][i] = reserved[i][6] = 1;
        } // alignment patterns


        var aligns = v[2],
            m = aligns.length;

        for (var i = 0; i < m; ++i) {
          var minj = i === 0 || i === m - 1 ? 1 : 0,
              maxj = i === 0 ? m - 1 : m;

          for (var j = minj; j < maxj; ++j) {
            blit(aligns[i], aligns[j], 5, 5, [0x1f, 0x11, 0x15, 0x11, 0x1f]);
          }
        } // version information


        if (needsverinfo(ver)) {
          var code = augumentbch(ver, 6, 0x1f25, 12);
          var k = 0;

          for (var i = 0; i < 6; ++i) {
            for (var j = 0; j < 3; ++j) {
              matrix[i][n - 11 + j] = matrix[n - 11 + j][i] = code >> k++ & 1;
              reserved[i][n - 11 + j] = reserved[n - 11 + j][i] = 1;
            }
          }
        }

        return {
          matrix: matrix,
          reserved: reserved
        };
      }; // fills the data portion (i.e. unmarked in reserved) of the matrix with given
      // code words. the size of code words should be no more than available bits,
      // and remaining bits are padded to 0 (cf. JIS X 0510:2004 sec 8.7.3).


      var putdata = function putdata(matrix, reserved, buf) {
        var n = matrix.length;
        var k = 0,
            dir = -1;

        for (var i = n - 1; i >= 0; i -= 2) {
          if (i == 6) --i; // skip the entire timing pattern column

          var jj = dir < 0 ? n - 1 : 0;

          for (var j = 0; j < n; ++j) {
            for (var ii = i; ii > i - 2; --ii) {
              if (!reserved[jj][ii]) {
                // may overflow, but (undefined >> x)
                // is 0 so it will auto-pad to zero.
                matrix[jj][ii] = buf[k >> 3] >> (~k & 7) & 1;
                ++k;
              }
            }

            jj += dir;
          }

          dir = -dir;
        }

        return matrix;
      }; // XOR-masks the data portion of the matrix. repeating the call with the same
      // arguments will revert the prior call (convenient in the matrix evaluation).


      var maskdata = function maskdata(matrix, reserved, mask) {
        var maskf = MASKFUNCS[mask];
        var n = matrix.length;

        for (var i = 0; i < n; ++i) {
          for (var j = 0; j < n; ++j) {
            if (!reserved[i][j]) matrix[i][j] ^= maskf(i, j);
          }
        }

        return matrix;
      }; // puts the format information.


      var putformatinfo = function putformatinfo(matrix, reserved, ecclevel, mask) {
        var n = matrix.length;
        var code = augumentbch(ecclevel << 3 | mask, 5, 0x537, 10) ^ 0x5412;

        for (var i = 0; i < 15; ++i) {
          var r = [0, 1, 2, 3, 4, 5, 7, 8, n - 7, n - 6, n - 5, n - 4, n - 3, n - 2, n - 1][i];
          var c = [n - 1, n - 2, n - 3, n - 4, n - 5, n - 6, n - 7, n - 8, 7, 5, 4, 3, 2, 1, 0][i];
          matrix[r][8] = matrix[8][c] = code >> i & 1; // we don't have to mark those bits reserved; always done
          // in makebasematrix above.
        }

        return matrix;
      }; // evaluates the resulting matrix and returns the score (lower is better).
      // (cf. JIS X 0510:2004 sec 8.8.2)
      //
      // the evaluation procedure tries to avoid the problematic patterns naturally
      // occuring from the original matrix. for example, it penaltizes the patterns
      // which just look like the finder pattern which will confuse the decoder.
      // we choose the mask which results in the lowest score among 8 possible ones.
      //
      // note: zxing seems to use the same procedure and in many cases its choice
      // agrees to ours, but sometimes it does not. practically it doesn't matter.


      var evaluatematrix = function evaluatematrix(matrix) {
        // N1+(k-5) points for each consecutive row of k same-colored modules,
        // where k >= 5. no overlapping row counts.
        var PENALTY_CONSECUTIVE = 3; // N2 points for each 2x2 block of same-colored modules.
        // overlapping block does count.

        var PENALTY_TWOBYTWO = 3; // N3 points for each pattern with >4W:1B:1W:3B:1W:1B or
        // 1B:1W:3B:1W:1B:>4W, or their multiples (e.g. highly unlikely,
        // but 13W:3B:3W:9B:3W:3B counts).

        var PENALTY_FINDERLIKE = 40; // N4*k points for every (5*k)% deviation from 50% black density.
        // i.e. k=1 for 55~60% and 40~45%, k=2 for 60~65% and 35~40%, etc.

        var PENALTY_DENSITY = 10;

        var evaluategroup = function evaluategroup(groups) {
          // assumes [W,B,W,B,W,...,B,W]
          var score = 0;

          for (var i = 0; i < groups.length; ++i) {
            if (groups[i] >= 5) score += PENALTY_CONSECUTIVE + (groups[i] - 5);
          }

          for (var i = 5; i < groups.length; i += 2) {
            var p = groups[i];

            if (groups[i - 1] == p && groups[i - 2] == 3 * p && groups[i - 3] == p && groups[i - 4] == p && (groups[i - 5] >= 4 * p || groups[i + 1] >= 4 * p)) {
              // this part differs from zxing...
              score += PENALTY_FINDERLIKE;
            }
          }

          return score;
        };

        var n = matrix.length;
        var score = 0,
            nblacks = 0;

        for (var i = 0; i < n; ++i) {
          var row = matrix[i];
          var groups; // evaluate the current row

          groups = [0]; // the first empty group of white

          for (var j = 0; j < n;) {
            var k;

            for (k = 0; j < n && row[j]; ++k) {
              ++j;
            }

            groups.push(k);

            for (k = 0; j < n && !row[j]; ++k) {
              ++j;
            }

            groups.push(k);
          }

          score += evaluategroup(groups); // evaluate the current column

          groups = [0];

          for (var j = 0; j < n;) {
            var k;

            for (k = 0; j < n && matrix[j][i]; ++k) {
              ++j;
            }

            groups.push(k);

            for (k = 0; j < n && !matrix[j][i]; ++k) {
              ++j;
            }

            groups.push(k);
          }

          score += evaluategroup(groups); // check the 2x2 box and calculate the density

          var nextrow = matrix[i + 1] || [];
          nblacks += row[0];

          for (var j = 1; j < n; ++j) {
            var p = row[j];
            nblacks += p; // at least comparison with next row should be strict...

            if (row[j - 1] == p && nextrow[j] === p && nextrow[j - 1] === p) {
              score += PENALTY_TWOBYTWO;
            }
          }
        }

        score += PENALTY_DENSITY * (Math.abs(nblacks / n / n - 0.5) / 0.05 | 0);
        return score;
      }; // returns the fully encoded QR code matrix which contains given data.
      // it also chooses the best mask automatically when mask is -1.


      var generate = function generate(data, ver, mode, ecclevel, mask) {
        var v = VERSIONS[ver];
        var buf = encode(ver, mode, data, ndatabits(ver, ecclevel) >> 3);
        buf = augumenteccs(buf, v[1][ecclevel], GF256_GENPOLY[v[0][ecclevel]]);
        var result = makebasematrix(ver);
        var matrix = result.matrix,
            reserved = result.reserved;
        putdata(matrix, reserved, buf);

        if (mask < 0) {
          // find the best mask
          maskdata(matrix, reserved, 0);
          putformatinfo(matrix, reserved, ecclevel, 0);
          var bestmask = 0,
              bestscore = evaluatematrix(matrix);
          maskdata(matrix, reserved, 0);

          for (mask = 1; mask < 8; ++mask) {
            maskdata(matrix, reserved, mask);
            putformatinfo(matrix, reserved, ecclevel, mask);
            var score = evaluatematrix(matrix);

            if (bestscore > score) {
              bestscore = score;
              bestmask = mask;
            }

            maskdata(matrix, reserved, mask);
          }

          mask = bestmask;
        }

        maskdata(matrix, reserved, mask);
        putformatinfo(matrix, reserved, ecclevel, mask);
        return matrix;
      }; // the public interface is trivial; the options available are as follows:
      //
      // - version: an integer in [1,40]. when omitted (or -1) the smallest possible
      //   version is chosen.
      // - mode: one of 'numeric', 'alphanumeric', 'octet'. when omitted the smallest
      //   possible mode is chosen.
      // - eccLevel: one of 'L', 'M', 'Q', 'H'. defaults to 'L'.
      // - mask: an integer in [0,7]. when omitted (or -1) the best mask is chosen.
      //


      function generateFrame(data, options) {
        var MODES = {
          'numeric': MODE_NUMERIC,
          'alphanumeric': MODE_ALPHANUMERIC,
          'octet': MODE_OCTET
        };
        var ECCLEVELS = {
          'L': ECCLEVEL_L,
          'M': ECCLEVEL_M,
          'Q': ECCLEVEL_Q,
          'H': ECCLEVEL_H
        };
        options = options || {};
        var ver = options.version || -1;
        var ecclevel = ECCLEVELS[(options.eccLevel || 'L').toUpperCase()];
        var mode = options.mode ? MODES[options.mode.toLowerCase()] : -1;
        var mask = 'mask' in options ? options.mask : -1;

        if (mode < 0) {
          if (typeof data === 'string') {
            if (data.match(NUMERIC_REGEXP)) {
              mode = MODE_NUMERIC;
            } else if (data.match(ALPHANUMERIC_OUT_REGEXP)) {
              // while encode supports case-insensitive encoding, we restrict the data to be uppercased when auto-selecting the mode.
              mode = MODE_ALPHANUMERIC;
            } else {
              mode = MODE_OCTET;
            }
          } else {
            mode = MODE_OCTET;
          }
        } else if (!(mode == MODE_NUMERIC || mode == MODE_ALPHANUMERIC || mode == MODE_OCTET)) {
          throw 'invalid or unsupported mode';
        }

        data = validatedata(mode, data);
        if (data === null) throw 'invalid data format';
        if (ecclevel < 0 || ecclevel > 3) throw 'invalid ECC level';

        if (ver < 0) {
          for (ver = 1; ver <= 40; ++ver) {
            if (data.length <= getmaxdatalen(ver, mode, ecclevel)) break;
          }

          if (ver > 40) throw 'too large data for the Qr format';
        } else if (ver < 1 || ver > 40) {
          throw 'invalid Qr version! should be between 1 and 40';
        }

        if (mask != -1 && (mask < 0 || mask > 8)) throw 'invalid mask'; //console.log('version:', ver, 'mode:', mode, 'ECC:', ecclevel, 'mask:', mask )

        return generate(data, ver, mode, ecclevel, mask);
      } // options
      // - modulesize: a number. this is a size of each modules in pixels, and
      //   defaults to 5px.
      // - margin: a number. this is a size of margin in *modules*, and defaults to
      //   4 (white modules). the specficiation mandates the margin no less than 4
      //   modules, so it is better not to alter this value unless you know what
      //   you're doing.


      function buildCanvas(data, options) {
        var canvas = [];
        var background = options.background || '#fff';
        var foreground = options.foreground || '#000'; //var margin = options.margin || 4;

        var matrix = generateFrame(data, options);
        var n = matrix.length;
        var modSize = Math.floor(options.fit ? options.fit / n : 5);
        var size = n * modSize;
        canvas.push({
          type: 'rect',
          x: 0,
          y: 0,
          w: size,
          h: size,
          lineWidth: 0,
          color: background
        });

        for (var i = 0; i < n; ++i) {
          for (var j = 0; j < n; ++j) {
            if (matrix[i][j]) {
              canvas.push({
                type: 'rect',
                x: modSize * j,
                y: modSize * i,
                w: modSize,
                h: modSize,
                lineWidth: 0,
                color: foreground
              });
            }
          }
        }

        return {
          canvas: canvas,
          size: size
        };
      }

      function measure(node) {
        var cd = buildCanvas(node.qr, node);
        node._canvas = cd.canvas;
        node._width = node._height = node._minWidth = node._maxWidth = node._minHeight = node._maxHeight = cd.size;
        return node;
      }

      module.exports = {
        measure: measure
      };
      /***/
    },
    /* 537 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var isUndefined = __webpack_require__(0).isUndefined;

      var ElementWriter = __webpack_require__(538);
      /**
       * Creates an instance of PageElementWriter - an extended ElementWriter
       * which can handle:
       * - page-breaks (it adds new pages when there's not enough space left),
       * - repeatable fragments (like table-headers, which are repeated everytime
       *                         a page-break occurs)
       * - transactions (used for unbreakable-blocks when we want to make sure
       *                 whole block will be rendered on the same page)
       */


      function PageElementWriter(context, tracker) {
        this.transactionLevel = 0;
        this.repeatables = [];
        this.tracker = tracker;
        this.writer = new ElementWriter(context, tracker);
      }

      function fitOnPage(self, addFct) {
        var position = addFct(self);

        if (!position) {
          self.moveToNextPage();
          position = addFct(self);
        }

        return position;
      }

      PageElementWriter.prototype.addLine = function (line, dontUpdateContextPosition, index) {
        return fitOnPage(this, function (self) {
          return self.writer.addLine(line, dontUpdateContextPosition, index);
        });
      };

      PageElementWriter.prototype.addImage = function (image, index) {
        return fitOnPage(this, function (self) {
          return self.writer.addImage(image, index);
        });
      };

      PageElementWriter.prototype.addSVG = function (image, index) {
        return fitOnPage(this, function (self) {
          return self.writer.addSVG(image, index);
        });
      };

      PageElementWriter.prototype.addQr = function (qr, index) {
        return fitOnPage(this, function (self) {
          return self.writer.addQr(qr, index);
        });
      };

      PageElementWriter.prototype.addVector = function (vector, ignoreContextX, ignoreContextY, index) {
        return this.writer.addVector(vector, ignoreContextX, ignoreContextY, index);
      };

      PageElementWriter.prototype.beginClip = function (width, height) {
        return this.writer.beginClip(width, height);
      };

      PageElementWriter.prototype.endClip = function () {
        return this.writer.endClip();
      };

      PageElementWriter.prototype.alignCanvas = function (node) {
        this.writer.alignCanvas(node);
      };

      PageElementWriter.prototype.addFragment = function (fragment, useBlockXOffset, useBlockYOffset, dontUpdateContextPosition) {
        if (!this.writer.addFragment(fragment, useBlockXOffset, useBlockYOffset, dontUpdateContextPosition)) {
          this.moveToNextPage();
          this.writer.addFragment(fragment, useBlockXOffset, useBlockYOffset, dontUpdateContextPosition);
        }
      };

      PageElementWriter.prototype.moveToNextPage = function (pageOrientation) {
        var nextPage = this.writer.context.moveToNextPage(pageOrientation); // moveToNextPage is called multiple times for table, because is called for each column
        // and repeatables are inserted only in the first time. If columns are used, is needed
        // call for table in first column and then for table in the second column (is other repeatables).

        this.repeatables.forEach(function (rep) {
          if (isUndefined(rep.insertedOnPages[this.writer.context.page])) {
            rep.insertedOnPages[this.writer.context.page] = true;
            this.writer.addFragment(rep, true);
          } else {
            this.writer.context.moveDown(rep.height);
          }
        }, this);
        this.writer.tracker.emit('pageChanged', {
          prevPage: nextPage.prevPage,
          prevY: nextPage.prevY,
          y: this.writer.context.y
        });
      };

      PageElementWriter.prototype.beginUnbreakableBlock = function (width, height) {
        if (this.transactionLevel++ === 0) {
          this.originalX = this.writer.context.x;
          this.writer.pushContext(width, height);
        }
      };

      PageElementWriter.prototype.commitUnbreakableBlock = function (forcedX, forcedY) {
        if (--this.transactionLevel === 0) {
          var unbreakableContext = this.writer.context;
          this.writer.popContext();
          var nbPages = unbreakableContext.pages.length;

          if (nbPages > 0) {
            // no support for multi-page unbreakableBlocks
            var fragment = unbreakableContext.pages[0];
            fragment.xOffset = forcedX;
            fragment.yOffset = forcedY; //TODO: vectors can influence height in some situations

            if (nbPages > 1) {
              // on out-of-context blocs (headers, footers, background) height should be the whole DocumentContext height
              if (forcedX !== undefined || forcedY !== undefined) {
                fragment.height = unbreakableContext.getCurrentPage().pageSize.height - unbreakableContext.pageMargins.top - unbreakableContext.pageMargins.bottom;
              } else {
                fragment.height = this.writer.context.getCurrentPage().pageSize.height - this.writer.context.pageMargins.top - this.writer.context.pageMargins.bottom;

                for (var i = 0, l = this.repeatables.length; i < l; i++) {
                  fragment.height -= this.repeatables[i].height;
                }
              }
            } else {
              fragment.height = unbreakableContext.y;
            }

            if (forcedX !== undefined || forcedY !== undefined) {
              this.writer.addFragment(fragment, true, true, true);
            } else {
              this.addFragment(fragment);
            }
          }
        }
      };

      PageElementWriter.prototype.currentBlockToRepeatable = function () {
        var unbreakableContext = this.writer.context;
        var rep = {
          items: []
        };
        unbreakableContext.pages[0].items.forEach(function (item) {
          rep.items.push(item);
        });
        rep.xOffset = this.originalX; //TODO: vectors can influence height in some situations

        rep.height = unbreakableContext.y;
        rep.insertedOnPages = [];
        return rep;
      };

      PageElementWriter.prototype.pushToRepeatables = function (rep) {
        this.repeatables.push(rep);
      };

      PageElementWriter.prototype.popFromRepeatables = function () {
        this.repeatables.pop();
      };

      PageElementWriter.prototype.context = function () {
        return this.writer.context;
      };

      module.exports = PageElementWriter;
      /***/
    },
    /* 538 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var Line = __webpack_require__(294);

      var isNumber = __webpack_require__(0).isNumber;

      var pack = __webpack_require__(0).pack;

      var offsetVector = __webpack_require__(0).offsetVector;

      var DocumentContext = __webpack_require__(293);
      /**
       * Creates an instance of ElementWriter - a line/vector writer, which adds
       * elements to current page and sets their positions based on the context
       */


      function ElementWriter(context, tracker) {
        this.context = context;
        this.contextStack = [];
        this.tracker = tracker;
      }

      function addPageItem(page, item, index) {
        if (index === null || index === undefined || index < 0 || index > page.items.length) {
          page.items.push(item);
        } else {
          page.items.splice(index, 0, item);
        }
      }

      ElementWriter.prototype.addLine = function (line, dontUpdateContextPosition, index) {
        var height = line.getHeight();
        var context = this.context;
        var page = context.getCurrentPage(),
            position = this.getCurrentPositionOnPage();

        if (context.availableHeight < height || !page) {
          return false;
        }

        line.x = context.x + (line.x || 0);
        line.y = context.y + (line.y || 0);
        this.alignLine(line);
        addPageItem(page, {
          type: 'line',
          item: line
        }, index);
        this.tracker.emit('lineAdded', line);

        if (!dontUpdateContextPosition) {
          context.moveDown(height);
        }

        return position;
      };

      ElementWriter.prototype.alignLine = function (line) {
        var width = this.context.availableWidth;
        var lineWidth = line.getWidth();
        var alignment = line.inlines && line.inlines.length > 0 && line.inlines[0].alignment;
        var offset = 0;

        switch (alignment) {
          case 'right':
            offset = width - lineWidth;
            break;

          case 'center':
            offset = (width - lineWidth) / 2;
            break;
        }

        if (offset) {
          line.x = (line.x || 0) + offset;
        }

        if (alignment === 'justify' && !line.newLineForced && !line.lastLineInParagraph && line.inlines.length > 1) {
          var additionalSpacing = (width - lineWidth) / (line.inlines.length - 1);

          for (var i = 1, l = line.inlines.length; i < l; i++) {
            offset = i * additionalSpacing;
            line.inlines[i].x += offset;
            line.inlines[i].justifyShift = additionalSpacing;
          }
        }
      };

      ElementWriter.prototype.addImage = function (image, index, type) {
        var context = this.context;
        var page = context.getCurrentPage(),
            position = this.getCurrentPositionOnPage();

        if (!page || image.absolutePosition === undefined && context.availableHeight < image._height && page.items.length > 0) {
          return false;
        }

        if (image._x === undefined) {
          image._x = image.x || 0;
        }

        image.x = context.x + image._x;
        image.y = context.y;
        this.alignImage(image);
        addPageItem(page, {
          type: type || 'image',
          item: image
        }, index);
        context.moveDown(image._height);
        return position;
      };

      ElementWriter.prototype.addSVG = function (image, index) {
        return this.addImage(image, index, 'svg');
      };

      ElementWriter.prototype.addQr = function (qr, index) {
        var context = this.context;
        var page = context.getCurrentPage(),
            position = this.getCurrentPositionOnPage();

        if (!page || qr.absolutePosition === undefined && context.availableHeight < qr._height) {
          return false;
        }

        if (qr._x === undefined) {
          qr._x = qr.x || 0;
        }

        qr.x = context.x + qr._x;
        qr.y = context.y;
        this.alignImage(qr);

        for (var i = 0, l = qr._canvas.length; i < l; i++) {
          var vector = qr._canvas[i];
          vector.x += qr.x;
          vector.y += qr.y;
          this.addVector(vector, true, true, index);
        }

        context.moveDown(qr._height);
        return position;
      };

      ElementWriter.prototype.alignImage = function (image) {
        var width = this.context.availableWidth;
        var imageWidth = image._minWidth;
        var offset = 0;

        switch (image._alignment) {
          case 'right':
            offset = width - imageWidth;
            break;

          case 'center':
            offset = (width - imageWidth) / 2;
            break;
        }

        if (offset) {
          image.x = (image.x || 0) + offset;
        }
      };

      ElementWriter.prototype.alignCanvas = function (node) {
        var width = this.context.availableWidth;
        var canvasWidth = node._minWidth;
        var offset = 0;

        switch (node._alignment) {
          case 'right':
            offset = width - canvasWidth;
            break;

          case 'center':
            offset = (width - canvasWidth) / 2;
            break;
        }

        if (offset) {
          node.canvas.forEach(function (vector) {
            offsetVector(vector, offset, 0);
          });
        }
      };

      ElementWriter.prototype.addVector = function (vector, ignoreContextX, ignoreContextY, index) {
        var context = this.context;
        var page = context.getCurrentPage(),
            position = this.getCurrentPositionOnPage();

        if (page) {
          offsetVector(vector, ignoreContextX ? 0 : context.x, ignoreContextY ? 0 : context.y);
          addPageItem(page, {
            type: 'vector',
            item: vector
          }, index);
          return position;
        }
      };

      ElementWriter.prototype.beginClip = function (width, height) {
        var ctx = this.context;
        var page = ctx.getCurrentPage();
        page.items.push({
          type: 'beginClip',
          item: {
            x: ctx.x,
            y: ctx.y,
            width: width,
            height: height
          }
        });
        return true;
      };

      ElementWriter.prototype.endClip = function () {
        var ctx = this.context;
        var page = ctx.getCurrentPage();
        page.items.push({
          type: 'endClip'
        });
        return true;
      };

      function cloneLine(line) {
        var result = new Line(line.maxWidth);

        for (var key in line) {
          if (line.hasOwnProperty(key)) {
            result[key] = line[key];
          }
        }

        return result;
      }

      ElementWriter.prototype.addFragment = function (block, useBlockXOffset, useBlockYOffset, dontUpdateContextPosition) {
        var ctx = this.context;
        var page = ctx.getCurrentPage();

        if (!useBlockXOffset && block.height > ctx.availableHeight) {
          return false;
        }

        block.items.forEach(function (item) {
          switch (item.type) {
            case 'line':
              var l = cloneLine(item.item);

              if (l._node) {
                l._node.positions[0].pageNumber = ctx.page + 1;
              }

              l.x = (l.x || 0) + (useBlockXOffset ? block.xOffset || 0 : ctx.x);
              l.y = (l.y || 0) + (useBlockYOffset ? block.yOffset || 0 : ctx.y);
              page.items.push({
                type: 'line',
                item: l
              });
              break;

            case 'vector':
              var v = pack(item.item);
              offsetVector(v, useBlockXOffset ? block.xOffset || 0 : ctx.x, useBlockYOffset ? block.yOffset || 0 : ctx.y);
              page.items.push({
                type: 'vector',
                item: v
              });
              break;

            case 'image':
            case 'svg':
              var img = pack(item.item);
              img.x = (img.x || 0) + (useBlockXOffset ? block.xOffset || 0 : ctx.x);
              img.y = (img.y || 0) + (useBlockYOffset ? block.yOffset || 0 : ctx.y);
              page.items.push({
                type: item.type,
                item: img
              });
              break;
          }
        });

        if (!dontUpdateContextPosition) {
          ctx.moveDown(block.height);
        }

        return true;
      };
      /**
       * Pushes the provided context onto the stack or creates a new one
       *
       * pushContext(context) - pushes the provided context and makes it current
       * pushContext(width, height) - creates and pushes a new context with the specified width and height
       * pushContext() - creates a new context for unbreakable blocks (with current availableWidth and full-page-height)
       */


      ElementWriter.prototype.pushContext = function (contextOrWidth, height) {
        if (contextOrWidth === undefined) {
          height = this.context.getCurrentPage().height - this.context.pageMargins.top - this.context.pageMargins.bottom;
          contextOrWidth = this.context.availableWidth;
        }

        if (isNumber(contextOrWidth)) {
          contextOrWidth = new DocumentContext({
            width: contextOrWidth,
            height: height
          }, {
            left: 0,
            right: 0,
            top: 0,
            bottom: 0
          });
        }

        this.contextStack.push(this.context);
        this.context = contextOrWidth;
      };

      ElementWriter.prototype.popContext = function () {
        this.context = this.contextStack.pop();
      };

      ElementWriter.prototype.getCurrentPositionOnPage = function () {
        return (this.contextStack[0] || this.context).getCurrentPosition();
      };

      module.exports = ElementWriter;
      /***/
    },
    /* 539 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var ColumnCalculator = __webpack_require__(195);

      var isFunction = __webpack_require__(0).isFunction;

      var isNumber = __webpack_require__(0).isNumber;

      function TableProcessor(tableNode) {
        this.tableNode = tableNode;
      }

      TableProcessor.prototype.beginTable = function (writer) {
        var tableNode;
        var availableWidth;
        var self = this;
        tableNode = this.tableNode;
        this.offsets = tableNode._offsets;
        this.layout = tableNode._layout;
        availableWidth = writer.context().availableWidth - this.offsets.total;
        ColumnCalculator.buildColumnWidths(tableNode.table.widths, availableWidth);
        this.tableWidth = tableNode._offsets.total + getTableInnerContentWidth();
        this.rowSpanData = prepareRowSpanData();
        this.cleanUpRepeatables = false;
        this.headerRows = tableNode.table.headerRows || 0;
        this.rowsWithoutPageBreak = this.headerRows + (tableNode.table.keepWithHeaderRows || 0);
        this.dontBreakRows = tableNode.table.dontBreakRows || false;

        if (this.rowsWithoutPageBreak) {
          writer.beginUnbreakableBlock();
        } // update the border properties of all cells before drawing any lines


        prepareCellBorders(this.tableNode.table.body);
        this.drawHorizontalLine(0, writer);

        function getTableInnerContentWidth() {
          var width = 0;
          tableNode.table.widths.forEach(function (w) {
            width += w._calcWidth;
          });
          return width;
        }

        function prepareRowSpanData() {
          var rsd = [];
          var x = 0;
          var lastWidth = 0;
          rsd.push({
            left: 0,
            rowSpan: 0
          });

          for (var i = 0, l = self.tableNode.table.body[0].length; i < l; i++) {
            var paddings = self.layout.paddingLeft(i, self.tableNode) + self.layout.paddingRight(i, self.tableNode);
            var lBorder = self.layout.vLineWidth(i, self.tableNode);
            lastWidth = paddings + lBorder + self.tableNode.table.widths[i]._calcWidth;
            rsd[rsd.length - 1].width = lastWidth;
            x += lastWidth;
            rsd.push({
              left: x,
              rowSpan: 0,
              width: 0
            });
          }

          return rsd;
        } // Iterate through all cells. If the current cell is the start of a
        // rowSpan/colSpan, update the border property of the cells on its
        // bottom/right accordingly. This is needed since each iteration of the
        // line-drawing loops draws lines for a single cell, not for an entire
        // rowSpan/colSpan.


        function prepareCellBorders(body) {
          for (var rowIndex = 0; rowIndex < body.length; rowIndex++) {
            var row = body[rowIndex];

            for (var colIndex = 0; colIndex < row.length; colIndex++) {
              var cell = row[colIndex];

              if (cell.border) {
                var rowSpan = cell.rowSpan || 1;
                var colSpan = cell.colSpan || 1;

                for (var rowOffset = 0; rowOffset < rowSpan; rowOffset++) {
                  // set left border
                  if (cell.border[0] !== undefined && rowOffset > 0) {
                    setBorder(rowIndex + rowOffset, colIndex, 0, cell.border[0]);
                  } // set right border


                  if (cell.border[2] !== undefined) {
                    setBorder(rowIndex + rowOffset, colIndex + colSpan - 1, 2, cell.border[2]);
                  }
                }

                for (var colOffset = 0; colOffset < colSpan; colOffset++) {
                  // set top border
                  if (cell.border[1] !== undefined && colOffset > 0) {
                    setBorder(rowIndex, colIndex + colOffset, 1, cell.border[1]);
                  } // set bottom border


                  if (cell.border[3] !== undefined) {
                    setBorder(rowIndex + rowSpan - 1, colIndex + colOffset, 3, cell.border[3]);
                  }
                }
              }
            }
          } // helper function to set the border for a given cell


          function setBorder(rowIndex, colIndex, borderIndex, borderValue) {
            var cell = body[rowIndex][colIndex];
            cell.border = cell.border || {};
            cell.border[borderIndex] = borderValue;
          }
        }
      };

      TableProcessor.prototype.onRowBreak = function (rowIndex, writer) {
        var self = this;
        return function () {
          var offset = self.rowPaddingTop + (!self.headerRows ? self.topLineWidth : 0);
          writer.context().availableHeight -= self.reservedAtBottom;
          writer.context().moveDown(offset);
        };
      };

      TableProcessor.prototype.beginRow = function (rowIndex, writer) {
        this.topLineWidth = this.layout.hLineWidth(rowIndex, this.tableNode);
        this.rowPaddingTop = this.layout.paddingTop(rowIndex, this.tableNode);
        this.bottomLineWidth = this.layout.hLineWidth(rowIndex + 1, this.tableNode);
        this.rowPaddingBottom = this.layout.paddingBottom(rowIndex, this.tableNode);
        this.rowCallback = this.onRowBreak(rowIndex, writer);
        writer.tracker.startTracking('pageChanged', this.rowCallback);

        if (this.dontBreakRows) {
          writer.beginUnbreakableBlock();
        }

        this.rowTopY = writer.context().y;
        this.reservedAtBottom = this.bottomLineWidth + this.rowPaddingBottom;
        writer.context().availableHeight -= this.reservedAtBottom;
        writer.context().moveDown(this.rowPaddingTop);
      };

      TableProcessor.prototype.drawHorizontalLine = function (lineIndex, writer, overrideY) {
        var lineWidth = this.layout.hLineWidth(lineIndex, this.tableNode);

        if (lineWidth) {
          var style = this.layout.hLineStyle(lineIndex, this.tableNode);
          var dash;

          if (style && style.dash) {
            dash = style.dash;
          }

          var offset = lineWidth / 2;
          var currentLine = null;
          var body = this.tableNode.table.body;
          var cellAbove;
          var currentCell;
          var rowCellAbove;

          for (var i = 0, l = this.rowSpanData.length; i < l; i++) {
            var data = this.rowSpanData[i];
            var shouldDrawLine = !data.rowSpan;
            var borderColor = null; // draw only if the current cell requires a top border or the cell in the
            // row above requires a bottom border

            if (shouldDrawLine && i < l - 1) {
              var topBorder = false,
                  bottomBorder = false,
                  rowBottomBorder = false; // the cell in the row above

              if (lineIndex > 0) {
                cellAbove = body[lineIndex - 1][i];
                bottomBorder = cellAbove.border ? cellAbove.border[3] : this.layout.defaultBorder;

                if (bottomBorder && cellAbove.borderColor) {
                  borderColor = cellAbove.borderColor[3];
                }
              } // the current cell


              if (lineIndex < body.length) {
                currentCell = body[lineIndex][i];
                topBorder = currentCell.border ? currentCell.border[1] : this.layout.defaultBorder;

                if (topBorder && borderColor == null && currentCell.borderColor) {
                  borderColor = currentCell.borderColor[1];
                }
              }

              shouldDrawLine = topBorder || bottomBorder;
            }

            if (cellAbove && cellAbove._rowSpanCurrentOffset) {
              rowCellAbove = body[lineIndex - 1 - cellAbove._rowSpanCurrentOffset][i];
              rowBottomBorder = rowCellAbove && rowCellAbove.border ? rowCellAbove.border[3] : this.layout.defaultBorder;

              if (rowBottomBorder && rowCellAbove && rowCellAbove.borderColor) {
                borderColor = rowCellAbove.borderColor[3];
              }
            }

            if (borderColor == null) {
              borderColor = isFunction(this.layout.hLineColor) ? this.layout.hLineColor(lineIndex, this.tableNode, i) : this.layout.hLineColor;
            }

            if (!currentLine && shouldDrawLine) {
              currentLine = {
                left: data.left,
                width: 0
              };
            }

            if (shouldDrawLine) {
              var colSpanIndex = 0;

              if (rowCellAbove && rowCellAbove.colSpan && rowBottomBorder) {
                while (rowCellAbove.colSpan > colSpanIndex) {
                  currentLine.width += this.rowSpanData[i + colSpanIndex++].width || 0;
                }

                i += colSpanIndex - 1;
              } else if (cellAbove && cellAbove.colSpan && bottomBorder) {
                while (cellAbove.colSpan > colSpanIndex) {
                  currentLine.width += this.rowSpanData[i + colSpanIndex++].width || 0;
                }

                i += colSpanIndex - 1;
              } else if (currentCell && currentCell.colSpan && topBorder) {
                while (currentCell.colSpan > colSpanIndex) {
                  currentLine.width += this.rowSpanData[i + colSpanIndex++].width || 0;
                }

                i += colSpanIndex - 1;
              } else {
                currentLine.width += this.rowSpanData[i].width || 0;
              }
            }

            var y = (overrideY || 0) + offset;

            if (shouldDrawLine) {
              if (currentLine && currentLine.width) {
                writer.addVector({
                  type: 'line',
                  x1: currentLine.left,
                  x2: currentLine.left + currentLine.width,
                  y1: y,
                  y2: y,
                  lineWidth: lineWidth,
                  dash: dash,
                  lineColor: borderColor
                }, false, overrideY);
                currentLine = null;
                borderColor = null;
                cellAbove = null;
                currentCell = null;
                rowCellAbove = null;
              }
            }
          }

          writer.context().moveDown(lineWidth);
        }
      };

      TableProcessor.prototype.drawVerticalLine = function (x, y0, y1, vLineColIndex, writer, vLineRowIndex, beforeVLineColIndex) {
        var width = this.layout.vLineWidth(vLineColIndex, this.tableNode);

        if (width === 0) {
          return;
        }

        var style = this.layout.vLineStyle(vLineColIndex, this.tableNode);
        var dash;

        if (style && style.dash) {
          dash = style.dash;
        }

        var body = this.tableNode.table.body;
        var cellBefore;
        var currentCell;
        var borderColor; // the cell in the col before

        if (vLineColIndex > 0) {
          cellBefore = body[vLineRowIndex][beforeVLineColIndex];

          if (cellBefore && cellBefore.borderColor) {
            if (cellBefore.border ? cellBefore.border[2] : this.layout.defaultBorder) {
              borderColor = cellBefore.borderColor[2];
            }
          }
        } // the current cell


        if (borderColor == null && vLineColIndex < body.length) {
          currentCell = body[vLineRowIndex][vLineColIndex];

          if (currentCell && currentCell.borderColor) {
            if (currentCell.border ? currentCell.border[0] : this.layout.defaultBorder) {
              borderColor = currentCell.borderColor[0];
            }
          }
        }

        if (borderColor == null && cellBefore && cellBefore._rowSpanCurrentOffset) {
          var rowCellBeforeAbove = body[vLineRowIndex - cellBefore._rowSpanCurrentOffset][beforeVLineColIndex];

          if (rowCellBeforeAbove.borderColor) {
            if (rowCellBeforeAbove.border ? rowCellBeforeAbove.border[2] : this.layout.defaultBorder) {
              borderColor = rowCellBeforeAbove.borderColor[2];
            }
          }
        }

        if (borderColor == null && currentCell && currentCell._rowSpanCurrentOffset) {
          var rowCurrentCellAbove = body[vLineRowIndex - currentCell._rowSpanCurrentOffset][vLineColIndex];

          if (rowCurrentCellAbove.borderColor) {
            if (rowCurrentCellAbove.border ? rowCurrentCellAbove.border[2] : this.layout.defaultBorder) {
              borderColor = rowCurrentCellAbove.borderColor[2];
            }
          }
        }

        if (borderColor == null) {
          borderColor = isFunction(this.layout.vLineColor) ? this.layout.vLineColor(vLineColIndex, this.tableNode, vLineRowIndex) : this.layout.vLineColor;
        }

        writer.addVector({
          type: 'line',
          x1: x + width / 2,
          x2: x + width / 2,
          y1: y0,
          y2: y1,
          lineWidth: width,
          dash: dash,
          lineColor: borderColor
        }, false, true);
        cellBefore = null;
        currentCell = null;
        borderColor = null;
      };

      TableProcessor.prototype.endTable = function (writer) {
        if (this.cleanUpRepeatables) {
          writer.popFromRepeatables();
        }
      };

      TableProcessor.prototype.endRow = function (rowIndex, writer, pageBreaks) {
        var l, i;
        var self = this;
        writer.tracker.stopTracking('pageChanged', this.rowCallback);
        writer.context().moveDown(this.layout.paddingBottom(rowIndex, this.tableNode));
        writer.context().availableHeight += this.reservedAtBottom;
        var endingPage = writer.context().page;
        var endingY = writer.context().y;
        var xs = getLineXs();
        var ys = [];
        var hasBreaks = pageBreaks && pageBreaks.length > 0;
        var body = this.tableNode.table.body;
        ys.push({
          y0: this.rowTopY,
          page: hasBreaks ? pageBreaks[0].prevPage : endingPage
        });

        if (hasBreaks) {
          for (i = 0, l = pageBreaks.length; i < l; i++) {
            var pageBreak = pageBreaks[i];
            ys[ys.length - 1].y1 = pageBreak.prevY;
            ys.push({
              y0: pageBreak.y,
              page: pageBreak.prevPage + 1
            });
          }
        }

        ys[ys.length - 1].y1 = endingY;
        var skipOrphanePadding = ys[0].y1 - ys[0].y0 === this.rowPaddingTop;

        for (var yi = skipOrphanePadding ? 1 : 0, yl = ys.length; yi < yl; yi++) {
          var willBreak = yi < ys.length - 1;
          var rowBreakWithoutHeader = yi > 0 && !this.headerRows;
          var hzLineOffset = rowBreakWithoutHeader ? 0 : this.topLineWidth;
          var y1 = ys[yi].y0;
          var y2 = ys[yi].y1;

          if (willBreak) {
            y2 = y2 + this.rowPaddingBottom;
          }

          if (writer.context().page != ys[yi].page) {
            writer.context().page = ys[yi].page; //TODO: buggy, availableHeight should be updated on every pageChanged event
            // TableProcessor should be pageChanged listener, instead of processRow

            this.reservedAtBottom = 0;
          }

          for (i = 0, l = xs.length; i < l; i++) {
            var leftCellBorder = false;
            var rightCellBorder = false;
            var colIndex = xs[i].index; // current cell

            if (colIndex < body[rowIndex].length) {
              var cell = body[rowIndex][colIndex];
              leftCellBorder = cell.border ? cell.border[0] : this.layout.defaultBorder;
              rightCellBorder = cell.border ? cell.border[2] : this.layout.defaultBorder;
            } // before cell


            if (colIndex > 0 && !leftCellBorder) {
              var cell = body[rowIndex][colIndex - 1];
              leftCellBorder = cell.border ? cell.border[2] : this.layout.defaultBorder;
            } // after cell


            if (colIndex + 1 < body[rowIndex].length && !rightCellBorder) {
              var cell = body[rowIndex][colIndex + 1];
              rightCellBorder = cell.border ? cell.border[0] : this.layout.defaultBorder;
            }

            if (leftCellBorder) {
              this.drawVerticalLine(xs[i].x, y1 - hzLineOffset, y2 + this.bottomLineWidth, xs[i].index, writer, rowIndex, xs[i - 1] ? xs[i - 1].index : null);
            }

            if (i < l - 1) {
              var fillColor = body[rowIndex][colIndex].fillColor;
              var fillOpacity = body[rowIndex][colIndex].fillOpacity;

              if (!fillColor) {
                fillColor = isFunction(this.layout.fillColor) ? this.layout.fillColor(rowIndex, this.tableNode, colIndex) : this.layout.fillColor;
              }

              if (!isNumber(fillOpacity)) {
                fillOpacity = isFunction(this.layout.fillOpacity) ? this.layout.fillOpacity(rowIndex, this.tableNode, colIndex) : this.layout.fillOpacity;
              }

              if (fillColor) {
                var widthLeftBorder = leftCellBorder ? this.layout.vLineWidth(colIndex, this.tableNode) : 0;
                var widthRightBorder;

                if ((colIndex === 0 || colIndex + 1 == body[rowIndex].length) && !rightCellBorder) {
                  widthRightBorder = this.layout.vLineWidth(colIndex + 1, this.tableNode);
                } else if (rightCellBorder) {
                  widthRightBorder = this.layout.vLineWidth(colIndex + 1, this.tableNode) / 2;
                } else {
                  widthRightBorder = 0;
                }

                var x1f = this.dontBreakRows ? xs[i].x + widthLeftBorder : xs[i].x + widthLeftBorder / 2;
                var y1f = this.dontBreakRows ? y1 : y1 - hzLineOffset / 2;
                var x2f = xs[i + 1].x + widthRightBorder;
                var y2f = this.dontBreakRows ? y2 + this.bottomLineWidth : y2 + this.bottomLineWidth / 2;
                writer.addVector({
                  type: 'rect',
                  x: x1f,
                  y: y1f,
                  w: x2f - x1f,
                  h: y2f - y1f,
                  lineWidth: 0,
                  color: fillColor,
                  fillOpacity: fillOpacity
                }, false, true, writer.context().backgroundLength[writer.context().page]);
              }
            }
          }

          if (willBreak && this.layout.hLineWhenBroken !== false) {
            this.drawHorizontalLine(rowIndex + 1, writer, y2);
          }

          if (rowBreakWithoutHeader && this.layout.hLineWhenBroken !== false) {
            this.drawHorizontalLine(rowIndex, writer, y1);
          }
        }

        writer.context().page = endingPage;
        writer.context().y = endingY;
        var row = this.tableNode.table.body[rowIndex];

        for (i = 0, l = row.length; i < l; i++) {
          if (row[i].rowSpan) {
            this.rowSpanData[i].rowSpan = row[i].rowSpan; // fix colSpans

            if (row[i].colSpan && row[i].colSpan > 1) {
              for (var j = 1; j < row[i].rowSpan; j++) {
                this.tableNode.table.body[rowIndex + j][i]._colSpan = row[i].colSpan;
              }
            } // fix rowSpans


            if (row[i].rowSpan && row[i].rowSpan > 1) {
              for (var j = 1; j < row[i].rowSpan; j++) {
                this.tableNode.table.body[rowIndex + j][i]._rowSpanCurrentOffset = j;
              }
            }
          }

          if (this.rowSpanData[i].rowSpan > 0) {
            this.rowSpanData[i].rowSpan--;
          }
        }

        this.drawHorizontalLine(rowIndex + 1, writer);

        if (this.headerRows && rowIndex === this.headerRows - 1) {
          this.headerRepeatable = writer.currentBlockToRepeatable();
        }

        if (this.dontBreakRows) {
          writer.tracker.auto('pageChanged', function () {
            if (!self.headerRows && self.layout.hLineWhenBroken !== false) {
              self.drawHorizontalLine(rowIndex, writer);
            }
          }, function () {
            writer.commitUnbreakableBlock();
          });
        }

        if (this.headerRepeatable && (rowIndex === this.rowsWithoutPageBreak - 1 || rowIndex === this.tableNode.table.body.length - 1)) {
          writer.commitUnbreakableBlock();
          writer.pushToRepeatables(this.headerRepeatable);
          this.cleanUpRepeatables = true;
          this.headerRepeatable = null;
        }

        function getLineXs() {
          var result = [];
          var cols = 0;

          for (var i = 0, l = self.tableNode.table.body[rowIndex].length; i < l; i++) {
            if (!cols) {
              result.push({
                x: self.rowSpanData[i].left,
                index: i
              });
              var item = self.tableNode.table.body[rowIndex][i];
              cols = item._colSpan || item.colSpan || 0;
            }

            if (cols > 0) {
              cols--;
            }
          }

          result.push({
            x: self.rowSpanData[self.rowSpanData.length - 1].left,
            index: self.rowSpanData.length - 1
          });
          return result;
        }
      };

      module.exports = TableProcessor;
      /***/
    },
    /* 540 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      module.exports = {
        '4A0': [4767.87, 6740.79],
        '2A0': [3370.39, 4767.87],
        A0: [2383.94, 3370.39],
        A1: [1683.78, 2383.94],
        A2: [1190.55, 1683.78],
        A3: [841.89, 1190.55],
        A4: [595.28, 841.89],
        A5: [419.53, 595.28],
        A6: [297.64, 419.53],
        A7: [209.76, 297.64],
        A8: [147.40, 209.76],
        A9: [104.88, 147.40],
        A10: [73.70, 104.88],
        B0: [2834.65, 4008.19],
        B1: [2004.09, 2834.65],
        B2: [1417.32, 2004.09],
        B3: [1000.63, 1417.32],
        B4: [708.66, 1000.63],
        B5: [498.90, 708.66],
        B6: [354.33, 498.90],
        B7: [249.45, 354.33],
        B8: [175.75, 249.45],
        B9: [124.72, 175.75],
        B10: [87.87, 124.72],
        C0: [2599.37, 3676.54],
        C1: [1836.85, 2599.37],
        C2: [1298.27, 1836.85],
        C3: [918.43, 1298.27],
        C4: [649.13, 918.43],
        C5: [459.21, 649.13],
        C6: [323.15, 459.21],
        C7: [229.61, 323.15],
        C8: [161.57, 229.61],
        C9: [113.39, 161.57],
        C10: [79.37, 113.39],
        RA0: [2437.80, 3458.27],
        RA1: [1729.13, 2437.80],
        RA2: [1218.90, 1729.13],
        RA3: [864.57, 1218.90],
        RA4: [609.45, 864.57],
        SRA0: [2551.18, 3628.35],
        SRA1: [1814.17, 2551.18],
        SRA2: [1275.59, 1814.17],
        SRA3: [907.09, 1275.59],
        SRA4: [637.80, 907.09],
        EXECUTIVE: [521.86, 756.00],
        FOLIO: [612.00, 936.00],
        LEGAL: [612.00, 1008.00],
        LETTER: [612.00, 792.00],
        TABLOID: [792.00, 1224.00]
      };
      /***/
    },
    /* 541 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";
      /* WEBPACK VAR INJECTION */

      (function (Buffer) {
        var fs = __webpack_require__(53);

        function ImageMeasure(pdfKitDoc, imageDictionary) {
          this.pdfKitDoc = pdfKitDoc;
          this.imageDictionary = imageDictionary || {};
        }

        ImageMeasure.prototype.measureImage = function (src) {
          var image;
          var that = this;

          if (!this.pdfKitDoc._imageRegistry[src]) {
            try {
              image = this.pdfKitDoc.openImage(realImageSrc(src));

              if (!image) {
                throw 'No image';
              }
            } catch (error) {
              throw 'Invalid image: ' + error.toString() + '\nImages dictionary should contain dataURL entries (or local file paths in node.js)';
            }

            image.embed(this.pdfKitDoc);
            this.pdfKitDoc._imageRegistry[src] = image;
          } else {
            image = this.pdfKitDoc._imageRegistry[src];
          }

          return {
            width: image.width,
            height: image.height
          };

          function realImageSrc(src) {
            var img = that.imageDictionary[src];

            if (!img) {
              return src;
            }

            if (fs.existsSync(img)) {
              return fs.readFileSync(img);
            }

            var index = img.indexOf('base64,');

            if (index < 0) {
              return that.imageDictionary[src];
            }

            return Buffer.from(img.substring(index + 7), 'base64');
          }
        };

        module.exports = ImageMeasure;
        /* WEBPACK VAR INJECTION */
      }).call(this, __webpack_require__(10).Buffer);
      /***/
    },
    /* 542 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var xmldoc = __webpack_require__(543);
      /** Strip unit postfix, parse number, but return undefined instead of NaN for bad input */


      function stripUnits(textVal) {
        var n = parseFloat(textVal);

        if (typeof n !== 'number' || isNaN(n)) {
          return undefined;
        }

        return n;
      }
      /** Make sure it's valid XML and the root tage is <svg/>, returns xmldoc DOM */


      function parseSVG(svgString) {
        var doc;

        try {
          doc = new xmldoc.XmlDocument(svgString);
        } catch (err) {
          throw new Error('SVGMeasure: ' + err);
        }

        if (doc.name !== "svg") {
          throw new Error('SVGMeasure: expected <svg> document');
        }

        return doc;
      }

      function SVGMeasure() {}

      SVGMeasure.prototype.measureSVG = function (svgString) {
        var doc = parseSVG(svgString);
        var docWidth = stripUnits(doc.attr.width);
        var docHeight = stripUnits(doc.attr.height);

        if ((docWidth == undefined || docHeight == undefined) && typeof doc.attr.viewBox == 'string') {
          var viewBoxParts = doc.attr.viewBox.split(/[,\s]+/);

          if (viewBoxParts.length !== 4) {
            throw new Error("Unexpected svg viewbox format, should have 4 entries but found: '" + doc.attr.viewBox + "'");
          }

          if (docWidth == undefined) {
            docWidth = stripUnits(viewBoxParts[2]);
          }

          if (docHeight == undefined) {
            docHeight = stripUnits(viewBoxParts[3]);
          }
        }

        return {
          width: docWidth,
          height: docHeight
        };
      };

      SVGMeasure.prototype.writeDimensions = function (svgString, dimensions) {
        var doc = parseSVG(svgString);
        doc.attr.width = "" + dimensions.width;
        doc.attr.height = "" + dimensions.height;
        return doc.toString();
      };

      module.exports = SVGMeasure;
      /***/
    },
    /* 543 */

    /***/
    function (module, exports, __webpack_require__) {
      // This file is just added for convenience so this repository can be
      // directly checked out into a project's deps folder
      module.exports = __webpack_require__(544);
      /***/
    },
    /* 544 */

    /***/
    function (module, exports, __webpack_require__) {
      /* WEBPACK VAR INJECTION */
      (function (global) {
        (function () {
          var sax;

          if (true && module.exports && !global.xmldocAssumeBrowser) {
            // We're being used in a Node-like environment
            sax = __webpack_require__(545);
          } else {
            // assume it's attached to the Window object in a browser
            sax = this.sax;
            if (!sax) // no sax for you!
              throw new Error("Expected sax to be defined. Make sure you're including sax.js before this file.");
          }
          /*
          XmlElement is our basic building block. Everything is an XmlElement; even XmlDocument
          behaves like an XmlElement by inheriting its attributes and functions.
          */


          function XmlElement(tag) {
            // Capture the parser object off of the XmlDocument delegate
            var parser = delegates[delegates.length - 1].parser;
            this.name = tag.name;
            this.attr = tag.attributes;
            this.val = "";
            this.children = [];
            this.firstChild = null;
            this.lastChild = null; // Assign parse information

            this.line = parser.line;
            this.column = parser.column;
            this.position = parser.position;
            this.startTagPosition = parser.startTagPosition;
          } // Private methods


          XmlElement.prototype._addChild = function (child) {
            // add to our children array
            this.children.push(child); // update first/last pointers

            if (!this.firstChild) this.firstChild = child;
            this.lastChild = child;
          }; // SaxParser handlers


          XmlElement.prototype._opentag = function (tag) {
            var child = new XmlElement(tag);

            this._addChild(child);

            delegates.unshift(child);
          };

          XmlElement.prototype._closetag = function () {
            delegates.shift();
          };

          XmlElement.prototype._text = function (text) {
            if (typeof this.children === 'undefined') return;
            this.val += text;

            this._addChild(new XmlTextNode(text));
          };

          XmlElement.prototype._cdata = function (cdata) {
            this.val += cdata;

            this._addChild(new XmlCDataNode(cdata));
          };

          XmlElement.prototype._comment = function (comment) {
            if (typeof this.children === 'undefined') return;

            this._addChild(new XmlCommentNode(comment));
          };

          XmlElement.prototype._error = function (err) {
            throw err;
          }; // Useful functions


          XmlElement.prototype.eachChild = function (iterator, context) {
            for (var i = 0, l = this.children.length; i < l; i++) {
              if (this.children[i].type === "element") if (iterator.call(context, this.children[i], i, this.children) === false) return;
            }
          };

          XmlElement.prototype.childNamed = function (name) {
            for (var i = 0, l = this.children.length; i < l; i++) {
              var child = this.children[i];
              if (child.name === name) return child;
            }

            return undefined;
          };

          XmlElement.prototype.childrenNamed = function (name) {
            var matches = [];

            for (var i = 0, l = this.children.length; i < l; i++) {
              if (this.children[i].name === name) matches.push(this.children[i]);
            }

            return matches;
          };

          XmlElement.prototype.childWithAttribute = function (name, value) {
            for (var i = 0, l = this.children.length; i < l; i++) {
              var child = this.children[i];
              if (child.type === "element" && (value && child.attr[name] === value || !value && child.attr[name])) return child;
            }

            return undefined;
          };

          XmlElement.prototype.descendantWithPath = function (path) {
            var descendant = this;
            var components = path.split('.');

            for (var i = 0, l = components.length; i < l; i++) {
              if (descendant && descendant.type === "element") descendant = descendant.childNamed(components[i]);else return undefined;
            }

            return descendant;
          };

          XmlElement.prototype.valueWithPath = function (path) {
            var components = path.split('@');
            var descendant = this.descendantWithPath(components[0]);
            if (descendant) return components.length > 1 ? descendant.attr[components[1]] : descendant.val;else return undefined;
          }; // String formatting (for debugging)


          XmlElement.prototype.toString = function (options) {
            return this.toStringWithIndent("", options);
          };

          XmlElement.prototype.toStringWithIndent = function (indent, options) {
            var s = indent + "<" + this.name;
            var linebreak = options && options.compressed ? "" : "\n";
            var preserveWhitespace = options && options.preserveWhitespace;

            for (var name in this.attr) {
              if (Object.prototype.hasOwnProperty.call(this.attr, name)) s += " " + name + '="' + escapeXML(this.attr[name]) + '"';
            }

            if (this.children.length === 1 && this.children[0].type !== "element") {
              s += ">" + this.children[0].toString(options) + "</" + this.name + ">";
            } else if (this.children.length) {
              s += ">" + linebreak;
              var childIndent = indent + (options && options.compressed ? "" : "  ");

              for (var i = 0, l = this.children.length; i < l; i++) {
                s += this.children[i].toStringWithIndent(childIndent, options) + linebreak;
              }

              s += indent + "</" + this.name + ">";
            } else if (options && options.html) {
              var whiteList = ["area", "base", "br", "col", "embed", "frame", "hr", "img", "input", "keygen", "link", "menuitem", "meta", "param", "source", "track", "wbr"];
              if (whiteList.indexOf(this.name) !== -1) s += "/>";else s += "></" + this.name + ">";
            } else {
              s += "/>";
            }

            return s;
          }; // Alternative XML nodes


          function XmlTextNode(text) {
            this.text = text;
          }

          XmlTextNode.prototype.toString = function (options) {
            return formatText(escapeXML(this.text), options);
          };

          XmlTextNode.prototype.toStringWithIndent = function (indent, options) {
            return indent + this.toString(options);
          };

          function XmlCDataNode(cdata) {
            this.cdata = cdata;
          }

          XmlCDataNode.prototype.toString = function (options) {
            return "<![CDATA[" + formatText(this.cdata, options) + "]]>";
          };

          XmlCDataNode.prototype.toStringWithIndent = function (indent, options) {
            return indent + this.toString(options);
          };

          function XmlCommentNode(comment) {
            this.comment = comment;
          }

          XmlCommentNode.prototype.toString = function (options) {
            return "<!--" + formatText(escapeXML(this.comment), options) + "-->";
          };

          XmlCommentNode.prototype.toStringWithIndent = function (indent, options) {
            return indent + this.toString(options);
          }; // Node type tag


          XmlElement.prototype.type = "element";
          XmlTextNode.prototype.type = "text";
          XmlCDataNode.prototype.type = "cdata";
          XmlCommentNode.prototype.type = "comment";
          /*
          XmlDocument is the class we expose to the user; it uses the sax parser to create a hierarchy
          of XmlElements.
          */

          function XmlDocument(xml) {
            xml && (xml = xml.toString().trim());
            if (!xml) throw new Error("No XML to parse!"); // Stores doctype (if defined)

            this.doctype = ""; // Expose the parser to the other delegates while the parser is running

            this.parser = sax.parser(true); // strict

            addParserEvents(this.parser); // We'll use the file-scoped "delegates" var to remember what elements we're currently
            // parsing; they will push and pop off the stack as we get deeper into the XML hierarchy.
            // It's safe to use a global because JS is single-threaded.

            delegates = [this];
            this.parser.write(xml); // Remove the parser as it is no longer needed and should not be exposed to clients

            delete this.parser;
          } // make XmlDocument inherit XmlElement's methods


          extend(XmlDocument.prototype, XmlElement.prototype);

          XmlDocument.prototype._opentag = function (tag) {
            if (typeof this.children === 'undefined') // the first tag we encounter should be the root - we'll "become" the root XmlElement
              XmlElement.call(this, tag);else // all other tags will be the root element's children
              XmlElement.prototype._opentag.apply(this, arguments);
          };

          XmlDocument.prototype._doctype = function (doctype) {
            this.doctype += doctype;
          }; // file-scoped global stack of delegates


          var delegates = null;
          /*
          Helper functions
          */

          function addParserEvents(parser) {
            parser.onopentag = parser_opentag;
            parser.onclosetag = parser_closetag;
            parser.ontext = parser_text;
            parser.oncdata = parser_cdata;
            parser.oncomment = parser_comment;
            parser.ondoctype = parser_doctype;
            parser.onerror = parser_error;
          } // create these closures and cache them by keeping them file-scoped


          function parser_opentag() {
            delegates[0] && delegates[0]._opentag.apply(delegates[0], arguments);
          }

          function parser_closetag() {
            delegates[0] && delegates[0]._closetag.apply(delegates[0], arguments);
          }

          function parser_text() {
            delegates[0] && delegates[0]._text.apply(delegates[0], arguments);
          }

          function parser_cdata() {
            delegates[0] && delegates[0]._cdata.apply(delegates[0], arguments);
          }

          function parser_comment() {
            delegates[0] && delegates[0]._comment.apply(delegates[0], arguments);
          }

          function parser_doctype() {
            delegates[0] && delegates[0]._doctype.apply(delegates[0], arguments);
          }

          function parser_error() {
            delegates[0] && delegates[0]._error.apply(delegates[0], arguments);
          } // a relatively standard extend method


          function extend(destination, source) {
            for (var prop in source) {
              if (source.hasOwnProperty(prop)) destination[prop] = source[prop];
            }
          } // escapes XML entities like "<", "&", etc.


          function escapeXML(value) {
            return value.toString().replace(/&/g, '&amp;').replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/'/g, '&apos;').replace(/"/g, '&quot;');
          } // formats some text for debugging given a few options


          function formatText(text, options) {
            var finalText = text;
            if (options && options.trimmed && text.length > 25) finalText = finalText.substring(0, 25).trim() + "…";
            if (!(options && options.preserveWhitespace)) finalText = finalText.trim();
            return finalText;
          } // Are we being used in a Node-like environment?


          if (true && module.exports && !global.xmldocAssumeBrowser) module.exports.XmlDocument = XmlDocument;else this.XmlDocument = XmlDocument;
        })();
        /* WEBPACK VAR INJECTION */

      }).call(this, __webpack_require__(24));
      /***/
    },
    /* 545 */

    /***/
    function (module, exports, __webpack_require__) {
      /* WEBPACK VAR INJECTION */
      (function (Buffer) {
        ;

        (function (sax) {
          // wrapper for non-node envs
          sax.parser = function (strict, opt) {
            return new SAXParser(strict, opt);
          };

          sax.SAXParser = SAXParser;
          sax.SAXStream = SAXStream;
          sax.createStream = createStream; // When we pass the MAX_BUFFER_LENGTH position, start checking for buffer overruns.
          // When we check, schedule the next check for MAX_BUFFER_LENGTH - (max(buffer lengths)),
          // since that's the earliest that a buffer overrun could occur.  This way, checks are
          // as rare as required, but as often as necessary to ensure never crossing this bound.
          // Furthermore, buffers are only tested at most once per write(), so passing a very
          // large string into write() might have undesirable effects, but this is manageable by
          // the caller, so it is assumed to be safe.  Thus, a call to write() may, in the extreme
          // edge case, result in creating at most one complete copy of the string passed in.
          // Set to Infinity to have unlimited buffers.

          sax.MAX_BUFFER_LENGTH = 64 * 1024;
          var buffers = ['comment', 'sgmlDecl', 'textNode', 'tagName', 'doctype', 'procInstName', 'procInstBody', 'entity', 'attribName', 'attribValue', 'cdata', 'script'];
          sax.EVENTS = ['text', 'processinginstruction', 'sgmldeclaration', 'doctype', 'comment', 'opentagstart', 'attribute', 'opentag', 'closetag', 'opencdata', 'cdata', 'closecdata', 'error', 'end', 'ready', 'script', 'opennamespace', 'closenamespace'];

          function SAXParser(strict, opt) {
            if (!(this instanceof SAXParser)) {
              return new SAXParser(strict, opt);
            }

            var parser = this;
            clearBuffers(parser);
            parser.q = parser.c = '';
            parser.bufferCheckPosition = sax.MAX_BUFFER_LENGTH;
            parser.opt = opt || {};
            parser.opt.lowercase = parser.opt.lowercase || parser.opt.lowercasetags;
            parser.looseCase = parser.opt.lowercase ? 'toLowerCase' : 'toUpperCase';
            parser.tags = [];
            parser.closed = parser.closedRoot = parser.sawRoot = false;
            parser.tag = parser.error = null;
            parser.strict = !!strict;
            parser.noscript = !!(strict || parser.opt.noscript);
            parser.state = S.BEGIN;
            parser.strictEntities = parser.opt.strictEntities;
            parser.ENTITIES = parser.strictEntities ? Object.create(sax.XML_ENTITIES) : Object.create(sax.ENTITIES);
            parser.attribList = []; // namespaces form a prototype chain.
            // it always points at the current tag,
            // which protos to its parent tag.

            if (parser.opt.xmlns) {
              parser.ns = Object.create(rootNS);
            } // mostly just for error reporting


            parser.trackPosition = parser.opt.position !== false;

            if (parser.trackPosition) {
              parser.position = parser.line = parser.column = 0;
            }

            emit(parser, 'onready');
          }

          if (!Object.create) {
            Object.create = function (o) {
              function F() {}

              F.prototype = o;
              var newf = new F();
              return newf;
            };
          }

          if (!Object.keys) {
            Object.keys = function (o) {
              var a = [];

              for (var i in o) {
                if (o.hasOwnProperty(i)) a.push(i);
              }

              return a;
            };
          }

          function checkBufferLength(parser) {
            var maxAllowed = Math.max(sax.MAX_BUFFER_LENGTH, 10);
            var maxActual = 0;

            for (var i = 0, l = buffers.length; i < l; i++) {
              var len = parser[buffers[i]].length;

              if (len > maxAllowed) {
                // Text/cdata nodes can get big, and since they're buffered,
                // we can get here under normal conditions.
                // Avoid issues by emitting the text node now,
                // so at least it won't get any bigger.
                switch (buffers[i]) {
                  case 'textNode':
                    closeText(parser);
                    break;

                  case 'cdata':
                    emitNode(parser, 'oncdata', parser.cdata);
                    parser.cdata = '';
                    break;

                  case 'script':
                    emitNode(parser, 'onscript', parser.script);
                    parser.script = '';
                    break;

                  default:
                    error(parser, 'Max buffer length exceeded: ' + buffers[i]);
                }
              }

              maxActual = Math.max(maxActual, len);
            } // schedule the next check for the earliest possible buffer overrun.


            var m = sax.MAX_BUFFER_LENGTH - maxActual;
            parser.bufferCheckPosition = m + parser.position;
          }

          function clearBuffers(parser) {
            for (var i = 0, l = buffers.length; i < l; i++) {
              parser[buffers[i]] = '';
            }
          }

          function flushBuffers(parser) {
            closeText(parser);

            if (parser.cdata !== '') {
              emitNode(parser, 'oncdata', parser.cdata);
              parser.cdata = '';
            }

            if (parser.script !== '') {
              emitNode(parser, 'onscript', parser.script);
              parser.script = '';
            }
          }

          SAXParser.prototype = {
            end: function end() {
              _end(this);
            },
            write: write,
            resume: function resume() {
              this.error = null;
              return this;
            },
            close: function close() {
              return this.write(null);
            },
            flush: function flush() {
              flushBuffers(this);
            }
          };
          var Stream;

          try {
            Stream = __webpack_require__(121).Stream;
          } catch (ex) {
            Stream = function Stream() {};
          }

          var streamWraps = sax.EVENTS.filter(function (ev) {
            return ev !== 'error' && ev !== 'end';
          });

          function createStream(strict, opt) {
            return new SAXStream(strict, opt);
          }

          function SAXStream(strict, opt) {
            if (!(this instanceof SAXStream)) {
              return new SAXStream(strict, opt);
            }

            Stream.apply(this);
            this._parser = new SAXParser(strict, opt);
            this.writable = true;
            this.readable = true;
            var me = this;

            this._parser.onend = function () {
              me.emit('end');
            };

            this._parser.onerror = function (er) {
              me.emit('error', er); // if didn't throw, then means error was handled.
              // go ahead and clear error, so we can write again.

              me._parser.error = null;
            };

            this._decoder = null;
            streamWraps.forEach(function (ev) {
              Object.defineProperty(me, 'on' + ev, {
                get: function get() {
                  return me._parser['on' + ev];
                },
                set: function set(h) {
                  if (!h) {
                    me.removeAllListeners(ev);
                    me._parser['on' + ev] = h;
                    return h;
                  }

                  me.on(ev, h);
                },
                enumerable: true,
                configurable: false
              });
            });
          }

          SAXStream.prototype = Object.create(Stream.prototype, {
            constructor: {
              value: SAXStream
            }
          });

          SAXStream.prototype.write = function (data) {
            if (typeof Buffer === 'function' && typeof Buffer.isBuffer === 'function' && Buffer.isBuffer(data)) {
              if (!this._decoder) {
                var SD = __webpack_require__(125).StringDecoder;

                this._decoder = new SD('utf8');
              }

              data = this._decoder.write(data);
            }

            this._parser.write(data.toString());

            this.emit('data', data);
            return true;
          };

          SAXStream.prototype.end = function (chunk) {
            if (chunk && chunk.length) {
              this.write(chunk);
            }

            this._parser.end();

            return true;
          };

          SAXStream.prototype.on = function (ev, handler) {
            var me = this;

            if (!me._parser['on' + ev] && streamWraps.indexOf(ev) !== -1) {
              me._parser['on' + ev] = function () {
                var args = arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments);
                args.splice(0, 0, ev);
                me.emit.apply(me, args);
              };
            }

            return Stream.prototype.on.call(me, ev, handler);
          }; // this really needs to be replaced with character classes.
          // XML allows all manner of ridiculous numbers and digits.


          var CDATA = '[CDATA[';
          var DOCTYPE = 'DOCTYPE';
          var XML_NAMESPACE = 'http://www.w3.org/XML/1998/namespace';
          var XMLNS_NAMESPACE = 'http://www.w3.org/2000/xmlns/';
          var rootNS = {
            xml: XML_NAMESPACE,
            xmlns: XMLNS_NAMESPACE
          }; // http://www.w3.org/TR/REC-xml/#NT-NameStartChar
          // This implementation works on strings, a single character at a time
          // as such, it cannot ever support astral-plane characters (10000-EFFFF)
          // without a significant breaking change to either this  parser, or the
          // JavaScript language.  Implementation of an emoji-capable xml parser
          // is left as an exercise for the reader.

          var nameStart = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/;
          var nameBody = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/;
          var entityStart = /[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/;
          var entityBody = /[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/;

          function isWhitespace(c) {
            return c === ' ' || c === '\n' || c === '\r' || c === '\t';
          }

          function isQuote(c) {
            return c === '"' || c === '\'';
          }

          function isAttribEnd(c) {
            return c === '>' || isWhitespace(c);
          }

          function isMatch(regex, c) {
            return regex.test(c);
          }

          function notMatch(regex, c) {
            return !isMatch(regex, c);
          }

          var S = 0;
          sax.STATE = {
            BEGIN: S++,
            // leading byte order mark or whitespace
            BEGIN_WHITESPACE: S++,
            // leading whitespace
            TEXT: S++,
            // general stuff
            TEXT_ENTITY: S++,
            // &amp and such.
            OPEN_WAKA: S++,
            // <
            SGML_DECL: S++,
            // <!BLARG
            SGML_DECL_QUOTED: S++,
            // <!BLARG foo "bar
            DOCTYPE: S++,
            // <!DOCTYPE
            DOCTYPE_QUOTED: S++,
            // <!DOCTYPE "//blah
            DOCTYPE_DTD: S++,
            // <!DOCTYPE "//blah" [ ...
            DOCTYPE_DTD_QUOTED: S++,
            // <!DOCTYPE "//blah" [ "foo
            COMMENT_STARTING: S++,
            // <!-
            COMMENT: S++,
            // <!--
            COMMENT_ENDING: S++,
            // <!-- blah -
            COMMENT_ENDED: S++,
            // <!-- blah --
            CDATA: S++,
            // <![CDATA[ something
            CDATA_ENDING: S++,
            // ]
            CDATA_ENDING_2: S++,
            // ]]
            PROC_INST: S++,
            // <?hi
            PROC_INST_BODY: S++,
            // <?hi there
            PROC_INST_ENDING: S++,
            // <?hi "there" ?
            OPEN_TAG: S++,
            // <strong
            OPEN_TAG_SLASH: S++,
            // <strong /
            ATTRIB: S++,
            // <a
            ATTRIB_NAME: S++,
            // <a foo
            ATTRIB_NAME_SAW_WHITE: S++,
            // <a foo _
            ATTRIB_VALUE: S++,
            // <a foo=
            ATTRIB_VALUE_QUOTED: S++,
            // <a foo="bar
            ATTRIB_VALUE_CLOSED: S++,
            // <a foo="bar"
            ATTRIB_VALUE_UNQUOTED: S++,
            // <a foo=bar
            ATTRIB_VALUE_ENTITY_Q: S++,
            // <foo bar="&quot;"
            ATTRIB_VALUE_ENTITY_U: S++,
            // <foo bar=&quot
            CLOSE_TAG: S++,
            // </a
            CLOSE_TAG_SAW_WHITE: S++,
            // </a   >
            SCRIPT: S++,
            // <script> ...
            SCRIPT_ENDING: S++ // <script> ... <

          };
          sax.XML_ENTITIES = {
            'amp': '&',
            'gt': '>',
            'lt': '<',
            'quot': '"',
            'apos': "'"
          };
          sax.ENTITIES = {
            'amp': '&',
            'gt': '>',
            'lt': '<',
            'quot': '"',
            'apos': "'",
            'AElig': 198,
            'Aacute': 193,
            'Acirc': 194,
            'Agrave': 192,
            'Aring': 197,
            'Atilde': 195,
            'Auml': 196,
            'Ccedil': 199,
            'ETH': 208,
            'Eacute': 201,
            'Ecirc': 202,
            'Egrave': 200,
            'Euml': 203,
            'Iacute': 205,
            'Icirc': 206,
            'Igrave': 204,
            'Iuml': 207,
            'Ntilde': 209,
            'Oacute': 211,
            'Ocirc': 212,
            'Ograve': 210,
            'Oslash': 216,
            'Otilde': 213,
            'Ouml': 214,
            'THORN': 222,
            'Uacute': 218,
            'Ucirc': 219,
            'Ugrave': 217,
            'Uuml': 220,
            'Yacute': 221,
            'aacute': 225,
            'acirc': 226,
            'aelig': 230,
            'agrave': 224,
            'aring': 229,
            'atilde': 227,
            'auml': 228,
            'ccedil': 231,
            'eacute': 233,
            'ecirc': 234,
            'egrave': 232,
            'eth': 240,
            'euml': 235,
            'iacute': 237,
            'icirc': 238,
            'igrave': 236,
            'iuml': 239,
            'ntilde': 241,
            'oacute': 243,
            'ocirc': 244,
            'ograve': 242,
            'oslash': 248,
            'otilde': 245,
            'ouml': 246,
            'szlig': 223,
            'thorn': 254,
            'uacute': 250,
            'ucirc': 251,
            'ugrave': 249,
            'uuml': 252,
            'yacute': 253,
            'yuml': 255,
            'copy': 169,
            'reg': 174,
            'nbsp': 160,
            'iexcl': 161,
            'cent': 162,
            'pound': 163,
            'curren': 164,
            'yen': 165,
            'brvbar': 166,
            'sect': 167,
            'uml': 168,
            'ordf': 170,
            'laquo': 171,
            'not': 172,
            'shy': 173,
            'macr': 175,
            'deg': 176,
            'plusmn': 177,
            'sup1': 185,
            'sup2': 178,
            'sup3': 179,
            'acute': 180,
            'micro': 181,
            'para': 182,
            'middot': 183,
            'cedil': 184,
            'ordm': 186,
            'raquo': 187,
            'frac14': 188,
            'frac12': 189,
            'frac34': 190,
            'iquest': 191,
            'times': 215,
            'divide': 247,
            'OElig': 338,
            'oelig': 339,
            'Scaron': 352,
            'scaron': 353,
            'Yuml': 376,
            'fnof': 402,
            'circ': 710,
            'tilde': 732,
            'Alpha': 913,
            'Beta': 914,
            'Gamma': 915,
            'Delta': 916,
            'Epsilon': 917,
            'Zeta': 918,
            'Eta': 919,
            'Theta': 920,
            'Iota': 921,
            'Kappa': 922,
            'Lambda': 923,
            'Mu': 924,
            'Nu': 925,
            'Xi': 926,
            'Omicron': 927,
            'Pi': 928,
            'Rho': 929,
            'Sigma': 931,
            'Tau': 932,
            'Upsilon': 933,
            'Phi': 934,
            'Chi': 935,
            'Psi': 936,
            'Omega': 937,
            'alpha': 945,
            'beta': 946,
            'gamma': 947,
            'delta': 948,
            'epsilon': 949,
            'zeta': 950,
            'eta': 951,
            'theta': 952,
            'iota': 953,
            'kappa': 954,
            'lambda': 955,
            'mu': 956,
            'nu': 957,
            'xi': 958,
            'omicron': 959,
            'pi': 960,
            'rho': 961,
            'sigmaf': 962,
            'sigma': 963,
            'tau': 964,
            'upsilon': 965,
            'phi': 966,
            'chi': 967,
            'psi': 968,
            'omega': 969,
            'thetasym': 977,
            'upsih': 978,
            'piv': 982,
            'ensp': 8194,
            'emsp': 8195,
            'thinsp': 8201,
            'zwnj': 8204,
            'zwj': 8205,
            'lrm': 8206,
            'rlm': 8207,
            'ndash': 8211,
            'mdash': 8212,
            'lsquo': 8216,
            'rsquo': 8217,
            'sbquo': 8218,
            'ldquo': 8220,
            'rdquo': 8221,
            'bdquo': 8222,
            'dagger': 8224,
            'Dagger': 8225,
            'bull': 8226,
            'hellip': 8230,
            'permil': 8240,
            'prime': 8242,
            'Prime': 8243,
            'lsaquo': 8249,
            'rsaquo': 8250,
            'oline': 8254,
            'frasl': 8260,
            'euro': 8364,
            'image': 8465,
            'weierp': 8472,
            'real': 8476,
            'trade': 8482,
            'alefsym': 8501,
            'larr': 8592,
            'uarr': 8593,
            'rarr': 8594,
            'darr': 8595,
            'harr': 8596,
            'crarr': 8629,
            'lArr': 8656,
            'uArr': 8657,
            'rArr': 8658,
            'dArr': 8659,
            'hArr': 8660,
            'forall': 8704,
            'part': 8706,
            'exist': 8707,
            'empty': 8709,
            'nabla': 8711,
            'isin': 8712,
            'notin': 8713,
            'ni': 8715,
            'prod': 8719,
            'sum': 8721,
            'minus': 8722,
            'lowast': 8727,
            'radic': 8730,
            'prop': 8733,
            'infin': 8734,
            'ang': 8736,
            'and': 8743,
            'or': 8744,
            'cap': 8745,
            'cup': 8746,
            'int': 8747,
            'there4': 8756,
            'sim': 8764,
            'cong': 8773,
            'asymp': 8776,
            'ne': 8800,
            'equiv': 8801,
            'le': 8804,
            'ge': 8805,
            'sub': 8834,
            'sup': 8835,
            'nsub': 8836,
            'sube': 8838,
            'supe': 8839,
            'oplus': 8853,
            'otimes': 8855,
            'perp': 8869,
            'sdot': 8901,
            'lceil': 8968,
            'rceil': 8969,
            'lfloor': 8970,
            'rfloor': 8971,
            'lang': 9001,
            'rang': 9002,
            'loz': 9674,
            'spades': 9824,
            'clubs': 9827,
            'hearts': 9829,
            'diams': 9830
          };
          Object.keys(sax.ENTITIES).forEach(function (key) {
            var e = sax.ENTITIES[key];
            var s = typeof e === 'number' ? String.fromCharCode(e) : e;
            sax.ENTITIES[key] = s;
          });

          for (var s in sax.STATE) {
            sax.STATE[sax.STATE[s]] = s;
          } // shorthand


          S = sax.STATE;

          function emit(parser, event, data) {
            parser[event] && parser[event](data);
          }

          function emitNode(parser, nodeType, data) {
            if (parser.textNode) closeText(parser);
            emit(parser, nodeType, data);
          }

          function closeText(parser) {
            parser.textNode = textopts(parser.opt, parser.textNode);
            if (parser.textNode) emit(parser, 'ontext', parser.textNode);
            parser.textNode = '';
          }

          function textopts(opt, text) {
            if (opt.trim) text = text.trim();
            if (opt.normalize) text = text.replace(/\s+/g, ' ');
            return text;
          }

          function error(parser, er) {
            closeText(parser);

            if (parser.trackPosition) {
              er += '\nLine: ' + parser.line + '\nColumn: ' + parser.column + '\nChar: ' + parser.c;
            }

            er = new Error(er);
            parser.error = er;
            emit(parser, 'onerror', er);
            return parser;
          }

          function _end(parser) {
            if (parser.sawRoot && !parser.closedRoot) strictFail(parser, 'Unclosed root tag');

            if (parser.state !== S.BEGIN && parser.state !== S.BEGIN_WHITESPACE && parser.state !== S.TEXT) {
              error(parser, 'Unexpected end');
            }

            closeText(parser);
            parser.c = '';
            parser.closed = true;
            emit(parser, 'onend');
            SAXParser.call(parser, parser.strict, parser.opt);
            return parser;
          }

          function strictFail(parser, message) {
            if (_typeof4(parser) !== 'object' || !(parser instanceof SAXParser)) {
              throw new Error('bad call to strictFail');
            }

            if (parser.strict) {
              error(parser, message);
            }
          }

          function newTag(parser) {
            if (!parser.strict) parser.tagName = parser.tagName[parser.looseCase]();
            var parent = parser.tags[parser.tags.length - 1] || parser;
            var tag = parser.tag = {
              name: parser.tagName,
              attributes: {}
            }; // will be overridden if tag contails an xmlns="foo" or xmlns:foo="bar"

            if (parser.opt.xmlns) {
              tag.ns = parent.ns;
            }

            parser.attribList.length = 0;
            emitNode(parser, 'onopentagstart', tag);
          }

          function qname(name, attribute) {
            var i = name.indexOf(':');
            var qualName = i < 0 ? ['', name] : name.split(':');
            var prefix = qualName[0];
            var local = qualName[1]; // <x "xmlns"="http://foo">

            if (attribute && name === 'xmlns') {
              prefix = 'xmlns';
              local = '';
            }

            return {
              prefix: prefix,
              local: local
            };
          }

          function attrib(parser) {
            if (!parser.strict) {
              parser.attribName = parser.attribName[parser.looseCase]();
            }

            if (parser.attribList.indexOf(parser.attribName) !== -1 || parser.tag.attributes.hasOwnProperty(parser.attribName)) {
              parser.attribName = parser.attribValue = '';
              return;
            }

            if (parser.opt.xmlns) {
              var qn = qname(parser.attribName, true);
              var prefix = qn.prefix;
              var local = qn.local;

              if (prefix === 'xmlns') {
                // namespace binding attribute. push the binding into scope
                if (local === 'xml' && parser.attribValue !== XML_NAMESPACE) {
                  strictFail(parser, 'xml: prefix must be bound to ' + XML_NAMESPACE + '\n' + 'Actual: ' + parser.attribValue);
                } else if (local === 'xmlns' && parser.attribValue !== XMLNS_NAMESPACE) {
                  strictFail(parser, 'xmlns: prefix must be bound to ' + XMLNS_NAMESPACE + '\n' + 'Actual: ' + parser.attribValue);
                } else {
                  var tag = parser.tag;
                  var parent = parser.tags[parser.tags.length - 1] || parser;

                  if (tag.ns === parent.ns) {
                    tag.ns = Object.create(parent.ns);
                  }

                  tag.ns[local] = parser.attribValue;
                }
              } // defer onattribute events until all attributes have been seen
              // so any new bindings can take effect. preserve attribute order
              // so deferred events can be emitted in document order


              parser.attribList.push([parser.attribName, parser.attribValue]);
            } else {
              // in non-xmlns mode, we can emit the event right away
              parser.tag.attributes[parser.attribName] = parser.attribValue;
              emitNode(parser, 'onattribute', {
                name: parser.attribName,
                value: parser.attribValue
              });
            }

            parser.attribName = parser.attribValue = '';
          }

          function openTag(parser, selfClosing) {
            if (parser.opt.xmlns) {
              // emit namespace binding events
              var tag = parser.tag; // add namespace info to tag

              var qn = qname(parser.tagName);
              tag.prefix = qn.prefix;
              tag.local = qn.local;
              tag.uri = tag.ns[qn.prefix] || '';

              if (tag.prefix && !tag.uri) {
                strictFail(parser, 'Unbound namespace prefix: ' + JSON.stringify(parser.tagName));
                tag.uri = qn.prefix;
              }

              var parent = parser.tags[parser.tags.length - 1] || parser;

              if (tag.ns && parent.ns !== tag.ns) {
                Object.keys(tag.ns).forEach(function (p) {
                  emitNode(parser, 'onopennamespace', {
                    prefix: p,
                    uri: tag.ns[p]
                  });
                });
              } // handle deferred onattribute events
              // Note: do not apply default ns to attributes:
              //   http://www.w3.org/TR/REC-xml-names/#defaulting


              for (var i = 0, l = parser.attribList.length; i < l; i++) {
                var nv = parser.attribList[i];
                var name = nv[0];
                var value = nv[1];
                var qualName = qname(name, true);
                var prefix = qualName.prefix;
                var local = qualName.local;
                var uri = prefix === '' ? '' : tag.ns[prefix] || '';
                var a = {
                  name: name,
                  value: value,
                  prefix: prefix,
                  local: local,
                  uri: uri
                }; // if there's any attributes with an undefined namespace,
                // then fail on them now.

                if (prefix && prefix !== 'xmlns' && !uri) {
                  strictFail(parser, 'Unbound namespace prefix: ' + JSON.stringify(prefix));
                  a.uri = prefix;
                }

                parser.tag.attributes[name] = a;
                emitNode(parser, 'onattribute', a);
              }

              parser.attribList.length = 0;
            }

            parser.tag.isSelfClosing = !!selfClosing; // process the tag

            parser.sawRoot = true;
            parser.tags.push(parser.tag);
            emitNode(parser, 'onopentag', parser.tag);

            if (!selfClosing) {
              // special case for <script> in non-strict mode.
              if (!parser.noscript && parser.tagName.toLowerCase() === 'script') {
                parser.state = S.SCRIPT;
              } else {
                parser.state = S.TEXT;
              }

              parser.tag = null;
              parser.tagName = '';
            }

            parser.attribName = parser.attribValue = '';
            parser.attribList.length = 0;
          }

          function closeTag(parser) {
            if (!parser.tagName) {
              strictFail(parser, 'Weird empty close tag.');
              parser.textNode += '</>';
              parser.state = S.TEXT;
              return;
            }

            if (parser.script) {
              if (parser.tagName !== 'script') {
                parser.script += '</' + parser.tagName + '>';
                parser.tagName = '';
                parser.state = S.SCRIPT;
                return;
              }

              emitNode(parser, 'onscript', parser.script);
              parser.script = '';
            } // first make sure that the closing tag actually exists.
            // <a><b></c></b></a> will close everything, otherwise.


            var t = parser.tags.length;
            var tagName = parser.tagName;

            if (!parser.strict) {
              tagName = tagName[parser.looseCase]();
            }

            var closeTo = tagName;

            while (t--) {
              var close = parser.tags[t];

              if (close.name !== closeTo) {
                // fail the first time in strict mode
                strictFail(parser, 'Unexpected close tag');
              } else {
                break;
              }
            } // didn't find it.  we already failed for strict, so just abort.


            if (t < 0) {
              strictFail(parser, 'Unmatched closing tag: ' + parser.tagName);
              parser.textNode += '</' + parser.tagName + '>';
              parser.state = S.TEXT;
              return;
            }

            parser.tagName = tagName;
            var s = parser.tags.length;

            while (s-- > t) {
              var tag = parser.tag = parser.tags.pop();
              parser.tagName = parser.tag.name;
              emitNode(parser, 'onclosetag', parser.tagName);
              var x = {};

              for (var i in tag.ns) {
                x[i] = tag.ns[i];
              }

              var parent = parser.tags[parser.tags.length - 1] || parser;

              if (parser.opt.xmlns && tag.ns !== parent.ns) {
                // remove namespace bindings introduced by tag
                Object.keys(tag.ns).forEach(function (p) {
                  var n = tag.ns[p];
                  emitNode(parser, 'onclosenamespace', {
                    prefix: p,
                    uri: n
                  });
                });
              }
            }

            if (t === 0) parser.closedRoot = true;
            parser.tagName = parser.attribValue = parser.attribName = '';
            parser.attribList.length = 0;
            parser.state = S.TEXT;
          }

          function parseEntity(parser) {
            var entity = parser.entity;
            var entityLC = entity.toLowerCase();
            var num;
            var numStr = '';

            if (parser.ENTITIES[entity]) {
              return parser.ENTITIES[entity];
            }

            if (parser.ENTITIES[entityLC]) {
              return parser.ENTITIES[entityLC];
            }

            entity = entityLC;

            if (entity.charAt(0) === '#') {
              if (entity.charAt(1) === 'x') {
                entity = entity.slice(2);
                num = parseInt(entity, 16);
                numStr = num.toString(16);
              } else {
                entity = entity.slice(1);
                num = parseInt(entity, 10);
                numStr = num.toString(10);
              }
            }

            entity = entity.replace(/^0+/, '');

            if (isNaN(num) || numStr.toLowerCase() !== entity) {
              strictFail(parser, 'Invalid character entity');
              return '&' + parser.entity + ';';
            }

            return String.fromCodePoint(num);
          }

          function beginWhiteSpace(parser, c) {
            if (c === '<') {
              parser.state = S.OPEN_WAKA;
              parser.startTagPosition = parser.position;
            } else if (!isWhitespace(c)) {
              // have to process this as a text node.
              // weird, but happens.
              strictFail(parser, 'Non-whitespace before first tag.');
              parser.textNode = c;
              parser.state = S.TEXT;
            }
          }

          function charAt(chunk, i) {
            var result = '';

            if (i < chunk.length) {
              result = chunk.charAt(i);
            }

            return result;
          }

          function write(chunk) {
            var parser = this;

            if (this.error) {
              throw this.error;
            }

            if (parser.closed) {
              return error(parser, 'Cannot write after close. Assign an onready handler.');
            }

            if (chunk === null) {
              return _end(parser);
            }

            if (_typeof4(chunk) === 'object') {
              chunk = chunk.toString();
            }

            var i = 0;
            var c = '';

            while (true) {
              c = charAt(chunk, i++);
              parser.c = c;

              if (!c) {
                break;
              }

              if (parser.trackPosition) {
                parser.position++;

                if (c === '\n') {
                  parser.line++;
                  parser.column = 0;
                } else {
                  parser.column++;
                }
              }

              switch (parser.state) {
                case S.BEGIN:
                  parser.state = S.BEGIN_WHITESPACE;

                  if (c === "\uFEFF") {
                    continue;
                  }

                  beginWhiteSpace(parser, c);
                  continue;

                case S.BEGIN_WHITESPACE:
                  beginWhiteSpace(parser, c);
                  continue;

                case S.TEXT:
                  if (parser.sawRoot && !parser.closedRoot) {
                    var starti = i - 1;

                    while (c && c !== '<' && c !== '&') {
                      c = charAt(chunk, i++);

                      if (c && parser.trackPosition) {
                        parser.position++;

                        if (c === '\n') {
                          parser.line++;
                          parser.column = 0;
                        } else {
                          parser.column++;
                        }
                      }
                    }

                    parser.textNode += chunk.substring(starti, i - 1);
                  }

                  if (c === '<' && !(parser.sawRoot && parser.closedRoot && !parser.strict)) {
                    parser.state = S.OPEN_WAKA;
                    parser.startTagPosition = parser.position;
                  } else {
                    if (!isWhitespace(c) && (!parser.sawRoot || parser.closedRoot)) {
                      strictFail(parser, 'Text data outside of root node.');
                    }

                    if (c === '&') {
                      parser.state = S.TEXT_ENTITY;
                    } else {
                      parser.textNode += c;
                    }
                  }

                  continue;

                case S.SCRIPT:
                  // only non-strict
                  if (c === '<') {
                    parser.state = S.SCRIPT_ENDING;
                  } else {
                    parser.script += c;
                  }

                  continue;

                case S.SCRIPT_ENDING:
                  if (c === '/') {
                    parser.state = S.CLOSE_TAG;
                  } else {
                    parser.script += '<' + c;
                    parser.state = S.SCRIPT;
                  }

                  continue;

                case S.OPEN_WAKA:
                  // either a /, ?, !, or text is coming next.
                  if (c === '!') {
                    parser.state = S.SGML_DECL;
                    parser.sgmlDecl = '';
                  } else if (isWhitespace(c)) {// wait for it...
                  } else if (isMatch(nameStart, c)) {
                    parser.state = S.OPEN_TAG;
                    parser.tagName = c;
                  } else if (c === '/') {
                    parser.state = S.CLOSE_TAG;
                    parser.tagName = '';
                  } else if (c === '?') {
                    parser.state = S.PROC_INST;
                    parser.procInstName = parser.procInstBody = '';
                  } else {
                    strictFail(parser, 'Unencoded <'); // if there was some whitespace, then add that in.

                    if (parser.startTagPosition + 1 < parser.position) {
                      var pad = parser.position - parser.startTagPosition;
                      c = new Array(pad).join(' ') + c;
                    }

                    parser.textNode += '<' + c;
                    parser.state = S.TEXT;
                  }

                  continue;

                case S.SGML_DECL:
                  if ((parser.sgmlDecl + c).toUpperCase() === CDATA) {
                    emitNode(parser, 'onopencdata');
                    parser.state = S.CDATA;
                    parser.sgmlDecl = '';
                    parser.cdata = '';
                  } else if (parser.sgmlDecl + c === '--') {
                    parser.state = S.COMMENT;
                    parser.comment = '';
                    parser.sgmlDecl = '';
                  } else if ((parser.sgmlDecl + c).toUpperCase() === DOCTYPE) {
                    parser.state = S.DOCTYPE;

                    if (parser.doctype || parser.sawRoot) {
                      strictFail(parser, 'Inappropriately located doctype declaration');
                    }

                    parser.doctype = '';
                    parser.sgmlDecl = '';
                  } else if (c === '>') {
                    emitNode(parser, 'onsgmldeclaration', parser.sgmlDecl);
                    parser.sgmlDecl = '';
                    parser.state = S.TEXT;
                  } else if (isQuote(c)) {
                    parser.state = S.SGML_DECL_QUOTED;
                    parser.sgmlDecl += c;
                  } else {
                    parser.sgmlDecl += c;
                  }

                  continue;

                case S.SGML_DECL_QUOTED:
                  if (c === parser.q) {
                    parser.state = S.SGML_DECL;
                    parser.q = '';
                  }

                  parser.sgmlDecl += c;
                  continue;

                case S.DOCTYPE:
                  if (c === '>') {
                    parser.state = S.TEXT;
                    emitNode(parser, 'ondoctype', parser.doctype);
                    parser.doctype = true; // just remember that we saw it.
                  } else {
                    parser.doctype += c;

                    if (c === '[') {
                      parser.state = S.DOCTYPE_DTD;
                    } else if (isQuote(c)) {
                      parser.state = S.DOCTYPE_QUOTED;
                      parser.q = c;
                    }
                  }

                  continue;

                case S.DOCTYPE_QUOTED:
                  parser.doctype += c;

                  if (c === parser.q) {
                    parser.q = '';
                    parser.state = S.DOCTYPE;
                  }

                  continue;

                case S.DOCTYPE_DTD:
                  parser.doctype += c;

                  if (c === ']') {
                    parser.state = S.DOCTYPE;
                  } else if (isQuote(c)) {
                    parser.state = S.DOCTYPE_DTD_QUOTED;
                    parser.q = c;
                  }

                  continue;

                case S.DOCTYPE_DTD_QUOTED:
                  parser.doctype += c;

                  if (c === parser.q) {
                    parser.state = S.DOCTYPE_DTD;
                    parser.q = '';
                  }

                  continue;

                case S.COMMENT:
                  if (c === '-') {
                    parser.state = S.COMMENT_ENDING;
                  } else {
                    parser.comment += c;
                  }

                  continue;

                case S.COMMENT_ENDING:
                  if (c === '-') {
                    parser.state = S.COMMENT_ENDED;
                    parser.comment = textopts(parser.opt, parser.comment);

                    if (parser.comment) {
                      emitNode(parser, 'oncomment', parser.comment);
                    }

                    parser.comment = '';
                  } else {
                    parser.comment += '-' + c;
                    parser.state = S.COMMENT;
                  }

                  continue;

                case S.COMMENT_ENDED:
                  if (c !== '>') {
                    strictFail(parser, 'Malformed comment'); // allow <!-- blah -- bloo --> in non-strict mode,
                    // which is a comment of " blah -- bloo "

                    parser.comment += '--' + c;
                    parser.state = S.COMMENT;
                  } else {
                    parser.state = S.TEXT;
                  }

                  continue;

                case S.CDATA:
                  if (c === ']') {
                    parser.state = S.CDATA_ENDING;
                  } else {
                    parser.cdata += c;
                  }

                  continue;

                case S.CDATA_ENDING:
                  if (c === ']') {
                    parser.state = S.CDATA_ENDING_2;
                  } else {
                    parser.cdata += ']' + c;
                    parser.state = S.CDATA;
                  }

                  continue;

                case S.CDATA_ENDING_2:
                  if (c === '>') {
                    if (parser.cdata) {
                      emitNode(parser, 'oncdata', parser.cdata);
                    }

                    emitNode(parser, 'onclosecdata');
                    parser.cdata = '';
                    parser.state = S.TEXT;
                  } else if (c === ']') {
                    parser.cdata += ']';
                  } else {
                    parser.cdata += ']]' + c;
                    parser.state = S.CDATA;
                  }

                  continue;

                case S.PROC_INST:
                  if (c === '?') {
                    parser.state = S.PROC_INST_ENDING;
                  } else if (isWhitespace(c)) {
                    parser.state = S.PROC_INST_BODY;
                  } else {
                    parser.procInstName += c;
                  }

                  continue;

                case S.PROC_INST_BODY:
                  if (!parser.procInstBody && isWhitespace(c)) {
                    continue;
                  } else if (c === '?') {
                    parser.state = S.PROC_INST_ENDING;
                  } else {
                    parser.procInstBody += c;
                  }

                  continue;

                case S.PROC_INST_ENDING:
                  if (c === '>') {
                    emitNode(parser, 'onprocessinginstruction', {
                      name: parser.procInstName,
                      body: parser.procInstBody
                    });
                    parser.procInstName = parser.procInstBody = '';
                    parser.state = S.TEXT;
                  } else {
                    parser.procInstBody += '?' + c;
                    parser.state = S.PROC_INST_BODY;
                  }

                  continue;

                case S.OPEN_TAG:
                  if (isMatch(nameBody, c)) {
                    parser.tagName += c;
                  } else {
                    newTag(parser);

                    if (c === '>') {
                      openTag(parser);
                    } else if (c === '/') {
                      parser.state = S.OPEN_TAG_SLASH;
                    } else {
                      if (!isWhitespace(c)) {
                        strictFail(parser, 'Invalid character in tag name');
                      }

                      parser.state = S.ATTRIB;
                    }
                  }

                  continue;

                case S.OPEN_TAG_SLASH:
                  if (c === '>') {
                    openTag(parser, true);
                    closeTag(parser);
                  } else {
                    strictFail(parser, 'Forward-slash in opening tag not followed by >');
                    parser.state = S.ATTRIB;
                  }

                  continue;

                case S.ATTRIB:
                  // haven't read the attribute name yet.
                  if (isWhitespace(c)) {
                    continue;
                  } else if (c === '>') {
                    openTag(parser);
                  } else if (c === '/') {
                    parser.state = S.OPEN_TAG_SLASH;
                  } else if (isMatch(nameStart, c)) {
                    parser.attribName = c;
                    parser.attribValue = '';
                    parser.state = S.ATTRIB_NAME;
                  } else {
                    strictFail(parser, 'Invalid attribute name');
                  }

                  continue;

                case S.ATTRIB_NAME:
                  if (c === '=') {
                    parser.state = S.ATTRIB_VALUE;
                  } else if (c === '>') {
                    strictFail(parser, 'Attribute without value');
                    parser.attribValue = parser.attribName;
                    attrib(parser);
                    openTag(parser);
                  } else if (isWhitespace(c)) {
                    parser.state = S.ATTRIB_NAME_SAW_WHITE;
                  } else if (isMatch(nameBody, c)) {
                    parser.attribName += c;
                  } else {
                    strictFail(parser, 'Invalid attribute name');
                  }

                  continue;

                case S.ATTRIB_NAME_SAW_WHITE:
                  if (c === '=') {
                    parser.state = S.ATTRIB_VALUE;
                  } else if (isWhitespace(c)) {
                    continue;
                  } else {
                    strictFail(parser, 'Attribute without value');
                    parser.tag.attributes[parser.attribName] = '';
                    parser.attribValue = '';
                    emitNode(parser, 'onattribute', {
                      name: parser.attribName,
                      value: ''
                    });
                    parser.attribName = '';

                    if (c === '>') {
                      openTag(parser);
                    } else if (isMatch(nameStart, c)) {
                      parser.attribName = c;
                      parser.state = S.ATTRIB_NAME;
                    } else {
                      strictFail(parser, 'Invalid attribute name');
                      parser.state = S.ATTRIB;
                    }
                  }

                  continue;

                case S.ATTRIB_VALUE:
                  if (isWhitespace(c)) {
                    continue;
                  } else if (isQuote(c)) {
                    parser.q = c;
                    parser.state = S.ATTRIB_VALUE_QUOTED;
                  } else {
                    strictFail(parser, 'Unquoted attribute value');
                    parser.state = S.ATTRIB_VALUE_UNQUOTED;
                    parser.attribValue = c;
                  }

                  continue;

                case S.ATTRIB_VALUE_QUOTED:
                  if (c !== parser.q) {
                    if (c === '&') {
                      parser.state = S.ATTRIB_VALUE_ENTITY_Q;
                    } else {
                      parser.attribValue += c;
                    }

                    continue;
                  }

                  attrib(parser);
                  parser.q = '';
                  parser.state = S.ATTRIB_VALUE_CLOSED;
                  continue;

                case S.ATTRIB_VALUE_CLOSED:
                  if (isWhitespace(c)) {
                    parser.state = S.ATTRIB;
                  } else if (c === '>') {
                    openTag(parser);
                  } else if (c === '/') {
                    parser.state = S.OPEN_TAG_SLASH;
                  } else if (isMatch(nameStart, c)) {
                    strictFail(parser, 'No whitespace between attributes');
                    parser.attribName = c;
                    parser.attribValue = '';
                    parser.state = S.ATTRIB_NAME;
                  } else {
                    strictFail(parser, 'Invalid attribute name');
                  }

                  continue;

                case S.ATTRIB_VALUE_UNQUOTED:
                  if (!isAttribEnd(c)) {
                    if (c === '&') {
                      parser.state = S.ATTRIB_VALUE_ENTITY_U;
                    } else {
                      parser.attribValue += c;
                    }

                    continue;
                  }

                  attrib(parser);

                  if (c === '>') {
                    openTag(parser);
                  } else {
                    parser.state = S.ATTRIB;
                  }

                  continue;

                case S.CLOSE_TAG:
                  if (!parser.tagName) {
                    if (isWhitespace(c)) {
                      continue;
                    } else if (notMatch(nameStart, c)) {
                      if (parser.script) {
                        parser.script += '</' + c;
                        parser.state = S.SCRIPT;
                      } else {
                        strictFail(parser, 'Invalid tagname in closing tag.');
                      }
                    } else {
                      parser.tagName = c;
                    }
                  } else if (c === '>') {
                    closeTag(parser);
                  } else if (isMatch(nameBody, c)) {
                    parser.tagName += c;
                  } else if (parser.script) {
                    parser.script += '</' + parser.tagName;
                    parser.tagName = '';
                    parser.state = S.SCRIPT;
                  } else {
                    if (!isWhitespace(c)) {
                      strictFail(parser, 'Invalid tagname in closing tag');
                    }

                    parser.state = S.CLOSE_TAG_SAW_WHITE;
                  }

                  continue;

                case S.CLOSE_TAG_SAW_WHITE:
                  if (isWhitespace(c)) {
                    continue;
                  }

                  if (c === '>') {
                    closeTag(parser);
                  } else {
                    strictFail(parser, 'Invalid characters in closing tag');
                  }

                  continue;

                case S.TEXT_ENTITY:
                case S.ATTRIB_VALUE_ENTITY_Q:
                case S.ATTRIB_VALUE_ENTITY_U:
                  var returnState;
                  var buffer;

                  switch (parser.state) {
                    case S.TEXT_ENTITY:
                      returnState = S.TEXT;
                      buffer = 'textNode';
                      break;

                    case S.ATTRIB_VALUE_ENTITY_Q:
                      returnState = S.ATTRIB_VALUE_QUOTED;
                      buffer = 'attribValue';
                      break;

                    case S.ATTRIB_VALUE_ENTITY_U:
                      returnState = S.ATTRIB_VALUE_UNQUOTED;
                      buffer = 'attribValue';
                      break;
                  }

                  if (c === ';') {
                    parser[buffer] += parseEntity(parser);
                    parser.entity = '';
                    parser.state = returnState;
                  } else if (isMatch(parser.entity.length ? entityBody : entityStart, c)) {
                    parser.entity += c;
                  } else {
                    strictFail(parser, 'Invalid character in entity name');
                    parser[buffer] += '&' + parser.entity + c;
                    parser.entity = '';
                    parser.state = returnState;
                  }

                  continue;

                default:
                  throw new Error(parser, 'Unknown state: ' + parser.state);
              }
            } // while


            if (parser.position >= parser.bufferCheckPosition) {
              checkBufferLength(parser);
            }

            return parser;
          }
          /*! http://mths.be/fromcodepoint v0.1.0 by @mathias */

          /* istanbul ignore next */


          if (!String.fromCodePoint) {
            (function () {
              var stringFromCharCode = String.fromCharCode;
              var floor = Math.floor;

              var fromCodePoint = function fromCodePoint() {
                var MAX_SIZE = 0x4000;
                var codeUnits = [];
                var highSurrogate;
                var lowSurrogate;
                var index = -1;
                var length = arguments.length;

                if (!length) {
                  return '';
                }

                var result = '';

                while (++index < length) {
                  var codePoint = Number(arguments[index]);

                  if (!isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`
                  codePoint < 0 || // not a valid Unicode code point
                  codePoint > 0x10FFFF || // not a valid Unicode code point
                  floor(codePoint) !== codePoint // not an integer
                  ) {
                      throw RangeError('Invalid code point: ' + codePoint);
                    }

                  if (codePoint <= 0xFFFF) {
                    // BMP code point
                    codeUnits.push(codePoint);
                  } else {
                    // Astral code point; split in surrogate halves
                    // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
                    codePoint -= 0x10000;
                    highSurrogate = (codePoint >> 10) + 0xD800;
                    lowSurrogate = codePoint % 0x400 + 0xDC00;
                    codeUnits.push(highSurrogate, lowSurrogate);
                  }

                  if (index + 1 === length || codeUnits.length > MAX_SIZE) {
                    result += stringFromCharCode.apply(null, codeUnits);
                    codeUnits.length = 0;
                  }
                }

                return result;
              };
              /* istanbul ignore next */


              if (Object.defineProperty) {
                Object.defineProperty(String, 'fromCodePoint', {
                  value: fromCodePoint,
                  configurable: true,
                  writable: true
                });
              } else {
                String.fromCodePoint = fromCodePoint;
              }
            })();
          }
        })(false ? undefined : exports);
        /* WEBPACK VAR INJECTION */

      }).call(this, __webpack_require__(10).Buffer);
      /***/
    },
    /* 546 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var isArray = __webpack_require__(0).isArray;

      function groupDecorations(line) {
        var groups = [],
            currentGroup = null;

        for (var i = 0, l = line.inlines.length; i < l; i++) {
          var inline = line.inlines[i];
          var decoration = inline.decoration;

          if (!decoration) {
            currentGroup = null;
            continue;
          }

          if (!isArray(decoration)) {
            decoration = [decoration];
          }

          var color = inline.decorationColor || inline.color || 'black';
          var style = inline.decorationStyle || 'solid';

          for (var ii = 0, ll = decoration.length; ii < ll; ii++) {
            var decorationItem = decoration[ii];

            if (!currentGroup || decorationItem !== currentGroup.decoration || style !== currentGroup.decorationStyle || color !== currentGroup.decorationColor) {
              currentGroup = {
                line: line,
                decoration: decorationItem,
                decorationColor: color,
                decorationStyle: style,
                inlines: [inline]
              };
              groups.push(currentGroup);
            } else {
              currentGroup.inlines.push(inline);
            }
          }
        }

        return groups;
      }

      function drawDecoration(group, x, y, pdfKitDoc) {
        function maxInline() {
          var max = 0;

          for (var i = 0, l = group.inlines.length; i < l; i++) {
            var inline = group.inlines[i];
            max = inline.fontSize > max ? i : max;
          }

          return group.inlines[max];
        }

        function width() {
          var sum = 0;

          for (var i = 0, l = group.inlines.length; i < l; i++) {
            var justifyShift = group.inlines[i].justifyShift || 0;
            sum += group.inlines[i].width + justifyShift;
          }

          return sum;
        }

        var firstInline = group.inlines[0],
            biggerInline = maxInline(),
            totalWidth = width(),
            lineAscent = group.line.getAscenderHeight(),
            ascent = biggerInline.font.ascender / 1000 * biggerInline.fontSize,
            height = biggerInline.height,
            descent = height - ascent;
        var lw = 0.5 + Math.floor(Math.max(biggerInline.fontSize - 8, 0) / 2) * 0.12;

        switch (group.decoration) {
          case 'underline':
            y += lineAscent + descent * 0.45;
            break;

          case 'overline':
            y += lineAscent - ascent * 0.85;
            break;

          case 'lineThrough':
            y += lineAscent - ascent * 0.25;
            break;

          default:
            throw 'Unkown decoration : ' + group.decoration;
        }

        pdfKitDoc.save();

        if (group.decorationStyle === 'double') {
          var gap = Math.max(0.5, lw * 2);
          pdfKitDoc.fillColor(group.decorationColor).rect(x + firstInline.x, y - lw / 2, totalWidth, lw / 2).fill().rect(x + firstInline.x, y + gap - lw / 2, totalWidth, lw / 2).fill();
        } else if (group.decorationStyle === 'dashed') {
          var nbDashes = Math.ceil(totalWidth / (3.96 + 2.84));
          var rdx = x + firstInline.x;
          pdfKitDoc.rect(rdx, y, totalWidth, lw).clip();
          pdfKitDoc.fillColor(group.decorationColor);

          for (var i = 0; i < nbDashes; i++) {
            pdfKitDoc.rect(rdx, y - lw / 2, 3.96, lw).fill();
            rdx += 3.96 + 2.84;
          }
        } else if (group.decorationStyle === 'dotted') {
          var nbDots = Math.ceil(totalWidth / (lw * 3));
          var rx = x + firstInline.x;
          pdfKitDoc.rect(rx, y, totalWidth, lw).clip();
          pdfKitDoc.fillColor(group.decorationColor);

          for (var ii = 0; ii < nbDots; ii++) {
            pdfKitDoc.rect(rx, y - lw / 2, lw, lw).fill();
            rx += lw * 3;
          }
        } else if (group.decorationStyle === 'wavy') {
          var sh = 0.7,
              sv = 1;
          var nbWaves = Math.ceil(totalWidth / (sh * 2)) + 1;
          var rwx = x + firstInline.x - 1;
          pdfKitDoc.rect(x + firstInline.x, y - sv, totalWidth, y + sv).clip();
          pdfKitDoc.lineWidth(0.24);
          pdfKitDoc.moveTo(rwx, y);

          for (var iii = 0; iii < nbWaves; iii++) {
            pdfKitDoc.bezierCurveTo(rwx + sh, y - sv, rwx + sh * 2, y - sv, rwx + sh * 3, y).bezierCurveTo(rwx + sh * 4, y + sv, rwx + sh * 5, y + sv, rwx + sh * 6, y);
            rwx += sh * 6;
          }

          pdfKitDoc.stroke(group.decorationColor);
        } else {
          pdfKitDoc.fillColor(group.decorationColor).rect(x + firstInline.x, y - lw / 2, totalWidth, lw).fill();
        }

        pdfKitDoc.restore();
      }

      function drawDecorations(line, x, y, pdfKitDoc) {
        var groups = groupDecorations(line);

        for (var i = 0, l = groups.length; i < l; i++) {
          drawDecoration(groups[i], x, y, pdfKitDoc);
        }
      }

      function drawBackground(line, x, y, pdfKitDoc) {
        var height = line.getHeight();

        for (var i = 0, l = line.inlines.length; i < l; i++) {
          var inline = line.inlines[i];

          if (!inline.background) {
            continue;
          }

          var justifyShift = inline.justifyShift || 0;
          pdfKitDoc.fillColor(inline.background).rect(x + inline.x - justifyShift, y, inline.width + justifyShift, height).fill();
        }
      }

      module.exports = {
        drawBackground: drawBackground,
        drawDecorations: drawDecorations
      };
      /***/
    },
    /* 547 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";
      /* WEBPACK VAR INJECTION */

      (function (module) {
        __webpack_require__(209);

        __webpack_require__(211);

        __webpack_require__(192);

        __webpack_require__(28);

        __webpack_require__(46);

        __webpack_require__(157);

        __webpack_require__(223);

        __webpack_require__(227);

        __webpack_require__(32);

        __webpack_require__(118);

        __webpack_require__(160);

        __webpack_require__(230);

        __webpack_require__(231);

        __webpack_require__(232);

        __webpack_require__(233);

        __webpack_require__(120);

        var SVGtoPDF = function SVGtoPDF(doc, svg, x, y, options) {
          "use strict";

          var NamedColors = {
            aliceblue: [240, 248, 255],
            antiquewhite: [250, 235, 215],
            aqua: [0, 255, 255],
            aquamarine: [127, 255, 212],
            azure: [240, 255, 255],
            beige: [245, 245, 220],
            bisque: [255, 228, 196],
            black: [0, 0, 0],
            blanchedalmond: [255, 235, 205],
            blue: [0, 0, 255],
            blueviolet: [138, 43, 226],
            brown: [165, 42, 42],
            burlywood: [222, 184, 135],
            cadetblue: [95, 158, 160],
            chartreuse: [127, 255, 0],
            chocolate: [210, 105, 30],
            coral: [255, 127, 80],
            cornflowerblue: [100, 149, 237],
            cornsilk: [255, 248, 220],
            crimson: [220, 20, 60],
            cyan: [0, 255, 255],
            darkblue: [0, 0, 139],
            darkcyan: [0, 139, 139],
            darkgoldenrod: [184, 134, 11],
            darkgray: [169, 169, 169],
            darkgrey: [169, 169, 169],
            darkgreen: [0, 100, 0],
            darkkhaki: [189, 183, 107],
            darkmagenta: [139, 0, 139],
            darkolivegreen: [85, 107, 47],
            darkorange: [255, 140, 0],
            darkorchid: [153, 50, 204],
            darkred: [139, 0, 0],
            darksalmon: [233, 150, 122],
            darkseagreen: [143, 188, 143],
            darkslateblue: [72, 61, 139],
            darkslategray: [47, 79, 79],
            darkslategrey: [47, 79, 79],
            darkturquoise: [0, 206, 209],
            darkviolet: [148, 0, 211],
            deeppink: [255, 20, 147],
            deepskyblue: [0, 191, 255],
            dimgray: [105, 105, 105],
            dimgrey: [105, 105, 105],
            dodgerblue: [30, 144, 255],
            firebrick: [178, 34, 34],
            floralwhite: [255, 250, 240],
            forestgreen: [34, 139, 34],
            fuchsia: [255, 0, 255],
            gainsboro: [220, 220, 220],
            ghostwhite: [248, 248, 255],
            gold: [255, 215, 0],
            goldenrod: [218, 165, 32],
            gray: [128, 128, 128],
            grey: [128, 128, 128],
            green: [0, 128, 0],
            greenyellow: [173, 255, 47],
            honeydew: [240, 255, 240],
            hotpink: [255, 105, 180],
            indianred: [205, 92, 92],
            indigo: [75, 0, 130],
            ivory: [255, 255, 240],
            khaki: [240, 230, 140],
            lavender: [230, 230, 250],
            lavenderblush: [255, 240, 245],
            lawngreen: [124, 252, 0],
            lemonchiffon: [255, 250, 205],
            lightblue: [173, 216, 230],
            lightcoral: [240, 128, 128],
            lightcyan: [224, 255, 255],
            lightgoldenrodyellow: [250, 250, 210],
            lightgray: [211, 211, 211],
            lightgrey: [211, 211, 211],
            lightgreen: [144, 238, 144],
            lightpink: [255, 182, 193],
            lightsalmon: [255, 160, 122],
            lightseagreen: [32, 178, 170],
            lightskyblue: [135, 206, 250],
            lightslategray: [119, 136, 153],
            lightslategrey: [119, 136, 153],
            lightsteelblue: [176, 196, 222],
            lightyellow: [255, 255, 224],
            lime: [0, 255, 0],
            limegreen: [50, 205, 50],
            linen: [250, 240, 230],
            magenta: [255, 0, 255],
            maroon: [128, 0, 0],
            mediumaquamarine: [102, 205, 170],
            mediumblue: [0, 0, 205],
            mediumorchid: [186, 85, 211],
            mediumpurple: [147, 112, 219],
            mediumseagreen: [60, 179, 113],
            mediumslateblue: [123, 104, 238],
            mediumspringgreen: [0, 250, 154],
            mediumturquoise: [72, 209, 204],
            mediumvioletred: [199, 21, 133],
            midnightblue: [25, 25, 112],
            mintcream: [245, 255, 250],
            mistyrose: [255, 228, 225],
            moccasin: [255, 228, 181],
            navajowhite: [255, 222, 173],
            navy: [0, 0, 128],
            oldlace: [253, 245, 230],
            olive: [128, 128, 0],
            olivedrab: [107, 142, 35],
            orange: [255, 165, 0],
            orangered: [255, 69, 0],
            orchid: [218, 112, 214],
            palegoldenrod: [238, 232, 170],
            palegreen: [152, 251, 152],
            paleturquoise: [175, 238, 238],
            palevioletred: [219, 112, 147],
            papayawhip: [255, 239, 213],
            peachpuff: [255, 218, 185],
            peru: [205, 133, 63],
            pink: [255, 192, 203],
            plum: [221, 160, 221],
            powderblue: [176, 224, 230],
            purple: [128, 0, 128],
            rebeccapurple: [102, 51, 153],
            red: [255, 0, 0],
            rosybrown: [188, 143, 143],
            royalblue: [65, 105, 225],
            saddlebrown: [139, 69, 19],
            salmon: [250, 128, 114],
            sandybrown: [244, 164, 96],
            seagreen: [46, 139, 87],
            seashell: [255, 245, 238],
            sienna: [160, 82, 45],
            silver: [192, 192, 192],
            skyblue: [135, 206, 235],
            slateblue: [106, 90, 205],
            slategray: [112, 128, 144],
            slategrey: [112, 128, 144],
            snow: [255, 250, 250],
            springgreen: [0, 255, 127],
            steelblue: [70, 130, 180],
            tan: [210, 180, 140],
            teal: [0, 128, 128],
            thistle: [216, 191, 216],
            tomato: [255, 99, 71],
            turquoise: [64, 224, 208],
            violet: [238, 130, 238],
            wheat: [245, 222, 179],
            white: [255, 255, 255],
            whitesmoke: [245, 245, 245],
            yellow: [255, 255, 0]
          };
          var DefaultColors = {
            black: [NamedColors.black, 1],
            white: [NamedColors.white, 1],
            transparent: [NamedColors.black, 0]
          };
          var Entities = {
            quot: 34,
            amp: 38,
            lt: 60,
            gt: 62,
            apos: 39,
            OElig: 338,
            oelig: 339,
            Scaron: 352,
            scaron: 353,
            Yuml: 376,
            circ: 710,
            tilde: 732,
            ensp: 8194,
            emsp: 8195,
            thinsp: 8201,
            zwnj: 8204,
            zwj: 8205,
            lrm: 8206,
            rlm: 8207,
            ndash: 8211,
            mdash: 8212,
            lsquo: 8216,
            rsquo: 8217,
            sbquo: 8218,
            ldquo: 8220,
            rdquo: 8221,
            bdquo: 8222,
            dagger: 8224,
            Dagger: 8225,
            permil: 8240,
            lsaquo: 8249,
            rsaquo: 8250,
            euro: 8364,
            nbsp: 160,
            iexcl: 161,
            cent: 162,
            pound: 163,
            curren: 164,
            yen: 165,
            brvbar: 166,
            sect: 167,
            uml: 168,
            copy: 169,
            ordf: 170,
            laquo: 171,
            not: 172,
            shy: 173,
            reg: 174,
            macr: 175,
            deg: 176,
            plusmn: 177,
            sup2: 178,
            sup3: 179,
            acute: 180,
            micro: 181,
            para: 182,
            middot: 183,
            cedil: 184,
            sup1: 185,
            ordm: 186,
            raquo: 187,
            frac14: 188,
            frac12: 189,
            frac34: 190,
            iquest: 191,
            Agrave: 192,
            Aacute: 193,
            Acirc: 194,
            Atilde: 195,
            Auml: 196,
            Aring: 197,
            AElig: 198,
            Ccedil: 199,
            Egrave: 200,
            Eacute: 201,
            Ecirc: 202,
            Euml: 203,
            Igrave: 204,
            Iacute: 205,
            Icirc: 206,
            Iuml: 207,
            ETH: 208,
            Ntilde: 209,
            Ograve: 210,
            Oacute: 211,
            Ocirc: 212,
            Otilde: 213,
            Ouml: 214,
            times: 215,
            Oslash: 216,
            Ugrave: 217,
            Uacute: 218,
            Ucirc: 219,
            Uuml: 220,
            Yacute: 221,
            THORN: 222,
            szlig: 223,
            agrave: 224,
            aacute: 225,
            acirc: 226,
            atilde: 227,
            auml: 228,
            aring: 229,
            aelig: 230,
            ccedil: 231,
            egrave: 232,
            eacute: 233,
            ecirc: 234,
            euml: 235,
            igrave: 236,
            iacute: 237,
            icirc: 238,
            iuml: 239,
            eth: 240,
            ntilde: 241,
            ograve: 242,
            oacute: 243,
            ocirc: 244,
            otilde: 245,
            ouml: 246,
            divide: 247,
            oslash: 248,
            ugrave: 249,
            uacute: 250,
            ucirc: 251,
            uuml: 252,
            yacute: 253,
            thorn: 254,
            yuml: 255,
            fnof: 402,
            Alpha: 913,
            Beta: 914,
            Gamma: 915,
            Delta: 916,
            Epsilon: 917,
            Zeta: 918,
            Eta: 919,
            Theta: 920,
            Iota: 921,
            Kappa: 922,
            Lambda: 923,
            Mu: 924,
            Nu: 925,
            Xi: 926,
            Omicron: 927,
            Pi: 928,
            Rho: 929,
            Sigma: 931,
            Tau: 932,
            Upsilon: 933,
            Phi: 934,
            Chi: 935,
            Psi: 936,
            Omega: 937,
            alpha: 945,
            beta: 946,
            gamma: 947,
            delta: 948,
            epsilon: 949,
            zeta: 950,
            eta: 951,
            theta: 952,
            iota: 953,
            kappa: 954,
            lambda: 955,
            mu: 956,
            nu: 957,
            xi: 958,
            omicron: 959,
            pi: 960,
            rho: 961,
            sigmaf: 962,
            sigma: 963,
            tau: 964,
            upsilon: 965,
            phi: 966,
            chi: 967,
            psi: 968,
            omega: 969,
            thetasym: 977,
            upsih: 978,
            piv: 982,
            bull: 8226,
            hellip: 8230,
            prime: 8242,
            Prime: 8243,
            oline: 8254,
            frasl: 8260,
            weierp: 8472,
            image: 8465,
            real: 8476,
            trade: 8482,
            alefsym: 8501,
            larr: 8592,
            uarr: 8593,
            rarr: 8594,
            darr: 8595,
            harr: 8596,
            crarr: 8629,
            lArr: 8656,
            uArr: 8657,
            rArr: 8658,
            dArr: 8659,
            hArr: 8660,
            forall: 8704,
            part: 8706,
            exist: 8707,
            empty: 8709,
            nabla: 8711,
            isin: 8712,
            notin: 8713,
            ni: 8715,
            prod: 8719,
            sum: 8721,
            minus: 8722,
            lowast: 8727,
            radic: 8730,
            prop: 8733,
            infin: 8734,
            ang: 8736,
            and: 8743,
            or: 8744,
            cap: 8745,
            cup: 8746,
            int: 8747,
            there4: 8756,
            sim: 8764,
            cong: 8773,
            asymp: 8776,
            ne: 8800,
            equiv: 8801,
            le: 8804,
            ge: 8805,
            sub: 8834,
            sup: 8835,
            nsub: 8836,
            sube: 8838,
            supe: 8839,
            oplus: 8853,
            otimes: 8855,
            perp: 8869,
            sdot: 8901,
            lceil: 8968,
            rceil: 8969,
            lfloor: 8970,
            rfloor: 8971,
            lang: 9001,
            rang: 9002,
            loz: 9674,
            spades: 9824,
            clubs: 9827,
            hearts: 9829,
            diams: 9830
          };
          var PathArguments = {
            A: 7,
            a: 7,
            C: 6,
            c: 6,
            H: 1,
            h: 1,
            L: 2,
            l: 2,
            M: 2,
            m: 2,
            Q: 4,
            q: 4,
            S: 4,
            s: 4,
            T: 2,
            t: 2,
            V: 1,
            v: 1,
            Z: 0,
            z: 0
          };
          var PathFlags = {
            A3: true,
            A4: true,
            a3: true,
            a4: true
          };
          var Properties = {
            'color': {
              inherit: true,
              initial: undefined
            },
            'visibility': {
              inherit: true,
              initial: 'visible',
              values: {
                'hidden': 'hidden',
                'collapse': 'hidden',
                'visible': 'visible'
              }
            },
            'fill': {
              inherit: true,
              initial: DefaultColors.black
            },
            'stroke': {
              inherit: true,
              initial: 'none'
            },
            'stop-color': {
              inherit: false,
              initial: DefaultColors.black
            },
            'fill-opacity': {
              inherit: true,
              initial: 1
            },
            'stroke-opacity': {
              inherit: true,
              initial: 1
            },
            'stop-opacity': {
              inherit: false,
              initial: 1
            },
            'fill-rule': {
              inherit: true,
              initial: 'nonzero',
              values: {
                'nonzero': 'nonzero',
                'evenodd': 'evenodd'
              }
            },
            'clip-rule': {
              inherit: true,
              initial: 'nonzero',
              values: {
                'nonzero': 'nonzero',
                'evenodd': 'evenodd'
              }
            },
            'stroke-width': {
              inherit: true,
              initial: 1
            },
            'stroke-dasharray': {
              inherit: true,
              initial: []
            },
            'stroke-dashoffset': {
              inherit: true,
              initial: 0
            },
            'stroke-miterlimit': {
              inherit: true,
              initial: 4
            },
            'stroke-linejoin': {
              inherit: true,
              initial: 'miter',
              values: {
                'miter': 'miter',
                'round': 'round',
                'bevel': 'bevel'
              }
            },
            'stroke-linecap': {
              inherit: true,
              initial: 'butt',
              values: {
                'butt': 'butt',
                'round': 'round',
                'square': 'square'
              }
            },
            'font-size': {
              inherit: true,
              initial: 16,
              values: {
                'xx-small': 9,
                'x-small': 10,
                'small': 13,
                'medium': 16,
                'large': 18,
                'x-large': 24,
                'xx-large': 32
              }
            },
            'font-family': {
              inherit: true,
              initial: 'sans-serif'
            },
            'font-weight': {
              inherit: true,
              initial: 'normal',
              values: {
                '600': 'bold',
                '700': 'bold',
                '800': 'bold',
                '900': 'bold',
                'bold': 'bold',
                'bolder': 'bold',
                '500': 'normal',
                '400': 'normal',
                '300': 'normal',
                '200': 'normal',
                '100': 'normal',
                'normal': 'normal',
                'lighter': 'normal'
              }
            },
            'font-style': {
              inherit: true,
              initial: 'normal',
              values: {
                'italic': 'italic',
                'oblique': 'italic',
                'normal': 'normal'
              }
            },
            'text-anchor': {
              inherit: true,
              initial: 'start',
              values: {
                'start': 'start',
                'middle': 'middle',
                'end': 'end'
              }
            },
            'direction': {
              inherit: true,
              initial: 'ltr',
              values: {
                'ltr': 'ltr',
                'rtl': 'rtl'
              }
            },
            'dominant-baseline': {
              inherit: true,
              initial: 'baseline',
              values: {
                'auto': 'baseline',
                'baseline': 'baseline',
                'before-edge': 'before-edge',
                'text-before-edge': 'before-edge',
                'middle': 'middle',
                'central': 'central',
                'after-edge': 'after-edge',
                'text-after-edge': 'after-edge',
                'ideographic': 'ideographic',
                'alphabetic': 'alphabetic',
                'hanging': 'hanging',
                'mathematical': 'mathematical'
              }
            },
            'alignment-baseline': {
              inherit: false,
              initial: undefined,
              values: {
                'auto': 'baseline',
                'baseline': 'baseline',
                'before-edge': 'before-edge',
                'text-before-edge': 'before-edge',
                'middle': 'middle',
                'central': 'central',
                'after-edge': 'after-edge',
                'text-after-edge': 'after-edge',
                'ideographic': 'ideographic',
                'alphabetic': 'alphabetic',
                'hanging': 'hanging',
                'mathematical': 'mathematical'
              }
            },
            'baseline-shift': {
              inherit: true,
              initial: 'baseline',
              values: {
                'baseline': 'baseline',
                'sub': 'sub',
                'super': 'super'
              }
            },
            'word-spacing': {
              inherit: true,
              initial: 0,
              values: {
                normal: 0
              }
            },
            'letter-spacing': {
              inherit: true,
              initial: 0,
              values: {
                normal: 0
              }
            },
            'text-decoration': {
              inherit: false,
              initial: 'none',
              values: {
                'none': 'none',
                'underline': 'underline',
                'overline': 'overline',
                'line-through': 'line-through'
              }
            },
            'xml:space': {
              inherit: true,
              initial: 'default',
              css: 'white-space',
              values: {
                'preserve': 'preserve',
                'default': 'default',
                'pre': 'preserve',
                'pre-line': 'preserve',
                'pre-wrap': 'preserve',
                'nowrap': 'default'
              }
            },
            'marker-start': {
              inherit: true,
              initial: 'none'
            },
            'marker-mid': {
              inherit: true,
              initial: 'none'
            },
            'marker-end': {
              inherit: true,
              initial: 'none'
            },
            'opacity': {
              inherit: false,
              initial: 1
            },
            'transform': {
              inherit: false,
              initial: [1, 0, 0, 1, 0, 0]
            },
            'display': {
              inherit: false,
              initial: 'inline',
              values: {
                'none': 'none',
                'inline': 'inline',
                'block': 'inline'
              }
            },
            'clip-path': {
              inherit: false,
              initial: 'none'
            },
            'mask': {
              inherit: false,
              initial: 'none'
            },
            'overflow': {
              inherit: false,
              initial: 'hidden',
              values: {
                'hidden': 'hidden',
                'scroll': 'hidden',
                'visible': 'visible'
              }
            }
          };

          function docBeginGroup(bbox) {
            var group = new function PDFGroup() {}();
            group.name = 'G' + (doc._groupCount = (doc._groupCount || 0) + 1);
            group.resources = doc.ref();
            group.xobj = doc.ref({
              Type: 'XObject',
              Subtype: 'Form',
              FormType: 1,
              BBox: bbox,
              Group: {
                S: 'Transparency',
                CS: 'DeviceRGB',
                I: true,
                K: false
              },
              Resources: group.resources
            });
            group.xobj.write('');
            group.savedMatrix = doc._ctm;
            group.savedPage = doc.page;
            groupStack.push(group);
            doc._ctm = [1, 0, 0, 1, 0, 0];
            doc.page = {
              width: doc.page.width,
              height: doc.page.height,
              write: function write(data) {
                group.xobj.write(data);
              },
              fonts: {},
              xobjects: {},
              ext_gstates: {},
              patterns: {}
            };
            return group;
          }

          function docEndGroup(group) {
            if (group !== groupStack.pop()) {
              throw 'Group not matching';
            }

            if (Object.keys(doc.page.fonts).length) {
              group.resources.data.Font = doc.page.fonts;
            }

            if (Object.keys(doc.page.xobjects).length) {
              group.resources.data.XObject = doc.page.xobjects;
            }

            if (Object.keys(doc.page.ext_gstates).length) {
              group.resources.data.ExtGState = doc.page.ext_gstates;
            }

            if (Object.keys(doc.page.patterns).length) {
              group.resources.data.Pattern = doc.page.patterns;
            }

            group.resources.end();
            group.xobj.end();
            doc._ctm = group.savedMatrix;
            doc.page = group.savedPage;
          }

          function docInsertGroup(group) {
            doc.page.xobjects[group.name] = group.xobj;
            doc.addContent('/' + group.name + ' Do');
          }

          function docApplyMask(group, clip) {
            var name = 'M' + (doc._maskCount = (doc._maskCount || 0) + 1);
            var gstate = doc.ref({
              Type: 'ExtGState',
              CA: 1,
              ca: 1,
              BM: 'Normal',
              SMask: {
                S: 'Luminosity',
                G: group.xobj,
                BC: clip ? [0, 0, 0] : [1, 1, 1]
              }
            });
            gstate.end();
            doc.page.ext_gstates[name] = gstate;
            doc.addContent('/' + name + ' gs');
          }

          function docCreatePattern(group, dx, dy, matrix) {
            var pattern = new function PDFPattern() {}();
            pattern.group = group;
            pattern.dx = dx;
            pattern.dy = dy;
            pattern.matrix = matrix || [1, 0, 0, 1, 0, 0];
            return pattern;
          }

          function docUsePattern(pattern, stroke) {
            var name = 'P' + (doc._patternCount = (doc._patternCount || 0) + 1);
            var ref = doc.ref({
              Type: 'Pattern',
              PatternType: 1,
              PaintType: 1,
              TilingType: 2,
              BBox: [0, 0, pattern.dx, pattern.dy],
              XStep: pattern.dx,
              YStep: pattern.dy,
              Matrix: multiplyMatrix(doc._ctm, pattern.matrix),
              Resources: {
                ProcSet: ['PDF', 'Text', 'ImageB', 'ImageC', 'ImageI'],
                XObject: function () {
                  var temp = {};
                  temp[pattern.group.name] = pattern.group.xobj;
                  return temp;
                }()
              }
            });
            ref.write('/' + pattern.group.name + ' Do');
            ref.end();
            doc.page.patterns[name] = ref;

            if (stroke) {
              doc.addContent('/Pattern CS');
              doc.addContent('/' + name + ' SCN');
            } else {
              doc.addContent('/Pattern cs');
              doc.addContent('/' + name + ' scn');
            }
          }

          function docBeginText(font, size) {
            if (!doc.page.fonts[font.id]) {
              doc.page.fonts[font.id] = font.ref();
            }

            doc.addContent('BT').addContent('/' + font.id + ' ' + size + ' Tf');
          }

          function docSetTextMatrix(a, b, c, d, e, f) {
            doc.addContent(validateNumber(a) + ' ' + validateNumber(b) + ' ' + validateNumber(-c) + ' ' + validateNumber(-d) + ' ' + validateNumber(e) + ' ' + validateNumber(f) + ' Tm');
          }

          function docSetTextMode(fill, stroke) {
            var mode = fill && stroke ? 2 : stroke ? 1 : fill ? 0 : 3;
            doc.addContent(mode + ' Tr');
          }

          function docWriteGlyph(glyph) {
            doc.addContent('<' + glyph + '> Tj');
          }

          function docEndText() {
            doc.addContent('ET');
          }

          function docFillColor(color) {
            if (color[0].constructor.name === 'PDFPattern') {
              doc.fillOpacity(color[1]);
              docUsePattern(color[0], false);
            } else {
              doc.fillColor(color[0], color[1]);
            }
          }

          function docStrokeColor(color) {
            if (color[0].constructor.name === 'PDFPattern') {
              doc.strokeOpacity(color[1]);
              docUsePattern(color[0], true);
            } else {
              doc.strokeColor(color[0], color[1]);
            }
          }

          function docInsertLink(x, y, w, h, url) {
            var ref = doc.ref({
              Type: 'Annot',
              Subtype: 'Link',
              Rect: [x, y, w, h],
              Border: [0, 0, 0],
              A: {
                S: 'URI',
                URI: new String(url)
              }
            });
            ref.end();
            links.push(ref);
          }

          function parseXml(xml) {
            var SvgNode = function SvgNode(tag, type, value, error) {
              this.error = error;
              this.nodeName = tag;
              this.nodeValue = value;
              this.nodeType = type;
              this.attributes = Object.create(null);
              this.childNodes = [];
              this.parentNode = null;
              this.id = '';
              this.textContent = '';
              this.classList = [];
            };

            SvgNode.prototype.getAttribute = function (attr) {
              return this.attributes[attr] != null ? this.attributes[attr] : null;
            };

            SvgNode.prototype.getElementById = function (id) {
              var result = null;

              (function recursive(node) {
                if (result) {
                  return;
                }

                if (node.nodeType === 1) {
                  if (node.id === id) {
                    result = node;
                  }

                  for (var i = 0; i < node.childNodes.length; i++) {
                    recursive(node.childNodes[i]);
                  }
                }
              })(this);

              return result;
            };

            SvgNode.prototype.getElementsByTagName = function (tag) {
              var result = [];

              (function recursive(node) {
                if (node.nodeType === 1) {
                  if (node.nodeName === tag) {
                    result.push(node);
                  }

                  for (var i = 0; i < node.childNodes.length; i++) {
                    recursive(node.childNodes[i]);
                  }
                }
              })(this);

              return result;
            };

            var parser = new StringParser(xml.trim()),
                result,
                child,
                error = false;

            var recursive = function recursive() {
              var temp, child;

              if (temp = parser.match(/^<([\w:.-]+)\s*/, true)) {
                // Opening tag
                var node = new SvgNode(temp[1], 1, null, error);

                while (temp = parser.match(/^([\w:.-]+)(?:\s*=\s*"([^"]*)"|\s*=\s*'([^']*)')?\s*/, true)) {
                  // Attribute
                  var attr = temp[1],
                      value = decodeEntities(temp[2] || temp[3] || '');

                  if (!node.attributes[attr]) {
                    node.attributes[attr] = value;

                    if (attr === 'id') {
                      node.id = value;
                    }

                    if (attr === 'class') {
                      node.classList = value.split(' ');
                    }
                  } else {
                    warningCallback('parseXml: duplicate attribute "' + attr + '"');
                    error = true;
                  }
                }

                if (parser.match(/^>/)) {
                  // End of opening tag
                  while (child = recursive()) {
                    node.childNodes.push(child);
                    child.parentNode = node;
                    node.textContent += child.nodeType === 3 || child.nodeType === 4 ? child.nodeValue : child.textContent;
                  }

                  if (temp = parser.match(/^<\/([\w:.-]+)\s*>/, true)) {
                    // Closing tag
                    if (temp[1] === node.nodeName) {
                      return node;
                    } else {
                      warningCallback('parseXml: tag not matching, opening "' + node.nodeName + '" & closing "' + temp[1] + '"');
                      error = true;
                      return node;
                    }
                  } else {
                    warningCallback('parseXml: tag not matching, opening "' + node.nodeName + '" & not closing');
                    error = true;
                    return node;
                  }
                } else if (parser.match(/^\/>/)) {
                  // Self-closing tag
                  return node;
                } else {
                  warningCallback('parseXml: tag could not be parsed "' + node.nodeName + '"');
                  error = true;
                }
              } else if (temp = parser.match(/^<!--[\s\S]*?-->/)) {
                // Comment
                return new SvgNode(null, 8, temp, error);
              } else if (temp = parser.match(/^<\?[\s\S]*?\?>/)) {
                // Processing instructions
                return new SvgNode(null, 7, temp, error);
              } else if (temp = parser.match(/^<!DOCTYPE\s*([\s\S]*?)>/)) {
                // Doctype
                return new SvgNode(null, 10, temp, error);
              } else if (temp = parser.match(/^<!\[CDATA\[([\s\S]*?)\]\]>/, true)) {
                // Cdata node
                return new SvgNode('#cdata-section', 4, temp[1], error);
              } else if (temp = parser.match(/^([^<]+)/, true)) {
                // Text node
                return new SvgNode('#text', 3, decodeEntities(temp[1]), error);
              }
            };

            while (child = recursive()) {
              if (child.nodeType === 1 && !result) {
                result = child;
              } else if (child.nodeType === 1 || child.nodeType === 3 && child.nodeValue.trim() !== '') {
                warningCallback('parseXml: data after document end has been discarded');
              }
            }

            if (parser.matchAll()) {
              warningCallback('parseXml: parsing error');
            }

            return result;
          }

          ;

          function decodeEntities(str) {
            return str.replace(/&(?:#([0-9]+)|#[xX]([0-9A-Fa-f]+)|([0-9A-Za-z]+));/g, function (mt, m0, m1, m2) {
              if (m0) {
                return String.fromCharCode(parseInt(m0, 10));
              } else if (m1) {
                return String.fromCharCode(parseInt(m1, 16));
              } else if (m2 && Entities[m2]) {
                return String.fromCharCode(Entities[m2]);
              } else {
                return mt;
              }
            });
          }

          function parseColor(raw) {
            var temp, result;
            raw = (raw || '').trim();

            if (temp = NamedColors[raw]) {
              result = [temp.slice(), 1];
            } else if (temp = raw.match(/^rgba\(\s*([0-9]+)\s*,\s*([0-9]+)\s*,\s*([0-9]+)\s*,\s*([0-9.]+)\s*\)$/i)) {
              temp[1] = parseInt(temp[1]);
              temp[2] = parseInt(temp[2]);
              temp[3] = parseInt(temp[3]);
              temp[4] = parseFloat(temp[4]);

              if (temp[1] < 256 && temp[2] < 256 && temp[3] < 256 && temp[4] <= 1) {
                result = [temp.slice(1, 4), temp[4]];
              }
            } else if (temp = raw.match(/^rgb\(\s*([0-9]+)\s*,\s*([0-9]+)\s*,\s*([0-9]+)\s*\)$/i)) {
              temp[1] = parseInt(temp[1]);
              temp[2] = parseInt(temp[2]);
              temp[3] = parseInt(temp[3]);

              if (temp[1] < 256 && temp[2] < 256 && temp[3] < 256) {
                result = [temp.slice(1, 4), 1];
              }
            } else if (temp = raw.match(/^rgb\(\s*([0-9.]+)%\s*,\s*([0-9.]+)%\s*,\s*([0-9.]+)%\s*\)$/i)) {
              temp[1] = 2.55 * parseFloat(temp[1]);
              temp[2] = 2.55 * parseFloat(temp[2]);
              temp[3] = 2.55 * parseFloat(temp[3]);

              if (temp[1] < 256 && temp[2] < 256 && temp[3] < 256) {
                result = [temp.slice(1, 4), 1];
              }
            } else if (temp = raw.match(/^#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/i)) {
              result = [[parseInt(temp[1], 16), parseInt(temp[2], 16), parseInt(temp[3], 16)], 1];
            } else if (temp = raw.match(/^#([0-9a-f])([0-9a-f])([0-9a-f])$/i)) {
              result = [[0x11 * parseInt(temp[1], 16), 0x11 * parseInt(temp[2], 16), 0x11 * parseInt(temp[3], 16)], 1];
            }

            return colorCallback ? colorCallback(result, raw) : result;
          }

          function opacityToColor(color, opacity, isMask) {
            var newColor = color[0].slice(),
                newOpacity = color[1] * opacity;

            if (isMask) {
              for (var i = 0; i < color.length; i++) {
                newColor[i] *= newOpacity;
              }

              return [newColor, 1];
            } else {
              return [newColor, newOpacity];
            }
          }

          function multiplyMatrix() {
            function multiply(a, b) {
              return [a[0] * b[0] + a[2] * b[1], a[1] * b[0] + a[3] * b[1], a[0] * b[2] + a[2] * b[3], a[1] * b[2] + a[3] * b[3], a[0] * b[4] + a[2] * b[5] + a[4], a[1] * b[4] + a[3] * b[5] + a[5]];
            }

            var result = arguments[0];

            for (var i = 1; i < arguments.length; i++) {
              result = multiply(result, arguments[i]);
            }

            return result;
          }

          function transformPoint(p, m) {
            return [m[0] * p[0] + m[2] * p[1] + m[4], m[1] * p[0] + m[3] * p[1] + m[5]];
          }

          function getGlobalMatrix() {
            var ctm = doc._ctm;

            for (var i = groupStack.length - 1; i >= 0; i--) {
              ctm = multiplyMatrix(groupStack[i].savedMatrix, ctm);
            }

            return ctm;
          }

          function getPageBBox() {
            return new SvgShape().M(0, 0).L(doc.page.width, 0).L(doc.page.width, doc.page.height).L(0, doc.page.height).transform(inverseMatrix(getGlobalMatrix())).getBoundingBox();
          }

          function inverseMatrix(m) {
            var dt = m[0] * m[3] - m[1] * m[2];
            return [m[3] / dt, -m[1] / dt, -m[2] / dt, m[0] / dt, (m[2] * m[5] - m[3] * m[4]) / dt, (m[1] * m[4] - m[0] * m[5]) / dt];
          }

          function validateMatrix(m) {
            var m0 = validateNumber(m[0]),
                m1 = validateNumber(m[1]),
                m2 = validateNumber(m[2]),
                m3 = validateNumber(m[3]),
                m4 = validateNumber(m[4]),
                m5 = validateNumber(m[5]);

            if (isNotEqual(m0 * m3 - m1 * m2, 0)) {
              return [m0, m1, m2, m3, m4, m5];
            }
          }

          function solveEquation(curve) {
            var a = curve[2] || 0,
                b = curve[1] || 0,
                c = curve[0] || 0;

            if (isEqual(a, 0) && isEqual(b, 0)) {
              return [];
            } else if (isEqual(a, 0)) {
              return [-c / b];
            } else {
              var d = b * b - 4 * a * c;

              if (isNotEqual(d, 0) && d > 0) {
                return [(-b + Math.sqrt(d)) / (2 * a), (-b - Math.sqrt(d)) / (2 * a)];
              } else if (isEqual(d, 0)) {
                return [-b / (2 * a)];
              } else {
                return [];
              }
            }
          }

          function getCurveValue(t, curve) {
            return (curve[0] || 0) + (curve[1] || 0) * t + (curve[2] || 0) * t * t + (curve[3] || 0) * t * t * t;
          }

          function isEqual(number, ref) {
            return Math.abs(number - ref) < 1e-10;
          }

          function isNotEqual(number, ref) {
            return Math.abs(number - ref) >= 1e-10;
          }

          function validateNumber(n) {
            return n > -1e21 && n < 1e21 ? Math.round(n * 1e6) / 1e6 : 0;
          }

          function isArrayLike(v) {
            return _typeof4(v) === 'object' && v !== null && typeof v.length === 'number';
          }

          function parseTranform(v) {
            var parser = new StringParser((v || '').trim()),
                result = [1, 0, 0, 1, 0, 0],
                temp;

            while (temp = parser.match(/^([A-Za-z]+)\s*[(]([^(]+)[)]/, true)) {
              var func = temp[1],
                  nums = [],
                  parser2 = new StringParser(temp[2].trim()),
                  temp2 = void 0;

              while (temp2 = parser2.matchNumber()) {
                nums.push(Number(temp2));
                parser2.matchSeparator();
              }

              if (func === 'matrix' && nums.length === 6) {
                result = multiplyMatrix(result, [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5]]);
              } else if (func === 'translate' && nums.length === 2) {
                result = multiplyMatrix(result, [1, 0, 0, 1, nums[0], nums[1]]);
              } else if (func === 'translate' && nums.length === 1) {
                result = multiplyMatrix(result, [1, 0, 0, 1, nums[0], 0]);
              } else if (func === 'scale' && nums.length === 2) {
                result = multiplyMatrix(result, [nums[0], 0, 0, nums[1], 0, 0]);
              } else if (func === 'scale' && nums.length === 1) {
                result = multiplyMatrix(result, [nums[0], 0, 0, nums[0], 0, 0]);
              } else if (func === 'rotate' && nums.length === 3) {
                var a = nums[0] * Math.PI / 180;
                result = multiplyMatrix(result, [1, 0, 0, 1, nums[1], nums[2]], [Math.cos(a), Math.sin(a), -Math.sin(a), Math.cos(a), 0, 0], [1, 0, 0, 1, -nums[1], -nums[2]]);
              } else if (func === 'rotate' && nums.length === 1) {
                var _a = nums[0] * Math.PI / 180;

                result = multiplyMatrix(result, [Math.cos(_a), Math.sin(_a), -Math.sin(_a), Math.cos(_a), 0, 0]);
              } else if (func === 'skewX' && nums.length === 1) {
                var _a2 = nums[0] * Math.PI / 180;

                result = multiplyMatrix(result, [1, 0, Math.tan(_a2), 1, 0, 0]);
              } else if (func === 'skewY' && nums.length === 1) {
                var _a3 = nums[0] * Math.PI / 180;

                result = multiplyMatrix(result, [1, Math.tan(_a3), 0, 1, 0, 0]);
              } else {
                return;
              }

              parser.matchSeparator();
            }

            if (parser.matchAll()) {
              return;
            }

            return result;
          }

          function parseAspectRatio(aspectRatio, availWidth, availHeight, elemWidth, elemHeight, initAlign) {
            var temp = (aspectRatio || '').trim().match(/^(none)$|^x(Min|Mid|Max)Y(Min|Mid|Max)(?:\s+(meet|slice))?$/) || [],
                ratioType = temp[1] || temp[4] || 'meet',
                xAlign = temp[2] || 'Mid',
                yAlign = temp[3] || 'Mid',
                scaleX = availWidth / elemWidth,
                scaleY = availHeight / elemHeight,
                dx = {
              'Min': 0,
              'Mid': 0.5,
              'Max': 1
            }[xAlign] - (initAlign || 0),
                dy = {
              'Min': 0,
              'Mid': 0.5,
              'Max': 1
            }[yAlign] - (initAlign || 0);

            if (ratioType === 'slice') {
              scaleY = scaleX = Math.max(scaleX, scaleY);
            } else if (ratioType === 'meet') {
              scaleY = scaleX = Math.min(scaleX, scaleY);
            }

            return [scaleX, 0, 0, scaleY, dx * (availWidth - elemWidth * scaleX), dy * (availHeight - elemHeight * scaleY)];
          }

          function parseStyleAttr(v) {
            var result = Object.create(null);
            v = (v || '').trim().split(/;/);

            for (var i = 0; i < v.length; i++) {
              var key = (v[i].split(':')[0] || '').trim(),
                  value = (v[i].split(':')[1] || '').trim();

              if (key) {
                result[key] = value;
              }
            }

            if (result['marker']) {
              if (!result['marker-start']) {
                result['marker-start'] = result['marker'];
              }

              if (!result['marker-mid']) {
                result['marker-mid'] = result['marker'];
              }

              if (!result['marker-end']) {
                result['marker-end'] = result['marker'];
              }
            }

            if (result['font']) {
              var fontFamily = null,
                  fontSize = null,
                  fontStyle = "normal",
                  fontWeight = "normal",
                  fontVariant = "normal";
              var parts = result['font'].split(/\s+/);

              for (var _i = 0; _i < parts.length; _i++) {
                switch (parts[_i]) {
                  case "normal":
                    break;

                  case "italic":
                  case "oblique":
                    fontStyle = parts[_i];
                    break;

                  case "small-caps":
                    fontVariant = parts[_i];
                    break;

                  case "bold":
                  case "bolder":
                  case "lighter":
                  case "100":
                  case "200":
                  case "300":
                  case "400":
                  case "500":
                  case "600":
                  case "700":
                  case "800":
                  case "900":
                    fontWeight = parts[_i];
                    break;

                  default:
                    if (!fontSize) {
                      fontSize = parts[_i].split('/')[0];
                    } else {
                      if (!fontFamily) {
                        fontFamily = parts[_i];
                      } else {
                        fontFamily += ' ' + parts[_i];
                      }
                    }

                    break;
                }
              }

              if (!result['font-style']) {
                result['font-style'] = fontStyle;
              }

              if (!result['font-variant']) {
                result['font-variant'] = fontVariant;
              }

              if (!result['font-weight']) {
                result['font-weight'] = fontWeight;
              }

              if (!result['font-size']) {
                result['font-size'] = fontSize;
              }

              if (!result['font-family']) {
                result['font-family'] = fontFamily;
              }
            }

            return result;
          }

          function parseSelector(v) {
            var parts = v.split(/(?=[.#])/g),
                ids = [],
                classes = [],
                tags = [],
                temp;

            for (var i = 0; i < parts.length; i++) {
              if (temp = parts[i].match(/^[#]([_A-Za-z0-9-]+)$/)) {
                ids.push(temp[1]);
              } else if (temp = parts[i].match(/^[.]([_A-Za-z0-9-]+)$/)) {
                classes.push(temp[1]);
              } else if (temp = parts[i].match(/^([_A-Za-z0-9-]+)$/)) {
                tags.push(temp[1]);
              } else if (parts[i] !== '*') {
                return;
              }
            }

            return {
              tags: tags,
              ids: ids,
              classes: classes,
              specificity: ids.length * 10000 + classes.length * 100 + tags.length
            };
          }

          function parseStyleSheet(v) {
            var parser = new StringParser(v.trim()),
                rules = [],
                rule;

            while (rule = parser.match(/^\s*([^\{\}]*?)\s*\{([^\{\}]*?)\}/, true)) {
              var selectors = rule[1].split(/\s*,\s*/g),
                  css = parseStyleAttr(rule[2]);

              for (var i = 0; i < selectors.length; i++) {
                var selector = parseSelector(selectors[i]);

                if (selector) {
                  rules.push({
                    selector: selector,
                    css: css
                  });
                }
              }
            }

            return rules;
          }

          function matchesSelector(elem, selector) {
            if (elem.nodeType !== 1) {
              return false;
            }

            for (var i = 0; i < selector.tags.length; i++) {
              if (selector.tags[i] !== elem.nodeName) {
                return false;
              }
            }

            for (var _i2 = 0; _i2 < selector.ids.length; _i2++) {
              if (selector.ids[_i2] !== elem.id) {
                return false;
              }
            }

            for (var _i3 = 0; _i3 < selector.classes.length; _i3++) {
              if (elem.classList.indexOf(selector.classes[_i3]) === -1) {
                return false;
              }
            }

            return true;
          }

          function getStyle(elem) {
            var result = Object.create(null);
            var specificities = Object.create(null);

            for (var i = 0; i < styleRules.length; i++) {
              var rule = styleRules[i];

              if (matchesSelector(elem, rule.selector)) {
                for (var key in rule.css) {
                  if (!(specificities[key] > rule.selector.specificity)) {
                    result[key] = rule.css[key];
                    specificities[key] = rule.selector.specificity;
                  }
                }
              }
            }

            return result;
          }

          function combineArrays(array1, array2) {
            return array1.concat(array2.slice(array1.length));
          }

          function getAscent(font, size) {
            return Math.max(font.ascender, (font.bbox[3] || font.bbox.maxY) * (font.scale || 1)) * size / 1000;
          }

          function getDescent(font, size) {
            return Math.min(font.descender, (font.bbox[1] || font.bbox.minY) * (font.scale || 1)) * size / 1000;
          }

          function getXHeight(font, size) {
            return (font.xHeight || 0.5 * (font.ascender - font.descender)) * size / 1000;
          }

          function getBaseline(font, size, baseline, shift) {
            var dy1, dy2;

            switch (baseline) {
              case 'middle':
                dy1 = 0.5 * getXHeight(font, size);
                break;

              case 'central':
                dy1 = 0.5 * (getDescent(font, size) + getAscent(font, size));
                break;

              case 'after-edge':
              case 'text-after-edge':
                dy1 = getDescent(font, size);
                break;

              case 'alphabetic':
              case 'auto':
              case 'baseline':
                dy1 = 0;
                break;

              case 'mathematical':
                dy1 = 0.5 * getAscent(font, size);
                break;

              case 'hanging':
                dy1 = 0.8 * getAscent(font, size);
                break;

              case 'before-edge':
              case 'text-before-edge':
                dy1 = getAscent(font, size);
                break;

              default:
                dy1 = 0;
                break;
            }

            switch (shift) {
              case 'baseline':
                dy2 = 0;
                break;

              case 'super':
                dy2 = 0.6 * size;
                break;

              case 'sub':
                dy2 = -0.6 * size;
                break;

              default:
                dy2 = shift;
                break;
            }

            return dy1 - dy2;
          }

          function getTextPos(font, size, text) {
            var encoded = font.encode('' + text),
                hex = encoded[0],
                pos = encoded[1],
                data = [];

            for (var i = 0; i < hex.length; i++) {
              var unicode = font.unicode ? font.unicode[parseInt(hex[i], 16)] : [text.charCodeAt(i)];
              data.push({
                glyph: hex[i],
                unicode: unicode,
                width: pos[i].advanceWidth * size / 1000,
                xOffset: pos[i].xOffset * size / 1000,
                yOffset: pos[i].yOffset * size / 1000,
                xAdvance: pos[i].xAdvance * size / 1000,
                yAdvance: pos[i].yAdvance * size / 1000
              });
            }

            return data;
          }

          function createSVGElement(obj, inherits) {
            switch (obj.nodeName) {
              case 'use':
                return new SvgElemUse(obj, inherits);

              case 'symbol':
                return new SvgElemSymbol(obj, inherits);

              case 'g':
                return new SvgElemGroup(obj, inherits);

              case 'a':
                return new SvgElemLink(obj, inherits);

              case 'svg':
                return new SvgElemSvg(obj, inherits);

              case 'image':
                return new SVGElemImage(obj, inherits);

              case 'rect':
                return new SvgElemRect(obj, inherits);

              case 'circle':
                return new SvgElemCircle(obj, inherits);

              case 'ellipse':
                return new SvgElemEllipse(obj, inherits);

              case 'line':
                return new SvgElemLine(obj, inherits);

              case 'polyline':
                return new SvgElemPolyline(obj, inherits);

              case 'polygon':
                return new SvgElemPolygon(obj, inherits);

              case 'path':
                return new SvgElemPath(obj, inherits);

              case 'text':
                return new SvgElemText(obj, inherits);

              case 'tspan':
                return new SvgElemTspan(obj, inherits);

              case 'textPath':
                return new SvgElemTextPath(obj, inherits);

              case '#text':
              case '#cdata-section':
                return new SvgElemTextNode(obj, inherits);

              default:
                return new SvgElem(obj, inherits);
            }
          }

          var StringParser = function StringParser(str) {
            this.match = function (exp, all) {
              var temp = str.match(exp);

              if (!temp || temp.index !== 0) {
                return;
              }

              str = str.substring(temp[0].length);
              return all ? temp : temp[0];
            };

            this.matchSeparator = function () {
              return this.match(/^(?:\s*,\s*|\s*|)/);
            };

            this.matchSpace = function () {
              return this.match(/^(?:\s*)/);
            };

            this.matchLengthUnit = function () {
              return this.match(/^(?:px|pt|cm|mm|in|pc|em|ex|%|)/);
            };

            this.matchNumber = function () {
              return this.match(/^(?:[-+]?(?:[0-9]+[.][0-9]+|[0-9]+[.]|[.][0-9]+|[0-9]+)(?:[eE][-+]?[0-9]+)?)/);
            };

            this.matchAll = function () {
              return this.match(/^[\s\S]+/);
            };
          };

          var BezierSegment = function BezierSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y) {
            var divisions = 6 * precision;
            var equationX = [p1x, -3 * p1x + 3 * c1x, 3 * p1x - 6 * c1x + 3 * c2x, -p1x + 3 * c1x - 3 * c2x + p2x];
            var equationY = [p1y, -3 * p1y + 3 * c1y, 3 * p1y - 6 * c1y + 3 * c2y, -p1y + 3 * c1y - 3 * c2y + p2y];
            var derivativeX = [-3 * p1x + 3 * c1x, 6 * p1x - 12 * c1x + 6 * c2x, -3 * p1x + 9 * c1x - 9 * c2x + 3 * p2x];
            var derivativeY = [-3 * p1y + 3 * c1y, 6 * p1y - 12 * c1y + 6 * c2y, -3 * p1y + 9 * c1y - 9 * c2y + 3 * p2y];
            var lengthMap = [0];

            for (var i = 1; i <= divisions; i++) {
              var t = (i - 0.5) / divisions;
              var dx = getCurveValue(t, derivativeX) / divisions,
                  dy = getCurveValue(t, derivativeY) / divisions,
                  l = Math.sqrt(dx * dx + dy * dy);
              lengthMap[i] = lengthMap[i - 1] + l;
            }

            this.totalLength = lengthMap[divisions];
            this.startPoint = [p1x, p1y, isEqual(p1x, c1x) && isEqual(p1y, c1y) ? Math.atan2(c2y - c1y, c2x - c1x) : Math.atan2(c1y - p1y, c1x - p1x)];
            this.endPoint = [p2x, p2y, isEqual(c2x, p2x) && isEqual(c2y, p2y) ? Math.atan2(c2y - c1y, c2x - c1x) : Math.atan2(p2y - c2y, p2x - c2x)];

            this.getBoundingBox = function () {
              var temp;
              var minX = getCurveValue(0, equationX),
                  minY = getCurveValue(0, equationY),
                  maxX = getCurveValue(1, equationX),
                  maxY = getCurveValue(1, equationY);

              if (minX > maxX) {
                temp = maxX;
                maxX = minX;
                minX = temp;
              }

              if (minY > maxY) {
                temp = maxY;
                maxY = minY;
                minY = temp;
              }

              var rootsX = solveEquation(derivativeX);

              for (var _i4 = 0; _i4 < rootsX.length; _i4++) {
                if (rootsX[_i4] >= 0 && rootsX[_i4] <= 1) {
                  var _x = getCurveValue(rootsX[_i4], equationX);

                  if (_x < minX) {
                    minX = _x;
                  }

                  if (_x > maxX) {
                    maxX = _x;
                  }
                }
              }

              var rootsY = solveEquation(derivativeY);

              for (var _i5 = 0; _i5 < rootsY.length; _i5++) {
                if (rootsY[_i5] >= 0 && rootsY[_i5] <= 1) {
                  var _y = getCurveValue(rootsY[_i5], equationY);

                  if (_y < minY) {
                    minY = _y;
                  }

                  if (_y > maxY) {
                    maxY = _y;
                  }
                }
              }

              return [minX, minY, maxX, maxY];
            };

            this.getPointAtLength = function (l) {
              if (isEqual(l, 0)) {
                return this.startPoint;
              }

              if (isEqual(l, this.totalLength)) {
                return this.endPoint;
              }

              if (l < 0 || l > this.totalLength) {
                return;
              }

              for (var _i6 = 1; _i6 <= divisions; _i6++) {
                var l1 = lengthMap[_i6 - 1],
                    l2 = lengthMap[_i6];

                if (l1 <= l && l <= l2) {
                  var _t = (_i6 - (l2 - l) / (l2 - l1)) / divisions,
                      _x2 = getCurveValue(_t, equationX),
                      _y2 = getCurveValue(_t, equationY),
                      _dx = getCurveValue(_t, derivativeX),
                      _dy = getCurveValue(_t, derivativeY);

                  return [_x2, _y2, Math.atan2(_dy, _dx)];
                }
              }
            };
          };

          var LineSegment = function LineSegment(p1x, p1y, p2x, p2y) {
            this.totalLength = Math.sqrt((p2x - p1x) * (p2x - p1x) + (p2y - p1y) * (p2y - p1y));
            this.startPoint = [p1x, p1y, Math.atan2(p2y - p1y, p2x - p1x)];
            this.endPoint = [p2x, p2y, Math.atan2(p2y - p1y, p2x - p1x)];

            this.getBoundingBox = function () {
              return [Math.min(this.startPoint[0], this.endPoint[0]), Math.min(this.startPoint[1], this.endPoint[1]), Math.max(this.startPoint[0], this.endPoint[0]), Math.max(this.startPoint[1], this.endPoint[1])];
            };

            this.getPointAtLength = function (l) {
              if (l >= 0 && l <= this.totalLength) {
                var r = l / this.totalLength || 0,
                    _x3 = this.startPoint[0] + r * (this.endPoint[0] - this.startPoint[0]),
                    _y3 = this.startPoint[1] + r * (this.endPoint[1] - this.startPoint[1]);

                return [_x3, _y3, this.startPoint[2]];
              }
            };
          };

          var SvgShape = function SvgShape() {
            this.pathCommands = [];
            this.pathSegments = [];
            this.startPoint = null;
            this.endPoint = null;
            this.totalLength = 0;
            var startX = 0,
                startY = 0,
                currX = 0,
                currY = 0,
                lastCom,
                lastCtrlX,
                lastCtrlY;

            this.move = function (x, y) {
              startX = currX = x;
              startY = currY = y;
              return null;
            };

            this.line = function (x, y) {
              var segment = new LineSegment(currX, currY, x, y);
              currX = x;
              currY = y;
              return segment;
            };

            this.curve = function (c1x, c1y, c2x, c2y, x, y) {
              var segment = new BezierSegment(currX, currY, c1x, c1y, c2x, c2y, x, y);
              currX = x;
              currY = y;
              return segment;
            };

            this.close = function () {
              var segment = new LineSegment(currX, currY, startX, startY);
              currX = startX;
              currY = startY;
              return segment;
            };

            this.addCommand = function (data) {
              this.pathCommands.push(data);
              var segment = this[data[0]].apply(this, data.slice(3));

              if (segment) {
                segment.hasStart = data[1];
                segment.hasEnd = data[2];
                this.startPoint = this.startPoint || segment.startPoint;
                this.endPoint = segment.endPoint;
                this.pathSegments.push(segment);
                this.totalLength += segment.totalLength;
              }
            };

            this.M = function (x, y) {
              this.addCommand(['move', true, true, x, y]);
              lastCom = 'M';
              return this;
            };

            this.m = function (x, y) {
              return this.M(currX + x, currY + y);
            };

            this.Z = this.z = function () {
              this.addCommand(['close', true, true]);
              lastCom = 'Z';
              return this;
            };

            this.L = function (x, y) {
              this.addCommand(['line', true, true, x, y]);
              lastCom = 'L';
              return this;
            };

            this.l = function (x, y) {
              return this.L(currX + x, currY + y);
            };

            this.H = function (x) {
              return this.L(x, currY);
            };

            this.h = function (x) {
              return this.L(currX + x, currY);
            };

            this.V = function (y) {
              return this.L(currX, y);
            };

            this.v = function (y) {
              return this.L(currX, currY + y);
            };

            this.C = function (c1x, c1y, c2x, c2y, x, y) {
              this.addCommand(['curve', true, true, c1x, c1y, c2x, c2y, x, y]);
              lastCom = 'C';
              lastCtrlX = c2x;
              lastCtrlY = c2y;
              return this;
            };

            this.c = function (c1x, c1y, c2x, c2y, x, y) {
              return this.C(currX + c1x, currY + c1y, currX + c2x, currY + c2y, currX + x, currY + y);
            };

            this.S = function (c1x, c1y, x, y) {
              return this.C(currX + (lastCom === 'C' ? currX - lastCtrlX : 0), currY + (lastCom === 'C' ? currY - lastCtrlY : 0), c1x, c1y, x, y);
            };

            this.s = function (c1x, c1y, x, y) {
              return this.C(currX + (lastCom === 'C' ? currX - lastCtrlX : 0), currY + (lastCom === 'C' ? currY - lastCtrlY : 0), currX + c1x, currY + c1y, currX + x, currY + y);
            };

            this.Q = function (cx, cy, x, y) {
              var c1x = currX + 2 / 3 * (cx - currX),
                  c1y = currY + 2 / 3 * (cy - currY),
                  c2x = x + 2 / 3 * (cx - x),
                  c2y = y + 2 / 3 * (cy - y);
              this.addCommand(['curve', true, true, c1x, c1y, c2x, c2y, x, y]);
              lastCom = 'Q';
              lastCtrlX = cx;
              lastCtrlY = cy;
              return this;
            };

            this.q = function (c1x, c1y, x, y) {
              return this.Q(currX + c1x, currY + c1y, currX + x, currY + y);
            };

            this.T = function (x, y) {
              return this.Q(currX + (lastCom === 'Q' ? currX - lastCtrlX : 0), currY + (lastCom === 'Q' ? currY - lastCtrlY : 0), x, y);
            };

            this.t = function (x, y) {
              return this.Q(currX + (lastCom === 'Q' ? currX - lastCtrlX : 0), currY + (lastCom === 'Q' ? currY - lastCtrlY : 0), currX + x, currY + y);
            };

            this.A = function (rx, ry, fi, fa, fs, x, y) {
              if (isEqual(rx, 0) || isEqual(ry, 0)) {
                this.addCommand(['line', true, true, x, y]);
              } else {
                fi = fi * (Math.PI / 180);
                rx = Math.abs(rx);
                ry = Math.abs(ry);
                fa = 1 * !!fa;
                fs = 1 * !!fs;
                var x1 = Math.cos(fi) * (currX - x) / 2 + Math.sin(fi) * (currY - y) / 2,
                    y1 = Math.cos(fi) * (currY - y) / 2 - Math.sin(fi) * (currX - x) / 2,
                    lambda = x1 * x1 / (rx * rx) + y1 * y1 / (ry * ry);

                if (lambda > 1) {
                  rx *= Math.sqrt(lambda);
                  ry *= Math.sqrt(lambda);
                }

                var r = Math.sqrt(Math.max(0, rx * rx * ry * ry - rx * rx * y1 * y1 - ry * ry * x1 * x1) / (rx * rx * y1 * y1 + ry * ry * x1 * x1)),
                    x2 = (fa === fs ? -1 : 1) * r * rx * y1 / ry,
                    y2 = (fa === fs ? 1 : -1) * r * ry * x1 / rx;
                var cx = Math.cos(fi) * x2 - Math.sin(fi) * y2 + (currX + x) / 2,
                    cy = Math.sin(fi) * x2 + Math.cos(fi) * y2 + (currY + y) / 2,
                    th1 = Math.atan2((y1 - y2) / ry, (x1 - x2) / rx),
                    th2 = Math.atan2((-y1 - y2) / ry, (-x1 - x2) / rx);

                if (fs === 0 && th2 - th1 > 0) {
                  th2 -= 2 * Math.PI;
                } else if (fs === 1 && th2 - th1 < 0) {
                  th2 += 2 * Math.PI;
                }

                var segms = Math.ceil(Math.abs(th2 - th1) / (Math.PI / precision));

                for (var i = 0; i < segms; i++) {
                  var th3 = th1 + i * (th2 - th1) / segms,
                      th4 = th1 + (i + 1) * (th2 - th1) / segms,
                      t = 4 / 3 * Math.tan((th4 - th3) / 4);
                  var c1x = cx + Math.cos(fi) * rx * (Math.cos(th3) - t * Math.sin(th3)) - Math.sin(fi) * ry * (Math.sin(th3) + t * Math.cos(th3)),
                      c1y = cy + Math.sin(fi) * rx * (Math.cos(th3) - t * Math.sin(th3)) + Math.cos(fi) * ry * (Math.sin(th3) + t * Math.cos(th3)),
                      c2x = cx + Math.cos(fi) * rx * (Math.cos(th4) + t * Math.sin(th4)) - Math.sin(fi) * ry * (Math.sin(th4) - t * Math.cos(th4)),
                      c2y = cy + Math.sin(fi) * rx * (Math.cos(th4) + t * Math.sin(th4)) + Math.cos(fi) * ry * (Math.sin(th4) - t * Math.cos(th4)),
                      endX = cx + Math.cos(fi) * rx * Math.cos(th4) - Math.sin(fi) * ry * Math.sin(th4),
                      endY = cy + Math.sin(fi) * rx * Math.cos(th4) + Math.cos(fi) * ry * Math.sin(th4);
                  this.addCommand(['curve', i === 0, i === segms - 1, c1x, c1y, c2x, c2y, endX, endY]);
                }
              }

              lastCom = 'A';
              return this;
            };

            this.a = function (rx, ry, fi, fa, fs, x, y) {
              return this.A(rx, ry, fi, fa, fs, currX + x, currY + y);
            };

            this.path = function (d) {
              var command,
                  value,
                  temp,
                  parser = new StringParser((d || '').trim());

              while (command = parser.match(/^[astvzqmhlcASTVZQMHLC]/)) {
                parser.matchSeparator();
                var values = [];

                while (value = PathFlags[command + values.length] ? parser.match(/^[01]/) : parser.matchNumber()) {
                  parser.matchSeparator();

                  if (values.length === PathArguments[command]) {
                    this[command].apply(this, values);
                    values = [];

                    if (command === 'M') {
                      command = 'L';
                    } else if (command === 'm') {
                      command = 'l';
                    }
                  }

                  values.push(Number(value));
                }

                if (values.length === PathArguments[command]) {
                  this[command].apply(this, values);
                } else {
                  warningCallback('SvgPath: command ' + command + ' with ' + values.length + ' numbers');
                  return;
                }
              }

              if (temp = parser.matchAll()) {
                warningCallback('SvgPath: unexpected string ' + temp);
              }

              return this;
            };

            this.getBoundingBox = function () {
              var bbox = [Infinity, Infinity, -Infinity, -Infinity];

              function addBounds(bbox1) {
                if (bbox1[0] < bbox[0]) {
                  bbox[0] = bbox1[0];
                }

                if (bbox1[2] > bbox[2]) {
                  bbox[2] = bbox1[2];
                }

                if (bbox1[1] < bbox[1]) {
                  bbox[1] = bbox1[1];
                }

                if (bbox1[3] > bbox[3]) {
                  bbox[3] = bbox1[3];
                }
              }

              for (var i = 0; i < this.pathSegments.length; i++) {
                addBounds(this.pathSegments[i].getBoundingBox());
              }

              if (bbox[0] === Infinity) {
                bbox[0] = 0;
              }

              if (bbox[1] === Infinity) {
                bbox[1] = 0;
              }

              if (bbox[2] === -Infinity) {
                bbox[2] = 0;
              }

              if (bbox[3] === -Infinity) {
                bbox[3] = 0;
              }

              return bbox;
            };

            this.getPointAtLength = function (l) {
              if (l >= 0 && l <= this.totalLength) {
                var temp;

                for (var i = 0; i < this.pathSegments.length; i++) {
                  if (temp = this.pathSegments[i].getPointAtLength(l)) {
                    return temp;
                  }

                  l -= this.pathSegments[i].totalLength;
                }

                return this.endPoint;
              }
            };

            this.transform = function (m) {
              this.pathSegments = [];
              this.startPoint = null;
              this.endPoint = null;
              this.totalLength = 0;

              for (var i = 0; i < this.pathCommands.length; i++) {
                var data = this.pathCommands.shift();

                for (var j = 3; j < data.length; j += 2) {
                  var p = transformPoint([data[j], data[j + 1]], m);
                  data[j] = p[0];
                  data[j + 1] = p[1];
                }

                this.addCommand(data);
              }

              return this;
            };

            this.mergeShape = function (shape) {
              for (var i = 0; i < shape.pathCommands.length; i++) {
                this.addCommand(shape.pathCommands[i].slice());
              }

              return this;
            };

            this.clone = function () {
              return new SvgShape().mergeShape(this);
            };

            this.insertInDocument = function () {
              for (var i = 0; i < this.pathCommands.length; i++) {
                var command = this.pathCommands[i][0],
                    values = this.pathCommands[i].slice(3);

                switch (command) {
                  case 'move':
                    doc.moveTo(values[0], values[1]);
                    break;

                  case 'line':
                    doc.lineTo(values[0], values[1]);
                    break;

                  case 'curve':
                    doc.bezierCurveTo(values[0], values[1], values[2], values[3], values[4], values[5]);
                    break;

                  case 'close':
                    doc.closePath();
                    break;
                }
              }
            };

            this.getSubPaths = function () {
              var subPaths = [],
                  shape = new SvgShape();

              for (var i = 0; i < this.pathCommands.length; i++) {
                var data = this.pathCommands[i],
                    command = this.pathCommands[i][0];

                if (command === 'move' && i !== 0) {
                  subPaths.push(shape);
                  shape = new SvgShape();
                }

                shape.addCommand(data);
              }

              subPaths.push(shape);
              return subPaths;
            };

            this.getMarkers = function () {
              var markers = [],
                  subPaths = this.getSubPaths();

              for (var i = 0; i < subPaths.length; i++) {
                var subPath = subPaths[i],
                    subPathMarkers = [];

                for (var j = 0; j < subPath.pathSegments.length; j++) {
                  var segment = subPath.pathSegments[j];

                  if (isNotEqual(segment.totalLength, 0) || j === 0 || j === subPath.pathSegments.length - 1) {
                    if (segment.hasStart) {
                      var startMarker = segment.getPointAtLength(0),
                          prevEndMarker = subPathMarkers.pop();

                      if (prevEndMarker) {
                        startMarker[2] = 0.5 * (prevEndMarker[2] + startMarker[2]);
                      }

                      subPathMarkers.push(startMarker);
                    }

                    if (segment.hasEnd) {
                      var endMarker = segment.getPointAtLength(segment.totalLength);
                      subPathMarkers.push(endMarker);
                    }
                  }
                }

                markers = markers.concat(subPathMarkers);
              }

              return markers;
            };
          };

          var SvgElem = function SvgElem(obj, inherits) {
            var styleCache = Object.create(null);
            var childrenCache = null;
            this.name = obj.nodeName;
            this.isOuterElement = obj === svg || !obj.parentNode;
            this.inherits = inherits || (!this.isOuterElement ? createSVGElement(obj.parentNode, null) : null);
            this.stack = this.inherits ? this.inherits.stack.concat(obj) : [obj];
            this.style = parseStyleAttr(typeof obj.getAttribute === 'function' && obj.getAttribute('style'));
            this.css = useCSS ? getComputedStyle(obj) : getStyle(obj);
            this.allowedChildren = [];

            this.attr = function (key) {
              if (typeof obj.getAttribute === 'function') {
                return obj.getAttribute(key);
              }
            };

            this.resolveUrl = function (value) {
              var temp = (value || '').match(/^\s*(?:url\("(.*)#(.*)"\)|url\('(.*)#(.*)'\)|url\((.*)#(.*)\)|(.*)#(.*))\s*$/) || [];
              var file = temp[1] || temp[3] || temp[5] || temp[7],
                  id = temp[2] || temp[4] || temp[6] || temp[8];

              if (id) {
                if (!file) {
                  var svgObj = svg.getElementById(id);

                  if (svgObj) {
                    if (this.stack.indexOf(svgObj) === -1) {
                      return svgObj;
                    } else {
                      warningCallback('SVGtoPDF: loop of circular references for id "' + id + '"');
                      return;
                    }
                  }
                }

                if (documentCallback) {
                  var svgs = documentCache[file];

                  if (!svgs) {
                    svgs = documentCallback(file);

                    if (!isArrayLike(svgs)) {
                      svgs = [svgs];
                    }

                    for (var i = 0; i < svgs.length; i++) {
                      if (typeof svgs[i] === 'string') {
                        svgs[i] = parseXml(svgs[i]);
                      }
                    }

                    documentCache[file] = svgs;
                  }

                  for (var _i7 = 0; _i7 < svgs.length; _i7++) {
                    var _svgObj = svgs[_i7].getElementById(id);

                    if (_svgObj) {
                      if (this.stack.indexOf(_svgObj) === -1) {
                        return _svgObj;
                      } else {
                        warningCallback('SVGtoPDF: loop of circular references for id "' + file + '#' + id + '"');
                        return;
                      }
                    }
                  }
                }
              }
            };

            this.computeUnits = function (value, unit, percent, isFontSize) {
              if (unit === '%') {
                return parseFloat(value) / 100 * (isFontSize || percent != null ? percent : this.getViewport());
              } else if (unit === 'ex' || unit === 'em') {
                return value * {
                  'em': 1,
                  'ex': 0.5
                }[unit] * (isFontSize ? percent : this.get('font-size'));
              } else {
                return value * {
                  '': 1,
                  'px': 1,
                  'pt': 96 / 72,
                  'cm': 96 / 2.54,
                  'mm': 96 / 25.4,
                  'in': 96,
                  'pc': 96 / 6
                }[unit];
              }
            };

            this.computeLength = function (value, percent, initial, isFontSize) {
              var parser = new StringParser((value || '').trim()),
                  temp1,
                  temp2;

              if (typeof (temp1 = parser.matchNumber()) === 'string' && typeof (temp2 = parser.matchLengthUnit()) === 'string' && !parser.matchAll()) {
                return this.computeUnits(temp1, temp2, percent, isFontSize);
              }

              return initial;
            };

            this.computeLengthList = function (value, percent, strict) {
              var parser = new StringParser((value || '').trim()),
                  result = [],
                  temp1,
                  temp2;

              while (typeof (temp1 = parser.matchNumber()) === 'string' && typeof (temp2 = parser.matchLengthUnit()) === 'string') {
                result.push(this.computeUnits(temp1, temp2, percent));
                parser.matchSeparator();
              }

              if (strict && parser.matchAll()) {
                return;
              }

              return result;
            };

            this.getLength = function (key, percent, initial) {
              return this.computeLength(this.attr(key), percent, initial);
            };

            this.getLengthList = function (key, percent) {
              return this.computeLengthList(this.attr(key), percent);
            };

            this.getUrl = function (key) {
              return this.resolveUrl(this.attr(key));
            };

            this.getNumberList = function (key) {
              var parser = new StringParser((this.attr(key) || '').trim()),
                  result = [],
                  temp;

              while (temp = parser.matchNumber()) {
                result.push(Number(temp));
                parser.matchSeparator();
              }

              result.error = parser.matchAll();
              return result;
            };

            this.getViewbox = function (key, initial) {
              var viewBox = this.getNumberList(key);

              if (viewBox.length === 4 && viewBox[2] >= 0 && viewBox[3] >= 0) {
                return viewBox;
              }

              return initial;
            };

            this.getPercent = function (key, initial) {
              var value = this.attr(key);
              var parser = new StringParser((value || '').trim()),
                  temp1,
                  temp2;
              var number = parser.matchNumber();

              if (!number) {
                return initial;
              }

              if (parser.match('%')) {
                number *= 0.01;
              }

              if (parser.matchAll()) {
                return initial;
              }

              return Math.max(0, Math.min(1, number));
            };

            this.chooseValue = function (args) {
              for (var i = 0; i < arguments.length; i++) {
                if (arguments[i] != null && arguments[i] === arguments[i]) {
                  return arguments[i];
                }
              }

              return arguments[arguments.length - 1];
            };

            this.get = function (key) {
              if (styleCache[key] !== undefined) {
                return styleCache[key];
              }

              var keyInfo = Properties[key] || {},
                  value,
                  result;

              for (var i = 0; i < 3; i++) {
                switch (i) {
                  case 0:
                    if (key !== 'transform') {
                      // the CSS transform behaves strangely
                      value = this.css[keyInfo.css || key];
                    }

                    break;

                  case 1:
                    value = this.style[key];
                    break;

                  case 2:
                    value = this.attr(key);
                    break;
                }

                if (value === 'inherit') {
                  result = this.inherits ? this.inherits.get(key) : keyInfo.initial;

                  if (result != null) {
                    return styleCache[key] = result;
                  }
                }

                if (keyInfo.values != null) {
                  result = keyInfo.values[value];

                  if (result != null) {
                    return styleCache[key] = result;
                  }
                }

                if (value != null) {
                  var parsed = void 0;

                  switch (key) {
                    case 'font-size':
                      result = this.computeLength(value, this.inherits ? this.inherits.get(key) : keyInfo.initial, undefined, true);
                      break;

                    case 'baseline-shift':
                      result = this.computeLength(value, this.get('font-size'));
                      break;

                    case 'font-family':
                      result = value || undefined;
                      break;

                    case 'opacity':
                    case 'stroke-opacity':
                    case 'fill-opacity':
                    case 'stop-opacity':
                      parsed = parseFloat(value);

                      if (!isNaN(parsed)) {
                        result = Math.max(0, Math.min(1, parsed));
                      }

                      break;

                    case 'transform':
                      result = parseTranform(value);
                      break;

                    case 'stroke-dasharray':
                      if (value === 'none') {
                        result = [];
                      } else if (parsed = this.computeLengthList(value, this.getViewport(), true)) {
                        var sum = 0,
                            error = false;

                        for (var j = 0; j < parsed.length; j++) {
                          if (parsed[j] < 0) {
                            error = true;
                          }

                          sum += parsed[j];
                        }

                        if (!error) {
                          if (parsed.length % 2 === 1) {
                            parsed = parsed.concat(parsed);
                          }

                          result = sum === 0 ? [] : parsed;
                        }
                      }

                      break;

                    case 'color':
                      if (value === 'none' || value === 'transparent') {
                        result = 'none';
                      } else {
                        result = parseColor(value);
                      }

                      break;

                    case 'fill':
                    case 'stroke':
                      if (value === 'none' || value === 'transparent') {
                        result = 'none';
                      } else if (value === 'currentColor') {
                        result = this.get('color');
                      } else if (parsed = parseColor(value)) {
                        return parsed;
                      } else if (parsed = (value || '').split(' ')) {
                        var object = this.resolveUrl(parsed[0]),
                            fallbackColor = parseColor(parsed[1]);

                        if (object == null) {
                          result = fallbackColor;
                        } else if (object.nodeName === 'linearGradient' || object.nodeName === 'radialGradient') {
                          result = new SvgElemGradient(object, null, fallbackColor);
                        } else if (object.nodeName === 'pattern') {
                          result = new SvgElemPattern(object, null, fallbackColor);
                        } else {
                          result = fallbackColor;
                        }
                      }

                      break;

                    case 'stop-color':
                      if (value === 'none' || value === 'transparent') {
                        result = 'none';
                      } else if (value === 'currentColor') {
                        result = this.get('color');
                      } else {
                        result = parseColor(value);
                      }

                      break;

                    case 'marker-start':
                    case 'marker-mid':
                    case 'marker-end':
                    case 'clip-path':
                    case 'mask':
                      if (value === 'none') {
                        result = 'none';
                      } else {
                        result = this.resolveUrl(value);
                      }

                      break;

                    case 'stroke-width':
                      parsed = this.computeLength(value, this.getViewport());

                      if (parsed != null && parsed >= 0) {
                        result = parsed;
                      }

                      break;

                    case 'stroke-miterlimit':
                      parsed = parseFloat(value);

                      if (parsed != null && parsed >= 1) {
                        result = parsed;
                      }

                      break;

                    case 'word-spacing':
                    case 'letter-spacing':
                      result = this.computeLength(value, this.getViewport());
                      break;

                    case 'stroke-dashoffset':
                      result = this.computeLength(value, this.getViewport());

                      if (result != null) {
                        if (result < 0) {
                          // fix for crbug.com/660850
                          var dasharray = this.get('stroke-dasharray');

                          for (var _j = 0; _j < dasharray.length; _j++) {
                            result += dasharray[_j];
                          }
                        }
                      }

                      break;
                  }

                  if (result != null) {
                    return styleCache[key] = result;
                  }
                }
              }

              return styleCache[key] = keyInfo.inherit && this.inherits ? this.inherits.get(key) : keyInfo.initial;
            };

            this.getChildren = function () {
              if (childrenCache != null) {
                return childrenCache;
              }

              var children = [];

              for (var i = 0; i < obj.childNodes.length; i++) {
                var child = obj.childNodes[i];

                if (!child.error && this.allowedChildren.indexOf(child.nodeName) !== -1) {
                  children.push(createSVGElement(child, this));
                }
              }

              return childrenCache = children;
            };

            this.getParentVWidth = function () {
              return this.inherits ? this.inherits.getVWidth() : viewportWidth;
            };

            this.getParentVHeight = function () {
              return this.inherits ? this.inherits.getVHeight() : viewportHeight;
            };

            this.getParentViewport = function () {
              return Math.sqrt(0.5 * this.getParentVWidth() * this.getParentVWidth() + 0.5 * this.getParentVHeight() * this.getParentVHeight());
            };

            this.getVWidth = function () {
              return this.getParentVWidth();
            };

            this.getVHeight = function () {
              return this.getParentVHeight();
            };

            this.getViewport = function () {
              return Math.sqrt(0.5 * this.getVWidth() * this.getVWidth() + 0.5 * this.getVHeight() * this.getVHeight());
            };

            this.getBoundingBox = function () {
              var shape = this.getBoundingShape();
              return shape.getBoundingBox();
            };
          };

          var SvgElemStylable = function SvgElemStylable(obj, inherits) {
            SvgElem.call(this, obj, inherits);

            this.transform = function () {
              doc.transform.apply(doc, this.getTransformation());
            };

            this.clip = function () {
              if (this.get('clip-path') !== 'none') {
                var clipPath = new SvgElemClipPath(this.get('clip-path'), null);
                clipPath.useMask(this.getBoundingBox());
                return true;
              }
            };

            this.mask = function () {
              if (this.get('mask') !== 'none') {
                var mask = new SvgElemMask(this.get('mask'), null);
                mask.useMask(this.getBoundingBox());
                return true;
              }
            };

            this.getFill = function (isClip, isMask) {
              var opacity = this.get('opacity'),
                  fill = this.get('fill'),
                  fillOpacity = this.get('fill-opacity');

              if (isClip) {
                return DefaultColors.white;
              }

              if (fill !== 'none' && opacity && fillOpacity) {
                if (fill instanceof SvgElemGradient || fill instanceof SvgElemPattern) {
                  return fill.getPaint(this.getBoundingBox(), fillOpacity * opacity, isClip, isMask);
                }

                return opacityToColor(fill, fillOpacity * opacity, isMask);
              }
            };

            this.getStroke = function (isClip, isMask) {
              var opacity = this.get('opacity'),
                  stroke = this.get('stroke'),
                  strokeOpacity = this.get('stroke-opacity');

              if (isClip || isEqual(this.get('stroke-width'), 0)) {
                return;
              }

              if (stroke !== 'none' && opacity && strokeOpacity) {
                if (stroke instanceof SvgElemGradient || stroke instanceof SvgElemPattern) {
                  return stroke.getPaint(this.getBoundingBox(), strokeOpacity * opacity, isClip, isMask);
                }

                return opacityToColor(stroke, strokeOpacity * opacity, isMask);
              }
            };
          };

          var SvgElemHasChildren = function SvgElemHasChildren(obj, inherits) {
            SvgElemStylable.call(this, obj, inherits);
            this.allowedChildren = ['use', 'g', 'a', 'svg', 'image', 'rect', 'circle', 'ellipse', 'line', 'polyline', 'polygon', 'path', 'text'];

            this.getBoundingShape = function () {
              var shape = new SvgShape(),
                  children = this.getChildren();

              for (var i = 0; i < children.length; i++) {
                if (children[i].get('display') !== 'none') {
                  if (typeof children[i].getBoundingShape === 'function') {
                    var childShape = children[i].getBoundingShape().clone();

                    if (typeof children[i].getTransformation === 'function') {
                      childShape.transform(children[i].getTransformation());
                    }

                    shape.mergeShape(childShape);
                  }
                }
              }

              return shape;
            };

            this.drawChildren = function (isClip, isMask) {
              var children = this.getChildren();

              for (var i = 0; i < children.length; i++) {
                if (children[i].get('display') !== 'none') {
                  if (typeof children[i].drawInDocument === 'function') {
                    children[i].drawInDocument(isClip, isMask);
                  }
                }
              }
            };
          };

          var SvgElemContainer = function SvgElemContainer(obj, inherits) {
            SvgElemHasChildren.call(this, obj, inherits);

            this.drawContent = function (isClip, isMask) {
              this.transform();
              var clipped = this.clip(),
                  masked = this.mask(),
                  group;

              if ((this.get('opacity') < 1 || clipped || masked) && !isClip) {
                group = docBeginGroup(getPageBBox());
              }

              this.drawChildren(isClip, isMask);

              if (group) {
                docEndGroup(group);
                doc.fillOpacity(this.get('opacity'));
                docInsertGroup(group);
              }
            };
          };

          var SvgElemUse = function SvgElemUse(obj, inherits) {
            SvgElemContainer.call(this, obj, inherits);
            var x = this.getLength('x', this.getVWidth(), 0),
                y = this.getLength('y', this.getVHeight(), 0),
                child = this.getUrl('href') || this.getUrl('xlink:href');

            if (child) {
              child = createSVGElement(child, this);
            }

            this.getChildren = function () {
              return child ? [child] : [];
            };

            this.drawInDocument = function (isClip, isMask) {
              doc.save();
              this.drawContent(isClip, isMask);
              doc.restore();
            };

            this.getTransformation = function () {
              return multiplyMatrix(this.get('transform'), [1, 0, 0, 1, x, y]);
            };
          };

          var SvgElemSymbol = function SvgElemSymbol(obj, inherits) {
            SvgElemContainer.call(this, obj, inherits);
            var width = this.getLength('width', this.getParentVWidth(), this.getParentVWidth()),
                height = this.getLength('height', this.getParentVHeight(), this.getParentVHeight());

            if (inherits instanceof SvgElemUse) {
              width = inherits.getLength('width', inherits.getParentVWidth(), width);
              height = inherits.getLength('height', inherits.getParentVHeight(), height);
            }

            var aspectRatio = (this.attr('preserveAspectRatio') || '').trim(),
                viewBox = this.getViewbox('viewBox', [0, 0, width, height]);

            this.getVWidth = function () {
              return viewBox[2];
            };

            this.getVHeight = function () {
              return viewBox[3];
            };

            this.drawInDocument = function (isClip, isMask) {
              doc.save();
              this.drawContent(isClip, isMask);
              doc.restore();
            };

            this.getTransformation = function () {
              return multiplyMatrix(parseAspectRatio(aspectRatio, width, height, viewBox[2], viewBox[3]), [1, 0, 0, 1, -viewBox[0], -viewBox[1]]);
            };
          };

          var SvgElemGroup = function SvgElemGroup(obj, inherits) {
            SvgElemContainer.call(this, obj, inherits);

            this.drawInDocument = function (isClip, isMask) {
              doc.save();

              if (this.link && !isClip && !isMask) {
                this.addLink();
              }

              this.drawContent(isClip, isMask);
              doc.restore();
            };

            this.getTransformation = function () {
              return this.get('transform');
            };
          };

          var SvgElemLink = function SvgElemLink(obj, inherits) {
            if (inherits && inherits.isText) {
              SvgElemTspan.call(this, obj, inherits);
              this.allowedChildren = ['textPath', 'tspan', '#text', '#cdata-section', 'a'];
            } else {
              SvgElemGroup.call(this, obj, inherits);
            }

            this.link = this.attr('href') || this.attr('xlink:href');

            this.addLink = function () {
              if (this.link.match(/^(?:[a-z][a-z0-9+.-]*:|\/\/)?/i) && this.getChildren().length) {
                var bbox = this.getBoundingShape().transform(getGlobalMatrix()).getBoundingBox();
                docInsertLink(bbox[0], bbox[1], bbox[2], bbox[3], this.link);
              }
            };
          };

          var SvgElemSvg = function SvgElemSvg(obj, inherits) {
            SvgElemContainer.call(this, obj, inherits);
            var width = this.getLength('width', this.getParentVWidth(), this.getParentVWidth()),
                height = this.getLength('height', this.getParentVHeight(), this.getParentVHeight()),
                x = this.getLength('x', this.getParentVWidth(), 0),
                y = this.getLength('y', this.getParentVHeight(), 0);

            if (inherits instanceof SvgElemUse) {
              width = inherits.getLength('width', inherits.getParentVWidth(), width);
              height = inherits.getLength('height', inherits.getParentVHeight(), height);
            }

            var aspectRatio = this.attr('preserveAspectRatio'),
                viewBox = this.getViewbox('viewBox', [0, 0, width, height]);

            if (this.isOuterElement && preserveAspectRatio) {
              x = y = 0;
              width = viewportWidth;
              height = viewportHeight;
              aspectRatio = preserveAspectRatio;
            }

            this.getVWidth = function () {
              return viewBox[2];
            };

            this.getVHeight = function () {
              return viewBox[3];
            };

            this.drawInDocument = function (isClip, isMask) {
              doc.save();

              if (this.get('overflow') === 'hidden') {
                new SvgShape().M(x, y).L(x + width, y).L(x + width, y + height).L(x, y + height).Z().transform(this.get('transform')).insertInDocument();
                doc.clip();
              }

              this.drawContent(isClip, isMask);
              doc.restore();
            };

            this.getTransformation = function () {
              return multiplyMatrix(this.get('transform'), [1, 0, 0, 1, x, y], parseAspectRatio(aspectRatio, width, height, viewBox[2], viewBox[3]), [1, 0, 0, 1, -viewBox[0], -viewBox[1]]);
            };
          };

          var SVGElemImage = function SVGElemImage(obj, inherits) {
            SvgElemStylable.call(this, obj, inherits);
            var link = imageCallback(this.attr('href') || this.attr('xlink:href') || ''),
                x = this.getLength('x', this.getVWidth(), 0),
                y = this.getLength('y', this.getVHeight(), 0),
                width = this.getLength('width', this.getVWidth(), 'auto'),
                height = this.getLength('height', this.getVHeight(), 'auto'),
                image;

            try {
              image = doc.openImage(link);
            } catch (e) {
              warningCallback('SVGElemImage: failed to open image "' + link + '" in PDFKit');
            }

            if (image) {
              if (width === 'auto' && height !== 'auto') {
                width = height * image.width / image.height;
              } else if (height === 'auto' && width !== 'auto') {
                height = width * image.height / image.width;
              } else if (width === 'auto' && height === 'auto') {
                width = image.width;
                height = image.height;
              }
            }

            if (width === 'auto' || width < 0) {
              width = 0;
            }

            if (height === 'auto' || height < 0) {
              height = 0;
            }

            this.getTransformation = function () {
              return this.get('transform');
            };

            this.getBoundingShape = function () {
              return new SvgShape().M(x, y).L(x + width, y).M(x + width, y + height).L(x, y + height);
            };

            this.drawInDocument = function (isClip, isMask) {
              if (this.get('visibility') === 'hidden' || !image) {
                return;
              }

              doc.save();
              this.transform();

              if (this.get('overflow') === 'hidden') {
                doc.rect(x, y, width, height).clip();
              }

              this.clip();
              this.mask();
              doc.translate(x, y);
              doc.transform.apply(doc, parseAspectRatio(this.attr('preserveAspectRatio'), width, height, image ? image.width : width, image ? image.height : height));

              if (!isClip) {
                doc.fillOpacity(this.get('opacity'));
                doc.image(image, 0, 0);
              } else {
                doc.rect(0, 0, image.width, image.height);
                docFillColor(DefaultColors.white).fill();
              }

              doc.restore();
            };
          };

          var SvgElemPattern = function SvgElemPattern(obj, inherits, fallback) {
            SvgElemHasChildren.call(this, obj, inherits);

            this.ref = function () {
              var ref = this.getUrl('href') || this.getUrl('xlink:href');

              if (ref && ref.nodeName === obj.nodeName) {
                return new SvgElemPattern(ref, inherits, fallback);
              }
            }.call(this);

            var _attr = this.attr;

            this.attr = function (key) {
              var attr = _attr.call(this, key);

              if (attr != null || key === 'href' || key === 'xlink:href') {
                return attr;
              }

              return this.ref ? this.ref.attr(key) : null;
            };

            var _getChildren = this.getChildren;

            this.getChildren = function () {
              var children = _getChildren.call(this);

              if (children.length > 0) {
                return children;
              }

              return this.ref ? this.ref.getChildren() : [];
            };

            this.getPaint = function (bBox, gOpacity, isClip, isMask) {
              var bBoxUnitsPattern = this.attr('patternUnits') !== 'userSpaceOnUse',
                  bBoxUnitsContent = this.attr('patternContentUnits') === 'objectBoundingBox',
                  x = this.getLength('x', bBoxUnitsPattern ? 1 : this.getParentVWidth(), 0),
                  y = this.getLength('y', bBoxUnitsPattern ? 1 : this.getParentVHeight(), 0),
                  width = this.getLength('width', bBoxUnitsPattern ? 1 : this.getParentVWidth(), 0),
                  height = this.getLength('height', bBoxUnitsPattern ? 1 : this.getParentVHeight(), 0);

              if (bBoxUnitsContent && !bBoxUnitsPattern) {
                // Use the same units for pattern & pattern content
                x = (x - bBox[0]) / (bBox[2] - bBox[0]) || 0;
                y = (y - bBox[1]) / (bBox[3] - bBox[1]) || 0;
                width = width / (bBox[2] - bBox[0]) || 0;
                height = height / (bBox[3] - bBox[1]) || 0;
              } else if (!bBoxUnitsContent && bBoxUnitsPattern) {
                x = bBox[0] + x * (bBox[2] - bBox[0]);
                y = bBox[1] + y * (bBox[3] - bBox[1]);
                width = width * (bBox[2] - bBox[0]);
                height = height * (bBox[3] - bBox[1]);
              }

              var viewBox = this.getViewbox('viewBox', [0, 0, width, height]),
                  aspectRatio = (this.attr('preserveAspectRatio') || '').trim(),
                  aspectRatioMatrix = multiplyMatrix(parseAspectRatio(aspectRatio, width, height, viewBox[2], viewBox[3], 0), [1, 0, 0, 1, -viewBox[0], -viewBox[1]]),
                  matrix = parseTranform(this.attr('patternTransform'));

              if (bBoxUnitsContent) {
                matrix = multiplyMatrix([bBox[2] - bBox[0], 0, 0, bBox[3] - bBox[1], bBox[0], bBox[1]], matrix);
              }

              matrix = multiplyMatrix(matrix, [1, 0, 0, 1, x, y]);

              if ((matrix = validateMatrix(matrix)) && (aspectRatioMatrix = validateMatrix(aspectRatioMatrix)) && (width = validateNumber(width)) && (height = validateNumber(height))) {
                var group = docBeginGroup([0, 0, width, height]);
                doc.transform.apply(doc, aspectRatioMatrix);
                this.drawChildren(isClip, isMask);
                docEndGroup(group);
                return [docCreatePattern(group, width, height, matrix), gOpacity];
              } else {
                return fallback ? [fallback[0], fallback[1] * gOpacity] : undefined;
              }
            };

            this.getVWidth = function () {
              var bBoxUnitsPattern = this.attr('patternUnits') !== 'userSpaceOnUse',
                  width = this.getLength('width', bBoxUnitsPattern ? 1 : this.getParentVWidth(), 0);
              return this.getViewbox('viewBox', [0, 0, width, 0])[2];
            };

            this.getVHeight = function () {
              var bBoxUnitsPattern = this.attr('patternUnits') !== 'userSpaceOnUse',
                  height = this.getLength('height', bBoxUnitsPattern ? 1 : this.getParentVHeight(), 0);
              return this.getViewbox('viewBox', [0, 0, 0, height])[3];
            };
          };

          var SvgElemGradient = function SvgElemGradient(obj, inherits, fallback) {
            SvgElem.call(this, obj, inherits);
            this.allowedChildren = ['stop'];

            this.ref = function () {
              var ref = this.getUrl('href') || this.getUrl('xlink:href');

              if (ref && ref.nodeName === obj.nodeName) {
                return new SvgElemGradient(ref, inherits, fallback);
              }
            }.call(this);

            var _attr = this.attr;

            this.attr = function (key) {
              var attr = _attr.call(this, key);

              if (attr != null || key === 'href' || key === 'xlink:href') {
                return attr;
              }

              return this.ref ? this.ref.attr(key) : null;
            };

            var _getChildren = this.getChildren;

            this.getChildren = function () {
              var children = _getChildren.call(this);

              if (children.length > 0) {
                return children;
              }

              return this.ref ? this.ref.getChildren() : [];
            };

            this.getPaint = function (bBox, gOpacity, isClip, isMask) {
              var children = this.getChildren();

              if (children.length === 0) {
                return;
              }

              if (children.length === 1) {
                var child = children[0],
                    stopColor = child.get('stop-color');

                if (stopColor === 'none') {
                  return;
                }

                return opacityToColor(stopColor, child.get('stop-opacity') * gOpacity, isMask);
              }

              var bBoxUnits = this.attr('gradientUnits') !== 'userSpaceOnUse',
                  matrix = parseTranform(this.attr('gradientTransform')),
                  spread = this.attr('spreadMethod'),
                  grad,
                  x1,
                  x2,
                  y1,
                  y2,
                  r2,
                  nAfter = 0,
                  nBefore = 0,
                  nTotal = 1;

              if (bBoxUnits) {
                matrix = multiplyMatrix([bBox[2] - bBox[0], 0, 0, bBox[3] - bBox[1], bBox[0], bBox[1]], matrix);
              }

              if (matrix = validateMatrix(matrix)) {
                if (this.name === 'linearGradient') {
                  x1 = this.getLength('x1', bBoxUnits ? 1 : this.getVWidth(), 0);
                  x2 = this.getLength('x2', bBoxUnits ? 1 : this.getVWidth(), bBoxUnits ? 1 : this.getVWidth());
                  y1 = this.getLength('y1', bBoxUnits ? 1 : this.getVHeight(), 0);
                  y2 = this.getLength('y2', bBoxUnits ? 1 : this.getVHeight(), 0);
                } else {
                  x2 = this.getLength('cx', bBoxUnits ? 1 : this.getVWidth(), bBoxUnits ? 0.5 : 0.5 * this.getVWidth());
                  y2 = this.getLength('cy', bBoxUnits ? 1 : this.getVHeight(), bBoxUnits ? 0.5 : 0.5 * this.getVHeight());
                  r2 = this.getLength('r', bBoxUnits ? 1 : this.getViewport(), bBoxUnits ? 0.5 : 0.5 * this.getViewport());
                  x1 = this.getLength('fx', bBoxUnits ? 1 : this.getVWidth(), x2);
                  y1 = this.getLength('fy', bBoxUnits ? 1 : this.getVHeight(), y2);

                  if (r2 < 0) {
                    warningCallback('SvgElemGradient: negative r value');
                  }

                  var d = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2)),
                      multiplier = 1;

                  if (d > r2) {
                    // according to specification
                    multiplier = r2 / d;
                    x1 = x2 + (x1 - x2) * multiplier;
                    y1 = y2 + (y1 - y2) * multiplier;
                  }

                  r2 = Math.max(r2, d * multiplier * (1 + 1e-6)); // fix for edge-case gradients see issue #84
                }

                if (spread === 'reflect' || spread === 'repeat') {
                  var inv = inverseMatrix(matrix),
                      corner1 = transformPoint([bBox[0], bBox[1]], inv),
                      corner2 = transformPoint([bBox[2], bBox[1]], inv),
                      corner3 = transformPoint([bBox[2], bBox[3]], inv),
                      corner4 = transformPoint([bBox[0], bBox[3]], inv);

                  if (this.name === 'linearGradient') {
                    // See file 'gradient-repeat-maths.png'
                    nAfter = Math.max((corner1[0] - x2) * (x2 - x1) + (corner1[1] - y2) * (y2 - y1), (corner2[0] - x2) * (x2 - x1) + (corner2[1] - y2) * (y2 - y1), (corner3[0] - x2) * (x2 - x1) + (corner3[1] - y2) * (y2 - y1), (corner4[0] - x2) * (x2 - x1) + (corner4[1] - y2) * (y2 - y1)) / (Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));
                    nBefore = Math.max((corner1[0] - x1) * (x1 - x2) + (corner1[1] - y1) * (y1 - y2), (corner2[0] - x1) * (x1 - x2) + (corner2[1] - y1) * (y1 - y2), (corner3[0] - x1) * (x1 - x2) + (corner3[1] - y1) * (y1 - y2), (corner4[0] - x1) * (x1 - x2) + (corner4[1] - y1) * (y1 - y2)) / (Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));
                  } else {
                    nAfter = Math.sqrt(Math.max(Math.pow(corner1[0] - x2, 2) + Math.pow(corner1[1] - y2, 2), Math.pow(corner2[0] - x2, 2) + Math.pow(corner2[1] - y2, 2), Math.pow(corner3[0] - x2, 2) + Math.pow(corner3[1] - y2, 2), Math.pow(corner4[0] - x2, 2) + Math.pow(corner4[1] - y2, 2))) / r2 - 1;
                  }

                  nAfter = Math.ceil(nAfter + 0.5); // Add a little more because the stroke can extend outside of the bounding box

                  nBefore = Math.ceil(nBefore + 0.5);
                  nTotal = nBefore + 1 + nAfter; // How many times the gradient needs to be repeated to fill the object bounding box
                }

                if (this.name === 'linearGradient') {
                  grad = doc.linearGradient(x1 - nBefore * (x2 - x1), y1 - nBefore * (y2 - y1), x2 + nAfter * (x2 - x1), y2 + nAfter * (y2 - y1));
                } else {
                  grad = doc.radialGradient(x1, y1, 0, x2, y2, r2 + nAfter * r2);
                }

                for (var n = 0; n < nTotal; n++) {
                  var offset = 0,
                      inOrder = spread !== 'reflect' || (n - nBefore) % 2 === 0;

                  for (var i = 0; i < children.length; i++) {
                    var _child = children[inOrder ? i : children.length - 1 - i],
                        _stopColor = _child.get('stop-color');

                    if (_stopColor === 'none') {
                      _stopColor = DefaultColors.transparent;
                    }

                    _stopColor = opacityToColor(_stopColor, _child.get('stop-opacity') * gOpacity, isMask);
                    offset = Math.max(offset, inOrder ? _child.getPercent('offset', 0) : 1 - _child.getPercent('offset', 0));

                    if (i === 0 && _stopColor[0].length === 4) {
                      grad._colorSpace = 'DeviceCMYK';
                    } // Fix until PR #763 is merged into PDFKit


                    if (i === 0 && offset > 0) {
                      grad.stop((n + 0) / nTotal, _stopColor[0], _stopColor[1]);
                    }

                    grad.stop((n + offset) / (nAfter + nBefore + 1), _stopColor[0], _stopColor[1]);

                    if (i === children.length - 1 && offset < 1) {
                      grad.stop((n + 1) / nTotal, _stopColor[0], _stopColor[1]);
                    }
                  }
                }

                grad.setTransform.apply(grad, matrix);
                return [grad, 1];
              } else {
                return fallback ? [fallback[0], fallback[1] * gOpacity] : undefined;
              }
            };
          };

          var SvgElemBasicShape = function SvgElemBasicShape(obj, inherits) {
            SvgElemStylable.call(this, obj, inherits);
            this.dashScale = 1;

            this.getBoundingShape = function () {
              return this.shape;
            };

            this.getTransformation = function () {
              return this.get('transform');
            };

            this.drawInDocument = function (isClip, isMask) {
              if (this.get('visibility') === 'hidden' || !this.shape) {
                return;
              }

              doc.save();
              this.transform();
              this.clip();

              if (!isClip) {
                var masked = this.mask(),
                    group;

                if (masked) {
                  group = docBeginGroup(getPageBBox());
                }

                var subPaths = this.shape.getSubPaths(),
                    fill = this.getFill(isClip, isMask),
                    stroke = this.getStroke(isClip, isMask),
                    lineWidth = this.get('stroke-width'),
                    lineCap = this.get('stroke-linecap');

                if (fill || stroke) {
                  if (fill) {
                    docFillColor(fill);
                  }

                  if (stroke) {
                    for (var j = 0; j < subPaths.length; j++) {
                      if (isEqual(subPaths[j].totalLength, 0)) {
                        if ((lineCap === 'square' || lineCap === 'round') && lineWidth > 0) {
                          if (subPaths[j].startPoint && subPaths[j].startPoint.length > 1) {
                            var _x4 = subPaths[j].startPoint[0],
                                _y4 = subPaths[j].startPoint[1];
                            docFillColor(stroke);

                            if (lineCap === 'square') {
                              doc.rect(_x4 - 0.5 * lineWidth, _y4 - 0.5 * lineWidth, lineWidth, lineWidth);
                            } else if (lineCap === 'round') {
                              doc.circle(_x4, _y4, 0.5 * lineWidth);
                            }

                            doc.fill();
                          }
                        }
                      }
                    }

                    var dashArray = this.get('stroke-dasharray'),
                        dashOffset = this.get('stroke-dashoffset');

                    if (isNotEqual(this.dashScale, 1)) {
                      for (var _j2 = 0; _j2 < dashArray.length; _j2++) {
                        dashArray[_j2] *= this.dashScale;
                      }

                      dashOffset *= this.dashScale;
                    }

                    docStrokeColor(stroke);
                    doc.lineWidth(lineWidth).miterLimit(this.get('stroke-miterlimit')).lineJoin(this.get('stroke-linejoin')).lineCap(lineCap).dash(dashArray, {
                      phase: dashOffset
                    });
                  }

                  for (var _j3 = 0; _j3 < subPaths.length; _j3++) {
                    if (subPaths[_j3].totalLength > 0) {
                      subPaths[_j3].insertInDocument();
                    }
                  }

                  if (fill && stroke) {
                    doc.fillAndStroke(this.get('fill-rule'));
                  } else if (fill) {
                    doc.fill(this.get('fill-rule'));
                  } else if (stroke) {
                    doc.stroke();
                  }
                }

                var markerStart = this.get('marker-start'),
                    markerMid = this.get('marker-mid'),
                    markerEnd = this.get('marker-end');

                if (markerStart !== 'none' || markerMid !== 'none' || markerEnd !== 'none') {
                  var markersPos = this.shape.getMarkers();

                  if (markerStart !== 'none') {
                    var marker = new SvgElemMarker(markerStart, null);
                    marker.drawMarker(false, isMask, markersPos[0], lineWidth);
                  }

                  if (markerMid !== 'none') {
                    for (var i = 1; i < markersPos.length - 1; i++) {
                      var _marker = new SvgElemMarker(markerMid, null);

                      _marker.drawMarker(false, isMask, markersPos[i], lineWidth);
                    }
                  }

                  if (markerEnd !== 'none') {
                    var _marker2 = new SvgElemMarker(markerEnd, null);

                    _marker2.drawMarker(false, isMask, markersPos[markersPos.length - 1], lineWidth);
                  }
                }

                if (group) {
                  docEndGroup(group);
                  docInsertGroup(group);
                }
              } else {
                this.shape.insertInDocument();
                docFillColor(DefaultColors.white);
                doc.fill(this.get('clip-rule'));
              }

              doc.restore();
            };
          };

          var SvgElemRect = function SvgElemRect(obj, inherits) {
            SvgElemBasicShape.call(this, obj, inherits);
            var x = this.getLength('x', this.getVWidth(), 0),
                y = this.getLength('y', this.getVHeight(), 0),
                w = this.getLength('width', this.getVWidth(), 0),
                h = this.getLength('height', this.getVHeight(), 0),
                rx = this.getLength('rx', this.getVWidth()),
                ry = this.getLength('ry', this.getVHeight());

            if (rx === undefined && ry === undefined) {
              rx = ry = 0;
            } else if (rx === undefined && ry !== undefined) {
              rx = ry;
            } else if (rx !== undefined && ry === undefined) {
              ry = rx;
            }

            if (w > 0 && h > 0) {
              if (rx && ry) {
                rx = Math.min(rx, 0.5 * w);
                ry = Math.min(ry, 0.5 * h);
                this.shape = new SvgShape().M(x + rx, y).L(x + w - rx, y).A(rx, ry, 0, 0, 1, x + w, y + ry).L(x + w, y + h - ry).A(rx, ry, 0, 0, 1, x + w - rx, y + h).L(x + rx, y + h).A(rx, ry, 0, 0, 1, x, y + h - ry).L(x, y + ry).A(rx, ry, 0, 0, 1, x + rx, y).Z();
              } else {
                this.shape = new SvgShape().M(x, y).L(x + w, y).L(x + w, y + h).L(x, y + h).Z();
              }
            } else {
              this.shape = new SvgShape();
            }
          };

          var SvgElemCircle = function SvgElemCircle(obj, inherits) {
            SvgElemBasicShape.call(this, obj, inherits);
            var cx = this.getLength('cx', this.getVWidth(), 0),
                cy = this.getLength('cy', this.getVHeight(), 0),
                r = this.getLength('r', this.getViewport(), 0);

            if (r > 0) {
              this.shape = new SvgShape().M(cx + r, cy).A(r, r, 0, 0, 1, cx - r, cy).A(r, r, 0, 0, 1, cx + r, cy).Z();
            } else {
              this.shape = new SvgShape();
            }
          };

          var SvgElemEllipse = function SvgElemEllipse(obj, inherits) {
            SvgElemBasicShape.call(this, obj, inherits);
            var cx = this.getLength('cx', this.getVWidth(), 0),
                cy = this.getLength('cy', this.getVHeight(), 0),
                rx = this.getLength('rx', this.getVWidth(), 0),
                ry = this.getLength('ry', this.getVHeight(), 0);

            if (rx > 0 && ry > 0) {
              this.shape = new SvgShape().M(cx + rx, cy).A(rx, ry, 0, 0, 1, cx - rx, cy).A(rx, ry, 0, 0, 1, cx + rx, cy).Z();
            } else {
              this.shape = new SvgShape();
            }
          };

          var SvgElemLine = function SvgElemLine(obj, inherits) {
            SvgElemBasicShape.call(this, obj, inherits);
            var x1 = this.getLength('x1', this.getVWidth(), 0),
                y1 = this.getLength('y1', this.getVHeight(), 0),
                x2 = this.getLength('x2', this.getVWidth(), 0),
                y2 = this.getLength('y2', this.getVHeight(), 0);
            this.shape = new SvgShape().M(x1, y1).L(x2, y2);
          };

          var SvgElemPolyline = function SvgElemPolyline(obj, inherits) {
            SvgElemBasicShape.call(this, obj, inherits);
            var points = this.getNumberList('points');
            this.shape = new SvgShape();

            for (var i = 0; i < points.length - 1; i += 2) {
              if (i === 0) {
                this.shape.M(points[i], points[i + 1]);
              } else {
                this.shape.L(points[i], points[i + 1]);
              }
            }

            if (points.error) {
              warningCallback('SvgElemPolygon: unexpected string ' + points.error);
            }

            if (points.length % 2 === 1) {
              warningCallback('SvgElemPolyline: uneven number of coordinates');
            }
          };

          var SvgElemPolygon = function SvgElemPolygon(obj, inherits) {
            SvgElemBasicShape.call(this, obj, inherits);
            var points = this.getNumberList('points');
            this.shape = new SvgShape();

            for (var i = 0; i < points.length - 1; i += 2) {
              if (i === 0) {
                this.shape.M(points[i], points[i + 1]);
              } else {
                this.shape.L(points[i], points[i + 1]);
              }
            }

            this.shape.Z();

            if (points.error) {
              warningCallback('SvgElemPolygon: unexpected string ' + points.error);
            }

            if (points.length % 2 === 1) {
              warningCallback('SvgElemPolygon: uneven number of coordinates');
            }
          };

          var SvgElemPath = function SvgElemPath(obj, inherits) {
            SvgElemBasicShape.call(this, obj, inherits);
            this.shape = new SvgShape().path(this.attr('d'));
            var pathLength = this.getLength('pathLength', this.getViewport());
            this.pathLength = pathLength > 0 ? pathLength : undefined;
            this.dashScale = this.pathLength !== undefined ? this.shape.totalLength / this.pathLength : 1;
          };

          var SvgElemMarker = function SvgElemMarker(obj, inherits) {
            SvgElemHasChildren.call(this, obj, inherits);
            var width = this.getLength('markerWidth', this.getParentVWidth(), 3),
                height = this.getLength('markerHeight', this.getParentVHeight(), 3),
                viewBox = this.getViewbox('viewBox', [0, 0, width, height]);

            this.getVWidth = function () {
              return viewBox[2];
            };

            this.getVHeight = function () {
              return viewBox[3];
            };

            this.drawMarker = function (isClip, isMask, posArray, strokeWidth) {
              doc.save();
              var orient = this.attr('orient'),
                  units = this.attr('markerUnits'),
                  rotate = orient === 'auto' ? posArray[2] : (parseFloat(orient) || 0) * Math.PI / 180,
                  scale = units === 'userSpaceOnUse' ? 1 : strokeWidth;
              doc.transform(Math.cos(rotate) * scale, Math.sin(rotate) * scale, -Math.sin(rotate) * scale, Math.cos(rotate) * scale, posArray[0], posArray[1]);
              var refX = this.getLength('refX', this.getVWidth(), 0),
                  refY = this.getLength('refY', this.getVHeight(), 0),
                  aspectRatioMatrix = parseAspectRatio(this.attr('preserveAspectRatio'), width, height, viewBox[2], viewBox[3], 0.5);

              if (this.get('overflow') === 'hidden') {
                doc.rect(aspectRatioMatrix[0] * (viewBox[0] + viewBox[2] / 2 - refX) - width / 2, aspectRatioMatrix[3] * (viewBox[1] + viewBox[3] / 2 - refY) - height / 2, width, height).clip();
              }

              doc.transform.apply(doc, aspectRatioMatrix);
              doc.translate(-refX, -refY);
              var group;

              if (this.get('opacity') < 1 && !isClip) {
                group = docBeginGroup(getPageBBox());
              }

              this.drawChildren(isClip, isMask);

              if (group) {
                docEndGroup(group);
                doc.fillOpacity(this.get('opacity'));
                docInsertGroup(group);
              }

              doc.restore();
            };
          };

          var SvgElemClipPath = function SvgElemClipPath(obj, inherits) {
            SvgElemHasChildren.call(this, obj, inherits);

            this.useMask = function (bBox) {
              var group = docBeginGroup(getPageBBox());
              doc.save();

              if (this.attr('clipPathUnits') === 'objectBoundingBox') {
                doc.transform(bBox[2] - bBox[0], 0, 0, bBox[3] - bBox[1], bBox[0], bBox[1]);
              }

              this.clip();
              this.drawChildren(true, false);
              doc.restore();
              docEndGroup(group);
              docApplyMask(group, true);
            };
          };

          var SvgElemMask = function SvgElemMask(obj, inherits) {
            SvgElemHasChildren.call(this, obj, inherits);

            this.useMask = function (bBox) {
              var group = docBeginGroup(getPageBBox());
              doc.save();
              var x, y, w, h;

              if (this.attr('maskUnits') === 'userSpaceOnUse') {
                x = this.getLength('x', this.getVWidth(), -0.1 * (bBox[2] - bBox[0]) + bBox[0]);
                y = this.getLength('y', this.getVHeight(), -0.1 * (bBox[3] - bBox[1]) + bBox[1]);
                w = this.getLength('width', this.getVWidth(), 1.2 * (bBox[2] - bBox[0]));
                h = this.getLength('height', this.getVHeight(), 1.2 * (bBox[3] - bBox[1]));
              } else {
                x = this.getLength('x', this.getVWidth(), -0.1) * (bBox[2] - bBox[0]) + bBox[0];
                y = this.getLength('y', this.getVHeight(), -0.1) * (bBox[3] - bBox[1]) + bBox[1];
                w = this.getLength('width', this.getVWidth(), 1.2) * (bBox[2] - bBox[0]);
                h = this.getLength('height', this.getVHeight(), 1.2) * (bBox[3] - bBox[1]);
              }

              doc.rect(x, y, w, h).clip();

              if (this.attr('maskContentUnits') === 'objectBoundingBox') {
                doc.transform(bBox[2] - bBox[0], 0, 0, bBox[3] - bBox[1], bBox[0], bBox[1]);
              }

              this.clip();
              this.drawChildren(false, true);
              doc.restore();
              docEndGroup(group);
              docApplyMask(group, true);
            };
          };

          var SvgElemTextContainer = function SvgElemTextContainer(obj, inherits) {
            SvgElemStylable.call(this, obj, inherits);
            this.allowedChildren = ['tspan', '#text', '#cdata-section', 'a'];
            this.isText = true;

            this.getBoundingShape = function () {
              var shape = new SvgShape();

              for (var i = 0; i < this._pos.length; i++) {
                var pos = this._pos[i];

                if (!pos.hidden) {
                  var dx0 = pos.ascent * Math.sin(pos.rotate),
                      dy0 = -pos.ascent * Math.cos(pos.rotate),
                      dx1 = pos.descent * Math.sin(pos.rotate),
                      dy1 = -pos.descent * Math.cos(pos.rotate),
                      dx2 = pos.width * Math.cos(pos.rotate),
                      dy2 = pos.width * Math.sin(pos.rotate);
                  shape.M(pos.x + dx0, pos.y + dy0).L(pos.x + dx0 + dx2, pos.y + dy0 + dy2).M(pos.x + dx1 + dx2, pos.y + dy1 + dy2).L(pos.x + dx1, pos.y + dy1);
                }
              }

              return shape;
            };

            this.drawTextInDocument = function (isClip, isMask) {
              if (this.link && !isClip && !isMask) {
                this.addLink();
              }

              if (this.get('text-decoration') === 'underline') {
                this.decorate(0.05 * this._font.size, -0.075 * this._font.size, isClip, isMask);
              }

              if (this.get('text-decoration') === 'overline') {
                this.decorate(0.05 * this._font.size, getAscent(this._font.font, this._font.size) + 0.075 * this._font.size, isClip, isMask);
              }

              var fill = this.getFill(isClip, isMask),
                  stroke = this.getStroke(isClip, isMask),
                  strokeWidth = this.get('stroke-width');

              if (this._font.fauxBold) {
                if (!stroke) {
                  stroke = fill;
                  strokeWidth = this._font.size * 0.03;
                } else {
                  strokeWidth += this._font.size * 0.03;
                }
              }

              var children = this.getChildren();

              for (var i = 0; i < children.length; i++) {
                var childElem = children[i];

                switch (childElem.name) {
                  case 'tspan':
                  case 'textPath':
                  case 'a':
                    if (childElem.get('display') !== 'none') {
                      childElem.drawTextInDocument(isClip, isMask);
                    }

                    break;

                  case '#text':
                  case '#cdata-section':
                    if (this.get('visibility') === 'hidden') {
                      continue;
                    }

                    if (fill || stroke || isClip) {
                      if (fill) {
                        docFillColor(fill);
                      }

                      if (stroke && strokeWidth) {
                        docStrokeColor(stroke);
                        doc.lineWidth(strokeWidth).miterLimit(this.get('stroke-miterlimit')).lineJoin(this.get('stroke-linejoin')).lineCap(this.get('stroke-linecap')).dash(this.get('stroke-dasharray'), {
                          phase: this.get('stroke-dashoffset')
                        });
                      }

                      docBeginText(this._font.font, this._font.size);
                      docSetTextMode(!!fill, !!stroke);

                      for (var j = 0, pos = childElem._pos; j < pos.length; j++) {
                        if (!pos[j].hidden && isNotEqual(pos[j].width, 0)) {
                          var cos = Math.cos(pos[j].rotate),
                              sin = Math.sin(pos[j].rotate),
                              skew = this._font.fauxItalic ? -0.25 : 0;
                          docSetTextMatrix(cos * pos[j].scale, sin * pos[j].scale, cos * skew - sin, sin * skew + cos, pos[j].x, pos[j].y);
                          docWriteGlyph(pos[j].glyph);
                        }
                      }

                      docEndText();
                    }

                    break;
                }
              }

              if (this.get('text-decoration') === 'line-through') {
                this.decorate(0.05 * this._font.size, 0.5 * (getAscent(this._font.font, this._font.size) + getDescent(this._font.font, this._font.size)), isClip, isMask);
              }
            };

            this.decorate = function (lineWidth, linePosition, isClip, isMask) {
              var fill = this.getFill(isClip, isMask),
                  stroke = this.getStroke(isClip, isMask);

              if (fill) {
                docFillColor(fill);
              }

              if (stroke) {
                docStrokeColor(stroke);
                doc.lineWidth(this.get('stroke-width')).miterLimit(this.get('stroke-miterlimit')).lineJoin(this.get('stroke-linejoin')).lineCap(this.get('stroke-linecap')).dash(this.get('stroke-dasharray'), {
                  phase: this.get('stroke-dashoffset')
                });
              }

              for (var j = 0, pos = this._pos; j < pos.length; j++) {
                if (!pos[j].hidden && isNotEqual(pos[j].width, 0)) {
                  var dx0 = (linePosition + lineWidth / 2) * Math.sin(pos[j].rotate),
                      dy0 = -(linePosition + lineWidth / 2) * Math.cos(pos[j].rotate),
                      dx1 = (linePosition - lineWidth / 2) * Math.sin(pos[j].rotate),
                      dy1 = -(linePosition - lineWidth / 2) * Math.cos(pos[j].rotate),
                      dx2 = pos[j].width * Math.cos(pos[j].rotate),
                      dy2 = pos[j].width * Math.sin(pos[j].rotate);
                  new SvgShape().M(pos[j].x + dx0, pos[j].y + dy0).L(pos[j].x + dx0 + dx2, pos[j].y + dy0 + dy2).L(pos[j].x + dx1 + dx2, pos[j].y + dy1 + dy2).L(pos[j].x + dx1, pos[j].y + dy1).Z().insertInDocument();

                  if (fill && stroke) {
                    doc.fillAndStroke();
                  } else if (fill) {
                    doc.fill();
                  } else if (stroke) {
                    doc.stroke();
                  }
                }
              }
            };
          };

          var SvgElemTextNode = function SvgElemTextNode(obj, inherits) {
            this.name = obj.nodeName;
            this.textContent = obj.nodeValue;
          };

          var SvgElemTspan = function SvgElemTspan(obj, inherits) {
            SvgElemTextContainer.call(this, obj, inherits);
          };

          var SvgElemTextPath = function SvgElemTextPath(obj, inherits) {
            SvgElemTextContainer.call(this, obj, inherits);
            var pathObject, pathLength, temp;

            if ((temp = this.attr('path')) && temp.trim() !== '') {
              var _pathLength = this.getLength('pathLength', this.getViewport());

              this.pathObject = new SvgShape().path(temp);
              this.pathLength = _pathLength > 0 ? _pathLength : this.pathObject.totalLength;
              this.pathScale = this.pathObject.totalLength / this.pathLength;
            } else if ((temp = this.getUrl('href') || this.getUrl('xlink:href')) && temp.nodeName === 'path') {
              var pathElem = new SvgElemPath(temp, this);
              this.pathObject = pathElem.shape.clone().transform(pathElem.get('transform'));
              this.pathLength = this.chooseValue(pathElem.pathLength, this.pathObject.totalLength);
              this.pathScale = this.pathObject.totalLength / this.pathLength;
            }
          };

          var SvgElemText = function SvgElemText(obj, inherits) {
            SvgElemTextContainer.call(this, obj, inherits);
            this.allowedChildren = ['textPath', 'tspan', '#text', '#cdata-section', 'a'];

            (function (textParentElem) {
              var processedText = '',
                  remainingText = obj.textContent,
                  textPaths = [],
                  currentChunk = [],
                  currentAnchor,
                  currentDirection,
                  currentX = 0,
                  currentY = 0;

              function doAnchoring() {
                if (currentChunk.length) {
                  var last = currentChunk[currentChunk.length - 1];
                  var first = currentChunk[0];
                  var width = last.x + last.width - first.x;
                  var anchordx = {
                    'startltr': 0,
                    'middleltr': 0.5,
                    'endltr': 1,
                    'startrtl': 1,
                    'middlertl': 0.5,
                    'endrtl': 0
                  }[currentAnchor + currentDirection] * width || 0;

                  for (var i = 0; i < currentChunk.length; i++) {
                    currentChunk[i].x -= anchordx;
                  }
                }

                currentChunk = [];
              }

              function adjustLength(pos, length, spacingAndGlyphs) {
                var firstChar = pos[0],
                    lastChar = pos[pos.length - 1],
                    startX = firstChar.x,
                    endX = lastChar.x + lastChar.width;

                if (spacingAndGlyphs) {
                  var textScale = length / (endX - startX);

                  if (textScale > 0 && textScale < Infinity) {
                    for (var j = 0; j < pos.length; j++) {
                      pos[j].x = startX + textScale * (pos[j].x - startX);
                      pos[j].scale *= textScale;
                      pos[j].width *= textScale;
                    }
                  }
                } else {
                  if (pos.length >= 2) {
                    var spaceDiff = (length - (endX - startX)) / (pos.length - 1);

                    for (var _j4 = 0; _j4 < pos.length; _j4++) {
                      pos[_j4].x += _j4 * spaceDiff;
                    }
                  }
                }

                currentX += length - (endX - startX);
              }

              function recursive(currentElem, parentElem) {
                currentElem._x = combineArrays(currentElem.getLengthList('x', currentElem.getVWidth()), parentElem ? parentElem._x.slice(parentElem._pos.length) : []);
                currentElem._y = combineArrays(currentElem.getLengthList('y', currentElem.getVHeight()), parentElem ? parentElem._y.slice(parentElem._pos.length) : []);
                currentElem._dx = combineArrays(currentElem.getLengthList('dx', currentElem.getVWidth()), parentElem ? parentElem._dx.slice(parentElem._pos.length) : []);
                currentElem._dy = combineArrays(currentElem.getLengthList('dy', currentElem.getVHeight()), parentElem ? parentElem._dy.slice(parentElem._pos.length) : []);
                currentElem._rot = combineArrays(currentElem.getNumberList('rotate'), parentElem ? parentElem._rot.slice(parentElem._pos.length) : []);
                currentElem._defRot = currentElem.chooseValue(currentElem._rot[currentElem._rot.length - 1], parentElem && parentElem._defRot, 0);

                if (currentElem.name === 'textPath') {
                  currentElem._y = [];
                }

                var fontOptions = {
                  fauxItalic: false,
                  fauxBold: false
                },
                    fontNameorLink = fontCallback(currentElem.get('font-family'), currentElem.get('font-weight') === 'bold', currentElem.get('font-style') === 'italic', fontOptions);

                try {
                  doc.font(fontNameorLink);
                } catch (e) {
                  warningCallback('SVGElemText: failed to open font "' + fontNameorLink + '" in PDFKit');
                }

                currentElem._pos = [];
                currentElem._index = 0;
                currentElem._font = {
                  font: doc._font,
                  size: currentElem.get('font-size'),
                  fauxItalic: fontOptions.fauxItalic,
                  fauxBold: fontOptions.fauxBold
                };
                var textLength = currentElem.getLength('textLength', currentElem.getVWidth(), undefined),
                    spacingAndGlyphs = currentElem.attr('lengthAdjust') === 'spacingAndGlyphs',
                    wordSpacing = currentElem.get('word-spacing'),
                    letterSpacing = currentElem.get('letter-spacing'),
                    textAnchor = currentElem.get('text-anchor'),
                    textDirection = currentElem.get('direction'),
                    baseline = getBaseline(currentElem._font.font, currentElem._font.size, currentElem.get('alignment-baseline') || currentElem.get('dominant-baseline'), currentElem.get('baseline-shift'));

                if (currentElem.name === 'textPath') {
                  doAnchoring();
                  currentX = currentY = 0;
                }

                var children = currentElem.getChildren();

                for (var i = 0; i < children.length; i++) {
                  var childElem = children[i];

                  switch (childElem.name) {
                    case 'tspan':
                    case 'textPath':
                    case 'a':
                      recursive(childElem, currentElem);
                      break;

                    case '#text':
                    case '#cdata-section':
                      var rawText = childElem.textContent,
                          renderedText = rawText,
                          words = void 0;
                      childElem._font = currentElem._font;
                      childElem._pos = [];
                      remainingText = remainingText.substring(rawText.length);

                      if (currentElem.get('xml:space') === 'preserve') {
                        renderedText = renderedText.replace(/[\s]/g, ' ');
                      } else {
                        renderedText = renderedText.replace(/[\s]+/g, ' ');

                        if (processedText.match(/[\s]$|^$/)) {
                          renderedText = renderedText.replace(/^[\s]/, '');
                        }

                        if (remainingText.match(/^[\s]*$/)) {
                          renderedText = renderedText.replace(/[\s]$/, '');
                        }
                      }

                      processedText += rawText;

                      if (wordSpacing === 0) {
                        words = [renderedText];
                      } else {
                        words = renderedText.split(/(\s)/);
                      }

                      for (var w = 0; w < words.length; w++) {
                        var pos = getTextPos(currentElem._font.font, currentElem._font.size, words[w]);

                        for (var j = 0; j < pos.length; j++) {
                          var index = currentElem._index,
                              xAttr = currentElem._x[index],
                              yAttr = currentElem._y[index],
                              dxAttr = currentElem._dx[index],
                              dyAttr = currentElem._dy[index],
                              rotAttr = currentElem._rot[index],
                              continuous = !(w === 0 && j === 0);

                          if (xAttr !== undefined) {
                            continuous = false;
                            doAnchoring();
                            currentX = xAttr;
                          }

                          if (yAttr !== undefined) {
                            continuous = false;
                            doAnchoring();
                            currentY = yAttr;
                          }

                          if (dxAttr !== undefined) {
                            continuous = false;
                            currentX += dxAttr;
                          }

                          if (dyAttr !== undefined) {
                            continuous = false;
                            currentY += dyAttr;
                          }

                          if (rotAttr !== undefined || currentElem._defRot !== 0) {
                            continuous = false;
                          }

                          var position = {
                            glyph: pos[j].glyph,
                            rotate: Math.PI / 180 * currentElem.chooseValue(rotAttr, currentElem._defRot),
                            x: currentX + pos[j].xOffset,
                            y: currentY + baseline + pos[j].yOffset,
                            width: pos[j].width,
                            ascent: getAscent(currentElem._font.font, currentElem._font.size),
                            descent: getDescent(currentElem._font.font, currentElem._font.size),
                            scale: 1,
                            hidden: false,
                            continuous: continuous
                          };
                          currentChunk.push(position);

                          childElem._pos.push(position);

                          currentElem._pos.push(position);

                          currentElem._index += pos[j].unicode.length;

                          if (currentChunk.length === 1) {
                            currentAnchor = textAnchor;
                            currentDirection = textDirection;
                          }

                          currentX += pos[j].xAdvance + letterSpacing;
                          currentY += pos[j].yAdvance;
                        }

                        if (words[w] === ' ') {
                          currentX += wordSpacing;
                        }
                      }

                      break;

                    default:
                      remainingText = remainingText.substring(childElem.textContent.length);
                  }
                }

                if (textLength && currentElem._pos.length) {
                  adjustLength(currentElem._pos, textLength, spacingAndGlyphs);
                }

                if (currentElem.name === 'textPath' || currentElem.name === 'text') {
                  doAnchoring();
                }

                if (currentElem.name === 'textPath') {
                  textPaths.push(currentElem);
                  var pathObject = currentElem.pathObject;

                  if (pathObject) {
                    currentX = pathObject.endPoint[0];
                    currentY = pathObject.endPoint[1];
                  }
                }

                if (parentElem) {
                  parentElem._pos = parentElem._pos.concat(currentElem._pos);
                  parentElem._index += currentElem._index;
                }
              }

              function textOnPath(currentElem) {
                var pathObject = currentElem.pathObject,
                    pathLength = currentElem.pathLength,
                    pathScale = currentElem.pathScale;

                if (pathObject) {
                  var textOffset = currentElem.getLength('startOffset', pathLength, 0);

                  for (var j = 0; j < currentElem._pos.length; j++) {
                    var charMidX = textOffset + currentElem._pos[j].x + 0.5 * currentElem._pos[j].width;

                    if (charMidX > pathLength || charMidX < 0) {
                      currentElem._pos[j].hidden = true;
                    } else {
                      var pointOnPath = pathObject.getPointAtLength(charMidX * pathScale);

                      if (isNotEqual(pathScale, 1)) {
                        currentElem._pos[j].scale *= pathScale;
                        currentElem._pos[j].width *= pathScale;
                      }

                      currentElem._pos[j].x = pointOnPath[0] - 0.5 * currentElem._pos[j].width * Math.cos(pointOnPath[2]) - currentElem._pos[j].y * Math.sin(pointOnPath[2]);
                      currentElem._pos[j].y = pointOnPath[1] - 0.5 * currentElem._pos[j].width * Math.sin(pointOnPath[2]) + currentElem._pos[j].y * Math.cos(pointOnPath[2]);
                      currentElem._pos[j].rotate = pointOnPath[2] + currentElem._pos[j].rotate;
                      currentElem._pos[j].continuous = false;
                    }
                  }
                } else {
                  for (var _j5 = 0; _j5 < currentElem._pos.length; _j5++) {
                    currentElem._pos[_j5].hidden = true;
                  }
                }
              }

              recursive(textParentElem, null);

              for (var i = 0; i < textPaths.length; i++) {
                textOnPath(textPaths[i]);
              }
            })(this);

            this.getTransformation = function () {
              return this.get('transform');
            };

            this.drawInDocument = function (isClip, isMask) {
              doc.save();
              this.transform();
              this.clip();
              var masked = this.mask(),
                  group;

              if (masked) {
                group = docBeginGroup(getPageBBox());
              }

              this.drawTextInDocument(isClip, isMask);

              if (group) {
                docEndGroup(group);
                docInsertGroup(group);
              }

              doc.restore();
            };
          };

          options = options || {};
          var pxToPt = options.assumePt ? 1 : 72 / 96,
              // 1px = 72/96pt, but only if assumePt is false
          viewportWidth = (options.width || doc.page.width) / pxToPt,
              viewportHeight = (options.height || doc.page.height) / pxToPt,
              preserveAspectRatio = options.preserveAspectRatio || null,
              // default to null so that the attr can override if not passed
          useCSS = options.useCSS && typeof SVGElement !== 'undefined' && svg instanceof SVGElement && typeof getComputedStyle === 'function',
              warningCallback = options.warningCallback,
              fontCallback = options.fontCallback,
              imageCallback = options.imageCallback,
              colorCallback = options.colorCallback,
              documentCallback = options.documentCallback,
              precision = Math.ceil(Math.max(1, options.precision)) || 3,
              groupStack = [],
              documentCache = {},
              links = [],
              styleRules = [];

          if (typeof warningCallback !== 'function') {
            warningCallback = function warningCallback(str) {
              if ((typeof console === "undefined" ? "undefined" : _typeof4(console)) !== undefined && typeof console.warn === 'function') {
                console.warn(str);
              }
            };
          }

          if (typeof fontCallback !== 'function') {
            fontCallback = function fontCallback(family, bold, italic, fontOptions) {
              // Check if the font is already registered in the document
              if (bold && italic) {
                if (doc._registeredFonts.hasOwnProperty(family + '-BoldItalic')) {
                  return family + '-BoldItalic';
                } else if (doc._registeredFonts.hasOwnProperty(family + '-Italic')) {
                  fontOptions.fauxBold = true;
                  return family + '-Italic';
                } else if (doc._registeredFonts.hasOwnProperty(family + '-Bold')) {
                  fontOptions.fauxItalic = true;
                  return family + '-Bold';
                } else if (doc._registeredFonts.hasOwnProperty(family)) {
                  fontOptions.fauxBold = true;
                  fontOptions.fauxItalic = true;
                  return family;
                }
              }

              if (bold && !italic) {
                if (doc._registeredFonts.hasOwnProperty(family + '-Bold')) {
                  return family + '-Bold';
                } else if (doc._registeredFonts.hasOwnProperty(family)) {
                  fontOptions.fauxBold = true;
                  return family;
                }
              }

              if (!bold && italic) {
                if (doc._registeredFonts.hasOwnProperty(family + '-Italic')) {
                  return family + '-Italic';
                } else if (doc._registeredFonts.hasOwnProperty(family)) {
                  fontOptions.fauxItalic = true;
                  return family;
                }
              }

              if (!bold && !italic) {
                if (doc._registeredFonts.hasOwnProperty(family)) {
                  return family;
                }
              } // Use standard fonts as fallback


              if (family.match(/(?:^|,)\s*serif\s*$/)) {
                if (bold && italic) {
                  return 'Times-BoldItalic';
                }

                if (bold && !italic) {
                  return 'Times-Bold';
                }

                if (!bold && italic) {
                  return 'Times-Italic';
                }

                if (!bold && !italic) {
                  return 'Times-Roman';
                }
              } else if (family.match(/(?:^|,)\s*monospace\s*$/)) {
                if (bold && italic) {
                  return 'Courier-BoldOblique';
                }

                if (bold && !italic) {
                  return 'Courier-Bold';
                }

                if (!bold && italic) {
                  return 'Courier-Oblique';
                }

                if (!bold && !italic) {
                  return 'Courier';
                }
              } else if (family.match(/(?:^|,)\s*sans-serif\s*$/) || true) {
                if (bold && italic) {
                  return 'Helvetica-BoldOblique';
                }

                if (bold && !italic) {
                  return 'Helvetica-Bold';
                }

                if (!bold && italic) {
                  return 'Helvetica-Oblique';
                }

                if (!bold && !italic) {
                  return 'Helvetica';
                }
              }
            };
          }

          if (typeof imageCallback !== 'function') {
            imageCallback = function imageCallback(link) {
              return link.replace(/\s+/g, '');
            };
          }

          if (typeof colorCallback !== 'function') {
            colorCallback = null;
          } else {
            for (var color in DefaultColors) {
              var newColor = colorCallback(DefaultColors[color]);
              DefaultColors[color][0] = newColor[0];
              DefaultColors[color][1] = newColor[1];
            }
          }

          if (typeof documentCallback !== 'function') {
            documentCallback = null;
          }

          if (typeof svg === 'string') {
            svg = parseXml(svg);
          }

          if (svg) {
            var styles = svg.getElementsByTagName('style');

            for (var i = 0; i < styles.length; i++) {
              styleRules = styleRules.concat(parseStyleSheet(styles[i].textContent));
            }

            var elem = createSVGElement(svg, null);

            if (typeof elem.drawInDocument === 'function') {
              if (options.useCSS && !useCSS) {
                warningCallback('SVGtoPDF: useCSS option can only be used for SVG *elements* in compatible browsers');
              }

              var savedFillColor = doc._fillColor;
              doc.save().translate(x || 0, y || 0).scale(pxToPt);
              elem.drawInDocument();

              for (var _i8 = 0; _i8 < links.length; _i8++) {
                doc.page.annotations.push(links[_i8]);
              }

              doc.restore();
              doc._fillColor = savedFillColor;
            } else {
              warningCallback('SVGtoPDF: this element can\'t be rendered directly: ' + svg.nodeName);
            }
          } else {
            warningCallback('SVGtoPDF: the input does not look like a valid SVG');
          }
        };

        if (true && module && typeof module.exports !== 'undefined') {
          module.exports = SVGtoPDF;
        }
        /* WEBPACK VAR INJECTION */

      }).call(this, __webpack_require__(548)(module));
      /***/
    },
    /* 548 */

    /***/
    function (module, exports) {
      module.exports = function (module) {
        if (!module.webpackPolyfill) {
          module.deprecate = function () {};

          module.paths = []; // module.parent = undefined by default

          if (!module.children) module.children = [];
          Object.defineProperty(module, "loaded", {
            enumerable: true,
            get: function get() {
              return module.l;
            }
          });
          Object.defineProperty(module, "id", {
            enumerable: true,
            get: function get() {
              return module.i;
            }
          });
          module.webpackPolyfill = 1;
        }

        return module;
      };
      /***/

    },
    /* 549 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict"; // Internet Explorer polyfills

      if (typeof window !== 'undefined' && !window.Promise) {
        __webpack_require__(550);
      }

      __webpack_require__(560);

      var fetchUrl = function fetchUrl(url) {
        return new Promise(function (resolve, reject) {
          var xhr = new XMLHttpRequest();
          xhr.open('GET', url, true);
          xhr.responseType = 'arraybuffer';

          xhr.onreadystatechange = function () {
            if (xhr.readyState !== 4) {
              return;
            }

            var ok = xhr.status >= 200 && xhr.status < 300;

            if (!ok) {
              setTimeout(function () {
                reject(new TypeError('Failed to fetch (url: "' + url + '")'));
              }, 0);
            }
          };

          xhr.onload = function () {
            var ok = xhr.status >= 200 && xhr.status < 300;

            if (ok) {
              resolve(xhr.response);
            }
          };

          xhr.onerror = function () {
            setTimeout(function () {
              reject(new TypeError('Network request failed (url: "' + url + '")'));
            }, 0);
          };

          xhr.ontimeout = function () {
            setTimeout(function () {
              reject(new TypeError('Network request failed (url: "' + url + '")'));
            }, 0);
          };

          xhr.send();
        });
      };

      function URLBrowserResolver(fs) {
        this.fs = fs;
        this.resolving = {};
      }

      URLBrowserResolver.prototype.resolve = function (url) {
        if (!this.resolving[url]) {
          var _this = this;

          this.resolving[url] = new Promise(function (resolve, reject) {
            if (url.toLowerCase().indexOf('https://') === 0 || url.toLowerCase().indexOf('http://') === 0) {
              fetchUrl(url).then(function (buffer) {
                _this.fs.writeFileSync(url, buffer);

                resolve();
              }, function (result) {
                reject(result);
              });
            } else {
              // cannot be resolved
              resolve();
            }
          });
        }

        return this.resolving[url];
      };

      URLBrowserResolver.prototype.resolved = function () {
        var _this = this;

        return new Promise(function (resolve, reject) {
          Promise.all(Object.values(_this.resolving)).then(function () {
            resolve();
          }, function (result) {
            reject(result);
          });
        });
      };

      module.exports = URLBrowserResolver;
      /***/
    },
    /* 550 */

    /***/
    function (module, exports, __webpack_require__) {
      var parent = __webpack_require__(551);

      __webpack_require__(556); // TODO: Remove from `core-js@4`


      __webpack_require__(557);

      __webpack_require__(558);

      __webpack_require__(559);

      module.exports = parent;
      /***/
    },
    /* 551 */

    /***/
    function (module, exports, __webpack_require__) {
      __webpack_require__(32);

      __webpack_require__(159);

      __webpack_require__(120);

      __webpack_require__(552);

      __webpack_require__(299);

      __webpack_require__(555);

      var path = __webpack_require__(114);

      module.exports = path.Promise;
      /***/
    },
    /* 552 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var $ = __webpack_require__(1);

      var IS_PURE = __webpack_require__(56);

      var global = __webpack_require__(3);

      var getBuiltIn = __webpack_require__(36);

      var NativePromise = __webpack_require__(295);

      var redefine = __webpack_require__(25);

      var redefineAll = __webpack_require__(221);

      var setToStringTag = __webpack_require__(95);

      var setSpecies = __webpack_require__(156);

      var isObject = __webpack_require__(13);

      var aFunction = __webpack_require__(44);

      var anInstance = __webpack_require__(155);

      var classof = __webpack_require__(30);

      var inspectSource = __webpack_require__(140);

      var iterate = __webpack_require__(136);

      var checkCorrectnessOfIteration = __webpack_require__(153);

      var speciesConstructor = __webpack_require__(38);

      var task = __webpack_require__(296).set;

      var microtask = __webpack_require__(553);

      var promiseResolve = __webpack_require__(298);

      var hostReportErrors = __webpack_require__(554);

      var newPromiseCapabilityModule = __webpack_require__(109);

      var perform = __webpack_require__(137);

      var InternalStateModule = __webpack_require__(35);

      var isForced = __webpack_require__(144);

      var wellKnownSymbol = __webpack_require__(6);

      var V8_VERSION = __webpack_require__(147);

      var SPECIES = wellKnownSymbol('species');
      var PROMISE = 'Promise';
      var getInternalState = InternalStateModule.get;
      var setInternalState = InternalStateModule.set;
      var getInternalPromiseState = InternalStateModule.getterFor(PROMISE);
      var PromiseConstructor = NativePromise;
      var TypeError = global.TypeError;
      var document = global.document;
      var process = global.process;
      var $fetch = getBuiltIn('fetch');
      var newPromiseCapability = newPromiseCapabilityModule.f;
      var newGenericPromiseCapability = newPromiseCapability;
      var IS_NODE = classof(process) == 'process';
      var DISPATCH_EVENT = !!(document && document.createEvent && global.dispatchEvent);
      var UNHANDLED_REJECTION = 'unhandledrejection';
      var REJECTION_HANDLED = 'rejectionhandled';
      var PENDING = 0;
      var FULFILLED = 1;
      var REJECTED = 2;
      var HANDLED = 1;
      var UNHANDLED = 2;
      var Internal, OwnPromiseCapability, PromiseWrapper, nativeThen;
      var FORCED = isForced(PROMISE, function () {
        var GLOBAL_CORE_JS_PROMISE = inspectSource(PromiseConstructor) !== String(PromiseConstructor);

        if (!GLOBAL_CORE_JS_PROMISE) {
          // V8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
          // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
          // We can't detect it synchronously, so just check versions
          if (V8_VERSION === 66) return true; // Unhandled rejections tracking support, NodeJS Promise without it fails @@species test

          if (!IS_NODE && typeof PromiseRejectionEvent != 'function') return true;
        } // We need Promise#finally in the pure version for preventing prototype pollution


        if (IS_PURE && !PromiseConstructor.prototype['finally']) return true; // We can't use @@species feature detection in V8 since it causes
        // deoptimization and performance degradation
        // https://github.com/zloirock/core-js/issues/679

        if (V8_VERSION >= 51 && /native code/.test(PromiseConstructor)) return false; // Detect correctness of subclassing with @@species support

        var promise = PromiseConstructor.resolve(1);

        var FakePromise = function FakePromise(exec) {
          exec(function () {
            /* empty */
          }, function () {
            /* empty */
          });
        };

        var constructor = promise.constructor = {};
        constructor[SPECIES] = FakePromise;
        return !(promise.then(function () {
          /* empty */
        }) instanceof FakePromise);
      });
      var INCORRECT_ITERATION = FORCED || !checkCorrectnessOfIteration(function (iterable) {
        PromiseConstructor.all(iterable)['catch'](function () {
          /* empty */
        });
      }); // helpers

      var isThenable = function isThenable(it) {
        var then;
        return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
      };

      var notify = function notify(promise, state, isReject) {
        if (state.notified) return;
        state.notified = true;
        var chain = state.reactions;
        microtask(function () {
          var value = state.value;
          var ok = state.state == FULFILLED;
          var index = 0; // variable length - can't use forEach

          while (chain.length > index) {
            var reaction = chain[index++];
            var handler = ok ? reaction.ok : reaction.fail;
            var resolve = reaction.resolve;
            var reject = reaction.reject;
            var domain = reaction.domain;
            var result, then, exited;

            try {
              if (handler) {
                if (!ok) {
                  if (state.rejection === UNHANDLED) onHandleUnhandled(promise, state);
                  state.rejection = HANDLED;
                }

                if (handler === true) result = value;else {
                  if (domain) domain.enter();
                  result = handler(value); // can throw

                  if (domain) {
                    domain.exit();
                    exited = true;
                  }
                }

                if (result === reaction.promise) {
                  reject(TypeError('Promise-chain cycle'));
                } else if (then = isThenable(result)) {
                  then.call(result, resolve, reject);
                } else resolve(result);
              } else reject(value);
            } catch (error) {
              if (domain && !exited) domain.exit();
              reject(error);
            }
          }

          state.reactions = [];
          state.notified = false;
          if (isReject && !state.rejection) onUnhandled(promise, state);
        });
      };

      var dispatchEvent = function dispatchEvent(name, promise, reason) {
        var event, handler;

        if (DISPATCH_EVENT) {
          event = document.createEvent('Event');
          event.promise = promise;
          event.reason = reason;
          event.initEvent(name, false, true);
          global.dispatchEvent(event);
        } else event = {
          promise: promise,
          reason: reason
        };

        if (handler = global['on' + name]) handler(event);else if (name === UNHANDLED_REJECTION) hostReportErrors('Unhandled promise rejection', reason);
      };

      var onUnhandled = function onUnhandled(promise, state) {
        task.call(global, function () {
          var value = state.value;
          var IS_UNHANDLED = isUnhandled(state);
          var result;

          if (IS_UNHANDLED) {
            result = perform(function () {
              if (IS_NODE) {
                process.emit('unhandledRejection', value, promise);
              } else dispatchEvent(UNHANDLED_REJECTION, promise, value);
            }); // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should

            state.rejection = IS_NODE || isUnhandled(state) ? UNHANDLED : HANDLED;
            if (result.error) throw result.value;
          }
        });
      };

      var isUnhandled = function isUnhandled(state) {
        return state.rejection !== HANDLED && !state.parent;
      };

      var onHandleUnhandled = function onHandleUnhandled(promise, state) {
        task.call(global, function () {
          if (IS_NODE) {
            process.emit('rejectionHandled', promise);
          } else dispatchEvent(REJECTION_HANDLED, promise, state.value);
        });
      };

      var bind = function bind(fn, promise, state, unwrap) {
        return function (value) {
          fn(promise, state, value, unwrap);
        };
      };

      var internalReject = function internalReject(promise, state, value, unwrap) {
        if (state.done) return;
        state.done = true;
        if (unwrap) state = unwrap;
        state.value = value;
        state.state = REJECTED;
        notify(promise, state, true);
      };

      var internalResolve = function internalResolve(promise, state, value, unwrap) {
        if (state.done) return;
        state.done = true;
        if (unwrap) state = unwrap;

        try {
          if (promise === value) throw TypeError("Promise can't be resolved itself");
          var then = isThenable(value);

          if (then) {
            microtask(function () {
              var wrapper = {
                done: false
              };

              try {
                then.call(value, bind(internalResolve, promise, wrapper, state), bind(internalReject, promise, wrapper, state));
              } catch (error) {
                internalReject(promise, wrapper, error, state);
              }
            });
          } else {
            state.value = value;
            state.state = FULFILLED;
            notify(promise, state, false);
          }
        } catch (error) {
          internalReject(promise, {
            done: false
          }, error, state);
        }
      }; // constructor polyfill


      if (FORCED) {
        // 25.4.3.1 Promise(executor)
        PromiseConstructor = function Promise(executor) {
          anInstance(this, PromiseConstructor, PROMISE);
          aFunction(executor);
          Internal.call(this);
          var state = getInternalState(this);

          try {
            executor(bind(internalResolve, this, state), bind(internalReject, this, state));
          } catch (error) {
            internalReject(this, state, error);
          }
        }; // eslint-disable-next-line no-unused-vars


        Internal = function Promise(executor) {
          setInternalState(this, {
            type: PROMISE,
            done: false,
            notified: false,
            parent: false,
            reactions: [],
            rejection: false,
            state: PENDING,
            value: undefined
          });
        };

        Internal.prototype = redefineAll(PromiseConstructor.prototype, {
          // `Promise.prototype.then` method
          // https://tc39.github.io/ecma262/#sec-promise.prototype.then
          then: function then(onFulfilled, onRejected) {
            var state = getInternalPromiseState(this);
            var reaction = newPromiseCapability(speciesConstructor(this, PromiseConstructor));
            reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
            reaction.fail = typeof onRejected == 'function' && onRejected;
            reaction.domain = IS_NODE ? process.domain : undefined;
            state.parent = true;
            state.reactions.push(reaction);
            if (state.state != PENDING) notify(this, state, false);
            return reaction.promise;
          },
          // `Promise.prototype.catch` method
          // https://tc39.github.io/ecma262/#sec-promise.prototype.catch
          'catch': function _catch(onRejected) {
            return this.then(undefined, onRejected);
          }
        });

        OwnPromiseCapability = function OwnPromiseCapability() {
          var promise = new Internal();
          var state = getInternalState(promise);
          this.promise = promise;
          this.resolve = bind(internalResolve, promise, state);
          this.reject = bind(internalReject, promise, state);
        };

        newPromiseCapabilityModule.f = newPromiseCapability = function newPromiseCapability(C) {
          return C === PromiseConstructor || C === PromiseWrapper ? new OwnPromiseCapability(C) : newGenericPromiseCapability(C);
        };

        if (!IS_PURE && typeof NativePromise == 'function') {
          nativeThen = NativePromise.prototype.then; // wrap native Promise#then for native async functions

          redefine(NativePromise.prototype, 'then', function then(onFulfilled, onRejected) {
            var that = this;
            return new PromiseConstructor(function (resolve, reject) {
              nativeThen.call(that, resolve, reject);
            }).then(onFulfilled, onRejected); // https://github.com/zloirock/core-js/issues/640
          }, {
            unsafe: true
          }); // wrap fetch result

          if (typeof $fetch == 'function') $({
            global: true,
            enumerable: true,
            forced: true
          }, {
            // eslint-disable-next-line no-unused-vars
            fetch: function fetch(input
            /* , init */
            ) {
              return promiseResolve(PromiseConstructor, $fetch.apply(global, arguments));
            }
          });
        }
      }

      $({
        global: true,
        wrap: true,
        forced: FORCED
      }, {
        Promise: PromiseConstructor
      });
      setToStringTag(PromiseConstructor, PROMISE, false, true);
      setSpecies(PROMISE);
      PromiseWrapper = getBuiltIn(PROMISE); // statics

      $({
        target: PROMISE,
        stat: true,
        forced: FORCED
      }, {
        // `Promise.reject` method
        // https://tc39.github.io/ecma262/#sec-promise.reject
        reject: function reject(r) {
          var capability = newPromiseCapability(this);
          capability.reject.call(undefined, r);
          return capability.promise;
        }
      });
      $({
        target: PROMISE,
        stat: true,
        forced: IS_PURE || FORCED
      }, {
        // `Promise.resolve` method
        // https://tc39.github.io/ecma262/#sec-promise.resolve
        resolve: function resolve(x) {
          return promiseResolve(IS_PURE && this === PromiseWrapper ? PromiseConstructor : this, x);
        }
      });
      $({
        target: PROMISE,
        stat: true,
        forced: INCORRECT_ITERATION
      }, {
        // `Promise.all` method
        // https://tc39.github.io/ecma262/#sec-promise.all
        all: function all(iterable) {
          var C = this;
          var capability = newPromiseCapability(C);
          var resolve = capability.resolve;
          var reject = capability.reject;
          var result = perform(function () {
            var $promiseResolve = aFunction(C.resolve);
            var values = [];
            var counter = 0;
            var remaining = 1;
            iterate(iterable, function (promise) {
              var index = counter++;
              var alreadyCalled = false;
              values.push(undefined);
              remaining++;
              $promiseResolve.call(C, promise).then(function (value) {
                if (alreadyCalled) return;
                alreadyCalled = true;
                values[index] = value;
                --remaining || resolve(values);
              }, reject);
            });
            --remaining || resolve(values);
          });
          if (result.error) reject(result.value);
          return capability.promise;
        },
        // `Promise.race` method
        // https://tc39.github.io/ecma262/#sec-promise.race
        race: function race(iterable) {
          var C = this;
          var capability = newPromiseCapability(C);
          var reject = capability.reject;
          var result = perform(function () {
            var $promiseResolve = aFunction(C.resolve);
            iterate(iterable, function (promise) {
              $promiseResolve.call(C, promise).then(capability.resolve, reject);
            });
          });
          if (result.error) reject(result.value);
          return capability.promise;
        }
      });
      /***/
    },
    /* 553 */

    /***/
    function (module, exports, __webpack_require__) {
      var global = __webpack_require__(3);

      var getOwnPropertyDescriptor = __webpack_require__(54).f;

      var classof = __webpack_require__(30);

      var macrotask = __webpack_require__(296).set;

      var IS_IOS = __webpack_require__(297);

      var MutationObserver = global.MutationObserver || global.WebKitMutationObserver;
      var process = global.process;
      var Promise = global.Promise;
      var IS_NODE = classof(process) == 'process'; // Node.js 11 shows ExperimentalWarning on getting `queueMicrotask`

      var queueMicrotaskDescriptor = getOwnPropertyDescriptor(global, 'queueMicrotask');
      var queueMicrotask = queueMicrotaskDescriptor && queueMicrotaskDescriptor.value;
      var flush, head, last, notify, toggle, node, promise, then; // modern engines have queueMicrotask method

      if (!queueMicrotask) {
        flush = function flush() {
          var parent, fn;
          if (IS_NODE && (parent = process.domain)) parent.exit();

          while (head) {
            fn = head.fn;
            head = head.next;

            try {
              fn();
            } catch (error) {
              if (head) notify();else last = undefined;
              throw error;
            }
          }

          last = undefined;
          if (parent) parent.enter();
        }; // Node.js


        if (IS_NODE) {
          notify = function notify() {
            process.nextTick(flush);
          }; // browsers with MutationObserver, except iOS - https://github.com/zloirock/core-js/issues/339

        } else if (MutationObserver && !IS_IOS) {
          toggle = true;
          node = document.createTextNode('');
          new MutationObserver(flush).observe(node, {
            characterData: true
          });

          notify = function notify() {
            node.data = toggle = !toggle;
          }; // environments with maybe non-completely correct, but existent Promise

        } else if (Promise && Promise.resolve) {
          // Promise.resolve without an argument throws an error in LG WebOS 2
          promise = Promise.resolve(undefined);
          then = promise.then;

          notify = function notify() {
            then.call(promise, flush);
          }; // for other environments - macrotask based on:
          // - setImmediate
          // - MessageChannel
          // - window.postMessag
          // - onreadystatechange
          // - setTimeout

        } else {
          notify = function notify() {
            // strange IE + webpack dev server bug - use .call(global)
            macrotask.call(global, flush);
          };
        }
      }

      module.exports = queueMicrotask || function (fn) {
        var task = {
          fn: fn,
          next: undefined
        };
        if (last) last.next = task;

        if (!head) {
          head = task;
          notify();
        }

        last = task;
      };
      /***/

    },
    /* 554 */

    /***/
    function (module, exports, __webpack_require__) {
      var global = __webpack_require__(3);

      module.exports = function (a, b) {
        var console = global.console;

        if (console && console.error) {
          arguments.length === 1 ? console.error(a) : console.error(a, b);
        }
      };
      /***/

    },
    /* 555 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var $ = __webpack_require__(1);

      var IS_PURE = __webpack_require__(56);

      var NativePromise = __webpack_require__(295);

      var fails = __webpack_require__(4);

      var getBuiltIn = __webpack_require__(36);

      var speciesConstructor = __webpack_require__(38);

      var promiseResolve = __webpack_require__(298);

      var redefine = __webpack_require__(25); // Safari bug https://bugs.webkit.org/show_bug.cgi?id=200829


      var NON_GENERIC = !!NativePromise && fails(function () {
        NativePromise.prototype['finally'].call({
          then: function then() {
            /* empty */
          }
        }, function () {
          /* empty */
        });
      }); // `Promise.prototype.finally` method
      // https://tc39.github.io/ecma262/#sec-promise.prototype.finally

      $({
        target: 'Promise',
        proto: true,
        real: true,
        forced: NON_GENERIC
      }, {
        'finally': function _finally(onFinally) {
          var C = speciesConstructor(this, getBuiltIn('Promise'));
          var isFunction = typeof onFinally == 'function';
          return this.then(isFunction ? function (x) {
            return promiseResolve(C, onFinally()).then(function () {
              return x;
            });
          } : onFinally, isFunction ? function (e) {
            return promiseResolve(C, onFinally()).then(function () {
              throw e;
            });
          } : onFinally);
        }
      }); // patch native Promise.prototype for native async functions

      if (!IS_PURE && typeof NativePromise == 'function' && !NativePromise.prototype['finally']) {
        redefine(NativePromise.prototype, 'finally', getBuiltIn('Promise').prototype['finally']);
      }
      /***/

    },
    /* 556 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var $ = __webpack_require__(1);

      var DESCRIPTORS = __webpack_require__(11);

      var getPrototypeOf = __webpack_require__(60);

      var setPrototypeOf = __webpack_require__(45);

      var create = __webpack_require__(58);

      var defineProperty = __webpack_require__(15);

      var createPropertyDescriptor = __webpack_require__(42);

      var iterate = __webpack_require__(136);

      var createNonEnumerableProperty = __webpack_require__(18);

      var InternalStateModule = __webpack_require__(35);

      var setInternalState = InternalStateModule.set;
      var getInternalAggregateErrorState = InternalStateModule.getterFor('AggregateError');

      var $AggregateError = function AggregateError(errors, message) {
        var that = this;
        if (!(that instanceof $AggregateError)) return new $AggregateError(errors, message);

        if (setPrototypeOf) {
          that = setPrototypeOf(new Error(message), getPrototypeOf(that));
        }

        var errorsArray = [];
        iterate(errors, errorsArray.push, errorsArray);
        if (DESCRIPTORS) setInternalState(that, {
          errors: errorsArray,
          type: 'AggregateError'
        });else that.errors = errorsArray;
        if (message !== undefined) createNonEnumerableProperty(that, 'message', String(message));
        return that;
      };

      $AggregateError.prototype = create(Error.prototype, {
        constructor: createPropertyDescriptor(5, $AggregateError),
        message: createPropertyDescriptor(5, ''),
        name: createPropertyDescriptor(5, 'AggregateError')
      });
      if (DESCRIPTORS) defineProperty.f($AggregateError.prototype, 'errors', {
        get: function get() {
          return getInternalAggregateErrorState(this).errors;
        },
        configurable: true
      });
      $({
        global: true
      }, {
        AggregateError: $AggregateError
      });
      /***/
    },
    /* 557 */

    /***/
    function (module, exports, __webpack_require__) {
      // TODO: Remove from `core-js@4`
      __webpack_require__(299);
      /***/

    },
    /* 558 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var $ = __webpack_require__(1);

      var newPromiseCapabilityModule = __webpack_require__(109);

      var perform = __webpack_require__(137); // `Promise.try` method
      // https://github.com/tc39/proposal-promise-try


      $({
        target: 'Promise',
        stat: true
      }, {
        'try': function _try(callbackfn) {
          var promiseCapability = newPromiseCapabilityModule.f(this);
          var result = perform(callbackfn);
          (result.error ? promiseCapability.reject : promiseCapability.resolve)(result.value);
          return promiseCapability.promise;
        }
      });
      /***/
    },
    /* 559 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var $ = __webpack_require__(1);

      var aFunction = __webpack_require__(44);

      var getBuiltIn = __webpack_require__(36);

      var newPromiseCapabilityModule = __webpack_require__(109);

      var perform = __webpack_require__(137);

      var iterate = __webpack_require__(136);

      var PROMISE_ANY_ERROR = 'No one promise resolved'; // `Promise.any` method
      // https://github.com/tc39/proposal-promise-any

      $({
        target: 'Promise',
        stat: true
      }, {
        any: function any(iterable) {
          var C = this;
          var capability = newPromiseCapabilityModule.f(C);
          var resolve = capability.resolve;
          var reject = capability.reject;
          var result = perform(function () {
            var promiseResolve = aFunction(C.resolve);
            var errors = [];
            var counter = 0;
            var remaining = 1;
            var alreadyResolved = false;
            iterate(iterable, function (promise) {
              var index = counter++;
              var alreadyRejected = false;
              errors.push(undefined);
              remaining++;
              promiseResolve.call(C, promise).then(function (value) {
                if (alreadyRejected || alreadyResolved) return;
                alreadyResolved = true;
                resolve(value);
              }, function (e) {
                if (alreadyRejected || alreadyResolved) return;
                alreadyRejected = true;
                errors[index] = e;
                --remaining || reject(new (getBuiltIn('AggregateError'))(errors, PROMISE_ANY_ERROR));
              });
            });
            --remaining || reject(new (getBuiltIn('AggregateError'))(errors, PROMISE_ANY_ERROR));
          });
          if (result.error) reject(result.value);
          return capability.promise;
        }
      });
      /***/
    },
    /* 560 */

    /***/
    function (module, exports, __webpack_require__) {
      __webpack_require__(561);

      var path = __webpack_require__(114);

      module.exports = path.Object.values;
      /***/
    },
    /* 561 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(1);

      var $values = __webpack_require__(562).values; // `Object.values` method
      // https://tc39.github.io/ecma262/#sec-object.values


      $({
        target: 'Object',
        stat: true
      }, {
        values: function values(O) {
          return $values(O);
        }
      });
      /***/
    },
    /* 562 */

    /***/
    function (module, exports, __webpack_require__) {
      var DESCRIPTORS = __webpack_require__(11);

      var objectKeys = __webpack_require__(94);

      var toIndexedObject = __webpack_require__(27);

      var propertyIsEnumerable = __webpack_require__(110).f; // `Object.{ entries, values }` methods implementation


      var createMethod = function createMethod(TO_ENTRIES) {
        return function (it) {
          var O = toIndexedObject(it);
          var keys = objectKeys(O);
          var length = keys.length;
          var i = 0;
          var result = [];
          var key;

          while (length > i) {
            key = keys[i++];

            if (!DESCRIPTORS || propertyIsEnumerable.call(O, key)) {
              result.push(TO_ENTRIES ? [key, O[key]] : O[key]);
            }
          }

          return result;
        };
      };

      module.exports = {
        // `Object.entries` method
        // https://tc39.github.io/ecma262/#sec-object.entries
        entries: createMethod(true),
        // `Object.values` method
        // https://tc39.github.io/ecma262/#sec-object.values
        values: createMethod(false)
      };
      /***/
    },
    /* 563 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";
      /* WEBPACK VAR INJECTION */

      (function (global) {
        // eslint-disable-next-line func-names
        module.exports = function () {
          if ((typeof globalThis === "undefined" ? "undefined" : _typeof4(globalThis)) === 'object') {
            return globalThis;
          }

          var g;

          try {
            // This works if eval is allowed (see CSP)
            // eslint-disable-next-line no-new-func
            g = this || new Function('return this')();
          } catch (e) {
            // This works if the window reference is available
            if ((typeof window === "undefined" ? "undefined" : _typeof4(window)) === 'object') {
              return window;
            } // This works if the self reference is available


            if ((typeof self === "undefined" ? "undefined" : _typeof4(self)) === 'object') {
              return self;
            } // This works if the global reference is available


            if (typeof global !== 'undefined') {
              return global;
            }
          }

          return g;
        }();
        /* WEBPACK VAR INJECTION */

      }).call(this, __webpack_require__(24));
      /***/
    }
    /******/
    ])
  );
});
},{"buffer":"../node_modules/buffer/index.js","process":"../node_modules/process/browser.js"}],"../node_modules/parcel-bundler/src/builtins/hmr-runtime.js":[function(require,module,exports) {
var global = arguments[3];
var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;

function Module(moduleName) {
  OldModule.call(this, moduleName);
  this.hot = {
    data: module.bundle.hotData,
    _acceptCallbacks: [],
    _disposeCallbacks: [],
    accept: function (fn) {
      this._acceptCallbacks.push(fn || function () {});
    },
    dispose: function (fn) {
      this._disposeCallbacks.push(fn);
    }
  };
  module.bundle.hotData = null;
}

module.bundle.Module = Module;
var checkedAssets, assetsToAccept;
var parent = module.bundle.parent;

if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
  var hostname = "" || location.hostname;
  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';
  var ws = new WebSocket(protocol + '://' + hostname + ':' + "62553" + '/');

  ws.onmessage = function (event) {
    checkedAssets = {};
    assetsToAccept = [];
    var data = JSON.parse(event.data);

    if (data.type === 'update') {
      var handled = false;
      data.assets.forEach(function (asset) {
        if (!asset.isNew) {
          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);

          if (didAccept) {
            handled = true;
          }
        }
      }); // Enable HMR for CSS by default.

      handled = handled || data.assets.every(function (asset) {
        return asset.type === 'css' && asset.generated.js;
      });

      if (handled) {
        console.clear();
        data.assets.forEach(function (asset) {
          hmrApply(global.parcelRequire, asset);
        });
        assetsToAccept.forEach(function (v) {
          hmrAcceptRun(v[0], v[1]);
        });
      } else if (location.reload) {
        // `location` global exists in a web worker context but lacks `.reload()` function.
        location.reload();
      }
    }

    if (data.type === 'reload') {
      ws.close();

      ws.onclose = function () {
        location.reload();
      };
    }

    if (data.type === 'error-resolved') {
      console.log('[parcel] ✨ Error resolved');
      removeErrorOverlay();
    }

    if (data.type === 'error') {
      console.error('[parcel] 🚨  ' + data.error.message + '\n' + data.error.stack);
      removeErrorOverlay();
      var overlay = createErrorOverlay(data);
      document.body.appendChild(overlay);
    }
  };
}

function removeErrorOverlay() {
  var overlay = document.getElementById(OVERLAY_ID);

  if (overlay) {
    overlay.remove();
  }
}

function createErrorOverlay(data) {
  var overlay = document.createElement('div');
  overlay.id = OVERLAY_ID; // html encode message and stack trace

  var message = document.createElement('div');
  var stackTrace = document.createElement('pre');
  message.innerText = data.error.message;
  stackTrace.innerText = data.error.stack;
  overlay.innerHTML = '<div style="background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;">' + '<span style="background: red; padding: 2px 4px; border-radius: 2px;">ERROR</span>' + '<span style="top: 2px; margin-left: 5px; position: relative;">🚨</span>' + '<div style="font-size: 18px; font-weight: bold; margin-top: 20px;">' + message.innerHTML + '</div>' + '<pre>' + stackTrace.innerHTML + '</pre>' + '</div>';
  return overlay;
}

function getParents(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return [];
  }

  var parents = [];
  var k, d, dep;

  for (k in modules) {
    for (d in modules[k][1]) {
      dep = modules[k][1][d];

      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {
        parents.push(k);
      }
    }
  }

  if (bundle.parent) {
    parents = parents.concat(getParents(bundle.parent, id));
  }

  return parents;
}

function hmrApply(bundle, asset) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (modules[asset.id] || !bundle.parent) {
    var fn = new Function('require', 'module', 'exports', asset.generated.js);
    asset.isNew = !modules[asset.id];
    modules[asset.id] = [fn, asset.deps];
  } else if (bundle.parent) {
    hmrApply(bundle.parent, asset);
  }
}

function hmrAcceptCheck(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (!modules[id] && bundle.parent) {
    return hmrAcceptCheck(bundle.parent, id);
  }

  if (checkedAssets[id]) {
    return;
  }

  checkedAssets[id] = true;
  var cached = bundle.cache[id];
  assetsToAccept.push([bundle, id]);

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    return true;
  }

  return getParents(global.parcelRequire, id).some(function (id) {
    return hmrAcceptCheck(global.parcelRequire, id);
  });
}

function hmrAcceptRun(bundle, id) {
  var cached = bundle.cache[id];
  bundle.hotData = {};

  if (cached) {
    cached.hot.data = bundle.hotData;
  }

  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {
    cached.hot._disposeCallbacks.forEach(function (cb) {
      cb(bundle.hotData);
    });
  }

  delete bundle.cache[id];
  bundle(id);
  cached = bundle.cache[id];

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    cached.hot._acceptCallbacks.forEach(function (cb) {
      cb();
    });

    return true;
  }
}
},{}]},{},["../node_modules/parcel-bundler/src/builtins/hmr-runtime.js"], null)
//# sourceMappingURL=/pdfmake.e8bd4d51.js.map